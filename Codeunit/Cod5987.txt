OBJECT Codeunit 5987 Serv-Posting Journals Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01,NAVES6.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 49=imd,
                TableData 356=imd,
                TableData 357=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ServiceHeader@1002 : Record 5900;
      Currency@1018 : Record 4;
      CurrExchRate@1012 : Record 330;
      TempJnlLineDim@1011 : TEMPORARY Record 356;
      TempDocDim@1010 : TEMPORARY Record 357;
      SalesSetup@1013 : Record 311;
      DimMgt@1014 : Codeunit 408;
      ServITRMgt@1001 : Codeunit 5985;
      GenJnlPostLine@1004 : Codeunit 12;
      ItemJnlPostLine@1000 : Codeunit 22;
      ResJnlPostLine@1005 : Codeunit 212;
      ServLedgEntryPostSale@1025 : Codeunit 5912;
      GenJnlLineDocNo@1016 : Code[20];
      GenJnlLineExtDocNo@1006 : Code[20];
      SrcCode@1003 : Code[10];
      Ship@1007 : Boolean;
      Consume@1008 : Boolean;
      Invoice@1009 : Boolean;
      ItemJnlRollRndg@1015 : Boolean;

    PROCEDURE Initialize@9(VAR TempServHeader@1000 : Record 5900;TmpShip@1002 : Boolean;TmpConsume@1003 : Boolean;TmpInvoice@1004 : Boolean);
    VAR
      SrcCodeSetup@1001 : Record 242;
    BEGIN
      ServiceHeader := TempServHeader;
      SetPostingOptions(TmpShip,TmpConsume,TmpInvoice);
      SrcCodeSetup.GET;
      SalesSetup.GET;
      SrcCode := SrcCodeSetup."Service Management";
      GetCurrency(ServiceHeader."Currency Code",Currency);
      ItemJnlRollRndg := FALSE;
      GenJnlLineDocNo := '';
      GenJnlLineExtDocNo := '';
    END;

    PROCEDURE Finalize@7();
    BEGIN
      CLEAR(GenJnlPostLine);
      CLEAR(ResJnlPostLine);
      CLEAR(ItemJnlPostLine);
      CLEAR(ServLedgEntryPostSale);
    END;

    PROCEDURE SetPostingOptions@23(PassedShip@1000 : Boolean;PassedConsume@1001 : Boolean;PassedInvoice@1002 : Boolean);
    BEGIN
      Ship := PassedShip;
      Consume := PassedConsume;
      Invoice := PassedInvoice;
    END;

    PROCEDURE SetItemJnlRollRndg@12(PassedItemJnlRollRndg@1000 : Boolean);
    BEGIN
      ItemJnlRollRndg := PassedItemJnlRollRndg;
    END;

    PROCEDURE SetGenJnlLineDocNos@21(DocType@1000 : Integer;DocNo@1001 : Code[20];ExtDocNo@1002 : Code[20]);
    BEGIN
      GenJnlLineDocNo := DocNo;
      GenJnlLineExtDocNo := ExtDocNo;
    END;

    LOCAL PROCEDURE GetCurrency@46(CurrencyCode@1000 : Code[10];VAR Currency@1001 : Record 4);
    BEGIN
      IF CurrencyCode = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        Currency.GET(CurrencyCode);
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10];VAR Location@1001 : Record 14);
    BEGIN
      IF LocationCode = '' THEN
        Location.GetLocationSetup(LocationCode,Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    PROCEDURE PostItemJnlLine@10(VAR ServiceLine@1000 : Record 5902;QtyToBeShipped@1001 : Decimal;QtyToBeShippedBase@1002 : Decimal;QtyToBeConsumed@1016 : Decimal;QtyToBeConsumedBase@1017 : Decimal;QtyToBeInvoiced@1003 : Decimal;QtyToBeInvoicedBase@1004 : Decimal;ItemLedgShptEntryNo@1005 : Integer;VAR TrackingSpecification@1009 : Record 336;VAR TempTrackingSpecificationInv@1024 : Record 336;VAR TempHandlingSpecification@1023 : Record 336;VAR TempTrackingSpecification@1008 : TEMPORARY Record 336;VAR ServShptHeader@1006 : Record 5990;ServShptLineDocNo@1022 : Code[20]) : Integer;
    VAR
      ItemJnlLine@1014 : Record 83;
      Location@1013 : Record 14;
      TempWhseJnlLine@1012 : TEMPORARY Record 7311;
      TempWhseJnlLine2@1011 : TEMPORARY Record 7311;
      WhseJnlPostLine@1018 : Codeunit 7301;
      RemAmt@1021 : Decimal;
      RemDiscAmt@1019 : Decimal;
      PostWhseJnlLine@1010 : Boolean;
      CheckApplFromItemEntry@1020 : Boolean;
    BEGIN
      IF NOT ItemJnlRollRndg THEN BEGIN
        RemAmt := 0;
        RemDiscAmt := 0;
      END;
      WITH ServiceLine DO BEGIN
        ItemJnlLine.INIT;
        ItemJnlLine."Posting Date" := ServiceHeader."Posting Date";
        ItemJnlLine."Document Date" := ServiceHeader."Document Date";
        ItemJnlLine."Source Posting Group" := ServiceHeader."Customer Posting Group";
        ItemJnlLine."Salespers./Purch. Code" := ServiceHeader."Salesperson Code";
        ItemJnlLine."Country/Region Code" := ServiceHeader."VAT Country/Region Code";
        ItemJnlLine."Reason Code" := ServiceHeader."Reason Code";
        ItemJnlLine."Item No." := "No.";
        ItemJnlLine.Description := Description;
        ItemJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ItemJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ItemJnlLine."Location Code" := "Location Code";
        ItemJnlLine."Bin Code" := "Bin Code";
        ItemJnlLine."Variant Code" := "Variant Code";
        ItemJnlLine."Inventory Posting Group" := "Posting Group";
        ItemJnlLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        ItemJnlLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        ItemJnlLine."Applies-to Entry" := "Appl.-to Item Entry";
        ItemJnlLine."Transaction Type" := "Transaction Type";
        ItemJnlLine."Transport Method" := "Transport Method";
        ItemJnlLine."Entry/Exit Point" := "Exit Point";
        ItemJnlLine.Area := Area;
        ItemJnlLine."Transaction Specification" := "Transaction Specification";
        ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Sale;
        ItemJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        ItemJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        ItemJnlLine."Derived from Blanket Order" := FALSE;
        ItemJnlLine."Item Category Code" := "Item Category Code";
        ItemJnlLine.Nonstock := Nonstock;
        ItemJnlLine."Product Group Code" := "Product Group Code";
        ItemJnlLine."Return Reason Code" := "Return Reason Code";
        ItemJnlLine."Order Date" := ServiceHeader."Order Date";
        ItemJnlLine."Serial No." := TrackingSpecification."Serial No.";
        ItemJnlLine."Lot No." := TrackingSpecification."Lot No.";
        ItemJnlLine."Job No." := "Job No.";
        ItemJnlLine."Job Task No." := "Job Task No.";

        IF QtyToBeShipped = 0 THEN BEGIN
          IF "Document Type" = "Document Type"::"Credit Memo" THEN
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Service Credit Memo"
          ELSE
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Service Invoice";
          IF QtyToBeConsumed <> 0 THEN BEGIN
            ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::"Negative Adjmt.";
            ItemJnlLine."Document No." := ServShptLineDocNo;
            ItemJnlLine."External Document No." := '';
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Service Shipment";
          END ELSE BEGIN
            ItemJnlLine."Document No." := GenJnlLineDocNo;
            ItemJnlLine."External Document No." := GenJnlLineExtDocNo;
          END;
          ItemJnlLine."Posting No. Series" := ServiceHeader."Posting No. Series";
        END ELSE BEGIN
          IF "Document Type" <> "Document Type"::"Credit Memo" THEN BEGIN
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Service Shipment";
            ItemJnlLine."Document No." := ServShptHeader."No.";
            ItemJnlLine."Posting No. Series" := ServShptHeader."No. Series";
          END;
          IF (QtyToBeInvoiced <> 0) OR (QtyToBeConsumed <> 0) THEN BEGIN
            IF QtyToBeConsumed <> 0 THEN
              ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::"Negative Adjmt.";
            ItemJnlLine."Invoice No." := GenJnlLineDocNo;
            ItemJnlLine."External Document No." := GenJnlLineExtDocNo;
            IF ItemJnlLine."Document No." = '' THEN BEGIN
              IF "Document Type" = "Document Type"::"Credit Memo" THEN
                ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Service Credit Memo"
              ELSE
                ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Service Invoice";
              ItemJnlLine."Document No." := GenJnlLineDocNo;
            END;
            ItemJnlLine."Posting No. Series" := ServiceHeader."Posting No. Series";
          END;
          IF (QtyToBeConsumed <> 0) AND (ItemJnlLine."Document No." = '') THEN
            ItemJnlLine."Document No." := ServShptLineDocNo;

        END;

        ItemJnlLine."Document Line No." := "Line No.";
        ItemJnlLine.Quantity := -QtyToBeShipped;
        ItemJnlLine."Quantity (Base)" := -QtyToBeShippedBase;
        IF QtyToBeInvoiced <> 0 THEN BEGIN
          ItemJnlLine."Invoiced Quantity" := -QtyToBeInvoiced;
          ItemJnlLine."Invoiced Qty. (Base)" := -QtyToBeInvoicedBase;
        END ELSE
          IF QtyToBeConsumed <> 0 THEN BEGIN
            ItemJnlLine."Invoiced Quantity" := -QtyToBeConsumed;
            ItemJnlLine."Invoiced Qty. (Base)" := -QtyToBeConsumedBase;
          END;
        ItemJnlLine."Unit Cost" := "Unit Cost (LCY)";
        ItemJnlLine."Source Currency Code" := ServiceHeader."Currency Code";
        ItemJnlLine."Unit Cost (ACY)" := "Unit Cost";
        ItemJnlLine."Value Entry Type" := ItemJnlLine."Value Entry Type"::"Direct Cost";
        ItemJnlLine."Applies-from Entry" := "Appl.-from Item Entry";

        IF Invoice AND (QtyToBeInvoiced <> 0) THEN BEGIN
          ItemJnlLine.Amount := -(Amount * (QtyToBeInvoiced / "Qty. to Invoice") - RemAmt);
          IF ServiceHeader."Prices Including VAT" THEN
            ItemJnlLine."Discount Amount" :=
              -(("Line Discount Amount" + "Inv. Discount Amount") / (1 + "VAT %" / 100) *
                (QtyToBeInvoiced / "Qty. to Invoice") - RemDiscAmt)
          ELSE
            ItemJnlLine."Discount Amount" :=
              -("Line Discount Amount" * (QtyToBeInvoiced / "Qty. to Invoice") - RemDiscAmt);
        END ELSE
          IF Consume AND (QtyToBeConsumed <> 0) THEN BEGIN
            ItemJnlLine.Amount := -(Amount * QtyToBeConsumed - RemAmt);
            ItemJnlLine."Discount Amount" :=
              -("Line Discount Amount" * QtyToBeConsumed - RemDiscAmt);
          END;

        IF (QtyToBeInvoiced <> 0) OR (QtyToBeConsumed <> 0) THEN BEGIN
          RemAmt := ItemJnlLine.Amount - ROUND(ItemJnlLine.Amount);
          RemDiscAmt := ItemJnlLine."Discount Amount" - ROUND(ItemJnlLine."Discount Amount");
          ItemJnlLine.Amount := ROUND(ItemJnlLine.Amount);
          ItemJnlLine."Discount Amount" := ROUND(ItemJnlLine."Discount Amount");
        END ELSE BEGIN
          IF ServiceHeader."Prices Including VAT" THEN
            ItemJnlLine.Amount :=
              -((QtyToBeShipped * "Unit Price" * (1 - "Line Discount %" / 100) / (1 + "VAT %" / 100)) - RemAmt)
          ELSE
            ItemJnlLine.Amount :=
              -((QtyToBeShipped * "Unit Price" * (1 - "Line Discount %" / 100)) - RemAmt);
          RemAmt := ItemJnlLine.Amount - ROUND(ItemJnlLine.Amount);
          IF ServiceHeader."Currency Code" <> '' THEN
            ItemJnlLine.Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  ServiceHeader."Posting Date",ServiceHeader."Currency Code",
                  ItemJnlLine.Amount,ServiceHeader."Currency Factor"))
          ELSE
            ItemJnlLine.Amount := ROUND(ItemJnlLine.Amount);
        END;

        ItemJnlLine."Source Type" := ItemJnlLine."Source Type"::Customer;
        ItemJnlLine."Source No." := "Customer No.";
        ItemJnlLine."Source Code" := SrcCode;
        ItemJnlLine."Item Shpt. Entry No." := ItemLedgShptEntryNo;

        // IF ("Appl.-to Job Entry" = 0) AND ("Job Applies-to ID" = '') THEN BEGIN
        IF SalesSetup."Exact Cost Reversing Mandatory" AND (Type = Type::Item) THEN
          IF "Document Type" = "Document Type"::"Credit Memo" THEN
            CheckApplFromItemEntry := Quantity > 0
          ELSE
            CheckApplFromItemEntry := Quantity < 0;

        IF ("Location Code" <> '') AND (Type = Type::Item) AND (ItemJnlLine.Quantity <> 0) THEN BEGIN
          GetLocation("Location Code",Location);
          IF (("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
              Location."Directed Put-away and Pick") OR
             Location."Bin Mandatory"
          THEN BEGIN
            CreateWhseJnlLine(ItemJnlLine,ServiceLine,TempWhseJnlLine,Location);
            PostWhseJnlLine := TRUE;
          END;
        END;

        IF QtyToBeShippedBase <> 0 THEN
          IF "Document Type" = "Document Type"::"Credit Memo" THEN
            ServITRMgt.TransServLineToItemJnlLine(ServiceLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry)
          ELSE
            ServITRMgt.TransferReservToItemJnlLine(
              ServiceLine,ItemJnlLine,-QtyToBeShippedBase,TempTrackingSpecification,CheckApplFromItemEntry);

        IF CheckApplFromItemEntry THEN
          TESTFIELD("Appl.-from Item Entry");

        TempJnlLineDim.DELETEALL;
        TempDocDim.RESET;
        TempDocDim.SETRANGE("Table ID",DATABASE::"Service Line");
        TempDocDim.SETRANGE("Line No.","Line No.");
        DimMgt.CopyDocDimToJnlLineDim(TempDocDim,TempJnlLineDim);
        ItemJnlPostLine.RunWithCheck(ItemJnlLine,TempJnlLineDim);

        IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification) THEN
          ServITRMgt.InsertTempHandlngSpecification(DATABASE::"Service Line",
            ServiceLine,TempHandlingSpecification,
            TempTrackingSpecification,TempTrackingSpecificationInv,
            QtyToBeInvoiced <> 0);

        IF PostWhseJnlLine THEN BEGIN
          ServITRMgt.SplitWhseJnlLine(TempWhseJnlLine,TempWhseJnlLine2,TempTrackingSpecification,FALSE);
          IF TempWhseJnlLine2.FIND('-') THEN
            REPEAT
              WhseJnlPostLine.RUN(TempWhseJnlLine2);
            UNTIL TempWhseJnlLine2.NEXT = 0;
        END;

      END;
      CLEAR(WhseJnlPostLine);
      EXIT(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE CreateWhseJnlLine@7302(ItemJnlLine@1000 : Record 83;ServLine@1001 : Record 5902;VAR TempWhseJnlLine@1002 : TEMPORARY Record 7311;Location@1005 : Record 14);
    VAR
      WMSMgmt@1004 : Codeunit 7302;
      WhseMgt@1003 : Codeunit 5775;
    BEGIN
      WITH ServLine DO BEGIN
        WMSMgmt.CheckAdjmtBin(Location,ItemJnlLine.Quantity,TRUE);
        WMSMgmt.CreateWhseJnlLine(ItemJnlLine,0,TempWhseJnlLine,FALSE,FALSE);
        TempWhseJnlLine."Source Type" := DATABASE::"Service Line";
        TempWhseJnlLine."Source Subtype" := "Document Type";
        TempWhseJnlLine."Source Code" := SrcCode;
        WhseMgt.GetSourceDocument(
          TempWhseJnlLine."Source Document",TempWhseJnlLine."Source Type",TempWhseJnlLine."Source Subtype");
        TempWhseJnlLine."Source No." := "Document No.";
        TempWhseJnlLine."Source Line No." := "Line No.";
        CASE "Document Type" OF
          "Document Type"::Order:
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted Shipment";
          "Document Type"::Invoice:
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted S. Inv.";
          "Document Type"::"Credit Memo":
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted S. Cr. Memo";
        END;
        TempWhseJnlLine."Reference No." := ItemJnlLine."Document No.";
      END;
    END;

    PROCEDURE PostGenGnlLineSale@2(VAR InvPostingBuffer@1002 : ARRAY [2] OF Record 49;VAR ServAmtsMgt@1001 : Codeunit 5986;GenJnlLineDocType@1003 : Integer;GenJnlLineDocNo@1004 : Code[20];GenJnlLineExtDocNo@1005 : Code[20]);
    VAR
      GenJnlLine@1000 : Record 81;
      TempDimBuf@1006 : TEMPORARY Record 360;
    BEGIN
      WITH ServiceHeader DO BEGIN
        GenJnlLine.INIT;
        GenJnlLine."Posting Date" := "Posting Date";
        GenJnlLine."Document Date" := "Document Date";
        GenJnlLine.Description := "Posting Description";
        GenJnlLine."Reason Code" := "Reason Code";
        GenJnlLine."Document Type" := GenJnlLineDocType;
        GenJnlLine."Document No." := GenJnlLineDocNo;
        GenJnlLine."External Document No." := GenJnlLineExtDocNo;
        GenJnlLine."Account No." := InvPostingBuffer[1]."G/L Account";
        GenJnlLine."System-Created Entry" := InvPostingBuffer[1]."System-Created Entry";
        GenJnlLine.Amount := InvPostingBuffer[1].Amount;
        GenJnlLine."Source Currency Code" := "Currency Code";
        GenJnlLine."Source Currency Amount" := InvPostingBuffer[1]."Amount (ACY)";
        GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Sale;
        GenJnlLine."Gen. Bus. Posting Group" := InvPostingBuffer[1]."Gen. Bus. Posting Group";
        GenJnlLine."Gen. Prod. Posting Group" := InvPostingBuffer[1]."Gen. Prod. Posting Group";
        GenJnlLine."VAT Bus. Posting Group" := InvPostingBuffer[1]."VAT Bus. Posting Group";
        GenJnlLine."VAT Prod. Posting Group" := InvPostingBuffer[1]."VAT Prod. Posting Group";
        GenJnlLine."Tax Area Code" := InvPostingBuffer[1]."Tax Area Code";
        GenJnlLine."Tax Liable" := InvPostingBuffer[1]."Tax Liable";
        GenJnlLine."Tax Group Code" := InvPostingBuffer[1]."Tax Group Code";
        GenJnlLine."Use Tax" := InvPostingBuffer[1]."Use Tax";
        GenJnlLine.Quantity := InvPostingBuffer[1].Quantity;
        GenJnlLine."VAT Calculation Type" := InvPostingBuffer[1]."VAT Calculation Type";
        GenJnlLine."VAT Base Amount" := InvPostingBuffer[1]."VAT Base Amount";
        GenJnlLine."VAT Base Discount %" := "VAT Base Discount %";
        GenJnlLine."Source Curr. VAT Base Amount" := InvPostingBuffer[1]."VAT Base Amount (ACY)";
        GenJnlLine."VAT Amount" := InvPostingBuffer[1]."VAT Amount";
        GenJnlLine."Source Curr. VAT Amount" := InvPostingBuffer[1]."VAT Amount (ACY)";
        GenJnlLine."VAT Difference" := InvPostingBuffer[1]."VAT Difference";
        GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
        GenJnlLine."Shortcut Dimension 1 Code" := InvPostingBuffer[1]."Global Dimension 1 Code";
        GenJnlLine."Shortcut Dimension 2 Code" := InvPostingBuffer[1]."Global Dimension 2 Code";
        GenJnlLine."Source Code" := SrcCode;
        GenJnlLine."EU 3-Party Trade" := "EU 3-Party Trade";
        GenJnlLine."Sell-to/Buy-from No." := "Customer No.";
        GenJnlLine."Bill-to/Pay-to No." := "Bill-to Customer No.";
        GenJnlLine."Country/Region Code" := "VAT Country/Region Code";
        GenJnlLine."VAT Registration No." := "VAT Registration No.";
        GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
        GenJnlLine."Source No." := "Bill-to Customer No.";
        GenJnlLine."Posting No. Series" := "Posting No. Series";
        GenJnlLine."Ship-to/Order Address Code" := "Ship-to Code";
        GenJnlLine."Payment Terms Code" := "Payment Terms Code";
        GenJnlLine."Payment Method Code" := "Payment Method Code";

      END;
      TempJnlLineDim.DELETEALL;
      TempDimBuf.DELETEALL;
      ServAmtsMgt.GetDimensions(InvPostingBuffer[1]."Dimension Entry No.",TempDimBuf);

      DimMgt.CopyDimBufToJnlLineDim(
        TempDimBuf,TempJnlLineDim,GenJnlLine."Journal Template Name",
        GenJnlLine."Journal Batch Name",GenJnlLine."Line No.");
      GenJnlPostLine.RunWithCheck(GenJnlLine,TempJnlLineDim);


      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
      GenJnlLine.VALIDATE("FA Posting Type",GenJnlLine."FA Posting Type"::" ");
    END;

    PROCEDURE PostGenJnlLineReceivable@3(VAR TotalServiceLine@1004 : Record 5902;VAR TotalServiceLineLCY@1005 : Record 5902;GenJnlLineDocType@1003 : Integer;GenJnlLineDocNo@1002 : Code[20];GenJnlLineExtDocNo@1001 : Code[20]);
    VAR
      GenJnlLine@1000 : Record 81;
    BEGIN
      GenJnlLine.INIT;
      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
      GenJnlLine.VALIDATE("FA Posting Type",GenJnlLine."FA Posting Type"::" ");

      WITH ServiceHeader DO BEGIN
        GenJnlLine."Posting Date" := "Posting Date";
        GenJnlLine."Document Date" := "Document Date";
        GenJnlLine.Description := "Posting Description";
        GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        GenJnlLine."Reason Code" := "Reason Code";
        GenJnlLine."Account Type" := GenJnlLine."Account Type"::Customer;
        GenJnlLine."Account No." := "Bill-to Customer No.";
        GenJnlLine."Document Type" := GenJnlLineDocType;
        GenJnlLine."Document No." := GenJnlLineDocNo;
        GenJnlLine."External Document No." := GenJnlLineExtDocNo;
        GenJnlLine."Currency Code" := "Currency Code";
        GenJnlLine.Amount := -TotalServiceLine."Amount Including VAT";
        GenJnlLine."Source Currency Code" := "Currency Code";
        GenJnlLine."Source Currency Amount" := -TotalServiceLine."Amount Including VAT";
        GenJnlLine."Amount (LCY)" := -TotalServiceLineLCY."Amount Including VAT";
        IF "Currency Code" = '' THEN
          GenJnlLine."Currency Factor" := 1
        ELSE
          GenJnlLine."Currency Factor" := "Currency Factor";
        GenJnlLine."Sales/Purch. (LCY)" := -TotalServiceLineLCY.Amount;
        GenJnlLine."Profit (LCY)" := -(TotalServiceLineLCY.Amount - TotalServiceLineLCY."Unit Cost (LCY)");
        GenJnlLine."Inv. Discount (LCY)" := -TotalServiceLineLCY."Inv. Discount Amount";
        GenJnlLine."Pmt. Discount Given/Rec. (LCY)" := -TotalServiceLineLCY."Pmt. Disc. Given Amount";
        GenJnlLine."Sell-to/Buy-from No." := "Customer No.";
        GenJnlLine."Bill-to/Pay-to No." := "Bill-to Customer No.";
        GenJnlLine."Salespers./Purch. Code" := "Salesperson Code";
        GenJnlLine."System-Created Entry" := TRUE;
        GenJnlLine."Applies-to Doc. Type" := "Applies-to Doc. Type";
        GenJnlLine."Applies-to Doc. No." := "Applies-to Doc. No.";
        GenJnlLine."Applies-to Bill No." := "Applies-to Bill No.";
        GenJnlLine."Applies-to ID" := "Applies-to ID";
        GenJnlLine."Allow Application" := "Bal. Account No." = '';
        GenJnlLine."Allow Application" := TRUE;
        GenJnlLine."Due Date" := "Due Date";
        GenJnlLine."Payment Terms Code" := "Payment Terms Code";
        GenJnlLine."Payment Method Code" := "Payment Method Code";
        GenJnlLine."Pmt. Address Code" := "Pay-at Code";
        GenJnlLine."Cust./Vendor Bank Acc. Code" := "Cust. Bank Acc. Code";
        GenJnlLine."Due Date" := "Due Date";
        GenJnlLine."Pmt. Discount Date" := "Pmt. Discount Date";
        GenJnlLine."Payment Discount %" := "Payment Discount %";
        GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
        GenJnlLine."Source No." := "Bill-to Customer No.";
        GenJnlLine."Source Code" := SrcCode;
        GenJnlLine."Posting No. Series" := "Posting No. Series";
      END;

      TempJnlLineDim.DELETEALL;
      TempDocDim.RESET;
      TempDocDim.SETRANGE("Table ID",DATABASE::"Service Header");
      DimMgt.CopyDocDimToJnlLineDim(TempDocDim,TempJnlLineDim);
      GenJnlPostLine.RunWithCheck(GenJnlLine,TempJnlLineDim);
    END;

    PROCEDURE PostGenJnlLineBalancing@11(VAR TotalServiceLine@1002 : Record 5902;VAR TotalServiceLineLCY@1006 : Record 5902;GenJnlLineDocType@1005 : Integer;GenJnlLineDocNo@1004 : Code[20];GenJnlLineExtDocNo@1003 : Code[20]);
    VAR
      CustLedgEntry@1000 : Record 21;
      GenJnlLine@1001 : Record 81;
    BEGIN
      CustLedgEntry.FIND('+');
      GenJnlLine.INIT;
      WITH ServiceHeader DO BEGIN
        GenJnlLine."Posting Date" := "Posting Date";
        GenJnlLine."Document Date" := "Document Date";
        GenJnlLine.Description := "Posting Description";
        GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        GenJnlLine."Reason Code" := "Reason Code";
        GenJnlLine."Account Type" := GenJnlLine."Account Type"::Customer;
        GenJnlLine."Account No." := "Bill-to Customer No.";
        IF "Document Type" = "Document Type"::"Credit Memo" THEN
          GenJnlLine."Document Type" := GenJnlLine."Document Type"::Refund
        ELSE
          GenJnlLine."Document Type" := GenJnlLine."Document Type"::Payment;
        GenJnlLine."Document No." := GenJnlLineDocNo;
        GenJnlLine."External Document No." := GenJnlLineExtDocNo;
        IF "Bal. Account Type" = "Bal. Account Type"::"Bank Account" THEN
          GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::"Bank Account";
        GenJnlLine."Bal. Account No." := "Bal. Account No.";
        GenJnlLine."Currency Code" := "Currency Code";
        GenJnlLine.Amount :=
          TotalServiceLine."Amount Including VAT" + CustLedgEntry."Remaining Pmt. Disc. Possible";
        GenJnlLine."Source Currency Code" := "Currency Code";
        GenJnlLine."Source Currency Amount" := GenJnlLine.Amount;
        CustLedgEntry.CALCFIELDS(Amount);
        IF CustLedgEntry.Amount = 0 THEN
          GenJnlLine."Amount (LCY)" := TotalServiceLineLCY."Amount Including VAT"
        ELSE
          GenJnlLine."Amount (LCY)" :=
            TotalServiceLineLCY."Amount Including VAT" +
            ROUND(CustLedgEntry."Remaining Pmt. Disc. Possible" /
              CustLedgEntry."Adjusted Currency Factor");
        IF "Currency Code" = '' THEN
          GenJnlLine."Currency Factor" := 1
        ELSE
          GenJnlLine."Currency Factor" := "Currency Factor";
        GenJnlLine."Applies-to Doc. Type" := GenJnlLineDocType;
        GenJnlLine."Applies-to Doc. No." := GenJnlLineDocNo;
        GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
        GenJnlLine."Source No." := "Bill-to Customer No.";
        GenJnlLine."Source Code" := SrcCode;
        GenJnlLine."Posting No. Series" := "Posting No. Series";
        GenJnlLine."System-Created Entry" := TRUE;
        GenJnlPostLine.RunWithCheck(GenJnlLine,TempJnlLineDim);
      END;
    END;

    LOCAL PROCEDURE PostGenJnlLineDiscount@17(VAR GenJnlLine@1006 : Record 81;VAR TempDimBuf@1004 : Record 360;GLAccNo@1000 : Code[20];DiscountAmount@1001 : Decimal;SrcCurrDiscountAmount@1002 : Decimal);
    BEGIN
      WITH GenJnlLine DO BEGIN
        "Gen. Posting Type" := 0; // None
        "Gen. Bus. Posting Group" := '';
        "Gen. Prod. Posting Group" := '';
        "VAT Bus. Posting Group" := '';
        "VAT Prod. Posting Group" := '';
        "Depreciation Book Code" := '';
        "EU 3-Party Trade" := FALSE;
        "VAT Calculation Type" := "VAT Calculation Type"::"Normal VAT";
        "Bill-to/Pay-to No." := '';
        "VAT Amount" := 0;
        "Account No." := GLAccNo;
        Amount := -DiscountAmount;
        "Amount (LCY)" := 0;
        "Source Currency Code" := ServiceHeader."Currency Code";
        "Source Currency Amount" := -SrcCurrDiscountAmount;
        "Source Curr. VAT Amount" := 0;
        "System-Created Entry" := TRUE;

        TempJnlLineDim.DELETEALL;

        DimMgt.CopyDimBufToJnlLineDim(
          TempDimBuf,TempJnlLineDim,"Journal Template Name",
          "Journal Batch Name","Line No.");
        GenJnlPostLine.RunWithCheck(GenJnlLine,TempJnlLineDim);
      END;
    END;

    PROCEDURE PostResJnlLineShip@8(VAR ServiceLine@1002 : Record 5902;GenJnlLineDocNo@1003 : Code[20];GenJnlLineExtDocNo@1004 : Code[20]);
    VAR
      ResJnlLine@1000 : Record 207;
      ResJnlPostLine@1001 : Codeunit 212;
    BEGIN
      ResJnlLine.INIT;
      WITH ServiceHeader DO BEGIN
        ResJnlLine."Entry Type" := ResJnlLine."Entry Type"::Usage;
        ResJnlLine."Document No." := GenJnlLineDocNo;
        ResJnlLine."External Document No." := GenJnlLineExtDocNo;;
        ResJnlLine."Posting Date" := "Posting Date";
        ResJnlLine."Document Date" := "Document Date";
        ResJnlLine."Resource No." := ServiceLine."No.";
        ResJnlLine.Description := ServiceLine.Description;
        ResJnlLine."Work Type Code" := ServiceLine."Work Type Code";
        ResJnlLine."Job No." := ServiceLine."Job No.";
        ResJnlLine.Quantity := -ServiceLine."Qty. to Ship";
        ResJnlLine."Unit Cost" := ServiceLine."Unit Cost (LCY)";
        ResJnlLine."Total Cost" := ServiceLine."Unit Cost (LCY)" * ResJnlLine.Quantity;
        ResJnlLine."Unit Price" := ServiceLine.Amount / ServiceLine."Qty. to Ship";
        ResJnlLine."Total Price" := -ServiceLine.Amount;
        ResJnlLine."Shortcut Dimension 1 Code" := ServiceLine."Shortcut Dimension 1 Code";
        ResJnlLine."Shortcut Dimension 2 Code" := ServiceLine."Shortcut Dimension 2 Code";
        ResJnlLine."Unit of Measure Code" := ServiceLine."Unit of Measure Code";
        ResJnlLine."Qty. per Unit of Measure" := ServiceLine."Qty. per Unit of Measure";
        ResJnlLine."Source Code" := SrcCode;
        ResJnlLine."Gen. Bus. Posting Group" := ServiceLine."Gen. Bus. Posting Group";
        ResJnlLine."Gen. Prod. Posting Group" := ServiceLine."Gen. Prod. Posting Group";
        ResJnlLine."Posting No. Series" := "Posting No. Series";
        ResJnlLine."Reason Code" := "Reason Code";
        ResJnlLine."Source Type" := ResJnlLine."Source Type"::Customer;
        ResJnlLine."Source No." := ServiceLine."Customer No.";
        ResJnlLine.Chargeable := TRUE;
        TempJnlLineDim.DELETEALL;
        TempDocDim.RESET;
        TempDocDim.SETRANGE("Table ID",DATABASE::"Service Line");
        TempDocDim.SETRANGE("Line No.",ServiceLine."Line No.");
        DimMgt.CopyDocDimToJnlLineDim(TempDocDim,TempJnlLineDim);
        ResJnlPostLine.RunWithCheck(ResJnlLine,TempJnlLineDim);
      END;
    END;

    PROCEDURE PostResJnlLineSale@66(VAR ServiceLine@1002 : Record 5902;GenJnlLineDocNo@1003 : Code[20];GenJnlLineExtDocNo@1004 : Code[20]);
    VAR
      ResJnlLine@1000 : Record 207;
      ResJnlPostLine@1001 : Codeunit 212;
    BEGIN
      ResJnlLine.INIT;
      WITH ServiceHeader DO BEGIN
        ResJnlLine."Posting Date" := "Posting Date";
        ResJnlLine."Document Date" := "Document Date";
        ResJnlLine."Reason Code" := "Reason Code";
        ResJnlLine."Resource No." := ServiceLine."No.";
        ResJnlLine.Description := ServiceLine.Description;
        ResJnlLine."Source Type" := ResJnlLine."Source Type"::Customer;
        ResJnlLine."Source No." := ServiceLine."Customer No.";
        ResJnlLine."Work Type Code" := ServiceLine."Work Type Code";
        ResJnlLine."Job No." := ServiceLine."Job No.";
        ResJnlLine."Unit of Measure Code" := ServiceLine."Unit of Measure Code";
        ResJnlLine."Shortcut Dimension 1 Code" := ServiceLine."Shortcut Dimension 1 Code";
        ResJnlLine."Shortcut Dimension 2 Code" := ServiceLine."Shortcut Dimension 2 Code";
        ResJnlLine."Gen. Bus. Posting Group" := ServiceLine."Gen. Bus. Posting Group";
        ResJnlLine."Gen. Prod. Posting Group" := ServiceLine."Gen. Prod. Posting Group";
        ResJnlLine."Entry Type" := ResJnlLine."Entry Type"::Sale;
        ResJnlLine."Document No." := GenJnlLineDocNo;
        ResJnlLine."External Document No." := GenJnlLineExtDocNo;
        ResJnlLine.Quantity := -ServiceLine."Qty. to Invoice";
        ResJnlLine."Unit Cost" := ServiceLine."Unit Cost (LCY)";
        ResJnlLine."Total Cost" := ServiceLine."Unit Cost (LCY)" * ResJnlLine.Quantity;
        ResJnlLine."Unit Price" := -ServiceLine.Amount / ServiceLine.Quantity;
        ResJnlLine."Total Price" := -ServiceLine.Amount;
        ResJnlLine."Source Code" := SrcCode;
        ResJnlLine.Chargeable := TRUE;
        ResJnlLine."Posting No. Series" := "Posting No. Series";
        ResJnlLine."Qty. per Unit of Measure" := ServiceLine."Qty. per Unit of Measure";
        TempJnlLineDim.DELETEALL;
        TempDocDim.RESET;
        TempDocDim.SETRANGE("Table ID",DATABASE::"Service Line");
        TempDocDim.SETRANGE("Line No.",ServiceLine."Line No.");
        DimMgt.CopyDocDimToJnlLineDim(TempDocDim,TempJnlLineDim);
        ResJnlPostLine.RunWithCheck(ResJnlLine,TempJnlLineDim);
      END;
    END;

    PROCEDURE PostResJnlLineConsume@22(VAR ServiceLine@1002 : Record 5902;VAR ServShptHeader@1005 : Record 5990);
    VAR
      ResJnlLine@1004 : Record 207;
      ResJnlPostLine@1003 : Codeunit 212;
    BEGIN
      ResJnlLine.INIT;
      WITH ServiceHeader DO BEGIN
        ResJnlLine."Posting Date" := "Posting Date";
        ResJnlLine."Document Date" := "Document Date";
        ResJnlLine."Reason Code" := "Reason Code";
        ResJnlLine."Resource No." := ServiceLine."No.";
        ResJnlLine.Description := ServiceLine.Description;
        ResJnlLine."Source Type" := ResJnlLine."Source Type"::Customer;
        ResJnlLine."Source No." := ServiceLine."Customer No.";
        ResJnlLine."Work Type Code" := ServiceLine."Work Type Code";
        ResJnlLine."Unit of Measure Code" := ServiceLine."Unit of Measure Code";
        ResJnlLine."Shortcut Dimension 1 Code" := ServiceLine."Shortcut Dimension 1 Code";
        ResJnlLine."Shortcut Dimension 2 Code" := ServiceLine."Shortcut Dimension 2 Code";
        ResJnlLine."Gen. Bus. Posting Group" := ServiceLine."Gen. Bus. Posting Group";
        ResJnlLine."Gen. Prod. Posting Group" := ServiceLine."Gen. Prod. Posting Group";
        ResJnlLine."Entry Type" := ResJnlLine."Entry Type"::Usage;
        ResJnlLine."Document No." := ServShptHeader."No.";
        ResJnlLine.Quantity := -ServiceLine."Qty. to Consume";
        ResJnlLine."Unit Cost" := ServiceLine."Unit Cost (LCY)";
        ResJnlLine."Total Cost" := ServiceLine."Unit Cost (LCY)" * ResJnlLine.Quantity;
        ResJnlLine."Unit Price" := 0;
        ResJnlLine."Total Price" := 0;
        ResJnlLine."Source Code" := SrcCode;
        ResJnlLine.Chargeable := FALSE;
        ResJnlLine."Posting No. Series" := ServShptHeader."No. Series";
        ResJnlLine."Qty. per Unit of Measure" := ServiceLine."Qty. per Unit of Measure";
        TempJnlLineDim.DELETEALL;
        TempDocDim.RESET;
        TempDocDim.SETRANGE("Table ID",DATABASE::"Service Line");
        TempDocDim.SETRANGE("Line No.",ServiceLine."Line No.");
        DimMgt.CopyDocDimToJnlLineDim(TempDocDim,TempJnlLineDim);
        ResJnlPostLine.RunWithCheck(ResJnlLine,TempJnlLineDim);
      END;
    END;

    PROCEDURE InitServiceRegister@19(VAR NextServLedgerEntryNo@1000 : Integer;VAR NextWarrantyLedgerEntryNo@1001 : Integer);
    BEGIN
      ServLedgEntryPostSale.InitServiceRegister(NextServLedgerEntryNo,NextWarrantyLedgerEntryNo);
    END;

    PROCEDURE FinishServiceRegister@14(VAR nextServEntryNo@1000 : Integer;VAR nextWarrantyEntryNo@1001 : Integer);
    BEGIN
      ServLedgEntryPostSale.FinishServiceRegister(nextServEntryNo,nextWarrantyEntryNo);
    END;

    PROCEDURE InsertServLedgerEntry@6(VAR NextEntryNo@1002 : Integer;VAR ServiceHeader@1006 : Record 5900;VAR ServiceLine@1000 : Record 5902;VAR ServItemLine@1003 : Record 5901;Qty@1001 : Decimal;DocNo@1005 : Code[20]) : Integer;
    BEGIN
      EXIT(
        ServLedgEntryPostSale.InsertServLedgerEntry(NextEntryNo,ServiceHeader,ServiceLine,ServItemLine,Qty,DocNo));
    END;

    PROCEDURE InsertServLedgerEntrySale@16(VAR passedNextEntryNo@1005 : Integer;VAR ServHeader@1004 : Record 5900;VAR ServLine@1003 : Record 5902;VAR ServItemLine@1006 : Record 5901;Qty@1002 : Decimal;QtyToCharge@1001 : Decimal;GenJnlLineDocNo@1000 : Code[20];DocLineNo@1007 : Integer);
    BEGIN
      ServLedgEntryPostSale.InsertServLedgerEntrySale(
        passedNextEntryNo,ServHeader,ServLine,ServItemLine,Qty,QtyToCharge,GenJnlLineDocNo,DocLineNo);
    END;

    PROCEDURE CreateCreditEntry@20(VAR passedNextEntryNo@1003 : Integer;VAR ServHeader@1002 : Record 5900;VAR ServLine@1001 : Record 5902;GenJnlLineDocNo@1000 : Code[20]);
    BEGIN
      ServLedgEntryPostSale.CreateCreditEntry(passedNextEntryNo,ServHeader,ServLine,GenJnlLineDocNo);
    END;

    PROCEDURE InsertWarrantyLedgerEntry@1(VAR NextWarrantyEntryNo@1001 : Integer;VAR ServiceHeader@1002 : Record 5900;VAR ServiceLine@1000 : Record 5902;VAR ServItemLine@1003 : Record 5901;Qty@1006 : Decimal;QtyToCharge@1007 : Decimal;GenJnlLineDocNo@1005 : Code[20]) : Integer;
    BEGIN
      EXIT(
        ServLedgEntryPostSale.InsertWarrantyLedgerEntry(
          NextWarrantyEntryNo,ServiceHeader,ServiceLine,ServItemLine,Qty,QtyToCharge,GenJnlLineDocNo));
    END;

    PROCEDURE CalcSLEDivideAmount@18(Qty@1000 : Decimal;VAR passedServHeader@1001 : Record 5900;VAR passedTempServLine@1002 : Record 5902;VAR passedVATAmountLine@1003 : Record 290);
    BEGIN
      ServLedgEntryPostSale.CalcDivideAmount(Qty,passedServHeader,passedTempServLine,passedVATAmountLine);
    END;

    PROCEDURE TestSrvCostDirectPost@13(VAR ServLineNo@1000 : Code[20]);
    VAR
      ServCost@1001 : Record 5905;
      GLAcc@1002 : Record 15;
    BEGIN
      ServCost.GET(ServLineNo);
      GLAcc.GET(ServCost."Account No.");
      GLAcc.TESTFIELD("Direct Posting",TRUE);
    END;

    PROCEDURE TestGLAccDirectPost@15(VAR ServLineNo@1000 : Code[20]);
    VAR
      GLAcc@1001 : Record 15;
    BEGIN
      GLAcc.GET(ServLineNo);
      GLAcc.TESTFIELD("Direct Posting",TRUE);
    END;

    PROCEDURE CopyDocDimToTempDocDim@4(VAR PassedTempDocDim@1000 : Record 357);
    BEGIN
      TempDocDim.RESET;
      TempDocDim.DELETEALL;
      IF PassedTempDocDim.FIND('-') THEN
        REPEAT
          TempDocDim.INIT;
          TempDocDim := PassedTempDocDim;
          TempDocDim.INSERT;
        UNTIL PassedTempDocDim.NEXT = 0;
      TempDocDim.RESET;
    END;

    PROCEDURE CollectValueEntryRelation@5(VAR PassedValueEntryRelation@1000 : Record 6508;RowId@1001 : Text[100]);
    BEGIN
      ItemJnlPostLine.CollectValueEntryRelation(PassedValueEntryRelation,RowId)
    END;

    PROCEDURE PostJobJnlLine@38(VAR ServHeader@1004 : Record 5900;ServLine@1012 : Record 5902;QtyToBeConsumed@1018 : Decimal;ItemLedgerEntryNo@1002 : Integer) : Boolean;
    VAR
      JobJnlLine@1000 : Record 210;
      TempJnlLineDim@1009 : TEMPORARY Record 356;
      SourceCodeSetup@1006 : Record 242;
      ServiceCost@1011 : Record 5905;
      DocDim@1014 : Record 357;
      Job@1016 : Record 167;
      JT@1015 : Record 1001;
      Item@1017 : Record 27;
      JobJnlPostLine@1008 : Codeunit 1012;
      DimMgt@1010 : Codeunit 408;
      StartItemLedgEntryNo@1019 : Integer;
      CurrencyFactor@1001 : Decimal;
      UnitPriceLCY@1003 : Decimal;
    BEGIN
      WITH ServLine DO BEGIN
        IF ("Job No." = '') OR (QtyToBeConsumed = 0) THEN
          EXIT(FALSE);

        TESTFIELD("Job Task No.");
        Job.LOCKTABLE;
        JT.LOCKTABLE;
        Job.GET("Job No.");
        JT.GET("Job No.","Job Task No.");

        JobJnlLine.INIT;

        JobJnlLine.DontCheckStdCost;

        JobJnlLine.VALIDATE("Job No.","Job No.");
        JobJnlLine.VALIDATE("Job Task No.","Job Task No.");
        JobJnlLine.VALIDATE("Line Type","Job Line Type");
        JobJnlLine.VALIDATE("Posting Date","Posting Date");
        JobJnlLine."Job Posting Only" := TRUE;
        JobJnlLine."No." := "No.";

        CASE Type OF
          Type::"G/L Account":
            JobJnlLine.Type := JobJnlLine.Type::"G/L Account";
          Type::Item:
            JobJnlLine.Type := JobJnlLine.Type::Item;
          Type::Resource:
            JobJnlLine.Type := JobJnlLine.Type::Resource;
          Type::Cost:
            BEGIN
              ServiceCost.SETRANGE(Code,"No.");
              ServiceCost.FIND('-');
              JobJnlLine.Type := JobJnlLine.Type::"G/L Account";
              JobJnlLine."No." := ServiceCost."Account No.";
            END;
        END; // Case Type
        JobJnlLine.VALIDATE("No.");
        JobJnlLine.Description := Description;
        JobJnlLine."Description 2" := "Description 2";

        JobJnlLine."Variant Code" := "Variant Code";

        JobJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        JobJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        JobJnlLine.VALIDATE(Quantity,-QtyToBeConsumed);

        JobJnlLine."Document No." := ServHeader."Shipping No.";
        JobJnlLine."Service Order No." := "Document No.";
        JobJnlLine."External Document No." := ServHeader."Shipping No.";
        JobJnlLine."Posted Service Shipment No." := ServHeader."Shipping No.";

        IF Type = Type::Item THEN BEGIN
          Item.GET("No.");
          IF Item."Costing Method" = Item."Costing Method"::Standard THEN
            JobJnlLine.VALIDATE("Unit Cost (LCY)",Item."Standard Cost")
          ELSE
            JobJnlLine.VALIDATE("Unit Cost (LCY)","Unit Cost (LCY)")
        END ELSE
          JobJnlLine.VALIDATE("Unit Cost (LCY)","Unit Cost (LCY)");

        IF "Currency Code" = Job."Currency Code" THEN
          JobJnlLine.VALIDATE("Unit Price","Unit Price");
        IF "Currency Code" <> '' THEN BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
          CurrencyFactor := CurrExchRate.ExchangeRate("Posting Date","Currency Code");
          UnitPriceLCY :=
            ROUND(CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code","Unit Price",CurrencyFactor),
              Currency."Amount Rounding Precision");
          JobJnlLine.VALIDATE("Unit Price (LCY)",UnitPriceLCY);
        END ELSE
          JobJnlLine.VALIDATE("Unit Price (LCY)","Unit Price");

        JobJnlLine.VALIDATE("Line Discount %","Line Discount %");

        JobJnlLine."Location Code" := "Location Code";
        JobJnlLine."Entry Type" := JobJnlLine."Entry Type"::Usage;

        JobJnlLine."Posting Group" := "Posting Group";
        JobJnlLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        JobJnlLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        JobJnlLine."Customer Price Group" := "Customer Price Group";

        SourceCodeSetup.GET;
        JobJnlLine."Source Code" := SourceCodeSetup."Service Management";

        JobJnlLine."Work Type Code" := "Work Type Code";

        JobJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        JobJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";

        DocDim.SETRANGE("Table ID",DATABASE::"Service Line");
        DocDim.SETRANGE("Document Type","Document Type");
        DocDim.SETRANGE("Document No.","Document No.");
        DocDim.SETRANGE("Line No.","Line No.");
        DimMgt.CopyDocDimToJnlLineDim(DocDim,TempJnlLineDim);
      END;

      JobJnlPostLine.RunWithCheck(JobJnlLine,TempJnlLineDim);
      EXIT(TRUE);
    END;

    PROCEDURE CreateBills@1100000(VAR TotalServiceLine@1100000 : Record 5902;VAR Window@1100001 : Dialog;GenJnlLineDocNo@1100002 : Code[20];GenJnlLineExtDocNo@1100003 : Code[20]);
    VAR
      CustLedgEntry@1100004 : Record 21;
      PaymentMethod@1100005 : Record 289;
      SplitPayment@1100006 : Codeunit 7000005;
      AppManagement@1100007 : Codeunit 1;
      Text1100000@1100008 : TextConst 'ENU=You do not have permissions to create Documents in Cartera.\;ESP=No tiene permisos para crear Documentos en Cartera.\';
      Text1100001@1100009 : TextConst 'ENU=Please, change the %1.;ESP=Por favor, cambie el %1.';
    BEGIN
      CustLedgEntry.FIND('+');
      WITH ServiceHeader DO BEGIN
        IF PaymentMethod.GET("Payment Method Code") THEN
          IF (PaymentMethod."Create Bills" OR PaymentMethod."Invoices to Cartera") AND
            (NOT AppManagement.AccessToCartera) AND Invoice THEN
            ERROR(Text1100000 +
              Text1100001, PaymentMethod.TABLECAPTION);

        IF ("Bal. Account No." = '') AND
          ("Document Type" <> "Document Type"::"Credit Memo") AND
          AppManagement.AccessToCartera
        THEN
          SplitPayment.SplitServiceInv(
            ServiceHeader,
            CustLedgEntry,
            Window,
            SrcCode,
            GenJnlLineExtDocNo,
            GenJnlLineDocNo,
            -(TotalServiceLine."Amount Including VAT" - TotalServiceLine.Amount));
      END;
    END;

    BEGIN
    END.
  }
}
