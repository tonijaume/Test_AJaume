OBJECT Codeunit 7009703 Funciones reserva
{
  OBJECT-PROPERTIES
  {
    Date=28/07/15;
    Time=13:45:06;
    Modified=Yes;
    Version List=AIC2009,CNT-OC-14035,OC-14045;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1103355017 : TextConst 'ENU=Delete &arrival,Delete &departure;ESP=Borrar &entrada,Borrar &salida';
      Text004@1103355021 : TextConst 'ENU="Bookings are being generated from another station ";ESP=Se estan generando reservas desde otra estacion.';
      Text006@1103355023 : TextConst 'ENU=Generating reservations details...;ESP=Generando las reservas de productos...';
      Text007@1103355024 : TextConst 'ENU=Must indicate a TourOperator in reservation No. %1 Voucher %2;ESP=Debe indicar un TourOperador en reserva N§ %1 Bono %2.';
      Text008@1103355025 : TextConst 'ENU=Must indicate a Voucher No. in reservation No. %1 Voucher %2;ESP=Debe indicar un n§ de Bono en reserva N§ %1 Bono %2.';
      Text009@1103355026 : TextConst 'ENU=Must indicate a client name in reservation No. 1 Voucher %2;ESP=Debe indicar un nombre cliente en reserva N§ 1 Bono %2.';
      Text010@1103355027 : TextConst 'ENU=Must indicate a check-in date in reservation No. %1 Voucher %2;ESP=Debe indicar una Fecha de entrada en reserva N§ %1 Bono %2.';
      Text011@1103355028 : TextConst 'ENU=Must indicate a check-out date in reservation No. %1 Voucher %2;ESP=Debe indicar una Fecha de salida en reserva N§ %1 Bono %2.';
      Text012@1103355029 : TextConst 'ENU=Must indicate a package in reservation No. %1 Voucher %2.;ESP=Debe indicar un Paquete en reserva N§ %1 Bono %2.';
      Text013@1103355030 : TextConst 'ENU=Must indicate a Sale TourOperator in reservation No. %1 Voucher %2;ESP=Debe indicar un TourOperador de Venta en reserva N§ %1 Bono %2.';
      Text014@1103355031 : TextConst 'ENU=Must indicate a board in the reservation period No. %1 Voucher %2;ESP=Debe indicar un regimen en el periodo en reserva N§ %1 Bono %2.';
      Text015@1103355032 : TextConst 'ENU=Must indicate a room in the reservation period No. %1 Voucher %2.;ESP=Debe indicar una habitacion en el periodo en reserva N§ %1 Bono %2.';
      Text016@1103355033 : TextConst 'ENU=Must indicate a sale date in the reservation No. %1 Voucher %2;ESP=Debe indicar una fecha de venta en la reserva N§ %1 Bono %2.';
      Text017@1103355034 : TextConst 'ENU=Must indicate a type of person in each companion in reservation No. %1 Voucher %2.;ESP=Debe indicar un tipo de persona en cada acompa¤ante en reserva N§ %1 Bono %2.';
      Text018@1103355035 : TextConst 'ENU=Must clear hotels in circuit sale contract %1, circuit %2, date %3 category %4.;ESP=Debe definir hoteles en contrato venta circuito %1, circuito %2, fecha %3 categoria %4.';
      Text019@1103355036 : TextConst 'ENU=Must indicate a date in Circuit initial date in reservation No. %1 Voucher %2.;ESP=Debe indicar una fecha en Fecha Inicio Circuito en reserva N§ %1 Bono %2.';
      Text020@1103355037 : TextConst 'ENU=Must indicate a Circuit sale contract in reservation No. %1 Voucher %2.;ESP=Se debe indicar un Contrato Venta Circuito en reserva N§ %1 Bono %2.';
      Text021@1103355038 : TextConst 'ENU=Must indicate a Circuit Room in reservation No. %1 Voucher %2.;ESP=Se debe indicar una Habitacion circuito en reserva N§ %1 Bono %2.';
      Text022@1103355039 : TextConst 'ENU=Must indicate a Circuit Category in reservation No. %1 Voucher %2.;ESP=Se debe indicar una Categoria circuito en reserva N§ %1 Bono %2.';
      Text023@1103355040 : TextConst 'ENU=Generate current one,;ESP=Generar actual,';
      Text024@1103355041 : TextConst 'ENU=Generate marked ones,;ESP=Generar marcadas,';
      Text025@1103355042 : TextConst 'ENU=Generate all;ESP=Generar todas';
      Text027@1103355044 : TextConst 'ENU=Would you like to leave as pending the calculation of %1 filtered bookings;ESP=Desea dejar pendiente de calculo las %1 reservas filtradas.';
      Text028@1103355045 : TextConst 'ENU=LOOKING FOR ALTERNATIVES IN HOTELS WITH\;ESP=BUSCANDO ALTERNATIVAS EN HOTELES CON\';
      Text029@1103355046 : TextConst 'ENU=ALLOTMENT FOR THE CHECK-IN DATE ON THE BOOKING AND\;ESP=CUPO PARA LA FECHA DE ENTRADA DE LA RESERVA Y\';
      Text030@1103355047 : TextConst 'ENU=WHICH ARE INTO THE MARKED RELEASE IN THE\;ESP=QUE ESTEN DENTRO DEL RELEASE MARCADO EN EL\';
      Text031@1103355048 : TextConst 'ENU=CONTRACT'';ESP=CONTRATO...';
      Text032@1103355049 : TextConst 'ENU=Assign &Current, Assign &All, Assign &Marked;ESP=Asignar &Actual,Asignar &Todas,Asignar &Marcadas';
      Text033@1103355050 : TextConst 'ENU=Unable to assign flights to booking with different dates;ESP=No se pueden asignar vuelos a reservas con distintas fechas';
      Text034@1103355051 : TextConst 'ENU="           ASSIGNING FLIGHTS \";ESP="           ASIGNANDO VUELOS \"';
      Text035@1103355052 : TextConst 'ENU="  reservation: #1#####\";ESP="  Reserva: #1#####\"';
      Text036@1103355053 : TextConst 'ENU="  Name.: #2################################################\";ESP="  Nombre.: #2################################################\"';
      Text037@1103355054 : TextConst 'ENU="  Voucher...: #3########";ESP="  Bono...: #3########"';
      Text038@1103355055 : TextConst 'ENU=Would you like to mark the bookings in the window as Out of allotment;ESP=Desea marcar las reservas de la ventana como Fuera de Cupo.';
      Text039@1103355056 : TextConst 'ENU=Error has occurred in the application;ESP=Se ha producido un error inesperado en la aplicacion.';
      Text040@1103355057 : TextConst 'ENU=Calculating Current Assessment...\\\\\\\\\\\\\\\\\\\\\\\\\\\\;ESP=Calculando Valoracion Actual...\\\\\\\\\\\\\\\\\\\\\\\\\\\\';
      Text041@1103355058 : TextConst 'ENU=Calculating Alternative Assessment...\\\\\\\\\\\\\\\\\\\\\\\\\\\\;ESP=Calculando Valoracion Alternativa...\\\\\\\\\\\\\\\\\\\\\\\\\\\\';
      Text042@1103355059 : TextConst 'ENU=Only bookings in local offices can be registered;ESP=Solo se pueden dar de alta reservas en las delegaciones.';
      Text043@1103355060 : TextConst 'ENU=LOOKING FOR HOTELS WITH CONTRACT;ESP=BUSCANDO HOTELES CON CONTRATO';
      Text044@1103355061 : TextConst 'ENU=CHANGING ARRIVAL DATE\;ESP=CAMBIANDO FECHA ENTRADA\';
      Text045@1103355062 : TextConst 'ENU=Voucher          #1########\;ESP=Bono          #1########\';
      Text046@1103355063 : TextConst 'ENU=Name        #2###############################################\;ESP=Nombre        #2###############################################\';
      Text047@1103355064 : TextConst 'ENU=Arrival date #3#######\;ESP=Fecha entrada #3#######\';
      Text048@1103355065 : TextConst 'ENU=Departure date  #4#######\;ESP=Fecha salida  #4#######\';
      Text049@1103355066 : TextConst 'ENU=New Date   #5#######;ESP=Nueva fecha   #5#######';
      Text050@1103355067 : TextConst 'ENU=Delete arrival flight in the new date;ESP=Borrar el plan de vuelo de entrada en la nueva fecha';
      Text051@1103355068 : TextConst 'ENU=CHANGING DEPARTURE DATE\;ESP=CAMBIANDO FECHA SALIDA\';
      Text052@1103355069 : TextConst 'ENU=Delete departure flight in the new date;ESP=Borrar el plan de vuelo de salida en la nueva fecha';
      Text053@1103355070 : TextConst 'ENU=CHANGING BOARD\;ESP=CAMBIANDO REGIMEN\';
      Text054@1103355071 : TextConst 'ENU=Board       #5########\;ESP=Regimen       #5########\';
      Text055@1103355072 : TextConst 'ENU=New Board #6########;ESP=Nuevo Regimen #6########';
      Text056@1103355073 : TextConst 'ENU=Board %1 does not exist;ESP=No existe el regimen %1.';
      Text057@1103355074 : TextConst 'ENU=Are you sure you want to cancel the arrival flight to;ESP=Esta seguro de que desea dejar sin plan de vuelo de entrada a';
      Text058@1103355075 : TextConst 'ENU=Are you sure you want to cancel the departure flight to;ESP=Esta seguro de que desea dejar sin plan de vuelo de salida a';
      Text059@1103355076 : TextConst 'ENU=CHANGING SALE DATE\;ESP=CAMBIANDO FECHA VENTA\';
      Text060@1103355077 : TextConst 'ENU=Sale date   #5#######\;ESP=Fecha Venta   #5#######\';
      Text061@1103355078 : TextConst 'ENU=New Date   #6#######;ESP=Nueva fecha   #6#######';
      Text062@1103355079 : TextConst 'ENU=+%1D-1D;ESP=+%1D-1D';
      Text063@1103355080 : TextConst 'ENU=+%1D;ESP=+%1D';
      Text065@1103355082 : TextConst 'ENU=Periods have already been generated;ESP=Los periodos ya han sido generados.';
      Text066@1103355083 : TextConst 'ENU=+%1D-%2D;ESP=+%1D-%2D';
      Text067@1103355084 : TextConst 'ENU=+%1D-1D+%2D-%3D;ESP=+%1D-1D+%2D-%3D';
      Text068@1103355085 : TextConst 'ENU=Reservation header for this period does not exist;ESP=No existe la cabecera de reserva para este periodo.';
      rPaqProd@1103355000 : Record 7009752;
      rParPer@1103355001 : Record 7009701;
      rPar@1103355002 : Record 7009700;
      rRsvHot@1103355003 : Record 7009743;
      rRsvHot2@1103355004 : Record 7009743;
      rRsvTra@1103355005 : Record 7009744;
      rRsvTra2@1103355006 : Record 7009744;
      rAco@1103355007 : Record 7009748;
      rAco2@1103355008 : Record 7009748;
      rPer@1103355009 : Record 7009742;
      rBuz@1103355010 : Record 7009763;
      rHis@1103355011 : Record 7009751;
      DatosInstalacion@1000000001 : Record 7009768;
      cFun@1103355012 : Codeunit 7009732;
      cPar@1103355013 : Codeunit 7009700;
      cFunHot@1100253000 : Codeunit 7009719;
      error_datos@1103355014 : Boolean;
      campo_error@1103355015 : Integer;
      ventana@1103355016 : Dialog;
      cCotGenCab@1103355086 : Codeunit 7009908;
      Text069@1100217000 : TextConst 'ENU=This reservation is already marked as No Show.;ESP=Esta reserva ya se ha marcado como No Show.';
      Text070@1100217001 : TextConst 'ENU=Do you want to mark %1 in the reservation %2-%3 as No Show.;ESP=Quiere marcar a %1 de la reserva %2-%3 como No Show';
      Text071@1100217002 : TextConst 'ENU=This person is in the service %, ungroup before marking it as No Show;ESP=Esta persona esta dentro de la agrupacion %1, desagrupe antes de marcar como No Show';
      Text072@1100217003 : TextConst 'ENU=You cannot mark as No show a reservation that is not still generated.;ESP=No se puede marcar como No show una reserva sin generar.';
      Text073@1100217004 : TextConst 'ENU=This reservation has been closed in the hotel module.;ESP=Esta reserva ya ha sido cerrada en el modulo de hotel.';
      Text074@1100217005 : TextConst 'ENU=This reservation has not yet passed their date of arrival.;ESP=Esta reserva aun no ha superado su fecha de llegada prevista.';
      Text075@1100217006 : TextConst 'ENU=The selected period already has transfer service.;ESP=El periodo seleccionado ya tiene servicio de transfer.';
      Text076@1100217007 : TextConst 'ENU=Process completed;ESP=Proceso finalizado.';
      Text077@1100217008 : TextConst 'ENU=Do you want to add the transfer service to all the people in this reservation.;ESP=Desea agregar servicio de transfer a todas las personas de este periodo.';
      Text078@1100217009 : TextConst 'ENU=This flight cannot be applied to this reservation;ESP=El vuelo introducido no se puede aplicar a la reserva.';
      Text079@1100217010 : TextConst 'ENU="Flight (%1-%2) for day (%3), do you want to create it? ";ESP=No existe el vuelo (%1-%2) para dia %3, desea crearlo?';
      Text080@1000000000 : TextConst 'ENU=Must indicate a Sales chanel in reservation No. %1 Voucher %2.;ESP=Se debe indicar una Canal venta en reserva N§ %1 Bono %2.';

    PROCEDURE plan_vuelo@1(rec@1103355000 : Record 7009742;rsvhot@1103355001 : Record 7009743);
    VAR
      opcion@1103355002 : Integer;
      ventana@1103355003 : Dialog;
    BEGIN
      // plan_vuelo

      opcion := STRMENU(Text000, 1);
      CASE opcion OF
        0: EXIT;
        1: borra_entrada(rec, rsvhot);
        2: borra_salida(rec, rsvhot);
      END;
    END;

    PROCEDURE cambia_entrada@5(rec@1103355000 : Record 7009742;rsvhot@1103355001 : Record 7009743);
    VAR
      rPlan@1103355002 : Record 7009754;
      rRsvTra@1103355003 : Record 7009744;
      rHot@1103355004 : Record 7009724;
    BEGIN
      // cambia_entrada

      rPar.FINDFIRST;

      cFun.cambia_vuelo_entrada(rec."Fecha entrada",
                                TRUE,
                                rec.Delegacion,
                                rec."N§ Interno",
                                rec."N§ Periodo",
                                0);
    END;

    PROCEDURE cambia_salida@6(rec@1103355000 : Record 7009742;rsvhot@1103355001 : Record 7009743);
    VAR
      rPlan@1103355002 : Record 7009754;
      rRsvTra@1103355003 : Record 7009744;
      rHot@1103355004 : Record 7009724;
    BEGIN
      // cambia_salida

      rPar.FINDFIRST;

      cFun.cambia_vuelo_salida(rec."Fecha salida",
                                TRUE,
                                rec.Delegacion,
                                rec."N§ Interno",
                                rec."N§ Periodo",
                                0);
    END;

    PROCEDURE borra_entrada@7(rec@1103355000 : Record 7009742;rsvhot@1103355001 : Record 7009743);
    VAR
      rPlan@1103355002 : Record 7009754;
      rRsvTra@1103355003 : Record 7009744;
    BEGIN
      // borra_entrada

      rec.VALIDATE("Compa¤ia entrada", '');
      rec.VALIDATE("Vuelo entrada", '');
      rec.VALIDATE("Terminal entrada", '');
      rec.VALIDATE("Hora entrada", 0T);
      rec.VALIDATE("IATA origen entrada", '');
      rec.VALIDATE("IATA destino entrada", '');
      rec.CheckEnvioConfirmacion(FALSE);  //+$009
      rec.MODIFY;

      // Reserva de Transfer
      rRsvTra.RESET;
      rRsvTra.SETCURRENTKEY(Delegacion,"N§ Interno","N§ Periodo");
      rRsvTra.SETRANGE(Delegacion  , rec.Delegacion);
      rRsvTra.SETRANGE("N§ Interno", rec."N§ Interno");
      rRsvTra.SETRANGE("N§ Periodo", rec."N§ Periodo");
      IF rRsvTra.FINDSET(TRUE) THEN
      BEGIN
        REPEAT
          //rRsvTra."Servicio transfer entrada" := rRsvTra."Servicio transfer entrada"::Ninguno;
          //rRsvTra.Entrada := 0;
          IF rRsvTra.Direccion = rRsvTra.Direccion::Ambos THEN
            rRsvTra.VALIDATE(Direccion, rRsvTra.Direccion::Salida);
          rRsvTra."Hotel entrada" := '';
          rRsvTra."Zona entrada" := '';
          rRsvTra."Orden entrada" := 0;
          rRsvTra.MODIFY;
        UNTIL rRsvTra.NEXT = 0;
      END;
      rRsvTra.RESET;
    END;

    PROCEDURE borra_salida@8(rec@1103355000 : Record 7009742;rsvhot@1103355001 : Record 7009743);
    VAR
      rPlan@1103355002 : Record 7009754;
      rRsvTra@1103355003 : Record 7009744;
    BEGIN
      // borra_salida

      rec.VALIDATE("Compa¤ia salida", '');
      rec.VALIDATE("Vuelo salida", '');
      rec.VALIDATE("Terminal salida", '');
      rec.VALIDATE("Hora salida", 0T);
      rec.VALIDATE("IATA origen salida", '');
      rec.VALIDATE("IATA destino salida", '');
      rec.CheckEnvioConfirmacion(FALSE);  //+$009
      rec.MODIFY;

      // Reserva de Transfer
      rRsvTra.RESET;
      rRsvTra.SETCURRENTKEY(Delegacion,
                            "N§ Interno",
                            "N§ Periodo");
      rRsvTra.SETRANGE(Delegacion  , rec.Delegacion);
      rRsvTra.SETRANGE("N§ Interno", rec."N§ Interno");
      rRsvTra.SETRANGE("N§ Periodo", rec."N§ Periodo");
      IF rRsvTra.FINDSET(TRUE) THEN
      BEGIN
        REPEAT
          //rRsvTra."Servicio transfer salida" := rRsvTra."Servicio transfer salida"::Ninguno;
          //rRsvTra.Salida := 0;
          IF rRsvTra.Direccion = rRsvTra.Direccion::Ambos THEN
            rRsvTra.VALIDATE(Direccion, rRsvTra.Direccion::Entrada);
          rRsvTra."Hotel salida" := '';
          rRsvTra."Zona salida" := '';
          rRsvTra."Orden salida" := 0;
          rRsvTra.MODIFY;
        UNTIL rRsvTra.NEXT = 0;
      END;
      rRsvTra.RESET;
    END;

    PROCEDURE generar_cabecera@2(VAR cab@1103355000 : Record 7009741;manual@1103355001 : Boolean);
    VAR
      rParInt@1103355002 : Record 7010081;
      rPaqProd@1103355003 : Record 7009752;
      rPer2@1103355004 : Record 7009742;
      lcEnviar@1100217000 : Codeunit 7009746;
      ventana@1103355005 : Dialog;
      sw@1103355006 : Boolean;
      no_transfer@1103355007 : Boolean;
    BEGIN
      // generar_cabecera

      //-$015rPar.LOCKTABLE;
      rPar.FINDFIRST;

      //-$015IF NOT rPar."Ejecutando Generar" THEN BEGIN
      //-$015  rPar."Ejecutando Generar" := TRUE;
      //-$015  rPar.MODIFY;
      //-$015  COMMIT;
      //-$015END
      //-$015ELSE
      //-$015  ERROR(Text004);

      rParPer.FINDFIRST;

      // Modificacion solicitada por LTU para cambiar el paquete de la reserva en funcion
      // del campo "No Transfer" de la conversion del hotel

      rParInt.FINDFIRST;

      //-$023cab.LOCKTABLE;
      cab.GET(cab.Delegacion, cab."N§ Interno");

      sw := FALSE;

      rPer.RESET;
      //-$023rPer.LOCKTABLE;
      rPer.SETRANGE(Delegacion  , cab.Delegacion);
      rPer.SETRANGE("N§ Interno", cab."N§ Interno");
      rPer.SETRANGE(Generada    , FALSE);
      IF rPer.FINDSET(TRUE) THEN
      BEGIN
        REPEAT
          IF (rPer.Paquete = '') AND (rPer."Hotel reservado" = '') AND
             (rPer."Fecha entrada" = 0D) AND (rPer."Fecha salida" = 0D) THEN
          BEGIN
            rPer.DELETE;
          END
          ELSE
          BEGIN
            //. Comprobar errores

            comp_error(cab);
            IF error_datos THEN BEGIN
              sacar_error(cab);
              //-$015rPar.LOCKTABLE;
              //-$015rPar.FINDFIRST;

              //-$015rPar."Ejecutando Generar" := FALSE;
              //-$015rPar.MODIFY;
              EXIT;
            END;
            sw := TRUE;

            // Crear reservas de productos

            ventana.OPEN(Text006);

            rPaqProd.RESET;
            rPaqProd.SETRANGE(Paquete, rPer.Paquete);
            IF rPaqProd.FINDSET THEN
            BEGIN
              REPEAT
                CASE rPaqProd."Tipo Producto" OF
                  rPaqProd."Tipo Producto"::Hotel: BEGIN
                                                     reserva_hotel(cab, rPer, rPaqProd.Producto);
                                                   END;
                  rPaqProd."Tipo Producto"::Transfer: BEGIN
                                                        no_transfer := reserva_transfer(cab, rPer, rPaqProd.Producto);
                                                      END;
                  rPaqProd."Tipo Producto"::Excursion: BEGIN
                                                         reserva_excursion(cab, rPer, rPaqProd.Producto);
                                                       END;
                  rPaqProd."Tipo Producto"::Vuelo: BEGIN
                                                   END;
                  rPaqProd."Tipo Producto"::RaC: BEGIN
                                                 END;
                END;
              UNTIL rPaqProd.NEXT = 0;
            END;
            ventana.CLOSE;

            rPer.Generada := TRUE;

            // Modificacion solicitada por LTU para cambiar el paquete de la reserva en funcion
            // del campo "No Transfer" de la conversion del hotel

            IF no_transfer THEN
              rPer.Paquete := rParInt."Paquete Solo Hotel";

            rPer.VALIDATE("Modificacion importacion", FALSE);
            rPer.CheckEnvioConfirmacion(FALSE);  //+$009
            rPer.MODIFY;
          END;
        UNTIL rPer.NEXT = 0;

        //. Circuitos
        IF cab.Circuito <> '' THEN BEGIN
          reserva_circuito(cab);
        END;
        //. Fin Circuitos

        IF sw THEN
        BEGIN
          rAco.RESET;
          //-$023rAco.LOCKTABLE;
          rAco.SETRANGE (Delegacion      , cab.Delegacion);
          rAco.SETRANGE ("N§ Interno"    , cab."N§ Interno");
          IF rAco.FINDSET THEN
          BEGIN
            REPEAT
              rAco.Generado := TRUE;
              rAco.MODIFY;
            UNTIL rAco.NEXT = 0;
          END;
        END;
      END;
      rPer.RESET;

      // Comprobar si la cabecera esta completamente generada

      rPer2.RESET;
      rPer2.SETRANGE(Delegacion  , rPer.Delegacion);
      rPer2.SETRANGE("N§ Interno", rPer."N§ Interno");
      rPer2.SETRANGE(Generada    , FALSE);
      IF rPer2.ISEMPTY THEN
      BEGIN
        cab.GET(cab.Delegacion, cab."N§ Interno"); //+$014
        cab.Generada := TRUE;
        cab.MODIFY;
      END;

      //-$015rPar.LOCKTABLE;
      //-$015rPar.FINDFIRST;
      //-$015rPar."Ejecutando Generar" := FALSE;
      //-$015rPar.MODIFY;
      //-$015COMMIT;

      //. Si el touroperador esta configurado hay que enviar confirmacion
      //+$010 <
      //IF cab."N§ Fichero" = 0 THEN
      //  lcEnviar.GenerarConfTouroperador(cab, false);
      //+$010 >

      // AJS 14.01.2010, Dejamos de borrar el historico
      // Borramos los registros del historico de modificaciones

      //rHis.RESET;
      //rHis.LOCKTABLE;
      //rHis.SETRANGE(Delegacion  , cab.Delegacion);
      //rHis.SETRANGE("N§ Interno", cab."N§ Interno");
      //IF rHis.FINDSET(TRUE) THEN
      //  rHis.DELETEALL;
    END;

    PROCEDURE comp_error@9(cab@1103355000 : Record 7009741);
    VAR
      rHotTOCir@1103355001 : Record 7010193;
      rAco@1103355002 : Record 7009748;
    BEGIN
      // comp_error

      error_datos := FALSE;
      campo_error := 0;
      IF cab.TourOperador = '' THEN BEGIN
        campo_error := 1;
        error_datos := TRUE;
      END;
      IF cab.Bono = '' THEN BEGIN
        campo_error := 2;
        error_datos := TRUE;
      END;
      IF cab.Nombre = '' THEN BEGIN
        campo_error := 3;
        error_datos := TRUE;
      END;
      IF rPer."Fecha entrada" = 0D THEN BEGIN
        campo_error := 4;
        error_datos := TRUE;
      END;
      IF rPer."Fecha salida" = 0D THEN BEGIN
        campo_error := 5;
        error_datos := TRUE;
      END;
      IF rPer.Paquete = '' THEN BEGIN
        campo_error := 6;
        error_datos := TRUE;
      END;
      IF cab."TourOperador Venta" = '' THEN BEGIN
        campo_error := 7;
        error_datos := TRUE;
      END;
      IF rPer."Fecha venta" = 0D THEN BEGIN
        campo_error := 10;
        error_datos := TRUE;
      END;
      rPaqProd.RESET;
      rPaqProd.SETRANGE(Paquete, rPer.Paquete);
      IF rPaqProd.FINDSET THEN BEGIN
        REPEAT
          IF rPaqProd."Tipo Producto" = rPaqProd."Tipo Producto"::Hotel THEN BEGIN
            IF rPer.Regimen = '' THEN BEGIN
              campo_error := 8;
              error_datos := TRUE;
            END;
            IF rPer.Habitacion = '' THEN BEGIN
              campo_error := 9;
              error_datos := TRUE;
            END;
          END;
        UNTIL rPaqProd.NEXT = 0;
      END;

      // Circuitos
      //
      IF cab.Circuito <> '' THEN BEGIN
        IF cab."Fecha Inicio Circuito" = 0D THEN BEGIN
          campo_error := 13;
          error_datos := TRUE;
        END;

        IF cab."Contrato Venta Circuito" = '' THEN BEGIN
          campo_error := 14;
          error_datos := TRUE;
        END;

        IF cab."Habitacion Circuito" = '' THEN BEGIN
          campo_error := 15;
          error_datos := TRUE;
        END;

        IF cab."Categoria Circuito" = '' THEN BEGIN
          campo_error := 16;
          error_datos := TRUE;
      END;

        IF NOT rHotTOCir.Buscar_Hoteles_Tarifa(cab.Delegacion, cab."Contrato Venta Circuito", cab.Circuito,
                                        cab."Categoria Circuito", cab."Fecha Inicio Circuito", FALSE) THEN BEGIN
          campo_error := 12;
          error_datos := TRUE;
        END;
      END;
      // Fin errores de Circuitos

      // Comprueba errores acompa¤antes
      //
      rAco.RESET;
      rAco.SETRANGE(Delegacion  , cab.Delegacion);
      rAco.SETRANGE("N§ Interno", cab."N§ Interno");
      IF rAco.FINDSET THEN BEGIN
        REPEAT
          IF rAco."Tipo Persona" = '' THEN BEGIN
            campo_error := 11;
            error_datos := TRUE;
          END;
        UNTIL rAco.NEXT = 0;
      END;

      // Error canal venta $017
      IF cab."Canal venta" = '' THEN BEGIN
        campo_error := 17;
        error_datos := TRUE;
      END;
    END;

    PROCEDURE sacar_error@10(cab@1103355000 : Record 7009741);
    BEGIN
      // sacar_error
      //
      CASE campo_error OF
        1: MESSAGE(STRSUBSTNO(Text007,
                           cab."N§ Interno", cab.Bono));
        2: MESSAGE(STRSUBSTNO(Text008,
                           cab."N§ Interno", cab.Bono));
        3: MESSAGE(STRSUBSTNO(Text009,
                           cab."N§ Interno", cab.Bono));
        4: MESSAGE(STRSUBSTNO(Text010,
                           cab."N§ Interno", cab.Bono));
        5: MESSAGE(STRSUBSTNO(Text011,
                           cab."N§ Interno", cab.Bono));
        6: MESSAGE(STRSUBSTNO(Text012,
                           cab."N§ Interno", cab.Bono));
        7: MESSAGE(STRSUBSTNO(Text013,
                           cab."N§ Interno", cab.Bono));
        8: MESSAGE(STRSUBSTNO(Text014,
                           cab."N§ Interno", cab.Bono));
        9: MESSAGE(STRSUBSTNO(Text015,
                           cab."N§ Interno", cab.Bono));
        10: MESSAGE(STRSUBSTNO(Text016,
                           cab."N§ Interno", cab.Bono));
        11: MESSAGE(STRSUBSTNO(Text017,
                           cab."N§ Interno", cab.Bono));
        12: MESSAGE(Text018,
                 cab."Contrato Venta Circuito", cab.Circuito, cab."Fecha Inicio Circuito", cab."Categoria Circuito");
        13: MESSAGE(STRSUBSTNO(Text019,
                           cab."N§ Interno", cab.Bono));
        14: MESSAGE(STRSUBSTNO(Text020,
                           cab."N§ Interno", cab.Bono));
        15: MESSAGE(STRSUBSTNO(Text021,
                           cab."N§ Interno", cab.Bono));
        16: MESSAGE(STRSUBSTNO(Text022,
                           cab."N§ Interno", cab.Bono));
        17: MESSAGE(STRSUBSTNO(Text080,
                           cab."N§ Interno", cab.Bono));
      END;
    END;

    PROCEDURE reserva_hotel@18(cab@1103355000 : Record 7009741;per@1103355001 : Record 7009742;producto@1103355002 : Code[10]);
    VAR
      rHot@1103355003 : Record 7009724;
      rZon@1103355004 : Record 7009713;
      rConC@1103355005 : Record 7009723;
      rConV@1103355006 : Record 7009727;
      rHab@1103355007 : Record 7009731;
      lrExtrRes@1103355008 : Record 7009864;
      lrExtrHotel@1103355009 : Record 7009750;
      lwCont@1103355010 : Integer;
      lwNoCot@1103355011 : Integer;
      lwIdHot@1103355012 : Integer;
      lwIdTraEnt@1103355013 : Integer;
      lwIdTraSal@1103355014 : Integer;
    BEGIN
      // reserva_hotel
      //
      CLEAR(rRsvHot);
      rRsvHot."N§ Interno" := cab."N§ Interno";
      rRsvHot."N§ Periodo" := per."N§ Periodo";
      rRsvHot."N§ Reserva" := num_reserva_hotel;
      rRsvHot.TourOperador := cab.TourOperador;
      rRsvHot."TourOperador Venta" := cab."TourOperador Venta";
      rRsvHot.Bono := cab.Bono;
      rRsvHot.Nombre := cab.Nombre;
      rRsvHot.Edad := cab.Edad;
      rRsvHot."Tipo Persona" := cab."Tipo Persona";
      rRsvHot.Idioma := cab.Idioma;
      rRsvHot."Compa¤ia entrada" := per."Compa¤ia entrada";
      rRsvHot."Vuelo entrada" := per."Vuelo entrada";
      rRsvHot."Fecha entrada" := per."Fecha entrada";
      rRsvHot."Terminal entrada" := per."Terminal entrada";
      rRsvHot."Hora entrada" := per."Hora entrada";
      rRsvHot."IATA origen entrada" := per."IATA origen entrada";
      rRsvHot."IATA destino entrada" := per."IATA destino entrada";
      rRsvHot."Compa¤ia salida" := per."Compa¤ia salida";
      rRsvHot."Vuelo salida" := per."Vuelo salida";
      rRsvHot."Fecha salida" := per."Fecha salida";
      rRsvHot."Terminal salida" := per."Terminal salida";
      rRsvHot."Hora salida" := per."Hora salida";
      rRsvHot."IATA origen salida" := per."IATA origen salida";
      rRsvHot."IATA destino salida" := per."IATA destino salida";
      rRsvHot."N§ Habitaciones" := per."N§ Habitaciones";
      rRsvHot.Habitacion := per.Habitacion;
      rRsvHot."Habitacion TO" := per."Habitacion TO";
      rRsvHot.Regimen := per.Regimen;
      rRsvHot."Regimen TO" := per."Regimen TO";
      rRsvHot."Hotel reservado" := per."Hotel reservado";
      rRsvHot."Hotel TO" := per."Hotel TO";
      rRsvHot."Fecha venta" := per."Fecha venta";
      rRsvHot.Responsable := TRUE;
      rRsvHot."N§ Responsable" := rRsvHot."N§ Reserva";
      rRsvHot.Producto := producto;
      rRsvHot."Hotel origen precios" := per."Hotel origen precios";
      rRsvHot."Hotel booking" := per."Hotel Booking";
      rRsvHot."Hotel Factura" := per."Hotel Factura";
      rRsvHot."Hotel venta" := per."Hotel venta";
      rRsvHot."Contrato compra" := per."Contrato compra";
      rRsvHot."Contrato venta" := per."Contrato venta";
      rRsvHot.Delegacion := per.Delegacion;
      rRsvHot."Fin estancia" := per."Fecha salida";
      rRsvHot."Fecha Recepcion" := cab."Fecha recepcion";
      rRsvHot."Codigo Grupo" := cab."Codigo Grupo";
      rRsvHot."Calculo anulado" := per."Calculo anulado";
      rRsvHot."Calculo unico" := per."Calculo unico";
      rRsvHot."N§ Fichero" := cab."N§ Fichero";
      rRsvHot."N§ Linea" :=  cab."N§ Linea";
      rRsvHot."N§ Acompa¤ante" := 1;
      rRsvHot.Circuito := cab.Circuito;
      IF rRsvHot.Responsable THEN
        rRsvHot."EBB libre" := per."EBB libre";
      IF per."Tipo Reserva" = per."Tipo Reserva"::Request THEN
        rRsvHot."Fuera cupo" := TRUE;

      // Comprobamos si es un hotel oferta
      //
      IF rHot.GET(rRsvHot."Hotel reservado") THEN BEGIN
        IF rHot.NoName THEN
          rRsvHot."Pendiente asignar" := TRUE;
        rRsvHot."Zona hotel" := rHot."Zona Fisica";
      END
      ELSE BEGIN
        rRsvHot."Pendiente asignar" := TRUE;
      END;
      // Calculamos la estancia
      //
      rRsvHot.Estancia := rRsvHot."Fecha salida" - rRsvHot."Fecha entrada";
      // Obtenemos el Tipo de contrato
      //
      IF rConC.GET(rRsvHot.Delegacion, rRsvHot."Contrato compra") THEN BEGIN
        rRsvHot."Tipo contrato" := rConC."Tipo de Contrato" + 1;
      END;
      // Obtenemos la habitacion basica
      //
      IF rRsvHot."Habitacion TO" <> '' THEN BEGIN
        rHab.RESET;
        rHab.SETRANGE(Delegacion     , rRsvHot.Delegacion);
        rHab.SETRANGE("N§ Contrato"  , rRsvHot."Contrato compra");
        rHab.SETRANGE("Tipo contrato", rHab."Tipo contrato"::Compra);
        rHab.SETRANGE("Habitacion TO", rRsvHot."Habitacion TO");
        IF rHab.FINDFIRST THEN
          rRsvHot."Habitacion basica" := rHab."Habitacion basica"
      END
      ELSE BEGIN
        rHab.RESET;
        rHab.SETRANGE(Delegacion       , rRsvHot.Delegacion);
        rHab.SETRANGE("N§ Contrato"    , rRsvHot."Contrato compra");
        rHab.SETRANGE("Tipo contrato"  , rHab."Tipo contrato"::Compra);
        rHab.SETRANGE("Habitacion cupo", rRsvHot.Habitacion);
        IF rHab.FINDFIRST THEN
          rRsvHot."Habitacion basica" := rHab."Habitacion basica"
      END;

      // Comprobamos si es de circuito y activamos precio manual venta a 0 para no generar ingresos
      //
      IF cab.Circuito <> '' THEN BEGIN
        rRsvHot."Tipo Precio Manual Venta" := rRsvHot."Tipo Precio Manual Venta"::"Por Habitacion";
        rRsvHot."Precio Manual venta" := 0;
      END;

      //-$023rRsvHot.LOCKTABLE;
      rRsvHot.INSERT;
      //-$023rRsvHot.LOCKTABLE;
      rRsvHot.VALIDATE("Ultimo dia release");
      IF rAco.GET(cab.Delegacion, cab."N§ Interno", 1) THEN BEGIN
        rAco.TESTFIELD("Tipo Persona");
        rRsvHot."N§ Habitacion" := rAco."N§ Habitacion";
        rRsvHot."Fecha Nacimiento" := rAco."Fecha Nacimiento";
      END;
      rRsvHot.MODIFY;

      rRsvHot."Canal venta" := cab."Canal venta"; // +$017

      genera_reserva_booking(rRsvHot);

      // Acompa¤antes hotel
      rAco.RESET;
      rAco.SETRANGE (Delegacion      , cab.Delegacion);
      rAco.SETRANGE ("N§ Interno"    , cab."N§ Interno");
      rAco.SETFILTER("N§ Acompa¤ante", '<>1');
      IF rAco.FINDSET THEN
      BEGIN
        REPEAT
          rAco.TESTFIELD("Tipo Persona");
          rRsvHot2 := rRsvHot;
          rRsvHot2."N§ Reserva" := num_reserva_hotel;
          rRsvHot2.Nombre := rAco.Nombre;
          rRsvHot2.Edad := rAco.Edad;
          rRsvHot2."Tipo Persona" := rAco."Tipo Persona";
          rRsvHot2."N§ Acompa¤ante" := rAco."N§ Acompa¤ante";
          rRsvHot2."N§ Habitacion" := rAco."N§ Habitacion";
          rRsvHot2."N§ Habitaciones" := 0;
          rRsvHot2.Habitacion := '';
          rRsvHot2."Habitacion TO" := '';
          rRsvHot2.Responsable := FALSE;
          rRsvHot2."Fecha Nacimiento" := rAco."Fecha Nacimiento";

          // Comprobamos si es de circuito y activamos precio manual venta a 0 para no generar ingresos
          IF cab.Circuito <> '' THEN BEGIN
            rRsvHot2."Tipo Precio Manual Venta" := rRsvHot."Tipo Precio Manual Venta"::"Por Habitacion";
            rRsvHot2."Precio Manual venta" := 0;
          END;

          //-$023rRsvHot2.LOCKTABLE;
          rRsvHot2.INSERT;
        UNTIL rAco.NEXT = 0;
      END;

      // JPT 13/11/08
      // Extras
      CLEAR(lrExtrRes);
      lrExtrRes.SETCURRENTKEY(Delegacion,"N§ Interno","N§ Periodo");
      lrExtrRes.SETRANGE(Delegacion  , per.Delegacion);
      lrExtrRes.SETRANGE("N§ Interno", per."N§ Interno");
      lrExtrRes.SETRANGE("N§ Periodo", per."N§ Periodo");
      IF lrExtrRes.FINDSET THEN BEGIN
        CLEAR(lwCont);
        REPEAT
          lwCont += 10000;
          CLEAR(lrExtrHotel);
          lrExtrHotel.TRANSFERFIELDS(lrExtrRes);
          lrExtrHotel."N§ Reserva" := rRsvHot."N§ Reserva";
          lrExtrHotel."N§ Extra"   := lwCont;
          lrExtrHotel.INSERT;
        UNTIL lrExtrRes.NEXT=0;
      END;


      // AJF 04/05/09
      // Vinculo la reserva hotel a la cotizacion si la cabecera se ha generado
      // a partir de una.
      // AJF 02/06/09
      // Se modifica el precio manual de la reserva para que no se recalcule la reserva.
      lwNoCot := cab.GetNumeroCotizacion;
      IF lwNoCot <> 0 THEN
      BEGIN
        cCotGenCab.RecuperarIdProducto(lwNoCot, per, lwIdHot, lwIdTraEnt, lwIdTraSal);
        cCotGenCab.VincularACotizacion(lwNoCot, rRsvHot."N§ Reserva", rRsvHot.Delegacion, 0,
                                       cCotGenCab.GetTipoReservaHotel, lwIdHot, 0, 0, 0);
        cCotGenCab.ModificarPrecioManualResHotel(lwNoCot, rRsvHot);
        rRsvHot.MODIFY;
      END;
    END;

    PROCEDURE num_reserva_hotel@20() : Integer;
    BEGIN
      // num_reserva_hotel

      rPar.LOCKTABLE;
      IF rPar.FINDFIRST THEN
      BEGIN
        rPar."Contador Reservas hotel" := rPar."Contador Reservas hotel" + 1;
        rPar.MODIFY;
        EXIT(rPar."Contador Reservas hotel");
      END;
    END;

    PROCEDURE reserva_transfer@11(cab@1103355000 : Record 7009741;per@1103355001 : Record 7009742;producto@1103355002 : Code[10]) : Boolean;
    VAR
      lrAco@1100217000 : Record 7009748;
      rRsvTra@1103355003 : Record 7009744;
      rRsvTra2@1103355004 : Record 7009744;
      rTipoElem@1103355006 : Record 7009715;
      rConv@1103355007 : Record 7009725;
      lrPer@1103355008 : Record 7009742;
      lw_primer@1103355009 : Integer;
      lw_ultimo@1103355010 : Integer;
      lwHotel@1103355011 : Code[20];
      lwNoCot@1103355012 : Integer;
      lwIdHot@1103355013 : Integer;
      lwIdTraEnt@1103355014 : Integer;
      lwIdTraSal@1103355015 : Integer;
    BEGIN
      // reserva_transfer

      //.                Si la conversion de hotel esta configurada como No Transfer tenemos que
      //.                salir de la rutina sin crear ninguna reserva

      //.                Devolvemos el valor del campo "No Transfer"

      //.                En los casos de circuito hay que generar transfers de una via.

      //.                Se rellenan unos nuevos campos Tipo transfer entrada/salida para indicar los servicios aereos

      //.                Si el hotel TTOO esta marcado como Transfer Free, se genera la reserva pero como invitado

      //. AJF 04/05/2009 Vinculo el transfer a una cotizacion si la cabecera ha sido generada a partir de una.

      rParPer.FINDFIRST;

      CLEAR(rConv);
      rConv.SETRANGE(TourOperador        , cab.TourOperador);
      rConv.SETRANGE("Touroperador venta", per."TourOperador Venta");
      rConv.SETRANGE("Hotel TO"          , per."Hotel TO");
      IF NOT rConv.FINDFIRST THEN BEGIN
        rConv.SETRANGE("Touroperador venta", '');
        IF NOT rConv.FINDFIRST THEN
          CLEAR(rConv);
      END;

      IF rConv."Hotel estancia" = '' THEN BEGIN
        IF rConv."No Transfer" THEN
          EXIT(TRUE);
      END;

      // ----  AJS 09.03.2001 Buscar si es primer o el ultimo periodo para saber que transfer hay  ----
      // ----  que crear en cada caso solo para circuitos y solo si hay mas de un periodo.         ----

      lw_primer := 0;
      lw_ultimo := 0;
      IF cab.Circuito <> '' THEN
      BEGIN
        lrPer.RESET;
        lrPer.SETRANGE(Delegacion  , cab.Delegacion);
        lrPer.SETRANGE("N§ Interno", cab."N§ Interno");
        IF lrPer.FINDFIRST THEN
          lw_primer := lrPer."N§ Periodo";
        IF lrPer.FINDLAST THEN
          lw_ultimo := lrPer."N§ Periodo";
        IF lw_primer = lw_ultimo THEN BEGIN
          lw_primer := 0;
          lw_ultimo := 0;
        END;
      END;

      //. Creamos la reserva de transfer correspondiente al primer acompa¤ante
      CLEAR(rRsvTra);
      rRsvTra.Delegacion   := cab.Delegacion;
      rRsvTra."N§ Interno" := cab."N§ Interno";
      rRsvTra."N§ Periodo" := per."N§ Periodo";
      rRsvTra."N§ Reserva" := num_reserva_transfer();
      rRsvTra.Producto     := producto;

      IF rPar."Touroperador operativo" = rPar."Touroperador operativo"::Compra THEN
        rRsvTra.TourOperador := cab.TourOperador
      ELSE
        rRsvTra.TourOperador := cab."TourOperador Venta";

      rRsvTra.Bono             := cab.Bono;
      rRsvTra.Nombre           := cab.Nombre;
      rRsvTra.Edad             := cab.Edad;
      rRsvTra."N§ Acompa¤ante" := 1;
      rRsvTra."Tipo Persona"   := cab."Tipo Persona";

      rRsvTra."Canal venta" := cab."Canal venta"; // +$017

      // ----  No crear el transfer de entrada en las reservas de transfer del ultimo periodo de  ----
      // ----  un circuito                                                                        ----

      IF per."N§ Periodo" <> lw_ultimo THEN
        rRsvTra."Fecha entrada" := per."Fecha entrada";

      //. Si la reserva vino en txt hay que tomar el vuelo del periodo, si es WS hay que tomar datos del acompa¤ante
      IF cab."Tipo importacion" = cab."Tipo importacion"::Texto THEN
      BEGIN
        IF (per."Compa¤ia entrada" <> '') OR (per."Vuelo entrada" <> '') THEN BEGIN
          rRsvTra."Compa¤ia entrada"     := per."Compa¤ia entrada";
          rRsvTra."Vuelo entrada"        := per."Vuelo entrada";
          rRsvTra."Terminal entrada"     := per."Terminal entrada";
          rRsvTra."Hora entrada"         := per."Hora entrada";
          rRsvTra."IATA origen entrada"  := per."IATA origen entrada";
          rRsvTra."IATA destino entrada" := per."IATA destino entrada";
          rRsvTra.VALIDATE(rRsvTra."Servicio transfer entrada" , per."Servicio transfer entrada");
        END;
      END
      ELSE
      BEGIN
        lrAco.SETRANGE(Delegacion  , cab.Delegacion);
        lrAco.SETRANGE("N§ Interno", cab."N§ Interno");
        IF lrAco.FINDFIRST THEN
        BEGIN
          IF (lrAco."Compa¤ia entrada" <> '') OR (lrAco."Vuelo entrada" <> '') THEN BEGIN
            rRsvTra."Compa¤ia entrada"     := lrAco."Compa¤ia entrada";
            rRsvTra."Vuelo entrada"        := lrAco."Vuelo entrada";
            rRsvTra."Terminal entrada"     := lrAco."Terminal entrada";
            rRsvTra."Hora entrada"         := lrAco."Hora entrada";
            rRsvTra."IATA origen entrada"  := lrAco."IATA origen entrada";
            rRsvTra."IATA destino entrada" := lrAco."IATA destino entrada";
            rRsvTra.VALIDATE(rRsvTra."Servicio transfer entrada" , per."Servicio transfer entrada");
          END;
        END;
      END;

      // ----  No crear el transfer de entrada en las reservas de transfer del ultimo periodo de  ----
      // ----  un circuito                                                                        ----

      IF per."N§ Periodo" <> lw_primer THEN
        rRsvTra."Fecha salida" := per."Fecha salida";

      //. Si la reserva vino en txt hay que tomar el vuelo del periodo, si es WS hay que tomar datos del acompa¤ante
      IF cab."Tipo importacion" = cab."Tipo importacion"::Texto THEN
      BEGIN
        IF (per."Compa¤ia salida" <> '') OR (per."Vuelo salida" <> '') THEN BEGIN
          rRsvTra."Compa¤ia salida"     := per."Compa¤ia salida";
          rRsvTra."Vuelo salida"        := per."Vuelo salida";
          rRsvTra."Terminal salida"     := per."Terminal salida";
          rRsvTra."Hora salida"         := per."Hora salida";
          rRsvTra."IATA origen salida"  := per."IATA origen salida";
          rRsvTra."IATA destino salida" := per."IATA destino salida";
          rRsvTra.VALIDATE(rRsvTra."Servicio transfer salida" , per."Servicio transfer salida");
        END;
      END
      ELSE
      BEGIN
        lrAco.SETRANGE(Delegacion  , cab.Delegacion);
        lrAco.SETRANGE("N§ Interno", cab."N§ Interno");
        IF lrAco.FINDFIRST THEN
        BEGIN
          IF (lrAco."Compa¤ia salida" <> '') OR (lrAco."Vuelo salida" <> '') THEN BEGIN
            rRsvTra."Compa¤ia salida"     := lrAco."Compa¤ia salida";
            rRsvTra."Vuelo salida"        := lrAco."Vuelo salida";
            rRsvTra."Terminal salida"     := lrAco."Terminal salida";
            rRsvTra."Hora salida"         := lrAco."Hora salida";
            rRsvTra."IATA origen salida"  := lrAco."IATA origen salida";
            rRsvTra."IATA destino salida" := lrAco."IATA destino salida";
            rRsvTra.VALIDATE(rRsvTra."Servicio transfer salida" , per."Servicio transfer salida");
          END;
        END;
      END;

      IF rRsvTra.Entrada = 1 THEN BEGIN
        IF rRsvTra.Salida = 1 THEN
          rRsvTra.Direccion := rRsvTra.Direccion::Ambos
        ELSE
          rRsvTra.Direccion := rRsvTra.Direccion::Entrada;
      END
      ELSE BEGIN
        IF rRsvTra.Salida = 1 THEN
          rRsvTra.Direccion := rRsvTra.Direccion::Salida;
      END;

      rRsvTra."N§ Responsable"           := rRsvTra."N§ Reserva";
      rRsvTra."Precio Manual"            := per."Precio manual";
      rRsvTra."Tipo precio manual"       := per."Tipo precio manual";
      rRsvTra."Precio Manual venta"      := per."Precio manual venta";
      rRsvTra."TourOperador facturacion" := cab."TourOperador Venta";
      rRsvTra.Circuito                   := cab.Circuito;
      // JPT 21/10/08

      //-$016rRsvTra."Transfer Privado Llegada"         := rConv."Transfer Privado" OR rRsvTra.EsTransferPrivado(per);

      //+$016 <
      //. Si viene de una importacion lo haremos en funcion de la conversion del hotel solo para GO Caribic
      DatosInstalacion.FINDFIRST;
      IF (cab."N§ Fichero" <> 0) AND (DatosInstalacion."Empresa Real" = DatosInstalacion."Empresa Real"::GOC) THEN //+$020
      BEGIN
        rRsvTra."Transfer Privado Llegada" := rConv."Transfer Privado";
        rRsvTra."Transfer Privado Salida"  := rConv."Transfer Privado";
        IF rConv."Transfer Privado" THEN BEGIN
          rRsvTra."Servicio transfer entrada" := rRsvTra."Servicio transfer entrada"::Privado;
          rRsvTra."Servicio transfer salida" := rRsvTra."Servicio transfer salida"::Privado;
        END;
      END
      ELSE
      BEGIN
        // -$018
      //rRsvTra."Transfer Privado Llegada" := (per."Transfer Privado" IN [per."Transfer Privado"::Ambos,per."Transfer Privado"::Entrada]);
      //rRsvTra."Transfer Privado Salida"  := (per."Transfer Privado" IN [per."Transfer Privado"::Ambos,per."Transfer Privado"::Salida]);

        rRsvTra."Servicio transfer entrada" := per."Servicio transfer entrada";
        rRsvTra."Servicio transfer salida" := per."Servicio transfer salida";
        rRsvTra."Transfer Privado Llegada" := (per."Servicio transfer entrada" IN
                                              [per."Servicio transfer entrada"::Privado,per."Servicio transfer entrada"::Deluxe]);
        rRsvTra."Transfer Privado Salida" := (per."Servicio transfer salida" IN
                                              [per."Servicio transfer salida"::Privado,per."Servicio transfer salida"::Deluxe]);
      END;
      //+$016 >

      // Comprobamos si la reserva es de circuito para no generar ingresos

      // AJS 02.02.2007
      // Si la conversion tiene la marca de Transfer Free no hay que generar ingresos

      IF (cab.Circuito <> '') OR (rConv."Transfer free") THEN
        rRsvTra."Invitado TourOperador" := TRUE;

      rRsvTra."Fecha creacion" := CURRENTDATETIME;

      //-$023rRsvTra.LOCKTABLE;
      rRsvTra.INSERT;
      //-$023rRsvTra.LOCKTABLE;

      // Introducimos un elemento a transportar

      //-$012rElemTran.INIT;
      //-$012rElemTran.Delegacion         := rRsvTra.Delegacion;
      //-$012rElemTran."N§ Reserva"       := rRsvTra."N§ Reserva";
      //-$012rElemTran."N§ Orden"         := 10000;
      //-$012rElemTran."Tipo elemento"    := STRSUBSTNO('%1', rRsvTra."Tipo Persona");
      //-$012rElemTran."Numero elementos" := 1;
      //-$012rElemTran.Humano             := TRUE;
      //-$012IF (rElemTran."Tipo elemento" = rParPer."Codigo Infant") THEN
      //-$012  rElemTran."Tipo interno" := rElemTran."Tipo interno"::Bebe
      //-$012ELSE
      //-$012  rElemTran."Tipo interno" := rElemTran."Tipo interno"::"Adulto/Ni¤o";
      //-$012IF rElemTran."Tipo elemento" = rParPer."Codigo Ni¤o" THEN
      //-$012  rElemTran.EsNi¤o := TRUE;
      //-$012rElemTran.LOCKTABLE;
      //-$012rElemTran.INSERT;

      //-$012rRsvTra.CALCFIELDS(Personas, Ni¤os, o_Bebes);
      //-$012rRsvTra."N§ Personas" := rRsvTra.Personas;
      //-$012rRsvTra."N§ Ni¤os"    := rRsvTra.Ni¤os;
      //-$012rRsvTra."N§ Bebes"    := rRsvTra.o_Bebes;

      rRsvTra.ManagePersonType; //+$012

      // JPT 21/10/08 A¤adimos Hotel Transfer
      lwHotel := rConv."Hotel Transfer";
      IF lwHotel='' THEN
        lwHotel := per."Hotel Booking";
      rRsvTra.VALIDATE("Hotel entrada", lwHotel);
      rRsvTra.VALIDATE("Hotel salida" , lwHotel);

      // AJS 21.10.2003

      rRsvTra."Tipo transfer entrada" := per."Tipo transfer entrada";
      rRsvTra."Tipo transfer salida"  := per."Tipo transfer salida";

      // FIN AJS 21.10.2003

      rRsvTra.MODIFY;

      // Acompa¤antes transfer

      lrAco.RESET;
      lrAco.SETRANGE(Delegacion  , cab.Delegacion);
      lrAco.SETRANGE("N§ Interno", cab."N§ Interno");
      lrAco.FINDFIRST;

      rAco.RESET;
      //-$023rAco.LOCKTABLE;
      rAco.SETRANGE (Delegacion      , cab.Delegacion);
      rAco.SETRANGE ("N§ Interno"    , cab."N§ Interno");
      rAco.SETFILTER("N§ Acompa¤ante", '<>%1', lrAco."N§ Acompa¤ante");
      IF rAco.FINDSET THEN BEGIN
        REPEAT
          rAco.TESTFIELD("Tipo Persona");
          CLEAR(rRsvTra2);
          rRsvTra2 := rRsvTra;
          rRsvTra2."N§ Reserva"     := num_reserva_transfer;
          rRsvTra2.Nombre           := rAco.Nombre;
          rRsvTra2.Edad             := rAco.Edad;
          rRsvTra2."Tipo Persona"   := rAco."Tipo Persona";
          rRsvTra2."N§ Acompa¤ante" := rAco."N§ Acompa¤ante";

          //. En la importacion de web service tenemos la informacion de vuelo por persona
          IF cab."Tipo importacion" = cab."Tipo importacion"::WS THEN
          BEGIN
            IF (rAco."Compa¤ia entrada" <> '') OR (rAco."Vuelo entrada" <> '') THEN
            BEGIN
              rRsvTra2."Compa¤ia entrada"     := rAco."Compa¤ia entrada";
              rRsvTra2."Vuelo entrada"        := rAco."Vuelo entrada";
              rRsvTra2."Terminal entrada"     := rAco."Terminal entrada";
              rRsvTra2."Hora entrada"         := rAco."Hora entrada";
              rRsvTra2."IATA origen entrada"  := rAco."IATA origen entrada";
              rRsvTra2."IATA destino entrada" := rAco."IATA destino entrada";
              rRsvTra2.VALIDATE(rRsvTra2."Servicio transfer entrada" , per."Servicio transfer entrada");
            END;

            IF (rAco."Compa¤ia salida" <> '') OR (rAco."Vuelo salida" <> '') THEN
            BEGIN
              rRsvTra2."Compa¤ia salida"     := rAco."Compa¤ia salida";
              rRsvTra2."Vuelo salida"        := rAco."Vuelo salida";
              rRsvTra2."Terminal salida"     := rAco."Terminal salida";
              rRsvTra2."Hora salida"         := rAco."Hora salida";
              rRsvTra2."IATA origen salida"  := rAco."IATA origen salida";
              rRsvTra2."IATA destino salida" := rAco."IATA destino salida";
              rRsvTra2.VALIDATE(rRsvTra2."Servicio transfer salida" , per."Servicio transfer salida");
            END;
          END;

          // Comprobamos si la reserva es de circuito para no generar ingresos

          // AJS 02.02.2007
          // Si el hotel TTOO esta marcado como Transfer free no hay que generar ingresos

          IF (cab.Circuito <> '') OR (rConv."Transfer free") THEN
            rRsvTra2."Invitado TourOperador" := TRUE;

          //-$023rRsvTra2.LOCKTABLE;
          rRsvTra2.INSERT;
          //-$023rRsvTra2.LOCKTABLE;

          // Introducimos un elemento a transportar

          //-$012rElemTran.INIT;
          //-$012rElemTran.Delegacion         := rRsvTra2.Delegacion;
          //-$012rElemTran."N§ Reserva"       := rRsvTra2."N§ Reserva";
          //-$012rElemTran."N§ Orden"         := 10000;
          //-$012rElemTran."Tipo elemento"    := STRSUBSTNO('%1', rRsvTra2."Tipo Persona");
          //-$012rElemTran."Numero elementos" := 1;
          //-$012rElemTran.Humano             := TRUE;
          //-$012IF (rElemTran."Tipo elemento" = rParPer."Codigo Infant") THEN
          //-$012  rElemTran."Tipo interno" := rElemTran."Tipo interno"::Bebe
          //-$012ELSE
          //-$012  rElemTran."Tipo interno" := rElemTran."Tipo interno"::"Adulto/Ni¤o";
          //-$012IF rElemTran."Tipo elemento" = rParPer."Codigo Ni¤o" THEN
          //-$012  rElemTran.EsNi¤o := TRUE;
          //-$012rElemTran.LOCKTABLE;
          //-$012rElemTran.INSERT;

          //-$012rRsvTra2.CALCFIELDS(Personas, Ni¤os, o_Bebes);
          //-$012rRsvTra2."N§ Personas" := rRsvTra2.Personas;
          //-$012rRsvTra2."N§ Ni¤os"    := rRsvTra2.Ni¤os;
          //-$012rRsvTra2."N§ Bebes"    := rRsvTra2.o_Bebes;

          rRsvTra2.ManagePersonType; //+$012
          rRsvTra2.MODIFY;
        UNTIL rAco.NEXT = 0;
      END;

      // AJF 04/05/09
      // Vinculo la reserva de transfer a la cotizacion si la cabecera se ha generado
      // a partir de una.
      lwNoCot := cab.GetNumeroCotizacion;
      IF lwNoCot <> 0 THEN
      BEGIN
        cCotGenCab.RecuperarIdProducto(lwNoCot, per, lwIdHot, lwIdTraEnt, lwIdTraSal);
        cCotGenCab.VincularACotizacion(lwNoCot, rRsvTra."N§ Reserva", rRsvTra.Delegacion, 0,
                                       cCotGenCab.GetTipoReservaTransfer, 0, lwIdTraEnt, lwIdTraSal, 0);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE num_reserva_transfer@24() : Integer;
    BEGIN
      // num_reserva_transfer

      rPar.LOCKTABLE;
      IF rPar.FINDFIRST THEN BEGIN
        rPar."Contador Reservas transfer" := rPar."Contador Reservas transfer" + 1;
        rPar.MODIFY;
        EXIT(rPar."Contador Reservas transfer");
      END;
    END;

    PROCEDURE genera_reserva_booking@3(rsvhot@1103355000 : Record 7009743);
    VAR
      rsv_dia_compra@1103355001 : Record 7009755;
      rsv_dia_venta@1103355002 : Record 7009756;
      dia@1103355003 : Date;
      rResHot@1103355004 : Record 7009743;
      lwGrpTTOO@1100253000 : Code[10];
    BEGIN
      // genera_reserva_booking

      rPar.FINDFIRST;

      IF (rsvhot.Responsable) AND (rsvhot.Habitacion <> '') AND (rsvhot."N§ Habitaciones" <> 0) AND
         (rsvhot."Fecha entrada" <> 0D) AND (rsvhot."Fecha salida" <> 0D) AND (rsvhot."Hotel booking" <> '') THEN BEGIN
        dia := rsvhot."Fecha entrada";
        // JPT 11/08/10 A¤adios el Touroperador Grupo
        lwGrpTTOO := cFunHot.GetGrupoTouroperador(rsvhot."TourOperador Venta");
        FOR dia := rsvhot."Fecha entrada" TO (rsvhot."Fecha salida" - 1) DO BEGIN
          rsv_dia_compra.Delegacion := rsvhot.Delegacion;
          rsv_dia_compra."N§ Reserva" := rsvhot."N§ Reserva";
          rsv_dia_compra."Hotel booking" := rsvhot."Hotel booking";
          rsv_dia_compra.Dia := dia;
          rsv_dia_compra.Habitacion := rsvhot."Habitacion basica";
          rsv_dia_compra.TourOperador := rsvhot.TourOperador;
          rsv_dia_compra."Grupo touroperador" := lwGrpTTOO;
          rsv_dia_compra."Hotel reservado" := rsvhot."Hotel reservado";
          rsv_dia_compra.Bono := rsvhot.Bono;
          IF rsvhot."N§ Reserva" < 9000000 THEN BEGIN
            IF rsvhot."Hotel reservado" = rsvhot."Hotel booking" THEN
              rsv_dia_compra."Cantidad booking" := rsvhot."N§ Habitaciones"
            ELSE
              rsv_dia_compra.Asignado := rsvhot."N§ Habitaciones";
            rsv_dia_compra."Cantidad reservado" := rsvhot."N§ Habitaciones";
          END;
          rsv_dia_compra."Habitacion cupo" := rsvhot.Habitacion;
          rsv_dia_compra."Codigo grupo" := rRsvHot."Codigo Grupo";
          IF rsvhot.Responsable THEN BEGIN
            rsv_dia_compra."Nombre Responsable" := rsvhot.Nombre;
            rsv_dia_compra."Num confirmacion hotel"  := rsvhot."Num confirmacion hotel";
          END
          ELSE BEGIN
            IF rResHot.GET(rRsvHot.Delegacion, rsvhot."N§ Responsable") THEN BEGIN
              rsv_dia_compra."Nombre Responsable" := rResHot.Nombre;
              rsv_dia_compra."Num confirmacion hotel"  := rResHot."Num confirmacion hotel";
            END;
          END;
          rsv_dia_compra."Fecha Entrada"      := rsvhot."Fecha entrada";
          rsv_dia_compra."Fecha Salida"       := rsvhot."Fecha salida";

          //-$023rsv_dia_compra.LOCKTABLE;
          rsv_dia_compra.INSERT;
          // Si el contrato es en nombre propio grabamos en venta
          //
          // JPT 10/12/04 Si se ha marcado el parametro para generar cupos venta desde cupos compra se crear  siempre
          IF (rsvhot."Tipo contrato" = rsvhot."Tipo contrato"::"En nombre propio") OR rPar."Crear Cupos Venta desde compra" THEN BEGIN
            rsv_dia_venta.Delegacion := rsvhot.Delegacion;
            rsv_dia_venta."N§ Reserva" := rsvhot."N§ Reserva";
            rsv_dia_venta."Hotel Booking" := rsvhot."Hotel booking";
            rsv_dia_venta.Dia := dia;
            rsv_dia_venta.Habitacion := rsvhot."Habitacion basica";
            rsv_dia_venta.TourOperador := rsvhot."TourOperador Venta";

            rsv_dia_venta."Hotel Reservado" := rsvhot."Hotel reservado";
            rsv_dia_venta.Bono := rsvhot.Bono;
            IF rsvhot."N§ Reserva" < 9000000 THEN BEGIN
              IF rsvhot."Hotel reservado" = rsvhot."Hotel booking" THEN
                rsv_dia_venta."Cantidad booking" := rsvhot."N§ Habitaciones"
              ELSE
                rsv_dia_venta.Asignado := rsvhot."N§ Habitaciones";
              rsv_dia_venta."Cantidad reservado" := rsvhot."N§ Habitaciones";
            END;
            rsv_dia_venta."Habitacion cupo" := rsvhot.Habitacion;
            rsv_dia_venta."Codigo grupo" := rRsvHot."Codigo Grupo";
            IF rsvhot.Responsable THEN
              rsv_dia_venta."Nombre Responsable" := rsvhot.Nombre
            ELSE BEGIN
              IF rResHot.GET(rRsvHot.Delegacion, rsvhot."N§ Responsable") THEN BEGIN
                rsv_dia_venta."Nombre Responsable" := rResHot.Nombre;
              END;
            END;
            rsv_dia_venta."Fecha Entrada"      := rsvhot."Fecha entrada";
            rsv_dia_venta."Fecha Salida"       := rsvhot."Fecha salida";
            //-$023rsv_dia_venta.LOCKTABLE;
            rsv_dia_venta.INSERT;
          END;
        END;
      END;
    END;

    PROCEDURE borra_reserva_booking@4(rsvhot@1103355000 : Record 7009743);
    VAR
      rsv_dia_compra@1103355001 : Record 7009755;
      rsv_dia_venta@1103355002 : Record 7009756;
    BEGIN
      // borra_reserva_booking

      IF (rsvhot.Responsable) AND (rsvhot.Habitacion <> '') AND (rsvhot."N§ Habitaciones" <> 0 ) AND
         (rsvhot."Fecha entrada" <> 0D) AND (rsvhot."Fecha salida" <> 0D) AND (rsvhot."Hotel booking" <> '') THEN BEGIN
        rsv_dia_compra.SETRANGE(Delegacion  , rsvhot.Delegacion);
        rsv_dia_compra.SETRANGE("N§ Reserva", rsvhot."N§ Reserva");
        //-$023rsv_dia_compra.LOCKTABLE;
        IF rsv_dia_compra.FINDSET(TRUE) THEN
          rsv_dia_compra.DELETEALL;

        rsv_dia_venta.SETRANGE(Delegacion  , rsvhot.Delegacion);
        rsv_dia_venta.SETRANGE("N§ Reserva", rsvhot."N§ Reserva");
        //-$023rsv_dia_venta.LOCKTABLE;
        IF rsv_dia_venta.FINDSET(TRUE) THEN
          rsv_dia_venta.DELETEALL;
      END;
    END;

    PROCEDURE borra_reserva_hotel@12(rsvhot@1103355000 : Record 7009743);
    VAR
      rsvhot2@1103355001 : Record 7009743;
      rCargo@1103355002 : Record 7009749;
      rExtra@1103355003 : Record 7009750;
      rCom@1103355004 : Record 7009762;
      rBono@1103355005 : Record 7010013;
      w_ultimo_cierre@1103355006 : Integer;
    BEGIN
      // borra_reserva_hotel

      IF rsvhot.Responsable THEN
        borra_reserva_booking(rsvhot)
      //+$004
      ELSE
      BEGIN
        rsvhot2.RESET;
        IF rsvhot2.GET(rsvhot.Delegacion, rsvhot."N§ Responsable") THEN
        BEGIN
          IF rsvhot2."Llegada cerrada" THEN
          BEGIN
            rsvhot2."Pendiente calculo" := TRUE;
            rsvhot2.MODIFY;
          END;
        END;
      END;
      //+$004

      //+$013
      IF ( (rsvhot."Confirmacion hotel") OR (rsvhot."Comunicado hotel") ) AND
         (rsvhot."Fecha entrada" >= TODAY - 3) THEN
      BEGIN
        //+$007
        //. Cuando borramos el responsable, la reserva va al buzon de anulaciones
        IF rsvhot.Responsable THEN
        BEGIN
          rsvhot2.RESET;
          rsvhot2.SETCURRENTKEY(Delegacion,
                                "N§ Responsable");
          rsvhot2.SETRANGE(Delegacion      , rsvhot.Delegacion);
          rsvhot2.SETRANGE("N§ Responsable", rsvhot."N§ Reserva");
          IF rsvhot2.FINDSET THEN
            REPEAT
              inserta_buzon(rsvhot2);
            UNTIL rsvhot2.NEXT = 0;
        END
        ELSE
        //. Cuando borramos un acompa¤ante hay que marcar la reserva para que vuelva a enviarse como
        //. modificacion
        BEGIN
          rsvhot2.RESET;
          IF rsvhot2.GET(rsvhot.Delegacion, rsvhot."N§ Responsable") THEN
          BEGIN
            rsvhot2."Comunicado hotel"     := FALSE;
            rsvhot2."N§ envio hotel"       := 0;
            rsvhot2."Fecha envio"          := 0D;
            rsvhot2."Hora envio"           := 0T;
            rsvhot2."Usuario envio"        := '';
            rsvhot2."Nombre acep. listado" := '';
            rsvhot2.MODIFY;
          END;
        END;
      END;

      rCargo.RESET;
      rCargo.SETRANGE(Delegacion  , rsvhot.Delegacion);
      rCargo.SETRANGE("N§ Reserva", rsvhot."N§ Reserva");
      //-$023rCargo.LOCKTABLE;
      IF rCargo.FINDSET(TRUE) THEN
        rCargo.DELETEALL(TRUE);

      rExtra.RESET;
      rExtra.SETRANGE(Delegacion  , rsvhot.Delegacion);
      rExtra.SETRANGE("N§ Reserva", rsvhot."N§ Reserva");
      //-$023rExtra.LOCKTABLE;
      IF rExtra.FINDSET(TRUE) THEN
        rExtra.DELETEALL(TRUE);

      rCom.RESET;
      rCom.SETRANGE(Delegacion    , rsvhot.Delegacion);
      rCom.SETRANGE("N§ Interno"  , rsvhot."N§ Interno");
      rCom.SETRANGE("N§ Periodo"  , rRsvHot."N§ Periodo");
      rCom.SETRANGE("N§ Reserva"  , rRsvHot."N§ Reserva");
      rCom.SETRANGE("Tipo Reserva", rCom."Tipo Reserva"::Hotel);
      //-$023rCom.LOCKTABLE;
      IF rCom.FINDSET(TRUE) THEN
        rCom.DELETEALL(TRUE);
      rCom.RESET;

      // Si es el responsable de la reserva anulamos los bonos
      rBono.RESET;
      rBono.SETRANGE(Delegacion  , rsvhot.Delegacion);
      rBono.SETRANGE(TourOperador, rsvhot."TourOperador Venta");
      rBono.SETRANGE(Bono        , rsvhot.Bono);
      rBono.SETRANGE("N§ Reserva", rsvhot."N§ Reserva");
      IF rBono.FINDSET(TRUE) THEN BEGIN
        REPEAT
          w_ultimo_cierre := busca_ultimo_cierre(rBono);
          anula_cierre(rBono, w_ultimo_cierre);
          // JPT 09/01/09 Volvemos a recupera el registro porque ha podido modificarse
          rBono.FIND;
          rBono.CALCFIELDS("Importe coste", "Importe ingreso");
          rBono."N§ Prefactura" := '';
          rBono."N§ Factura"    := '';
          rBono."Coste final"   := rBono."Importe coste";
          rBono."Ingreso Final" := rBono."Importe ingreso";
          rBono.Replicado       := FALSE;
          rBono.Facturado       := FALSE; //+$006
          rBono.MODIFY;
        UNTIL rBono.NEXT = 0;
      END;
      rBono.RESET;
    END;

    PROCEDURE inserta_buzon@13(rRsv@1103355000 : Record 7009743);
    BEGIN
      // inserta_buzon

      rBuz.INIT;
      rBuz.Delegaci¢n                := rRsv.Delegacion;
      rBuz."N§ Reserva"              := rRsv."N§ Reserva";
      rBuz."N§ Interno"              := rRsv."N§ Interno";
      rBuz."N§ Periodo"              := rRsv."N§ Periodo";
      rBuz.Producto                  := rRsv.Producto;
      rBuz."Hotel origen precios"    := rRsv."Hotel origen precios";
      rBuz."Hotel Booking"           := rRsv."Hotel booking";
      rBuz."Hotel Reservado"         := rRsv."Hotel reservado";
      rBuz.TourOperador              := rRsv.TourOperador;
      rBuz."TourOperador Venta"      := rRsv."TourOperador Venta";
      rBuz.Bono                      := rRsv.Bono;
      rBuz.Habitacion                := rRsv.Habitacion;
      rBuz."N§ Habitaciones"         := rRsv."N§ Habitaciones";
      rBuz."Fecha entrada"           := rRsv."Fecha entrada";
      rBuz."Fecha salida"            := rRsv."Fecha salida";
      rBuz.Estancia                  := rRsv.Estancia;
      rBuz.Regimen                   := rRsv.Regimen;
      rBuz."Fecha recepcion reserva" := rRsv."Fecha Recepcion";
      rBuz."Origen reserva"          := rRsv."Origen reserva";
      rBuz.Nombre                    := rRsv.Nombre;
      rBuz."Fecha venta"             := rRsv."Fecha venta";
      rBuz.Edad                      := rRsv.Edad;
      rBuz."Tipo Persona"            := rRsv."Tipo Persona";
      rBuz."Comunicado Hotel"        := rRsv."Comunicado hotel";
      rBuz."N§ envio"                := rRsv."N§ envio hotel";
      rBuz."Hotel venta"             := rRsv."Hotel venta";
      rBuz."Confirmaci¢n Hotel"      := rRsv."Confirmacion hotel";
      rBuz.Responsable               := rRsv.Responsable;
      rBuz."N§ Responsable"          := rRsv."N§ Responsable";
      rBuz."N§ Persona"              := rRsv."N§ persona";
      rBuz."Llegada cerrada"         := rRsv."Llegada cerrada";
      rBuz."Fecha envio"             := rRsv."Fecha envio";
      rBuz."Hora envio"              := rRsv."Hora envio";
      rBuz."Usuario envio"           := rRsv."Usuario envio";
      rBuz."Baja Comunicada"         := FALSE;
      rBuz."Fuera Cupo"              := rRsv."Fuera cupo";
      rBuz."Habitacion TO"           := rRsv."Habitacion TO";
      rBuz."Regimen TO"              := rRsv."Regimen TO";
      rBuz."Num confirmacion hotel"  := rRsv."Num confirmacion hotel";
      //-$023rBuz.LOCKTABLE;
      rBuz.INSERT;
    END;

    PROCEDURE generacion_masiva@14(VAR rCab@1103355000 : Record 7009741);
    VAR
      opcion@1103355001 : Integer;
      rCab2@1103355002 : Record 7009741;
      rCab3@1103355003 : Record 7009741;
    BEGIN
      // generacion_masiva

      opcion := STRMENU(Text023 +
                        Text024 +
                        Text025, 1);
      IF opcion = 0 THEN
        EXIT;


      rCab3 := rCab;
      rCab3.COPYFILTERS(rCab);

      CASE opcion OF
        1: BEGIN
             rCab3.SETRANGE(Delegacion  , rCab.Delegacion);
             rCab3.SETRANGE("N§ Interno", rCab."N§ Interno");
           END;
        2: BEGIN
             rCab.MARKEDONLY(TRUE);
             IF rCab.FINDSET THEN
               REPEAT
                 rCab3.GET(rCab.Delegacion, rCab."N§ Interno");
                 rCab3.MARK := TRUE;
               UNTIL rCab.NEXT = 0;
             rCab3.MARKEDONLY(TRUE);
             rCab.MARKEDONLY(FALSE);
           END;
      END;

      IF rCab3.FINDSET THEN BEGIN
        REPEAT
          rCab2 := rCab3;
          generar_cabecera(rCab2, TRUE);
        UNTIL rCab3.NEXT = 0;
      END;

      rCab3.RESET;
      rCab3.MARKEDONLY(FALSE);
    END;

    PROCEDURE a¤adir_acompa¤ante@17(cab@1103355000 : Record 7009741);
    BEGIN
      // a¤adir_acompa¤ante

      rPer.RESET;
      rPer.SETRANGE(Delegacion  , cab.Delegacion);
      rPer.SETRANGE("N§ Interno", cab."N§ Interno");
      rPer.SETRANGE(Generada    , TRUE);
      IF rPer.FINDSET THEN
      BEGIN
        REPEAT
          rPaqProd.RESET;
          rPaqProd.SETRANGE(Paquete, rPer.Paquete);
          IF rPaqProd.FINDSET THEN
            REPEAT
              CASE rPaqProd."Tipo Producto" OF
                rPaqProd."Tipo Producto"::Hotel:
                  a¤adir_acompa¤ante_hotel;
                rPaqProd."Tipo Producto"::Transfer:
                  a¤adir_acompa¤ante_transfer(rPaqProd.Producto);
               END;
            UNTIL rPaqProd.NEXT = 0;
        UNTIL rPer.NEXT = 0;

        IF (cab.Circuito <> '') AND (cab."Fecha Inicio Circuito" <> 0D) THEN
          a¤adir_acompa¤ante_circuito;
      END;

      rPer.RESET;
      rAco.RESET;
      rAco.SETRANGE(Delegacion  , cab.Delegacion);
      rAco.SETRANGE("N§ Interno", cab."N§ Interno");
      rAco.SETRANGE(Generado    , FALSE);
      IF rAco.FINDSET THEN
      BEGIN
        REPEAT
          rAco.TESTFIELD("Tipo Persona");
          rAco2 := rAco;
          rAco2.Generado := TRUE;
          rAco2.MODIFY;

          rHis.RESET;
          rHis.SETRANGE(Delegacion  , cab.Delegacion);
          rHis.SETRANGE("N§ Interno", cab."N§ Interno");
          rHis.SETRANGE("N§ Reserva", rAco."N§ Acompa¤ante");
          IF rHis.FINDSET THEN
            rHis.DELETEALL;
          rHis.RESET;
        UNTIL rAco.NEXT = 0;
      END;
    END;

    PROCEDURE a¤adir_acompa¤ante_hotel@26();
    BEGIN
      // A¤adir_acompa¤ante_hotel

      rRsvHot.RESET;
      rRsvHot.SETCURRENTKEY(Delegacion,
                            "N§ Interno",
                            "N§ Periodo");
      rRsvHot.SETRANGE(Delegacion  , rPer.Delegacion);
      rRsvHot.SETRANGE("N§ Interno", rPer."N§ Interno");
      rRsvHot.SETRANGE("N§ Periodo", rPer."N§ Periodo");
      rRsvHot.SETRANGE(Responsable , TRUE);
      IF rRsvHot.FINDSET(TRUE) THEN BEGIN
        REPEAT
          rAco.RESET;
          rAco.SETRANGE(Delegacion  , rPer.Delegacion);
          rAco.SETRANGE("N§ Interno", rPer."N§ Interno");
          rAco.SETRANGE(Generado    , FALSE);
          IF rAco.FINDSET THEN BEGIN
            REPEAT
              rAco.TESTFIELD("Tipo Persona");
              rRsvHot2 := rRsvHot;
              rRsvHot2."N§ Reserva"       := num_reserva_hotel;
              rRsvHot2.Nombre             := rAco.Nombre;
              rRsvHot2.Edad               := rAco.Edad;
              rRsvHot2."Tipo Persona"     := rAco."Tipo Persona";
              rRsvHot2."N§ Acompa¤ante"   := rAco."N§ Acompa¤ante";
              rRsvHot2.Habitacion         := '';
              rRsvHot2."N§ Habitaciones"  := 0;
              rRsvHot2."N§ Habitacion"    := rAco."N§ Habitacion";
              rRsvHot2.Responsable        := FALSE;
              rRsvHot2."Exportado Hotel"  := FALSE;
              rRsvHot2."Exportado Fecha"  := 0D;
              rRsvHot2."Fecha Nacimiento" := rAco."Fecha Nacimiento";
              rRsvHot2.INSERT(TRUE);
            UNTIL rAco.NEXT = 0;
          END;

          //+$003
          IF rRsvHot."Llegada cerrada" THEN
            rRsvHot."Pendiente calculo" := TRUE;
          rRsvHot."Comunicado hotel" := FALSE;
          rRsvHot."Exportado Hotel"  := FALSE;
          rRsvHot.MODIFY;
          //+$003
        UNTIL rRsvHot.NEXT = 0;
      END;
    END;

    PROCEDURE a¤adir_acompa¤ante_transfer@31(pwProducto@1000000003 : Code[10]);
    VAR
      lrPer@1000000000 : Record 7009742;
      lrCab@1000000001 : Record 7009741;
      lrConv@1000000004 : Record 7009725;
      lwHotel@1000000005 : Code[20];
    BEGIN
      // a¤adir_acompa¤ante_transfer

      rParPer.FINDFIRST;

      rRsvTra.RESET;
      rRsvTra.SETCURRENTKEY(Delegacion,
                            "N§ Interno",
                            "N§ Periodo");
      rRsvTra.SETRANGE(Delegacion      , rPer.Delegacion);
      rRsvTra.SETRANGE("N§ Interno"    , rPer."N§ Interno");
      rRsvTra.SETRANGE("N§ Periodo"    , rPer."N§ Periodo");
      IF rRsvTra.FINDSET THEN
      BEGIN
        rAco.RESET;
        rAco.SETRANGE(Delegacion  , rPer.Delegacion);
        rAco.SETRANGE("N§ Interno", rPer."N§ Interno");
        rAco.SETRANGE(Generado    , FALSE);
        IF rAco.FINDSET THEN
        BEGIN
          REPEAT
            rAco.TESTFIELD("Tipo Persona");
            rRsvTra2 := rRsvTra;
            rRsvTra2.Nombre            := rAco.Nombre;
            rRsvTra2.Edad              := rAco.Edad;
            rRsvTra2."Tipo Persona"    := rAco."Tipo Persona";
            rRsvTra2."N§ Acompa¤ante"  := rAco."N§ Acompa¤ante";
            rRsvTra2.INSERT(TRUE);

            rRsvTra2."Agrupacion entrada" := 0;
            rRsvTra2."Agrupacion entrada" := 0;
            rRsvTra2."Importe margen"     := 0;
            rRsvTra2."Importe Ingreso"    := 0;

            rRsvTra2.ManagePersonType; //+$012
            rRsvTra2.MODIFY;
          UNTIL rAco.NEXT = 0;
        END;
      END
      ELSE
      BEGIN
        rAco.RESET;
        rAco.SETRANGE(Delegacion  , rPer.Delegacion);
        rAco.SETRANGE("N§ Interno", rPer."N§ Interno");
        rAco.SETRANGE(Generado    , FALSE);
        IF rAco.FINDSET THEN
        BEGIN
          REPEAT
            IF NOT lrCab.GET(rAco.Delegacion, rAco."N§ Interno") THEN
              EXIT;

            lrPer.RESET;
            lrPer.SETRANGE(Delegacion  , rAco.Delegacion);
            lrPer.SETRANGE("N§ Interno", rAco."N§ Interno");
            IF NOT lrPer.FINDFIRST THEN
              EXIT;

            CLEAR(lrConv);
            lrConv.SETRANGE(TourOperador        , lrCab.TourOperador);
            lrConv.SETRANGE("Touroperador venta", lrPer."TourOperador Venta");
            lrConv.SETRANGE("Hotel TO"          , lrPer."Hotel TO");
            IF NOT lrConv.FINDFIRST THEN BEGIN
              lrConv.SETRANGE("Touroperador venta", '');
              IF NOT lrConv.FINDFIRST THEN
                CLEAR(lrConv);
            END;

            rPar.FINDFIRST;

            CLEAR(rRsvTra);
            rRsvTra.Delegacion   := lrCab.Delegacion;
            rRsvTra."N§ Interno" := lrCab."N§ Interno";
            rRsvTra."N§ Periodo" := lrPer."N§ Periodo";
            rRsvTra."N§ Reserva" := num_reserva_transfer();
            rRsvTra.Producto     := pwProducto;

            IF rPar."Touroperador operativo" = rPar."Touroperador operativo"::Compra THEN
              rRsvTra.TourOperador := lrCab.TourOperador
            ELSE
              rRsvTra.TourOperador := lrCab."TourOperador Venta";

            rRsvTra.Bono             := lrCab.Bono;
            rRsvTra.Nombre           := rAco.Nombre;
            rRsvTra.Edad             := rAco.Edad;
            rRsvTra."N§ Acompa¤ante" := 1;
            rRsvTra."Tipo Persona"   := rAco."Tipo Persona";
            rRsvTra."Canal venta"    := lrCab."Canal venta"; // +$017
            rRsvTra."Fecha entrada"  := lrPer."Fecha entrada";

            //. Si la reserva vino en txt hay que tomar el vuelo del periodo, si es WS hay que tomar datos del acompa¤ante
            IF lrCab."Tipo importacion" = lrCab."Tipo importacion"::Texto THEN
            BEGIN
              IF (lrPer."Compa¤ia entrada" <> '') OR (lrPer."Vuelo entrada" <> '') THEN BEGIN
                rRsvTra."Compa¤ia entrada"     := lrPer."Compa¤ia entrada";
                rRsvTra."Vuelo entrada"        := lrPer."Vuelo entrada";
                rRsvTra."Terminal entrada"     := lrPer."Terminal entrada";
                rRsvTra."Hora entrada"         := lrPer."Hora entrada";
                rRsvTra."IATA origen entrada"  := lrPer."IATA origen entrada";
                rRsvTra."IATA destino entrada" := lrPer."IATA destino entrada";
                rRsvTra.VALIDATE(rRsvTra."Servicio transfer entrada" , lrPer."Servicio transfer entrada");
              END;
            END
            ELSE
            BEGIN
              IF (rAco."Compa¤ia entrada" <> '') OR (rAco."Vuelo entrada" <> '') THEN
              BEGIN
                rRsvTra."Compa¤ia entrada"     := rAco."Compa¤ia entrada";
                rRsvTra."Vuelo entrada"        := rAco."Vuelo entrada";
                rRsvTra."Terminal entrada"     := rAco."Terminal entrada";
                rRsvTra."Hora entrada"         := rAco."Hora entrada";
                rRsvTra."IATA origen entrada"  := rAco."IATA origen entrada";
                rRsvTra."IATA destino entrada" := rAco."IATA destino entrada";
                rRsvTra.VALIDATE(rRsvTra."Servicio transfer entrada" , lrPer."Servicio transfer entrada");
              END;
            END;

            rRsvTra."Fecha salida" := lrPer."Fecha salida";

            //. Si la reserva vino en txt hay que tomar el vuelo del periodo, si es WS hay que tomar datos del acompa¤ante
            IF lrCab."Tipo importacion" = lrCab."Tipo importacion"::Texto THEN
            BEGIN
              IF (lrPer."Compa¤ia salida" <> '') OR (lrPer."Vuelo salida" <> '') THEN
              BEGIN
                rRsvTra."Compa¤ia salida"     := lrPer."Compa¤ia salida";
                rRsvTra."Vuelo salida"        := lrPer."Vuelo salida";
                rRsvTra."Terminal salida"     := lrPer."Terminal salida";
                rRsvTra."Hora salida"         := lrPer."Hora salida";
                rRsvTra."IATA origen salida"  := lrPer."IATA origen salida";
                rRsvTra."IATA destino salida" := lrPer."IATA destino salida";
                rRsvTra.VALIDATE(rRsvTra."Servicio transfer salida" , lrPer."Servicio transfer salida");
              END;
            END
            ELSE
            BEGIN
              IF (rAco."Compa¤ia salida" <> '') OR (rAco."Vuelo salida" <> '') THEN BEGIN
                rRsvTra."Compa¤ia salida"     := rAco."Compa¤ia salida";
                rRsvTra."Vuelo salida"        := rAco."Vuelo salida";
                rRsvTra."Terminal salida"     := rAco."Terminal salida";
                rRsvTra."Hora salida"         := rAco."Hora salida";
                rRsvTra."IATA origen salida"  := rAco."IATA origen salida";
                rRsvTra."IATA destino salida" := rAco."IATA destino salida";
                rRsvTra.VALIDATE(rRsvTra."Servicio transfer salida" , lrPer."Servicio transfer salida");
              END;
            END;

            IF rRsvTra.Entrada = 1 THEN BEGIN
              IF rRsvTra.Salida = 1 THEN
                rRsvTra.Direccion := rRsvTra.Direccion::Ambos
              ELSE
                rRsvTra.Direccion := rRsvTra.Direccion::Entrada;
            END
            ELSE BEGIN
              IF rRsvTra.Salida = 1 THEN
                rRsvTra.Direccion := rRsvTra.Direccion::Salida;
            END;

            rRsvTra."N§ Responsable"           := rRsvTra."N§ Reserva";
            rRsvTra."TourOperador facturacion" := lrCab."TourOperador Venta";
            rRsvTra.Circuito                   := lrCab.Circuito;

            //. Si viene de una importacion lo haremos en funcion de la conversion del hotel solo para GO Caribic
            DatosInstalacion.FINDFIRST;
            IF (lrCab."N§ Fichero" <> 0) AND (DatosInstalacion."Empresa Real" = DatosInstalacion."Empresa Real"::GOC) THEN
            BEGIN
              rRsvTra."Transfer Privado Llegada" := lrConv."Transfer Privado";
              rRsvTra."Transfer Privado Salida"  := lrConv."Transfer Privado";
              IF lrConv."Transfer Privado" THEN
              BEGIN
                rRsvTra.VALIDATE("Servicio transfer entrada" , rRsvTra."Servicio transfer entrada"::Privado);
                rRsvTra.VALIDATE("Servicio transfer salida" , rRsvTra."Servicio transfer salida"::Privado);
              END;
            END
            ELSE
            BEGIN
              rRsvTra.VALIDATE("Servicio transfer entrada" , lrPer."Servicio transfer entrada");
              rRsvTra.VALIDATE("Servicio transfer salida"  , lrPer."Servicio transfer salida");

              rRsvTra."Transfer Privado Llegada" := (lrPer."Servicio transfer entrada" IN
                                              [lrPer."Servicio transfer entrada"::Privado, lrPer."Servicio transfer entrada"::Deluxe]);
              rRsvTra."Transfer Privado Salida"  := (lrPer."Servicio transfer salida" IN
                                              [lrPer."Servicio transfer salida"::Privado, lrPer."Servicio transfer salida"::Deluxe]);
            END;

            // Comprobamos si la reserva es de circuito para no generar ingresos
            // Si la conversion tiene la marca de Transfer Free no hay que generar ingresos

            IF (lrCab.Circuito <> '') OR (lrConv."Transfer free") THEN
              rRsvTra."Invitado TourOperador" := TRUE;

            rRsvTra."Fecha creacion" := CURRENTDATETIME;
            rRsvTra.ManagePersonType;

            lwHotel := lrConv."Hotel Transfer";
            IF lwHotel = '' THEN
              lwHotel := lrPer."Hotel Booking";
            rRsvTra.VALIDATE("Hotel entrada", lwHotel);
            rRsvTra.VALIDATE("Hotel salida" , lwHotel);

            rRsvTra."Tipo transfer entrada" := lrPer."Tipo transfer entrada";
            rRsvTra."Tipo transfer salida"  := lrPer."Tipo transfer salida";
            rRsvTra.INSERT;
          UNTIL rAco.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE a¤adir_acompa¤ante_circuito@41();
    VAR
      rRsvCir@1103355000 : Record 7010186;
      rRsvCir2@1103355001 : Record 7010186;
    BEGIN
      // a¤adir_acompa¤ante_circuito

      rParPer.FINDFIRST;

      rRsvCir.RESET;
      rRsvCir.SETCURRENTKEY(Delegacion,
                            "N§ Interno");
      rRsvCir.SETRANGE("N§ Interno"    , rPer."N§ Interno");
      rRsvCir.SETRANGE(Delegacion      , rPer.Delegacion);
      IF rRsvCir.FINDSET THEN
      BEGIN
        rAco.RESET;
        rAco.SETRANGE(Delegacion  , rPer.Delegacion);
        rAco.SETRANGE("N§ Interno", rPer."N§ Interno");
        rAco.SETRANGE(Generado    , FALSE);
        IF rAco.FINDSET THEN
        BEGIN
          REPEAT
            rRsvCir.RESET;
            rRsvCir.SETCURRENTKEY(Delegacion,
                                  "N§ Interno");
            rRsvCir.SETRANGE(Delegacion      , rPer.Delegacion);
            rRsvCir.SETRANGE("N§ Interno"    , rPer."N§ Interno");
            rRsvCir.SETRANGE("N§ Acompa¤ante", rAco."N§ Acompa¤ante");
            IF NOT rRsvCir.FINDFIRST THEN
            BEGIN
              //-$023rRsvCir2.LOCKTABLE;
              CLEAR(rRsvCir2);
              rAco.TESTFIELD("Tipo Persona");
              rRsvCir2 := rRsvCir;

              rRsvCir2.Establecer_Gestion_Cabecera(TRUE);
              rRsvCir2.Nombre := rAco.Nombre;
              rRsvCir2.Edad := rAco.Edad;
              rRsvCir2."Tipo Persona" := rAco."Tipo Persona";
              rRsvCir2."N§ Acompa¤ante" := rAco."N§ Acompa¤ante";
              rRsvCir2.INSERT(TRUE);
              rRsvCir2.Establecer_Gestion_Cabecera(FALSE);
            END;
          UNTIL rAco.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE pendiente_calculo@15(VAR prRsv@1103355000 : Record 7009743;ficha@1103355001 : Boolean);
    VAR
      lrRsv@1100253000 : Record 7009743;
      rRsv2@1103355002 : Record 7009743;
      total@1103355003 : Integer;
    BEGIN
      // pendiente_calculo

      //+$001
      IF ficha THEN BEGIN
        lrRsv := prRsv;
        lrRsv.SETRECFILTER;
      END
      ELSE
        lrRsv.COPY(prRsv);
      //+$001

      total := lrRsv.COUNT;
      IF NOT CONFIRM(STRSUBSTNO(Text027, total)) THEN
        EXIT;

      IF lrRsv.FINDSET THEN
      BEGIN
        REPEAT
          rRsv2 := lrRsv;
          rRsv2.VALIDATE("Pendiente calculo", TRUE);
          rRsv2.MODIFY;
        UNTIL lrRsv.NEXT = 0;
      END;
    END;

    PROCEDURE alternativas_hotel@19(rRsv@1103355000 : Record 7009743);
    VAR
      rCond@1103355001 : Record 7010085;
      rCupoDia@1103355002 : Record 7009757;
      rConC@1103355003 : Record 7009723;
      rHot@1103355004 : Record 7009724;
      rHot2@1103355005 : Record 7009724;
      rZonaFisica@1103355006 : Record 7009713;
      release_aux@1103355007 : Integer;
      ventana@1103355008 : Dialog;
    BEGIN
      // alternativas_hotel

      IF rCond.GET(USERID()) THEN
        rCond.DELETE;

      CLEAR(rCond);
      rCond.Usuario := USERID();
      rCond.Zona := rRsv."Zona hotel";
      IF rHot.GET(rRsv."Hotel booking") THEN
        rCond.Categoria := rHot.Categoria;
      rCond.INSERT;
      COMMIT;

      rCond.FILTERGROUP(2);
      rCond.SETRANGE(Usuario, USERID());
      rCond.FILTERGROUP(0);
      FORM.RUNMODAL(7010111, rCond);
      rCond.FILTERGROUP(2);
      rCond.SETRANGE(Usuario);
      rCond.FILTERGROUP(0);

      rCond.GET(USERID());
      IF NOT rCond.Correcto THEN
        EXIT;

      rCupoDia.SETCURRENTKEY(Dia,
                             Hotel,
                             TourOperador);
      rCupoDia.SETRANGE(Dia, rRsv."Fecha entrada");

      ventana.OPEN(Text028 +
                   Text029 +
                   Text030 +
                   Text031);
      IF rCupoDia.FINDSET THEN
      BEGIN
        REPEAT
          release_aux := rCupoDia.Release;
          IF rRsv."Fecha entrada" > TODAY + release_aux THEN BEGIN
            IF rHot.GET(rCupoDia.Hotel) THEN BEGIN
              IF (rCond.Zona = '') OR (rCond.Zona = rHot."Zona Fisica") THEN BEGIN
                IF (rCond.Categoria = '') OR (rCond.Categoria = rHot.Categoria) THEN BEGIN
                  IF NOT (rCond."Mismo TourOperador") OR (rCupoDia.TourOperador = rRsv.TourOperador) THEN BEGIN
                    IF rConC.GET(rCupoDia.Delegacion, rCupoDia."Contrato compra") THEN BEGIN
                      IF rCond.Garantia THEN BEGIN
                        IF rConC."Tipo de Garantias" <> rConC."Tipo de Garantias"::"Sin Garant¡as" THEN BEGIN
                          IF NOT rHot.NoName THEN BEGIN
                            rHot."N§ Reserva" := rRsv."N§ Reserva";
                            rHot.MODIFY(TRUE);
                          END;
                        END;
                      END
                      ELSE BEGIN
                        IF NOT rHot.NoName THEN BEGIN
                          rHot."N§ Reserva" := rRsv."N§ Reserva";
                          rHot.MODIFY(TRUE);
                        END;
                      END;
                    END;
                  END;
                END;
              END;
            END;
          END
        UNTIL rCupoDia.NEXT = 0;
      END;
      COMMIT;
      ventana.CLOSE;

      rHot.SETCURRENTKEY("N§ Reserva");
      rHot.SETRANGE("N§ Reserva", rRsv."N§ Reserva");
      FORM.RUNMODAL(7009839, rHot);
      IF rHot.FINDSET THEN
      BEGIN
        REPEAT
          rHot2 := rHot;
          rHot2."N§ Reserva" := 0;
          rHot2.MODIFY;
        UNTIL rHot.NEXT = 0;
      END;
      rHot.RESET;
    END;

    PROCEDURE valoracion_alternativa@21(rHot@1103355000 : Record 7009724);
    VAR
      rRsv@1103355001 : Record 7009743;
      rConC@1103355002 : Record 7009723;
      save_hotel_booking@1103355003 : Code[20];
      save_hotel_precios@1103355004 : Code[20];
      save_hotel_venta@1103355005 : Code[20];
      save_contrato_compra@1103355006 : Code[10];
      save_tipo_contrato@1103355007 : Integer;
      save_contrato_venta@1103355008 : Code[10];
      contrato_compra@1103355009 : Code[10];
      contrato_venta@1103355010 : Code[10];
      cCalculo@1103355011 : Codeunit 7009707;
    BEGIN
      // valoracion_alternativa
      //
      IF rRsv.GET(COPYSTR(rHot.Hotel, 1, 3), rHot."N§ Reserva") THEN BEGIN
        save_hotel_booking := rRsv."Hotel booking";
        save_hotel_precios := rRsv."Hotel origen precios";
        save_hotel_venta := rRsv."Hotel venta";
        save_contrato_compra := rRsv."Contrato compra";
        save_tipo_contrato := rRsv."Tipo contrato";
        save_contrato_venta := rRsv."Contrato venta";
        rRsv."Hotel booking" := rHot.Hotel;
        rRsv."Hotel origen precios" := rHot.Hotel;
        rRsv."Hotel venta" := rHot.Hotel;
        rRsv.buscar_contrato;
        rRsv.MODIFY;

        {** Llamar al calculo **}
        cCalculo.calculo_reserva(rRsv, TRUE);
        IF rRsv.GET(rRsv.Delegacion, rRsv."N§ Reserva") THEN BEGIN
          rRsv."Hotel booking" := save_hotel_booking;
          rRsv."Hotel origen precios" := save_hotel_precios;
          rRsv."Hotel venta" := save_hotel_venta;
          rRsv."Contrato compra" := save_contrato_compra;
          rRsv."Tipo contrato" := save_tipo_contrato;
          rRsv."Contrato venta" := save_contrato_venta;
          rRsv.buscar_contrato;
          rRsv.MODIFY;
        END;
      END;
    END;

    PROCEDURE reserva_modificada@22(rReserva@1103355000 : Record 7009743;Valor@1103355001 : Boolean);
    BEGIN
      // reserva_modificada

      rRsvHot.RESET;
      rRsvHot.SETCURRENTKEY(Delegacion,
                            "N§ Responsable");
      rRsvHot.SETRANGE(Delegacion      , rReserva.Delegacion);
      rRsvHot.SETRANGE("N§ Responsable", rReserva."N§ Responsable");
      rRsvHot.MODIFYALL("Exportado Hotel", Valor);
      rRsvHot.RESET;
    END;

    PROCEDURE actualizar_bajas_reserva@23(rReserva@1103355000 : Record 7009743);
    VAR
      rBajas@1103355001 : Record 7009770;
    BEGIN
      // actualizar_bajas_reserva
      //
      rBajas.RESET;
      rBajas.SETRANGE(Delegacion      , rReserva.Delegacion);
      rBajas.SETRANGE("N§ Responsable", rReserva."N§ Responsable");
      IF rBajas.FINDSET(TRUE) THEN
        rBajas.DELETEALL;
      rBajas.RESET;

      rRsvHot.RESET;
      rRsvHot.SETRANGE(Delegacion  , rReserva.Delegacion);
      rRsvHot.SETRANGE("N§ Reserva", rReserva."N§ Responsable");
      IF rRsvHot.FINDSET THEN
      BEGIN
        WITH rBajas DO BEGIN
          INIT;
          rRsvHot.CALCFIELDS(Paxes);
          Delegacion       := rRsvHot.Delegacion;
          "Hotel booking"  := rRsvHot."Hotel booking";
          "N§ Responsable" := rRsvHot."N§ Responsable";
          TourOperador     := rRsvHot."TourOperador Venta";
          Bono             := rRsvHot.Bono;
          Nombre           := rRsvHot.Nombre;
          Paxes            := rRsvHot.Paxes;
          "Fecha Entrada"  := rRsvHot."Fecha entrada";
          "Fecha Salida"   := rRsvHot."Fecha salida";
          "Fecha Exportado":= rRsvHot."Exportado Fecha";
          "Numero Fichero" := rRsvHot."N§ exportacion hotel";
          IF FIND THEN
            MODIFY
          ELSE
            INSERT;
        END;
      END;
    END;

    PROCEDURE asignacion_masiva_entrada@28(VAR rRsvTra@1103355000 : Record 7009744);
    VAR
      opcion@1103355001 : Integer;
      rPlan@1103355002 : Record 7009754;
    BEGIN
      // asignacion_masiva_entrada

      IF rRsvTra."Traslado en destino" THEN
        EXIT;

      opcion := STRMENU(Text032, 1);
      IF opcion = 0 THEN
        EXIT;
      CASE opcion OF
        1:
        BEGIN
          cFun.cambia_vuelo_entrada(rRsvTra."Fecha entrada",
                                    FALSE,
                                    rRsvTra.Delegacion,
                                    rRsvTra."N§ Interno",
                                    rRsvTra."N§ Periodo",
                                    rRsvTra."N§ Acompa¤ante");
          EXIT;
        END;
        3:
        BEGIN
          rRsvTra.SETCURRENTKEY("Marca cambios");
          rRsvTra.SETRANGE("Marca cambios", USERID());
        END;
      END;

      IF NOT cFun.mismas_fechas(rRsvTra, rPlan."Entrada/Salida"::Entrada) THEN
        ERROR(Text033);

      rPlan.RESET;
      rPlan.FILTERGROUP(2);
      rPlan.SETRANGE(Fecha           , rRsvTra."Fecha entrada");
      rPlan.SETRANGE("Entrada/Salida", rPlan."Entrada/Salida"::Entrada);
      rPlan.FILTERGROUP(0);

      IF FORM.RUNMODAL(7009799, rPlan) = ACTION::LookupOK THEN BEGIN
        IF rRsvTra.FINDSET THEN BEGIN
          ventana.OPEN(Text034+
                       '\'+
                       Text035+
                       Text036+
                       Text037);
          REPEAT
            ventana.UPDATE(1, rRsvTra."N§ Reserva");
            ventana.UPDATE(2, rRsvTra.Nombre);
            ventana.UPDATE(3, rRsvTra.Bono);

            cFun.cambia_datos_entrada(rPlan,
                                      FALSE,
                                      rRsvTra.Delegacion,
                                      rRsvTra."N§ Interno",
                                      rRsvTra."N§ Periodo",
                                      rRsvTra."N§ Acompa¤ante");
            IF rRsvTra2.GET(rRsvTra.Delegacion, rRsvTra."N§ Reserva") THEN BEGIN
              rRsvTra2."Marca cambios" := '';
              rRsvTra2.MODIFY;
            END;
          UNTIL rRsvTra.NEXT = 0;
          ventana.CLOSE;
        END;
      END;
    END;

    PROCEDURE asignacion_masiva_salida@29(VAR rRsvTra@1103355000 : Record 7009744);
    VAR
      opcion@1103355001 : Integer;
      rPlan@1103355002 : Record 7009754;
    BEGIN
      // asignacion_masiva_salida

      IF rRsvTra."Traslado en destino" THEN
        EXIT;

      opcion := STRMENU(Text032, 1);
      IF opcion = 0 THEN
        EXIT;

      CASE opcion OF
        1:
        BEGIN
          cFun.cambia_vuelo_salida(rRsvTra."Fecha salida",
                                   FALSE,
                                   rRsvTra.Delegacion,
                                   rRsvTra."N§ Interno",
                                   rRsvTra."N§ Periodo",
                                   rRsvTra."N§ Acompa¤ante");
          EXIT;
        END;
        3:
        BEGIN
          rRsvTra.SETCURRENTKEY("Marca cambios");
          rRsvTra.SETRANGE("Marca cambios", USERID());
        END;
      END;

      IF NOT cFun.mismas_fechas(rRsvTra, rPlan."Entrada/Salida"::Salida) THEN
        ERROR(Text033);

      rPlan.RESET;
      rPlan.FILTERGROUP(2);
      rPlan.SETRANGE(Fecha           , rRsvTra."Fecha salida");
      rPlan.SETRANGE("Entrada/Salida", rPlan."Entrada/Salida"::Salida);
      rPlan.FILTERGROUP(0);

      IF FORM.RUNMODAL(7009799, rPlan) = ACTION::LookupOK THEN BEGIN
        IF rRsvTra.FINDSET(TRUE) THEN BEGIN
          ventana.OPEN(Text034+
                       '\'+
                       Text035+
                       Text036+
                       Text037);
          REPEAT
            ventana.UPDATE(1, rRsvTra."N§ Reserva");
            ventana.UPDATE(2, rRsvTra.Nombre);
            ventana.UPDATE(3, rRsvTra.Bono);
            cFun.cambia_datos_salida(rPlan,
                                     FALSE,
                                     rRsvTra.Delegacion,
                                     rRsvTra."N§ Interno",
                                     rRsvTra."N§ Periodo",
                                     rRsvTra."N§ Acompa¤ante");
            IF rRsvTra2.GET(rRsvTra.Delegacion, rRsvTra."N§ Reserva") THEN BEGIN
              rRsvTra2."Marca cambios" := '';
              rRsvTra2.MODIFY;
            END;
          UNTIL rRsvTra.NEXT = 0;
          ventana.CLOSE;
        END;
      END;
    END;

    PROCEDURE marcar_fuera_cupo@25(VAR rRsv@1103355000 : Record 7009743;pwLlamadaDesdeFicha@1100253000 : Boolean);
    VAR
      lrRsv2@1103355001 : Record 7009743;
    BEGIN
      // marcar_fuera_cupo

      lrRsv2.RESET;
      IF pwLlamadaDesdeFicha THEN BEGIN
        lrRsv2 := rRsv;
        lrRsv2.SETRECFILTER;
      END
      ELSE
        lrRsv2.COPYFILTERS(rRsv);

      IF NOT CONFIRM(Text038) THEN
        EXIT;

      IF lrRsv2.FINDSET THEN BEGIN
        REPEAT
          lrRsv2.VALIDATE("Fuera cupo", TRUE);
          lrRsv2.MODIFY;
        UNTIL lrRsv2.NEXT = 0;
      END;
    END;

    PROCEDURE calculo_alternativo@27(rec@1103355000 : Record 7009743);
    VAR
      rCond@1103355001 : Record 7010085;
      rReserva@1103355002 : Record 7009743;
      HotelFact@1103355003 : Code[20];
      HotelOrig@1103355004 : Code[20];
      HotelVent@1103355005 : Code[20];
      HotelRes@1103355006 : Code[20];
      regimen@1103355007 : Code[10];
      habitacion@1103355008 : Code[10];
      cCal@1103355009 : Codeunit 7009707;
      rCIaux@1103355010 : Record 7009772;
      rCIcnpAux@1103355011 : Record 7009773;
    BEGIN
      // calculo_alternativo

      rec.LOCKTABLE;
      IF rCond.GET(USERID()) THEN
        rCond.DELETE;
      CLEAR(rCond);
      rCond.Usuario  := USERID();
      rCond.INSERT;

      CLEAR(rReserva);
      rReserva := rec;
      rReserva.SETCURRENTKEY(Delegacion,
                             "N§ Responsable");
      rReserva.SETRANGE(Delegacion      , rReserva.Delegacion);
      rReserva.SETRANGE("N§ Responsable", rReserva."N§ Responsable");
      rCond.Hotel      := rReserva."Hotel origen precios";
      rCond.Habitacion := rReserva.Habitacion;
      rCond.Regimen    := rReserva.Regimen;
      rCond.Correcto   := FALSE;
      rCond.MODIFY;
      rCond.FILTERGROUP(2);
      rCond.SETRANGE(Usuario, rCond.Usuario);
      rCond.FILTERGROUP(0);
      COMMIT;

      HotelFact        := rReserva."Hotel Factura";
      HotelOrig        := rReserva."Hotel origen precios";
      HotelVent        := rReserva."Hotel venta";
      HotelRes         := rReserva."Hotel reservado";
      habitacion       := rReserva.Habitacion;
      regimen          := rReserva.Regimen;

      // mostrar formulario de condiciones
      //
      FORM.RUNMODAL(7010118, rCond);
      IF NOT rCond.GET(USERID()) THEN
        ERROR(Text039);
      IF NOT rCond.Correcto THEN
        EXIT;
      // Borrado de los ficheros temporales del calculo
      //
      rCIaux.RESET;
      rCIaux.SETRANGE(Usuario, USERID());
      IF rCIaux.FINDSET(TRUE) THEN
        rCIaux.DELETEALL;
      rCIaux.RESET;

      rCIcnpAux.RESET;
      rCIcnpAux.SETRANGE(Usuario, USERID());
      IF rCIcnpAux.FINDSET(TRUE) THEN
        rCIcnpAux.DELETEALL;
      rCIcnpAux.RESET;

      ventana.OPEN(Text040);
      cCal.calculo_reserva(rReserva, FALSE);
      cCal.Pasar_Auxiliar(rReserva);

      rReserva.FINDFIRST;
      rReserva."Hotel Factura" := rCond.Hotel;
      rReserva."Hotel origen precios" := rCond.Hotel;
      rReserva."Hotel venta" := rCond.Hotel;
      rReserva."Hotel reservado" := rCond.Hotel;
      rReserva.Habitacion := rCond.Habitacion;
      rReserva.MODIFY;
      rReserva.MODIFYALL(Regimen, rCond.Regimen);
      COMMIT;

      ventana.CLOSE;

      ventana.OPEN(Text041);
      cCal.calculo_reserva(rReserva, FALSE);
      cCal.Pasar_Auxiliar(rReserva);

      rReserva.FINDFIRST;
      rReserva."Hotel Factura" := HotelFact;
      rReserva."Hotel origen precios" := HotelOrig;
      rReserva."Hotel venta" := HotelVent;
      rReserva."Hotel reservado" := HotelRes;
      rReserva.Habitacion := habitacion;
      rReserva.MODIFY;
      rReserva.MODIFYALL(Regimen, regimen);
      rReserva.RESET;
      ventana.CLOSE;

      rCIaux.SETRANGE(Usuario, USERID);
      COMMIT;
      FORM.RUNMODAL(FORM::"Tabla Resultado Calc. Altern.", rCIaux);

      CLEAR(rCond);
      CLEAR(rCIaux);
    END;

    PROCEDURE numero_reserva@30() : Integer;
    VAR
      rPar@1103355000 : Record 7009700;
    BEGIN
      // numero_reserva

      rPar.LOCKTABLE;
      rPar.FINDFIRST;

      IF NOT rPar."Empresa Delegacion" THEN
        ERROR(Text042);
      rPar."Contador Reservas" := rPar."Contador Reservas" + 1;
      rPar.MODIFY;
      EXIT(rPar."Contador Reservas");
    END;

    PROCEDURE hotel_con_contrato@32(par_reserva@1103355000 : Record 7009743);
    VAR
      fHot@1103355001 : Form 7009731;
      rHot@1103355002 : Record 7009724;
      rConC@1103355003 : Record 7009723;
      rConv@1103355004 : Record 7009731;
      rConC2@1103355005 : Record 7009723;
      rCupo@1103355006 : Record 7009739;
      rPre@1103355007 : Record 7009738;
      rTO@1103355008 : Record 7009717;
      w_fecha@1103355009 : Date;
      w_error@1103355010 : Boolean;
      aux_touroperador@1103355011 : Code[10];
    BEGIN
      // hotel_con_contrato

      rHot.RESET;
      rConC2.RESET;
      rConC2.SETCURRENTKEY(Delegacion,
                          TourOperador,
                          Hotel,
                          "Fecha inicio contrato",
                          "Fecha final contrato");
      rConC.RESET;
      rConC.SETCURRENTKEY(Delegacion,
                          TourOperador,
                          Hotel,
                          "Fecha inicio contrato",
                          "Fecha final contrato");
      rConC.SETRANGE (Delegacion             , par_reserva.Delegacion);
      rConC.SETRANGE (TourOperador           , par_reserva.TourOperador);
      rConC.SETFILTER("Fecha inicio contrato", '<=%1', par_reserva."Fecha entrada");
      rConC.SETFILTER("Fecha final contrato" , '>=%1', par_reserva."Fecha entrada");
      rConC.SETRANGE(Confirmado              , TRUE);
      IF rConC.FINDSET THEN
      BEGIN
        ventana.OPEN(Text043);
        REPEAT
          w_error := FALSE;
          rConC2.COPYFILTERS(rConC);
          rConC2.SETRANGE(Hotel, rConC.Hotel);
          FOR w_fecha := par_reserva."Fecha entrada" + 1 TO par_reserva."Fecha salida" DO
          BEGIN
            rConC2.SETFILTER("Fecha inicio contrato", '<=%1', w_fecha);
            rConC2.SETFILTER("Fecha final contrato" , '>=%1', w_fecha);
            IF NOT rConC2.FINDFIRST THEN
              w_error := TRUE
            ELSE
            BEGIN
              rConv.RESET;
              rConv.SETRANGE(Delegacion       , rConC2.Delegacion);
              rConv.SETRANGE("N§ Contrato"    , rConC2."N§ Contrato compra");
              rConv.SETRANGE("Tipo contrato"  , rConv."Tipo contrato"::Compra);
              rConv.SETRANGE("Habitacion cupo", par_reserva.Habitacion);
              IF NOT rConv.FINDFIRST THEN
                w_error := TRUE
              ELSE
              BEGIN
                rCupo.RESET;
                rCupo.SETRANGE(Delegacion          , rConC2.Delegacion);
                rCupo.SETRANGE("N§ Contrato compra", rConC2."N§ Contrato compra");
                rCupo.SETRANGE("Habitacion cupo"   , par_reserva.Habitacion);
                rCupo.SETFILTER("Fecha desde"      , '<=%1', w_fecha);
                rCupo.SETFILTER("Fecha hasta"      , '>=%1', w_fecha);
                IF NOT rCupo.FINDFIRST THEN
                  w_error := TRUE
                ELSE
                BEGIN
                  rPre.RESET;
                  rPre.SETRANGE(Delegacion     , rConC2.Delegacion);
                  rPre.SETRANGE("N§ Contrato"  , rConC2."N§ Contrato compra");
                  rPre.SETRANGE("Codigo Precio", rPre."Codigo Precio"::Habitacion);
                  rPre.SETRANGE(Codigo         , par_reserva.Habitacion);
                  rPre.SETFILTER("Fecha desde" , '<=%1', w_fecha);
                  rPre.SETFILTER("Fecha hasta" , '>=%1', w_fecha);
                  IF NOT rPre.FINDFIRST THEN
                    w_error := TRUE;
                  rPre.RESET;
                END;
                rCupo.RESET;
              END;
              rConv.RESET;
            END;
          END;
          IF NOT w_error THEN BEGIN
            IF rHot.GET(rConC.Hotel) THEN
              rHot.MARK(TRUE);
          END;
        UNTIL rConC.NEXT = 0;
        ventana.CLOSE;
      END;
      rHot.MARKEDONLY(TRUE);
      fHot.SETTABLEVIEW(rHot);
      fHot.LOOKUPMODE(TRUE);
      fHot.RUNMODAL;
      CLEAR(fHot);
      rHot.RESET;
    END;

    PROCEDURE cambios_acompa¤antes@33(rCab@1103355000 : Record 7009741;rAcom@1103355001 : Record 7009748;rPer@1103355002 : Record 7009742;cambio@1103355003 : 'Fecha entrada,Fecha salida,regimen,Borra entrada,Borra salida,Vuelo entrada,Vuelo salida,Fecha venta');
    VAR
      w_fecha@1103355004 : Date;
      w_regimen@1103355005 : Code[10];
      w_texto_confirma@1103355006 : Text[120];
      rReg@1103355007 : Record 7009712;
      rPlan@1103355008 : Record 7009754;
    BEGIN
      // cambios_acompa¤antes

      CASE cambio OF
        cambio::"Fecha entrada":
        BEGIN
          ventana.OPEN(Text044+
                       '\'+
                       Text045+
                       Text046+
                       Text047+
                       Text048+
                       '\'+
                       Text049);
          ventana.UPDATE(1, rCab.Bono);
          ventana.UPDATE(2, rAcom.Nombre);
          ventana.UPDATE(3, rAcom."Fecha entrada");
          ventana.UPDATE(4, rAcom."Fecha salida");
          ventana.INPUT(5, w_fecha);
          ventana.CLOSE;
          IF w_fecha = 0D THEN
            EXIT;
          rAcom.VALIDATE("Fecha entrada", w_fecha);
          IF (rAcom."Compa¤ia entrada" <> '') AND (rAcom."Vuelo entrada" <> '') THEN BEGIN
            IF CONFIRM(Text050) THEN BEGIN
              rAcom.Pasar_Periodo(rPer."N§ Periodo");
              rAcom.VALIDATE("Compa¤ia entrada"    , '');
              rAcom.VALIDATE("Vuelo entrada"       , '');
              rAcom.VALIDATE("Terminal entrada"    , '');
              rAcom.VALIDATE("Hora entrada"        , 0T);
              rAcom.VALIDATE("IATA origen entrada" , '');
              rAcom.VALIDATE("IATA destino entrada", '');
            END;
          END;
          rAcom.MODIFY(TRUE);
        END;
        cambio::"Fecha salida":
        BEGIN
          ventana.OPEN(Text051+
                       '\'+
                       Text045+
                       Text046+
                       Text047+
                       Text048+
                       '\'+
                       Text049);
          ventana.UPDATE(1, rCab.Bono);
          ventana.UPDATE(2, rAcom.Nombre);
          ventana.UPDATE(3, rAcom."Fecha entrada");
          ventana.UPDATE(4, rAcom."Fecha salida");
          ventana.INPUT(5, w_fecha);
          ventana.CLOSE;
          IF w_fecha = 0D THEN
            EXIT;
          rAcom.VALIDATE("Fecha salida", w_fecha);
          IF (rAcom."Compa¤ia salida" <> '') AND (rAcom."Vuelo salida" <> '') THEN BEGIN
            IF CONFIRM(Text052) THEN BEGIN
              rAcom.Pasar_Periodo(rPer."N§ Periodo");
              rAcom.VALIDATE("Compa¤ia salida"    , '');
              rAcom.VALIDATE("Vuelo salida"       , '');
              rAcom.VALIDATE("Terminal salida"    , '');
              rAcom.VALIDATE("Hora salida"        , 0T);
              rAcom.VALIDATE("IATA origen salida" , '');
              rAcom.VALIDATE("IATA destino salida", '');
            END;
          END;
          rAcom.MODIFY(TRUE);
        END;
        cambio::regimen:
        BEGIN
          ventana.OPEN(Text053+
                       '\'+
                       Text045+
                       Text046+
                       Text047+
                       Text048+
                       Text054+
                       '\'+
                       Text055);
          ventana.UPDATE(1, rCab.Bono);
          ventana.UPDATE(2, rAcom.Nombre);
          ventana.UPDATE(3, rAcom."Fecha entrada");
          ventana.UPDATE(4, rAcom."Fecha salida");
          ventana.UPDATE(5, rAcom.Regimen);
          ventana.INPUT(6, w_regimen);
          ventana.CLOSE;
          IF w_regimen = '' THEN
            EXIT;
          IF NOT rReg.GET(w_regimen) THEN
            ERROR(Text056, w_regimen);
          rAcom.VALIDATE(Regimen, w_regimen);
          rAcom.MODIFY(TRUE);
        END;
        // Borrando plan de vuelo de entrada
        //
        cambio::"Borra entrada":
        BEGIN
          w_texto_confirma := Text057 + ' ' + rAcom.Nombre;
          IF NOT CONFIRM(w_texto_confirma) THEN
            EXIT;
          rAcom.Pasar_Periodo(rPer."N§ Periodo");
          rAcom.VALIDATE("Compa¤ia entrada", '');
          rAcom.VALIDATE("Vuelo entrada", '');
          rAcom.VALIDATE("Terminal entrada", '');
          rAcom.VALIDATE("Hora entrada", 0T);
          rAcom.VALIDATE("IATA origen entrada", '');
          rAcom.VALIDATE("IATA destino entrada", '');
          rAcom.MODIFY(TRUE);
        END;
        // borrando plan de vuelo de salida
        //
        cambio::"Borra salida":
        BEGIN
          w_texto_confirma := Text058 + ' ' + rAcom.Nombre;
          IF NOT CONFIRM(w_texto_confirma) THEN
            EXIT;
          rAcom.Pasar_Periodo(rPer."N§ Periodo");
          rAcom.VALIDATE("Compa¤ia salida", '');
          rAcom.VALIDATE("Vuelo salida", '');
          rAcom.VALIDATE("Terminal salida", '');
          rAcom.VALIDATE("Hora salida", 0T);
          rAcom.VALIDATE("IATA origen salida", '');
          rAcom.VALIDATE("IATA destino salida", '');
          rAcom.MODIFY(TRUE);
        END;
        // Asignado plan de vuelo de entrada
        //
        cambio::"Vuelo entrada":
        BEGIN
          cFun.cambia_vuelo_entrada(rAcom."Fecha entrada",
                                    FALSE,
                                    rAcom.Delegacion,
                                    rAcom."N§ Interno",
                                    rPer."N§ Periodo",
                                    rAcom."N§ Acompa¤ante")
        END;
        // Asignando plan de Vuelo de Salida
        //
        cambio::"Vuelo salida":
        BEGIN
          cFun.cambia_vuelo_salida(rAcom."Fecha salida",
                                    FALSE,
                                    rAcom.Delegacion,
                                    rAcom."N§ Interno",
                                    rPer."N§ Periodo",
                                    rAcom."N§ Acompa¤ante")
        END;
        // Cambiando Fecha de Venta
        //
        cambio::"Fecha venta":
        BEGIN
          ventana.OPEN(Text059+
                       '\'+
                       Text045+
                       Text046+
                       Text047+
                       Text048+
                       Text060+
                       '\'+
                       Text061);
          ventana.UPDATE(1, rCab.Bono);
          ventana.UPDATE(2, rAcom.Nombre);
          ventana.UPDATE(3, rAcom."Fecha entrada");
          ventana.UPDATE(4, rAcom."Fecha salida");
          ventana.UPDATE(5, rAcom."Fecha venta");
          ventana.INPUT(6, w_fecha);
          ventana.CLOSE;
          IF w_fecha = 0D THEN
            EXIT;
          rAcom.VALIDATE("Fecha venta", w_fecha);
          rAcom.MODIFY(TRUE);
        END;
      END;
    END;

    PROCEDURE reserva_excursion@34(cab@1103355000 : Record 7009741;per@1103355001 : Record 7009742;producto@1103355002 : Code[10]);
    VAR
      rRsvExc@1103355003 : Record 7010162;
      lwAdultos@1100217000 : Integer;
      lwNi¤os@1100217001 : Integer;
      lwBebes@1100217002 : Integer;
    BEGIN
      // reserva_excursion

      rRsvExc.INIT;
      rRsvExc.Delegacion       := cab.Delegacion;
      rRsvExc."N§ Interno"     := cab."N§ Interno";
      rRsvExc."N§ Periodo"     := per."N§ Periodo";
      rRsvExc."N§ Reserva"     := num_reserva_excursion();
      rRsvExc."Booking Touroperador"        := cab.Bono;
      rRsvExc."N§ Responsable" := rRsvExc."N§ Reserva";
      rRsvExc.INSERT(TRUE);

      rRsvExc.VALIDATE(TourOperador, cab."TourOperador Venta");
      rRsvExc.Producto := producto;
      rRsvExc.SetOficina(rRsvExc.FIELDNO(Producto)); //$005
      rRsvExc."Nombre Cliente" := cab.Nombre;
      rRsvExc.VALIDATE("Hotel Cliente", per."Hotel reservado");

      rRsvExc."Canal venta" := cab."Canal venta"; // +$017

      // Acompa¤antes excursion
      rAco.RESET;
      rAco.SETRANGE (Delegacion      , cab.Delegacion);
      rAco.SETRANGE ("N§ Interno"    , cab."N§ Interno");
      IF rAco.FINDSET THEN BEGIN
        lwAdultos := 0;
        lwNi¤os   := 0;
        lwBebes   := 0;
        REPEAT
          rAco.TESTFIELD("Tipo Persona");

          CASE rAco."Tipo Persona" OF
            rParPer."Codigo Adulto": lwAdultos += 1;
            rParPer."Codigo Ni¤o": lwNi¤os += 1;
            rParPer."Codigo Infant": lwBebes += 1;
          END;
        UNTIL rAco.NEXT = 0;
      END;

      rRsvExc.VALIDATE(Adultos, lwAdultos);
      rRsvExc.VALIDATE(Ni¤os  , lwNi¤os);
      rRsvExc.VALIDATE(Bebes  , lwBebes);
      rRsvExc.MODIFY;
    END;

    PROCEDURE num_reserva_excursion@35() : Integer;
    BEGIN
      // num_reserva_excursion

      rPar.LOCKTABLE;
      IF rPar.FINDFIRST THEN BEGIN
        rPar."Contador Reservas excursion" := rPar."Contador Reservas excursion" + 1;
        rPar.MODIFY;
        EXIT(rPar."Contador Reservas excursion");
      END;
    END;

    PROCEDURE busca_ultimo_cierre@37(par_bono@1103355000 : Record 7010013) : Integer;
    VAR
      rCI@1103355001 : Record 7010018;
    BEGIN
      // busca_ultimo_cierre
      //
      rCI.RESET;
      rCI.SETRANGE(Delegacion    , par_bono.Delegacion);
      rCI.SETRANGE(TourOperador  , par_bono.TourOperador);
      rCI.SETRANGE(Bono          , par_bono.Bono);
      rCI.SETRANGE("N§ Reserva"  , par_bono."N§ Reserva");
      rCI.SETRANGE("N§ Secuencia", par_bono."N§ Secuencia");
      IF rCI.FINDLAST THEN
        EXIT(rCI."N§ cierre delegacion")
      ELSE
        EXIT(0);
      rCI.RESET;
    END;

    PROCEDURE anula_cierre@39(par_bono@1103355000 : Record 7010013;par_cierre@1103355001 : Integer);
    VAR
      rCI@1103355002 : Record 7010018;
      rCI2@1103355003 : Record 7010018;
      rCnp@1103355004 : Record 7010019;
      rCnp2@1103355005 : Record 7010019;
      rCnp3@1103355006 : Record 7010019;
      rDia@1103355007 : Record 7010020;
      rDia2@1103355008 : Record 7010020;
    BEGIN
      // anula_cierre

      rCI.RESET;
      rCI.SETRANGE(Delegacion            , par_bono.Delegacion);
      rCI.SETRANGE(TourOperador          , par_bono.TourOperador);
      rCI.SETRANGE(Bono                  , par_bono.Bono);
      rCI.SETRANGE("N§ Reserva"          , par_bono."N§ Reserva");
      rCI.SETRANGE("N§ Secuencia"        , par_bono."N§ Secuencia");
      rCI.SETRANGE("N§ cierre delegacion", par_cierre);
      IF rCI.FINDSET THEN
      BEGIN
        REPEAT
          IF NOT rCI.Regularizacion THEN
          BEGIN
            CLEAR(rCI2);
            rCI2.TRANSFERFIELDS(rCI);
            rCI2."N§ Orden"             := rCI."N§ Orden" + 1;
            rCI2.Coste                  := (-1) * rCI2.Coste;
            rCI2.Ingreso                := (-1) * rCI2.Ingreso;
            rCI2."Enviar delegacion"    := TRUE;
            rCI2.Facturado              := FALSE;
            rCI2.Regularizacion         := TRUE;
            rCI2."N§ envio delegacion"  := 0;
            rCI2.Replicado              := FALSE;
            rCI2."N§ cierre delegacion" := 9999999;
            rCI2."N§ cierre central"    := 0;
            rCI2.INSERT(TRUE);

            // Conceptos
            rCnp.RESET;
            rCnp.SETRANGE(Delegacion    , par_bono.Delegacion);
            rCnp.SETRANGE(TourOperador  , par_bono.TourOperador);
            rCnp.SETRANGE(Bono          , par_bono.Bono);
            rCnp.SETRANGE("N§ Reserva"  , par_bono."N§ Reserva");
            rCnp.SETRANGE("N§ Secuencia", par_bono."N§ Secuencia");
            rCnp.SETRANGE("N§ Orden"    , rCI."N§ Orden");
            IF rCnp.FINDSET THEN
            BEGIN
              REPEAT
                CLEAR(rCnp2);
                rCnp2.TRANSFERFIELDS(rCnp);
                rCnp2."N§ Orden" := rCI."N§ Orden" + 1;
                rCnp2.Importe := (-1) * rCnp2.Importe;
                rCnp2."N§ Prefactura" := '';
                rCnp2."N§ Factura" := '';
                rCnp2.INSERT(TRUE);

                IF (rCnp."N§ Prefactura" <> '') AND (rCnp."N§ Factura" = '') THEN
                BEGIN
                  rCnp3 := rCnp;
                  rCnp3."N§ Prefactura" := '';
                  rCnp3.MODIFY;
                END;
              UNTIL rCnp.NEXT = 0;
            END;
            rCnp.RESET;

            // Dias
            rDia.RESET;
            rDia.SETRANGE(Delegacion    , par_bono.Delegacion);
            rDia.SETRANGE(TourOperador  , par_bono.TourOperador);
            rDia.SETRANGE(Bono          , par_bono.Bono);
            rDia.SETRANGE("N§ Reserva"  , par_bono."N§ Reserva");
            rDia.SETRANGE("N§ Secuencia", par_bono."N§ Secuencia");
            rDia.SETRANGE("N§ Orden"    , rCI."N§ Orden");
            IF rDia.FINDSET THEN
            BEGIN
              REPEAT
                CLEAR(rDia2);
                rDia2.TRANSFERFIELDS(rDia);
                rDia2."N§ Orden" := rCI."N§ Orden" + 1;
                rDia2.Importe := (-1) * rDia2.Importe;
                rDia2.INSERT(TRUE);
              UNTIL rDia.NEXT = 0;
            END;
            rDia.RESET;
          END;
        UNTIL rCI.NEXT = 0;
      END;
      rCI.RESET;
    END;

    PROCEDURE reserva_circuito@36(VAR rCab@1103355000 : Record 7009741);
    VAR
      rPeriodo@1103355001 : Record 7009742;
      rResCir@1103355002 : Record 7010186;
      rResCir2@1103355003 : Record 7010186;
      rCir@1103355004 : Record 7010187;
      rPaxTOCir@1103355005 : Record 7010188;
      rHotCir@1103355006 : Record 7010189;
      rAco3@1103355007 : Record 7009748;
      UltimaFecha@1103355008 : Date;
      nLinea@1103355009 : Integer;
    BEGIN
      // reserva_circuito

      rPaxTOCir.RESET;
      rPaxTOCir.SETCURRENTKEY("N§ Interno");
      rPaxTOCir.SETRANGE("N§ Interno", rCab."N§ Interno");
      rPaxTOCir.SETRANGE(Delegacion  , rCab.Delegacion);
      IF rPaxTOCir.FINDFIRST THEN
      BEGIN
        IF (rPaxTOCir.Circuito = rCab.Circuito) AND
           (rPaxTOCir."Cod. Categoria" = rCab."Categoria Circuito") AND
           (rPaxTOCir."Tipo Habitacion" = rCab."Habitacion Circuito") AND
           (rPaxTOCir.Fecha = rCab."Fecha Inicio Circuito") THEN
          EXIT;
      END;

      nLinea := 0;

      // Si no existe el circuito hay que crearlo
      //
      rCir.RESET;
      rCir.SETRANGE(Delegacion, rCab.Delegacion);
      rCir.SETRANGE(Circuito  , rCab.Circuito);
      rCir.SETRANGE(Fecha     , rCab."Fecha Inicio Circuito");
      IF NOT rCir.FINDFIRST THEN
      BEGIN
        rCir.INIT;
        rCir.Delegacion := rCab.Delegacion;
        rCir.Circuito   := rCab.Circuito;
        rCir.Fecha      := rCab."Fecha Inicio Circuito";
        rCir.INSERT(TRUE);
      END;
      rCir."Pendiente calcular" := TRUE;
      rCir.MODIFY;

      // Borramos la relacion Circuito-Reservas-TourOperador si esta existe

      rPaxTOCir.RESET;
      rPaxTOCir.SETRANGE(Delegacion  , rCab.Delegacion);
      rPaxTOCir.SETRANGE(Circuito    , rCab.Circuito);
      rPaxTOCir.SETRANGE(Orden       , rCir.Orden);
      rPaxTOCir.SETRANGE("N§ Interno", rCab."N§ Interno");
      IF rPaxTOCir.FINDSET THEN
      BEGIN
        nLinea := rPaxTOCir."N§ Linea";
        rPaxTOCir.DELETE;
      END;

      // Creamos la relacion Circuito-Reservas-TourOperador

      //-$023rPaxTOCir.LOCKTABLE;
      CLEAR(rPaxTOCir);
      rPaxTOCir.Establecer_Gestion_Cabecera(TRUE);
      rPaxTOCir.Delegacion        := rCab.Delegacion;
      rPaxTOCir.Circuito          := rCab.Circuito;
      rPaxTOCir.Orden             := rCir.Orden;
      rPaxTOCir."N§ Linea"        := nLinea;
      rPaxTOCir."N§ Interno"      := rCab."N§ Interno";
      rPaxTOCir.Fecha             := rCab."Fecha Inicio Circuito";
      rPaxTOCir.TourOperador      := rCab."TourOperador Venta";
      rPaxTOCir."Tipo Habitacion" := rCab."Habitacion Circuito";
      rPaxTOCir."Cod. Categoria"  := rCab."Categoria Circuito";
      rPaxTOCir.INSERT(TRUE);
      rPaxTOCir.Establecer_Gestion_Cabecera(FALSE);

      // Creamos los hoteles para cada Circuito-Reservas-TourOperador
      //
      CLEAR(UltimaFecha);
      rPeriodo.RESET;
      rPeriodo.SETRANGE(Delegacion  , rCab.Delegacion);
      rPeriodo.SETRANGE("N§ Interno", rCab."N§ Interno");
      IF rPeriodo.FINDSET THEN
        REPEAT
          CLEAR(rHotCir);
          rHotCir.Establecer_Gestion_Cabecera(TRUE);
          rHotCir.Delegacion      := rPeriodo.Delegacion;
          rHotCir.Circuito        := rPaxTOCir.Circuito;
          rHotCir.Orden           := rPaxTOCir.Orden;
          rHotCir."N§ linea"      := rPaxTOCir."N§ Linea";
          rHotCir.Periodo         := rPeriodo."N§ Periodo";
          rHotCir."N§ interno"    := rPeriodo."N§ Interno";
          rHotCir.VALIDATE(Hotel          , rPeriodo."Hotel Booking");
          rHotCir.VALIDATE(TourOperador   , rCab."TourOperador Venta");
          rHotCir.VALIDATE("Fecha Entrada", rPeriodo."Fecha entrada");
          rHotCir.VALIDATE("Fecha Salida" , rPeriodo."Fecha salida");
          rHotCir.VALIDATE(Regimen        , rPeriodo.Regimen);
          rHotCir.INSERT(TRUE);
          rHotCir.Establecer_Gestion_Cabecera(FALSE);
          IF UltimaFecha < rHotCir."Fecha Salida" THEN
            UltimaFecha := rHotCir."Fecha Salida";
        UNTIL rPeriodo.NEXT = 0;

      {***********************************************************************
      rHotTOCir.RESET;
      rHotTOCir.SETRANGE (Delegacion   , rCab.Delegacion);
      rHotTOCir.SETRANGE ("N§ Tarifa"  , rCab."Contrato Venta Circuito");
      rHotTOCir.SETRANGE (Circuito     , rCir.Circuito);
      rHotTOCir.SETFILTER("Fecha desde", '<=%1', rCab."Fecha Inicio Circuito");
      rHotTOCir.SETFILTER("Fecha hasta", '>=%1', rCab."Fecha Inicio Circuito");
      rHotTOCir.SETRANGE (Activo       , TRUE);
      IF rHotTOCir.FINDSET THEN
        REPEAT
          CLEAR(rHotCir);
          rHotCir.Delegacion      := rCab.Delegacion;
          rHotCir."N§ interno"    := rCab."N§ Interno";
          rHotCir.VALIDATE(Hotel          , rHotTOCir.Hotel);
          rHotCir.VALIDATE(TourOperador   , rCab."TourOperador Venta");
          rHotCir.VALIDATE("Fecha Entrada", CALCDATE(STRSUBSTNO(Text062, rHotTOCir."Dia inicio"), rCab."Fecha Inicio Circuito"));
          rHotCir.VALIDATE("Fecha Salida" , CALCDATE(STRSUBSTNO(Text063, rHotTOCir.Estancia), rHotCir."Fecha Entrada"));
          rHotCir.INSERT(TRUE);
          IF UltimaFecha < rHotCir."Fecha Salida" THEN
            UltimaFecha := rHotCir."Fecha Salida";
        UNTIL rHotTOCir.NEXT = 0;
      ***********************************************************************}

      // Crearemos las reservas

      //-$023rResCir.LOCKTABLE;
      rResCir.RESET;

      rResCir2.SETCURRENTKEY(Delegacion, "N§ Interno");

      rAco3.RESET;
      //-$023rAco3.LOCKTABLE;
      rAco3.SETRANGE (Delegacion      , rCab.Delegacion);
      rAco3.SETRANGE ("N§ Interno"    , rCab."N§ Interno");
      IF rAco3.FINDSET THEN
        REPEAT
          rAco3.TESTFIELD("Tipo Persona");
          rResCir2.SETRANGE(Delegacion      , rAco3.Delegacion);
          rResCir2.SETRANGE("N§ Interno"    , rAco3."N§ Interno");
          rResCir2.SETRANGE("N§ Acompa¤ante", rAco3."N§ Acompa¤ante");
          IF rResCir2.FINDFIRST THEN
          BEGIN
            rResCir2.Circuito   := rCab.Circuito;
            rResCir2.Orden      := rCir.Orden;
            rResCir2."N§ linea" := rPaxTOCir."N§ Linea";
            rResCir2.MODIFY;
          END
          ELSE
          BEGIN
            CLEAR(rResCir);
            rResCir.Establecer_Gestion_Cabecera(TRUE);
            rResCir.Delegacion       := rCab.Delegacion;
            rResCir."N§ Interno"     := rCab."N§ Interno";
            rResCir.TourOperador     := rCab."TourOperador Venta";
            rResCir.Bono             := rCab.Bono;
            rResCir.Nombre           := rAco3.Nombre;
            rResCir.Edad             := rAco3.Edad;
            rResCir."Tipo Persona"   := rAco3."Tipo Persona";
            rResCir."Fecha Entrada"  := rCab."Fecha Inicio Circuito";
            rResCir."Fecha Salida"   := UltimaFecha;
            rResCir.Circuito         := rCab.Circuito;
            rResCir.Orden            := rCir.Orden;
            rResCir."N§ Acompa¤ante" := rAco3."N§ Acompa¤ante";
            rResCir."N§ linea"       := rPaxTOCir."N§ Linea";
            rResCir."C¢d. categor¡a" := rPaxTOCir."Cod. Categoria";
            rResCir."Tipo habitaci¢n":= rPaxTOCir."Tipo Habitacion";
            rResCir.INSERT(TRUE);
            rResCir.Establecer_Gestion_Cabecera(FALSE);
          END;
        UNTIL rAco3.NEXT = 0;
    END;

    PROCEDURE Generar_Periodos_Circuito@38(VAR rCab@1103355000 : Record 7009741);
    VAR
      rHotTOCir@1103355001 : Record 7010193;
      rHotTOCir2@1103355002 : Record 7010193;
      rParCir@1103355003 : Record 7010185;
      nPer@1103355004 : Integer;
      primerPer@1103355005 : Boolean;
      nHab@1103355006 : Integer;
      rCab2@1103355007 : Record 7009741;
    BEGIN
      // Generar_Periodos_Circuito

      rParCir.FINDFIRST;

      rParCir.TESTFIELD("Paquete Hotel");
      rParCir.TESTFIELD("Paquete Hotel+Transfer");

      rParCir.TESTFIELD("C¢d. Media Pensi¢n");
      rParCir.TESTFIELD("C¢d. Pensi¢n Completa");

      rPer.RESET;
      rPer.SETRANGE(Delegacion  , rCab.Delegacion);
      rPer.SETRANGE("N§ Interno", rCab."N§ Interno");
      IF rPer.FINDFIRST THEN
        ERROR(Text065);

      rPer.RESET;

      nPer := 0;
      primerPer := TRUE;
      rHotTOCir.Buscar_Hoteles_Tarifa(rCab.Delegacion, rCab."Contrato Venta Circuito",
                                      rCab.Circuito, rCab."Categoria Circuito", rCab."Fecha Inicio Circuito", TRUE);

      rHotTOCir2.COPY(rHotTOCir);
      rHotTOCir2.FINDLAST;
      REPEAT
        IF rHotTOCir."Dias PC" < rHotTOCir.Estancia THEN BEGIN
          CLEAR(rPer);
          rPer.Delegacion                := rCab.Delegacion;
          rPer."N§ Interno"              := rCab."N§ Interno";
          nPer := nPer + 10000;
          rPer."N§ Periodo"              := nPer;
          rPer.INSERT(TRUE);

          IF primerPer THEN
          BEGIN
            rPer.VALIDATE(Paquete        , rParCir."Paquete Hotel+Transfer");
            primerPer := FALSE;
          END
          ELSE
          BEGIN
      // si es el ultimo periodo y no hay dias a pension completa...
            IF (rHotTOCir.Orden = rHotTOCir2.Orden) AND (rHotTOCir."Dias PC" = 0) THEN
              rPer.VALIDATE(Paquete        , rParCir."Paquete Hotel+Transfer")
            ELSE
              rPer.VALIDATE(Paquete          , rParCir."Paquete Hotel");
          END;

          rPer.VALIDATE("Hotel reservado", rHotTOCir.Hotel);
          rPer.VALIDATE("Fecha entrada"  , CALCDATE(STRSUBSTNO(Text062, rHotTOCir."Dia inicio"), rCab."Fecha Inicio Circuito"));
          rPer.VALIDATE("Fecha salida"   , CALCDATE(STRSUBSTNO(Text066, rHotTOCir.Estancia, rHotTOCir."Dias PC")
                                                    , rPer."Fecha entrada"));
          rPer.VALIDATE(Habitacion       , rCab."Habitacion Circuito");
          rPer.VALIDATE("N§ Habitaciones", Num_Habitaciones(rPer, rCab));

          rPer.VALIDATE(Regimen          , rParCir."C¢d. Media Pensi¢n");
          rPer.MODIFY(TRUE);
        END;
        IF rHotTOCir."Dias PC" > 0 THEN BEGIN
          CLEAR(rPer);
          rPer.Delegacion                := rCab.Delegacion;
          rPer."N§ Interno"              := rCab."N§ Interno";
          nPer := nPer + 10000;
          rPer."N§ Periodo"              := nPer;
          rPer.INSERT(TRUE);

          IF primerPer THEN BEGIN
            rPer.VALIDATE(Paquete        , rParCir."Paquete Hotel+Transfer");
            primerPer := FALSE;
          END
          ELSE BEGIN
      // si es el ultimo periodo...
            IF (rHotTOCir.Orden = rHotTOCir2.Orden) THEN
              rPer.VALIDATE(Paquete        , rParCir."Paquete Hotel+Transfer")
            ELSE
              rPer.VALIDATE(Paquete          , rParCir."Paquete Hotel");
          END;
          rPer.VALIDATE("Hotel reservado", rHotTOCir.Hotel);
          rPer.VALIDATE("Fecha entrada"  , CALCDATE(STRSUBSTNO(Text067,
                                                               rHotTOCir."Dia inicio", rHotTOCir.Estancia, rHotTOCir."Dias PC"),
                                                    rCab."Fecha Inicio Circuito"));
          rPer.VALIDATE("Fecha salida"   , CALCDATE(STRSUBSTNO(Text063, rHotTOCir."Dias PC"), rPer."Fecha entrada"));
          rPer.VALIDATE(Habitacion       , rCab."Habitacion Circuito");
          rPer.VALIDATE("N§ Habitaciones", Num_Habitaciones(rPer, rCab));

          rPer.VALIDATE(Regimen          , rParCir."C¢d. Pensi¢n Completa");
          rPer.MODIFY(TRUE);
        END;
      UNTIL rHotTOCir.NEXT = 0;
    END;

    PROCEDURE Num_Habitaciones@40(VAR rPer@1103355000 : Record 7009742;rCab@1103355001 : Record 7009741) : Integer;
    VAR
      rParPer@1103355002 : Record 7009701;
      rAco@1103355003 : Record 7009748;
      rHab@1103355004 : Record 7009731;
      paxes@1103355005 : Integer;
    BEGIN
      IF rPer.Habitacion = '' THEN
        EXIT(1);

      IF rCab."N§ Interno" = 0 THEN
        IF NOT rCab.GET(rPer.Delegacion, rPer."N§ Interno") THEN
          ERROR(Text068);

      IF rPer."Contrato compra" = '' THEN
        rPer.buscar_contrato('', '');

      paxes := 0;

      rParPer.FINDFIRST;

      rAco.RESET;
      rAco.SETRANGE (Delegacion    , rPer.Delegacion);
      rAco.SETRANGE ("N§ Interno"  , rPer."N§ Interno");
      rAco.SETFILTER("Tipo Persona", '<>%1', rParPer."Codigo Infant");
      paxes := rAco.COUNT;
      rAco.RESET;

      //. Buscar n§ habitaciones de uso en funcion de paxes y tipo habitaci¢n

      rHab.RESET;
      rHab.SETRANGE (Delegacion, rPer.Delegacion);
      IF rPer."Contrato venta" <> '' THEN
      BEGIN
        rHab.SETRANGE("N§ Contrato"  , rPer."Contrato venta");
        rHab.SETRANGE("Tipo contrato", rHab."Tipo contrato"::Venta);
      END
      ELSE
      BEGIN
        rHab.SETRANGE("N§ Contrato"  , rPer."Contrato compra");
        rHab.SETRANGE("Tipo contrato", rHab."Tipo contrato"::Compra);
      END;

      rHab.SETRANGE("Habitacion cupo", rPer.Habitacion);
      IF rHab.FINDFIRST THEN
        EXIT(ROUND(paxes / rHab."Ocupacion Maxima", 1))
      ELSE
        EXIT(1);
    END;

    PROCEDURE MarcarReservaNoShow@1100217000(VAR prAcom@1100217000 : Record 7009748);
    VAR
      lrNoShow@1100217001 : Record 7010252;
      lrRsvTransfer@1100217002 : Record 7009744;
      lrAgrup@1100217003 : Record 7009796;
      lrPerRsv@1100217004 : Record 7009742;
      lrCabRsv@1100217005 : Record 7009741;
    BEGIN
      // MarcarReservaNoShow

      IF prAcom."No show" THEN
        ERROR(Text069);

      IF NOT prAcom.Generado THEN
        ERROR(Text072);

      IF prAcom."Fecha entrada" > TODAY THEN
        ERROR(Text074);

      IF NOT CONFIRM(Text070, FALSE, prAcom.Nombre, prAcom.Touroperador, prAcom.Bono) THEN
        EXIT;

      //. Buscamos el registro de periodo para pasar el hotel a la reserva no show

      lrPerRsv.RESET;
      lrPerRsv.SETRANGE(Delegacion  , prAcom.Delegacion);
      lrPerRsv.SETRANGE("N§ Interno", prAcom."N§ Interno");
      lrPerRsv.FINDFIRST;
      lrPerRsv.CALCFIELDS("Tipo operacion");

      //. Comprobamos que la reserva de hotel no este cerrada

      lrCabRsv.GET(prAcom.Delegacion, prAcom."N§ Interno");
      IF lrCabRsv.comprobar_cerrada THEN
        ERROR(Text073);

      //. Comprobar que esta persona no este dentro de una agrupacion de transfer de llegada confirmada

      lrRsvTransfer.RESET;
      lrRsvTransfer.SETCURRENTKEY(Delegacion, "N§ Interno", "N§ Periodo", "N§ Acompa¤ante");
      lrRsvTransfer.SETRANGE(Delegacion      , prAcom.Delegacion);
      lrRsvTransfer.SETRANGE("N§ Interno"    , prAcom."N§ Interno");
      lrRsvTransfer.SETRANGE("N§ Acompa¤ante", prAcom."N§ Acompa¤ante");
      IF lrRsvTransfer.FINDFIRST THEN
      BEGIN
        //IF lrAgrup.GET(lrRsvTransfer."Agrupacion entrada") THEN
        //  ERROR(Text071);

        lrRsvTransfer.VALIDATE("Agrupacion entrada", 0);
        lrRsvTransfer.VALIDATE("No Show", TRUE);
        lrRsvTransfer.MODIFY;
      END;

      prAcom.VALIDATE("No show", TRUE);
      prAcom.MODIFY(TRUE);

      CLEAR(lrNoShow);
      lrNoShow.TRANSFERFIELDS(prAcom);
      lrNoShow."Hotel Booking"             := lrPerRsv."Hotel Booking";
      //+$022 <
      lrNoShow."Hotel entrada"             := lrRsvTransfer."Hotel entrada";
      lrNoShow."Zona entrada"              := lrRsvTransfer."Zona entrada";
      lrNoShow."Hotel salida"              := lrRsvTransfer."Hotel salida";
      lrNoShow."Zona salida"               := lrRsvTransfer."Zona salida";
      lrNoShow."Tipo operacion"            := lrPerRsv."Tipo operacion";
      lrNoShow."Servicio transfer entrada" := lrRsvTransfer."Servicio transfer entrada";
      lrNoShow."Servicio transfer salida"  := lrRsvTransfer."Servicio transfer salida";
      //+$022 >
      lrNoShow.INSERT;
    END;

    PROCEDURE AgregarServicioTransfer@1100217001(prPeriodo@1100217000 : Record 7009742);
    VAR
      lrCab@1100217006 : Record 7009741;
      lrPeriodo@1100217005 : Record 7009742;
      lrRsvTra@1100217001 : Record 7009744;
      lrPaqProd@1100217002 : Record 7009752;
      lrPaqProd2@1100217003 : Record 7009752;
      lwPaquete@1100217004 : Code[10];
    BEGIN
      // AgregarServicioTransfer

      //. Si el periodo no esta generado, no es necesaria esta accion
      lrPeriodo := prPeriodo;
      lrPeriodo.TESTFIELD(Generada);

      lrCab.GET(lrPeriodo.Delegacion, lrPeriodo."N§ Interno");

      //. Comprobamos que este periodo no tenga transfer

      lrRsvTra.RESET;
      lrRsvTra.SETRANGE(Delegacion  , prPeriodo.Delegacion);
      lrRsvTra.SETRANGE("N§ Interno", prPeriodo."N§ Interno");
      lrRsvTra.SETRANGE("N§ Periodo", prPeriodo."N§ Periodo");
      IF NOT lrRsvTra.ISEMPTY THEN
        ERROR(Text075);

      //. Solicitamos confirmacion al usuario
      IF NOT CONFIRM(Text077) THEN
        EXIT;

      //. Vamos a buscar el paquete que tiene Hotel + Transfer

      lwPaquete := '';

      lrPaqProd.RESET;
      lrPaqProd.SETRANGE("Tipo Producto", lrPaqProd."Tipo Producto"::Transfer);
      IF lrPaqProd.FINDSET THEN
      BEGIN
        REPEAT
          lrPaqProd2.SETRANGE(Paquete        , lrPaqProd.Paquete);
          lrPaqProd2.SETRANGE("Tipo Producto", lrPaqProd2."Tipo Producto"::Hotel);
          IF lrPaqProd2.FINDFIRST THEN
            lwPaquete := lrPaqProd2.Paquete;
        UNTIL (lrPaqProd.NEXT = 0) OR (lwPaquete <> '');
      END;

      //. Registramos en el historico
      cPar.intro_historic(lrPeriodo.Delegacion, lrPeriodo."N§ Interno", lrPeriodo."N§ Periodo", 0, 1,
                          lrPeriodo.FIELDCAPTION(Paquete), lrPeriodo.Paquete, lwPaquete);

      //. Modificamos el periodo de reserva
      lrPeriodo.Paquete := lwPaquete;
      lrPeriodo.MODIFY(TRUE);

      //. Llamamos a la funcion que crea las reservas de transfer

      rPar.FINDFIRST;
      rParPer.FINDFIRST;

      reserva_transfer(lrCab, lrPeriodo, lrPaqProd.Producto);

      MESSAGE(Text076);
    END;

    PROCEDURE CrearVueloReserva@1100217002(VAR prPer@1100217000 : Record 7009742;pwTipo@1100217002 : 'Llegada,Salida');
    VAR
      fVuelo@1100217001 : Form 7009951;
      rVueloTMP@1100217003 : TEMPORARY Record 7009754;
      rVuelo@1100217004 : Record 7009754;
    BEGIN
      // CrearVueloReserva

      //. Abrir una ficha para que se pueda introducir la informacion de vuelo
      rVueloTMP.RESET;
      rVueloTMP.SETRANGE(Observaciones, 'TEMP'); //. Para que no de mensajes
      IF pwTipo = pwTipo::Llegada THEN
        rVueloTMP.SETRANGE(Fecha, prPer."Fecha entrada")
      ELSE
        rVueloTMP.SETRANGE(Fecha, prPer."Fecha salida");

      CLEAR(fVuelo);
      fVuelo.PasarTemporal(rVueloTMP);
      IF fVuelo.RUNMODAL <> ACTION::OK THEN
        EXIT;

      //. Recuperar la informaci¢n introducida

      fVuelo.RetornarTemporal(rVueloTMP);

      //. Compruebo que los datos obligatorios esten rellenados
      IF (rVueloTMP.Compa¤ia = '') OR
         (rVueloTMP.Vuelo = '') OR
         (rVueloTMP.Origen = '') OR
         (rVueloTMP.Destino = '') THEN
        EXIT;

      //. Comprobar coherencia de llegada/salida
      IF pwTipo <> rVueloTMP."Entrada/Salida" THEN
        ERROR(Text078);

      //. Vemos si existe como vuelo

      rVuelo := rVueloTMP;
      IF NOT rVuelo.FIND THEN
      BEGIN
        IF NOT CONFIRM(Text079, FALSE, rVuelo.Compa¤ia, rVuelo.Vuelo, rVuelo.Fecha) THEN
          EXIT;

        IF rVueloTMP."Entrada/Salida" = rVueloTMP."Entrada/Salida"::Entrada THEN
        BEGIN
          rVuelo."Hora Salida"  := 0T;
          rVuelo."Hora Entrada" := rVueloTMP."Hora Salida";
        END
        ELSE
        BEGIN
          rVuelo."Hora Entrada" := 0T;
        END;
        rVuelo.Observaciones := ''; //+$026
        rVuelo.INSERT;
      END;

      IF pwTipo = pwTipo::Llegada THEN
      BEGIN
        prPer.VALIDATE("Compa¤ia entrada"    , rVuelo.Compa¤ia);
        prPer.VALIDATE("Vuelo entrada"       , rVuelo.Vuelo);
        prPer.VALIDATE("IATA origen entrada" , rVuelo.Origen);
        prPer.VALIDATE("IATA destino entrada", rVuelo.Destino);
        prPer.VALIDATE("Hora entrada"        , rVuelo."Hora Entrada");
      END
      ELSE
      BEGIN
        prPer.VALIDATE("Compa¤ia salida"    , rVuelo.Compa¤ia);
        prPer.VALIDATE("Vuelo salida"       , rVuelo.Vuelo);
        prPer.VALIDATE("IATA origen salida" , rVuelo.Origen);
        prPer.VALIDATE("IATA destino salida", rVuelo.Destino);
        prPer.VALIDATE("Hora salida"        , rVuelo."Hora Salida");
      END;
    END;

    BEGIN
    {
      ## AJF 04/05/2009

        .- Vinculo las reservas de transfer y hotel a cotizacion si la cabecera ha sido generada a partir de una.

      ## AJF 02/06/09

        .- Se modifica el precio manual de la reserva para que no se recalcule la reserva.

      ## AJF 29/06/09

        .- (09/00319) cambio c¢digos de hotel de code10 a code20.

      JPT 11/08/10 A¤ado nuevo campo "Grupo Touroperador" a la tabla de "Reserva x dia Compra" en "genera_reserva_booking"

      $001 AJS 28102011 Modifico la funcion Pendiente_calculo para que no cambie los filtro del record pasado por parametros

      $002 AJS 21112011 Modificacion temporal para que busque automaticamente contratos para rewe en reservas a partir
                        de 01/05/2012D

      $003 AJS 17052012 Modifico la funcion a¤adir_acompa¤ante_hotel para que la reserva responsable se marque como
                        pendiente de cerrar, comunicar y exportar hotel

      $004 AJS 17052012 Modifico la funcion borra_reserva_hotel para que la reserva responsable se marque como
                        pendiente de cerrar

      $005 JPT 08/08/12 CNT-OC-12004 Incluir filtro por oficina en las excursiones. Funcion SetOficina

      $006 AJS 31082012 Modifico la funcion borra_reserva_hotel para que marque el bono como no facturado

      $007 AJS 20122012 Modifico la funcion borra_reserva_hotel para que al borrar una persona que no es responsable se marque
                        la reserva para volver a enviar al hotel

      $008 AJS 14062013 Nueva funcion AgregarServicioTransfer para poder incluir el servicio de transfer en una reserva que
                        ya existe

      $009 AJS 17032014 CNT-OC-14035, Al modificar  un periodo comprobamos si hay que desmarcar para reenviar confirmacion Touroperador

      $010 AJS 18032014 CNT-OC-14035, Al generar una reserva dejamos el codigo preparado para enviar la confirmacion

      $011 AJS 09042014 Las funciones de asignar vuelo, cambiar hotel, reserva no show no deben trabajar con
                        reservas de traslado en destino

      $012 AJS 14042014 Modifico las funciones reserva_transfer y a¤adir_acompa¤ante_transfer para que no creen un elemento a transportar

      $013 AJS 22042014 Modifico la funcion borra_reserva_hotel para que las reservas pasen al buzon desde el mismo momento en que se
                        ha creado el envio al hotel

      $014 AJS 29042014 Modifico la funcion generar_cabecera para solucionar un error con la marca de envio confirmacion

      $015 AJS 06052014 Elimino el control sobre el campo Ejecutando generar porque es obsoleto

      $016 AJS 29052014 Modifico la funcion reserva_transfer para tratar por separado transfer privado de entrada/salida

      $017 ARM 16092014 Nuevo campo canal venta en reservas CNT-CAR-14082

      $018 ARM 29092014 CNT-CAR-14063 Nuevos campos servicio transfer entrada y salida. se pasan a la reserva transfer

      $019 AJS 06102014 Traducciones

      $020 AJS 15102014 La importaci¢n de transfer privado se deja en funci¢n de la conversion solo para Go Caribic

      $021 AJS 28102014 Amplio la visualizacion de nombre cliente a 50

      $022 AJS 09012015 Modifico la funcion MarcarReservaNoShow para rellenar los campos de hotel entrada/salida y
                        Tipo operacion, Tipo servicio entrada/salida


      $023 AJS 05022015 Elimino los locktable en la creacion de las reservas

      $024 AJS 25042015 Modifico la funcion A¤adir_acompa¤ante_transfer para cubrir el caso de la primera persona

      $025 ARM 09062015 CNT-OC-14122 Se validan los campos Servicio transfer entrada/salida para rellenar Entrada y salida

      $026 AJS 28072015 Modifico la funcion CrearVueloReserva para vaciar el campo Observaciones en el vuelo creado
    }
    END.
  }
}
