OBJECT Codeunit 5980 Service-Post
{
  OBJECT-PROPERTIES
  {
    Date=25/08/11;
    Time=12:00:00;
    Version List=NAVW15.00,NAVES5.00,RegF269949;
  }
  PROPERTIES
  {
    TableNo=5900;
    Permissions=TableData 5900=imd,
                TableData 5901=imd,
                TableData 5902=imd,
                TableData 5989=imd,
                TableData 5990=imd,
                TableData 5991=imd,
                TableData 5992=imd,
                TableData 5993=imd,
                TableData 5994=imd,
                TableData 5995=imd;
    OnRun=VAR
            DummyServLine@1000 : TEMPORARY Record 5902;
          BEGIN
            PostWithLines(Rec,DummyServLine,Ship,Consume,Invoice);
          END;

  }
  CODE
  {
    VAR
      ServiceShptLine@1011 : Record 5991;
      SourceCodeSetup@1006 : Record 242;
      SourceCode@1005 : Record 230;
      ServiceSetup@1004 : Record 5911;
      ServiceInvLine@1002 : Record 5993;
      ServiceCrMemoLine@1001 : Record 5995;
      ServDocumentsMgt@1000 : Codeunit 5988;
      Window@1012 : Dialog;
      PostingDate@1029 : Date;
      ReplaceDocumentDate@1030 : Boolean;
      ReplacePostingDate@1028 : Boolean;
      PostingDateExists@1027 : Boolean;
      HideValidationDialog@1013 : Boolean;
      Ship@1008 : Boolean;
      Consume@1009 : Boolean;
      Invoice@1010 : Boolean;
      Text001@1025 : TextConst 'ENU=There is nothing to post.;ESP=No hay nada que registrar.';
      Text002@1024 : TextConst 'ENU=Posting lines              #2######\;ESP=Registrando l¡neas         #2######\';
      Text003@1023 : TextConst 'ENU=Posting serv. and VAT      #3######\;ESP=Registrando serv. e IVA    #3######\';
      Text004@1022 : TextConst 'ENU=Posting to customers       #4######\;ESP=Registrando cliente        #4######\';
      Text005@1021 : TextConst 'ENU=Posting to bal. account    #5######;ESP=Registrando contrapartida  #5######';
      Text006@1020 : TextConst 'ENU=Posting lines              #2######;ESP=Registrando l¡neas         #2######';
      Text007@1003 : TextConst 'ENU=must be completely preinvoiced before you can ship, consume or invoice;ESP=debe haberse facturado previamente para poder enviar, consumir o facturar';
      Text1100000@1100000 : TextConst 'ENU=Posting to bal. account    #5######\;ESP=Registrando contrapartida  #5######\';
      Text1100001@1100002 : TextConst 'ENU=Creating documents         #6######;ESP=Creando documentos         #6######';
      Text1100002@1100003 : TextConst 'ENU=Corrective Invoice;ESP=Factura correctiva';

    PROCEDURE PostWithLines@9(VAR PassedServHeader@1003 : Record 5900;VAR PassedServLine@1011 : Record 5902;VAR PassedShip@1002 : Boolean;VAR PassedConsume@1001 : Boolean;VAR PassedInvoice@1000 : Boolean);
    VAR
      ServiceHeader@1012 : Record 5900;
      DocDim@1004 : Record 357;
      ServiceLine@1005 : Record 5902;
      GLEntry@1006 : Record 17;
      ServDocReg@1013 : Record 5936;
      UpdateAnalysisView@1009 : Codeunit 410;
      UpdateItemAnalysisView@1010 : Codeunit 7150;
      ServDocNo@1015 : Code[20];
      ServDocType@1014 : Integer;
    BEGIN
      ServiceHeader := PassedServHeader;

      CLEAR(ServDocumentsMgt);
      IF PostingDateExists AND (ReplacePostingDate OR (ServiceHeader."Posting Date" = 0D)) THEN BEGIN
        ServiceHeader."Posting Date" := PostingDate;
        ServiceHeader.VALIDATE("Currency Code");
      END;
      IF PostingDateExists AND (ReplaceDocumentDate OR (ServiceHeader."Document Date" = 0D)) THEN BEGIN
        ServiceHeader.VALIDATE("Document Date",PostingDate);
        ServiceHeader.ValidatePaymentTerms;  // es0001
      END;
      Initialize(ServiceHeader,PassedServLine,PassedShip,PassedConsume,PassedInvoice);

      WITH ServiceHeader DO BEGIN
        IF Invoice THEN
          Window.OPEN('#1#################################\\' + Text002 + Text003 + Text004 + Text1100000 + Text1100001) // es0001
        ELSE
          Window.OPEN('#1#################################\\' + Text006);
        Window.UPDATE(1,STRSUBSTNO('%1 %2',"Document Type","No."));

        ServDocumentsMgt.CalcInvDiscount;
        COMMIT;

        IF ServDocumentsMgt.SetNoSeries(ServiceHeader) THEN BEGIN
          // modify persistent Service Header
          MODIFY;
        END;

        ServDocumentsMgt.CalcInvDiscount;
        COMMIT;

        IF RECORDLEVELLOCKING THEN BEGIN
          DocDim.LOCKTABLE;
          ServiceLine.LOCKTABLE;
          GLEntry.LOCKTABLE;
          IF GLEntry.FIND('+') THEN;
        END;

        // fetch related document (if any), for testing invoices and credit memos fields.
        CLEAR(ServDocReg);
        ServDocReg.ServiceDocument("Document Type","No.",ServDocType,ServDocNo);

        // update quantites upon posting options and test related fields.
        ServDocumentsMgt.CheckAndBlankQtys(ServDocType);

        // create posted documents (both header and lines).
        IF Ship THEN
          ServDocumentsMgt.PrepareShipmentHeader;
        IF Invoice THEN
          IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
            ServDocumentsMgt.PrepareInvoiceHeader(Window)
          ELSE
            ServDocumentsMgt.PrepareCrMemoHeader(Window);

        // main lines posting routine via Journals
        ServDocumentsMgt.PostDocumentLines(Window);

        // lock tables for the Native
        IF NOT RECORDLEVELLOCKING THEN BEGIN
          DocDim.LOCKTABLE(TRUE,TRUE);
          ServiceLine.LOCKTABLE(TRUE,TRUE);
        END;

        ServDocumentsMgt.SetLastNos(ServiceHeader);
        MODIFY;

        // handling afterposting modification/deletion of documents
        ServDocumentsMgt.UpdateDocumentLines;

        ServDocumentsMgt.InsertValueEntryRelation;

        Finalize(ServiceHeader);

      END;
      COMMIT;
      Window.CLOSE;
      UpdateAnalysisView.UpdateAll(0,TRUE);
      UpdateItemAnalysisView.UpdateAll(0,TRUE);

      PassedServHeader := ServiceHeader;
    END;

    LOCAL PROCEDURE Initialize@7(VAR PassedServiceHeader@1000 : Record 5900;VAR PassedServiceLine@1004 : Record 5902;VAR PassedShip@1001 : Boolean;VAR PassedConsume@1002 : Boolean;VAR PassedInvoice@1003 : Boolean);
    BEGIN
      SetPostingOptions(PassedShip,PassedConsume,PassedInvoice);
      TestMandatoryFields(PassedServiceHeader,PassedServiceLine);
      ServDocumentsMgt.Initialize(PassedServiceHeader,PassedServiceLine);

      // Also calls procedure of the same name from ServDocMgt.
      // Might change the value of global Ship,Consume,Invoice vars.
      CheckAndSetPostingConstants(PassedServiceHeader,PassedShip,PassedConsume,PassedInvoice);

      // check for service lines with adjusted price
      IF (NOT HideValidationDialog OR NOT GUIALLOWED) AND
         Invoice AND (PassedServiceHeader."Document Type" = PassedServiceHeader."Document Type"::Order)
      THEN
        ServDocumentsMgt.CheckAdjustedLines;
    END;

    LOCAL PROCEDURE Finalize@8(VAR PassedServiceHeader@1000 : Record 5900);
    BEGIN
      ServDocumentsMgt.Finalize(PassedServiceHeader);
    END;

    PROCEDURE CheckCloseCondition@1() : Boolean;
    BEGIN
      EXIT(ServDocumentsMgt.IsCloseConditionMet);
    END;

    LOCAL PROCEDURE CheckAndSetPostingConstants@5(VAR ServiceHeader@1000 : Record 5900;VAR PassedShip@1003 : Boolean;VAR PassedConsume@1002 : Boolean;VAR PassedInvoice@1001 : Boolean);
    VAR
      TransportMethod@1100004 : Record 259;
      PaymentTerms@1100000 : Record 3;
    BEGIN
      WITH ServiceHeader DO BEGIN
        CASE "Document Type" OF
          "Document Type"::Invoice:
            BEGIN
              PassedShip := TRUE;
              PassedInvoice := TRUE;
            END;
          "Document Type"::"Credit Memo":
            BEGIN
              PassedShip := FALSE;
              PassedInvoice := TRUE;
            END;
        END;

        ServDocumentsMgt.CheckAndSetPostingConstants(PassedShip,PassedConsume,PassedInvoice);

        IF NOT (PassedShip OR PassedInvoice OR PassedConsume) THEN
          ERROR(Text001);

        IF Invoice AND ("Document Type" <> "Document Type"::"Credit Memo") THEN BEGIN
          TESTFIELD("Due Date");
          PaymentTerms.GET("Payment Terms Code");
          PaymentTerms.VerifyMaxNoDaysTillDueDate("Due Date","Document Date",FIELDCAPTION("Due Date"));
        END;

        IF TransportMethod.GET("Transport Method") AND TransportMethod."Port/Airport" THEN
          TESTFIELD("Exit Point");

        IF (Ship OR Invoice) AND ("Document Type" <> "Document Type"::"Credit Memo") THEN BEGIN
          TESTFIELD("Payment Method Code");
          TESTFIELD("Payment Terms Code");
        END;

      END;
      SetPostingOptions(PassedShip,PassedConsume,PassedInvoice);
    END;

    LOCAL PROCEDURE TestMandatoryFields@12(VAR PassedServiceHeader@1000 : Record 5900;VAR PassedServiceLine@1002 : Record 5902);
    VAR
      GenJnlCheckLine@1001 : Codeunit 11;
    BEGIN
      WITH PassedServiceHeader DO BEGIN
        TESTFIELD("Document Type");
        TESTFIELD("Customer No.");
        TESTFIELD("Bill-to Customer No.");
        TESTFIELD("Posting Date");
        TESTFIELD("Document Date");
        IF GenJnlCheckLine.DateNotAllowed("Posting Date") THEN
          FIELDERROR("Posting Date",Text007);
        TestMandatoryFields(PassedServiceLine);
      END;
    END;

    PROCEDURE SetPostingDate@2(NewReplacePostingDate@1000 : Boolean;NewReplaceDocumentDate@1001 : Boolean;NewPostingDate@1002 : Date);
    BEGIN
      CLEARALL;
      PostingDateExists := TRUE;
      ReplacePostingDate := NewReplacePostingDate;
      ReplaceDocumentDate := NewReplaceDocumentDate;
      PostingDate := NewPostingDate;
    END;

    PROCEDURE SetPostingOptions@4(PassedShip@1000 : Boolean;PassedConsume@1001 : Boolean;PassedInvoice@1002 : Boolean);
    BEGIN
      Ship := PassedShip;
      Consume := PassedConsume;
      Invoice := PassedInvoice;
      ServDocumentsMgt.SetPostingOptions(Ship,Consume,Invoice);
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    PROCEDURE TestDeleteHeader@19(ServiceHeader@1000 : Record 5900;VAR ServiceShptHeader@1001 : Record 5990;VAR ServiceInvHeader@1002 : Record 5992;VAR ServiceCrMemoHeader@1003 : Record 5994);
    BEGIN
      WITH ServiceHeader DO BEGIN
        CLEAR(ServiceShptHeader);
        CLEAR(ServiceInvHeader);
        CLEAR(ServiceCrMemoHeader);
        ServiceSetup.GET;

        SourceCodeSetup.GET;
        SourceCodeSetup.TESTFIELD("Deleted Document");
        SourceCode.GET(SourceCodeSetup."Deleted Document");

        IF ("Shipping No. Series" <> '') AND ("Shipping No." <> '') THEN BEGIN
          ServiceShptHeader.TRANSFERFIELDS(ServiceHeader);
          ServiceShptHeader."No." := "Shipping No.";
          ServiceShptHeader."Posting Date" := TODAY;
          ServiceShptHeader."User ID" := USERID;
          ServiceShptHeader."Source Code" := SourceCode.Code;
        END;

        IF ("Posting No. Series" <> '') AND
           (("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
            ("Posting No." <> '') OR
            ("Document Type" = "Document Type"::Invoice) AND
            ("No. Series" = "Posting No. Series"))
        THEN BEGIN
          ServiceInvHeader.TRANSFERFIELDS(ServiceHeader);
          IF "Posting No." <> '' THEN
            ServiceInvHeader."No." := "Posting No.";
          IF "Document Type" = "Document Type"::Invoice THEN BEGIN
            ServiceInvHeader."Pre-Assigned No. Series" := "No. Series";
            ServiceInvHeader."Pre-Assigned No." := "No.";
          END ELSE BEGIN
            ServiceInvHeader."Pre-Assigned No. Series" := '';
            ServiceInvHeader."Pre-Assigned No." := '';
            ServiceInvHeader."Order No. Series" := "No. Series";
            ServiceInvHeader."Order No." := "No.";
          END;
          ServiceInvHeader."Posting Date" := TODAY;
          ServiceInvHeader."User ID" := USERID;
          ServiceInvHeader."Source Code" := SourceCode.Code;
        END;

        IF ("Posting No. Series" <> '') AND
           (("Document Type" IN ["Document Type"::"Credit Memo"]) AND
            ("Posting No." <> '') OR
            ("Document Type" = "Document Type"::"Credit Memo") AND
            ("No. Series" = "Posting No. Series"))
        THEN BEGIN
          ServiceCrMemoHeader.TRANSFERFIELDS(ServiceHeader);
          IF "Posting No." <> '' THEN
            ServiceCrMemoHeader."No." := "Posting No.";
          ServiceCrMemoHeader."Pre-Assigned No. Series" := "No. Series";
          ServiceCrMemoHeader."Pre-Assigned No." := "No.";
          ServiceCrMemoHeader."Posting Date" := TODAY;
          ServiceCrMemoHeader."User ID" := USERID;
          ServiceCrMemoHeader."Source Code" := SourceCode.Code;
        END;
      END;
    END;

    PROCEDURE DeleteHeader@10(ServiceHeader@1000 : Record 5900;VAR ServiceShptHeader@1001 : Record 5990;VAR ServiceInvHeader@1002 : Record 5992;VAR ServiceCrMemoHeader@1003 : Record 5994);
    BEGIN
      WITH ServiceHeader DO BEGIN
        TestDeleteHeader(ServiceHeader,ServiceShptHeader,ServiceInvHeader,ServiceCrMemoHeader);
        IF ServiceShptHeader."No." <> '' THEN BEGIN
          ServiceShptHeader.INSERT;
          ServiceShptLine.INIT;
          ServiceShptLine."Document No." := ServiceShptHeader."No.";
          ServiceShptLine."Line No." := 10000;
          ServiceShptLine.Description := SourceCode.Description;
          ServiceShptLine.INSERT;
        END;

        IF ServiceInvHeader."No." <> '' THEN BEGIN
          ServiceInvHeader.INSERT;
          ServiceInvLine.INIT;
          ServiceInvLine."Document No." := ServiceInvHeader."No.";
          ServiceInvLine."Line No." := 10000;
          ServiceInvLine.Description := SourceCode.Description;
          ServiceInvLine.INSERT;
        END;

        IF ServiceCrMemoHeader."No." <> '' THEN BEGIN
          ServiceCrMemoHeader.INSERT;
          ServiceCrMemoLine.INIT;
          ServiceCrMemoLine."Document No." := ServiceCrMemoHeader."No.";
          ServiceCrMemoLine."Line No." := 10000;
          ServiceCrMemoLine.Description := SourceCode.Description;
          ServiceCrMemoLine.INSERT;
        END;
      END;
    END;

    BEGIN
    {
      <changelog>
        <add id="es0001" dev="VGARCA" date="2006-03-31" area="SERVINV" feature="PSCORS472"
        releaseversion="ES5.00">Service Invoices </add>
      </changelog>
    }
    END.
  }
}
