OBJECT Codeunit 10720 G/L Equivalence Management
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVES6.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 17=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text1100001@1100001 : TextConst 'ENU=The test found some WARNINGS although they will not block the process of implementing the equivalences. These are the findings:\\;ESP=En la comprobaci¢n se detectaron algunas ADVERTENCIAS, pero no bloquear n el proceso de implementaci¢n de las equivalencias. Se ha detectado lo siguiente:\\';
      Text1100002@1100002 : TextConst 'ENU=It is advisable to run report "Reconcile Cust. And Vend. Accs" to check the integrity between GL, AR and AP. Report can be found under Financial Management/General Ledger/Reports/Miscellaneous.\;ESP=Se aconseja ejecutar el informe "Reconc. ctas. client. y prov." para comprobar la integridad entre contabilidad, ventas y compras. El informe se encuentra en Gesti¢n financiera/Contabilidad/Informes/Varios.\';
      Text1100003@1100003 : TextConst 'ENU=This integrity is not mandatory in order to run the implementation process, but the differences will be kept (or might even be increased) after running the process and changing the G/L Accounts. \;ESP=Esta integridad no es obligatoria para poder ejecutar el proceso de implementaci¢n, pero se mantendr n las diferencias (o podr¡an incluso aumentarse) tras la ejecuci¢n del proceso y modificaci¢n de las cuentas. \';
      Text1100004@1100004 : TextConst 'ENU=As a general rule, it is advisable to keep integrity between General Ledger and Accounts Payables and Receivables.\;ESP=Como regla general, se aconseja mantener la integridad entre la contabilidad y ventas y compras.\';
      Text1100005@1100005 : TextConst 'ENU=Are you sure do you want to continue?;ESP=¨Seguro que desea continuar?';
      Text1100006@1100006 : TextConst 'ENU=The process was cancelled by the user.;ESP=El proceso ha sido cancelado por el usuario.';
      Text1100007@1100007 : TextConst 'ENU=Checking consistence for...\\;ESP=Comprobando consistencia para...\\';
      Text1100008@1100008 : TextConst 'ENU=G/L Entries                   #1######\;ESP=Movs. contabilidad            #1######\';
      Text1100009@1100009 : TextConst 'ENU=Trial Balance                 #2##########;ESP=Balance comprobaci¢n          #2##########';
      Text1100010@1100010 : TextConst 'ENU=At least one ERROR has been found that prevent the process to start with defining mapping accounts and to run the implementation of the mapping. The test found the following errors:\\;ESP=Se ha detectado al menos un ERROR que impide que se inicie el proceso con la definici¢n de cuentas de asignaci¢n y que se ejecute la implementaci¢n de la asignaci¢n. La comprobaci¢n ha detectado los errores siguientes:\\';
      Text1100011@1100011 : TextConst 'ENU=- G/L Entry table is unbalanced. All entries must be balanced before starting with the conversion processes to avoid inconsistencies and further problems. Please review your entries and make the corrections needed before continuing with the Matching tasks and corrections.\;ESP=- La tabla Mov. contabilidad est  sin saldar. Se deben saldar todos los movimientos antes de comenzar los procesos de conversi¢n con el fin de evitar inconsistencias y problemas adicionales. Revise las entradas y realice las correcciones oportunas antes de continuar con las tareas de asignaci¢n y las correcciones.\';
      Text1100012@1100012 : TextConst 'ENU=- Trial Balance is not balanced. To avoid inconsistencies, the Trial Balance must be balanced before starting the process of implementing the Chart of Accounts change. Please make any correction needed to balance the Trial Balance before continuing.\;ESP=- El Balance comprobaci¢n est  sin saldar. Para evitar inconsistencias, se debe saldar el balance de comprobaci¢n antes de iniciar el proceso de implementaci¢n de los cambios del plan de cuentas. Realice las correcciones oportunas para saldar el balance de comprobaci¢n antes de continuar.\';
      Text1100013@1100013 : TextConst 'ENU=The Pre Implementation Test finished without any error.;ESP=La comprobaci¢n de la implementaci¢n previa ha finalizado sin errores.';
      Text1100014@1100014 : TextConst 'ENU="- At least one of the lines has not been checked to be ";ESP="- Al menos una de las l¡neas no se ha comprobado para "';
      Text1100015@1100015 : TextConst 'ENU=The field is only informative, but please double check that the equivalences have been correctly setup for these accounts.\;ESP=El campo es s¢lo informativo, pero vuelva a comprobar que las equivalencias se han configurado correctamente para estas cuentas.\';
      Text1100016@1100016 : TextConst 'ENU=The"Implementation of Equivalences" process must be run for all accounts at least once. Therefore, the field ''Implement'' must be checked for all entries. The "Re-Implementation of Equivalences" process can be used after the first time the "Implementation of Equivalences" process has been run. The re-implementation process will only include the accounts where the field "Implement" contains a check mark.;ESP=El proceso "Implementaci¢n de equivalencias" se debe ejecutar para todas las cuentas al menos una vez. Por tanto, se debe seleccionar el campo ''Implementar'' para todos los movimientos. El proceso "Reimplementaci¢n de equivalencias" se puede utilizar tras la primera vez que se ejecute el proceso "Implementaci¢n de equivalencias". El proceso de reimplementaci¢n de equivalencias incluir  £nicamente las cuentas cuyo campo "Implementar" tenga una marca de verificaci¢n.\';
      Text1100017@1100017 : TextConst 'ENU=Test Implement Equivalences for...\;ESP=Comprobar Implementar equivalencias para...\';
      Text1100018@1100018 : TextConst 'ENU=Matching Tool Lines           #1##########\;ESP=L¡neas herram. asignac.       #1##########\';
      Text1100020@1100020 : TextConst 'ENU=G/L Entries                   #2######\;ESP=Movs. contabilidad            #2######\';
      Text1100021@1100021 : TextConst 'ENU=G/L Accounts                  #3##########\;ESP=Cuentas                       #3##########\';
      Text1100022@1100022 : TextConst 'ENU=G/L Journals                  #4##########\;ESP=Diarios generales             #4##########\';
      Text1100023@1100023 : TextConst 'ENU=Posting Groups                #5##########\;ESP=Grupos contables              #5##########\';
      Text1100024@1100024 : TextConst 'ENU=G/L Budget Entries            #7######\;ESP=Movs. ppto. contabilidad      #7######\';
      Text1100025@1100025 : TextConst 'ENU=Analysis View Entries         #8##########\;ESP=Movs. vista an lisis          #8##########\';
      Text1100026@1100026 : TextConst 'ENU=Analysis View Budget Entries  #9##########;ESP=Movs. ppto. vista an lisis    #9##########';
      Text1100027@1100027 : TextConst 'ENU=- There is at least one Account marked for implementing and with Matching Type 1-1 that has not an equivalent new account defined. Either unmark the field "Implement" so this account is skipped by the process or introduce the right new Account No. for the account.\;ESP=- Hay al menos una cuenta que se ha seleccionado para su implementaci¢n y con el Tipo de correspondencia 1-1 el cual no dispone de una cuenta nueva equivalente definida. Anule la selecci¢n del campo "Implementar" de forma que el proceso omita esta cuenta, o bien, especifique el n§ correcto de cuenta nueva para la cuenta.\';
      Text1100028@1100028 : TextConst 'ENU=- At least one G/L account marked for implementing with Matching Type 1-n, for which the equivalences of the entries are not defined has been found. Either remove the check mark from the "Implement" field, to exclude the G/L account from the process or define an equivalence account no in the "New No" field.\;ESP=- Se ha detectado al menos una cuenta seleccionada para su implementaci¢n con el Tipo de correspondencia 1-n, para el que no se han definido equivalencias de los movimientos. Elimine la marca de verificaci¢n del campo "Implementar" para excluir la cuenta del proceso, o bien, defina un n§ nuevo de cuenta de equivalencia en el campo "Nuevo n§".\';
      Text1100029@1100029 : TextConst 'ENU=Some G/L Accounts were deleted in the past, and therefore, there are some Posted General Ledger Entries with Account No. to blank. You will be asked to provide a G/L Account in the New Chart of Accounts to identify those entries.;ESP=Se han eliminado algunas cuentas anteriormente y, por tanto, existen algunos movimientos ya registrados con el n§ de cuenta en blanco. Se le solicitar  que proporcione una cuenta en el Plan de cuentas nueva para identificar tales movimientos.';
      Text1100030@1100030 : TextConst 'ENU=- At least one G/L Account in the current Chart of Accounts that has posted entries, is not defined in the tool. All G/L Accounts used must have an equivalent account in the new Chart of Account. Please define the equivalent account in the "New No." field.\;ESP=- Al menos una cuenta en el Plan de cuentas actual que tiene movimientos registrados no se ha definido en la herramienta. Todas las cuentas que se utilicen deben contar con una cuenta equivalente en el Plan de cuentas nuevo. Defina una cuenta equivalente en el campo "Nuevo n§".\';
      Text1100031@1100031 : TextConst 'ENU=- There is at least one journal that contains data. The process of implementing the equivalences will not modify these lines. Therefore, the G/L Accounts stated in these entries might be obsolete and wrong according to the new chart of accounts. To avoid future problems it is advisable to post the journals or delete all the lines.\\;ESP=- Hay al menos un diario con datos. El proceso de implementaci¢n de equivalencias no modificar  estas l¡neas. Por tanto, es posible que las cuentas especificadas en estos movimientos est‚n obsoletas y sean err¢neas de acuerdo al Plan de cuentas nuevo. Para evitar problemas ulteriores, se recomienda registrar los diarios o eliminar todas las l¡neas.\\';
      Text1100032@1100032 : TextConst 'ENU=- There is at least one Account used in one Posting Group that either has no equivalence defined or the equivalence has Matching Type 1-n. %1 1-n accounts can''t be automatically setup in Posting Groups. Please check that this is correct, and in this case, delete the account in the Posting Group and adjust this manually after the process of implementing the equivalences has finished.\;ESP=- Hay al menos una cuenta que se ha utilizado en el Grupo contable sin una equivalencia definida, o bien, con una equivalencia con Tipo de correspondencia 1-n. Las %1 cuentas 1-n no se pueden configurar autom ticamente en los Grupos contables. Compruebe que esto es correcto y, si lo fuera, elimine la cuenta en el Grupo contable y realice el ajuste manualmente una vez haya finalizado el proceso de implementaci¢n de equivalencias.\';
      Text1100033@1100033 : TextConst 'ENU="- There is at least one Account that either has no equivalence defined or the equivalence has Matching Type 1-n in table ";ESP="- Hay al menos una cuenta que no tiene una equivalencia definida o con un Tipo de correspondencia 1-n en la tabla "';
      GLAccEqTool@1100095 : Record 10720;
      Text1100034@1100034 : TextConst 'ENU=This is a complex process that can take minutes or up to a few hours depending on the number of entries in your G/L Entry table. This is a critical process, so it is STRONGLY RECOMMENDED to make a backup of your database before proceeding. Once started, the process can''t be cancelled or rolled backed and should not be interrupted. The process would perform the following actions:\;ESP=Se trata de un proceso complejo que puede llevar desde minutos hasta algunas horas, en funci¢n del n£mero de movimientos en la tabla Movs. contabilidad. Es un proceso fundamental, por lo que se RECOMIENDA ENCARECIDAMENTE realizar una copia de seguridad de la base de datos antes de continuar. Una vez haya comenzado, el proceso no se podr  cancelar o deshacer y no se podr  interrumpir. El proceso llevar  a cabo las siguientes acciones:\';
      Text1100035@1100035 : TextConst 'ENU=1.- Change current Chart of Accounts with the new Chart of Accounts defined.\;ESP=1.- Cambiar el Plan de cuentas actual con el Plan de cuentas nuevo que se haya definido.\';
      Text1100036@1100036 : TextConst 'ENU=2.- Implement the equivalences in all the existing Posted G/L Entries.\;ESP=2.- Implementar las equivalencias en todos los Movs. contabilidad registrados.\';
      Text1100037@1100037 : TextConst 'ENU=3.- Implement the equivalences in all the existing G/L Budget Entries.\;ESP=3.- Implementar las equivalencias en todos los Movs pptos. contabilidad.\';
      Text1100038@1100038 : TextConst 'ENU=4.- Implement the equivalences in all the existing Analysis View Entries.\;ESP=4.- Implementar las equivalencias en todos los Movs. vistas an lisis existentes.\';
      Text1100039@1100039 : TextConst 'ENU=5.- Change the Posting Groups with the new equivalent accounts.\;ESP=5.- Cambiar los Grupos contables con las cuentas equivalentes.\';
      Text1100040@1100040 : TextConst 'ENU=7.- Create a history of the equivalences applied to be used in the Official Annual Statement.\;ESP=7.- Crear un historial de las equivalencias aplicadas para la Declaraci¢n anual oficial.\';
      Text1100041@1100041 : TextConst 'ENU=8.- Update the matching tool lines with current date.\;ESP=8.- Actualizar las l¡neas de la herramienta de ajuste con los datos actuales.\';
      Text1100042@1100042 : TextConst 'ENU=9.- Create a log of changes.\;ESP=9.- Crear un registro con los cambios.\';
      Text1100043@1100043 : TextConst 'ENU=Do you still want to continue with the process?.;ESP=¨A£n desea continuar con el proceso?';
      Text1100044@1100044 : TextConst 'ENU=The Test Implement Equivalences finished without any error.;ESP=Comprobar Implementar equivalencias ha finalizado correctamente.';
      Text1100045@1100045 : TextConst 'ENU=The process of implementing the equivalent G/L Accounts has finished with success. Please check the file log of changes for more information. Summary of changes:\;ESP=El proceso de implementaci¢n de las cuentas equivalentes ha finalizado correctamente. Compruebe el archivo con el Registro de cambios para obtener m s informaci¢n. Resumen de los cambios:\';
      Text1100046@1100046 : TextConst 'ENU=1.- Chart of Accounts has been updated with the new Chart of Accounts.\;ESP=1.- El Plan de cuentas se ha actualizado con el Plan de cuentas nuevo.\';
      Text1100047@1100047 : TextConst 'ENU=2.- G/L Posted entries have been updated to include Account equivalences.\;ESP=2.- Los Movs. registrados de la cuenta se han actualizado e incluyen las equivalencias de la cuenta.\';
      Text1100048@1100048 : TextConst 'ENU=3.- G/L Budget entries have been updated to include Account equivalences.\;ESP=3.- Los Movs. de pptos. se han actualizado e incluyen las equivalencias de la cuenta.\';
      Text1100049@1100049 : TextConst 'ENU=4.- Analysis View entries have been updated to include Account equivalences.\;ESP=4.- Los Movs. vistas an lisis se han actualizado e incluyen las equivalencias de la cuenta.\';
      Text1100050@1100050 : TextConst 'ENU=5.- Posting Groups have been updated according to the new Accounts.\;ESP=5.- Los Grupos contables se han actualizado e incluyen las cuentas nuevas.\';
      Text1100051@1100051 : TextConst 'ENU=7.- Matching Tool has been updated with the lines implemented.\;ESP=7.- Se ha actualizado la herramienta de ajuste con las l¡neas implementadas.\';
      Text1100052@1100052 : TextConst 'ENU=8.- History of the equivalences applied to be used in the Official Annual Statement has been created.\;ESP=8.- Se ha creado un historial de equivalencias aplicadas para la Declaraci¢n anual oficial .\';
      Text1100053@1100053 : TextConst 'ENU=9.- Log of changes has been created.;ESP=9.- Se ha creado un registro de cambios.';
      Text1100054@1100054 : TextConst 'ENU=This process can be run only once. Still, you can repeat the steps of the process only for changed accounts using the process;ESP=Este proceso s¢lo se puede ejecutar una vez. A£n as¡, podr  repetir los pasos del proceso para las cuentas modificadas a trav‚s del mismo';
      Text1100055@1100055 : TextConst 'ENU=\Please review the errors and warnings and run the test again before Implementing the Equivalences.;ESP=\Revise los errores y advertencias y vuelva a ejecutar la prueba de nuevo antes de implementar las equivalencias.';
      GLAccEquivToolSetup@1100096 : Record 10723;
      GeneralLedgerAccEquivToolSetup@1100097 : Form 10727;
      DeletedAccSetup@1100105 : Form 10726;
      RBAutoMgt@1100107 : Codeunit 419;
      FileSystemObject@1100108 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Windows Script Host Object Model'.FileSystemObject";
      ErrorsFound@1100098 : Boolean;
      EmptyGLAccNo@1100106 : Boolean;
      Window@1100099 : Dialog;
      Text1100056@1100056 : TextConst 'ENU=Please, fill the Starting Date and Ending Date fields in the Request Form showed at the beggining of the process. It''s necessary in order to check if Trial Balance actually balances and/or if any change is necessary before running the Implementation of Equivalences.;ESP=Cumplimente los campos Fecha inicial y la Fecha final en el Formulario de solicitud que aparece al comienzo del proceso. Es necesario para comprobar si el Balance comprobaci¢n est  saldado y/o si es necesario realizar alg£n cambio antes de ejecutar la implementaci¢n de equivalencias.';
      Text1100057@1100057 : TextConst 'ENU=No accounts with %1 1-n will be allowed for %2.;ESP=No se admitir n cuentas con %1 1-n para %2.';
      LogFile@1100100 : File;
      LogFileData@1100101 : Text[1024];
      Text1100058@1100058 : TextConst 'ENU=Microsoft Business Solutions-Navision.;ESP=Microsoft Business Solutions-Navision.';
      Text1100059@1100059 : TextConst 'ENU=Copyright (c) 2007 Microsoft Corporation.;ESP=Copyright (c) 2007 Microsoft Corporation.';
      Text1100060@1100060 : TextConst 'ENU=Posted G/L Entries;ESP=Movs. registrados';
      Text1100061@1100061 : TextConst 'ENU=Chart Of Accounts replaced with New Chart of Accounts.;ESP=Plan de cuentas reemplazado con Plan de cuentas nuevo.';
      Text1100062@1100062 : TextConst 'ENU="Old Account No.: ";ESP="N§ cuenta antiguo: "';
      Text1100063@1100063 : TextConst 'ENU="New Account No.: ";ESP="N§ cuenta nuevo: "';
      Text1100064@1100064 : TextConst 'ENU="Updated Matching Tool with fields: ";ESP="Herramienta de asignaci¢n actualizada con campos: "';
      Text1100065@1100065 : TextConst 'ENU=updated with all the information after the process.;ESP=actualizada con toda la informaci¢n tras el proceso.';
      Text1100066@1100066 : TextConst 'ENU="Trial Balance before starting the process - Fiscal Year ";ESP="Balance comprobaci¢n antes de iniciar el proceso - Ejercicio "';
      Text1100067@1100067 : TextConst 'ENU="Trial Balance after running The Process - Fiscal Year ";ESP="Balance comprobaci¢n tras ejecutar el proceso - Ejercicio "';
      Text1100068@1100068 : TextConst 'ENU=Implementing Equivalences...\;ESP=Implementando equivalencias...\';
      Text1100069@1100069 : TextConst 'ENU=Posted G/L Entries                 #1######\;ESP=Movs. registrados                  #1######\';
      Text1100070@1100070 : TextConst 'ENU=G/L Budget Entries                 #2######\;ESP=Movs. pptos. contabilidad          #2######\';
      Text1100071@1100071 : TextConst 'ENU=Analysis View Entries              #3##########\;ESP=Movs. vistas an lisis              #3##########\';
      Text1100072@1100072 : TextConst 'ENU=Analysis View Budget Entries       #4##########\;ESP=Vistas an lisis movs. ppto.        #4##########\';
      Text1100073@1100073 : TextConst 'ENU=Chart of Accounts                  #5##########\;ESP=Plan de cuentas                    #5##########\';
      Text1100074@1100074 : TextConst 'ENU=Posting Groups                     #6##########\;ESP=Grupos contables                   #6##########\';
      Text1100075@1100075 : TextConst 'ENU=History of Equivalences Applied    #8######\;ESP=Historial equivalencias aplicadas  #8######\';
      Text1100076@1100076 : TextConst 'ENU=Matching Tool Table                #9######\;ESP=Tabla de herramienta ajuste        #9######\';
      Text1100077@1100077 : TextConst 'ENU="Opening and Closing Entries before starting the process - Fiscal Year ";ESP="Movs. apertura y cierre antes de iniciar el proceso - Ejercicio "';
      Text1100078@1100078 : TextConst 'ENU="Opening and Closing Entries after running The Process - Fiscal Year ";ESP="Movs. apertura y cierre tras la ejecuci¢n del proceso - Ejercicio "';
      Tab@1100102 : Text[8];
      Text1100079@1100079 : TextConst 'ENU=Test Re Implement Equivalences for...\;ESP=Comprobar Reimplementar equivalencias para...\';
      Text1100080@1100080 : TextConst 'ENU=The Implement Equivalences process has not ever been run. The Re Implement Equivalences process can only be run after the Implement Equivalences process has been run once. Please run the Implement Equivalences process instead.;ESP=El proceso Implementar equivalencias no se ha ejecutado nunca. El proceso Reimplementar equivalencias s¢lo se puede ejecutar tras haber ejecutado una vez el proceso Implementar equivalencias. Ejecute este proceso en su lugar.';
      Text1100081@1100081 : TextConst 'ENU=Re Implementing Equivalences...\;ESP=Reimplementando equivalencias...\';
      Text1100082@1100082 : TextConst 'ENU=In order to run the Re Implement Equivalences process at least one entry should be marked as Implement.;ESP=Para ejecutar el proceso Reimplementar equivalencias se debe marcar al menos un movimiento con Implementar.';
      Text1100083@1100083 : TextConst 'ENU=Accounts assigned to the DELETE account inserted in G/L Acc. Equiv. Tool Setup Table;ESP=Cuentas asignadas a la cuenta ELIMINAR insertada en la Tabla de configuraci¢n de la herramienta de equivalencia de cuentas.';
      Text1100084@1100084 : TextConst 'ENU=New Account implemented in Chart of Accounts:;ESP=Cuenta nueva implementada en Plan de cuentas:';
      Text1100085@1100085 : TextConst 'ENU=The Fiscal Year provided doesn''t exist. Please insert a valid Fiscal Year.;ESP=El Ejercicio proporcionado no existe. Inserte un Ejercicio v lido.';
      Text1100089@1100089 : TextConst 'ENU=Re Implement Equivalences;ESP=Reimplementar equivalencias';
      Text1100090@1100090 : TextConst 'ENU=Test Re Implement Equivalences;ESP=Comprobar Reimplementar equivalencias';
      Text1100091@1100091 : TextConst 'ENU=This process is non reversible, should not be interrupted and might take some minutes depending on the number of entries to update.\;ESP=Este proceso no se puede deshacer, no podr  interrumpirse y es posible que se alargue durante algunos minutos en funci¢n del n£mero de movimientos a actualizar.\';
      Text1100092@1100092 : TextConst 'ENU=There is at least one Account in the G/L Entries that doesn''t have any equivalent account defined in the Tool. Please review the entries and try again.;ESP=Hay al menos una cuenta en los Movs. contabilidad que no tiene una cuenta equivalente definida en la herramienta. Revise los movimientos y vuelva a intentarlo.';
      ErrorMessage@1100103 : Text[1024];
      Text1100093@1100093 : TextConst 'ENU=Matching Type 1-n accounts can''t be automatically setup in this kind of registers. Please provide a 1-1 matching for these accounts or delete the affected lines and introduce it/them again after running the process.\;ESP=Las cuentas con el Tipo de correspondencia 1-n no se pueden configurar autom ticamente en este tipo de registros. Facilite una correspondencia 1-1 para estas cuentas o elimine las l¡neas relevantes y vuelva a especificarlas tras la ejecuci¢n del proceso.\';
      Text1100094@1100094 : TextConst 'ENU=In order to run this process, the Implementation should have already been run.;ESP=Para ejecutar este proceso, se debe ejecutar antes la implementaci¢n.';
      Text1100095@1100104 : TextConst 'ENU=- You should provide a FileName for the Log of changes and the Auditing information.\;ESP=- Debe facilitar un Nombre de archivo para el Registro de cambios y la Informaci¢n de auditor¡a.\';
      Text1100100@1100087 : TextConst 'ENU=6.- Change Currencies with the new equivalent accounts.\;ESP=6.- Cambie las divisas con las nuevas cuentas equivalentes.\';
      Text1100111@1100086 : TextConst 'ENU=Currencies                     #6##########\;ESP=Divisas                     #6##########\';
      Text1100112@1100019 : TextConst 'ENU=Currencies                     #7##########\;ESP=Divisas                     #7##########\';
      Text1100113@1100000 : TextConst 'ENU=- There is at least one Account used in one currency that either has no equivalence defined or the equivalence has Matching Type 1-n. %1 1-n accounts can''''t be automatically setup in Currencies. Please check that this is correct, and in this case, delete the account in the Currency and adjust this manually after the process of implementing the equivalences has finished.\;ESP=- Existe al menos una cuenta en una divisa que no tiene equivalencias definidas o la equivalencia es del tipo coincidente 1-n. Las cuentas %1 1-n no pueden configurarse autom ticamente en Divisas. Compruebe que esto es correcto, y en este caso, elimine la cuenta en Divisas y realice los ajustes manualmente despu‚s de que el proceso de implementaci¢n de equivalencias haya finalizado.\';
      Text1100104@1100088 : TextConst 'ENU=6.- Currencies have been updated according to the new Accounts.\;ESP=6.- Las divisas se han actualizado a partir de las cuentas nuevas.\';
      ServerTempFolder@1100109 : Text[1024];

    PROCEDURE CopyDimensions@1100000(OldAccount@1100000 : Text[20];TableIDFrom@1100001 : Integer;TableIDTo@1100004 : Integer);
    VAR
      DefaultDim@1100002 : Record 352;
      TempDefaultDim@1100003 : Record 352;
    BEGIN
      DefaultDim.SETRANGE(DefaultDim."Table ID", TableIDFrom);
      DefaultDim.SETRANGE(DefaultDim."No.",OldAccount);
      IF DefaultDim.FINDSET THEN
        REPEAT
          TempDefaultDim.INIT;
          TempDefaultDim."Table ID" := TableIDTo;
          TempDefaultDim."No." := DefaultDim."No.";
          TempDefaultDim."Dimension Code" := DefaultDim."Dimension Code";
          TempDefaultDim."Dimension Value Code" := DefaultDim."Dimension Value Code";
          TempDefaultDim."Value Posting" := DefaultDim."Value Posting";
          TempDefaultDim."Multi Selection Action" := DefaultDim."Multi Selection Action";
          TempDefaultDim.INSERT;
        UNTIL DefaultDim.NEXT = 0;
    END;

    PROCEDURE CopyExtendedTexts@1100001(OldAccount@1100000 : Text[20];TableIDFrom@1100001 : Integer;TableIDTo@1100006 : Integer);
    VAR
      ExtTextHeader@1100002 : Record 279;
      ExtTextLine@1100003 : Record 280;
      TempExtTextHeader@1100004 : Record 279;
      TempExtTextLine@1100005 : Record 280;
    BEGIN
      IF TableIDFrom = DATABASE::"G/L Account" THEN
        ExtTextHeader.SETFILTER(ExtTextHeader."Table Name",'=%1',ExtTextHeader."Table Name"::"G/L Account")
      ELSE
        ExtTextHeader.SETFILTER(ExtTextHeader."Table Name",'=%1',ExtTextHeader."Table Name"::"New G/L Account");
      ExtTextHeader.SETRANGE(ExtTextHeader."No.",OldAccount);
      IF ExtTextHeader.FINDSET THEN
        REPEAT
          TempExtTextHeader.INIT;
          CASE TableIDTo OF
            DATABASE::"Historic G/L Account": TempExtTextHeader."Table Name" := TempExtTextHeader."Table Name"::"Historic G/L Account";
            DATABASE::"New G/L Account": TempExtTextHeader."Table Name" := TempExtTextHeader."Table Name"::"New G/L Account";
            DATABASE::"G/L Account": TempExtTextHeader."Table Name" := TempExtTextHeader."Table Name"::"G/L Account";
          END;
          TempExtTextHeader."No." := ExtTextHeader."No.";
          TempExtTextHeader."Language Code" := ExtTextHeader."Language Code";
          TempExtTextHeader."Text No." := ExtTextHeader."Text No.";
          TempExtTextHeader."Starting Date" := ExtTextHeader."Starting Date";
          TempExtTextHeader."Ending Date" := ExtTextHeader."Ending Date";
          TempExtTextHeader."All Language Codes" := ExtTextHeader."All Language Codes";
          TempExtTextHeader."Sales Quote" := ExtTextHeader."Sales Quote";
          TempExtTextHeader."Sales Invoice" := ExtTextHeader."Sales Invoice";
          TempExtTextHeader."Sales Order" := ExtTextHeader."Sales Order";
          TempExtTextHeader."Sales Credit Memo" := ExtTextHeader."Sales Credit Memo";
          TempExtTextHeader."Purchase Quote" := ExtTextHeader."Purchase Quote";
          TempExtTextHeader."Purchase Invoice" := ExtTextHeader."Purchase Invoice";
          TempExtTextHeader."Purchase Order" := ExtTextHeader."Purchase Order";
          TempExtTextHeader."Purchase Credit Memo" := ExtTextHeader."Purchase Credit Memo";
          TempExtTextHeader.Reminder := ExtTextHeader.Reminder;
          TempExtTextHeader."Finance Charge Memo" := ExtTextHeader."Finance Charge Memo";
          TempExtTextHeader."Sales Blanket Order" := ExtTextHeader."Sales Blanket Order";
          TempExtTextHeader."Purchase Blanket Order" := ExtTextHeader."Purchase Blanket Order";
          TempExtTextHeader."Service Order" := ExtTextHeader."Service Order";
          TempExtTextHeader."Service Quote" := ExtTextHeader."Service Quote";
          TempExtTextHeader."Sales Return Order" := ExtTextHeader."Sales Return Order";
          TempExtTextHeader."Purchase Return Order" := ExtTextHeader."Purchase Return Order";
          TempExtTextHeader.INSERT;
        UNTIL ExtTextHeader.NEXT = 0;

      IF TableIDFrom = DATABASE::"G/L Account" THEN
        ExtTextLine.SETFILTER(ExtTextLine."Table Name",'=%1',ExtTextHeader."Table Name"::"G/L Account")
      ELSE
        ExtTextLine.SETFILTER(ExtTextLine."Table Name",'=%1',ExtTextHeader."Table Name"::"New G/L Account");
      ExtTextLine.SETRANGE(ExtTextLine."No.",OldAccount);
      IF ExtTextLine.FINDSET THEN
        REPEAT
          TempExtTextLine.INIT;
          CASE TableIDTo OF
            DATABASE::"Historic G/L Account": TempExtTextLine."Table Name" := TempExtTextLine."Table Name"::"Historic G/L Account";
            DATABASE::"New G/L Account": TempExtTextLine."Table Name" := TempExtTextLine."Table Name"::"New G/L Account";
            DATABASE::"G/L Account": TempExtTextLine."Table Name" := TempExtTextLine."Table Name"::"G/L Account";
          END;
          TempExtTextLine."No." := ExtTextLine."No.";
          TempExtTextLine."Language Code" := ExtTextLine."Language Code";
          TempExtTextLine."Text No." := ExtTextLine."Text No.";
          TempExtTextLine."Line No." := ExtTextLine."Line No.";
          TempExtTextLine.Text := ExtTextLine.Text;
          TempExtTextLine.INSERT;
        UNTIL ExtTextLine.NEXT = 0;
    END;

    PROCEDURE CopyComments@1100002(OldAccount@1100000 : Text[20];TableIDFrom@1100001 : Integer;TableIDTo@1100004 : Integer);
    VAR
      CommentLine@1100002 : Record 97;
      TempCommentLine@1100003 : Record 97;
    BEGIN
      IF TableIDFrom = DATABASE::"G/L Account" THEN
        CommentLine.SETFILTER(CommentLine."Table Name",'=%1',CommentLine."Table Name"::"G/L Account")
      ELSE
        CommentLine.SETFILTER(CommentLine."Table Name",'=%1',CommentLine."Table Name"::"New G/L Account");
      CommentLine.SETRANGE(CommentLine."No.", OldAccount);
      IF CommentLine.FINDSET THEN
        REPEAT
          TempCommentLine.INIT;
          CASE TableIDTo OF
            DATABASE::"Historic G/L Account": TempCommentLine."Table Name" := TempCommentLine."Table Name"::"Historic G/L Account";
            DATABASE::"New G/L Account": TempCommentLine."Table Name" := TempCommentLine."Table Name"::"New G/L Account";
            DATABASE::"G/L Account": TempCommentLine."Table Name" := TempCommentLine."Table Name"::"G/L Account";
          END;
          TempCommentLine."No." := CommentLine."No.";
          TempCommentLine."Line No." := CommentLine."Line No.";
          TempCommentLine.Date := CommentLine.Date;
          TempCommentLine.Code := CommentLine.Code;
          TempCommentLine.Comment := CommentLine.Comment;
          TempCommentLine.INSERT;
        UNTIL CommentLine.NEXT = 0;
    END;

    PROCEDURE PreImplementationTest@1100003(Implementation@1100000 : Boolean);
    VAR
      UnbalancedGLEntries@1100001 : Boolean;
      UnbalancedTrialBalance@1100002 : Boolean;
      DeletedGLAccounts@1100003 : Boolean;
      EmptyFileName@1100004 : Boolean;
      Ok@1100005 : Boolean;
    BEGIN
      CLEAR(GeneralLedgerAccEquivToolSetup);
      Ok := GeneralLedgerAccEquivToolSetup.RUNMODAL = ACTION::OK;
      IF NOT Ok THEN
        ERROR(Text1100006);

      IF GLAccEquivToolSetup.GET THEN
        IF NOT ExistFiscalYear(GLAccEquivToolSetup."Fiscal Year Starting Date") THEN
          ERROR(Text1100085);
      IF GLAccEquivToolSetup."Log File Name" = '' THEN
        EmptyFileName := TRUE;

      IF NOT Implementation THEN BEGIN
        IF NOT CONFIRM(
          Text1100001 +
          Text1100002 +
          Text1100003 +
          Text1100004 +
          Text1100005)
        THEN
          ERROR(Text1100006);
      END;

      Window.OPEN(
        Text1100007 +
        Text1100008 +
        Text1100009);

      UnbalancedGLEntries := CheckConsistencyGLEntries;
      UnbalancedTrialBalance := CheckConsistencyTrialBalance(GLAccEquivToolSetup."Fiscal Year Starting Date",
        GLAccEquivToolSetup."Fiscal Year Ending Date");

      IF UnbalancedGLEntries OR UnbalancedTrialBalance OR EmptyFileName THEN BEGIN
        ErrorMessage := Text1100010;
        IF EmptyFileName THEN
          ErrorMessage := ErrorMessage + Text1100095;
        IF UnbalancedGLEntries THEN
          ErrorMessage := ErrorMessage + Text1100011;
        IF UnbalancedTrialBalance THEN
          ErrorMessage := ErrorMessage + Text1100012;
        Window.CLOSE;
        ErrorMessage := ErrorMessage + Text1100055;
        ERROR(ErrorMessage);
      END ELSE
        IF NOT Implementation THEN
          MESSAGE(Text1100013);

      Window.CLOSE;
    END;

    PROCEDURE TestImplementEquivalences@1100004(FirstTest@1100000 : Boolean;Implementation@1100001 : Boolean);
    VAR
      GLBudgetEntry@1100002 : Record 96;
      AnalysisViewEntry@1100003 : Record 365;
      AnalysisViewBudgetEntry@1100004 : Record 366;
      JnlBatchName@1100006 : ARRAY [8] OF Code[10];
      InitialText@1100007 : Text[50];
      Type@1100008 : ARRAY [8] OF 'General,Sales,Purchases,Cash Receipts,Payments,Assets,Intercompany,Cartera';
      I@1100009 : Integer;
      J@1100010 : Integer;
      NotReady@1100011 : Boolean;
      NotImplemented@1100012 : Boolean;
      NotMatching11@1100013 : Boolean;
      NotMatching1n@1100014 : Boolean;
      DeletedGLAccounts@1100016 : Boolean;
      LinesInJournals@1100017 : Boolean;
      FirstImplementation@1100018 : Boolean;
      IncorrectMatchingPostingGroups@1100019 : Boolean;
      IncorrectMatchingGLBudgetEntry@1100020 : Boolean;
      IncorrectMatchingAnViewEntry@1100021 : Boolean;
      IncorrectMatchAnViewBudgEntry@1100022 : Boolean;
      IncorrectMatchingCurrency@1100005 : Boolean;
    BEGIN
      GLAccEqTool.RESET;
      GLAccEqTool.SETCURRENTKEY("Last Run Date",Implement);
      GLAccEqTool.SETFILTER(GLAccEqTool."Last Run Date",'<>%1',0D);

      IF GLAccEqTool.FINDFIRST THEN
        IF FirstTest THEN
          ERROR(Text1100054 + ' ' + Text1100090)
        ELSE
          GLAccEqTool.SETRANGE(GLAccEqTool.Implement,TRUE)
      ELSE
        GLAccEqTool.RESET;

      IF FirstTest THEN
        InitialText := Text1100017
      ELSE
        InitialText := Text1100079;

      IF FirstTest AND NOT Implementation THEN BEGIN
        CheckGLEntries(EmptyGLAccNo);
        IF EmptyGLAccNo THEN BEGIN
          MESSAGE(Text1100029);
          CLEAR(DeletedAccSetup);
          DeletedAccSetup.RUNMODAL;
        END;
      END;

      Window.OPEN(
        InitialText +
        Text1100018 +
        Text1100020 +
        Text1100021 +
        Text1100022 +
        Text1100023 +
        Text1100111 +
        Text1100024 +
        Text1100025 +
        Text1100026);

      IF FirstTest THEN
        CheckMatchingToolLines(NotReady,NotImplemented,NotMatching11,NotMatching1n)
      ELSE
        CheckMatchingToolLinesReImpl(NotReady,FirstImplementation,NotMatching11,NotMatching1n);

      IF FirstTest THEN
        CheckGLAccounts(DeletedGLAccounts);
      CheckGLJournals(LinesInJournals);
      IncorrectMatchingPostingGroups := CheckPostingGroups;
      IncorrectMatchingCurrency := CheckCurrencies;
      IncorrectMatchingGLBudgetEntry := CheckGLBudgetEntries;
      IncorrectMatchingAnViewEntry := CheckAnalysisViewEntries;
      IncorrectMatchAnViewBudgEntry := CheckAnalysisViewBudgetEntries;

      IF NotReady OR LinesInJournals OR (EmptyGLAccNo AND Implementation) THEN BEGIN
        ErrorMessage := Text1100001;
        IF EmptyGLAccNo AND Implementation THEN BEGIN
          GLAccEquivToolSetup.GET;
          IF (GLAccEquivToolSetup."Delete Acc. Old Chart of Acc." = '') OR
            (GLAccEquivToolSetup."Delete Acc. New Chart of Acc." = '') THEN BEGIN
            Window.CLOSE;
            ERROR(Text1100029);
          END;
        END;
        IF NotReady THEN
          ErrorMessage := ErrorMessage + Text1100014 + GLAccEqTool.FIELDCAPTION(Ready) + '. ' + Text1100015;
        IF LinesInJournals THEN
          ErrorMessage := ErrorMessage + Text1100031;
        MESSAGE(ErrorMessage);
      END;

      IF NotImplemented OR FirstImplementation OR NotMatching11 OR NotMatching1n OR DeletedGLAccounts OR
      IncorrectMatchingPostingGroups OR IncorrectMatchingGLBudgetEntry OR IncorrectMatchingAnViewEntry OR
      IncorrectMatchAnViewBudgEntry OR IncorrectMatchingCurrency THEN BEGIN
        IF FirstImplementation THEN BEGIN
          Window.CLOSE;
          ERROR(Text1100080);
        END;
        ErrorMessage := Text1100010;
        IF NotImplemented THEN
          ErrorMessage := ErrorMessage + Text1100014 + GLAccEqTool.FIELDCAPTION(Implement) + '. ' + Text1100016;
        IF NotMatching11 THEN
          ErrorMessage := ErrorMessage + Text1100027;
        CheckStrLen(ErrorMessage,Text1100028);
        IF NotMatching1n THEN
          ErrorMessage := ErrorMessage + Text1100028;
        CheckStrLen(ErrorMessage,Text1100030);
        IF FirstTest THEN
          IF DeletedGLAccounts THEN
            ErrorMessage := ErrorMessage + Text1100030;
        CheckStrLen(ErrorMessage,Text1100032);
        IF IncorrectMatchingPostingGroups THEN
          ErrorMessage := ErrorMessage + Text1100032;
        CheckStrLen(ErrorMessage,Text1100033 + Text1100093);
        IF IncorrectMatchingCurrency THEN
          ErrorMessage := ErrorMessage + Text1100113;
        CheckStrLen(ErrorMessage,Text1100033 + Text1100093);
        IF IncorrectMatchingGLBudgetEntry THEN
          ErrorMessage := ErrorMessage + Text1100033 + GLBudgetEntry.TABLENAME + '. ' + Text1100093;
        CheckStrLen(ErrorMessage,Text1100033 + Text1100093);
        IF IncorrectMatchingAnViewEntry THEN
          ErrorMessage := ErrorMessage + Text1100033 + AnalysisViewEntry.TABLENAME + '. ' + Text1100093;
        CheckStrLen(ErrorMessage,Text1100033 + Text1100093);
        IF IncorrectMatchAnViewBudgEntry THEN
          ErrorMessage := ErrorMessage + Text1100033 + AnalysisViewBudgetEntry.TABLENAME + '. ' + Text1100093;
        Window.CLOSE;
        CheckStrLen(ErrorMessage,Text1100055);
        ErrorMessage := ErrorMessage + Text1100055;
        ERROR(ErrorMessage);
      END ELSE
        IF NOT Implementation THEN
          MESSAGE(Text1100044);

      Window.CLOSE;
    END;

    PROCEDURE ImplementEquivalences@1100005(FirstImplementation@1100000 : Boolean);
    VAR
      DeletedAccSetup@1100004 : Form 10726;
      InitialText@1100001 : Text[50];
      Implementation@1100002 : Boolean;
      FillDeletedAccounts@1100003 : Boolean;
    BEGIN
      GLAccEquivToolSetup.GET;
      IF (GLAccEquivToolSetup."Delete Acc. Old Chart of Acc." = '')
        OR (GLAccEquivToolSetup."Delete Acc. New Chart of Acc." = '') THEN BEGIN
          CheckGLEntries(EmptyGLAccNo);
          IF EmptyGLAccNo THEN BEGIN
            MESSAGE(Text1100029);
            CLEAR(DeletedAccSetup);
            DeletedAccSetup.RUNMODAL;
          END;
      END;

      GLAccEqTool.RESET;
      GLAccEqTool.SETCURRENTKEY("Last Run Date",Implement);
      GLAccEqTool.SETFILTER(GLAccEqTool."Last Run Date",'<>%1',0D);

      IF GLAccEqTool.FINDFIRST THEN
        IF FirstImplementation THEN
          ERROR(Text1100054 + ' ' + Text1100089)
        ELSE
          GLAccEqTool.SETRANGE(GLAccEqTool.Implement,TRUE)
      ELSE
        GLAccEqTool.RESET;

      IF NOT CONFIRM(
        Text1100034 +
        Text1100035 +
        Text1100036 +
        Text1100037 +
        Text1100038 +
        Text1100039 +
        Text1100100 +
        Text1100040 +
        Text1100041 +
        Text1100042 +
        Text1100043)
      THEN
        ERROR(Text1100006)
      ELSE BEGIN
        PreImplementationTest(TRUE);
        TestImplementEquivalences(FirstImplementation,TRUE);

        IF FirstImplementation THEN
          UpdateOldBalanceInHistGLAcc(TRUE)
        ELSE
          UpdateOldBalanceInHistGLAcc(FALSE);

        IF FirstImplementation THEN
          InitialText := Text1100068
        ELSE
          InitialText := Text1100081;

        Window.OPEN(
          InitialText +
          Text1100069 +
          Text1100070 +
          Text1100071 +
          Text1100072 +
          Text1100073 +
          Text1100074 +
          Text1100112 +
          Text1100075 +
          Text1100076);

        CreateLogOfChanges;
        ExportAuditingInformation(TRUE);

        ImplementEquivInPostGLEntries(FirstImplementation);
        ImplementEquivInGLBudgEntries(FirstImplementation);
        ImplEqInAnaysisViewEntries(FirstImplementation);
        ImplEqInAnaysisViewBudgEntries(FirstImplementation);
        IF FirstImplementation THEN
          ReplaceCOAWithNewCOA
        ELSE
          UpdateCOAWithNewCOA;
        ImplementEquivInPostingGroups;
        ImplementEquivInCurrencies;
        InsertHistoryOfEquivApplied;
        UpdateMatchingToolWithDate;
        ExportAuditingInformation(FALSE);
        ExportHistoryOfEquivApplied(FirstImplementation);

        MESSAGE(Text1100045 +
          Text1100046 +
          Text1100047 +
          Text1100048 +
          Text1100049 +
          Text1100050 +
          Text1100104 +
          Text1100051 +
          Text1100052 +
          Text1100053);
      END;
    END;

    PROCEDURE UpdateOldBalanceInHistGLAcc@1100006(FirstImplementation@1100000 : Boolean);
    VAR
      GLAcc@1100001 : Record 15;
      HistoricGLAcc@1100002 : Record 10721;
    BEGIN
      IF FirstImplementation THEN
        IF GLAcc.FINDSET THEN
          REPEAT
            IF HistoricGLAcc.GET(GLAcc."No.") THEN BEGIN
              GLAcc.CALCFIELDS(Balance);
              HistoricGLAcc."Old Balance" := GLAcc.Balance;
              HistoricGLAcc.MODIFY;
            END;
          UNTIL GLAcc.NEXT = 0
      ELSE BEGIN
        GLAccEqTool.RESET;
        GLAccEqTool.SETCURRENTKEY("Last Run Date",Implement);
        GLAccEqTool.SETFILTER(GLAccEqTool."Last Run Date",'<>%1',0D);
        GLAccEqTool.SETRANGE(GLAccEqTool.Implement,TRUE);
        IF GLAccEqTool.FINDSET THEN
          REPEAT
            IF HistoricGLAcc.GET(GLAccEqTool."No.") THEN BEGIN
              HistoricGLAcc.CALCFIELDS(Balance);
              HistoricGLAcc."Old Balance" := HistoricGLAcc.Balance;
              HistoricGLAcc.MODIFY;
            END;
          UNTIL GLAccEqTool.NEXT = 0;
      END;
    END;

    PROCEDURE CheckConsistencyGLEntries@1100007() : Boolean;
    VAR
      GLEntry@1100000 : Record 17;
      GLSetup@1100001 : Record 98;
      BalanceCheckAmount@1100002 : Decimal;
      BalanceCheckAmount2@1100003 : Decimal;
      BalanceCheckAddCurrAmount@1100004 : Decimal;
      BalanceCheckAddCurrAmount2@1100005 : Decimal;
    BEGIN
      IF GLEntry.FINDSET THEN
      REPEAT
        Window.UPDATE(1,GLEntry."Entry No.");
        IF GLEntry."Posting Date" = NORMALDATE(GLEntry."Posting Date") THEN BEGIN
          BalanceCheckAmount :=
            BalanceCheckAmount + GLEntry.Amount * ((GLEntry."Posting Date" - 01010000D) MOD 99 + 1);
          BalanceCheckAmount2 :=
            BalanceCheckAmount2 + GLEntry.Amount * ((GLEntry."Posting Date" - 01010000D) MOD 98 + 1);
        END ELSE BEGIN
          BalanceCheckAmount :=
            BalanceCheckAmount + GLEntry.Amount * ((NORMALDATE(GLEntry."Posting Date") - 01010000D + 50) MOD 99 + 1);
          BalanceCheckAmount2 :=
            BalanceCheckAmount2 + GLEntry.Amount * ((NORMALDATE(GLEntry."Posting Date") - 01010000D + 50) MOD 98 + 1);
        END;
        IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
          IF GLEntry."Posting Date" = NORMALDATE(GLEntry."Posting Date") THEN BEGIN
            BalanceCheckAddCurrAmount :=
              BalanceCheckAddCurrAmount + GLEntry."Additional-Currency Amount" * ((GLEntry."Posting Date" - 01010000D) MOD 99 + 1);
            BalanceCheckAddCurrAmount2 :=
              BalanceCheckAddCurrAmount2 + GLEntry."Additional-Currency Amount" * ((GLEntry."Posting Date" - 01010000D) MOD 98 + 1);
          END ELSE BEGIN
            BalanceCheckAddCurrAmount :=
              BalanceCheckAddCurrAmount +
              GLEntry."Additional-Currency Amount" * ((NORMALDATE(GLEntry."Posting Date") - 01010000D + 50) MOD 99 + 1);
            BalanceCheckAddCurrAmount2 :=
              BalanceCheckAddCurrAmount2 +
              GLEntry."Additional-Currency Amount" * ((NORMALDATE(GLEntry."Posting Date") - 01010000D + 50) MOD 98 + 1);
          END;
        END ELSE BEGIN
          BalanceCheckAddCurrAmount := 0;
          BalanceCheckAddCurrAmount2 := 0;
      END;
      UNTIL GLEntry.NEXT = 0;

      IF NOT ((BalanceCheckAmount = 0) AND (BalanceCheckAmount2 = 0) AND
        (BalanceCheckAddCurrAmount = 0) AND (BalanceCheckAddCurrAmount2 = 0)) THEN
        EXIT(TRUE);
    END;

    PROCEDURE CheckConsistencyTrialBalance@1100008(StartingDate@1100000 : Date;EndingDate@1100001 : Date) : Boolean;
    VAR
      GLAcc@1100002 : Record 15;
      GLAcc2@1100003 : Record 15;
      PreviousBalance@1100004 : Decimal;
      OpenCreditAmt@1100005 : Decimal;
      OpenDebitAmt@1100006 : Decimal;
      OpenCreditAmtEnd@1100007 : Decimal;
      OpenDebitAmtEnd@1100008 : Decimal;
      PreviousDebit@1100009 : Decimal;
      PreviousCredit@1100010 : Decimal;
      PeriodDebitAmt@1100011 : Decimal;
      PeriodCreditAmt@1100012 : Decimal;
      BalanceAtEnd@1100013 : Decimal;
      DebitAmtAtEnd@1100014 : Decimal;
      CreditAmtAtEnd@1100015 : Decimal;
      TotalPeriodDebitAmt@1100016 : Decimal;
      TotalPeriodCreditAmt@1100017 : Decimal;
      TotalBalanceAtEnd@1100018 : Decimal;
      TotalDebitAmtAtEnd@1100019 : Decimal;
      TotalCreditAmtAtEnd@1100020 : Decimal;
      I@1100021 : Integer;
      FixedLevel@1100022 : Integer;
      PreviousLevel@1100023 : Integer;
      PrevAccount@1100024 : Code[1];
      FirstLevel@1100025 : Integer;
      Accumulate@1100026 : Boolean;
    BEGIN
      IF GLAcc.FINDSET THEN
        REPEAT
          Window.UPDATE(2,GLAcc."No.");
          Accumulate := FALSE;
          GLAcc2 := GLAcc;
          IF (StartingDate = 0D) OR (EndingDate = 0D) THEN BEGIN
            Window.CLOSE;
            ERROR(Text1100056);
          END;
          GLAcc2.SETRANGE("Date Filter",StartingDate,EndingDate);
          PreviousBalance := GLAcc2."Net Change";
          PreviousDebit := 0;
          PreviousCredit := 0;
          IF PreviousBalance > 0 THEN
            PreviousDebit := PreviousBalance
          ELSE
            PreviousCredit := ABS(PreviousBalance);
          GLAcc2.CALCFIELDS("Debit Amount","Credit Amount","Add.-Currency Debit Amount","Add.-Currency Credit Amount");
          PeriodDebitAmt := GLAcc2."Debit Amount";
          PeriodCreditAmt := GLAcc2."Credit Amount";
          BalanceAtEnd := BalanceAtEnd + PreviousBalance;
          DebitAmtAtEnd := GLAcc2."Debit Amount";
          CreditAmtAtEnd := GLAcc2."Credit Amount";
          I := I + 1;
          IF I = 1 THEN
            FixedLevel := STRLEN (GLAcc."No.");
          IF (COPYSTR(GLAcc2."No.",1,1) <> PrevAccount) AND (STRLEN(GLAcc2."No.") >= FixedLevel) THEN BEGIN
            Accumulate := TRUE;
            FirstLevel := STRLEN (GLAcc2."No.");
          END ELSE
            IF (STRLEN(GLAcc2."No.") <= PreviousLevel) AND (STRLEN(GLAcc."No.") <= FirstLevel) AND
              (STRLEN(GLAcc2."No.") >= FixedLevel) THEN
              Accumulate := TRUE
            ELSE
              Accumulate := FALSE;
          IF Accumulate THEN BEGIN
            TotalPeriodDebitAmt := TotalPeriodDebitAmt + GLAcc2."Debit Amount";
            TotalPeriodCreditAmt := TotalPeriodCreditAmt + GLAcc2."Credit Amount";
            TotalDebitAmtAtEnd := TotalDebitAmtAtEnd + DebitAmtAtEnd;
            TotalCreditAmtAtEnd := TotalCreditAmtAtEnd + CreditAmtAtEnd;
              END;

          IF (STRLEN(GLAcc2."No.") >= FixedLevel) THEN BEGIN
            PreviousLevel := STRLEN(GLAcc2."No.");
            PrevAccount := COPYSTR(GLAcc2."No.",1,1);
          END;
        UNTIL GLAcc.NEXT = 0;

      IF NOT ((TotalPeriodDebitAmt - TotalPeriodCreditAmt = 0) AND (TotalDebitAmtAtEnd - TotalCreditAmtAtEnd = 0) AND
        (TotalBalanceAtEnd = 0)) THEN
        EXIT(TRUE);
    END;

    PROCEDURE CheckMatchingToolLines@1100009(VAR NotReady@1100000 : Boolean;VAR NotImplemented@1100001 : Boolean;VAR NotMatching11@1100002 : Boolean;VAR NotMatching1n@1100003 : Boolean);
    VAR
      GLEntry@1100004 : Record 17;
    BEGIN
      NotReady := FALSE;
      NotImplemented := FALSE;
      NotMatching11 := FALSE;
      NotMatching1n := FALSE;
      GLAccEqTool.SETRANGE(GLAccEqTool."Account Type",GLAccEqTool."Account Type"::Posting);
      IF GLAccEqTool.FINDSET THEN BEGIN
        REPEAT
          Window.UPDATE(1,GLAccEqTool."No.");
          CheckValidateAccounts(GLAccEqTool."New No.");
          IF NOT GLAccEqTool.Ready THEN
            NotReady := TRUE;
          IF NOT GLAccEqTool.Implement THEN
            NotImplemented := TRUE;
          IF (GLAccEqTool."Matching Type" = GLAccEqTool."Matching Type"::"1-1") AND GLAccEqTool.Implement
            AND (GLAccEqTool."New No." = '') THEN
            NotMatching11 := TRUE;
          IF (GLAccEqTool."Matching Type" = GLAccEqTool."Matching Type"::"1-n") AND GLAccEqTool.Implement THEN BEGIN
            GLEntry.SETCURRENTKEY("G/L Account No.","Posting Date");
            GLEntry.SETRANGE(GLEntry."G/L Account No.",GLAccEqTool."No.");
            GLEntry.SETFILTER(GLEntry."New G/L Account No.",'=%1','');
            IF GLEntry.FINDFIRST THEN
              NotMatching1n := TRUE;
          END;
        UNTIL GLAccEqTool.NEXT = 0;
      END;
    END;

    PROCEDURE CheckMatchingToolLinesReImpl@1100010(VAR NotReady@1100000 : Boolean;VAR FirstImplementation@1100001 : Boolean;VAR NotMatching11@1100002 : Boolean;VAR NotMatching1n@1100003 : Boolean);
    VAR
      GLEntry@1100004 : Record 17;
    BEGIN
      NotReady := FALSE;
      FirstImplementation := FALSE;
      NotMatching11 := FALSE;
      NotMatching1n := FALSE;
      GLAccEqTool.RESET;
      GLAccEqTool.SETCURRENTKEY("Last Run Date",Implement);
      GLAccEqTool.SETFILTER("Last Run Date",'<>%1',0D);
      IF NOT GLAccEqTool.FINDSET THEN
        FirstImplementation := TRUE
      ELSE BEGIN
        GLAccEqTool.RESET;
        GLAccEqTool.SETRANGE(Implement,TRUE);
        IF GLAccEqTool.FINDSET THEN
          REPEAT
            Window.UPDATE(1,GLAccEqTool."No.");
            CheckValidateAccounts(GLAccEqTool."New No.");
            IF NOT GLAccEqTool.Ready THEN
              NotReady := TRUE;
            IF (GLAccEqTool."Matching Type" = GLAccEqTool."Matching Type"::"1-1") AND GLAccEqTool.Implement
              AND (GLAccEqTool."New No." = '') THEN
              NotMatching11 := TRUE;
            IF (GLAccEqTool."Matching Type" = GLAccEqTool."Matching Type"::"1-n") AND GLAccEqTool.Implement THEN BEGIN
              GLEntry.SETCURRENTKEY("G/L Account No.","Posting Date");
              GLEntry.SETRANGE(GLEntry."G/L Account No.",GLAccEqTool."No.");
              GLEntry.SETFILTER(GLEntry."New G/L Account No.",'=%1','');
              IF GLEntry.FINDFIRST THEN
                NotMatching1n := TRUE;
            END;
          UNTIL GLAccEqTool.NEXT = 0
        ELSE BEGIN
          Window.CLOSE;
          ERROR(Text1100082);
        END;
      END;
    END;

    PROCEDURE CheckValidateAccounts@1100011(Acc@1100000 : Text[20]);
    BEGIN
      IF GLAccEqTool."Matching Type" = GLAccEqTool."Matching Type"::"1-1" THEN
        GLAccEqTool.VALIDATE(GLAccEqTool."New No.");
    END;

    PROCEDURE CheckGLEntries@1100012(VAR EmptyGLAccNo@1100000 : Boolean);
    VAR
      GLEntry@1100002 : Record 17;
    BEGIN
      EmptyGLAccNo := FALSE;
      GLEntry.SETCURRENTKEY("G/L Account No.","Posting Date");
      GLEntry.SETFILTER(GLEntry."G/L Account No.",'=%1','');
      IF GLEntry.FINDFIRST THEN
        EmptyGLAccNo := TRUE;
    END;

    PROCEDURE CheckGLAccounts@1100013(VAR DeletedGLAccounts@1100000 : Boolean);
    VAR
      GLAccount@1100001 : Record 15;
      GLEntry@1100002 : Record 17;
      GLAccEqTool@1100003 : Record 10720;
    BEGIN
      DeletedGLAccounts := FALSE;
      IF GLAccount.FINDSET THEN
        REPEAT
          Window.UPDATE(3,GLAccount."No.");
          GLEntry.SETCURRENTKEY("G/L Account No.","Posting Date");
          GLEntry.SETRANGE(GLEntry."G/L Account No.",GLAccount."No.");
          IF GLEntry.FINDFIRST THEN BEGIN
            IF NOT GLAccEqTool.GET(GLAccount."No.") THEN
              DeletedGLAccounts := TRUE;
          END;
        UNTIL GLAccount.NEXT = 0;
    END;

    PROCEDURE CheckGLJournals@1100014(VAR LinesInJournals@1100000 : Boolean);
    VAR
      GenJnlLine@1100001 : Record 81;
      GenJnlTemplate@1100002 : Record 80;
    BEGIN
      LinesInJournals := FALSE;
      IF GenJnlLine.FINDFIRST THEN BEGIN
        Window.UPDATE(4,GenJnlLine."Journal Template Name");
        LinesInJournals := TRUE;
      END;
    END;

    PROCEDURE CheckPostingGroups@1100015() : Boolean;
    VAR
      GenPostingSetup@1100000 : Record 252;
      CustomerPostingGroup@1100001 : Record 92;
      VendorPostingGroup@1100002 : Record 93;
      InventoryPostingSetup@1100003 : Record 5813;
      JobPostingGroup@1100004 : Record 208;
      BankAccPostingGroup@1100005 : Record 277;
      FAPostingGroup@1100006 : Record 5606;
      VATPostingSetup@1100007 : Record 325;
      I@1100008 : Integer;
      IncorrectMatchingPostingGroups@1100009 : ARRAY [31] OF Boolean;
    BEGIN
      FOR I := 1 TO 31 DO
        IncorrectMatchingPostingGroups[I] := FALSE;

      IF GenPostingSetup.FINDSET THEN
        REPEAT
          Window.UPDATE(5,GenPostingSetup."Gen. Prod. Posting Group");
          IncorrectMatchingPostingGroups[1] := CheckMatchingType(GenPostingSetup."Sales Account");
          IncorrectMatchingPostingGroups[2] := CheckMatchingType(GenPostingSetup."Sales Line Disc. Account");
          IncorrectMatchingPostingGroups[3] := CheckMatchingType(GenPostingSetup."Sales Inv. Disc. Account");
          IncorrectMatchingPostingGroups[4] := CheckMatchingType(GenPostingSetup."Sales Pmt. Disc. Debit Acc.");
          IncorrectMatchingPostingGroups[5] := CheckMatchingType(GenPostingSetup."Purch. Account");
          IncorrectMatchingPostingGroups[6] := CheckMatchingType(GenPostingSetup."Purch. Line Disc. Account");
          IncorrectMatchingPostingGroups[7] := CheckMatchingType(GenPostingSetup."Purch. Inv. Disc. Account");
          IncorrectMatchingPostingGroups[8] := CheckMatchingType(GenPostingSetup."Purch. Pmt. Disc. Credit Acc.");
          IncorrectMatchingPostingGroups[9] := CheckMatchingType(GenPostingSetup."COGS Account");
          IncorrectMatchingPostingGroups[10] := CheckMatchingType(GenPostingSetup."Inventory Adjmt. Account");
          IncorrectMatchingPostingGroups[11] := CheckMatchingType(GenPostingSetup."Job Sales Adjmt. Account");
          IncorrectMatchingPostingGroups[12] := CheckMatchingType(GenPostingSetup."Job Cost Adjmt. Account");
          IncorrectMatchingPostingGroups[13] := CheckMatchingType(GenPostingSetup."Sales Credit Memo Account");
          IncorrectMatchingPostingGroups[14] := CheckMatchingType(GenPostingSetup."Purch. Credit Memo Account");
          IncorrectMatchingPostingGroups[15] := CheckMatchingType(GenPostingSetup."Sales Pmt. Disc. Credit Acc.");
          IncorrectMatchingPostingGroups[16] := CheckMatchingType(GenPostingSetup."Purch. Pmt. Disc. Debit Acc.");
          IncorrectMatchingPostingGroups[17] := CheckMatchingType(GenPostingSetup."Sales Pmt. Tol. Debit Acc.");
          IncorrectMatchingPostingGroups[18] := CheckMatchingType(GenPostingSetup."Sales Pmt. Tol. Credit Acc.");
          IncorrectMatchingPostingGroups[19] := CheckMatchingType(GenPostingSetup."Purch. Pmt. Tol. Debit Acc.");
          IncorrectMatchingPostingGroups[20] := CheckMatchingType(GenPostingSetup."Purch. Pmt. Tol. Credit Acc.");
          IncorrectMatchingPostingGroups[21] := CheckMatchingType(GenPostingSetup."Sales Prepayments Account");
          IncorrectMatchingPostingGroups[22] := CheckMatchingType(GenPostingSetup."Purch. Prepayments Account");
          IncorrectMatchingPostingGroups[23] := CheckMatchingType(GenPostingSetup."Purch. FA Disc. Account");
          IncorrectMatchingPostingGroups[24] := CheckMatchingType(GenPostingSetup."Invt. Accrual Acc. (Interim)");
          IncorrectMatchingPostingGroups[25] := CheckMatchingType(GenPostingSetup."COGS Account (Interim)");
          IncorrectMatchingPostingGroups[26] := CheckMatchingType(GenPostingSetup."Direct Cost Applied Account");
          IncorrectMatchingPostingGroups[27] := CheckMatchingType(GenPostingSetup."Overhead Applied Account");
          IncorrectMatchingPostingGroups[28] := CheckMatchingType(GenPostingSetup."Purchase Variance Account");
          FOR I := 1 TO 28 DO
            IF IncorrectMatchingPostingGroups[I] THEN
              EXIT(IncorrectMatchingPostingGroups[I]);
        UNTIL GenPostingSetup.NEXT = 0;

      IF CustomerPostingGroup.FINDSET THEN
        REPEAT
          Window.UPDATE(5,CustomerPostingGroup.Code);
          IncorrectMatchingPostingGroups[1] := CheckMatchingType(CustomerPostingGroup."Receivables Account");
          IncorrectMatchingPostingGroups[2] := CheckMatchingType(CustomerPostingGroup."Service Charge Acc.");
          IncorrectMatchingPostingGroups[3] := CheckMatchingType(CustomerPostingGroup."Payment Disc. Debit Acc.");
          IncorrectMatchingPostingGroups[4] := CheckMatchingType(CustomerPostingGroup."Invoice Rounding Account");
          IncorrectMatchingPostingGroups[5] := CheckMatchingType(CustomerPostingGroup."Additional Fee Account");
          IncorrectMatchingPostingGroups[6] := CheckMatchingType(CustomerPostingGroup."Interest Account");
          IncorrectMatchingPostingGroups[7] := CheckMatchingType(CustomerPostingGroup."Debit Curr. Appln. Rndg. Acc.");
          IncorrectMatchingPostingGroups[8] := CheckMatchingType(CustomerPostingGroup."Credit Curr. Appln. Rndg. Acc.");
          IncorrectMatchingPostingGroups[9] := CheckMatchingType(CustomerPostingGroup."Debit Rounding Account");
          IncorrectMatchingPostingGroups[10] := CheckMatchingType(CustomerPostingGroup."Credit Rounding Account");
          IncorrectMatchingPostingGroups[11] := CheckMatchingType(CustomerPostingGroup."Payment Disc. Credit Acc.");
          IncorrectMatchingPostingGroups[12] := CheckMatchingType(CustomerPostingGroup."Payment Tolerance Debit Acc.");
          IncorrectMatchingPostingGroups[13] := CheckMatchingType(CustomerPostingGroup."Payment Tolerance Credit Acc.");
          IncorrectMatchingPostingGroups[14] := CheckMatchingType(CustomerPostingGroup."Bills Account");
          IncorrectMatchingPostingGroups[15] := CheckMatchingType(CustomerPostingGroup."Discted. Bills Acc.");
          IncorrectMatchingPostingGroups[16] := CheckMatchingType(CustomerPostingGroup."Bills on Collection Acc.");
          IncorrectMatchingPostingGroups[17] := CheckMatchingType(CustomerPostingGroup."Rejected Bills Acc.");
          IncorrectMatchingPostingGroups[18] := CheckMatchingType(CustomerPostingGroup."Finance Income Acc.");
          IncorrectMatchingPostingGroups[19] := CheckMatchingType(CustomerPostingGroup."Factoring for Collection Acc.");
          IncorrectMatchingPostingGroups[20] := CheckMatchingType(CustomerPostingGroup."Factoring for Discount Acc.");
          IncorrectMatchingPostingGroups[21] := CheckMatchingType(CustomerPostingGroup."Rejected Factoring Acc.");
          FOR I := 1 TO 21 DO
            IF IncorrectMatchingPostingGroups[I] THEN
              EXIT(IncorrectMatchingPostingGroups[I]);
        UNTIL CustomerPostingGroup.NEXT = 0;

      IF VendorPostingGroup.FINDSET THEN
        REPEAT
          Window.UPDATE(5,VendorPostingGroup.Code);
          IncorrectMatchingPostingGroups[1] := CheckMatchingType(VendorPostingGroup."Payables Account");
          IncorrectMatchingPostingGroups[2] := CheckMatchingType(VendorPostingGroup."Service Charge Acc.");
          IncorrectMatchingPostingGroups[3] := CheckMatchingType(VendorPostingGroup."Payment Disc. Debit Acc.");
          IncorrectMatchingPostingGroups[4] := CheckMatchingType(VendorPostingGroup."Invoice Rounding Account");
          IncorrectMatchingPostingGroups[5] := CheckMatchingType(VendorPostingGroup."Debit Curr. Appln. Rndg. Acc.");
          IncorrectMatchingPostingGroups[6] := CheckMatchingType(VendorPostingGroup."Credit Curr. Appln. Rndg. Acc.");
          IncorrectMatchingPostingGroups[7] := CheckMatchingType(VendorPostingGroup."Debit Rounding Account");
          IncorrectMatchingPostingGroups[8] := CheckMatchingType(VendorPostingGroup."Credit Rounding Account");
          IncorrectMatchingPostingGroups[9] := CheckMatchingType(VendorPostingGroup."Payment Disc. Credit Acc.");
          IncorrectMatchingPostingGroups[10] := CheckMatchingType(VendorPostingGroup."Payment Tolerance Debit Acc.");
          IncorrectMatchingPostingGroups[11] := CheckMatchingType(VendorPostingGroup."Payment Tolerance Credit Acc.");
          IncorrectMatchingPostingGroups[12] := CheckMatchingType(VendorPostingGroup."Bills Account");
          IncorrectMatchingPostingGroups[13] := CheckMatchingType(VendorPostingGroup."Bills in Payment Order Acc.");
          IncorrectMatchingPostingGroups[14] := CheckMatchingType(VendorPostingGroup."Invoices in  Pmt. Ord. Acc.");
          FOR I := 1 TO 14 DO
            IF IncorrectMatchingPostingGroups[I] THEN
              EXIT(IncorrectMatchingPostingGroups[I]);
        UNTIL VendorPostingGroup.NEXT = 0;

      IF InventoryPostingSetup.FINDSET THEN
        REPEAT
          Window.UPDATE(5,InventoryPostingSetup."Invt. Posting Group Code");
          IncorrectMatchingPostingGroups[1] := CheckMatchingType(InventoryPostingSetup."Inventory Account");
          IncorrectMatchingPostingGroups[2] := CheckMatchingType(InventoryPostingSetup."Inventory Account (Interim)");
          IncorrectMatchingPostingGroups[3] := CheckMatchingType(InventoryPostingSetup."WIP Account");
          IncorrectMatchingPostingGroups[4] := CheckMatchingType(InventoryPostingSetup."Material Variance Account");
          IncorrectMatchingPostingGroups[5] := CheckMatchingType(InventoryPostingSetup."Capacity Variance Account");
          IncorrectMatchingPostingGroups[6] := CheckMatchingType(InventoryPostingSetup."Mfg. Overhead Variance Account");
          IncorrectMatchingPostingGroups[7] := CheckMatchingType(InventoryPostingSetup."Cap. Overhead Variance Account");
          IncorrectMatchingPostingGroups[8] := CheckMatchingType(InventoryPostingSetup."Subcontracted Variance Account");
          FOR I := 1 TO 8 DO
            IF IncorrectMatchingPostingGroups[I] THEN
              EXIT(IncorrectMatchingPostingGroups[I]);
        UNTIL InventoryPostingSetup.NEXT = 0;

      IF JobPostingGroup.FINDSET THEN
        REPEAT
          Window.UPDATE(5,JobPostingGroup.Code);
          IncorrectMatchingPostingGroups[1] := CheckMatchingType(JobPostingGroup."WIP Costs Account");
          IncorrectMatchingPostingGroups[2] := CheckMatchingType(JobPostingGroup."WIP Accrued Costs Account");
          IncorrectMatchingPostingGroups[3] := CheckMatchingType(JobPostingGroup."Job Costs Applied Account");
          IncorrectMatchingPostingGroups[4] := CheckMatchingType(JobPostingGroup."Job Costs Adjustment Account");
          IncorrectMatchingPostingGroups[5] := CheckMatchingType(JobPostingGroup."G/L Expense Acc. (Contract)");
          IncorrectMatchingPostingGroups[6] := CheckMatchingType(JobPostingGroup."Job Sales Adjustment Account");
          IncorrectMatchingPostingGroups[7] := CheckMatchingType(JobPostingGroup."WIP Accrued Sales Account");
          IncorrectMatchingPostingGroups[8] := CheckMatchingType(JobPostingGroup."WIP Invoiced Sales Account");
          IncorrectMatchingPostingGroups[9] := CheckMatchingType(JobPostingGroup."Job Sales Applied Account");
          IncorrectMatchingPostingGroups[10] := CheckMatchingType(JobPostingGroup."Recognized Costs Account");
          IncorrectMatchingPostingGroups[11] := CheckMatchingType(JobPostingGroup."Recognized Sales Account");
          FOR I := 1 TO 11 DO
            IF IncorrectMatchingPostingGroups[I] THEN
              EXIT(IncorrectMatchingPostingGroups[I]);
        UNTIL JobPostingGroup.NEXT = 0;

      IF BankAccPostingGroup.FINDSET THEN
        REPEAT
          Window.UPDATE(5,BankAccPostingGroup.Code);
          IncorrectMatchingPostingGroups[1] := CheckMatchingType(BankAccPostingGroup."G/L Bank Account No.");
          IncorrectMatchingPostingGroups[2] := CheckMatchingType(BankAccPostingGroup."Liabs. for Disc. Bills Acc.");
          IncorrectMatchingPostingGroups[3] := CheckMatchingType(BankAccPostingGroup."Bank Services Acc.");
          IncorrectMatchingPostingGroups[4] := CheckMatchingType(BankAccPostingGroup."Discount Interest Acc.");
          IncorrectMatchingPostingGroups[5] := CheckMatchingType(BankAccPostingGroup."Rejection Expenses Acc.");
          IncorrectMatchingPostingGroups[6] := CheckMatchingType(BankAccPostingGroup."Liabs. for Factoring Acc.");
          FOR I := 1 TO 6 DO
            IF IncorrectMatchingPostingGroups[I] THEN
              EXIT(IncorrectMatchingPostingGroups[I]);
        UNTIL BankAccPostingGroup.NEXT = 0;

      IF FAPostingGroup.FINDSET THEN
        REPEAT
          Window.UPDATE(5,GenPostingSetup."Gen. Prod. Posting Group");
          IncorrectMatchingPostingGroups[1] := CheckMatchingType(FAPostingGroup."Acquisition Cost Account");
          IncorrectMatchingPostingGroups[2] := CheckMatchingType(FAPostingGroup."Accum. Depreciation Account");
          IncorrectMatchingPostingGroups[3] := CheckMatchingType(FAPostingGroup."Write-Down Account");
          IncorrectMatchingPostingGroups[4] := CheckMatchingType(FAPostingGroup."Appreciation Account");
          IncorrectMatchingPostingGroups[5] := CheckMatchingType(FAPostingGroup."Custom 1 Account");
          IncorrectMatchingPostingGroups[6] := CheckMatchingType(FAPostingGroup."Custom 2 Account");
          IncorrectMatchingPostingGroups[7] := CheckMatchingType(FAPostingGroup."Acq. Cost Acc. on Disposal");
          IncorrectMatchingPostingGroups[8] := CheckMatchingType(FAPostingGroup."Accum. Depr. Acc. on Disposal");
          IncorrectMatchingPostingGroups[9] := CheckMatchingType(FAPostingGroup."Write-Down Acc. on Disposal");
          IncorrectMatchingPostingGroups[10] := CheckMatchingType(FAPostingGroup."Appreciation Acc. on Disposal");
          IncorrectMatchingPostingGroups[11] := CheckMatchingType(FAPostingGroup."Custom 1 Account on Disposal");
          IncorrectMatchingPostingGroups[12] := CheckMatchingType(FAPostingGroup."Custom 2 Account on Disposal");
          IncorrectMatchingPostingGroups[13] := CheckMatchingType(FAPostingGroup."Gains Acc. on Disposal");
          IncorrectMatchingPostingGroups[14] := CheckMatchingType(FAPostingGroup."Losses Acc. on Disposal");
          IncorrectMatchingPostingGroups[15] := CheckMatchingType(FAPostingGroup."Book Val. Acc. on Disp. (Gain)");
          IncorrectMatchingPostingGroups[16] := CheckMatchingType(FAPostingGroup."Sales Acc. on Disp. (Gain)");
          IncorrectMatchingPostingGroups[17] := CheckMatchingType(FAPostingGroup."Write-Down Bal. Acc. on Disp.");
          IncorrectMatchingPostingGroups[18] := CheckMatchingType(FAPostingGroup."Apprec. Bal. Acc. on Disp.");
          IncorrectMatchingPostingGroups[19] := CheckMatchingType(FAPostingGroup."Custom 1 Bal. Acc. on Disposal");
          IncorrectMatchingPostingGroups[20] := CheckMatchingType(FAPostingGroup."Custom 2 Bal. Acc. on Disposal");
          IncorrectMatchingPostingGroups[21] := CheckMatchingType(FAPostingGroup."Maintenance Expense Account");
          IncorrectMatchingPostingGroups[22] := CheckMatchingType(FAPostingGroup."Maintenance Bal. Acc.");
          IncorrectMatchingPostingGroups[23] := CheckMatchingType(FAPostingGroup."Acquisition Cost Bal. Acc.");
          IncorrectMatchingPostingGroups[24] := CheckMatchingType(FAPostingGroup."Depreciation Expense Acc.");
          IncorrectMatchingPostingGroups[25] := CheckMatchingType(FAPostingGroup."Write-Down Expense Acc.");
          IncorrectMatchingPostingGroups[26] := CheckMatchingType(FAPostingGroup."Appreciation Bal. Account");
          IncorrectMatchingPostingGroups[27] := CheckMatchingType(FAPostingGroup."Custom 1 Expense Acc.");
          IncorrectMatchingPostingGroups[28] := CheckMatchingType(FAPostingGroup."Custom 2 Expense Acc.");
          IncorrectMatchingPostingGroups[29] := CheckMatchingType(FAPostingGroup."Sales Bal. Acc.");
          IncorrectMatchingPostingGroups[30] := CheckMatchingType(FAPostingGroup."Sales Acc. on Disp. (Loss)");
          IncorrectMatchingPostingGroups[31] := CheckMatchingType(FAPostingGroup."Book Val. Acc. on Disp. (Loss)");
          FOR I := 1 TO 31 DO
            IF IncorrectMatchingPostingGroups[I] THEN
              EXIT(IncorrectMatchingPostingGroups[I]);
        UNTIL FAPostingGroup.NEXT = 0;

      IF VATPostingSetup.FINDSET THEN
        REPEAT
          Window.UPDATE(5,VATPostingSetup."VAT Prod. Posting Group");
          IncorrectMatchingPostingGroups[1] := CheckMatchingType(VATPostingSetup."Sales VAT Account");
          IncorrectMatchingPostingGroups[2] := CheckMatchingType(VATPostingSetup."Sales VAT Unreal. Account");
          IncorrectMatchingPostingGroups[3] := CheckMatchingType(VATPostingSetup."Purchase VAT Account");
          IncorrectMatchingPostingGroups[4] := CheckMatchingType(VATPostingSetup."Purch. VAT Unreal. Account");
          IncorrectMatchingPostingGroups[5] := CheckMatchingType(VATPostingSetup."Reverse Chrg. VAT Acc.");
          IncorrectMatchingPostingGroups[6] := CheckMatchingType(VATPostingSetup."Reverse Chrg. VAT Unreal. Acc.");
          FOR I := 1 TO 6 DO
            IF IncorrectMatchingPostingGroups[I] THEN
              EXIT(IncorrectMatchingPostingGroups[I]);
        UNTIL VATPostingSetup.NEXT = 0;
    END;

    PROCEDURE CheckGLBudgetEntries@1100016() : Boolean;
    VAR
      GLBudgetEntries@1100000 : Record 96;
      IncorrectMatchingGLBudgetEntry@1100001 : Boolean;
    BEGIN
      IncorrectMatchingGLBudgetEntry := FALSE;
      IF GLBudgetEntries.FINDSET THEN
        REPEAT
          Window.UPDATE(6,GLBudgetEntries."Entry No.");
          IncorrectMatchingGLBudgetEntry := CheckMatchingType(GLBudgetEntries."G/L Account No.");
          IF IncorrectMatchingGLBudgetEntry THEN
            EXIT(TRUE);
        UNTIL GLBudgetEntries.NEXT = 0;
    END;

    PROCEDURE CheckAnalysisViewEntries@1100017() : Boolean;
    VAR
      AnalysisViewEntry@1100000 : Record 365;
      IncorrectMatchingAnViewEntry@1100001 : Boolean;
    BEGIN
      IncorrectMatchingAnViewEntry := FALSE;
      IF AnalysisViewEntry.FINDSET THEN
        REPEAT
          Window.UPDATE(7,AnalysisViewEntry."Entry No.");
          IncorrectMatchingAnViewEntry := CheckMatchingType(AnalysisViewEntry."G/L Account No.");
          IF IncorrectMatchingAnViewEntry THEN
            EXIT(TRUE);
        UNTIL AnalysisViewEntry.NEXT = 0;
    END;

    PROCEDURE CheckAnalysisViewBudgetEntries@1100018() : Boolean;
    VAR
      AnalysisViewBudgetEntry@1100000 : Record 366;
      IncorrectMatchAnViewBudgEntry@1100001 : Boolean;
    BEGIN
      IncorrectMatchAnViewBudgEntry := FALSE;
      IF AnalysisViewBudgetEntry.FINDSET THEN
        REPEAT
          Window.UPDATE(8,AnalysisViewBudgetEntry."Entry No.");
          IncorrectMatchAnViewBudgEntry := CheckMatchingType(AnalysisViewBudgetEntry."G/L Account No.");
          IF IncorrectMatchAnViewBudgEntry THEN
            EXIT(TRUE);
        UNTIL AnalysisViewBudgetEntry.NEXT = 0;
    END;

    PROCEDURE CheckMatchingType@1100019(Acc@1100000 : Code[20]) : Boolean;
    VAR
      GLAccEqTool@1100001 : Record 10720;
    BEGIN
      IF Acc <> '' THEN BEGIN
        GLAccEqTool.SETCURRENTKEY("Last Run Date",Implement);
        GLAccEqTool.SETRANGE(Implement,TRUE);
        GLAccEqTool.SETRANGE(GLAccEqTool."No.",Acc);
        IF GLAccEqTool.FINDFIRST THEN
          IF NOT (GLAccEqTool."Matching Type" = GLAccEqTool."Matching Type"::"1-1") THEN
            EXIT(TRUE);
      END;
    END;

    PROCEDURE ImplementEquivInPostGLEntries@1100020(FirstImplementation@1100000 : Boolean);
    VAR
      GLEntry@1100001 : Record 17;
      GLEntry2@1100002 : Record 17;
    BEGIN

      GLAccEqTool.SETRANGE(GLAccEqTool."Account Type",GLAccEqTool."Account Type"::Posting);
      GLAccEqTool.SETRANGE(Implement,TRUE);

      IF GLAccEqTool.FINDFIRST THEN
        REPEAT
          GLEntry.SETCURRENTKEY("G/L Account No.","Posting Date");
          IF FirstImplementation THEN
            GLEntry.SETRANGE(GLEntry."G/L Account No.",GLAccEqTool."No.")
          ELSE
            GLEntry.SETRANGE(GLEntry."Old G/L Account No.",GLAccEqTool."No.");
          IF GLEntry.FINDSET THEN
            REPEAT
              Window.UPDATE(1,GLEntry."Entry No.");
              GLEntry2 := GLEntry;
              IF NOT GLEntry2.Updated THEN BEGIN
                IF FirstImplementation THEN
                  GLEntry2."Old G/L Account No." := GLEntry2."G/L Account No.";
                CASE GLAccEqTool."Matching Type" OF
                  GLAccEqTool."Matching Type"::"1-1":
                    BEGIN
                      GLEntry2."G/L Account No." := GLAccEqTool."New No.";
                      IF GLEntry2."Old G/L Account No." <> GLAccEqTool."New No." THEN BEGIN
                        LogFileData := FORMAT(TODAY) + ' ' + FORMAT(TIME) + ' ' + Text1100060 + ' - ' +
                        GLEntry2.FIELDCAPTION("Entry No.") + ': ' + FORMAT(GLEntry2."Entry No.") +
                          ' - ' + GLEntry2.FIELDCAPTION("Old G/L Account No.") + ': ' +
                          GLEntry2."Old G/L Account No." + ' - ' + GLEntry2.FIELDCAPTION("New G/L Account No.") + ': ' +
                          GLAccEqTool."New No.";
                        LogFile.WRITE(LogFileData);
                      END;
                    END;
                  GLAccEqTool."Matching Type"::"1-n":
                    BEGIN
                      GLEntry2."G/L Account No." := GLEntry2."New G/L Account No.";
                      IF GLEntry2."Old G/L Account No." <> GLAccEqTool."New No." THEN BEGIN
                        LogFileData := FORMAT(TODAY) + ' ' + FORMAT(TIME) + ' ' + Text1100060 + ' - ' +
                        GLEntry2.FIELDCAPTION("Entry No.") + ': ' + FORMAT(GLEntry2."Entry No.") +
                          ' - ' + GLEntry2.FIELDCAPTION("Old G/L Account No.") + ': ' +
                          GLEntry2."Old G/L Account No." + ' - ' + GLEntry2.FIELDCAPTION("New G/L Account No.") + ': ' +
                          GLEntry2."New G/L Account No.";
                        LogFile.WRITE(LogFileData);
                      END;
                    END;
                END;
                GLEntry2.Updated := TRUE;
                GLEntry2.MODIFY;
              END;
            UNTIL GLEntry.NEXT = 0;
        UNTIL GLAccEqTool.NEXT = 0;
      ClearUpdate(DATABASE::"G/L Entry",10722);

      // Check for Deleted Accounts...
      GLEntry.RESET;
      GLEntry.SETCURRENTKEY("G/L Account No.","Posting Date");
      GLEntry.SETRANGE(GLEntry."G/L Account No.",'');
      IF GLEntry.FINDSET THEN
        REPEAT
          GLEntry2 := GLEntry;
          Window.UPDATE(1,GLEntry2."Entry No.");
          IF GLAccEquivToolSetup.GET THEN BEGIN
            GLEntry2."Old G/L Account No." := GLAccEquivToolSetup."Delete Acc. Old Chart of Acc.";
            GLEntry2."G/L Account No." := GLAccEquivToolSetup."Delete Acc. New Chart of Acc.";
            GLEntry2.MODIFY;
            LogFileData := FORMAT(TODAY) + ' ' + FORMAT(TIME) + ' ' + Text1100083 + ' - ' + GLEntry2.FIELDCAPTION("Entry No.") +
              ': ' + FORMAT(GLEntry2."Entry No.") + ' - ' + GLEntry2.FIELDCAPTION("Old G/L Account No.") + ': ' +
              GLEntry2."Old G/L Account No." + ' - ' + GLEntry2.FIELDCAPTION("New G/L Account No.") + ': ' +
              GLEntry2."New G/L Account No.";
            LogFile.WRITE(LogFileData);
          END;
        UNTIL GLEntry.NEXT = 0;
    END;

    PROCEDURE ImplementEquivInGLBudgEntries@1100021(FirstImplementation@1100000 : Boolean);
    VAR
      GLBudgetEntry@1100001 : Record 96;
      GLBudgetEntry2@1100002 : Record 96;
    BEGIN

      GLAccEqTool.SETRANGE("Account Type",GLAccEqTool."Account Type"::Posting);
      GLAccEqTool.SETRANGE(Implement, TRUE);

      IF GLBudgetEntry.FINDFIRST THEN
        IF GLAccEqTool.FINDSET THEN
          REPEAT
            GLBudgetEntry.SETCURRENTKEY("Budget Name","G/L Account No.",Date);
            IF FirstImplementation THEN
              GLBudgetEntry.SETRANGE("G/L Account No.",GLAccEqTool."No.")
            ELSE
              GLBudgetEntry.SETRANGE("Old G/L Account No.",GLAccEqTool."No.");
            IF GLBudgetEntry.FINDSET(TRUE,FALSE) THEN
              REPEAT
                GLBudgetEntry2 := GLBudgetEntry;
                Window.UPDATE(2,GLBudgetEntry2."Entry No.");
                IF FirstImplementation THEN
                  GLBudgetEntry2."Old G/L Account No." := GLBudgetEntry2."G/L Account No.";
                GLBudgetEntry2."G/L Account No." := GLAccEqTool."New No.";
                GLBudgetEntry2.MODIFY;
                IF GLBudgetEntry2."Old G/L Account No." <> GLAccEqTool."New No." THEN BEGIN
                  LogFileData := FORMAT(TODAY) + ' ' + FORMAT(TIME) + ' ' + GLBudgetEntry2.TABLECAPTION + ' - ' +
                    GLBudgetEntry2.FIELDCAPTION("Entry No.") + ': ' + FORMAT(GLBudgetEntry2."Entry No.") + ' - ' +
                    GLBudgetEntry2.FIELDCAPTION("Old G/L Account No.") + ': ' + GLBudgetEntry2."Old G/L Account No." + ' - ' +
                    GLBudgetEntry2.FIELDCAPTION("G/L Account No.") + ': ' + GLAccEqTool."New No.";
                  LogFile.WRITE(LogFileData);
                END;
              UNTIL GLBudgetEntry.NEXT = 0;
          UNTIL GLAccEqTool.NEXT = 0;

      ClearUpdate(DATABASE::"G/L Budget Entry", 10721);
    END;

    PROCEDURE ImplEqInAnaysisViewEntries@1100022(FirstImplementation@1100000 : Boolean);
    VAR
      AnalysisViewEntry@1100001 : Record 365;
      AnalysisViewEntry2@1100002 : Record 365;
    BEGIN

      GLAccEqTool.SETRANGE("Account Type",GLAccEqTool."Account Type"::Posting);
      GLAccEqTool.SETRANGE(Implement, TRUE);

      IF AnalysisViewEntry.FINDFIRST THEN
        IF GLAccEqTool.FINDSET THEN
          REPEAT
            IF FirstImplementation THEN
              AnalysisViewEntry.SETRANGE("G/L Account No.",GLAccEqTool."No.")
            ELSE
              AnalysisViewEntry.SETRANGE("Old G/L Account No.",GLAccEqTool."No.");
            IF AnalysisViewEntry.FINDSET THEN
              REPEAT
                AnalysisViewEntry2 := AnalysisViewEntry;
                IF NOT AnalysisViewEntry2.Updated THEN BEGIN
                  Window.UPDATE(3,AnalysisViewEntry2."Entry No.");
                  // AnalysisViewEntry2."Old G/L Account No." := AnalysisViewEntry2."G/L Account No."; // ES0002
                  AnalysisViewEntry2.RENAME(AnalysisViewEntry2."Analysis View Code",GLAccEqTool."New No.",
                  AnalysisViewEntry2."Dimension 1 Value Code",AnalysisViewEntry2."Dimension 2 Value Code",
                    AnalysisViewEntry2."Dimension 3 Value Code",AnalysisViewEntry2."Dimension 4 Value Code",
                    AnalysisViewEntry2."Business Unit Code",AnalysisViewEntry2."Posting Date",AnalysisViewEntry2."Entry No.",
                    GLAccEqTool."No.");
                    AnalysisViewEntry2.Updated := TRUE;
                    AnalysisViewEntry2.MODIFY;
                  IF AnalysisViewEntry2."Old G/L Account No." <> GLAccEqTool."New No." THEN BEGIN
                    LogFileData := FORMAT(TODAY) + ' ' + FORMAT(TIME) + ' ' + AnalysisViewEntry2.TABLECAPTION + ' - ' +
                      AnalysisViewEntry2.FIELDCAPTION("Entry No.") + ': ' + FORMAT(AnalysisViewEntry2."Entry No.") + ' - ' +
                      AnalysisViewEntry2.FIELDCAPTION("Old G/L Account No.") + ': ' + AnalysisViewEntry2."Old G/L Account No." + ' - ' +
                      AnalysisViewEntry2.FIELDCAPTION("G/L Account No.") + ': ' + GLAccEqTool."New No.";
                    LogFile.WRITE(LogFileData);
                  END;
                END;
              UNTIL AnalysisViewEntry.NEXT = 0;
          UNTIL GLAccEqTool.NEXT = 0;

      ClearUpdate(DATABASE::"Analysis View Entry", 10721);
    END;

    PROCEDURE ImplEqInAnaysisViewBudgEntries@1100023(FirstImplementation@1100000 : Boolean);
    VAR
      AnalysisViewBudgetEntry@1100001 : Record 366;
      AnalysisViewBudgetEntry2@1100002 : Record 366;
    BEGIN

      GLAccEqTool.SETRANGE("Account Type",GLAccEqTool."Account Type"::Posting);
      GLAccEqTool.SETRANGE(Implement, TRUE);

      IF AnalysisViewBudgetEntry.FINDFIRST THEN
        IF GLAccEqTool.FINDSET THEN
          REPEAT
            IF FirstImplementation THEN
              AnalysisViewBudgetEntry.SETRANGE("G/L Account No.",GLAccEqTool."No.")
            ELSE
              AnalysisViewBudgetEntry.SETRANGE("Old G/L Account No.",GLAccEqTool."No.");
            IF AnalysisViewBudgetEntry.FINDSET THEN
              REPEAT
                AnalysisViewBudgetEntry2 := AnalysisViewBudgetEntry;
                IF NOT AnalysisViewBudgetEntry2.Updated THEN BEGIN
                  Window.UPDATE(4,AnalysisViewBudgetEntry2."Entry No.");
                  // AnalysisViewBudgetEntry2."Old G/L Account No." := AnalysisViewBudgetEntry2."G/L Account No."; // ES0002
                  AnalysisViewBudgetEntry2.RENAME(
                    AnalysisViewBudgetEntry2."Analysis View Code",
                    AnalysisViewBudgetEntry2."Budget Name",
                    GLAccEqTool."New No.",
                    AnalysisViewBudgetEntry2."Dimension 1 Value Code",
                    AnalysisViewBudgetEntry2."Dimension 2 Value Code",
                    AnalysisViewBudgetEntry2."Dimension 3 Value Code",
                    AnalysisViewBudgetEntry2."Dimension 4 Value Code",
                    AnalysisViewBudgetEntry2."Business Unit Code",
                    AnalysisViewBudgetEntry2."Posting Date",
                    AnalysisViewBudgetEntry2."Entry No.",
                    GLAccEqTool."No.");
                  AnalysisViewBudgetEntry2.Updated := TRUE;
                  AnalysisViewBudgetEntry2.MODIFY;
                  IF AnalysisViewBudgetEntry2."Old G/L Account No." <> GLAccEqTool."New No." THEN BEGIN
                    LogFileData := FORMAT(TODAY) + ' ' + FORMAT(TIME) + ' ' + AnalysisViewBudgetEntry2.TABLECAPTION + ' - ' +
                      AnalysisViewBudgetEntry2.FIELDCAPTION("Entry No.") + ': ' + FORMAT(AnalysisViewBudgetEntry2."Entry No.") + ' - ' +
                      AnalysisViewBudgetEntry2.FIELDCAPTION("Old G/L Account No.") + ': ' +
                      AnalysisViewBudgetEntry2."Old G/L Account No." + ' - ' +
                      AnalysisViewBudgetEntry2.FIELDCAPTION("G/L Account No.") + ': ' + GLAccEqTool."New No.";
                    LogFile.WRITE(LogFileData);
                  END;
                END;
              UNTIL AnalysisViewBudgetEntry.NEXT = 0;
          UNTIL GLAccEqTool.NEXT = 0;

      ClearUpdate(DATABASE::"Analysis View Budget Entry", 10721);
    END;

    PROCEDURE ReplaceCOAWithNewCOA@1100024();
    VAR
      GLAcc@1100000 : Record 15;
      NewGLAcc@1100001 : Record 10722;
    BEGIN
      GLAcc.DELETEALL;
      RemoveDataFromRelatedTables;
      IF NewGLAcc.FINDSET THEN BEGIN
        REPEAT
          GLAcc.INIT;
          GLAcc.TRANSFERFIELDS(NewGLAcc);
          GLAcc.INSERT;
          CopyDimensions(NewGLAcc."No.",DATABASE::"New G/L Account",DATABASE::"G/L Account");
          CopyExtendedTexts(NewGLAcc."No.",DATABASE::"New G/L Account",DATABASE::"G/L Account");
          CopyComments(NewGLAcc."No.",DATABASE::"New G/L Account",DATABASE::"G/L Account");
          Window.UPDATE(5,GLAcc."No.");
        UNTIL NewGLAcc.NEXT = 0;
        LogFileData := FORMAT(TODAY) + ' ' + FORMAT(TIME) + ' ' +  Text1100061;
        LogFile.WRITE(LogFileData);
      END;
    END;

    PROCEDURE UpdateCOAWithNewCOA@1100025();
    VAR
      GLAcc@1100000 : Record 15;
      NewGLAcc@1100001 : Record 10722;
    BEGIN
      IF NewGLAcc.FINDSET THEN
        REPEAT
          IF NOT GLAcc.GET(NewGLAcc."No.") THEN BEGIN
            GLAcc.INIT;
            GLAcc.TRANSFERFIELDS(NewGLAcc);
            GLAcc.INSERT;
            CopyDimensions(NewGLAcc."No.",DATABASE::"New G/L Account",DATABASE::"G/L Account");
            CopyExtendedTexts(NewGLAcc."No.",DATABASE::"New G/L Account",DATABASE::"G/L Account");
            CopyComments(NewGLAcc."No.",DATABASE::"New G/L Account",DATABASE::"G/L Account");
            Window.UPDATE(5,GLAcc."No.");
            LogFileData := FORMAT(TODAY) + ' ' + FORMAT(TIME) + ' ' +  Text1100084 + GLAcc."No.";
            LogFile.WRITE(LogFileData);
          END;
        UNTIL NewGLAcc.NEXT = 0;
    END;

    PROCEDURE ImplementEquivInPostingGroups@1100026();
    BEGIN
      ImplementNewAcc(DATABASE::"General Posting Setup",10);
      ImplementNewAcc(DATABASE::"General Posting Setup",11);
      ImplementNewAcc(DATABASE::"General Posting Setup",12);
      ImplementNewAcc(DATABASE::"General Posting Setup",13);
      ImplementNewAcc(DATABASE::"General Posting Setup",14);
      ImplementNewAcc(DATABASE::"General Posting Setup",15);
      ImplementNewAcc(DATABASE::"General Posting Setup",16);
      ImplementNewAcc(DATABASE::"General Posting Setup",17);
      ImplementNewAcc(DATABASE::"General Posting Setup",18);
      ImplementNewAcc(DATABASE::"General Posting Setup",19);
      ImplementNewAcc(DATABASE::"General Posting Setup",24);
      ImplementNewAcc(DATABASE::"General Posting Setup",25);
      ImplementNewAcc(DATABASE::"General Posting Setup",27);
      ImplementNewAcc(DATABASE::"General Posting Setup",28);
      ImplementNewAcc(DATABASE::"General Posting Setup",30);
      ImplementNewAcc(DATABASE::"General Posting Setup",31);
      ImplementNewAcc(DATABASE::"General Posting Setup",32);
      ImplementNewAcc(DATABASE::"General Posting Setup",33);
      ImplementNewAcc(DATABASE::"General Posting Setup",34);
      ImplementNewAcc(DATABASE::"General Posting Setup",35);
      ImplementNewAcc(DATABASE::"General Posting Setup",36);
      ImplementNewAcc(DATABASE::"General Posting Setup",37);
      ImplementNewAcc(DATABASE::"General Posting Setup",5600);
      ImplementNewAcc(DATABASE::"General Posting Setup",5801);
      ImplementNewAcc(DATABASE::"General Posting Setup",5803);
      ImplementNewAcc(DATABASE::"General Posting Setup",99000752);
      ImplementNewAcc(DATABASE::"General Posting Setup",99000753);
      ImplementNewAcc(DATABASE::"General Posting Setup",99000754);

      ImplementNewAcc(DATABASE::"Customer Posting Group",2);
      ImplementNewAcc(DATABASE::"Customer Posting Group",7);
      ImplementNewAcc(DATABASE::"Customer Posting Group",8);
      ImplementNewAcc(DATABASE::"Customer Posting Group",9);
      ImplementNewAcc(DATABASE::"Customer Posting Group",10);
      ImplementNewAcc(DATABASE::"Customer Posting Group",11);
      ImplementNewAcc(DATABASE::"Customer Posting Group",12);
      ImplementNewAcc(DATABASE::"Customer Posting Group",13);
      ImplementNewAcc(DATABASE::"Customer Posting Group",14);
      ImplementNewAcc(DATABASE::"Customer Posting Group",15);
      ImplementNewAcc(DATABASE::"Customer Posting Group",16);
      ImplementNewAcc(DATABASE::"Customer Posting Group",17);
      ImplementNewAcc(DATABASE::"Customer Posting Group",18);
      ImplementNewAcc(DATABASE::"Customer Posting Group",7000000);
      ImplementNewAcc(DATABASE::"Customer Posting Group",7000001);
      ImplementNewAcc(DATABASE::"Customer Posting Group",7000002);
      ImplementNewAcc(DATABASE::"Customer Posting Group",7000003);
      ImplementNewAcc(DATABASE::"Customer Posting Group",7000004);
      ImplementNewAcc(DATABASE::"Customer Posting Group",7000005);
      ImplementNewAcc(DATABASE::"Customer Posting Group",7000006);
      ImplementNewAcc(DATABASE::"Customer Posting Group",7000007);

      ImplementNewAcc(DATABASE::"Vendor Posting Group",2);
      ImplementNewAcc(DATABASE::"Vendor Posting Group",7);
      ImplementNewAcc(DATABASE::"Vendor Posting Group",8);
      ImplementNewAcc(DATABASE::"Vendor Posting Group",9);
      ImplementNewAcc(DATABASE::"Vendor Posting Group",10);
      ImplementNewAcc(DATABASE::"Vendor Posting Group",11);
      ImplementNewAcc(DATABASE::"Vendor Posting Group",12);
      ImplementNewAcc(DATABASE::"Vendor Posting Group",13);
      ImplementNewAcc(DATABASE::"Vendor Posting Group",16);
      ImplementNewAcc(DATABASE::"Vendor Posting Group",17);
      ImplementNewAcc(DATABASE::"Vendor Posting Group",18);
      ImplementNewAcc(DATABASE::"Vendor Posting Group",7000000);
      ImplementNewAcc(DATABASE::"Vendor Posting Group",7000001);
      ImplementNewAcc(DATABASE::"Vendor Posting Group",7000002);

      ImplementNewAcc(DATABASE::"Inventory Posting Setup",6);
      ImplementNewAcc(DATABASE::"Inventory Posting Setup",5800);
      ImplementNewAcc(DATABASE::"Inventory Posting Setup",99000750);
      ImplementNewAcc(DATABASE::"Inventory Posting Setup",99000753);
      ImplementNewAcc(DATABASE::"Inventory Posting Setup",99000754);
      ImplementNewAcc(DATABASE::"Inventory Posting Setup",99000755);
      ImplementNewAcc(DATABASE::"Inventory Posting Setup",99000756);
      ImplementNewAcc(DATABASE::"Inventory Posting Setup",99000757);

      ImplementNewAcc(DATABASE::"Job Posting Group",2);
      ImplementNewAcc(DATABASE::"Job Posting Group",3);
      ImplementNewAcc(DATABASE::"Job Posting Group",4);
      ImplementNewAcc(DATABASE::"Job Posting Group",5);
      ImplementNewAcc(DATABASE::"Job Posting Group",6);
      ImplementNewAcc(DATABASE::"Job Posting Group",7);
      ImplementNewAcc(DATABASE::"Job Posting Group",8);
      ImplementNewAcc(DATABASE::"Job Posting Group",9);
      ImplementNewAcc(DATABASE::"Job Posting Group",10);
      ImplementNewAcc(DATABASE::"Job Posting Group",11);
      ImplementNewAcc(DATABASE::"Job Posting Group",12);

      ImplementNewAcc(DATABASE::"Bank Account Posting Group",2);
      ImplementNewAcc(DATABASE::"Bank Account Posting Group",7000000);
      ImplementNewAcc(DATABASE::"Bank Account Posting Group",7000001);
      ImplementNewAcc(DATABASE::"Bank Account Posting Group",7000002);
      ImplementNewAcc(DATABASE::"Bank Account Posting Group",7000003);
      ImplementNewAcc(DATABASE::"Bank Account Posting Group",7000004);

      ImplementNewAcc(DATABASE::"FA Posting Group",2);
      ImplementNewAcc(DATABASE::"FA Posting Group",3);
      ImplementNewAcc(DATABASE::"FA Posting Group",4);
      ImplementNewAcc(DATABASE::"FA Posting Group",5);
      ImplementNewAcc(DATABASE::"FA Posting Group",6);
      ImplementNewAcc(DATABASE::"FA Posting Group",7);
      ImplementNewAcc(DATABASE::"FA Posting Group",8);
      ImplementNewAcc(DATABASE::"FA Posting Group",9);
      ImplementNewAcc(DATABASE::"FA Posting Group",10);
      ImplementNewAcc(DATABASE::"FA Posting Group",11);
      ImplementNewAcc(DATABASE::"FA Posting Group",12);
      ImplementNewAcc(DATABASE::"FA Posting Group",13);
      ImplementNewAcc(DATABASE::"FA Posting Group",14);
      ImplementNewAcc(DATABASE::"FA Posting Group",15);
      ImplementNewAcc(DATABASE::"FA Posting Group",16);
      ImplementNewAcc(DATABASE::"FA Posting Group",17);
      ImplementNewAcc(DATABASE::"FA Posting Group",18);
      ImplementNewAcc(DATABASE::"FA Posting Group",19);
      ImplementNewAcc(DATABASE::"FA Posting Group",20);
      ImplementNewAcc(DATABASE::"FA Posting Group",21);
      ImplementNewAcc(DATABASE::"FA Posting Group",22);
      ImplementNewAcc(DATABASE::"FA Posting Group",23);
      ImplementNewAcc(DATABASE::"FA Posting Group",24);
      ImplementNewAcc(DATABASE::"FA Posting Group",25);
      ImplementNewAcc(DATABASE::"FA Posting Group",26);
      ImplementNewAcc(DATABASE::"FA Posting Group",27);
      ImplementNewAcc(DATABASE::"FA Posting Group",28);
      ImplementNewAcc(DATABASE::"FA Posting Group",29);
      ImplementNewAcc(DATABASE::"FA Posting Group",30);
      ImplementNewAcc(DATABASE::"FA Posting Group",43);
      ImplementNewAcc(DATABASE::"FA Posting Group",44);

      ImplementNewAcc(DATABASE::"VAT Posting Setup",7);
      ImplementNewAcc(DATABASE::"VAT Posting Setup",8);
      ImplementNewAcc(DATABASE::"VAT Posting Setup",9);
      ImplementNewAcc(DATABASE::"VAT Posting Setup",10);
      ImplementNewAcc(DATABASE::"VAT Posting Setup",11);
      ImplementNewAcc(DATABASE::"VAT Posting Setup",12);
    END;

    PROCEDURE ImplementNewAcc@1100027(TableID@1100000 : Integer;FieldNo@1100001 : Integer);
    VAR
      GLAcct@1100002 : Record 15;
      RecRef@1100003 : RecordRef;
      FldRef@1100004 : FieldRef;
    BEGIN
      GLAccEqTool.SETCURRENTKEY("Last Run Date",Implement);
      GLAccEqTool.SETRANGE(Implement,TRUE);

      RecRef.OPEN(TableID);

      IF RecRef.FINDSET(TRUE, FALSE) THEN
        REPEAT
          FldRef := RecRef.FIELD(FieldNo);
          GLAccEqTool.SETRANGE(GLAccEqTool."No.",FORMAT(FldRef.VALUE));
          IF GLAccEqTool.FINDFIRST THEN
            IF (GLAccEqTool."New No." <> GLAccEqTool."No.") AND
               (GLAccEqTool."New No." <> '')
            THEN BEGIN
              FldRef.VALUE := GLAccEqTool."New No.";
              RecRef.MODIFY;
              InsertLogOfChanges(RecRef,FldRef,TableID, FieldNo,GLAccEqTool."No.");
            END;
        UNTIL RecRef.NEXT = 0;
    END;

    PROCEDURE InsertLogOfChanges@1100028(RecRef@1100000 : RecordRef;FldRef@1100001 : FieldRef;TableID@1100002 : Integer;FieldNo@1100003 : Integer;OldAcc@1100004 : Code[20]);
    VAR
      FldRef1@1100005 : FieldRef;
      FldRef2@1100006 : FieldRef;
    BEGIN
      FldRef1 := RecRef.FIELD(1);
      FldRef2 := RecRef.FIELD(2);

      IF TableID IN [252,325,5813] THEN BEGIN
        LogFileData := FORMAT(TODAY) + ' ' + FORMAT(TIME) + ' ' + RecRef.NAME + ' - ' +
          FldRef.CAPTION + ': ' + FldRef1.CAPTION + ': ' + FORMAT(FldRef1.VALUE) + ' - ' +
          FldRef2.CAPTION + ': ' + FORMAT(FldRef2.VALUE) + ' - ' +
          Text1100062 + OldAcc + ' - ' + Text1100063 + FORMAT(FldRef.VALUE);
      END ELSE BEGIN
        LogFileData := FORMAT(TODAY) + ' ' + FORMAT(TIME) + ' ' + RecRef.NAME + ' - ' +
          FldRef.CAPTION + ': ' + FldRef1.CAPTION + ': ' + FORMAT(FldRef1.VALUE) + ' - ' +
          Text1100062 + OldAcc + ' - ' + Text1100063 + FORMAT(FldRef.VALUE);
      END;
      LogFile.WRITE(LogFileData);
    END;

    PROCEDURE InsertHistoryOfEquivApplied@1100029();
    VAR
      HistoryOfEquivCOA@1100000 : Record 10724;
      GLEntry@1100001 : Record 17;
      EntryNo@1100002 : Integer;
    BEGIN
      GLAccEqTool.RESET;
      GLAccEqTool.SETFILTER(GLAccEqTool."Account Type",'=%1',GLAccEqTool."Account Type"::Posting);
      GLAccEqTool.SETRANGE(Implement,TRUE);
      IF GLAccEqTool.FINDFIRST THEN BEGIN
        IF HistoryOfEquivCOA.FINDFIRST THEN BEGIN
          HistoryOfEquivCOA.FINDLAST;
          EntryNo := HistoryOfEquivCOA."Entry No.";
        END ELSE
          EntryNo := 0;
        REPEAT
          IF GLAccEqTool."Matching Type" = GLAccEqTool."Matching Type"::"1-1" THEN BEGIN
            HistoryOfEquivCOA.INIT;
            HistoryOfEquivCOA."Entry No." := EntryNo + 1;
            HistoryOfEquivCOA."Old G/L Account No." := GLAccEqTool."No.";
            HistoryOfEquivCOA."New G/L Account No." := GLAccEqTool."New No.";
            HistoryOfEquivCOA."Date Runned" := TODAY;
            HistoryOfEquivCOA."Old Acc. Pre Impl. Balance" := CalculateBalanceHistoryEqApp(GLAccEqTool."No.",FALSE);
            HistoryOfEquivCOA."New Acc. Post Impl. Balance" := CalculateBalanceHistoryEqApp(GLAccEqTool."New No.",TRUE);
            HistoryOfEquivCOA.INSERT;
            Window.UPDATE(7,HistoryOfEquivCOA."Entry No.");
            EntryNo := HistoryOfEquivCOA."Entry No.";
          END ELSE BEGIN
            GLEntry.SETRANGE(GLEntry."Old G/L Account No.",GLAccEqTool."No.");
            IF GLEntry.FINDSET THEN
              REPEAT
                HistoryOfEquivCOA.INIT;
                HistoryOfEquivCOA."Entry No." := EntryNo + 1;
                HistoryOfEquivCOA."Old G/L Account No." := GLEntry."Old G/L Account No.";
                HistoryOfEquivCOA."New G/L Account No." := GLEntry."New G/L Account No.";
                HistoryOfEquivCOA."Date Runned" := TODAY;
                HistoryOfEquivCOA."Old Acc. Pre Impl. Balance" := CalculateBalanceHistoryEqApp(GLEntry."Old G/L Account No.",FALSE);
                HistoryOfEquivCOA."New Acc. Post Impl. Balance" := CalculateBalanceHistoryEqApp(GLEntry."New G/L Account No.",TRUE);
                HistoryOfEquivCOA.INSERT;
                EntryNo := HistoryOfEquivCOA."Entry No.";
                Window.UPDATE(7,HistoryOfEquivCOA."Entry No.");
              UNTIL GLEntry.NEXT = 0;
          END;
        UNTIL GLAccEqTool.NEXT = 0;
      END;
      LogFileData := FORMAT(TODAY) + ' ' + FORMAT(TIME) + ' ' + HistoryOfEquivCOA.TABLECAPTION + ' ' + Text1100065;
      LogFile.WRITE(LogFileData);
    END;

    PROCEDURE UpdateMatchingToolWithDate@1100030();
    BEGIN
      GLAccEqTool.RESET;
      GLAccEqTool.SETFILTER(GLAccEqTool."Account Type",'=%1',GLAccEqTool."Account Type"::Posting);
      IF GLAccEqTool.FINDSET(TRUE,FALSE) THEN
        REPEAT
          Window.UPDATE(8,GLAccEqTool."No.");
          GLAccEqTool."Last Run Date" := TODAY;
          GLAccEqTool.Done := TRUE;
          GLAccEqTool.Implement := FALSE;
          GLAccEqTool.MODIFY;
        UNTIL GLAccEqTool.NEXT = 0;
      LogFileData := FORMAT(TODAY) + ' ' + FORMAT(TIME) + ' ' + Text1100064 + GLAccEqTool.FIELDCAPTION(GLAccEqTool."Last Run Date") +
      ', ' + GLAccEqTool.FIELDCAPTION(GLAccEqTool.Done) + ', ' + GLAccEqTool.FIELDCAPTION(GLAccEqTool.Implement);
      LogFile.WRITE(LogFileData);
      LogFile.CLOSE;
      IF ISSERVICETIER THEN
        DownloadtoClientLocation(GetServerTempFolder + ExtractFileName(GLAccEquivToolSetup."Log File Name"),
          GLAccEquivToolSetup."Log File Name");
      // // es0009.end
      Window.CLOSE;
    END;

    PROCEDURE CalculateBalanceHistoryEqApp@1100031(Acc@1100000 : Text[20];IsNewAccount@1100001 : Boolean) : Decimal;
    VAR
      GLAcc@1100002 : Record 15;
      HistoricGLAcc@1100003 : Record 10721;
    BEGIN
      IF IsNewAccount THEN BEGIN
        IF GLAcc.GET(Acc) THEN BEGIN
          GLAcc.CALCFIELDS(Balance);
          EXIT(GLAcc.Balance);
        END;
      END ELSE
        IF HistoricGLAcc.GET(Acc) THEN
          EXIT(HistoricGLAcc."Old Balance");
    END;

    PROCEDURE CreateLogOfChanges@1100032();
    BEGIN
      GLAccEquivToolSetup.GET;
      LogFile.TEXTMODE := TRUE;
      LogFile.WRITEMODE := TRUE;
      IF ISSERVICETIER THEN
        LogFile.CREATE(GetServerTempFolder + ExtractFileName(GLAccEquivToolSetup."Log File Name"))
      ELSE
        LogFile.CREATE(GLAccEquivToolSetup."Log File Name");

      LogFileData := FORMAT(TODAY) + ' ' + FORMAT(TIME) + ' ' + Text1100058;
      LogFile.WRITE(LogFileData);
      LogFileData := Text1100059;
      LogFile.WRITE(LogFileData);
      LogFile.WRITE(' ');
    END;

    PROCEDURE ExportAuditingInformation@1100033(BeforeProcess@1100000 : Boolean);
    BEGIN
      GLAccEquivToolSetup.GET;

      ExportTrialBalance(GLAccEquivToolSetup."Fiscal Year Starting Date",GLAccEquivToolSetup."Fiscal Year Ending Date",BeforeProcess);
      ExportTrialBalance(CALCDATE('<-1Y>',GLAccEquivToolSetup."Fiscal Year Starting Date"),
        CALCDATE('<-1Y>',GLAccEquivToolSetup."Fiscal Year Ending Date"),BeforeProcess);

      ExportOpeningAndClosingEntries(GLAccEquivToolSetup."Fiscal Year Starting Date",GLAccEquivToolSetup."Fiscal Year Ending Date",
        BeforeProcess);
      ExportOpeningAndClosingEntries(CALCDATE('<-1Y>',GLAccEquivToolSetup."Fiscal Year Starting Date"),
        CALCDATE('<-1Y>',GLAccEquivToolSetup."Fiscal Year Ending Date"),BeforeProcess);
    END;

    PROCEDURE ExportTrialBalance@1100034(StartingDate@1100000 : Date;EndingDate@1100001 : Date;BeforeProcess@1100002 : Boolean);
    BEGIN
      ExportReportsAsHTML(StartingDate,EndingDate,BeforeProcess,REPORT::"Trial Balance",TRUE);
    END;

    PROCEDURE ExportOpeningAndClosingEntries@1100035(StartingDate@1100000 : Date;EndingDate@1100001 : Date;BeforeProcess@1100002 : Boolean);
    BEGIN
      ExportReportsAsHTML(StartingDate,EndingDate,BeforeProcess,REPORT::"Detail Acc. Stat.- C&O Entries",FALSE);
    END;

    PROCEDURE ExportReportsAsHTML@1100036(StartingDate@1100000 : Date;EndingDate@1100001 : Date;BeforeProcess@1100002 : Boolean;ReportID@1100003 : Integer;IsTrialBalance@1100004 : Boolean);
    VAR
      GLAcc@1100005 : Record 15;
      FileName@1100006 : Text[1024];
      Extension@1100007 : Text[10];
    BEGIN
      IF NOT ISSERVICETIER THEN
        Extension := '.html'
      ELSE
        Extension := '.pdf';
      IF BeforeProcess THEN
        IF IsTrialBalance THEN
          FileName := ExtractFolder(GLAccEquivToolSetup."Log File Name") + Text1100066 + FORMAT(DATE2DMY(EndingDate,3)) + Extension
        ELSE
          FileName := ExtractFolder(GLAccEquivToolSetup."Log File Name") + Text1100077 + FORMAT(DATE2DMY(EndingDate,3)) + Extension
      ELSE
        IF IsTrialBalance THEN
          FileName := ExtractFolder(GLAccEquivToolSetup."Log File Name") + Text1100067 + FORMAT(DATE2DMY(EndingDate,3)) + Extension
        ELSE
          FileName := ExtractFolder(GLAccEquivToolSetup."Log File Name") + Text1100078 +
            FORMAT(DATE2DMY(EndingDate,3)) + Extension;
      GLAcc.RESET;
      IF IsTrialBalance THEN
        GLAcc.SETRANGE(GLAcc."Date Filter",StartingDate,EndingDate)
      ELSE
        GLAcc.SETRANGE(GLAcc."Date Filter",StartingDate,CLOSINGDATE(EndingDate));
      IF GLAcc.FINDFIRST AND (ExistFiscalYear(StartingDate)) THEN
        IF NOT ISSERVICETIER THEN
          REPORT.SAVEASHTML(ReportID,FileName,FALSE,GLAcc)
        ELSE BEGIN
          REPORT.SAVEASPDF(ReportID,GetServerTempFolder + ExtractFileName(FileName),GLAcc);
          DownloadtoClientLocation(GetServerTempFolder + ExtractFileName(FileName),FileName);
        END;
          // LogFile.OPEN(FileName);
        // END;
    END;

    PROCEDURE ExportHistoryOfEquivApplied@1100037(FirstImplementation@1100000 : Boolean);
    VAR
      HistoryOfEquivalencesCOA@1100001 : Record 10724;
      HistoryOfEquivLogFile@1100002 : File;
      HistoryOfEquivLogFileData@1100003 : Text[1024];
    BEGIN
      HistoryOfEquivLogFile.TEXTMODE := TRUE;
      HistoryOfEquivLogFile.WRITEMODE := TRUE;
      IF ISSERVICETIER THEN
        HistoryOfEquivLogFile.CREATE(GetServerTempFolder + HistoryOfEquivalencesCOA.TABLECAPTION + '.txt')
      ELSE
        HistoryOfEquivLogFile.CREATE(
          ExtractFolder(GLAccEquivToolSetup."Log File Name") + HistoryOfEquivalencesCOA.TABLECAPTION + '.txt');

      HistoryOfEquivLogFileData :=
        HistoryOfEquivalencesCOA.FIELDCAPTION("Entry No.") + ' ' +
        HistoryOfEquivalencesCOA.FIELDCAPTION("Old G/L Account No.") + ' ' +
        HistoryOfEquivalencesCOA.FIELDCAPTION("Old G/L Account Name") + ' ' +
        HistoryOfEquivalencesCOA.FIELDCAPTION("New G/L Account No.") + ' ' +
        HistoryOfEquivalencesCOA.FIELDCAPTION("New G/L Account Name") + ' ' +
        HistoryOfEquivalencesCOA.FIELDCAPTION("Date Runned") + ' ' +
        HistoryOfEquivalencesCOA.FIELDCAPTION(Balance) + ' ' +
        HistoryOfEquivalencesCOA.FIELDCAPTION("Balance date") + ' ' +
        HistoryOfEquivalencesCOA.FIELDCAPTION("Old Acc. Pre Impl. Balance") + ' ' +
        HistoryOfEquivalencesCOA.FIELDCAPTION("New Acc. Post Impl. Balance");
      HistoryOfEquivLogFile.WRITE(HistoryOfEquivLogFileData);

      HistoryOfEquivalencesCOA.SETRANGE("Date Runned",TODAY);
      IF HistoryOfEquivalencesCOA.FINDSET THEN
        REPEAT
          HistoryOfEquivalencesCOA.CALCFIELDS("Old G/L Account Name","New G/L Account Name");
          HistoryOfEquivLogFileData :=
            FORMAT(HistoryOfEquivalencesCOA."Entry No.") + ' ' +
            HistoryOfEquivalencesCOA."Old G/L Account No." + ' ' +
            HistoryOfEquivalencesCOA."Old G/L Account Name" + ' ' +
            HistoryOfEquivalencesCOA."New G/L Account No." + ' ' +
            HistoryOfEquivalencesCOA."New G/L Account Name" + ' ' +
            FORMAT(HistoryOfEquivalencesCOA."Date Runned") + ' ' +
            FORMAT(HistoryOfEquivalencesCOA.Balance) + ' ' +
            FORMAT(HistoryOfEquivalencesCOA."Balance date") + ' ' +
            FORMAT(HistoryOfEquivalencesCOA."Old Acc. Pre Impl. Balance") + ' ' +
            FORMAT(HistoryOfEquivalencesCOA."New Acc. Post Impl. Balance");
          HistoryOfEquivLogFile.WRITE(HistoryOfEquivLogFileData);
        UNTIL HistoryOfEquivalencesCOA.NEXT = 0;
      HistoryOfEquivLogFile.CLOSE;
      IF ISSERVICETIER THEN
        DownloadtoClientLocation(GetServerTempFolder + HistoryOfEquivalencesCOA.TABLECAPTION + '.txt',
          ExtractFolder(GLAccEquivToolSetup."Log File Name") + HistoryOfEquivalencesCOA.TABLECAPTION + '.txt');
    END;

    PROCEDURE ImplementOldAccInNewEntries@1100038();
    VAR
      GLEntry@1100000 : Record 17;
      GLEntry2@1100001 : Record 17;
      NewGLAccMissing@1100002 : Boolean;
    BEGIN
      GLAccEqTool.SETCURRENTKEY("Last Run Date",Implement);
      GLAccEqTool.SETFILTER("Last Run Date",'<>%1',0D);
      IF NOT GLAccEqTool.FINDFIRST THEN
        ERROR(Text1100094);
      GLAccEqTool.RESET;

      NewGLAccMissing := TestImplOldAccInNewEntries;

      IF NewGLAccMissing THEN
        ERROR(Text1100092);

      IF NOT CONFIRM(
        Text1100091 +
        Text1100043)
      THEN
        ERROR(Text1100006);

      GLAccEquivToolSetup.GET;
      GLEntry.SETCURRENTKEY("Posting Date","Old G/L Account No.");
      GLEntry.SETRANGE("Posting Date",GLAccEquivToolSetup."Starting Date",GLAccEquivToolSetup."Ending Date");
      GLEntry.SETRANGE("Old G/L Account No.",'');
      IF GLEntry.FINDSET THEN BEGIN
        REPEAT
            GLEntry2 := GLEntry;
            GLAccEqTool.RESET;
            GLAccEqTool.SETCURRENTKEY("New No.");
            GLAccEqTool.SETRANGE("New No.",GLEntry."G/L Account No.");
            IF GLAccEqTool.FINDFIRST THEN BEGIN
              IF GLAccEqTool."Matching Type" = GLAccEqTool."Matching Type"::"1-1" THEN BEGIN
                IF GLAccEqTool.COUNT > 1 THEN BEGIN
                  GLAccEqTool.SETRANGE(GLAccEqTool.Preferred,TRUE);
                  IF GLAccEqTool.FINDFIRST THEN
                    GLEntry2."Old G/L Account No." := GLAccEqTool."No.";
                END ELSE
                  GLEntry2."Old G/L Account No." := GLAccEqTool."No.";
              END ELSE
                GLEntry2."Old G/L Account No." := GLEntry."New G/L Account No.";
              GLEntry2.MODIFY;
            END;
        UNTIL GLEntry.NEXT = 0;
      END;
    END;

    PROCEDURE TestImplOldAccInNewEntries@1100039() : Boolean;
    VAR
      GLEntry@1100000 : Record 17;
    BEGIN
      FORM.RUNMODAL(FORM::"Old Acc. in new entries");
      GLAccEquivToolSetup.GET;
      GLEntry.SETCURRENTKEY("Posting Date","Old G/L Account No.");
      GLEntry.SETRANGE("Posting Date",GLAccEquivToolSetup."Starting Date",GLAccEquivToolSetup."Ending Date");
      GLEntry.SETRANGE("Old G/L Account No.",'');
      IF GLEntry.FINDSET THEN
        REPEAT
          GLAccEqTool.SETCURRENTKEY("New No.");
          GLAccEqTool.SETRANGE("New No.",GLEntry."G/L Account No.");
          IF NOT GLAccEqTool.FINDFIRST THEN
            EXIT(TRUE);
          GLAccEqTool.RESET;
        UNTIL GLEntry.NEXT = 0;
    END;

    PROCEDURE ExistFiscalYear@1100040(Date@1100000 : Date) : Boolean;
    VAR
      AccPeriod@1100001 : Record 50;
    BEGIN
      AccPeriod.SETRANGE("New Fiscal Year",TRUE);
      AccPeriod.SETFILTER("Starting Date",'= %1',Date);
      IF AccPeriod.FIND('+') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE ExtractFolder@1100041(VAR Path@1100000 : Text[1024]) : Text[1024];
    BEGIN
      Path := DELCHR(Path, '<>', '"');
      EXIT(COPYSTR(Path, 1, STRLEN(Path) - STRLEN(ExtractFileName(Path))));
    END;

    PROCEDURE ExtractFileName@1100042(Path@1100000 : Text[260]) : Text[260];
    VAR
      Position@1100001 : Integer;
    BEGIN
      Path := DELCHR(Path, '<>', '"');
      Position := STRPOS(Path, '\');

      WHILE Position <> 0 DO BEGIN
        Path := DELSTR(Path, 1, Position);
        Position := STRPOS(Path, '\');
      END;

      EXIT(Path);
    END;

    PROCEDURE CheckStrLen@1100043(VAR TextMessage@1100000 : Text[1024];NextErrorMessage@1100001 : Text[1024]);
    BEGIN
      IF STRLEN(TextMessage) + STRLEN(NextErrorMessage) + 30 > 1024 THEN BEGIN
        MESSAGE(TextMessage);
        TextMessage := '';
      END;
    END;

    PROCEDURE ClearUpdate@1100044(TableID@1100000 : Integer;FieldNo@1100002 : Integer);
    VAR
      RecRef@1100003 : RecordRef;
      FldRef@1100004 : FieldRef;
    BEGIN
      RecRef.OPEN(TableID);
      IF RecRef.FINDSET(TRUE, FALSE) THEN
        REPEAT
          FldRef := RecRef.FIELD(FieldNo);
          FldRef.VALUE := FALSE;
          RecRef.MODIFY;
        UNTIL RecRef.NEXT = 0;
    END;

    PROCEDURE CheckCurrencies@1100046() : Boolean;
    VAR
      Currency@1100000 : Record 4;
      IncorrectMatching@1100001 : ARRAY [10] OF Boolean;
      i@1100002 : Integer;
    BEGIN
      IF Currency.FINDFIRST THEN
        REPEAT
          Window.UPDATE(5,Currency.Code);
          IncorrectMatching[1] := CheckMatchingType(Currency."Unrealized Gains Acc.");
          IncorrectMatching[2] := CheckMatchingType(Currency."Realized Gains Acc.");
          IncorrectMatching[3] := CheckMatchingType(Currency."Unrealized Losses Acc.");
          IncorrectMatching[4] := CheckMatchingType(Currency."Realized Losses Acc.");
          IncorrectMatching[5] := CheckMatchingType(Currency."Realized G/L Gains Account");
          IncorrectMatching[6] := CheckMatchingType(Currency."Realized G/L Losses Account");
          IncorrectMatching[7] := CheckMatchingType(Currency."Residual Gains Account");
          IncorrectMatching[8] := CheckMatchingType(Currency."Residual Losses Account");
          IncorrectMatching[9] := CheckMatchingType(Currency."Conv. LCY Rndg. Debit Acc.");
          IncorrectMatching[10] := CheckMatchingType(Currency."Conv. LCY Rndg. Credit Acc.");
          FOR i := 1 TO 10 DO
            IF IncorrectMatching[i] THEN
              EXIT(IncorrectMatching[i]);
        UNTIL Currency.NEXT = 0;
    END;

    PROCEDURE ImplementEquivInCurrencies@1100047();
    BEGIN
      ImplementNewAcc(DATABASE::Currency,6);
      ImplementNewAcc(DATABASE::Currency,7);
      ImplementNewAcc(DATABASE::Currency,8);
      ImplementNewAcc(DATABASE::Currency,9);
      ImplementNewAcc(DATABASE::Currency,40);
      ImplementNewAcc(DATABASE::Currency,41);
      ImplementNewAcc(DATABASE::Currency,47);
      ImplementNewAcc(DATABASE::Currency,48);
      ImplementNewAcc(DATABASE::Currency,50);
      ImplementNewAcc(DATABASE::Currency,51);
    END;

    PROCEDURE RemoveDataFromRelatedTables@1100045();
    VAR
      CommentLine@1100000 : Record 97;
      ExtTextHeader@1100001 : Record 279;
      DefaultDim@1100002 : Record 352;
    BEGIN
      CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::"G/L Account");
      CommentLine.DELETEALL;

      ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::"G/L Account");
      ExtTextHeader.DELETEALL(TRUE);

      DefaultDim.SETRANGE("Table ID",15);
      IF NOT DefaultDim.ISEMPTY THEN
        DefaultDim.DELETEALL;
    END;

    PROCEDURE GetServerTempFolder@1100049() : Text[1024];
    BEGIN
      IF ServerTempFolder = '' THEN
        ServerTempFolder := RBAutoMgt.Path((RBAutoMgt.ServerTempFileName('','')));
      EXIT(ServerTempFolder);
    END;

    PROCEDURE DownloadtoClientLocation@1100048(ServerFileName@1100001 : Text[1024];ClientFileName@1100000 : Text[1024]);
    BEGIN
      ServerFileName := RBAutoMgt.DownloadTempFile(ServerFileName);
      IF ISCLEAR(FileSystemObject) THEN
        CREATE(FileSystemObject,TRUE,TRUE);
      FileSystemObject.MoveFile(ServerFileName,ClientFileName);
    END;

    BEGIN
    END.
  }
}
