OBJECT Codeunit 6824 EP Modify Head Data Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=12/01/06;
    Time=12:00:00;
    Version List=NAVW14.00.01,NAVES4.00.02;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DecodeXML@1000000000 : Codeunit 6813;
      EncodeXML@1000000004 : Codeunit 6814;
      SupportFunctions@1000000001 : Codeunit 6815;
      FormatFunctions@1000000002 : Codeunit 6817;
      XMLDocValField@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";

    PROCEDURE ModifyHeader@1000000004(VAR XMLDocInHead@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";TableNo@1000000001 : Integer;GUID@1000000003 : Text[50];GroupCode@1000000000 : Code[20];OrgRequestType@1000000004 : Code[20];UserID@1000000009 : Code[20]) ReturnCode : Integer;
    VAR
      ChangeLogMgt@1000 : Codeunit 423;
      HeadRecordRef@1000000007 : RecordRef;
      xHeadRecordRef@1000000002 : RecordRef;
      AdditionalValues@1001 : ARRAY [2] OF Code[20];
    BEGIN
      AdditionalValues[1] := GroupCode;
      AdditionalValues[2] := OrgRequestType;

      EncodeXML.CreateValidationDoc(XMLDocValField);

      CASE TableNo OF
        DATABASE::Customer:
          ReturnCode := ModifyCustomer(XMLDocInHead,GUID,AdditionalValues,HeadRecordRef,xHeadRecordRef);
        DATABASE::Vendor:
          ReturnCode := ModifyVendor(XMLDocInHead,GUID,AdditionalValues,HeadRecordRef,xHeadRecordRef);
        DATABASE::Item:
          ReturnCode := ModifyItem(XMLDocInHead,GUID,AdditionalValues,HeadRecordRef,xHeadRecordRef);
        DATABASE::"Sales Header":
          ReturnCode := ModifySalesHeader(XMLDocInHead,GUID,AdditionalValues,HeadRecordRef,xHeadRecordRef);
        DATABASE::"Production BOM Version":
          ReturnCode := ModifyProdBOMVersion(XMLDocInHead,GUID,AdditionalValues,HeadRecordRef,xHeadRecordRef);
      END;

      EncodeXML.ClearValidationDoc(XMLDocValField);

      IF SupportFunctions.CheckChangeLogInLic THEN
        IF ChangeLogMgt.GetTableTriggerMask(HeadRecordRef.NUMBER) IN [10,11,14,15] THEN BEGIN // All Maskvalues for Modify
          ChangeLogMgt.SetLogEmployeePortalActivity(UserID);
          ChangeLogMgt.LogModification(HeadRecordRef,xHeadRecordRef);
        END;
    END;

    LOCAL PROCEDURE ModifyCustomer@1000000000(VAR XMLDocInHead@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000000 : Text[50];AdditionalValues@1000000002 : ARRAY [2] OF Code[20];VAR HeadRecordRef@1000000009 : RecordRef;VAR xHeadRecordRef@1000000010 : RecordRef) ReturnCode : Integer;
    VAR
      Customer@1000 : Record 18;
      UpdateContFromCust@1001 : Codeunit 5056;
      HeadFieldRef@1000000004 : FieldRef;
      FilterString@1000000005 : Text[1024];
      tmpValue@1000000007 : Text[200];
    BEGIN
      ReturnCode := 0;
      FilterString :=
        STRSUBSTNO('WHERE(1=CONST(%1))',
          DecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,Customer.FIELDNO("No.")));

      HeadRecordRef.OPEN(DATABASE::Customer,FALSE);
      HeadRecordRef.SETVIEW(FilterString);

      xHeadRecordRef.OPEN(DATABASE::Customer,FALSE);
      xHeadRecordRef.SETVIEW(FilterString);
      IF xHeadRecordRef.FIND('-') THEN;

      IF SupportFunctions.CompareHashValues(DecodeXML.GetHashValue(XMLDocInHead),HeadRecordRef) THEN BEGIN
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Customer.FIELDNO(Name));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Customer.FIELDNO(Address));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Customer.FIELDNO("Address 2"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Customer.FIELDNO(City));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Customer.FIELDNO("Phone No."));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Customer.FIELDNO("Customer Posting Group"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Customer.FIELDNO("Salesperson Code"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Customer.FIELDNO(Comment));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Customer.FIELDNO(Blocked));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Customer.FIELDNO("Last Date Modified"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Customer.FIELDNO("Location Code"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Customer.FIELDNO("Fax No."));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Customer.FIELDNO("Gen. Bus. Posting Group"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Customer.FIELDNO("Post Code"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Customer.FIELDNO("E-Mail"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Customer.FIELDNO("Home Page"));


        DecodeXML.ModifyRecord(XMLDocInHead,HeadRecordRef,XMLDocValField,DATABASE::Customer,
          TRUE,FALSE,AdditionalValues[1],AdditionalValues[2]);

        HeadRecordRef.MODIFY(TRUE);

        HeadRecordRef.SETTABLE(Customer);
        UpdateContFromCust.OnModify(Customer);
      END ELSE BEGIN
        ReturnCode := 20;
      END;

      HeadFieldRef := HeadRecordRef.FIELD(Customer.FIELDNO("No."));
      tmpValue := HeadFieldRef.VALUE;
      SupportFunctions.CreateTempHeadFilterTable(Customer.FIELDNO("No."),tmpValue,GUID);

      SupportFunctions.CreateTempHeadFilterKeys(Customer.FIELDNO("No."),GUID);
    END;

    PROCEDURE ModifyVendor@1000000001(VAR XMLDocInHead@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000003 : Text[50];AdditionalValues@1000000002 : ARRAY [2] OF Code[20];VAR HeadRecordRef@1000000001 : RecordRef;VAR xHeadRecordRef@1000000000 : RecordRef) ReturnCode : Integer;
    VAR
      Vendor@1001 : Record 23;
      UpdateContFromVend@1000 : Codeunit 5057;
      HeadFieldRef@1000000009 : FieldRef;
      FilterString@1000000008 : Text[1024];
      tmpVendNo@1000000007 : Code[20];
    BEGIN
      ReturnCode := 0;

      FilterString :=
        STRSUBSTNO('WHERE(1=CONST(%1))',
          DecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,Vendor.FIELDNO("No.")));

      HeadRecordRef.OPEN(DATABASE::Vendor,FALSE);
      HeadRecordRef.SETVIEW(FilterString);

      xHeadRecordRef.OPEN(DATABASE::Vendor,FALSE);
      xHeadRecordRef.SETVIEW(FilterString);
      IF xHeadRecordRef.FIND('-') THEN;

      IF SupportFunctions.CompareHashValues(DecodeXML.GetHashValue(XMLDocInHead),HeadRecordRef) THEN BEGIN
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Vendor.FIELDNO(Name));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Vendor.FIELDNO(Address));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Vendor.FIELDNO("Address 2"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Vendor.FIELDNO(City));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Vendor.FIELDNO("Phone No."));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Vendor.FIELDNO("Purchaser Code"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Vendor.FIELDNO(Comment));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Vendor.FIELDNO(Blocked));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Vendor.FIELDNO("Last Date Modified"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Vendor.FIELDNO("Fax No."));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Vendor.FIELDNO("Post Code"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Vendor.FIELDNO("E-Mail"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Vendor.FIELDNO("Home Page"));

        DecodeXML.ModifyRecord(XMLDocInHead,HeadRecordRef,XMLDocValField,DATABASE::Vendor,
          TRUE,FALSE,AdditionalValues[1],AdditionalValues[2]);

        HeadRecordRef.MODIFY(TRUE);

        Vendor.SETVIEW(HeadRecordRef.GETVIEW);
        UpdateContFromVend.OnModify(Vendor);
      END ELSE BEGIN
        ReturnCode := 20;
      END;

      HeadFieldRef := HeadRecordRef.FIELD(Vendor.FIELDNO("No."));
      tmpVendNo := HeadFieldRef.VALUE;

      SupportFunctions.CreateTempHeadFilterTable(Vendor.FIELDNO("No."),tmpVendNo,GUID);

      SupportFunctions.CreateTempHeadFilterKeys(Vendor.FIELDNO("No."),GUID);
    END;

    LOCAL PROCEDURE ModifyItem@1000000005(VAR XMLDocInHead@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000000 : Text[50];AdditionalValues@1000000002 : ARRAY [2] OF Code[20];VAR HeadRecordRef@1000000003 : RecordRef;VAR xHeadRecordRef@1000000006 : RecordRef) ReturnCode : Integer;
    VAR
      Item@1000 : Record 27;
      HeadFieldRef@1000000004 : FieldRef;
      FilterString@1000000005 : Text[1024];
      tmpValue@1000000008 : Text[200];
    BEGIN
      ReturnCode := 0;

      FilterString :=
        STRSUBSTNO('WHERE(1=CONST(%1))',
          DecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,Item.FIELDNO("No.")));

      HeadRecordRef.OPEN(DATABASE::Item,FALSE);
      HeadRecordRef.SETVIEW(FilterString);

      xHeadRecordRef.OPEN(DATABASE::Item,FALSE);
      xHeadRecordRef.SETVIEW(FilterString);
      IF xHeadRecordRef.FIND('-') THEN;

      IF SupportFunctions.CompareHashValues(DecodeXML.GetHashValue(XMLDocInHead),HeadRecordRef) THEN BEGIN
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Item.FIELDNO(Description));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Item.FIELDNO("Bill of Materials"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Item.FIELDNO("Shelf/Bin No."));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Item.FIELDNO("Standard Cost"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Item.FIELDNO("Vendor No."));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Item.FIELDNO("Vendor Item No."));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Item.FIELDNO("Lead Time Calculation"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Item.FIELDNO(Comment));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Item.FIELDNO(Blocked));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Item.FIELDNO("Last Date Modified"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Item.FIELDNO("Qty. on Purch. Order"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Item.FIELDNO("Qty. on Sales Order"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Item.FIELDNO(Picture));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Item.FIELDNO("Routing No."));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,Item.FIELDNO("Production BOM No."));

        DecodeXML.ModifyRecord(XMLDocInHead,HeadRecordRef,XMLDocValField,DATABASE::Item,
          TRUE,FALSE,AdditionalValues[1],AdditionalValues[2]);

        HeadRecordRef.MODIFY(TRUE);
      END ELSE BEGIN
        ReturnCode := 20;
      END;

      HeadFieldRef := HeadRecordRef.FIELD(Item.FIELDNO("No."));
      tmpValue := HeadFieldRef.VALUE;

      SupportFunctions.CreateTempHeadFilterTable(Item.FIELDNO("No."),tmpValue,GUID);

      SupportFunctions.CreateTempHeadFilterKeys(Item.FIELDNO("No."),GUID);
    END;

    LOCAL PROCEDURE ModifySalesHeader@1000000003(VAR XMLDocInHead@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000000 : Text[50];AdditionalValues@1000000002 : ARRAY [2] OF Code[20];VAR HeadRecordRef@1000000003 : RecordRef;VAR xHeadRecordRef@1000000008 : RecordRef) ReturnCode : Integer;
    VAR
      SalesHeader@1000 : Record 36;
      HeadFieldRef@1000000004 : FieldRef;
      FilterString@1000000005 : Text[1024];
      tmpOption@1000000006 : Option;
      tmpText@1000000007 : Text[200];
    BEGIN
      ReturnCode := 0;

      FilterString :=
        STRSUBSTNO(
          'WHERE(1=CONST(%1),3=CONST(%2))',
          DecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,SalesHeader.FIELDNO("Document Type")),
          DecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,SalesHeader.FIELDNO("No.")));

      HeadRecordRef.OPEN(DATABASE::"Sales Header",FALSE);
      HeadRecordRef.SETVIEW(FilterString);

      xHeadRecordRef.OPEN(DATABASE::"Sales Header",FALSE);
      xHeadRecordRef.SETVIEW(FilterString);
      IF xHeadRecordRef.FIND('-') THEN;

      IF SupportFunctions.CompareHashValues(DecodeXML.GetHashValue(XMLDocInHead),HeadRecordRef) THEN BEGIN
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,SalesHeader.FIELDNO("Sell-to Customer No."));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,SalesHeader.FIELDNO("Shipment Date"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,SalesHeader.FIELDNO("Payment Discount %"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,SalesHeader.FIELDNO("Pmt. Discount Date"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,SalesHeader.FIELDNO("Location Code"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,SalesHeader.FIELDNO("Salesperson Code"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,SalesHeader.FIELDNO(Comment));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,SalesHeader.FIELDNO("Sell-to Customer Name"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,SalesHeader.FIELDNO("External Document No."));

        DecodeXML.ModifyRecord(XMLDocInHead,HeadRecordRef,XMLDocValField,DATABASE::"Sales Header",
          TRUE,FALSE,AdditionalValues[1],AdditionalValues[2]);

        HeadRecordRef.MODIFY(TRUE);
      END ELSE BEGIN
        ReturnCode := 20;
      END;

      HeadFieldRef := HeadRecordRef.FIELD(SalesHeader.FIELDNO("Document Type"));
      tmpOption := HeadFieldRef.VALUE;
      tmpText := FormatFunctions.OptionToText(tmpOption);
      SupportFunctions.CreateTempHeadFilterTable(SalesHeader.FIELDNO("Document Type"),tmpText,GUID);
      HeadFieldRef := HeadRecordRef.FIELD(SalesHeader.FIELDNO("No."));
      tmpText := HeadFieldRef.VALUE;
      SupportFunctions.CreateTempHeadFilterTable(SalesHeader.FIELDNO("No."),tmpText,GUID);

      SupportFunctions.CreateTempHeadFilterKeys(SalesHeader.FIELDNO("Document Type"),GUID);
      SupportFunctions.CreateTempHeadFilterKeys(SalesHeader.FIELDNO("No."),GUID);
    END;

    LOCAL PROCEDURE ModifyPurchaseHeader@1(VAR XMLDocInHead@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000000 : Text[50];AdditionalValues@1000000002 : ARRAY [2] OF Code[20];VAR HeadRecordRef@1000000003 : RecordRef;VAR xHeadRecordRef@1000000008 : RecordRef) ReturnCode : Integer;
    VAR
      PurchaseHeader@1000 : Record 38;
      HeadFieldRef@1000000004 : FieldRef;
      FilterString@1000000005 : Text[1024];
      tmpOption@1000000006 : Option;
      tmpText@1000000007 : Text[200];
    BEGIN
      ReturnCode := 0;

      FilterString :=
        STRSUBSTNO(
          'WHERE(1=CONST(%1),3=CONST(%2))',
          DecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,PurchaseHeader.FIELDNO("Document Type")),
          DecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,PurchaseHeader.FIELDNO("No.")));

      HeadRecordRef.OPEN(DATABASE::"Purchase Header",FALSE);
      HeadRecordRef.SETVIEW(FilterString);

      xHeadRecordRef.OPEN(DATABASE::"Purchase Header",FALSE);
      xHeadRecordRef.SETVIEW(FilterString);
      IF xHeadRecordRef.FIND('-') THEN;

      IF SupportFunctions.CompareHashValues(DecodeXML.GetHashValue(XMLDocInHead),HeadRecordRef) THEN BEGIN
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,PurchaseHeader.FIELDNO("Buy-from Vendor No."));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,PurchaseHeader.FIELDNO("Expected Receipt Date"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,PurchaseHeader.FIELDNO("Due Date"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,PurchaseHeader.FIELDNO("Payment Discount %"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,PurchaseHeader.FIELDNO("Pmt. Discount Date"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,PurchaseHeader.FIELDNO("Location Code"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,PurchaseHeader.FIELDNO(Comment));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,PurchaseHeader.FIELDNO("Buy-from Vendor Name"));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,PurchaseHeader.FIELDNO("Vendor Authorization No."));

        DecodeXML.ModifyRecord(XMLDocInHead,HeadRecordRef,XMLDocValField,DATABASE::"Purchase Header",
          TRUE,FALSE,AdditionalValues[1],AdditionalValues[2]);

        HeadRecordRef.MODIFY(TRUE);
      END ELSE BEGIN
        ReturnCode := 20;
      END;

      HeadFieldRef := HeadRecordRef.FIELD(PurchaseHeader.FIELDNO("Document Type"));
      tmpOption := HeadFieldRef.VALUE;
      tmpText := FormatFunctions.OptionToText(tmpOption);
      SupportFunctions.CreateTempHeadFilterTable(PurchaseHeader.FIELDNO("Document Type"),tmpText,GUID);
      HeadFieldRef := HeadRecordRef.FIELD(PurchaseHeader.FIELDNO("No."));
      tmpText := HeadFieldRef.VALUE;
      SupportFunctions.CreateTempHeadFilterTable(PurchaseHeader.FIELDNO("No."),tmpText,GUID);

      SupportFunctions.CreateTempHeadFilterKeys(PurchaseHeader.FIELDNO("Document Type"),GUID);
      SupportFunctions.CreateTempHeadFilterKeys(PurchaseHeader.FIELDNO("No."),GUID);
    END;

    LOCAL PROCEDURE ModifyProdBOMVersion@2(VAR XMLDocInHead@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000000 : Text[50];AdditionalValues@1000000002 : ARRAY [2] OF Code[20];VAR HeadRecordRef@1000000003 : RecordRef;VAR xHeadRecordRef@1000000008 : RecordRef) ReturnCode : Integer;
    VAR
      ProdBOMVersion@1000 : Record 99000779;
      HeadFieldRef@1000000004 : FieldRef;
      FilterString@1000000005 : Text[1024];
      tmpText@1000000007 : Text[200];
    BEGIN
      ReturnCode := 0;

      FilterString :=
        STRSUBSTNO(
          'WHERE(1=CONST(%1),2=CONST(%2))',
          DecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,ProdBOMVersion.FIELDNO("Production BOM No.")),
          DecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,ProdBOMVersion.FIELDNO("Version Code")));

      HeadRecordRef.OPEN(DATABASE::"Production BOM Version",FALSE);
      HeadRecordRef.SETVIEW(FilterString);

      xHeadRecordRef.OPEN(DATABASE::"Production BOM Version",FALSE);
      xHeadRecordRef.SETVIEW(FilterString);
      IF xHeadRecordRef.FIND('-') THEN;

      IF SupportFunctions.CompareHashValues(DecodeXML.GetHashValue(XMLDocInHead),HeadRecordRef) THEN BEGIN
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,ProdBOMVersion.FIELDNO(Description));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,ProdBOMVersion.FIELDNO(Status));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,ProdBOMVersion.FIELDNO("Unit of Measure Code"));

        DecodeXML.ModifyRecord(XMLDocInHead,HeadRecordRef,XMLDocValField,DATABASE::"Production BOM Version",
          TRUE,FALSE,AdditionalValues[1],AdditionalValues[2]);

        HeadRecordRef.MODIFY(TRUE);
      END ELSE BEGIN
        ReturnCode := 20;
      END;

      HeadFieldRef := HeadRecordRef.FIELD(ProdBOMVersion.FIELDNO("Production BOM No."));
      tmpText := HeadFieldRef.VALUE;
      SupportFunctions.CreateTempHeadFilterTable(ProdBOMVersion.FIELDNO("Production BOM No."),tmpText,GUID);
      HeadFieldRef := HeadRecordRef.FIELD(ProdBOMVersion.FIELDNO("Version Code"));
      tmpText := HeadFieldRef.VALUE;
      SupportFunctions.CreateTempHeadFilterTable(ProdBOMVersion.FIELDNO("Version Code"),tmpText,GUID);

      SupportFunctions.CreateTempHeadFilterKeys(ProdBOMVersion.FIELDNO("Production BOM No."),GUID);
      SupportFunctions.CreateTempHeadFilterKeys(ProdBOMVersion.FIELDNO("Version Code"),GUID);
    END;

    LOCAL PROCEDURE ModifyRoutingVersion@3(VAR XMLDocInHead@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000000 : Text[50];AdditionalValues@1000000002 : ARRAY [2] OF Code[20];VAR HeadRecordRef@1000000003 : RecordRef;VAR xHeadRecordRef@1000000008 : RecordRef) ReturnCode : Integer;
    VAR
      RoutingVersion@1000 : Record 99000786;
      HeadFieldRef@1000000004 : FieldRef;
      FilterString@1000000005 : Text[1024];
      tmpText@1000000007 : Text[200];
    BEGIN
      ReturnCode := 0;

      FilterString :=
        STRSUBSTNO(
          'WHERE(1=CONST(%1),2=CONST(%2))',
          DecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,RoutingVersion.FIELDNO("Routing No.")),
          DecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,RoutingVersion.FIELDNO("Version Code")));

      HeadRecordRef.OPEN(DATABASE::"Routing Version",FALSE);
      HeadRecordRef.SETVIEW(FilterString);

      xHeadRecordRef.OPEN(DATABASE::"Routing Version",FALSE);
      xHeadRecordRef.SETVIEW(FilterString);
      IF xHeadRecordRef.FIND('-') THEN;

      IF SupportFunctions.CompareHashValues(DecodeXML.GetHashValue(XMLDocInHead),HeadRecordRef) THEN BEGIN
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,RoutingVersion.FIELDNO(Description));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,RoutingVersion.FIELDNO(Type));
        EncodeXML.AddFieldToValidationDoc(XMLDocValField,RoutingVersion.FIELDNO(Status));

        DecodeXML.ModifyRecord(XMLDocInHead,HeadRecordRef,XMLDocValField,DATABASE::"Routing Version",
          TRUE,FALSE,AdditionalValues[1],AdditionalValues[2]);

        HeadRecordRef.MODIFY(TRUE);
      END ELSE BEGIN
        ReturnCode := 20;
      END;

      HeadFieldRef := HeadRecordRef.FIELD(RoutingVersion.FIELDNO("Routing No."));
      tmpText := HeadFieldRef.VALUE;
      SupportFunctions.CreateTempHeadFilterTable(RoutingVersion.FIELDNO("Routing No."),tmpText,GUID);
      HeadFieldRef := HeadRecordRef.FIELD(RoutingVersion.FIELDNO("Version Code"));
      tmpText := HeadFieldRef.VALUE;
      SupportFunctions.CreateTempHeadFilterTable(RoutingVersion.FIELDNO("Version Code"),tmpText,GUID);

      SupportFunctions.CreateTempHeadFilterKeys(RoutingVersion.FIELDNO("Routing No."),GUID);
      SupportFunctions.CreateTempHeadFilterKeys(RoutingVersion.FIELDNO("Version Code"),GUID);
    END;

    EVENT XMLDocValField@1000000003::ondataavailable@198();
    BEGIN
    END;

    EVENT XMLDocValField@1000000003::onreadystatechange@-609();
    BEGIN
    END;

    BEGIN
    END.
  }
}
