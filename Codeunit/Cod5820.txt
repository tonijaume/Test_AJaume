OBJECT Codeunit 5820 Close Inventory Period
{
  OBJECT-PROPERTIES
  {
    Date=13/02/07;
    Time=12:00:00;
    Version List=NAVW15.00;
  }
  PROPERTIES
  {
    TableNo=5814;
    Permissions=TableData 5814=imd,
                TableData 5815=imd;
    OnRun=VAR
            InvtPeriod@1001 : Record 5814;
            InvtPeriod2@1002 : Record 5814;
            ObjTransl@1003 : Record 377;
          BEGIN
            IF NOT HideDialog THEN
              IF NOT ReOpen THEN BEGIN
                IF NOT CONFIRM(
                         Text002 +
                         Text003 +
                         Text004,
                         FALSE,
                         "Ending Date",
                         ObjTransl.TranslateObject(ObjTransl."Object Type"::Report,REPORT::"Adjust Cost - Item Entries"))
                THEN
                  EXIT
              END ELSE
                IF NOT CONFIRM(Text006,FALSE,TABLECAPTION,"Ending Date") THEN
                  EXIT;

            TESTFIELD(Closed,ReOpen);
            IF NOT ReOpen THEN BEGIN
              TESTFIELD("Ending Date");
              CheckCostIsAdjusted;
              CheckOpenOutboundEntryExist("Ending Date");
            END ELSE
              IF NOT HideDialog AND AccPeriodIsClosed("Ending Date") THEN
                IF NOT CONFIRM(Text008,FALSE,TABLECAPTION,"Ending Date") THEN
                  EXIT;

            UpdateInvtPeriod(Rec);
            CreateInvtPeriodEntry(Rec);

            IF NOT HideDialog THEN
              IF NOT ReOpen THEN BEGIN
                MESSAGE(Text005,TABLECAPTION,"Ending Date")
              END ELSE
                MESSAGE(Text007,"Ending Date");
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The %1 cannot be closed because there is at least one %2 where the cost has not been adjusted.;ESP=%1 no se puede cerrar porque hay al menos un/una %2 cuyo coste no se ha ajustado.';
      Text001@1001 : TextConst 'ENU=The %1 cannot be closed because there is negative inventory for one or more items. Click Functions, Test Report to run the Close Inventory Period Í Test report to identify item ledger entries for the affected items.;ESP=El %1 no se puede cerrar porque el inventario es negativo para uno o m s productos. Haga clic en Funciones, Test para ejecutar el informe Cerrar periodo inventario - Prueba a fin de identificar movimientos de productos para los productos afectados.';
      Text002@1007 : TextConst 'ENU=This function closes the inventory up to %1. Once it is closed, you cannot post in the period until it is re-opened.\\;ESP=Esta funci¢n cierra el inventario hasta %1. Una vez cerrado, no puede registrar en el periodo hasta que se vuelva a abrir.\\';
      Text003@1009 : TextConst 'ENU=Make sure that all your inventory is posted to G/L.\\;ESP=Aseg£rese de que todo el inventario se registra en C/G.\\';
      Text004@1003 : TextConst 'ENU=Do you want to close the inventory period?;ESP=¨Desea cerrar el periodo de inventario?';
      Text005@1004 : TextConst 'ENU=The %1 has been closed on %2.;ESP=El %1 se cerr¢ el %2.';
      Text006@1005 : TextConst 'ENU=Do you want to reopen the %1 that ends %2?;ESP=¨Desea reabrir el %1 que finaliza el %2?';
      Text007@1006 : TextConst 'ENU=All inventory periods from %1 have been reopened.;ESP=Todos los periodos de inventario desde el %1 se volvieron a abrir.';
      ReOpen@1002 : Boolean;
      HideDialog@1008 : Boolean;
      Text008@1010 : TextConst 'ENU=The accounting period is already closed. Are you sure you want to reopen the %1 that ends %2?;ESP=El periodo contable ya est  cerrado. ¨Est  seguro de que desea reabrir el %1 que finaliza el %2?';

    LOCAL PROCEDURE CheckCostIsAdjusted@4();
    VAR
      Item@1002 : Record 27;
      ProdOrderLine@1000 : Record 5406;
      InvtPeriod@1001 : Record 5814;
    BEGIN
      Item.SETCURRENTKEY("Cost is Adjusted");
      Item.SETRANGE("Cost is Adjusted",FALSE);
      IF NOT Item.ISEMPTY THEN
        ERROR(Text000,InvtPeriod.TABLECAPTION,Item.TABLECAPTION);

      ProdOrderLine.SETCURRENTKEY(Status,"Cost is Adjusted");
      ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Finished);
      ProdOrderLine.SETRANGE("Cost is Adjusted",FALSE);
      IF NOT ProdOrderLine.ISEMPTY THEN
        ERROR(Text000,InvtPeriod.TABLECAPTION,ProdOrderLine.TABLECAPTION);
    END;

    LOCAL PROCEDURE CheckOpenOutboundEntryExist@5(EndingDate@1001 : Date);
    VAR
      ItemLedgEntry@1000 : Record 32;
      InvtPeriod@1002 : Record 5814;
    BEGIN
      ItemLedgEntry.SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,"Location Code","Posting Date");
      ItemLedgEntry.SETRANGE(Open,TRUE);
      ItemLedgEntry.SETRANGE(Positive,FALSE);
      ItemLedgEntry.SETRANGE("Posting Date",0D,EndingDate);
      IF NOT ItemLedgEntry.ISEMPTY THEN
        ERROR(Text001,InvtPeriod.TABLECAPTION);
    END;

    LOCAL PROCEDURE AccPeriodIsClosed@2(StartDate@1001 : Date) : Boolean;
    VAR
      AccPeriod@1000 : Record 50;
    BEGIN
      AccPeriod.SETCURRENTKEY(Closed);
      AccPeriod.SETRANGE(Closed,TRUE);
      AccPeriod.SETFILTER("Starting Date",'>=%1',StartDate);
      EXIT(NOT AccPeriod.ISEMPTY);
    END;

    LOCAL PROCEDURE UpdateInvtPeriod@3(VAR TheInvtPeriod@1002 : Record 5814);
    VAR
      InvtPeriod2@1000 : Record 5814;
      InvtPeriod3@1001 : Record 5814;
    BEGIN
      WITH TheInvtPeriod DO BEGIN
        InvtPeriod2.SETRANGE(Closed,ReOpen);
        IF ReOpen THEN
          InvtPeriod2.SETFILTER("Ending Date",'>%1',"Ending Date")
        ELSE
          InvtPeriod2.SETFILTER("Ending Date",'<%1',"Ending Date");
        IF InvtPeriod2.FINDSET(TRUE,TRUE) THEN
          REPEAT
            InvtPeriod3 := InvtPeriod2;
            InvtPeriod3.Closed := NOT ReOpen;
            InvtPeriod3.MODIFY;
            CreateInvtPeriodEntry(InvtPeriod3);
          UNTIL InvtPeriod2.NEXT = 0;

        Closed := NOT ReOpen;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateInvtPeriodEntry@11(InvtPeriod@1000 : Record 5814);
    VAR
      InvtPeriodEntry@1001 : Record 5815;
      ItemRegister@1003 : Record 46;
      EntryNo@1002 : Integer;
    BEGIN
      WITH InvtPeriod DO BEGIN
        InvtPeriodEntry.SETRANGE("Ending Date","Ending Date");
        IF InvtPeriodEntry.FINDLAST THEN
          EntryNo := InvtPeriodEntry."Entry No." + 1
        ELSE
          EntryNo := 1;

        InvtPeriodEntry.INIT;
        InvtPeriodEntry."Entry No." := EntryNo;
        InvtPeriodEntry."Ending Date" := "Ending Date";
        InvtPeriodEntry."User ID" := USERID;
        InvtPeriodEntry."Creation Date" := WORKDATE;
        InvtPeriodEntry."Creation Time" := TIME;
        IF Closed THEN BEGIN
          InvtPeriodEntry."Entry Type" := InvtPeriodEntry."Entry Type"::Close;
          IF ItemRegister.FINDLAST THEN
            InvtPeriodEntry."Closing Item Register No." := ItemRegister."No.";
        END ELSE
          InvtPeriodEntry."Entry Type" := InvtPeriodEntry."Entry Type"::"Re-open";

        InvtPeriodEntry.INSERT;
      END;
    END;

    PROCEDURE SetReOpen@13(NewReOpen@1000 : Boolean);
    BEGIN
      ReOpen := NewReOpen;
    END;

    PROCEDURE SetHideDialog@6(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    PROCEDURE UTlocalCall@1(localFunctionName@1000 : Text[30];InvtPeriod@1001 : Record 5814);
    BEGIN
      CASE localFunctionName OF
        'CreateInvtPeriodEntry': CreateInvtPeriodEntry(InvtPeriod);
        ELSE
          ERROR('Local function %1 is not included for test.',localFunctionName);
      END;
    END;

    BEGIN
    END.
  }
}
