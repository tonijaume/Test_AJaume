OBJECT Codeunit 7111 Insert Analysis Line
{
  OBJECT-PROPERTIES
  {
    Date=13/02/07;
    Time=12:00:00;
    Version List=NAVW15.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE InsertItems@12(VAR AnalysisLine@1000 : Record 7114);
    VAR
      Item@1001 : Record 27;
      ItemList@1002 : Form 31;
      ItemCount@1003 : Integer;
      AnalysisLineNo@1004 : Integer;
    BEGIN
      ItemList.LOOKUPMODE(TRUE);
      IF ItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ItemList.SetSelection(Item);
        ItemCount := Item.COUNT;
        IF ItemCount > 0 THEN BEGIN
          MoveAnalysisLines(AnalysisLine,AnalysisLineNo,ItemCount);

          IF Item.FIND('-') THEN
            REPEAT
              InsertAnalysisLine(
                AnalysisLine,AnalysisLineNo,
                Item.Description,Item."No.",AnalysisLine.Type::Item,FALSE,0);
            UNTIL Item.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE InsertCust@42(VAR AnalysisLine@1000 : Record 7114);
    VAR
      Cust@1001 : Record 18;
      CustList@1002 : Form 22;
      CustCount@1003 : Integer;
      AnalysisLineNo@1004 : Integer;
    BEGIN
      CustList.LOOKUPMODE(TRUE);
      IF CustList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        CustList.SetSelection(Cust);
        CustCount := Cust.COUNT;
        IF CustCount > 0 THEN BEGIN
          MoveAnalysisLines(AnalysisLine,AnalysisLineNo,CustCount);

          IF Cust.FIND('-') THEN
            REPEAT
              InsertAnalysisLine(
                AnalysisLine,AnalysisLineNo,
                Cust.Name,Cust."No.",AnalysisLine.Type::Customer,FALSE,0);
            UNTIL Cust.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE InsertVend@57(VAR AnalysisLine@1000 : Record 7114);
    VAR
      Vend@1001 : Record 23;
      VendList@1002 : Form 27;
      VendCount@1003 : Integer;
      AnalysisLineNo@1004 : Integer;
    BEGIN
      VendList.LOOKUPMODE(TRUE);
      IF VendList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        VendList.SetSelection(Vend);
        VendCount := Vend.COUNT;
        IF VendCount > 0 THEN BEGIN
          MoveAnalysisLines(AnalysisLine,AnalysisLineNo,VendCount);

          IF Vend.FIND('-') THEN
            REPEAT
              InsertAnalysisLine(
                AnalysisLine,AnalysisLineNo,
                Vend.Name,Vend."No.",AnalysisLine.Type::Vendor,FALSE,0);
            UNTIL Vend.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE InsertItemGrDim@56(VAR AnalysisLine@1000 : Record 7114);
    VAR
      InventorySetup@1005 : Record 313;
    BEGIN
      InventorySetup.GET;
      InventorySetup.TESTFIELD("Item Group Dimension Code");
      InsertGroup(
        AnalysisLine,
        InventorySetup."Item Group Dimension Code",
        AnalysisLine.Type::"Item Group");
    END;

    PROCEDURE InsertCustGrDim@58(VAR AnalysisLine@1000 : Record 7114);
    VAR
      SalesSetup@1001 : Record 311;
    BEGIN
      SalesSetup.GET;
      SalesSetup.TESTFIELD("Customer Group Dimension Code");
      InsertGroup(
        AnalysisLine,
        SalesSetup."Customer Group Dimension Code",
        AnalysisLine.Type::"Customer Group");
    END;

    PROCEDURE InsertSalespersonPurchaser@25(VAR AnalysisLine@1000 : Record 7114);
    VAR
      SalesSetup@1001 : Record 311;
    BEGIN
      SalesSetup.GET;
      SalesSetup.TESTFIELD("Salesperson Dimension Code");
      InsertGroup(
        AnalysisLine,
        SalesSetup."Salesperson Dimension Code",
        AnalysisLine.Type::"Sales/Purchase person");
    END;

    LOCAL PROCEDURE InsertGroup@3(VAR AnalysisLine@1000 : Record 7114;GroupDimCode@1006 : Code[20];TotalingType@1007 : Integer);
    VAR
      DimVal@1001 : Record 349;
      DimValList@1002 : Form 560;
      DimValCount@1003 : Integer;
      AnalysisLineNo@1004 : Integer;
    BEGIN
      DimVal.FILTERGROUP := 2;
      DimVal.SETRANGE("Dimension Code",GroupDimCode);
      DimVal.FILTERGROUP := 0;
      DimValList.SETTABLEVIEW(DimVal);
      DimValList.LOOKUPMODE(TRUE);
      IF DimValList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimValList.SetSelection(DimVal);
        DimValCount := DimVal.COUNT;
        IF DimValCount > 0 THEN BEGIN
          MoveAnalysisLines(AnalysisLine,AnalysisLineNo,DimValCount);

          IF DimVal.FIND('-') THEN
            REPEAT
              InsertAnalysisLine(
                AnalysisLine,AnalysisLineNo,
                DimVal.Name,DimVal.Code,TotalingType,
                DimVal."Dimension Value Type" <> DimVal."Dimension Value Type"::Standard,
                DimVal.Indentation);
            UNTIL DimVal.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE MoveAnalysisLines@1(VAR AnalysisLine@1000 : Record 7114;VAR AnalysisLineNo@1002 : Integer;NewLineCount@1003 : Integer);
    VAR
      i@1001 : Integer;
    BEGIN
      WITH AnalysisLine DO BEGIN
        AnalysisLineNo := "Line No.";
        SETRANGE("Analysis Area","Analysis Area");
        SETRANGE("Analysis Line Template Name","Analysis Line Template Name");
        IF FIND('+') THEN
          REPEAT
            i := "Line No.";
            IF i >= AnalysisLineNo THEN BEGIN
              DELETE;
              "Line No." := i + 10000 * NewLineCount;
              INSERT(TRUE);
            END;
          UNTIL (i <= AnalysisLineNo) OR (NEXT(-1) = 0);

        IF AnalysisLineNo = 0 THEN
          AnalysisLineNo := 10000;
      END;
    END;

    LOCAL PROCEDURE InsertAnalysisLine@2(VAR AnalysisLine@1001 : Record 7114;VAR AnalysisLineNo@1000 : Integer;Text@1002 : Text[50];No@1003 : Code[20];Type2@1004 : Integer;Bold2@1006 : Boolean;Indent@1008 : Integer);
    VAR
      RecRef@1007 : RecordRef;
      ChangeLogMgt@1005 : Codeunit 423;
    BEGIN
      WITH AnalysisLine DO BEGIN
        INIT;
        "Line No." := AnalysisLineNo;
        AnalysisLineNo := AnalysisLineNo + 10000;
        Description := Text;
        Range := No;
        "Row Ref. No." := COPYSTR(No,1,MAXSTRLEN("Row Ref. No."));
        Type := Type2;
        Bold := Bold2;
        Indentation := Indent;
        INSERT(TRUE);
        RecRef.GETTABLE(AnalysisLine);
        ChangeLogMgt.LogInsertion(RecRef);
      END;
    END;

    BEGIN
    END.
  }
}
