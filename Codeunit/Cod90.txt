OBJECT Codeunit 90 Purch.-Post
{
  OBJECT-PROPERTIES
  {
    Date=26/08/13;
    Time=[ 9:51:37];
    Modified=Yes;
    Version List=AIC2009,NAVW16.00.01,NAVES6.00.01,RegF269949;
  }
  PROPERTIES
  {
    TableNo=38;
    Permissions=TableData 36=m,
                TableData 37=m,
                TableData 39=imd,
                TableData 49=imd,
                TableData 93=imd,
                TableData 94=imd,
                TableData 110=imd,
                TableData 111=imd,
                TableData 120=imd,
                TableData 121=imd,
                TableData 122=imd,
                TableData 123=imd,
                TableData 124=imd,
                TableData 125=imd,
                TableData 223=imd,
                TableData 357=imd,
                TableData 359=imd,
                TableData 6507=ri,
                TableData 6508=rid,
                TableData 6650=imd,
                TableData 6651=imd;
    OnRun=VAR
            ItemChargeAssgntPurch@1000 : Record 5805;
            TempJnlLineDim@1001 : TEMPORARY Record 356;
            ItemEntryRelation@1007 : Record 6507;
            TempInvoicingSpecification@1013 : TEMPORARY Record 336;
            DummyTrackingSpecification@1014 : Record 336;
            Vendor@1016 : Record 23;
            ICHandledInboxTransaction@1015 : Record 420;
            ICPartner@1017 : Record 413;
            SalesSetup@1019 : Record 311;
            SalesCommentLine@1018 : Record 44;
            PurchInvHdr@1006 : Record 122;
            PurchHeader2@1011 : Record 38;
            ICInboxPurchHdr@1012 : Record 436;
            SalesHeader@1041 : Record 36;
            UpdateAnalysisView@1002 : Codeunit 410;
            UpdateItemAnalysisView@1008 : Codeunit 7150;
            CostBaseAmount@1003 : Decimal;
            TrackingSpecificationExists@1010 : Boolean;
            EndLoop@1009 : Boolean;
            TempPrePmtAmtToDeduct@1004 : Decimal;
            vNumDocCre@1100253000 : Code[20];
          BEGIN
            IF PostingDateExists AND (ReplacePostingDate OR ("Posting Date" = 0D)) THEN BEGIN
              "Posting Date" := PostingDate;
              VALIDATE("Currency Code");
            END;

            IF PostingDateExists AND (ReplaceDocumentDate OR ("Document Date" = 0D)) THEN
              VALIDATE("Document Date",PostingDate);

            CLEARALL;
            PurchHeader.COPY(Rec);
            WITH PurchHeader DO BEGIN
              TESTFIELD("Document Type");
              TESTFIELD("Buy-from Vendor No.");
              TESTFIELD("Pay-to Vendor No.");
              TESTFIELD("Posting Date");
              TESTFIELD("Document Date");

              // INCOMING
              //$001
              rPar.FIND('-');
              IF rPar."Departamento obligatorio" THEN
                PurchHeader.TESTFIELD("Shortcut Dimension 1 Code");

              // $008 AJS 27.02.2007, Escaneo documentos
              // $012 AJS 05.05.2007, Escaneo documentos

              //-$017IF NOT PurchHeader.Anulaci¢n THEN
              //-$017  cFunCont.ComprobarCodBarrasRegistro("Codigo barras PDF");

              // $005 AJS, Comprobantes Fiscales
              // $008
              IF ( "Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"] ) AND
                 ( NOT Anulaci¢n ) THEN BEGIN

                IF NOT cFunCont.ComprobacionComprobanteFiscal("Comprobante Fiscal", "Tipo factura compra") THEN
                  ERROR(Text50000);
                // $011
                IF NOT cFunCont.ComprobarNCFRepetido("Buy-from Vendor No.", "Comprobante Fiscal", "No.") THEN
                  ERROR(Text50001);

                cFunCont.ComprobarCodBarrasRegistro("Codigo barras PDF"); //+$017
              END;

              // AJS 28.02.2007, Escaneo documentos
              // AJS 05.05.2007, Escaneo documentos
              // AJS 02.09.2007, Escaneo documentos
              // $015 JPT 11/03/08 Escaneo documentos

              IF "Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"] THEN //+$017
                cFunVar.MantenMarcaArchivo(1 , "Document Type", "No.");

              IF GenJnlCheckLine.DateNotAllowed("Posting Date") THEN
                FIELDERROR("Posting Date",Text045);

              IF TransportMethod.GET("Transport Method") AND TransportMethod."Port/Airport" THEN
                TESTFIELD("Entry Point");

              PurchSetup.GET;

              // ARM 11/02/2010 obligamos a introducir el num. albarán proveedor
              IF "Document Type" = "Document Type"::Order THEN
                TESTFIELD("Vendor Shipment No.");

              IF PurchSetup."Calc. Inv. Discount" AND
                 (Status <> Status::Open) AND
                 NOT ItemChargeAssgntOnly
              THEN BEGIN
                PurchLine.RESET;
                PurchLine.SETRANGE("Document Type","Document Type");
                PurchLine.SETRANGE("Document No.","No.");
                PurchLine.FIND('-');
                TempInvoice := Invoice;
                TempRcpt := Receive;
                MODIFY;
                PurchCalcDisc.RUN(PurchLine);
                GET("Document Type","No.");
                Invoice := TempInvoice;
                Receive := TempRcpt;
                COMMIT;
              END;

              IF Receive OR Ship THEN
                ArchiveUnpostedOrder; // has a COMMIT;

              PaymentTerms.GET("Payment Terms Code");
              CASE "Document Type" OF
                "Document Type"::Order:
                  Ship := FALSE;
                "Document Type"::Invoice:
                  BEGIN
                    Receive := TRUE;
                    Invoice := TRUE;
                    Ship := FALSE;
                  END;
                "Document Type"::"Return Order":
                  Receive := FALSE;
                "Document Type"::"Credit Memo":
                  BEGIN
                    Receive := FALSE;
                    Invoice := TRUE;
                    Ship := TRUE;
                  END;
              END;

              IF NOT (Receive OR Invoice OR Ship) THEN
                ERROR(
                  Text025,
                  FIELDCAPTION(Receive),FIELDCAPTION(Invoice),FIELDCAPTION(Ship));

              WhseReference := "Posting from Whse. Ref.";
              "Posting from Whse. Ref." := 0;

              IF Invoice THEN
                CreatePrepmtLines(PurchHeader,TempPrepmtPurchLine,PrepmtDocDim,TRUE);
              CopyAndCheckDocDimToTempDocDim;

              CopyAprvlToTempApprvl;

              Vend.GET("Buy-from Vendor No.");
              Vend.CheckBlockedVendOnDocs(Vend,TRUE);
              IF "Pay-to Vendor No." <> "Buy-from Vendor No." THEN BEGIN
                Vend.GET("Pay-to Vendor No.");
                Vend.CheckBlockedVendOnDocs(Vend,TRUE);
              END;

              IF "Send IC Document" AND ("IC Direction" = "IC Direction"::Outgoing) AND
                 ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) THEN
                IF NOT CONFIRM(Text058) THEN
                  ERROR('');

              IF Invoice AND ("IC Direction" = "IC Direction"::Incoming) THEN BEGIN
                IF "Document Type" = "Document Type"::Order THEN BEGIN
                  PurchHeader2.SETRANGE("Document Type","Document Type"::Invoice);
                  PurchHeader2.SETRANGE("Vendor Order No.","Vendor Order No.");
                  IF PurchHeader2.FINDFIRST THEN
                    IF NOT CONFIRM(Text052,TRUE,PurchHeader."No.",PurchHeader2."No.") THEN
                      ERROR('');
                  ICInboxPurchHdr.SETRANGE("Document Type","Document Type"::Invoice);
                  ICInboxPurchHdr.SETRANGE("Vendor Order No.","Vendor Order No.");
                  IF ICInboxPurchHdr.FINDFIRST THEN
                    IF NOT CONFIRM(Text053,TRUE,PurchHeader."No.",ICInboxPurchHdr."No.") THEN
                      ERROR('');
                  PurchInvHdr.SETRANGE("Vendor Order No.","Vendor Order No.");
                  IF PurchInvHdr.FINDFIRST THEN
                    IF NOT CONFIRM(Text054,FALSE,PurchInvHdr."No.",PurchHeader."No.") THEN
                      ERROR('');
                END;
                IF ("Document Type" = "Document Type"::Invoice) AND ("Vendor Order No." <> '') THEN BEGIN
                  PurchHeader2.SETRANGE("Document Type","Document Type"::Order);
                  PurchHeader2.SETRANGE("Vendor Order No.","Vendor Order No.");
                  IF PurchHeader2.FINDFIRST THEN
                    IF NOT CONFIRM(Text055,TRUE,PurchHeader2."No.",PurchHeader."No.") THEN
                      ERROR('');
                  ICInboxPurchHdr.SETRANGE("Document Type","Document Type"::Order);
                  ICInboxPurchHdr.SETRANGE("Vendor Order No.","Vendor Order No.");
                  IF ICInboxPurchHdr.FINDFIRST THEN
                    IF NOT CONFIRM(Text056,TRUE,PurchHeader."No.",ICInboxPurchHdr."No.") THEN
                      ERROR('');
                  PurchInvHdr.SETRANGE("Vendor Order No.","Vendor Order No.");
                  IF PurchInvHdr.FINDFIRST THEN
                    IF NOT CONFIRM(Text057,FALSE,PurchInvHdr."No.",PurchHeader."No.") THEN
                      ERROR('');
                END;
              END;


            IF ("Document Type" = "Document Type"::"Credit Memo") OR
              (("Document Type" = "Document Type"::"Return Order") AND Invoice) THEN BEGIN // es0015
                IF PurchSetup."Correct. Doc. No. Mandatory" THEN
                  TESTFIELD("Corrected Invoice No.")
                ELSE BEGIN
                  IF "Corrected Invoice No." = '' THEN
                    IF NOT
                      CONFIRM(
                        Text1100000,FALSE)
                    THEN
                      ERROR(Text1100011);
                END;
              IF "Corrected Invoice No." <> '' THEN
                "Posting Description" := FORMAT(Text1100104) + ' ' + "No."

              // $007 AJS 07.02.2007, Texto de registro
              //IF "Corrected Invoice No." <> '' THEN
              //  "Posting Description" := FORMAT(Text1100104) + ' ' + "No."
            END;

              IF (Receive OR Invoice) AND (NOT( "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"]))
              THEN BEGIN
                TESTFIELD("Payment Method Code");
                TESTFIELD("Payment Terms Code");
              END;

              IF Invoice THEN BEGIN
                PurchLine.RESET;
                PurchLine.SETRANGE("Document Type","Document Type");
                PurchLine.SETRANGE("Document No.","No.");
                PurchLine.SETFILTER(Quantity,'<>0');
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"] THEN
                  PurchLine.SETFILTER("Qty. to Invoice",'<>0');
                Invoice := NOT PurchLine.ISEMPTY;
                IF Invoice AND (NOT Receive) AND
                   ("Document Type" = "Document Type"::Order)
                THEN BEGIN
                  Invoice := FALSE;
                  PurchLine.FINDSET;
                  REPEAT
                    Invoice := (PurchLine."Quantity Received" - PurchLine."Quantity Invoiced") <> 0;
                  UNTIL Invoice OR (PurchLine.NEXT = 0);
                END ELSE
                  IF Invoice AND (NOT (Ship)) AND
                     ("Document Type" = "Document Type"::"Return Order")
                  THEN BEGIN
                    Invoice := FALSE;
                    PurchLine.FINDSET;
                    REPEAT
                      Invoice := (PurchLine."Return Qty. Shipped" - PurchLine."Quantity Invoiced") <> 0;
                    UNTIL Invoice OR (PurchLine.NEXT = 0);
                  END;
              END;

              IF Invoice THEN
                CopyAndCheckItemCharge(PurchHeader);

              IF Receive THEN BEGIN
                PurchLine.RESET;
                PurchLine.SETRANGE("Document Type","Document Type");
                PurchLine.SETRANGE("Document No.","No.");
                PurchLine.SETFILTER(Quantity,'<>0');
                IF "Document Type" = "Document Type"::Order THEN
                  PurchLine.SETFILTER("Qty. to Receive",'<>0');
                PurchLine.SETRANGE("Receipt No.",'');
                Receive := PurchLine.FINDFIRST;
                WhseReceive := TempWhseRcptHeader.FINDFIRST;
                WhseShip := TempWhseShptHeader.FINDFIRST;
                InvtPickPutaway := WhseReference <> 0;
                IF Receive THEN
                  CheckTrackingSpecification(PurchLine);
                IF Receive AND NOT (WhseReceive OR WhseShip OR InvtPickPutaway) THEN
                  CheckWarehouse(PurchLine);
              END;

              IF Ship THEN BEGIN
                PurchLine.RESET;
                PurchLine.SETRANGE("Document Type","Document Type");
                PurchLine.SETRANGE("Document No.","No.");
                PurchLine.SETFILTER(Quantity,'<>0');
                PurchLine.SETFILTER("Return Qty. to Ship",'<>0');
                PurchLine.SETRANGE("Return Shipment No.",'');
                Ship := PurchLine.FINDFIRST;
                WhseReceive := TempWhseRcptHeader.FINDFIRST;
                WhseShip := TempWhseShptHeader.FINDFIRST;
                InvtPickPutaway := WhseReference <> 0;
                IF Ship THEN
                  CheckTrackingSpecification(PurchLine);
                IF Ship AND NOT (WhseShip OR WhseReceive OR InvtPickPutaway) THEN
                  CheckWarehouse(PurchLine);
              END;

              IF NOT (Receive OR Invoice OR Ship) THEN
                IF NOT OnlyAssgntPosting THEN
                  ERROR(Text001);

              IF Invoice THEN BEGIN
                PurchLine.RESET;
                PurchLine.SETRANGE("Document Type","Document Type");
                PurchLine.SETRANGE("Document No.","No.");
                PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                IF PurchLine.FINDSET THEN
                  REPEAT
                    SalesOrderLine.GET(
                      SalesOrderLine."Document Type"::Order,
                      PurchLine."Sales Order No.",PurchLine."Sales Order Line No.");
                    IF Receive AND
                       Invoice AND
                       (PurchLine."Qty. to Invoice" <> 0) AND
                       (PurchLine."Qty. to Receive" <> 0)
                    THEN
                      ERROR(Text002);
                    IF ABS(PurchLine."Quantity Received" - PurchLine."Quantity Invoiced") <
                       ABS(PurchLine."Qty. to Invoice")
                    THEN BEGIN
                      PurchLine."Qty. to Invoice" := PurchLine."Quantity Received" - PurchLine."Quantity Invoiced";
                      PurchLine."Qty. to Invoice (Base)" := PurchLine."Qty. Received (Base)" - PurchLine."Qty. Invoiced (Base)";
                    END;
                    IF ABS(PurchLine.Quantity - (PurchLine."Qty. to Invoice" + PurchLine."Quantity Invoiced")) <
                       ABS(SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced")
                    THEN
                      ERROR(
                        Text003 +
                        Text004,
                        PurchLine."Sales Order No.");
                  UNTIL PurchLine.NEXT = 0;
              END;

              IF Invoice THEN BEGIN
                IF NOT ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) THEN BEGIN
                  TESTFIELD("Due Date");
                  PaymentTerms.VerifyMaxNoDaysTillDueDate("Due Date","Document Date",FIELDCAPTION("Due Date"));
                END;
                IF GUIALLOWED THEN
                  Window.OPEN(
                    '#1#################################\\' +
                    Text005 +
                    Text006 +
                    Text007 +
                    Text1100102 + // es0012
                    Text1100103)
              END ELSE
                IF GUIALLOWED THEN
                  Window.OPEN(
                    '#1############################\\' +
                    Text009);

              IF GUIALLOWED THEN
                Window.UPDATE(1,STRSUBSTNO('%1 %2',"Document Type","No."));

              GetGLSetup;
              GetCurrency;

              IF Invoice AND PurchSetup."Ext. Doc. No. Mandatory" THEN
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
                  TESTFIELD("Vendor Invoice No.")
                ELSE
                  TESTFIELD("Vendor Cr. Memo No.");

              IF Receive AND ("Receiving No." = '') THEN
                IF ("Document Type" = "Document Type"::Order) OR
                   (("Document Type" = "Document Type"::Invoice) AND PurchSetup."Receipt on Invoice")
                THEN BEGIN
                  TESTFIELD("Receiving No. Series");
                  "Receiving No." := NoSeriesMgt.GetNextNo("Receiving No. Series","Posting Date",TRUE);
                  ModifyHeader := TRUE;
                END;

              IF Ship AND ("Return Shipment No." = '') THEN
                IF ("Document Type" = "Document Type"::"Return Order") OR
                   (("Document Type" = "Document Type"::"Credit Memo") AND PurchSetup."Return Shipment on Credit Memo")
                THEN BEGIN
                  TESTFIELD("Return Shipment No. Series");
                  "Return Shipment No." := NoSeriesMgt.GetNextNo("Return Shipment No. Series","Posting Date",TRUE);
                  ModifyHeader := TRUE;
                END;

              IF Invoice AND ("Posting No." = '') THEN BEGIN
                IF ("No. Series" <> '') OR
                   ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"])
                THEN
                  TESTFIELD("Posting No. Series");
                IF ("No. Series" <> "Posting No. Series") OR
                   ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"])
                THEN BEGIN
                  "Posting No." := NoSeriesMgt.GetNextNo("Posting No. Series","Posting Date",TRUE);
                  ModifyHeader := TRUE;
                END;
              END;

              IF NOT ItemChargeAssgntOnly THEN BEGIN
                PurchLine.RESET;
                PurchLine.SETRANGE("Document Type","Document Type");
                PurchLine.SETRANGE("Document No.","No.");
                PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                IF PurchLine.FINDSET THEN BEGIN
                  DropShipOrder := TRUE;
                  IF Receive THEN
                    REPEAT
                      IF SalesOrderHeader."No." <> PurchLine."Sales Order No." THEN BEGIN
                        SalesOrderHeader.GET(
                          SalesOrderHeader."Document Type"::Order,
                          PurchLine."Sales Order No.");
                        SalesOrderHeader.TESTFIELD("Bill-to Customer No.");
                        IF SalesOrderHeader."Shipping No." = '' THEN BEGIN
                          SalesOrderHeader.TESTFIELD("Shipping No. Series");
                          SalesOrderHeader."Shipping No." :=
                            NoSeriesMgt.GetNextNo(SalesOrderHeader."Shipping No. Series","Posting Date",TRUE);
                          IF NOT RECORDLEVELLOCKING THEN
                            LOCKTABLE(TRUE,TRUE);
                          SalesOrderHeader.MODIFY;
                          ModifyHeader := TRUE;
                        END;
                      END;
                    UNTIL PurchLine.NEXT = 0;
                END;
              END;
              IF ModifyHeader THEN BEGIN
                MODIFY;
              END;

              IF (Status = Status::Open) OR (Status = Status::"Pending Prepayment") THEN BEGIN
                TempInvoice := Invoice;
                TempRcpt := Receive;
                TempReturn := Ship;
                CODEUNIT.RUN(CODEUNIT::"Release Purchase Document",PurchHeader);
                Status := Status::Open;
                Invoice := TempInvoice;
                Receive := TempRcpt;
                Ship := TempReturn;
                MODIFY;
                COMMIT;
                Status := Status::Released;
              END;
              IF (PurchHeader."Buy-from IC Partner Code" <> '') AND (ICPartner.GET(PurchHeader."Buy-from IC Partner Code")) THEN
                ICPartner.TESTFIELD(Blocked,FALSE);
              IF (PurchHeader."Pay-to IC Partner Code" <> '') AND (ICPartner.GET(PurchHeader."Pay-to IC Partner Code")) THEN
                ICPartner.TESTFIELD(Blocked,FALSE);
              IF "Send IC Document" AND ("IC Status" = "IC Status"::New) AND ("IC Direction" = "IC Direction"::Outgoing) AND
                 ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"])
              THEN BEGIN
                ICInOutBoxMgt.SendPurchDoc(Rec,TRUE);
                "IC Status" := "IC Status"::Pending;
                ModifyHeader := TRUE;
              END;
              IF "IC Direction" = "IC Direction"::Incoming THEN BEGIN
                CASE PurchHeader."Document Type" OF
                  PurchHeader."Document Type"::Invoice:
                    ICHandledInboxTransaction.SETRANGE("Document No.",PurchHeader."Vendor Invoice No.");
                  PurchHeader."Document Type"::Order:
                    ICHandledInboxTransaction.SETRANGE("Document No.",PurchHeader."Vendor Order No.");
                  PurchHeader."Document Type"::"Credit Memo":
                    ICHandledInboxTransaction.SETRANGE("Document No.",PurchHeader."Vendor Cr. Memo No.");
                  PurchHeader."Document Type"::"Return Order":
                    ICHandledInboxTransaction.SETRANGE("Document No.",PurchHeader."Vendor Order No.");
                END;
                Vendor.GET(PurchHeader."Buy-from Vendor No.");
                ICHandledInboxTransaction.SETRANGE("IC Partner Code",Vendor."IC Partner Code");
                ICHandledInboxTransaction.LOCKTABLE;
                IF ICHandledInboxTransaction.FINDFIRST THEN BEGIN
                  ICHandledInboxTransaction.Status := ICHandledInboxTransaction.Status::Posted;
                  ICHandledInboxTransaction.MODIFY;
                END;
              END;

              IF RECORDLEVELLOCKING THEN BEGIN
                DocDim.LOCKTABLE;
                PurchLine.LOCKTABLE;
                SalesOrderLine.LOCKTABLE;
                GLEntry.LOCKTABLE;
                IF GLEntry.FINDLAST THEN;
              END;

              SourceCodeSetup.GET;
              SrcCode := SourceCodeSetup.Purchases;

              // Insert receipt header
              IF Receive THEN BEGIN
                IF ("Document Type" = "Document Type"::Order) OR
                   (("Document Type" = "Document Type"::Invoice) AND PurchSetup."Receipt on Invoice")
                THEN BEGIN
                  IF DropShipOrder THEN BEGIN
                    PurchRcptHeader.LOCKTABLE;
                    PurchRcptLine.LOCKTABLE;
                    SalesShptHeader.LOCKTABLE;
                    SalesShptLine.LOCKTABLE;
                  END;
                  PurchRcptHeader.INIT;
                  PurchRcptHeader.TRANSFERFIELDS(PurchHeader);
                  PurchRcptHeader."No." := "Receiving No.";
                  IF "Document Type" = "Document Type"::Order THEN BEGIN
                    PurchRcptHeader."Order No. Series" := "No. Series";
                    PurchRcptHeader."Order No." := "No.";
                  END;
                  PurchRcptHeader."No. Printed" := 0;
                  PurchRcptHeader."Source Code" := SrcCode;
                  PurchRcptHeader."User ID" := USERID;
                  PurchRcptHeader.INSERT;
                  DimMgt.MoveOneDocDimToPostedDocDim(
                    TempDocDim,DATABASE::"Purchase Header","Document Type","No.",0,
                    DATABASE::"Purch. Rcpt. Header",PurchRcptHeader."No.");

                  ApprovalMgt.MoveApprvalEntryToPosted(TempApprovalEntry,DATABASE::"Purch. Rcpt. Header",PurchRcptHeader."No.");

                  IF PurchSetup."Copy Comments Order to Receipt" THEN BEGIN
                    CopyCommentLines(
                      "Document Type",PurchCommentLine."Document Type"::Receipt,
                      "No.",PurchRcptHeader."No.");
                    PurchRcptHeader.COPYLINKS(Rec);
                  END;
                  IF WhseReceive THEN BEGIN
                    WhseRcptHeader.GET(TempWhseRcptHeader."No.");
                    WhsePostRcpt.CreatePostedRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,"Receiving No.","Posting Date");
                  END;
                  IF WhseShip THEN BEGIN
                    WhseShptHeader.GET(TempWhseShptHeader."No.");
                    WhsePostShpt.CreatePostedShptHeader(PostedWhseShptHeader,WhseShptHeader,"Receiving No.","Posting Date");
                  END;
                END;
                IF SalesHeader.GET("Document Type",PurchLine."Sales Order No.") THEN
                  ServItemMgt.CopyReservationEntry(SalesHeader);
              END;
              // Insert return shipment header
              IF Ship THEN
                IF ("Document Type" = "Document Type"::"Return Order") OR
                   (("Document Type" = "Document Type"::"Credit Memo") AND PurchSetup."Return Shipment on Credit Memo")
                THEN BEGIN
                  ReturnShptHeader.INIT;
                  ReturnShptHeader.TRANSFERFIELDS(PurchHeader);
                  ReturnShptHeader."No." := "Return Shipment No.";
                  IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
                    ReturnShptHeader."Return Order No. Series" := "No. Series";
                    ReturnShptHeader."Return Order No." := "No.";
                  END;
                  ReturnShptHeader."No. Series" := "Return Shipment No. Series";
                  ReturnShptHeader."No. Printed" := 0;
                  ReturnShptHeader."Source Code" := SrcCode;
                  ReturnShptHeader."User ID" := USERID;
                  ReturnShptHeader.INSERT;
                  DimMgt.MoveOneDocDimToPostedDocDim(
                    TempDocDim,DATABASE::"Purchase Header","Document Type","No.",0,
                    DATABASE::"Return Shipment Header",ReturnShptHeader."No.");

                  ApprovalMgt.MoveApprvalEntryToPosted(TempApprovalEntry,DATABASE::"Return Shipment Header",ReturnShptHeader."No.");

                  IF PurchSetup."Copy Cmts Ret.Ord. to Ret.Shpt" THEN BEGIN
                    CopyCommentLines(
                      "Document Type",PurchCommentLine."Document Type"::"Posted Return Shipment",
                      "No.",ReturnShptHeader."No.");
                    ReturnShptHeader.COPYLINKS(Rec);
                  END;
                  IF WhseShip THEN BEGIN
                    WhseShptHeader.GET(TempWhseShptHeader."No.");
                    WhsePostShpt.CreatePostedShptHeader(PostedWhseShptHeader,WhseShptHeader,"Return Shipment No.","Posting Date");
                  END;
                  IF WhseReceive THEN BEGIN
                    WhseRcptHeader.GET(TempWhseRcptHeader."No.");
                    WhsePostRcpt.CreatePostedRcptHeader(PostedWhseRcptHeader,WhseRcptHeader,"Return Shipment No.","Posting Date");
                  END;
                END;

              // Insert invoice header or credit memo header
              IF Invoice THEN
                IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
                  PurchInvHeader.INIT;
                  PurchInvHeader.TRANSFERFIELDS(PurchHeader);
                  IF "Document Type" = "Document Type"::Order THEN BEGIN
                    PurchInvHeader."Pre-Assigned No. Series" := '';
                    PurchInvHeader."No." := "Posting No.";
                    PurchInvHeader."Order No. Series" := "No. Series";
                    PurchInvHeader."Order No." := "No.";
                    IF GUIALLOWED THEN
                      Window.UPDATE(1,STRSUBSTNO(Text010,"Document Type","No.",PurchInvHeader."No."));
                  END ELSE BEGIN
                    IF "Posting No." <> '' THEN BEGIN
                      PurchInvHeader."No." := "Posting No.";
                      IF GUIALLOWED THEN
                        Window.UPDATE(1,STRSUBSTNO(Text010,"Document Type","No.",PurchInvHeader."No."));
                    END;
                    PurchInvHeader."Pre-Assigned No. Series" := "No. Series";
                    PurchInvHeader."Pre-Assigned No." := "No.";
                  END;
                  PurchInvHeader."Source Code" := SrcCode;
                  PurchInvHeader."User ID" := USERID;
                  PurchInvHeader."No. Printed" := 0;

                  PurchLine4.COPY(PurchLine);
                  PurchLine4.SETRANGE("Sales Order Line No.");
                  PurchLine4.SETRANGE("VAT Calculation Type",PurchLine4."VAT Calculation Type"::"Reverse Charge VAT");
                  IF ("Generate Autoinvoices") OR
                     (PurchLine4.FIND('-')) THEN BEGIN
                    "Generate Autoinvoices" := TRUE;
                    AutoDocNo := '';
                    GLSetup.TESTFIELD("Autoinvoice Nos.");
                    AutoDocNo := NoSeriesMgt.GetNextNo(
                      GLSetup."Autoinvoice Nos.","Posting Date",TRUE);
                    PurchInvHeader."Autoinvoice No." := AutoDocNo;
                  END;
                  PurchLine4.SETRANGE("VAT Calculation Type");

                  PurchInvHeader.INSERT;
                  DimMgt.MoveOneDocDimToPostedDocDim(
                    TempDocDim,DATABASE::"Purchase Header","Document Type","No.",0,
                    DATABASE::"Purch. Inv. Header",PurchInvHeader."No.");

                  ApprovalMgt.MoveApprvalEntryToPosted(TempApprovalEntry,DATABASE::"Purch. Inv. Header",PurchInvHeader."No.");

                  IF PurchSetup."Copy Comments Order to Invoice" THEN BEGIN
                    CopyCommentLines(
                      "Document Type",PurchCommentLine."Document Type"::"Posted Invoice",
                      "No.",PurchInvHeader."No.");
                    PurchInvHeader.COPYLINKS(Rec);
                  END;
                  GenJnlLineDocType := GenJnlLine."Document Type"::Invoice;
                  GenJnlLineDocNo := PurchInvHeader."No.";
                  GenJnlLineExtDocNo := "Vendor Invoice No.";
                  // ARM Guardamos el numero de documento creado
                  vNumDocCre := PurchInvHeader."No.";
                END ELSE BEGIN // Credit Memo
                  PurchCrMemoHeader.INIT;
                  PurchCrMemoHeader.TRANSFERFIELDS(PurchHeader);
                  IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
                    PurchCrMemoHeader."No." := "Posting No.";
                    PurchCrMemoHeader."Pre-Assigned No. Series" := '';
                    PurchCrMemoHeader."Return Order No. Series" := "No. Series";
                    PurchCrMemoHeader."Return Order No." := "No.";
                    IF GUIALLOWED THEN
                      Window.UPDATE(1,STRSUBSTNO(Text011,"Document Type","No.",PurchCrMemoHeader."No."));
                  END ELSE BEGIN
                    PurchCrMemoHeader."Pre-Assigned No. Series" := "No. Series";
                    PurchCrMemoHeader."Pre-Assigned No." := "No.";
                    IF "Posting No." <> '' THEN BEGIN
                      PurchCrMemoHeader."No." := "Posting No.";
                      IF GUIALLOWED THEN
                        Window.UPDATE(1,STRSUBSTNO(Text011,"Document Type","No.",PurchCrMemoHeader."No."));
                    END;
                  END;
                  PurchCrMemoHeader."Source Code" := SrcCode;
                  PurchCrMemoHeader."User ID" := USERID;
                  PurchCrMemoHeader."No. Printed" := 0;

                  PurchLine3.COPY(PurchLine);
                  PurchLine3.SETRANGE("Sales Order Line No.");
                  PurchLine3.SETRANGE("VAT Calculation Type",PurchLine3."VAT Calculation Type"::"Reverse Charge VAT");
                  IF ("Generate Autocredit Memo") OR
                     (PurchLine3.FIND('-')) THEN BEGIN
                    "Generate Autocredit Memo" := TRUE;
                    AutoDocNo := '';
                    GLSetup.TESTFIELD("Autocredit Memo Nos.");
                    AutoDocNo := NoSeriesMgt.GetNextNo(
                      GLSetup."Autocredit Memo Nos.","Posting Date",TRUE);
                    PurchCrMemoHeader."Autocredit Memo No." := AutoDocNo;
                  END;
                  PurchLine3.SETRANGE("VAT Calculation Type");

                  PurchCrMemoHeader.INSERT(TRUE);
                  DimMgt.MoveOneDocDimToPostedDocDim(
                    TempDocDim,DATABASE::"Purchase Header","Document Type","No.",0,
                    DATABASE::"Purch. Cr. Memo Hdr.",PurchCrMemoHeader."No.");

                  ApprovalMgt.MoveApprvalEntryToPosted(TempApprovalEntry,DATABASE::"Purch. Cr. Memo Hdr.",PurchCrMemoHeader."No.");

                  IF PurchSetup."Copy Cmts Ret.Ord. to Cr. Memo" THEN BEGIN
                    CopyCommentLines(
                      "Document Type",PurchCommentLine."Document Type"::"Posted Credit Memo",
                      "No.",PurchCrMemoHeader."No.");
                    PurchCrMemoHeader.COPYLINKS(Rec);
                  END;
                  GenJnlLineDocType := GenJnlLine."Document Type"::"Credit Memo";
                  GenJnlLineDocNo := PurchCrMemoHeader."No.";
                  GenJnlLineExtDocNo := "Vendor Cr. Memo No.";
                  // ARM Guardamos el numero de documento creado
                  vNumDocCre := PurchCrMemoHeader."No.";

                END;

              // Lines
              InvPostingBuffer[1].DELETEALL;
              DropShptPostBuffer.DELETEALL;
              EverythingInvoiced := TRUE;

              PurchLine.RESET;
              PurchLine.SETRANGE("Document Type","Document Type");
              PurchLine.SETRANGE("Document No.","No.");
              LineCount := 0;
              RoundingLineInserted := FALSE;
              MergePurchLines(PurchHeader,PurchLine,TempPrepmtPurchLine,CombinedPurchLineTemp);

              TempVATAmountLineRemainder.DELETEALL;
              PurchLine.CalcVATAmountLines(1,PurchHeader,CombinedPurchLineTemp,TempVATAmountLine);

              IF PurchLine.FINDSET THEN
                _LineaRetencionISR("Document Type", "No."); //+$016

                _LineasRetencionITBIS("Document Type", "No."); //+$016
                REPEAT
                  JobPurchLine := PurchLine;
                  ItemJnlRollRndg := FALSE;
                  LineCount := LineCount + 1;
                  IF GUIALLOWED THEN
                    Window.UPDATE(2,LineCount);
                  IF Invoice THEN
                    TestPrepmtAmount;
                  IF PurchLine.Type = PurchLine.Type::"Charge (Item)" THEN BEGIN
                    PurchLine.TESTFIELD("Line Amount");
                    PurchLine.TESTFIELD("Job No.",'');
                  END;
                  IF PurchLine.Type = PurchLine.Type::Item THEN
                    CostBaseAmount := PurchLine."Line Amount";
                  IF PurchLine."Qty. per Unit of Measure" = 0 THEN
                    PurchLine."Qty. per Unit of Measure" := 1;
                  IF PurchLine.Type = PurchLine.Type::"Fixed Asset" THEN BEGIN
                    PurchLine.TESTFIELD("Job No.",'');
                    PurchLine.TESTFIELD("Depreciation Book Code");
                    PurchLine.TESTFIELD("FA Posting Type");
                    FA.GET(PurchLine."No.");
                    DeprBook.GET(PurchLine."Depreciation Book Code");
                    FA.TESTFIELD("Budgeted Asset",FALSE);
                    IF PurchLine."Budgeted FA No." <> '' THEN BEGIN
                      FA.GET(PurchLine."Budgeted FA No.");
                      FA.TESTFIELD("Budgeted Asset",TRUE);
                    END;
                    IF PurchLine."FA Posting Type" = PurchLine."FA Posting Type"::Maintenance THEN BEGIN
                      PurchLine.TESTFIELD("Insurance No.",'');
                      PurchLine.TESTFIELD("Depr. until FA Posting Date",FALSE);
                      PurchLine.TESTFIELD("Depr. Acquisition Cost",FALSE);
                      DeprBook.TESTFIELD("G/L Integration - Maintenance",TRUE);
                    END;
                    IF PurchLine."FA Posting Type" = PurchLine."FA Posting Type"::"Acquisition Cost" THEN BEGIN
                      PurchLine.TESTFIELD("Maintenance Code",'');
                      DeprBook.TESTFIELD("G/L Integration - Acq. Cost",TRUE);
                    END;
                    IF PurchLine."Insurance No." <> '' THEN BEGIN
                      FASetup.GET;
                      FASetup.TESTFIELD("Insurance Depr. Book",PurchLine."Depreciation Book Code");
                    END;
                  END ELSE BEGIN
                    PurchLine.TESTFIELD("Depreciation Book Code",'');
                    PurchLine.TESTFIELD("FA Posting Type",0);
                    PurchLine.TESTFIELD("Maintenance Code",'');
                    PurchLine.TESTFIELD("Insurance No.",'');
                    PurchLine.TESTFIELD("Depr. until FA Posting Date",FALSE);
                    PurchLine.TESTFIELD("Depr. Acquisition Cost",FALSE);
                    PurchLine.TESTFIELD("Budgeted FA No.",'');
                    PurchLine.TESTFIELD("FA Posting Date",0D);
                    PurchLine.TESTFIELD("Salvage Value",0);
                    PurchLine.TESTFIELD("Duplicate in Depreciation Book",'');
                    PurchLine.TESTFIELD("Use Duplication List",FALSE);
                  END;

                  CASE "Document Type" OF
                    "Document Type"::Order:
                      PurchLine.TESTFIELD("Return Qty. to Ship",0);
                    "Document Type"::Invoice:
                      BEGIN
                        IF PurchLine."Receipt No." = '' THEN
                          PurchLine.TESTFIELD("Qty. to Receive",PurchLine.Quantity);
                        PurchLine.TESTFIELD("Return Qty. to Ship",0);
                        PurchLine.TESTFIELD("Qty. to Invoice",PurchLine.Quantity);
                      END;
                    "Document Type"::"Return Order":
                      PurchLine.TESTFIELD("Qty. to Receive",0);
                    "Document Type"::"Credit Memo":
                      BEGIN
                        IF PurchLine."Return Shipment No." = '' THEN
                          PurchLine.TESTFIELD("Return Qty. to Ship",PurchLine.Quantity);
                        PurchLine.TESTFIELD("Qty. to Receive",0);
                        PurchLine.TESTFIELD("Qty. to Invoice",PurchLine.Quantity);
                      END;
                  END;

                  IF NOT (Receive OR RoundingLineInserted) THEN BEGIN
                    PurchLine."Qty. to Receive" := 0;
                    PurchLine."Qty. to Receive (Base)" := 0;
                  END;

                  IF NOT (Ship OR RoundingLineInserted) THEN BEGIN
                    PurchLine."Return Qty. to Ship" := 0;
                    PurchLine."Return Qty. to Ship (Base)" := 0;
                  END;

                  IF ("Document Type" = "Document Type"::Invoice) AND (PurchLine."Receipt No." <> '') THEN BEGIN
                    PurchLine."Quantity Received" := PurchLine.Quantity;
                    PurchLine."Qty. Received (Base)" := PurchLine."Quantity (Base)";
                    PurchLine."Qty. to Receive" := 0;
                    PurchLine."Qty. to Receive (Base)" := 0;
                  END;

                  IF ("Document Type" = "Document Type"::"Credit Memo") AND (PurchLine."Return Shipment No." <> '')
                  THEN BEGIN
                    PurchLine."Return Qty. Shipped" := PurchLine.Quantity;
                    PurchLine."Return Qty. Shipped (Base)" := PurchLine."Quantity (Base)";
                    PurchLine."Return Qty. to Ship" := 0;
                    PurchLine."Return Qty. to Ship (Base)" := 0;
                  END;

                  IF Invoice THEN BEGIN
                    IF ABS(PurchLine."Qty. to Invoice") > ABS(PurchLine.MaxQtyToInvoice) THEN
                      PurchLine.InitQtyToInvoice;
                  END ELSE BEGIN
                    PurchLine."Qty. to Invoice" := 0;
                    PurchLine."Qty. to Invoice (Base)" := 0;
                  END;

                  IF PurchLine."Qty. to Invoice" + PurchLine."Quantity Invoiced" <> PurchLine.Quantity THEN
                    EverythingInvoiced := FALSE;

                  IF PurchLine.Quantity <> 0 THEN BEGIN
                    PurchLine.TESTFIELD("No.");
                    PurchLine.TESTFIELD(Type);
                    PurchLine.TESTFIELD("Gen. Bus. Posting Group");
                    PurchLine.TESTFIELD("Gen. Prod. Posting Group");

                    // $001 INCOMING

                    IF rPar."Departamento obligatorio" THEN
                      PurchLine.TESTFIELD("Shortcut Dimension 1 Code");

                    DivideAmount(1,PurchLine."Qty. to Invoice");
                  END ELSE
                    PurchLine.TESTFIELD(Amount,0);

                  RoundAmount(PurchLine."Qty. to Invoice");

                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                    ReverseAmount(PurchLine);
                    ReverseAmount(PurchLineACY);
                  END;

                  RemQtyToBeInvoiced := PurchLine."Qty. to Invoice";
                  RemQtyToBeInvoicedBase := PurchLine."Qty. to Invoice (Base)";

                  // Job Credit Memo Item Qty Check
                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                    IF (PurchLine."Job No." <> '') AND (PurchLine.Type = PurchLine.Type::Item) THEN
                      JobPostLine.CheckItemQuantityPurchCredit(Rec,PurchLine);

                  // Item Tracking:
                  IF NOT PurchLine."Prepayment Line" THEN BEGIN
                    IF Invoice THEN
                      IF PurchLine."Qty. to Invoice" = 0 THEN
                        TrackingSpecificationExists := FALSE
                      ELSE
                        TrackingSpecificationExists :=
                          ReservePurchLine.RetrieveInvoiceSpecification(PurchLine,TempInvoicingSpecification);
                    EndLoop := FALSE;

                    IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                      IF ABS(RemQtyToBeInvoiced) > ABS(PurchLine."Return Qty. to Ship") THEN BEGIN
                        ReturnShptLine.RESET;
                        CASE "Document Type" OF
                          "Document Type"::"Return Order":
                            BEGIN
                              ReturnShptLine.SETCURRENTKEY("Return Order No.","Return Order Line No.");
                              ReturnShptLine.SETRANGE("Return Order No.",PurchLine."Document No.");
                              ReturnShptLine.SETRANGE("Return Order Line No.",PurchLine."Line No.");
                            END;
                          "Document Type"::"Credit Memo":
                            BEGIN
                              ReturnShptLine.SETRANGE("Document No.",PurchLine."Return Shipment No.");
                              ReturnShptLine.SETRANGE("Line No.",PurchLine."Return Shipment Line No.");
                            END;
                          END;
                        ReturnShptLine.SETFILTER("Return Qty. Shipped Not Invd.",'<>0');
                        IF ReturnShptLine.FINDSET(TRUE,FALSE) THEN BEGIN
                          ItemJnlRollRndg := TRUE;
                          REPEAT
                            IF TrackingSpecificationExists THEN BEGIN  // Item Tracking
                              ItemEntryRelation.GET(TempInvoicingSpecification."Appl.-to Item Entry");
                              ReturnShptLine.GET(ItemEntryRelation."Source ID",ItemEntryRelation."Source Ref. No.");
                            END ELSE
                              ItemEntryRelation."Item Entry No." := ReturnShptLine."Item Shpt. Entry No.";
                            ReturnShptLine.TESTFIELD("Buy-from Vendor No.",PurchLine."Buy-from Vendor No.");
                            ReturnShptLine.TESTFIELD(Type,PurchLine.Type);
                            ReturnShptLine.TESTFIELD("No.",PurchLine."No.");
                            ReturnShptLine.TESTFIELD("Gen. Bus. Posting Group",PurchLine."Gen. Bus. Posting Group");
                            ReturnShptLine.TESTFIELD("Gen. Prod. Posting Group",PurchLine."Gen. Prod. Posting Group");
                            ReturnShptLine.TESTFIELD("Job No.",PurchLine."Job No.");
                            ReturnShptLine.TESTFIELD("Unit of Measure Code",PurchLine."Unit of Measure Code");
                            ReturnShptLine.TESTFIELD("Variant Code",PurchLine."Variant Code");
                            ReturnShptLine.TESTFIELD("Prod. Order No.",PurchLine."Prod. Order No.");
                            IF PurchLine."Qty. to Invoice" * ReturnShptLine.Quantity > 0 THEN
                              PurchLine.FIELDERROR("Qty. to Invoice",Text028);
                            IF TrackingSpecificationExists THEN BEGIN  // Item Tracking
                              QtyToBeInvoiced := TempInvoicingSpecification."Qty. to Invoice";
                              QtyToBeInvoicedBase := TempInvoicingSpecification."Qty. to Invoice (Base)";
                            END ELSE BEGIN
                              QtyToBeInvoiced := RemQtyToBeInvoiced - PurchLine."Return Qty. to Ship";
                              QtyToBeInvoicedBase := RemQtyToBeInvoicedBase - PurchLine."Return Qty. to Ship (Base)";
                            END;
                            IF ABS(QtyToBeInvoiced) >
                               ABS(ReturnShptLine.Quantity - ReturnShptLine."Quantity Invoiced")
                            THEN BEGIN
                              QtyToBeInvoiced := ReturnShptLine."Quantity Invoiced" - ReturnShptLine.Quantity;
                              QtyToBeInvoicedBase := ReturnShptLine."Qty. Invoiced (Base)" - ReturnShptLine."Quantity (Base)";
                            END;

                            IF TrackingSpecificationExists THEN
                              ItemTrackingMgt.AdjustQuantityRounding(
                                RemQtyToBeInvoiced,QtyToBeInvoiced,
                                RemQtyToBeInvoicedBase,QtyToBeInvoicedBase);

                            RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
                            RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
                            ReturnShptLine."Quantity Invoiced" :=
                              ReturnShptLine."Quantity Invoiced" - QtyToBeInvoiced;
                            ReturnShptLine."Qty. Invoiced (Base)" :=
                              ReturnShptLine."Qty. Invoiced (Base)" - QtyToBeInvoicedBase;
                            ReturnShptLine."Return Qty. Shipped Not Invd." :=
                              ReturnShptLine.Quantity - ReturnShptLine."Quantity Invoiced";
                            ReturnShptLine.MODIFY;
                            IF PurchLine.Type = PurchLine.Type::Item THEN
                              PostItemJnlLine(
                                PurchLine,
                                0,0,
                                QtyToBeInvoiced,QtyToBeInvoicedBase,
                                {ReturnShptLine."Item Shpt. Entry No."}
                                ItemEntryRelation."Item Entry No.",'',TempInvoicingSpecification);
                            IF TrackingSpecificationExists THEN
                              EndLoop := (TempInvoicingSpecification.NEXT = 0)
                            ELSE
                              EndLoop :=
                                (ReturnShptLine.NEXT = 0) OR (ABS(RemQtyToBeInvoiced) <= ABS(PurchLine."Return Qty. to Ship"));
                          UNTIL EndLoop;
                        END ELSE
                          ERROR(
                            Text029,
                            PurchLine."Return Shipment Line No.",PurchLine."Return Shipment No.");
                      END;

                      IF ABS(RemQtyToBeInvoiced) > ABS(PurchLine."Return Qty. to Ship") THEN BEGIN
                        IF "Document Type" = "Document Type"::"Credit Memo" THEN
                          ERROR(
                            Text039,
                            ReturnShptLine."Document No.");
                          ERROR(Text040);
                      END;

                    END ELSE BEGIN

                      IF ABS(RemQtyToBeInvoiced) > ABS(PurchLine."Qty. to Receive") THEN BEGIN
                        PurchRcptLine.RESET;
                        CASE "Document Type" OF
                          "Document Type"::Order:
                            BEGIN
                              PurchRcptLine.SETCURRENTKEY("Order No.","Order Line No.");
                              PurchRcptLine.SETRANGE("Order No.",PurchLine."Document No.");
                              PurchRcptLine.SETRANGE("Order Line No.",PurchLine."Line No.");
                            END;
                          "Document Type"::Invoice:
                            BEGIN
                              PurchRcptLine.SETRANGE("Document No.",PurchLine."Receipt No.");
                              PurchRcptLine.SETRANGE("Line No.",PurchLine."Receipt Line No.");
                            END;
                          END;

                        PurchRcptLine.SETFILTER("Qty. Rcd. Not Invoiced",'<>0');
                        IF PurchRcptLine.FINDSET(TRUE,FALSE) THEN BEGIN
                          ItemJnlRollRndg := TRUE;
                          REPEAT
                            IF TrackingSpecificationExists THEN BEGIN
                              ItemEntryRelation.GET(TempInvoicingSpecification."Appl.-to Item Entry");
                              PurchRcptLine.GET(ItemEntryRelation."Source ID",ItemEntryRelation."Source Ref. No.");
                            END ELSE
                              ItemEntryRelation."Item Entry No." := PurchRcptLine."Item Rcpt. Entry No.";
                            PurchRcptLine.TESTFIELD("Buy-from Vendor No.",PurchLine."Buy-from Vendor No.");
                            PurchRcptLine.TESTFIELD(Type,PurchLine.Type);
                            PurchRcptLine.TESTFIELD("No.",PurchLine."No.");
                            PurchRcptLine.TESTFIELD("Gen. Bus. Posting Group",PurchLine."Gen. Bus. Posting Group");
                            PurchRcptLine.TESTFIELD("Gen. Prod. Posting Group",PurchLine."Gen. Prod. Posting Group");
                            PurchRcptLine.TESTFIELD("Job No.",PurchLine."Job No.");
                            PurchRcptLine.TESTFIELD("Unit of Measure Code",PurchLine."Unit of Measure Code");
                            PurchRcptLine.TESTFIELD("Variant Code",PurchLine."Variant Code");
                            PurchRcptLine.TESTFIELD("Prod. Order No.",PurchLine."Prod. Order No.");
                            IF PurchLine."Qty. to Invoice" * PurchRcptLine.Quantity < 0 THEN
                              PurchLine.FIELDERROR("Qty. to Invoice",Text012);
                            IF TrackingSpecificationExists THEN BEGIN
                              QtyToBeInvoiced := TempInvoicingSpecification."Qty. to Invoice";
                              QtyToBeInvoicedBase := TempInvoicingSpecification."Qty. to Invoice (Base)";
                            END ELSE BEGIN
                              QtyToBeInvoiced := RemQtyToBeInvoiced - PurchLine."Qty. to Receive";
                              QtyToBeInvoicedBase := RemQtyToBeInvoicedBase - PurchLine."Qty. to Receive (Base)";
                            END;
                            IF ABS(QtyToBeInvoiced) >
                               ABS(PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced")
                            THEN BEGIN
                              QtyToBeInvoiced := PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced";
                              QtyToBeInvoicedBase := PurchRcptLine."Quantity (Base)" - PurchRcptLine."Qty. Invoiced (Base)";
                            END;
                            IF TrackingSpecificationExists THEN
                              ItemTrackingMgt.AdjustQuantityRounding(
                                RemQtyToBeInvoiced,QtyToBeInvoiced,
                                RemQtyToBeInvoicedBase,QtyToBeInvoicedBase);

                            RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
                            RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;
                            PurchRcptLine."Quantity Invoiced" := PurchRcptLine."Quantity Invoiced" + QtyToBeInvoiced;
                            PurchRcptLine."Qty. Invoiced (Base)" := PurchRcptLine."Qty. Invoiced (Base)" + QtyToBeInvoicedBase;
                            PurchRcptLine."Qty. Rcd. Not Invoiced" :=
                              PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced";
                            PurchRcptLine.MODIFY;
                            IF PurchLine.Type = PurchLine.Type::Item THEN
                              PostItemJnlLine(
                                PurchLine,
                                0,0,
                                QtyToBeInvoiced,QtyToBeInvoicedBase,
                                {PurchRcptLine."Item Rcpt. Entry No."}
                                ItemEntryRelation."Item Entry No.",'',TempInvoicingSpecification);
                            IF TrackingSpecificationExists THEN
                              EndLoop := (TempInvoicingSpecification.NEXT = 0)
                            ELSE
                              EndLoop :=
                                (PurchRcptLine.NEXT = 0) OR (ABS(RemQtyToBeInvoiced) <= ABS(PurchLine."Qty. to Receive"));
                          UNTIL EndLoop;
                        END ELSE
                          ERROR(
                            Text030,
                            PurchLine."Receipt Line No.",PurchLine."Receipt No.");
                      END;

                      IF ABS(RemQtyToBeInvoiced) > ABS(PurchLine."Qty. to Receive") THEN BEGIN
                        IF "Document Type" = "Document Type"::Invoice THEN
                          ERROR(
                            Text031,
                            PurchRcptLine."Document No.");
                          ERROR(Text014);
                      END;
                    END;

                    IF TrackingSpecificationExists THEN
                      SaveInvoiceSpecification(TempInvoicingSpecification);
                  END;

                  CASE PurchLine.Type OF
                    PurchLine.Type::"G/L Account":
                      IF (PurchLine."No." <> '') AND NOT PurchLine."System-Created Entry" THEN BEGIN
                        GLAcc.GET(PurchLine."No.");
                        GLAcc.TESTFIELD("Direct Posting");
                        IF (PurchLine."Job No." <> '') AND (PurchLine."Qty. to Invoice" <> 0) THEN BEGIN
                          TempDocDim.RESET;
                          TempDocDim.SETRANGE("Table ID",DATABASE::"Purchase Line");
                          TempDocDim.SETRANGE("Line No.",PurchLine."Line No.");
                          TempJnlLineDim.DELETEALL;
                          DimMgt.CopyDocDimToJnlLineDim(TempDocDim,TempJnlLineDim);
                          JobPostLine.InsertPurchLine(
                            PurchHeader,PurchInvHeader,PurchCrMemoHeader,JobPurchLine,SrcCode,TempJnlLineDim);
                        END;
                        IF (PurchLine."IC Partner Code" <> '') AND Invoice THEN
                          InsertICGenJnlLine(TempPurchLine);
                      END;
                    PurchLine.Type::Item:
                      BEGIN
                        IF RemQtyToBeInvoiced <> 0 THEN
                          ItemLedgShptEntryNo :=
                            PostItemJnlLine(
                              PurchLine,
                              RemQtyToBeInvoiced,RemQtyToBeInvoicedBase,
                              RemQtyToBeInvoiced,RemQtyToBeInvoicedBase,
                              0,'',DummyTrackingSpecification);
                        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                          IF ABS(PurchLine."Return Qty. to Ship") > ABS(RemQtyToBeInvoiced) THEN
                            ItemLedgShptEntryNo :=
                              PostItemJnlLine(
                                PurchLine,
                                PurchLine."Return Qty. to Ship" - RemQtyToBeInvoiced,
                                PurchLine."Return Qty. to Ship (Base)" - RemQtyToBeInvoicedBase,
                                0,0,0,'',DummyTrackingSpecification);
                        END ELSE BEGIN
                          IF ABS(PurchLine."Qty. to Receive") > ABS(RemQtyToBeInvoiced) THEN
                            ItemLedgShptEntryNo :=
                              PostItemJnlLine(
                                PurchLine,
                                PurchLine."Qty. to Receive" - RemQtyToBeInvoiced,
                                PurchLine."Qty. to Receive (Base)" - RemQtyToBeInvoicedBase,
                                0,0,0,'',DummyTrackingSpecification);
                          IF (PurchLine."Qty. to Receive" <> 0) AND
                             (PurchLine."Sales Order Line No." <> 0)
                          THEN BEGIN
                            DropShptPostBuffer."Order No." := PurchLine."Sales Order No.";
                            DropShptPostBuffer."Order Line No." := PurchLine."Sales Order Line No.";
                            DropShptPostBuffer.Quantity := PurchLine."Qty. to Receive";
                            DropShptPostBuffer."Quantity (Base)" := PurchLine."Qty. to Receive (Base)";
                            DropShptPostBuffer."Item Shpt. Entry No." :=
                              PostAssocItemJnlLine(DropShptPostBuffer.Quantity,DropShptPostBuffer."Quantity (Base)");
                            DropShptPostBuffer.INSERT;
                          END;
                        END;
                      END;
                    3: ERROR(Text015);
                    PurchLine.Type::"Charge (Item)":
                      IF Invoice OR ItemChargeAssgntOnly THEN BEGIN
                        ItemJnlRollRndg := FALSE;
                        ClearItemChargeAssgntFilter;
                        TempItemChargeAssgntPurch.SETCURRENTKEY("Applies-to Doc. Type");
                        TempItemChargeAssgntPurch.SETFILTER("Applies-to Doc. Type",'<>%1',"Document Type");
                        TempItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLine."Line No.");
                        IF TempItemChargeAssgntPurch.FINDSET THEN
                          REPEAT
                            IF ItemChargeAssgntOnly AND (GenJnlLineDocNo = '') THEN
                              GenJnlLineDocNo := TempItemChargeAssgntPurch."Applies-to Doc. No.";
                            CASE TempItemChargeAssgntPurch."Applies-to Doc. Type" OF
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::Receipt:
                                PostItemChargePerRcpt(PurchLine);
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Transfer Receipt":
                                PostItemChargePerTransfer(PurchLine);
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Shipment":
                                PostItemChargePerRetShpt(PurchLine);
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Sales Shipment":
                                PostItemChargePerSalesShpt(PurchLine);
                              TempItemChargeAssgntPurch."Applies-to Doc. Type"::"Return Receipt":
                                PostItemChargePerRetRcpt(PurchLine);
                            END;
                            TempItemChargeAssgntPurch.MARK(TRUE);
                          UNTIL TempItemChargeAssgntPurch.NEXT = 0;
                      END;
                  END;

                  IF (PurchLine.Type >= PurchLine.Type::"G/L Account") AND (PurchLine."Qty. to Invoice" <> 0) THEN BEGIN
                    // Copy purchase to buffer
                    FillInvPostingBuffer(PurchLine,PurchLineACY);
                    TempDocDim.SETRANGE("Table ID");
                    TempDocDim.SETRANGE("Line No.");
                  END;

                  IF (PurchRcptHeader."No." <> '') AND (PurchLine."Receipt No." = '') AND
                     NOT RoundingLineInserted AND NOT TempPurchLine."Prepayment Line"
                  THEN BEGIN
                    // Insert receipt line
                    PurchRcptLine.INIT;
                    PurchRcptLine.TRANSFERFIELDS(TempPurchLine);
                    PurchRcptLine."Posting Date" := "Posting Date";
                    PurchRcptLine."Document No." := PurchRcptHeader."No.";
                    PurchRcptLine.Quantity := TempPurchLine."Qty. to Receive";
                    PurchRcptLine."Quantity (Base)" := TempPurchLine."Qty. to Receive (Base)";
                    IF ABS(TempPurchLine."Qty. to Invoice") > ABS(TempPurchLine."Qty. to Receive") THEN BEGIN
                      PurchRcptLine."Quantity Invoiced" := TempPurchLine."Qty. to Receive";
                      PurchRcptLine."Qty. Invoiced (Base)" := TempPurchLine."Qty. to Receive (Base)";
                    END ELSE BEGIN
                      PurchRcptLine."Quantity Invoiced" := TempPurchLine."Qty. to Invoice";
                      PurchRcptLine."Qty. Invoiced (Base)" := TempPurchLine."Qty. to Invoice (Base)";
                    END;
                    PurchRcptLine."Qty. Rcd. Not Invoiced" :=
                      PurchRcptLine.Quantity - PurchRcptLine."Quantity Invoiced";
                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                      PurchRcptLine."Order No." := TempPurchLine."Document No.";
                      PurchRcptLine."Order Line No." := TempPurchLine."Line No.";
                    END;
                    IF (PurchLine.Type = PurchLine.Type::Item) AND (TempPurchLine."Qty. to Receive" <> 0) THEN BEGIN
                      IF WhseReceive THEN BEGIN
                        WhseRcptLine.SETCURRENTKEY(
                          "No.","Source Type","Source Subtype","Source No.","Source Line No.");
                        WhseRcptLine.SETRANGE("No.",WhseRcptHeader."No.");
                        WhseRcptLine.SETRANGE("Source Type",DATABASE::"Purchase Line");
                        WhseRcptLine.SETRANGE("Source Subtype",PurchLine."Document Type");
                        WhseRcptLine.SETRANGE("Source No.",PurchLine."Document No.");
                        WhseRcptLine.SETRANGE("Source Line No.",PurchLine."Line No.");
                        WhseRcptLine.FINDFIRST;
                        WhseRcptLine.TESTFIELD("Qty. to Receive",PurchRcptLine.Quantity);
                        SaveTempWhseSplitSpec(PurchLine);
                        WhsePostRcpt.CreatePostedRcptLine(
                          WhseRcptLine,PostedWhseRcptHeader,PostedWhseRcptLine,TempWhseSplitSpecification);
                      END;
                      IF WhseShip THEN BEGIN
                        WhseShptLine.SETCURRENTKEY(
                          "No.","Source Type","Source Subtype","Source No.","Source Line No.");
                        WhseShptLine.SETRANGE("No.",WhseShptHeader."No.");
                        WhseShptLine.SETRANGE("Source Type",DATABASE::"Purchase Line");
                        WhseShptLine.SETRANGE("Source Subtype",PurchLine."Document Type");
                        WhseShptLine.SETRANGE("Source No.",PurchLine."Document No.");
                        WhseShptLine.SETRANGE("Source Line No.",PurchLine."Line No.");
                        WhseShptLine.FINDFIRST;
                        WhseShptLine.TESTFIELD("Qty. to Ship",-PurchRcptLine.Quantity);
                        SaveTempWhseSplitSpec(PurchLine);
                        WhsePostShpt.CreatePostedShptLine(
                          WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
                      END;

                      PurchRcptLine."Item Rcpt. Entry No." :=
                        InsertRcptEntryRelation(PurchRcptLine); // ItemLedgShptEntryNo
                      PurchRcptLine."Item Charge Base Amount" :=
                        ROUND(CostBaseAmount / PurchLine.Quantity * PurchRcptLine.Quantity);
                    END;
                    PurchRcptLine.INSERT;
                    DimMgt.MoveOneDocDimToPostedDocDim(
                      TempDocDim,DATABASE::"Purchase Line","Document Type","No.",PurchRcptLine."Line No.",
                      DATABASE::"Purch. Rcpt. Line",PurchRcptHeader."No.");

                  END;

                  IF (ReturnShptHeader."No." <> '') AND (PurchLine."Return Shipment No." = '') AND
                     NOT RoundingLineInserted
                  THEN BEGIN
                    // Insert return shipment line
                    ReturnShptLine.INIT;
                    ReturnShptLine.TRANSFERFIELDS(TempPurchLine);
                    ReturnShptLine."Posting Date" := "Posting Date";
                    ReturnShptLine."Document No." := ReturnShptHeader."No.";
                    ReturnShptLine.Quantity := TempPurchLine."Return Qty. to Ship";
                    ReturnShptLine."Quantity (Base)" := TempPurchLine."Return Qty. to Ship (Base)";
                    IF ABS(TempPurchLine."Qty. to Invoice") > ABS(TempPurchLine."Return Qty. to Ship") THEN BEGIN
                      ReturnShptLine."Quantity Invoiced" := TempPurchLine."Return Qty. to Ship";
                      ReturnShptLine."Qty. Invoiced (Base)" := TempPurchLine."Return Qty. to Ship (Base)";
                    END ELSE BEGIN
                      ReturnShptLine."Quantity Invoiced" := TempPurchLine."Qty. to Invoice";
                      ReturnShptLine."Qty. Invoiced (Base)" := TempPurchLine."Qty. to Invoice (Base)";
                    END;
                    ReturnShptLine."Return Qty. Shipped Not Invd." :=
                      ReturnShptLine.Quantity - ReturnShptLine."Quantity Invoiced";
                    IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
                      ReturnShptLine."Return Order No." := TempPurchLine."Document No.";
                      ReturnShptLine."Return Order Line No." := TempPurchLine."Line No.";
                    END;
                    IF (PurchLine.Type = PurchLine.Type::Item) AND (TempPurchLine."Return Qty. to Ship" <> 0) THEN BEGIN
                      IF WhseShip THEN BEGIN
                        WhseShptLine.SETCURRENTKEY(
                          "No.","Source Type","Source Subtype","Source No.","Source Line No.");
                        WhseShptLine.SETRANGE("No.",WhseShptHeader."No.");
                        WhseShptLine.SETRANGE("Source Type",DATABASE::"Purchase Line");
                        WhseShptLine.SETRANGE("Source Subtype",PurchLine."Document Type");
                        WhseShptLine.SETRANGE("Source No.",PurchLine."Document No.");
                        WhseShptLine.SETRANGE("Source Line No.",PurchLine."Line No.");
                        WhseShptLine.FINDFIRST;
                        WhseShptLine.TESTFIELD("Qty. to Ship",ReturnShptLine.Quantity);
                        SaveTempWhseSplitSpec(PurchLine);
                        WhsePostShpt.CreatePostedShptLine(
                          WhseShptLine,PostedWhseShptHeader,PostedWhseShptLine,TempWhseSplitSpecification);
                      END;
                      IF WhseReceive THEN BEGIN
                        WhseRcptLine.SETCURRENTKEY(
                          "No.","Source Type","Source Subtype","Source No.","Source Line No.");
                        WhseRcptLine.SETRANGE("No.",WhseRcptHeader."No.");
                        WhseRcptLine.SETRANGE("Source Type",DATABASE::"Purchase Line");
                        WhseRcptLine.SETRANGE("Source Subtype",PurchLine."Document Type");
                        WhseRcptLine.SETRANGE("Source No.",PurchLine."Document No.");
                        WhseRcptLine.SETRANGE("Source Line No.",PurchLine."Line No.");
                        WhseRcptLine.FINDFIRST;
                        WhseRcptLine.TESTFIELD("Qty. to Receive",-ReturnShptLine.Quantity);
                        SaveTempWhseSplitSpec(PurchLine);
                        WhsePostRcpt.CreatePostedRcptLine(
                          WhseRcptLine,PostedWhseRcptHeader,PostedWhseRcptLine,TempWhseSplitSpecification);
                      END;

                      ReturnShptLine."Item Shpt. Entry No." :=
                        InsertReturnEntryRelation(ReturnShptLine); // ItemLedgShptEntryNo;
                      ReturnShptLine."Item Charge Base Amount" :=
                        ROUND(CostBaseAmount / PurchLine.Quantity * ReturnShptLine.Quantity);
                    END;
                    ReturnShptLine.INSERT;
                    DimMgt.MoveOneDocDimToPostedDocDim(
                      TempDocDim,DATABASE::"Purchase Line","Document Type","No.",ReturnShptLine."Line No.",
                      DATABASE::"Return Shipment Line",ReturnShptHeader."No.");

                  END;

                  IF Invoice THEN BEGIN
                    // Insert invoice line or credit memo line
                    IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
                      PurchInvLine.INIT;
                      PurchInvLine.TRANSFERFIELDS(TempPurchLine);
                      PurchInvLine."Posting Date" := "Posting Date";
                      PurchInvLine."Document No." := PurchInvHeader."No.";
                      PurchInvLine.Quantity := TempPurchLine."Qty. to Invoice";
                      PurchInvLine."Quantity (Base)" := TempPurchLine."Qty. to Invoice (Base)";
                      PurchInvLine.INSERT;
                      DimMgt.MoveOneDocDimToPostedDocDim(
                        TempDocDim,DATABASE::"Purchase Line","Document Type","No.",PurchInvLine."Line No.",
                        DATABASE::"Purch. Inv. Line",PurchInvHeader."No.");
                      ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,PurchInvLine.RowID1);
                    END ELSE BEGIN // Credit Memo
                      PurchCrMemoLine.INIT;
                      PurchCrMemoLine.TRANSFERFIELDS(TempPurchLine);
                      PurchCrMemoLine."Posting Date" := "Posting Date";
                      PurchCrMemoLine."Document No." := PurchCrMemoHeader."No.";
                      PurchCrMemoLine.Quantity := TempPurchLine."Qty. to Invoice";
                      PurchCrMemoLine."Quantity (Base)" := TempPurchLine."Qty. to Invoice (Base)";
                      PurchCrMemoLine.INSERT;
                      DimMgt.MoveOneDocDimToPostedDocDim(
                        TempDocDim,DATABASE::"Purchase Line","Document Type","No.",PurchCrMemoLine."Line No.",
                        DATABASE::"Purch. Cr. Memo Line",PurchCrMemoHeader."No.");
                      ItemJnlPostLine.CollectValueEntryRelation(TempValueEntryRelation,PurchCrMemoLine.RowID1);
                    END;
                  END;

                  IF RoundingLineInserted THEN
                    LastLineRetrieved := TRUE
                  ELSE BEGIN
                    LastLineRetrieved := GetNextPurchline(PurchLine);
                    IF LastLineRetrieved AND PurchSetup."Invoice Rounding" THEN
                      InvoiceRounding(FALSE);
                  END;
                UNTIL LastLineRetrieved;

              IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                ReverseAmount(TotalPurchLine);
                ReverseAmount(TotalPurchLineLCY);
              END;

              // Post combine shipment of sales order
              SalesSetup.GET;
              IF DropShptPostBuffer.FINDSET THEN
                REPEAT
                  SalesOrderHeader.GET(
                    SalesOrderHeader."Document Type"::Order,
                    DropShptPostBuffer."Order No.");
                  SalesShptHeader.INIT;
                  SalesShptHeader.TRANSFERFIELDS(SalesOrderHeader);
                  SalesShptHeader."No." := SalesOrderHeader."Shipping No.";
                  SalesShptHeader."Order No." := SalesOrderHeader."No.";
                  SalesShptHeader."Posting Date" := "Posting Date";
                  SalesShptHeader."Document Date" := "Document Date";
                  SalesShptHeader."No. Printed" := 0;
                  SalesShptHeader.INSERT(TRUE);
                  DimMgt.MoveOneDocDimToPostedDocDim(
                    DocDim,DATABASE::"Sales Header",SalesOrderHeader."Document Type",SalesOrderHeader."No.",
                    0,DATABASE::"Sales Shipment Header",SalesShptHeader."No.");

                  ApprovalMgt.MoveApprvalEntryToPosted(TempApprovalEntry,DATABASE::"Sales Shipment Header",SalesShptHeader."No.");

                  IF SalesSetup."Copy Comments Order to Shpt." THEN BEGIN
                    CopySalesCommentLines(
                      SalesOrderHeader."Document Type",SalesCommentLine."Document Type"::Shipment,
                      SalesOrderHeader."No.",SalesShptHeader."No.");
                    SalesShptHeader.COPYLINKS(Rec);
                  END;
                  DropShptPostBuffer.SETRANGE("Order No.",DropShptPostBuffer."Order No.");
                  REPEAT
                    SalesOrderLine.GET(
                      SalesOrderLine."Document Type"::Order,
                      DropShptPostBuffer."Order No.",DropShptPostBuffer."Order Line No.");
                    SalesShptLine.INIT;
                    SalesShptLine.TRANSFERFIELDS(SalesOrderLine);
                    SalesShptLine."Posting Date" := SalesShptHeader."Posting Date";
                    SalesShptLine."Document No." := SalesShptHeader."No.";
                    SalesShptLine.Quantity := DropShptPostBuffer.Quantity;
                    SalesShptLine."Quantity (Base)" := DropShptPostBuffer."Quantity (Base)";
                    SalesShptLine."Quantity Invoiced" := 0;
                    SalesShptLine."Qty. Invoiced (Base)" := 0;
                    SalesShptLine."Order No." := SalesOrderLine."Document No.";
                    SalesShptLine."Order Line No." := SalesOrderLine."Line No.";
                    SalesShptLine."Qty. Shipped Not Invoiced" :=
                      SalesShptLine.Quantity - SalesShptLine."Quantity Invoiced";
                    IF SalesShptLine.Quantity <> 0 THEN BEGIN
                      SalesShptLine."Item Shpt. Entry No." := DropShptPostBuffer."Item Shpt. Entry No.";
                      SalesShptLine."Item Charge Base Amount" := SalesOrderLine."Line Amount";
                    END;
                    SalesShptLine.INSERT;
                    ServItemMgt.CreateServItemOnSalesLineShpt(SalesOrderHeader,SalesOrderLine,SalesShptLine);
                    SalesOrderLine."Qty. to Ship" := SalesShptLine.Quantity;
                    SalesOrderLine."Qty. to Ship (Base)" := SalesShptLine."Quantity (Base)";
                    SalesPost.UpdateBlanketOrderLine(SalesOrderLine,TRUE,FALSE,FALSE);
                    DimMgt.MoveOneDocDimToPostedDocDim(
                      DocDim,DATABASE::"Sales Line",SalesOrderHeader."Document Type",SalesOrderHeader."No.",
                      SalesShptLine."Line No.",DATABASE::"Sales Shipment Line",SalesShptHeader."No.");

                    SalesOrderLine.SETRANGE("Document Type",SalesOrderLine."Document Type"::Order);
                    SalesOrderLine.SETRANGE("Document No.",DropShptPostBuffer."Order No.");
                    SalesOrderLine.SETRANGE("Attached to Line No.",DropShptPostBuffer."Order Line No.");
                    SalesOrderLine.SETRANGE(Type,SalesOrderLine.Type::" ");
                    IF SalesOrderLine.FINDSET THEN
                      REPEAT
                        SalesShptLine.INIT;
                        SalesShptLine.TRANSFERFIELDS(SalesOrderLine);
                        SalesShptLine."Document No." := SalesShptHeader."No.";
                        SalesShptLine."Order No." := SalesOrderLine."Document No.";
                        SalesShptLine."Order Line No." := SalesOrderLine."Line No.";
                        SalesShptLine.INSERT;
                      UNTIL SalesOrderLine.NEXT = 0;

                  UNTIL DropShptPostBuffer.NEXT = 0;
                  DropShptPostBuffer.SETRANGE("Order No.");
                UNTIL DropShptPostBuffer.NEXT = 0;

              IF Invoice THEN BEGIN
                // Post purchase and VAT to G/L entries from buffer
                LineCount := 0;
                IF InvPostingBuffer[1].FIND('+') THEN
                  REPEAT
                    LineCount := LineCount + 1;
                    IF GUIALLOWED THEN
                      Window.UPDATE(3,LineCount);

                    CASE InvPostingBuffer[1]."VAT Calculation Type" OF
                      InvPostingBuffer[1]."VAT Calculation Type"::"Reverse Charge VAT":
                        BEGIN
                          VATPostingSetup.GET(
                            InvPostingBuffer[1]."VAT Bus. Posting Group",InvPostingBuffer[1]."VAT Prod. Posting Group");
                          InvPostingBuffer[1]."VAT Amount" :=
                            ROUND(
                              InvPostingBuffer[1].Amount * VATPostingSetup."VAT+EC %" / 100);
                          InvPostingBuffer[1]."VAT Amount (ACY)" :=
                            ROUND(
                              (InvPostingBuffer[1]."Amount (ACY)" * VATPostingSetup."VAT+EC %" / 100),Currency."Amount Rounding Precision");
                        END;
                      InvPostingBuffer[1]."VAT Calculation Type"::"Sales Tax":
                        BEGIN
                          IF InvPostingBuffer[1]."Use Tax" THEN BEGIN
                            InvPostingBuffer[1]."VAT Amount" :=
                              ROUND(
                                SalesTaxCalculate.CalculateTax(
                                  InvPostingBuffer[1]."Tax Area Code",InvPostingBuffer[1]."Tax Group Code",
                                  InvPostingBuffer[1]."Tax Liable",PurchHeader."Posting Date",
                                  InvPostingBuffer[1].Amount,
                                  InvPostingBuffer[1].Quantity,0));
                              IF GLSetup."Additional Reporting Currency" <> '' THEN
                                InvPostingBuffer[1]."VAT Amount (ACY)" :=
                                  CurrExchRate.ExchangeAmtLCYToFCY(
                                    PurchHeader."Posting Date",GLSetup."Additional Reporting Currency",
                                    InvPostingBuffer[1]."VAT Amount",0);
                          END;
                        END;
                    END;

                    GenJnlLine.INIT;
                    GenJnlLine."Posting Date" := "Posting Date";
                    GenJnlLine."Document Date" := "Document Date";
                    GenJnlLine.Description := "Posting Description";
                    GenJnlLine."Reason Code" := "Reason Code";
                    GenJnlLine."Document Type" := GenJnlLineDocType;
                    GenJnlLine."Document No." := GenJnlLineDocNo;
                    GenJnlLine."External Document No." := GenJnlLineExtDocNo;
                    GenJnlLine."Account No." := InvPostingBuffer[1]."G/L Account";
                    GenJnlLine."System-Created Entry" := InvPostingBuffer[1]."System-Created Entry";
                    GenJnlLine.Amount := InvPostingBuffer[1].Amount;
                    GenJnlLine."Source Currency Code" := "Currency Code";
                    GenJnlLine."Source Currency Amount" := InvPostingBuffer[1]."Amount (ACY)";
                    GenJnlLine.Correction := Correction;
                    GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Purchase;
                    GenJnlLine."Gen. Bus. Posting Group" := InvPostingBuffer[1]."Gen. Bus. Posting Group";
                    GenJnlLine."Gen. Prod. Posting Group" := InvPostingBuffer[1]."Gen. Prod. Posting Group";
                    GenJnlLine."VAT Bus. Posting Group" := InvPostingBuffer[1]."VAT Bus. Posting Group";
                    GenJnlLine."VAT Prod. Posting Group" := InvPostingBuffer[1]."VAT Prod. Posting Group";
                    GenJnlLine."Tax Area Code" := InvPostingBuffer[1]."Tax Area Code";
                    GenJnlLine."Tax Liable" := InvPostingBuffer[1]."Tax Liable";
                    GenJnlLine."Tax Group Code" := InvPostingBuffer[1]."Tax Group Code";
                    GenJnlLine."Use Tax" := InvPostingBuffer[1]."Use Tax";
                    GenJnlLine.Quantity := InvPostingBuffer[1].Quantity;
                    GenJnlLine."VAT Calculation Type" := InvPostingBuffer[1]."VAT Calculation Type";
                    GenJnlLine."VAT Base Amount" := InvPostingBuffer[1]."VAT Base Amount";
                    GenJnlLine."VAT Base Discount %" := "VAT Base Discount %";
                    GenJnlLine."Source Curr. VAT Base Amount" := InvPostingBuffer[1]."VAT Base Amount (ACY)";
                    GenJnlLine."VAT Amount" := InvPostingBuffer[1]."VAT Amount";
                    GenJnlLine."Source Curr. VAT Amount" := InvPostingBuffer[1]."VAT Amount (ACY)";
                    GenJnlLine."VAT Difference" := InvPostingBuffer[1]."VAT Difference";
                    GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
                    GenJnlLine."Job No." := InvPostingBuffer[1]."Job No.";

                    // $003 INCOMING

                    GenJnlLine.Regimen := InvPostingBuffer[1].Regimen;

                    GenJnlLine."Shortcut Dimension 1 Code" := InvPostingBuffer[1]."Global Dimension 1 Code";
                    GenJnlLine."Shortcut Dimension 2 Code" := InvPostingBuffer[1]."Global Dimension 2 Code";
                    GenJnlLine."Source Code" := SrcCode;
                    GenJnlLine."Sell-to/Buy-from No." := "Buy-from Vendor No.";
                    GenJnlLine."Bill-to/Pay-to No." := "Pay-to Vendor No.";
                    GenJnlLine."Country/Region Code" := "VAT Country/Region Code";
                    GenJnlLine."VAT Registration No." := "VAT Registration No.";
                    GenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
                    GenJnlLine."Source No." := "Pay-to Vendor No.";
                    GenJnlLine."Posting No. Series" := "Posting No. Series";
                    GenJnlLine."IC Partner Code" := "Pay-to IC Partner Code";
                    GenJnlLine."Ship-to/Order Address Code" := "Order Address Code";

                    GenJnlLine."Payment Terms Code" := "Payment Terms Code";
                    GenJnlLine."Payment Method Code" := "Payment Method Code";

                    GenJnlLine."Generate AutoInvoices" := "Generate Autoinvoices" OR "Generate Autocredit Memo";
                    GenJnlLine."AutoDoc. No." := AutoDocNo;

                    IF InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
                      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"Fixed Asset";
                      IF InvPostingBuffer[1]."FA Posting Type" =
                        InvPostingBuffer[1]."FA Posting Type"::"Acquisition Cost"
                      THEN
                        GenJnlLine."FA Posting Type" := GenJnlLine."FA Posting Type"::"Acquisition Cost";
                      IF InvPostingBuffer[1]."FA Posting Type" =
                         InvPostingBuffer[1]."FA Posting Type"::Maintenance
                      THEN
                        GenJnlLine."FA Posting Type" := GenJnlLine."FA Posting Type"::Maintenance;
                      GenJnlLine."FA Posting Date" := InvPostingBuffer[1]."FA Posting Date";
                      GenJnlLine."Depreciation Book Code" := InvPostingBuffer[1]."Depreciation Book Code";
                      GenJnlLine."Salvage Value" := InvPostingBuffer[1]."Salvage Value";
                      GenJnlLine."Depr. until FA Posting Date" := InvPostingBuffer[1]."Depr. until FA Posting Date";
                      GenJnlLine."Depr. Acquisition Cost" := InvPostingBuffer[1]."Depr. Acquisition Cost";
                      GenJnlLine."Maintenance Code" := InvPostingBuffer[1]."Maintenance Code";
                      GenJnlLine."Insurance No." := InvPostingBuffer[1]."Insurance No.";
                      GenJnlLine."Budgeted FA No." := InvPostingBuffer[1]."Budgeted FA No.";
                      GenJnlLine."Duplicate in Depreciation Book" := InvPostingBuffer[1]."Duplicate in Depreciation Book";
                      GenJnlLine."Use Duplication List" := InvPostingBuffer[1]."Use Duplication List";
                    END;

                    RunGenJnlPostLine(GenJnlLine,InvPostingBuffer[1]."Dimension Entry No.");
                  UNTIL InvPostingBuffer[1].NEXT(-1) = 0;

                InvPostingBuffer[1].DELETEALL;

                // Check External Document number
                IF PurchSetup."Ext. Doc. No. Mandatory" OR
                  (GenJnlLineExtDocNo <> '')
                THEN BEGIN
                  VendLedgEntry.RESET;
                  VendLedgEntry.SETCURRENTKEY("External Document No.");
                  VendLedgEntry.SETRANGE("Document Type",GenJnlLineDocType);
                  VendLedgEntry.SETRANGE("External Document No.",GenJnlLineExtDocNo);
                  VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
                  IF VendLedgEntry.FINDFIRST THEN
                    ERROR(
                      Text016,
                      VendLedgEntry."Document Type",GenJnlLineExtDocNo);
                END;

                // Post vendor entries
                IF GUIALLOWED THEN
                  Window.UPDATE(4,1);
                GenJnlLine.INIT;
                GenJnlLine."Posting Date" := "Posting Date";
                GenJnlLine."Document Date" := "Document Date";
                GenJnlLine.Description := "Posting Description";
                GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                GenJnlLine."Reason Code" := "Reason Code";
                GenJnlLine."Account Type" := GenJnlLine."Account Type"::Vendor;
                GenJnlLine."Account No." := "Pay-to Vendor No.";
                GenJnlLine."Document Type" := GenJnlLineDocType;
                GenJnlLine."Document No." := GenJnlLineDocNo;
                GenJnlLine."External Document No." := GenJnlLineExtDocNo;
                GenJnlLine."Currency Code" := "Currency Code";
                GenJnlLine.Amount := -TotalPurchLine."Amount Including VAT";
                GenJnlLine."Source Currency Code" := "Currency Code";
                GenJnlLine."Source Currency Amount" := -TotalPurchLine."Amount Including VAT";
                GenJnlLine."Amount (LCY)" := -TotalPurchLineLCY."Amount Including VAT";
                IF PurchHeader."Currency Code" = '' THEN
                  GenJnlLine."Currency Factor" :=  1
                ELSE
                  GenJnlLine."Currency Factor" :=  PurchHeader."Currency Factor";
                GenJnlLine."Sales/Purch. (LCY)" := -TotalPurchLineLCY.Amount;
                GenJnlLine.Correction := Correction;
                GenJnlLine."Inv. Discount (LCY)" := -TotalPurchLineLCY."Inv. Discount Amount";
                GenJnlLine."Pmt. Discount Given/Rec. (LCY)" := -TotalPurchLineLCY."Pmt. Disc. Rcd. Amount";
                GenJnlLine."Sell-to/Buy-from No." := "Buy-from Vendor No.";
                GenJnlLine."Bill-to/Pay-to No." := "Pay-to Vendor No.";
                GenJnlLine."Salespers./Purch. Code" := "Purchaser Code";
                GenJnlLine."System-Created Entry" := TRUE;
                GenJnlLine."On Hold" := "On Hold";
                GenJnlLine."Applies-to Doc. Type" := "Applies-to Doc. Type";
                GenJnlLine."Applies-to Bill No." := "Applies-to Bill No.";
                GenJnlLine."Applies-to Doc. No." := "Applies-to Doc. No.";
                GenJnlLine."Applies-to ID" := "Applies-to ID";
                GenJnlLine."Allow Application" := "Bal. Account No." = '';
                GenJnlLine."Payment Terms Code" := "Payment Terms Code";
                GenJnlLine."Payment Method Code" := "Payment Method Code";
                GenJnlLine."Pmt. Address Code" := "Pay-at Code";
                GenJnlLine."Cust./Vendor Bank Acc. Code" := "Vendor Bank Acc. Code";
                GenJnlLine."Due Date" := "Due Date";
                GenJnlLine."Pmt. Discount Date" := "Pmt. Discount Date";
                GenJnlLine."Payment Discount %" := "Payment Discount %";
                GenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
                GenJnlLine."Source No." := "Pay-to Vendor No.";
                GenJnlLine."Source Code" := SrcCode;
                GenJnlLine."Posting No. Series" := "Posting No. Series";
                GenJnlLine."IC Partner Code" := "Pay-to IC Partner Code";
                GenJnlLine."Generate AutoInvoices" := "Generate Autoinvoices" OR "Generate Autocredit Memo";
                GenJnlLine."AutoDoc. No." := AutoDocNo;

                // $005 AJS 02.01.2007, Comprobantes fiscales

                GenJnlLine."Cod. Grupo NCF"     := "Cod. Grupo NCF";
                GenJnlLine."Comprobante Fiscal" := "Comprobante Fiscal";

                // $006 AJS 07.02.2007, Declaracion ITBIS

                GenJnlLine."Tipo factura compra" := "Tipo factura compra";

                TempJnlLineDim.DELETEALL;
                TempDocDim.RESET;
                TempDocDim.SETRANGE("Table ID",DATABASE::"Purchase Header");
                DimMgt.CopyDocDimToJnlLineDim(TempDocDim,TempJnlLineDim);
                GenJnlPostLine.RunWithCheck(GenJnlLine,TempJnlLineDim);

                // Balancing account
                IF "Bal. Account No." <> '' THEN BEGIN
                  IF GUIALLOWED THEN
                    Window.UPDATE(5,1);
                  VendLedgEntry.FINDLAST;
                  GenJnlLine.INIT;
                  GenJnlLine."Posting Date" := "Posting Date";
                  GenJnlLine."Document Date" := "Document Date";
                  GenJnlLine.Description := "Posting Description";
                  GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                  GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                  GenJnlLine."Reason Code" := "Reason Code";
                  IF PurchHeader."Currency Code" = '' THEN
                    GenJnlLine."Currency Factor" :=  1
                  ELSE
                    GenJnlLine."Currency Factor" :=  PurchHeader."Currency Factor";
                  GenJnlLine."Account Type" := GenJnlLine."Account Type"::Vendor;
                  GenJnlLine."Account No." := "Pay-to Vendor No.";
                  IF "Document Type" = "Document Type"::"Credit Memo" THEN
                    GenJnlLine."Document Type" := GenJnlLine."Document Type"::Refund
                  ELSE
                    GenJnlLine."Document Type" := GenJnlLine."Document Type"::Payment;
                  GenJnlLine."Document No." := GenJnlLineDocNo;
                  GenJnlLine."External Document No." := GenJnlLineExtDocNo;
                  IF "Bal. Account Type" = "Bal. Account Type"::"Bank Account" THEN
                    GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::"Bank Account";
                  GenJnlLine."Bal. Account No." := "Bal. Account No.";
                  GenJnlLine."Currency Code" := "Currency Code";
                  GenJnlLine.Amount := TotalPurchLine."Amount Including VAT";
                  GenJnlLine.Correction := Correction;
                  GenJnlLine."Source Currency Code" := "Currency Code";
                  GenJnlLine."Source Currency Amount" := GenJnlLine.Amount;
                  VendLedgEntry.CALCFIELDS(Amount);
                  IF VendLedgEntry.Amount = 0 THEN
                    GenJnlLine."Amount (LCY)" := TotalPurchLineLCY."Amount Including VAT"
                  ELSE
                    GenJnlLine."Amount (LCY)" :=
                      TotalPurchLineLCY."Amount Including VAT" +
                      ROUND(
                        VendLedgEntry."Remaining Pmt. Disc. Possible" /
                        VendLedgEntry."Adjusted Currency Factor");
                  IF PurchHeader."Currency Code" = '' THEN
                    GenJnlLine."Currency Factor" :=  1
                  ELSE
                    GenJnlLine."Currency Factor" :=  PurchHeader."Currency Factor";
                  GenJnlLine."Applies-to Doc. Type" := GenJnlLineDocType;
                  GenJnlLine."Applies-to Doc. No." := GenJnlLineDocNo;
                  GenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
                  GenJnlLine."Source No." := "Pay-to Vendor No.";
                  GenJnlLine."Source Code" := SrcCode;
                  GenJnlLine."Posting No. Series" := "Posting No. Series";
                  GenJnlLine."IC Partner Code" := "Pay-to IC Partner Code";
                  GenJnlLine."Allow Zero-Amount Posting" := TRUE;
                  GenJnlPostLine.RunWithCheck(GenJnlLine,TempJnlLineDim);
                END;
              END;

              IF ICGenJnlLineNo > 0 THEN
                PostICGenJnl;

              InvtSetup.GET;
              IF InvtSetup."Automatic Cost Adjustment" <>
                 InvtSetup."Automatic Cost Adjustment"::Never
              THEN BEGIN
                InvtAdjmt.SetProperties(TRUE,InvtSetup."Automatic Cost Posting");
                InvtAdjmt.MakeMultiLevelAdjmt;
              END;

              // Create Bills
              IF PaymentMethod.GET(PurchHeader."Payment Method Code") THEN
                IF (PaymentMethod."Create Bills" OR PaymentMethod."Invoices to Cartera") AND
                   (NOT AppManagement.AccessToCartera) AND Invoice THEN
                   ERROR(Text1100100 +
                         Text1100101, PaymentMethod.TABLECAPTION);

              IF Invoice AND ("Bal. Account No." = '') AND
                 NOT ("Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"]) AND
                 AppManagement.AccessToCartera
              THEN
                SplitPayment.SplitPurchInv(
                  PurchHeader,
                  VendLedgEntry,
                  Window,
                  SrcCode,
                  GenJnlLineExtDocNo,
                  GenJnlLineDocNo,
                  -(TotalPurchLine."Amount Including VAT" - TotalPurchLine.Amount));

              // Modify/delete purchase header and purchase lines
              IF NOT RECORDLEVELLOCKING THEN BEGIN
                IF WhseReceive THEN
                  WhseRcptLine.LOCKTABLE(TRUE,TRUE);
                IF WhseShip THEN
                  WhseShptLine.LOCKTABLE(TRUE,TRUE);
                DocDim.LOCKTABLE(TRUE,TRUE);
                IF InvtPickPutaway THEN
                  WhseRqst.LOCKTABLE(TRUE,TRUE);
                PurchLine.LOCKTABLE(TRUE,TRUE);
                ItemChargeAssgntPurch.LOCKTABLE(TRUE,TRUE);
              END;

              IF Receive THEN BEGIN
                "Last Receiving No." := "Receiving No.";
                "Receiving No." := '';
              END;
              IF Invoice THEN BEGIN
                "Last Posting No." := "Posting No.";
                "Posting No." := '';
              END;
              IF Ship THEN BEGIN
                "Last Return Shipment No." := "Return Shipment No.";
                "Return Shipment No." := '';
              END;

              IF ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) AND
                 (NOT EverythingInvoiced)
              THEN BEGIN
                MODIFY;
                InsertTrackingSpecification;

                IF PurchLine.FINDSET THEN
                  REPEAT
                    IF PurchLine.Quantity <> 0 THEN BEGIN
                      IF Receive THEN BEGIN
                        PurchLine."Quantity Received" := PurchLine."Quantity Received" + PurchLine."Qty. to Receive";
                        PurchLine."Qty. Received (Base)" := PurchLine."Qty. Received (Base)" + PurchLine."Qty. to Receive (Base)";
                      END;
                      IF Ship THEN BEGIN
                        PurchLine."Return Qty. Shipped" := PurchLine."Return Qty. Shipped" + PurchLine."Return Qty. to Ship";
                        PurchLine."Return Qty. Shipped (Base)" :=
                          PurchLine."Return Qty. Shipped (Base)" + PurchLine."Return Qty. to Ship (Base)";
                      END;
                      IF Invoice THEN BEGIN
                        TempPrePmtAmtToDeduct := PurchLine."Prepmt Amt to Deduct";
                        IF "Document Type" = "Document Type"::Order THEN BEGIN
                          IF ABS(PurchLine."Quantity Invoiced" + PurchLine."Qty. to Invoice") >
                             ABS(PurchLine."Quantity Received")
                          THEN BEGIN
                            PurchLine.VALIDATE("Qty. to Invoice",
                              PurchLine."Quantity Received" - PurchLine."Quantity Invoiced");
                            PurchLine."Qty. to Invoice (Base)" :=
                              PurchLine."Qty. Received (Base)" - PurchLine."Qty. Invoiced (Base)";
                          END;
                        END ELSE
                          IF ABS(PurchLine."Quantity Invoiced" + PurchLine."Qty. to Invoice") >
                             ABS(PurchLine."Return Qty. Shipped")
                          THEN BEGIN
                            PurchLine.VALIDATE("Qty. to Invoice",
                              PurchLine."Return Qty. Shipped" - PurchLine."Quantity Invoiced");
                            PurchLine."Qty. to Invoice (Base)" :=
                              PurchLine."Return Qty. Shipped (Base)" - PurchLine."Qty. Invoiced (Base)";
                          END;

                        PurchLine."Prepmt Amt to Deduct" := TempPrePmtAmtToDeduct;

                        PurchLine."Quantity Invoiced" := PurchLine."Quantity Invoiced" + PurchLine."Qty. to Invoice";
                        PurchLine."Qty. Invoiced (Base)" := PurchLine."Qty. Invoiced (Base)" + PurchLine."Qty. to Invoice (Base)";
                        IF PurchLine."Qty. to Invoice" <> 0 THEN BEGIN
                          PurchLine."Prepmt Amt Deducted" :=
                            PurchLine."Prepmt Amt Deducted" + PurchLine."Prepmt Amt to Deduct";
                          PurchLine."Prepmt VAT Diff. Deducted" :=
                            PurchLine."Prepmt VAT Diff. Deducted" + PurchLine."Prepmt VAT Diff. to Deduct";
                          IF "Currency Code" <> '' THEN BEGIN
                            TempPrePayDeductLCYPurchLine := PurchLine;
                            IF TempPrePayDeductLCYPurchLine.FIND THEN
                              PurchLine."Prepmt. Amount Inv. (LCY)" := PurchLine."Prepmt. Amount Inv. (LCY)" -
                                TempPrePayDeductLCYPurchLine."Prepmt. Amount Inv. (LCY)";
                          END ELSE
                            PurchLine."Prepmt. Amount Inv. (LCY)" :=
                              ROUND(
                                ROUND(
                                  ROUND(PurchLine."Direct Unit Cost" * (PurchLine.Quantity - PurchLine."Quantity Received"),
                                    Currency."Amount Rounding Precision") *
                                  (1 - PurchLine."Line Discount %" / 100),Currency."Amount Rounding Precision") *
                                PurchLine."Prepayment %" / 100,Currency."Amount Rounding Precision");
                          PurchLine."Prepmt Amt to Deduct" :=
                            PurchLine."Prepmt. Amt. Inv." - PurchLine."Prepmt Amt Deducted";


                          PurchLine."Prepmt VAT Diff. to Deduct" := 0;
                        END;
                      END;

                      UpdateBlanketOrderLine(PurchLine,Receive,Ship,Invoice);

                      PurchLine.InitOutstanding;

                      IF WhseHandlingRequired OR
                         (PurchSetup."Default Qty. to Ship/Rcv." = PurchSetup."Default Qty. to Ship/Rcv."::Blank)
                      THEN BEGIN
                        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
                          PurchLine."Return Qty. to Ship" := 0;
                          PurchLine."Return Qty. to Ship (Base)" := 0;
                        END ELSE BEGIN
                          PurchLine."Qty. to Receive" := 0;
                          PurchLine."Qty. to Receive (Base)" := 0;
                        END;
                        PurchLine.InitQtyToInvoice;
                      END ELSE BEGIN
                        IF "Document Type" = "Document Type"::"Return Order" THEN
                          PurchLine.InitQtyToShip
                        ELSE
                          PurchLine.InitQtyToReceive2;
                      END;
                      PurchLine.SetDefaultQuantity;
                      PurchLine.MODIFY;
                    END;
                  UNTIL PurchLine.NEXT = 0;

                UpdateAssocOrder;
                IF WhseReceive THEN BEGIN
                  WhsePostRcpt.PostUpdateWhseDocuments(WhseRcptHeader);
                  TempWhseRcptHeader.DELETE;
                END;
                IF WhseShip THEN BEGIN
                  WhsePostShpt.PostUpdateWhseDocuments(WhseShptHeader);
                  TempWhseShptHeader.DELETE;
                END;
                WhsePurchRelease.Release(PurchHeader);
                UpdateItemChargeAssgnt;

                IF RoundingLineInserted THEN BEGIN
                  DocDim.RESET;
                  DocDim.SETRANGE("Table ID",DATABASE::"Purchase Line");
                  DocDim.SETRANGE("Document Type","Document Type");
                  DocDim.SETRANGE("Document No.","No.");
                  DocDim.SETRANGE("Line No.",RoundingLineNo);
                  DocDim.DELETEALL;
                END;

              END ELSE BEGIN

                CASE "Document Type" OF
                  "Document Type"::Invoice:
                    BEGIN
                      PurchLine.SETFILTER("Receipt No.",'<>%1','');
                      IF PurchLine.FINDSET THEN
                        REPEAT
                          IF PurchLine.Type <> PurchLine.Type::" " THEN BEGIN
                            PurchRcptLine.GET(PurchLine."Receipt No.",PurchLine."Receipt Line No.");
                            TempPurchLine.GET(
                              TempPurchLine."Document Type"::Order,
                              PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");
                            IF PurchLine.Type = PurchLine.Type::"Charge (Item)" THEN
                              UpdatePurchOrderChargeAssgnt(PurchLine,TempPurchLine);
                            TempPurchLine."Quantity Invoiced" :=
                              TempPurchLine."Quantity Invoiced" + PurchLine."Qty. to Invoice";
                            TempPurchLine."Qty. Invoiced (Base)" :=
                              TempPurchLine."Qty. Invoiced (Base)" + PurchLine."Qty. to Invoice (Base)";
                            IF ABS(TempPurchLine."Quantity Invoiced") > ABS(TempPurchLine."Quantity Received") THEN
                              ERROR(
                                Text017,
                                TempPurchLine."Document No.");
                            IF TempPurchLine."Sales Order Line No." <> 0 THEN BEGIN // Drop Shipment
                              SalesOrderLine.GET(
                                SalesOrderLine."Document Type"::Order,
                                TempPurchLine."Sales Order No.",TempPurchLine."Sales Order Line No.");
                              IF ABS(TempPurchLine.Quantity - TempPurchLine."Quantity Invoiced") <
                                 ABS(SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced")
                              THEN
                                ERROR(
                                  Text018 +
                                  Text99000000,
                                  TempPurchLine."Sales Order No.");
                            END;
                            TempPurchLine.InitQtyToInvoice;
                            TempPurchLine."Prepmt Amt Deducted" := TempPurchLine."Prepmt Amt Deducted" + PurchLine."Prepmt Amt to Deduct";
                            TempPurchLine."Prepmt VAT Diff. Deducted" :=
                              TempPurchLine."Prepmt VAT Diff. Deducted" + PurchLine."Prepmt VAT Diff. to Deduct";
                            IF "Currency Code" <> '' THEN BEGIN
                              TempPrePayDeductLCYPurchLine := PurchLine;
                              IF TempPrePayDeductLCYPurchLine.FIND THEN
                                TempPurchLine."Prepmt. Amount Inv. (LCY)" := TempPurchLine."Prepmt. Amount Inv. (LCY)" -
                                  TempPrePayDeductLCYPurchLine."Prepmt. Amount Inv. (LCY)";
                            END ELSE
                              TempPurchLine."Prepmt. Amount Inv. (LCY)" := TempPurchLine."Prepmt. Amount Inv. (LCY)" -
                                PurchLine."Prepmt Amt to Deduct";
                            IF (TempPurchLine."Quantity Invoiced" = TempPurchLine.Quantity) AND
                              (TempPurchLine."Prepayment %" <> 0) THEN
                              PrepayRealizeGainLoss(TempPurchLine);
                            TempPurchLine."Prepmt Amt to Deduct" := TempPurchLine."Prepmt. Amt. Inv." - TempPurchLine."Prepmt Amt Deducted";
                            TempPurchLine."Prepmt VAT Diff. to Deduct" := 0;
                            TempPurchLine.InitOutstanding;
                            TempPurchLine.MODIFY;
                          END;
                        UNTIL PurchLine.NEXT = 0;
                      InsertTrackingSpecification;

                      PurchLine.SETRANGE("Receipt No.");
                    END;
                  "Document Type"::"Credit Memo":
                    BEGIN
                      PurchLine.SETFILTER("Return Shipment No.",'<>%1','');
                      IF PurchLine.FINDSET THEN
                        REPEAT
                          IF PurchLine.Type <> PurchLine.Type::" " THEN BEGIN
                            ReturnShptLine.GET(PurchLine."Return Shipment No.",PurchLine."Return Shipment Line No.");
                            TempPurchLine.GET(
                              TempPurchLine."Document Type"::"Return Order",
                              ReturnShptLine."Return Order No.",ReturnShptLine."Return Order Line No.");
                            IF PurchLine.Type = PurchLine.Type::"Charge (Item)" THEN
                              UpdatePurchOrderChargeAssgnt(PurchLine,TempPurchLine);
                            TempPurchLine."Quantity Invoiced" :=
                              TempPurchLine."Quantity Invoiced" + PurchLine."Qty. to Invoice";
                            TempPurchLine."Qty. Invoiced (Base)" :=
                              TempPurchLine."Qty. Invoiced (Base)" + PurchLine."Qty. to Invoice (Base)";
                            IF ABS(TempPurchLine."Quantity Invoiced") > ABS(TempPurchLine."Return Qty. Shipped") THEN
                              ERROR(
                                Text041,
                                TempPurchLine."Document No.");
                            TempPurchLine.InitQtyToInvoice;
                            TempPurchLine.InitOutstanding;
                            TempPurchLine.MODIFY;
                          END;
                        UNTIL PurchLine.NEXT = 0;
                      InsertTrackingSpecification;

                      PurchLine.SETRANGE("Return Shipment No.");
                    END;
                  ELSE
                    IF PurchLine.FINDSET THEN
                      REPEAT
                        IF (PurchLine."Prepayment %" <> 0)  THEN BEGIN
                          IF "Currency Code" <> '' THEN BEGIN
                            TempPrePayDeductLCYPurchLine := PurchLine;
                            IF TempPrePayDeductLCYPurchLine.FIND THEN
                              PurchLine."Prepmt. Amount Inv. (LCY)" := PurchLine."Prepmt. Amount Inv. (LCY)" -
                                TempPrePayDeductLCYPurchLine."Prepmt. Amount Inv. (LCY)";
                          END ELSE
                            PurchLine."Prepmt. Amount Inv. (LCY)" := PurchLine."Prepmt. Amount Inv. (LCY)" - PurchLine."Prepmt Amt to Deduct";
                          PrepayRealizeGainLoss(PurchLine);
                        END;
                      UNTIL PurchLine.NEXT = 0;
                END;

                PurchLine.SETFILTER("Blanket Order Line No.",'<>0');
                IF PurchLine.FINDSET THEN
                  REPEAT
                    UpdateBlanketOrderLine(PurchLine,Receive,Ship,Invoice);
                  UNTIL PurchLine.NEXT = 0;
                PurchLine.SETRANGE("Blanket Order Line No.");

                IF WhseReceive THEN BEGIN
                  WhsePostRcpt.PostUpdateWhseDocuments(WhseRcptHeader);
                  TempWhseRcptHeader.DELETE;
                END;
                IF WhseShip THEN BEGIN
                  WhsePostShpt.PostUpdateWhseDocuments(WhseShptHeader);
                  TempWhseShptHeader.DELETE;
                END;

                DocDim.RESET;
                DocDim.SETRANGE("Table ID",DATABASE::"Purchase Header");
                DocDim.SETRANGE("Document Type","Document Type");
                DocDim.SETRANGE("Document No.","No.");
                DocDim.DELETEALL;
                DocDim.SETRANGE("Table ID",DATABASE::"Purchase Line");
                DocDim.DELETEALL;

                ApprovalMgt.DeleteApprovalEntry(DATABASE::"Purchase Header","Document Type","No.");

                IF HASLINKS THEN DELETELINKS;
                DELETE;

                ReservePurchLine.DeleteInvoiceSpecFromHeader(PurchHeader);
                IF PurchLine.FINDFIRST THEN REPEAT
                  IF PurchLine.HASLINKS THEN
                    PurchLine.DELETELINKS;
                UNTIL PurchLine.NEXT = 0;
                PurchLine.DELETEALL;
                DeleteItemChargeAssgnt;

                PurchCommentLine.SETRANGE("Document Type","Document Type");
                PurchCommentLine.SETRANGE("No.","No.");
                IF NOT PurchCommentLine.ISEMPTY THEN
                  PurchCommentLine.DELETEALL;
                WhseRqst.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
                WhseRqst.SETRANGE("Source Type",DATABASE::"Purchase Line");
                WhseRqst.SETRANGE("Source Subtype","Document Type");
                WhseRqst.SETRANGE("Source No.","No.");
                IF NOT WhseRqst.ISEMPTY THEN
                  WhseRqst.DELETEALL;
              END;

              InsertValueEntryRelation;

              IF NOT InvtPickPutaway THEN
                COMMIT;
              CLEAR(WhsePostRcpt);
              CLEAR(WhsePostShpt);
              CLEAR(GenJnlPostLine);
              CLEAR(JobPostLine);
              CLEAR(ItemJnlPostLine);
              CLEAR(WhseJnlPostLine);
              CLEAR(InvtAdjmt);

              // $014 JPT 01/02/08 Gestion Documental FTP GOC
              IF "Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"] THEN
                cFunGesDoc.RefrescarEstadoCta("Buy-from Vendor No.");

              IF GUIALLOWED THEN
                Window.CLOSE;
            END;
            IF vNumDocCre <> '' THEN
              MESSAGE(Text070,vNumDocCre);

            UpdateAnalysisView.UpdateAll(0,TRUE);
            UpdateItemAnalysisView.UpdateAll(0,TRUE);
            Rec := PurchHeader;

            // $015 JPT 11/03/08 Escaneo documentos
            // Mueve el archivo . Lo hacemos al final

            IF (NOT PurchHeader.Anulaci¢n) AND
               ("Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"] ) THEN //+$017
              cFunVar.RegistrarDocCompraEscaneado("Codigo barras PDF", "Posting Date");

            // Borramos la marca
            IF "Document Type" IN ["Document Type"::Invoice, "Document Type"::"Credit Memo"] THEN //+$017
              cFunVar.MantenMarcaArchivo(0 , GenJnlLineDocType , GenJnlLineDocNo)
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=There is nothing to post.;ESP=No hay nada que registrar.';
      Text002@1001 : TextConst 'ENU=A drop shipment from a purchase order cannot be received and invoiced at the same time.;ESP=Un env¡o directo desde un pedido de compras no se puede recibir y facturar a la vez.';
      Text003@1002 : TextConst 'ENU="You cannot invoice this purchase order before the associated sales orders have been invoiced. ";ESP="Antes de facturar este pedido de compra hay que registrar los pedidos de venta asociados. "';
      Text004@1003 : TextConst 'ENU=Please invoice sales order %1 before invoicing this purchase order.;ESP=Facture el pedido de venta %1 antes de facturar este pedido de compra.';
      Text005@1004 : TextConst 'ENU=Posting lines              #2######\;ESP=Registrando l¡neas         #2######\';
      Text006@1005 : TextConst 'ENU=Posting purchases and VAT  #3######\;ESP=Registrando compra e IVA   #3######\';
      Text007@1006 : TextConst 'ENU=Posting to vendors         #4######\;ESP=Registrando proveedor      #4######\';
      Text008@1007 : TextConst 'ENU=Posting to bal. account    #5######;ESP=Registrando contrapartida  #5######';
      Text009@1008 : TextConst 'ENU=Posting lines         #2######;ESP=Registrando l¡neas    #2######';
      Text010@1009 : TextConst 'ENU=%1 %2 -> Invoice %3;ESP=%1 %2 -> Factura %3';
      Text011@1010 : TextConst 'ENU=%1 %2 -> Credit Memo %3;ESP=%1 %2 -> Abono %3';
      Text012@1011 : TextConst 'ENU=must have the same sign as the receipt;ESP=debe tener el mismo signo que el albar n de compra';
      Text014@1012 : TextConst 'ENU=Receipt lines have been deleted.;ESP=Se han borrado las l¡neas del albar n de compra.';
      Text015@1013 : TextConst 'ENU=You cannot purchase resources.;ESP=No se pueden comprar recursos.';
      Text016@1014 : TextConst 'ENU=Purchase %1 %2 already exists for this vendor.;ESP=El documento de compra %1 %2 ya existe para este proveedor.';
      Text017@1015 : TextConst 'ENU=You cannot invoice order %1 for more than you have received.;ESP=En el pedido %1 no se puede facturar m s de lo recibido.';
      Text018@1016 : TextConst 'ENU="You cannot post this purchase order before the associated sales orders have been invoiced. ";ESP="Antes de registrar este pedido de compra hay que registrar los pedidos de venta asociados. "';
      Text021@1017 : TextConst 'ENU=VAT Amount;ESP=Importe IVA';
      Text022@1018 : TextConst 'ENU=%1% VAT;ESP=%1% IVA';
      Text023@1019 : TextConst 'ENU=in the associated blanket order must not be greater than %1;ESP=en el pedido abierto asociado no debe ser superior a %1';
      Text024@1020 : TextConst 'ENU=in the associated blanket order must be reduced.;ESP=en el pedido abierto asociado se debe reducir.';
      Text025@1021 : TextConst 'ENU=Please enter "Yes" in %1 and/or %2 and/or %3.;ESP=Introduzca "Si" en %1 y/¢ %2 y/¢ %3.';
      Text026@1022 : TextConst 'ENU="Warehouse handling is required for %1 = %2, %3 = %4, %5 = %6.";ESP="Manipulaci¢n almacn requerido para %1 = %2, %3 = %4, %5 = %6."';
      Text028@1024 : TextConst 'ENU=must have the same sign as the return shipment;ESP=debe tener el mismo signo que el env¡o devoluci¢n';
      Text029@1025 : TextConst 'ENU=Line %1 of the return shipment %2, which you are attempting to invoice, has already been invoiced.;ESP=L¡nea %1 del env¡o dev. %2, que esta intentando facturar, ya se ha facturado.';
      Text030@1026 : TextConst 'ENU=Line %1 of the receipt %2, which you are attempting to invoice, has already been invoiced.;ESP=L¡nea %1 del recibo %2,que est  intentando facturar,ha sido ya facturado.';
      Text031@1027 : TextConst 'ENU=The quantity you are attempting to invoice is greater than the quantity in receipt %1;ESP=La cantidad que est  intentando facturar es m s grande que la del recibo %1';
      Text032@1028 : TextConst 'ENU=The combination of dimensions used in %1 %2 is blocked. %3;ESP=La combinaci¢n de dimensiones utilizada en %1 %2 est  bloqueada. %3';
      Text033@1029 : TextConst 'ENU=The combination of dimensions used in %1 %2, line no. %3 is blocked. %4;ESP=La combinaci¢n de dimensiones utilizada en %1 %2, n§ l¡nea %3 est  bloqueada. %4';
      Text034@1030 : TextConst 'ENU=The dimensions used in %1 %2 are invalid. %3;ESP=Las dimensiones usadas en %1 %2 no son v lidas. %3';
      Text035@1031 : TextConst 'ENU=The dimensions used in %1 %2, line no. %3 are invalid. %4;ESP=Las dim. usadas en %1 %2, n§ l¡n. %3 no son v lidas. %4';
      Text036@1032 : TextConst 'ENU="You cannot assign more than %1 units in %2 = %3,%4 = %5,%6 = %7.";ESP="No puede asignar m s que %1 unidades en %2 = %3,%4 = %5,%6 = %7."';
      Text037@1033 : TextConst 'ENU=You must assign all item charges, if you invoice everything.;ESP=Si factura todo, debe asignar todos los cargos prod.';
      Text038@1034 : TextConst 'ENU="You cannot assign item charges to the %1 %2 = %3,%4 = %5, %6 = %7, because it has been invoiced.";ESP="No puede asignar cargos de prod. al %1 %2 = %3,%4 = %5, %6 = %7,porque ya se ha facturado."';
      CurrExchRate@1036 : Record 330;
      PurchSetup@1037 : Record 312;
      GLSetup@1038 : Record 98;
      InvtSetup@1161 : Record 313;
      GLEntry@1039 : Record 17;
      PurchHeader@1040 : Record 38;
      PurchLine@1041 : Record 39;
      PurchLine2@1042 : Record 39;
      JobPurchLine@1169 : Record 39;
      TotalPurchLine@1043 : Record 39;
      TotalPurchLineLCY@1044 : Record 39;
      TempPurchLine@1046 : Record 39;
      PurchLineACY@1047 : Record 39;
      TempPrepmtPurchLine@1167 : TEMPORARY Record 39;
      CombinedPurchLineTemp@1166 : TEMPORARY Record 39;
      PurchRcptHeader@1048 : Record 120;
      PurchRcptLine@1049 : Record 121;
      PurchInvHeader@1050 : Record 122;
      PurchInvLine@1051 : Record 123;
      PurchCrMemoHeader@1052 : Record 124;
      PurchCrMemoLine@1053 : Record 125;
      ReturnShptHeader@1054 : Record 6650;
      ReturnShptLine@1055 : Record 6651;
      SalesOrderHeader@1056 : Record 36;
      SalesOrderLine@1057 : Record 37;
      SalesShptHeader@1058 : Record 110;
      SalesShptLine@1059 : Record 111;
      ItemChargeAssgntPurch@1045 : Record 5805;
      TempItemChargeAssgntPurch@1060 : TEMPORARY Record 5805;
      GenJnlLine@1061 : Record 81;
      ItemJnlLine@1062 : Record 83;
      VendPostingGr@1064 : Record 93;
      SourceCodeSetup@1065 : Record 242;
      SourceCode@1066 : Record 230;
      PurchCommentLine@1067 : Record 43;
      PurchCommentLine2@1068 : Record 43;
      InvPostingBuffer@1069 : ARRAY [2] OF TEMPORARY Record 49;
      DropShptPostBuffer@1070 : TEMPORARY Record 223;
      GenPostingSetup@1071 : Record 252;
      VATPostingSetup@1072 : Record 325;
      Currency@1073 : Record 4;
      Vend@1074 : Record 23;
      VendLedgEntry@1075 : Record 25;
      FA@1076 : Record 5600;
      FASetup@1077 : Record 5603;
      DeprBook@1078 : Record 5611;
      GLAcc@1079 : Record 15;
      DocDim@1080 : Record 357;
      TempDocDim@1081 : TEMPORARY Record 357;
      ApprovalEntry@11164 : Record 454;
      TempApprovalEntry@11163 : TEMPORARY Record 454;
      PrepmtDocDim@1168 : TEMPORARY Record 357;
      WhseRqst@1082 : Record 5765;
      WhseRcptHeader@1023 : Record 7316;
      TempWhseRcptHeader@1142 : TEMPORARY Record 7316;
      WhseRcptLine@1153 : Record 7317;
      WhseShptHeader@1143 : Record 7320;
      TempWhseShptHeader@1145 : TEMPORARY Record 7320;
      WhseShptLine@1131 : Record 7321;
      PostedWhseRcptHeader@1140 : Record 7318;
      PostedWhseRcptLine@1146 : Record 7319;
      PostedWhseShptHeader@1147 : Record 7322;
      PostedWhseShptLine@1151 : Record 7323;
      TempVATAmountLine@1083 : TEMPORARY Record 290;
      TempVATAmountLineRemainder@1084 : TEMPORARY Record 290;
      Location@1085 : Record 14;
      TempHandlingSpecification@1094 : TEMPORARY Record 336;
      TempTrackingSpecification@1137 : TEMPORARY Record 336;
      TempTrackingSpecificationInv@1158 : TEMPORARY Record 336;
      TempWhseSplitSpecification@1160 : TEMPORARY Record 336;
      TempValueEntryRelation@5555 : TEMPORARY Record 6508;
      ReservationEntry2@1170 : Record 337;
      ReservationEntry3@1171 : TEMPORARY Record 337;
      ItemJnlLine2@1164 : Record 83;
      Job@1093 : Record 167;
      TempICGenJnlLine@11093 : TEMPORARY Record 81;
      TempICJnlLineDim@111164 : TEMPORARY Record 356;
      TempPrePayDeductLCYPurchLine@1190 : TEMPORARY Record 39;
      PaymentTerms@1100000 : Record 3;
      rPar@1103355000 : Record 7009700;
      VATBusGroup@1103355001 : Record 323;
      NoSeriesMgt@1086 : Codeunit 396;
      GenJnlCheckLine@1156 : Codeunit 11;
      GenJnlPostLine@1087 : Codeunit 12;
      ItemJnlPostLine@1089 : Codeunit 22;
      PurchCalcDisc@1090 : Codeunit 70;
      SalesTaxCalculate@1091 : Codeunit 398;
      ReservePurchLine@1092 : Codeunit 99000834;
      DimMgt@1095 : Codeunit 408;
      DimBufMgt@1096 : Codeunit 411;
      ApprovalMgt@11162 : Codeunit 439;
      WhsePurchRelease@1097 : Codeunit 5772;
      SalesPost@1101 : Codeunit 80;
      ItemTrackingMgt@1138 : Codeunit 6500;
      WMSMgmt@1139 : Codeunit 7302;
      WhseJnlPostLine@1100 : Codeunit 7301;
      WhsePostRcpt@1148 : Codeunit 5760;
      WhsePostShpt@1149 : Codeunit 5763;
      ICInOutBoxMgt@1157 : Codeunit 427;
      InvtAdjmt@1159 : Codeunit 5895;
      CostCalcMgt@1162 : Codeunit 5836;
      JobPostLine@1172 : Codeunit 1001;
      ReservePurchLine2@1088 : Codeunit 99000834;
      ServItemMgt@1063 : Codeunit 5920;
      cFunVar@1103355003 : Codeunit 7009720;
      cFunCont@1103355004 : Codeunit 7009705;
      cFunGesDoc@1103355007 : Codeunit 7009900;
      Window@1102 : Dialog;
      PostingDate@1103 : Date;
      Usedate@1104 : Date;
      GenJnlLineDocNo@1105 : Code[20];
      GenJnlLineExtDocNo@1106 : Code[20];
      SrcCode@1107 : Code[10];
      ItemLedgShptEntryNo@1108 : Integer;
      LineCount@1109 : Integer;
      GenJnlLineDocType@1110 : Integer;
      FALineNo@1111 : Integer;
      RoundingLineNo@1112 : Integer;
      WhseReference@1152 : Integer;
      RemQtyToBeInvoiced@1114 : Decimal;
      RemQtyToBeInvoicedBase@1115 : Decimal;
      QtyToBeInvoiced@1116 : Decimal;
      QtyToBeInvoicedBase@1117 : Decimal;
      RemAmt@1135 : Decimal;
      RemDiscAmt@1136 : Decimal;
      EverythingInvoiced@1118 : Boolean;
      LastLineRetrieved@1119 : Boolean;
      RoundingLineInserted@1120 : Boolean;
      DropShipOrder@1121 : Boolean;
      PostingDateExists@1122 : Boolean;
      ReplacePostingDate@1123 : Boolean;
      ReplaceDocumentDate@1124 : Boolean;
      ModifyHeader@1125 : Boolean;
      TempInvoice@1126 : Boolean;
      TempRcpt@1127 : Boolean;
      TempReturn@1128 : Boolean;
      GLSetupRead@1130 : Boolean;
      Text039@1098 : TextConst 'ENU=The quantity you are attempting to invoice is greater than the quantity in return shipment %1;ESP=La cantidad que est  intentando facturar es mayor que la cantidad en env¡o dev. %1';
      Text040@1099 : TextConst 'ENU=Return shipment lines have been deleted.;ESP=Se han borrado las l¡ns. env¡o devoluci¢n';
      Text041@1132 : TextConst 'ENU=You cannot invoice return order %1 for more than you have shipped.;ESP=No puede facturar la devoluci¢n %1 por m s de lo que ha enviado.';
      Text99000000@1035 : TextConst 'ENU=Post sales order %1 before posting this purchase order.;ESP=Registre ped. venta %1 antes de reg. este pedido compra.';
      Text042@1165 : TextConst 'ENU=Related item ledger entries cannot be found.;ESP=No se encuentran los movs. pdto. relacionados.';
      Text043@1173 : TextConst 'ENU=Item Tracking is signed wrongly.;ESP=Seguim. pdto. no est  bien definido.';
      Text044@1163 : TextConst 'ENU=Item Tracking does not match.;ESP=Seguimiento prod. no coincide.';
      Text045@1155 : TextConst 'ENU=is not within your range of allowed posting dates.;ESP=no est  dentro del intervalo de fechas de registro permitidas.';
      Text046@1144 : TextConst 'ENU=The %1 does not match the quantity defined in item tracking.;ESP=%1 no coincide con la cantidad definida en el seguimiento de productos.';
      Text047@1141 : TextConst 'ENU=cannot be more than %1.;ESP=no puede ser superior a %1.';
      Text048@1129 : TextConst 'ENU=must be at least %1.;ESP=debe ser al menos %1.';
      Text049@1174 : TextConst 'ENU=must be fully preinvoiced before you can ship or invoice %1.;ESP=debe tener una factura previa m s completa antes de enviar o facturar %1.';
      ItemChargeAssgntOnly@1133 : Boolean;
      ItemJnlRollRndg@1134 : Boolean;
      WhseReceive@1113 : Boolean;
      WhseShip@1150 : Boolean;
      InvtPickPutaway@1154 : Boolean;
      ICGenJnlLineNo@11165 : Integer;
      Text050@1177 : TextConst 'ENU=The total %1 cannot be more than %2.;ESP=El total %1 no puede ser m s de %2.';
      Text051@1178 : TextConst 'ENU=The total %1 must be at least %2.;ESP=El total %1 debe ser al menos %2.';
      Text052@1175 : TextConst 'ENU=An unposted invoice for order %1 exists. To avoid duplicate postings, delete order %1 or invoice %2.\Do you still want to post order %1?;ESP=Existe una factura sin registrar para el pedido %1. Para evitar registros duplicados, elimine el pedido %1 o la factura %2.\¨A£n desea registrar el pedido %1?';
      Text053@1176 : TextConst 'ENU=An invoice for order %1 exists in the IC inbox. To avoid duplicate postings, cancel invoice %2 in the IC inbox.\Do you still want to post order %1?;ESP=Existe una factura para el pedido %1 en la bandeja de entrada IC. Para evitar registros duplicados, cancele la factura %2 en la bandeja de entrada IC.\¨A£n desea registrar el pedido %1?';
      Text054@1179 : TextConst 'ENU=Posted invoice %1 already exists for order %2. To avoid duplicate postings, do not post order %2.\Do you still want to post order %2?;ESP=La factura registrada %1 ya existe para el pedido %2. Para evitar registros duplicados, no registre el pedido %2.\¨A£n desea registrar el pedido %2?';
      Text055@1180 : TextConst 'ENU=Order %1 originates from the same IC transaction as invoice %2. To avoid duplicate postings, delete order %1 or invoice %2.\Do you still want to post invoice %2?;ESP=El pedido %1 se origina desde la misma transacci¢n IC que la factura %2. Para evitar registros duplicados, elimine el pedido %1 o la factura %2.\¨A£n desea registrar la factura %2?';
      Text056@1181 : TextConst 'ENU=A document originating from the same IC transaction as document %1 exists in the IC inbox. To avoid duplicate postings, cancel document %2 in the IC inbox.\Do you still want to post document %1?;ESP=Un documento que se origina en la misma transacci¢n IC que el documento %1 ya existe en la bandeja de entrada IC. Para evitar registros duplicados, cancele el documento %2 en la bandeja de entrada IC.\¨A£n desea registrar el documento %1?';
      Text057@1182 : TextConst 'ENU=Posted invoice %1 originates from the same IC transaction as invoice %2. To avoid duplicate postings, do not post invoice %2.\Do you still want to post invoice %2?;ESP=La factura registrada %1 se origina en la misma transacci¢n IC que la factura %2. Para evitar registros duplicados, no registre la factura %2.\¨A£n desea registrar la factura %2?';
      Text058@1183 : TextConst 'ENU=This is an IC document. If you post this document and the invoice you receive from your IC partner, it will result in duplicate postings.\Are you sure you want to post this document?;ESP=Es un documento IC. Si registra este documento y la factura que reciba de su socio IC, esto provocar  registros duplicados.\¨Est  seguro de que desea registrar este documento?';
      TotalChargeAmt@1184 : Decimal;
      TotalChargeAmtLCY@1185 : Decimal;
      TotalChargeAmt2@1186 : Decimal;
      TotalChargeAmtLCY2@1187 : Decimal;
      Text059@1102601000 : TextConst 'ENU=You must assign item charge %1 if you want to invoice it.;ESP=Debe asignar un cargo prod. de %1 si quiere facturarlo.';
      Text060@1102601001 : TextConst 'ENU=You can not invoice item charge %1 because there is no item ledger entry to assign it to.;ESP=No puede facturar un cargo prod. de %1 porque no existe mov. producto al que asignarlo.';
      PurchLine3@1100001 : Record 39;
      PurchLine4@1100002 : Record 39;
      SrcCurrPurchLine@1100003 : Record 39;
      TransportMethod@1100004 : Record 259;
      PaymentMethod@1100005 : Record 289;
      CompanyInformation@1103355002 : Record 79;
      SplitPayment@1100006 : Codeunit 7000005;
      AppManagement@1100007 : Codeunit 1;
      AutoDocNo@1100008 : Code[20];
      Text070@1100253000 : TextConst 'ESP=Se ha creado el documento n§ %1.';
      Text1100000@1100010 : TextConst 'ENU=The Credit Memo doesn''t have a Corrected Invoice No. Do you want to continue?;ESP=El abono no tiene un n§ de factura corregido. ¨Confirma que desea continuar?';
      Text1100011@1100011 : TextConst 'ENU=The posting process has been cancelled by the user.;ESP=El proceso de registro ha sido cancelado por el usuario.';
      Text1100100@1000012 : TextConst 'ENU=You do not have permissions to create Documents in Cartera.\;ESP=No tiene permisos para crear Documentos en Cartera.\';
      Text1100101@1000011 : TextConst 'ENU=Please, change the %1.;ESP=Por favor, cambie el %1.';
      Text1100102@1100012 : TextConst 'ENU=Posting to bal. account    #5######\;ESP=Registrando contrapartida  #5######\';
      Text1100103@1000013 : TextConst 'ENU=Creating documents         #6######;ESP=Creando documentos         #6######';
      Text1100104@1000014 : TextConst 'ENU=Corrective Invoice;ESP=Factura correctiva';
      Text50000@1103355005 : TextConst 'ESP=Numero de comprobante fiscal vacio o incorrecto.';
      Text50001@1103355006 : TextConst 'ESP=El numero de comprobante fiscal ya se ha registrado para este proveedor.';
      Text50002@1100217000 : TextConst 'ENU=You must post the lines in journal %1-%2 to complete the invoice.;ESP=Debe registrar las lineas del diario %1-%2 para completar el registro de la factura.';

    PROCEDURE SetPostingDate@1(NewReplacePostingDate@1000 : Boolean;NewReplaceDocumentDate@1001 : Boolean;NewPostingDate@1002 : Date);
    BEGIN
      PostingDateExists := TRUE;
      ReplacePostingDate := NewReplacePostingDate;
      ReplaceDocumentDate := NewReplaceDocumentDate;
      PostingDate := NewPostingDate;
    END;

    LOCAL PROCEDURE PostItemJnlLine@2(PurchLine@1000 : Record 39;QtyToBeReceived@1001 : Decimal;QtyToBeReceivedBase@1002 : Decimal;QtyToBeInvoiced@1003 : Decimal;QtyToBeInvoicedBase@1004 : Decimal;ItemLedgShptEntryNo@1005 : Integer;ItemChargeNo@1006 : Code[20];TrackingSpecification@1010 : Record 336) : Integer;
    VAR
      TempJnlLineDim@1007 : TEMPORARY Record 356;
      ItemChargePurchLine@1008 : Record 39;
      OriginalItemJnlLine@1014 : Record 83;
      TempWhseJnlLine@1012 : TEMPORARY Record 7311;
      TempWhseTrackingSpecification@1016 : TEMPORARY Record 336;
      TempWhseJnlLine2@1011 : TEMPORARY Record 7311;
      Factor@1009 : Decimal;
      PostWhseJnlLine@1013 : Boolean;
      CheckApplToItemEntry@1015 : Boolean;
      PostJobConsumptionBeforePurch@1018 : Boolean;
      NextReservationEntryNo@1017 : Integer;
    BEGIN
      IF NOT ItemJnlRollRndg THEN BEGIN
        RemAmt := 0;
        RemDiscAmt := 0;
      END;
      WITH PurchLine DO BEGIN
        ItemJnlLine.INIT;
        ItemJnlLine."Posting Date" := PurchHeader."Posting Date";
        ItemJnlLine."Document Date" := PurchHeader."Document Date";
        ItemJnlLine."Source Posting Group" := PurchHeader."Vendor Posting Group";
        ItemJnlLine."Salespers./Purch. Code" := PurchHeader."Purchaser Code";
        ItemJnlLine."Country/Region Code" := PurchHeader."Buy-from Country/Region Code";
        ItemJnlLine."Reason Code" := PurchHeader."Reason Code";
        ItemJnlLine."Item No." := "No.";
        ItemJnlLine.Description := Description;
        ItemJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ItemJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ItemJnlLine."Location Code" := "Location Code";
        ItemJnlLine."Bin Code" := "Bin Code";
        ItemJnlLine."Variant Code" := "Variant Code";
        ItemJnlLine."Item Category Code" := "Item Category Code";
        ItemJnlLine."Product Group Code" := "Product Group Code";
        ItemJnlLine."Inventory Posting Group" := "Posting Group";
        ItemJnlLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        ItemJnlLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        ItemJnlLine."Serial No." := TrackingSpecification."Serial No.";
        ItemJnlLine."Lot No." := TrackingSpecification."Lot No.";
        ItemJnlLine."Job No." := "Job No.";
        ItemJnlLine."Job Task No." := "Job Task No.";
        IF ItemJnlLine."Job No." <> '' THEN
          ItemJnlLine."Job Purchase" := TRUE;
        ItemJnlLine."Applies-to Entry" := "Appl.-to Item Entry";
        ItemJnlLine."Transaction Type" := "Transaction Type";
        ItemJnlLine."Transport Method" := "Transport Method";
        ItemJnlLine."Entry/Exit Point" := "Entry Point";
        ItemJnlLine."Shipment Method Code" := PurchHeader."Shipment Method Code";
        ItemJnlLine.Area := Area;
        ItemJnlLine."Transaction Specification" := "Transaction Specification";
        ItemJnlLine."Drop Shipment" := "Drop Shipment";
        ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Purchase;
        ItemJnlLine."Prod. Order No." := "Prod. Order No.";
        ItemJnlLine."Prod. Order Line No." := "Prod. Order Line No.";
        ItemJnlLine."Unit of Measure Code" := "Unit of Measure Code";
        ItemJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        ItemJnlLine."Cross-Reference No." := "Cross-Reference No.";
        IF QtyToBeReceived = 0 THEN BEGIN
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Purchase Credit Memo"
          ELSE
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Purchase Invoice";
          ItemJnlLine."Document No." := GenJnlLineDocNo;
          ItemJnlLine."External Document No." := GenJnlLineExtDocNo;
          ItemJnlLine."Posting No. Series" := PurchHeader."Posting No. Series";
          IF QtyToBeInvoiced <> 0 THEN
            ItemJnlLine."Invoice No." := GenJnlLineDocNo;
        END ELSE BEGIN
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Purchase Return Shipment";
            ItemJnlLine."Document No." := ReturnShptHeader."No.";
            ItemJnlLine."External Document No." := ReturnShptHeader."Vendor Authorization No.";
            ItemJnlLine."Posting No. Series" := ReturnShptHeader."No. Series";
          END ELSE BEGIN
            ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Purchase Receipt";
            ItemJnlLine."Document No." := PurchRcptHeader."No.";
            ItemJnlLine."External Document No." := PurchRcptHeader."Vendor Shipment No.";
            ItemJnlLine."Posting No. Series" := PurchRcptHeader."No. Series";
          END;
          IF QtyToBeInvoiced <> 0 THEN BEGIN
            ItemJnlLine."Invoice No." := GenJnlLineDocNo;
            ItemJnlLine."External Document No." := GenJnlLineExtDocNo;
            IF ItemJnlLine."Document No." = '' THEN BEGIN
              IF "Document Type" = "Document Type"::"Credit Memo" THEN
                ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Purchase Credit Memo"
              ELSE
                ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Purchase Invoice";
              ItemJnlLine."Document No." := GenJnlLineDocNo;
            END;
            ItemJnlLine."Posting No. Series" := PurchHeader."Posting No. Series";
          END;
        END;

        ItemJnlLine."Document Line No." := "Line No.";
        ItemJnlLine.Quantity := QtyToBeReceived;
        ItemJnlLine."Quantity (Base)" := QtyToBeReceivedBase;
        ItemJnlLine."Invoiced Quantity" := QtyToBeInvoiced;
        ItemJnlLine."Invoiced Qty. (Base)" := QtyToBeInvoicedBase;
        ItemJnlLine."Unit Cost" := "Unit Cost (LCY)";
        ItemJnlLine."Source Currency Code" := PurchHeader."Currency Code";
        ItemJnlLine."Unit Cost (ACY)" := "Unit Cost";
        ItemJnlLine."Value Entry Type" := ItemJnlLine."Value Entry Type"::"Direct Cost";
        IF ItemChargeNo <> '' THEN BEGIN
          ItemJnlLine."Item Charge No." := ItemChargeNo;
          "Qty. to Invoice" := QtyToBeInvoiced;
        END;

        IF QtyToBeInvoiced <> 0 THEN BEGIN
          IF (QtyToBeInvoicedBase <> 0) AND (Type= Type::Item)THEN
            Factor := QtyToBeInvoicedBase / "Qty. to Invoice (Base)"
          ELSE
            Factor := QtyToBeInvoiced / "Qty. to Invoice";
          ItemJnlLine.Amount := Amount * Factor + RemAmt;
          IF PurchHeader."Prices Including VAT" THEN
            ItemJnlLine."Discount Amount" :=
              ("Line Discount Amount" + "Inv. Discount Amount" + "Pmt. Disc. Rcd. Amount") / (1 + "VAT %" / 100) * Factor + RemDiscAmt
          ELSE
              ItemJnlLine."Discount Amount" :=
                ("Line Discount Amount" + "Inv. Discount Amount" + "Pmt. Disc. Rcd. Amount") * Factor + RemDiscAmt;
          RemAmt := ItemJnlLine.Amount - ROUND(ItemJnlLine.Amount);
          RemDiscAmt := ItemJnlLine."Discount Amount" - ROUND(ItemJnlLine."Discount Amount");
          ItemJnlLine.Amount := ROUND(ItemJnlLine.Amount);
          ItemJnlLine."Discount Amount" := ROUND(ItemJnlLine."Discount Amount");
          ItemJnlLine."Pmt. Discount Amount" := "Pmt. Disc. Rcd. Amount"; // es0014
        END ELSE BEGIN
          IF PurchHeader."Prices Including VAT" THEN
            ItemJnlLine.Amount :=
              (QtyToBeReceived * "Direct Unit Cost" * (1 - PurchLine."Line Discount %" / 100) / (1 + "VAT %" / 100)) + RemAmt
          ELSE
            ItemJnlLine.Amount :=
              (QtyToBeReceived * "Direct Unit Cost" * (1 - PurchLine."Line Discount %" / 100)) + RemAmt;
          RemAmt := ItemJnlLine.Amount - ROUND(ItemJnlLine.Amount);
          IF PurchHeader."Currency Code" <> '' THEN
            ItemJnlLine.Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  PurchHeader."Posting Date",PurchHeader."Currency Code",
                  ItemJnlLine.Amount,PurchHeader."Currency Factor"))
          ELSE
            ItemJnlLine.Amount := ROUND(ItemJnlLine.Amount);
        END;

        ItemJnlLine."Source Type" := ItemJnlLine."Source Type"::Vendor;
        ItemJnlLine."Source No." := "Buy-from Vendor No.";
        ItemJnlLine."Invoice-to Source No." := "Pay-to Vendor No.";
        ItemJnlLine."Source Code" := SrcCode;
        ItemJnlLine."Purchasing Code" := "Purchasing Code";

        IF "Prod. Order No." <> '' THEN BEGIN
          ItemJnlLine.Subcontracting := TRUE;
          ItemJnlLine."Quantity (Base)" := CalcBaseQty("No.","Unit of Measure Code",QtyToBeReceived);
          ItemJnlLine."Invoiced Qty. (Base)" := CalcBaseQty("No.","Unit of Measure Code",QtyToBeInvoiced);
          ItemJnlLine."Output Quantity (Base)" := ItemJnlLine."Quantity (Base)";
          ItemJnlLine."Output Quantity" := QtyToBeReceived;
          ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Output;
          ItemJnlLine.Type := ItemJnlLine.Type::"Work Center";
          ItemJnlLine."No." := PurchLine."Work Center No.";
          ItemJnlLine."Routing No." := "Routing No.";
          ItemJnlLine."Routing Reference No." := "Routing Reference No.";
          ItemJnlLine."Operation No." := "Operation No.";
          ItemJnlLine."Work Center No." := "Work Center No.";
          ItemJnlLine."Unit Cost Calculation" := ItemJnlLine."Unit Cost Calculation"::Units;
          IF PurchLine.Finished THEN
            ItemJnlLine.Finished := PurchLine.Finished;
        END;

        ItemJnlLine."Item Shpt. Entry No." := ItemLedgShptEntryNo;
        ItemJnlLine."Indirect Cost %" := "Indirect Cost %";
        ItemJnlLine."Overhead Rate" := "Overhead Rate";
        ItemJnlLine."Return Reason Code" := "Return Reason Code";

        CheckApplToItemEntry :=
          PurchSetup."Exact Cost Reversing Mandatory" AND
          (Type = Type::Item) AND
          (ItemJnlLine.Quantity < 0);

        IF CheckApplToItemEntry THEN
          TESTFIELD("Appl.-to Item Entry");

        IF ("Location Code" <> '') AND
           (Type = Type::Item) AND
           (ItemJnlLine.Quantity <> 0) AND
           NOT ItemJnlLine.Subcontracting
        THEN BEGIN
          GetLocation("Location Code");
          IF (("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
              (Location."Directed Put-away and Pick")) OR
             (Location."Bin Mandatory" AND NOT (WhseReceive OR WhseShip OR InvtPickPutaway OR "Drop Shipment"))
          THEN BEGIN
            CreateWhseJnlLine(ItemJnlLine,PurchLine,TempWhseJnlLine);
            PostWhseJnlLine := TRUE;
          END;
        END;
          ReservationEntry3.DELETEALL;
        CLEAR(ItemJnlLine2);
        ItemJnlLine2 := ItemJnlLine;

        IF "Job No." <> '' THEN BEGIN
          ReservePurchLine2.FindReservEntry(PurchLine,ReservationEntry2);
          IF ReservationEntry2.FIND('-') THEN
            REPEAT
              ReservationEntry3 := ReservationEntry2;
              ReservationEntry3.INSERT;
            UNTIL ReservationEntry2.NEXT = 0;
        END;

        IF QtyToBeReceivedBase <> 0 THEN BEGIN
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
            ReservePurchLine.TransferPurchLineToItemJnlLine(
              PurchLine,ItemJnlLine,-QtyToBeReceivedBase,CheckApplToItemEntry)
          ELSE
            ReservePurchLine.TransferPurchLineToItemJnlLine(
              PurchLine,ItemJnlLine,QtyToBeReceivedBase,CheckApplToItemEntry);

          IF CheckApplToItemEntry THEN
            TESTFIELD("Appl.-to Item Entry");
        END;

        TempJnlLineDim.DELETEALL;
        TempDocDim.RESET;
        TempDocDim.SETRANGE("Table ID",DATABASE::"Purchase Line");
        TempDocDim.SETRANGE("Line No.","Line No.");
        DimMgt.CopyDocDimToJnlLineDim(TempDocDim,TempJnlLineDim);
        OriginalItemJnlLine := ItemJnlLine;

        IF "Job No." <> '' THEN BEGIN
          PostJobConsumptionBeforePurch :=
            (ItemJnlLine."Document Type" = ItemJnlLine."Document Type"::"Purchase Return Shipment") AND (ItemJnlLine.Quantity < 0);
          IF PostJobConsumptionBeforePurch THEN
            PostItemJrnlLineJobConsumption(PurchLine,
              NextReservationEntryNo,
              QtyToBeInvoiced,
              QtyToBeInvoicedBase,
              QtyToBeReceived,
              QtyToBeReceivedBase,
              CheckApplToItemEntry,
              TempJnlLineDim);
        END;

        ItemJnlPostLine.RunWithCheck(ItemJnlLine,TempJnlLineDim);

        IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification) THEN BEGIN
          IF ItemJnlLine.Subcontracting THEN
            TempHandlingSpecification.DELETEALL;
          IF TempHandlingSpecification.FIND('-') THEN
            REPEAT
              TempTrackingSpecification := TempHandlingSpecification;
              TempTrackingSpecification."Source Type" := DATABASE::"Purchase Line";
              TempTrackingSpecification."Source Subtype" := "Document Type";
              TempTrackingSpecification."Source ID" := "Document No.";
              TempTrackingSpecification."Source Batch Name" := '';
              TempTrackingSpecification."Source Prod. Order Line" := 0;
              TempTrackingSpecification."Source Ref. No." := "Line No.";
              IF TempTrackingSpecification.INSERT THEN;
              IF QtyToBeInvoiced <> 0 THEN BEGIN
                TempTrackingSpecificationInv := TempTrackingSpecification;
                IF TempTrackingSpecificationInv.INSERT THEN;
              END;
              IF PostWhseJnlLine THEN BEGIN
                TempWhseTrackingSpecification := TempTrackingSpecification;
                IF TempWhseTrackingSpecification.INSERT THEN;
              END;
            UNTIL TempHandlingSpecification.NEXT = 0;
        END;

        IF "Job No." <> '' THEN
          IF NOT PostJobConsumptionBeforePurch THEN
            PostItemJrnlLineJobConsumption(PurchLine,
              NextReservationEntryNo,
              QtyToBeInvoiced,
              QtyToBeInvoicedBase,
              QtyToBeReceived,
              QtyToBeReceivedBase,
              CheckApplToItemEntry,
              TempJnlLineDim);

        IF PostWhseJnlLine THEN BEGIN
          ItemTrackingMgt.SplitWhseJnlLine(TempWhseJnlLine,TempWhseJnlLine2,TempWhseTrackingSpecification,FALSE);
          IF TempWhseJnlLine2.FIND('-') THEN
            REPEAT
              WhseJnlPostLine.RUN(TempWhseJnlLine2);
            UNTIL TempWhseJnlLine2.NEXT = 0;
          TempWhseTrackingSpecification.DELETEALL;
        END;

        IF (Type = Type::Item) AND PurchHeader.Invoice THEN BEGIN
          ClearItemChargeAssgntFilter;
          TempItemChargeAssgntPurch.SETCURRENTKEY(
            "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
          TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type","Document Type");
          TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.","Document No.");
          TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.","Line No.");
          IF TempItemChargeAssgntPurch.FIND('-') THEN
            REPEAT
              TESTFIELD("Allow Item Charge Assignment");
              GetItemChargeLine(ItemChargePurchLine);
              ItemChargePurchLine.CALCFIELDS("Qty. Assigned");
              IF (ItemChargePurchLine."Qty. to Invoice" <> 0) OR
                 (ABS(ItemChargePurchLine."Qty. Assigned") < ABS(ItemChargePurchLine."Quantity Invoiced"))
              THEN BEGIN
                OriginalItemJnlLine."Item Shpt. Entry No." := ItemJnlLine."Item Shpt. Entry No.";
                PostItemChargePerOrder(OriginalItemJnlLine,ItemChargePurchLine);
                TempItemChargeAssgntPurch.MARK(TRUE);
              END;
            UNTIL TempItemChargeAssgntPurch.NEXT = 0;
        END;
      END;

      EXIT(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE PostItemChargePerOrder@5801(ItemJnlLine2@1001 : Record 83;ItemChargePurchLine@1002 : Record 39);
    VAR
      NonDistrItemJnlLine@1000 : Record 83;
      TempJnlLineDim@1003 : TEMPORARY Record 356;
      OriginalAmt@1007 : Decimal;
      OriginalAmtACY@1008 : Decimal;
      OriginalDiscountAmt@1009 : Decimal;
      OriginalQty@1010 : Decimal;
      QtyToInvoice@1004 : Decimal;
      Factor@1005 : Decimal;
      SignFactor@1006 : Integer;
    BEGIN
      WITH TempItemChargeAssgntPurch DO BEGIN
        PurchLine.TESTFIELD("Job No.",'');
        PurchLine.TESTFIELD("Allow Item Charge Assignment",TRUE);
        ItemJnlLine2."Document No." := GenJnlLineDocNo;
        ItemJnlLine2."External Document No." := GenJnlLineExtDocNo;
        ItemJnlLine2."Item Charge No." := "Item Charge No.";
        ItemJnlLine2.Description := ItemChargePurchLine.Description;
        ItemJnlLine2."Document Line No." := ItemChargePurchLine."Line No.";
        ItemJnlLine2."Unit of Measure Code" := '';
        ItemJnlLine2."Qty. per Unit of Measure" := 1;
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          QtyToInvoice :=
            CalcQtyToInvoice(PurchLine."Return Qty. to Ship (Base)",PurchLine."Qty. to Invoice (Base)")
        ELSE
          QtyToInvoice :=
            CalcQtyToInvoice(PurchLine."Qty. to Receive (Base)",PurchLine."Qty. to Invoice (Base)");
        IF ItemJnlLine2."Invoiced Quantity" = 0 THEN BEGIN
          ItemJnlLine2."Invoiced Quantity" := ItemJnlLine2.Quantity;
          ItemJnlLine2."Invoiced Qty. (Base)" := ItemJnlLine2."Quantity (Base)";
        END;
        ItemJnlLine2.Amount := "Amount to Assign" * ItemJnlLine2."Invoiced Qty. (Base)" / QtyToInvoice;
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          ItemJnlLine2.Amount := -ItemJnlLine2.Amount;
        ItemJnlLine2."Unit Cost (ACY)" :=
          ROUND(
            ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",
            Currency."Unit-Amount Rounding Precision");

        TotalChargeAmt2 := TotalChargeAmt2 + ItemJnlLine2.Amount;
        IF PurchHeader."Currency Code" <> '' THEN BEGIN
          ItemJnlLine2.Amount :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              Usedate,PurchHeader."Currency Code",TotalChargeAmt2 + TotalPurchLine.Amount,PurchHeader."Currency Factor") -
            TotalChargeAmtLCY2 - TotalPurchLineLCY.Amount;
        END ELSE
          ItemJnlLine2.Amount := TotalChargeAmt2 - TotalChargeAmtLCY2;

        ItemJnlLine2.Amount := ROUND(ItemJnlLine2.Amount);
        TotalChargeAmtLCY2 := TotalChargeAmtLCY2 + ItemJnlLine2.Amount;
        ItemJnlLine2."Unit Cost" := ROUND(
          ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",GLSetup."Unit-Amount Rounding Precision");
        ItemJnlLine2."Applies-to Entry" := ItemJnlLine2."Item Shpt. Entry No.";
        ItemJnlLine2."Overhead Rate" := 0;

        IF PurchHeader."Currency Code" <> '' THEN
          ItemJnlLine2."Discount Amount" := ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              Usedate,PurchHeader."Currency Code",(ItemChargePurchLine."Inv. Discount Amount" +
              ItemChargePurchLine."Pmt. Disc. Rcd. Amount" + ItemChargePurchLine."Line Discount Amount") *
              ItemJnlLine2."Invoiced Qty. (Base)" /
              ItemChargePurchLine."Quantity (Base)" * "Qty. to Assign"  / QtyToInvoice,
              PurchHeader."Currency Factor"),GLSetup."Amount Rounding Precision")
        ELSE
          ItemJnlLine2."Discount Amount" := ROUND(
            (ItemChargePurchLine."Line Discount Amount" +  ItemChargePurchLine."Pmt. Disc. Rcd. Amount" +
            ItemChargePurchLine."Inv. Discount Amount") *
            ItemJnlLine2."Invoiced Qty. (Base)" /
            ItemChargePurchLine."Quantity (Base)" * "Qty. to Assign" / QtyToInvoice,
            GLSetup."Amount Rounding Precision");

        ItemJnlLine2."Shortcut Dimension 1 Code" := ItemChargePurchLine."Shortcut Dimension 1 Code";
        ItemJnlLine2."Shortcut Dimension 2 Code" := ItemChargePurchLine."Shortcut Dimension 2 Code";
        ItemJnlLine2."Gen. Prod. Posting Group" := ItemChargePurchLine."Gen. Prod. Posting Group";
        TempJnlLineDim.DELETEALL;
        TempDocDim.RESET;
        TempDocDim.SETRANGE("Table ID",DATABASE::"Purchase Line");
        TempDocDim.SETRANGE("Line No.","Document Line No.");
        DimMgt.CopyDocDimToJnlLineDim(TempDocDim,TempJnlLineDim);
      END;

      WITH TempTrackingSpecificationInv DO BEGIN
        RESET;
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source ID",TempItemChargeAssgntPurch."Applies-to Doc. No.");
        SETRANGE("Source Ref. No.",TempItemChargeAssgntPurch ."Applies-to Doc. Line No.");
        IF ISEMPTY THEN
          ItemJnlPostLine.RunWithCheck(ItemJnlLine2,TempJnlLineDim)
        ELSE BEGIN
          FINDSET;
          NonDistrItemJnlLine := ItemJnlLine2;
          OriginalAmt := NonDistrItemJnlLine.Amount;
          OriginalAmtACY := NonDistrItemJnlLine."Amount (ACY)";
          OriginalDiscountAmt := NonDistrItemJnlLine."Discount Amount";
          OriginalQty := NonDistrItemJnlLine."Quantity (Base)";
          IF ("Quantity (Base)" / OriginalQty) > 0 THEN
            SignFactor := 1
          ELSE
            SignFactor := -1;
          REPEAT
            Factor := "Quantity (Base)" / OriginalQty * SignFactor;
            IF ABS("Quantity (Base)") < ABS(NonDistrItemJnlLine."Quantity (Base)") THEN BEGIN
              ItemJnlLine2."Quantity (Base)" := "Quantity (Base)";
              ItemJnlLine2."Invoiced Qty. (Base)" := ItemJnlLine2."Quantity (Base)";
              ItemJnlLine2."Amount (ACY)" :=
                ROUND(OriginalAmtACY * Factor,GLSetup."Amount Rounding Precision");
              ItemJnlLine2.Amount :=
                ROUND(OriginalAmt * Factor,GLSetup."Amount Rounding Precision");
              ItemJnlLine2."Unit Cost (ACY)" :=
                ROUND(ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",
                 Currency."Unit-Amount Rounding Precision") * SignFactor;
              ItemJnlLine2."Unit Cost" :=
                ROUND(ItemJnlLine2.Amount / ItemJnlLine2."Invoiced Qty. (Base)",
                 GLSetup."Unit-Amount Rounding Precision") * SignFactor;
              ItemJnlLine2."Discount Amount" :=
                ROUND(OriginalDiscountAmt * Factor,GLSetup."Amount Rounding Precision");
              ItemJnlLine2."Item Shpt. Entry No." := "Appl.-to Item Entry";
              ItemJnlLine2."Applies-to Entry" := "Appl.-to Item Entry";
              ItemJnlLine2."Lot No." := "Lot No.";
              ItemJnlLine2."Serial No." := "Serial No.";
              ItemJnlPostLine.RunWithCheck(ItemJnlLine2,TempJnlLineDim);
              ItemJnlLine2."Location Code" := NonDistrItemJnlLine."Location Code";
              NonDistrItemJnlLine."Quantity (Base)" -= "Quantity (Base)";
              NonDistrItemJnlLine.Amount -= (ItemJnlLine2.Amount * SignFactor);
              NonDistrItemJnlLine."Amount (ACY)" -= (ItemJnlLine2."Amount (ACY)" * SignFactor);
              NonDistrItemJnlLine."Discount Amount" -= (ItemJnlLine2."Discount Amount" * SignFactor);
            END ELSE BEGIN
              NonDistrItemJnlLine."Quantity (Base)" := "Quantity (Base)";
              NonDistrItemJnlLine."Invoiced Qty. (Base)" := "Quantity (Base)";
              NonDistrItemJnlLine."Unit Cost" :=
                ROUND(NonDistrItemJnlLine.Amount / NonDistrItemJnlLine."Invoiced Qty. (Base)",
                 GLSetup."Unit-Amount Rounding Precision") * SignFactor;
              NonDistrItemJnlLine."Unit Cost (ACY)" :=
                ROUND(NonDistrItemJnlLine.Amount / NonDistrItemJnlLine."Invoiced Qty. (Base)",
                 Currency."Unit-Amount Rounding Precision") * SignFactor;
              NonDistrItemJnlLine."Item Shpt. Entry No." := "Appl.-to Item Entry";
              NonDistrItemJnlLine."Applies-to Entry" := "Appl.-to Item Entry";
              NonDistrItemJnlLine."Lot No." := "Lot No.";
              NonDistrItemJnlLine."Serial No." := "Serial No.";
              ItemJnlPostLine.RunWithCheck(NonDistrItemJnlLine,TempJnlLineDim);
              NonDistrItemJnlLine."Location Code" := ItemJnlLine2."Location Code";
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE PostItemChargePerRcpt@5807(PurchLine@1000 : Record 39);
    VAR
      PurchRcptLine@1002 : Record 121;
      TempItemLedgEntry@1003 : TEMPORARY Record 32;
      ItemTrackingMgt@1005 : Codeunit 6500;
      Factor@1004 : Decimal;
      NonDistrQuantity@1010 : Decimal;
      NonDistrQtyToAssign@1009 : Decimal;
      NonDistrAmountToAssign@1008 : Decimal;
      QtyToAssign@1007 : Decimal;
      AmountToAssign@1006 : Decimal;
      Sign@1011 : Decimal;
      DistributeCharge@1001 : Boolean;
    BEGIN
      IF NOT PurchRcptLine.GET(
        TempItemChargeAssgntPurch."Applies-to Doc. No.",TempItemChargeAssgntPurch."Applies-to Doc. Line No.") THEN
          ERROR(Text014);
      PurchRcptLine.TESTFIELD("Job No.",'');
      IF PurchRcptLine."Quantity (Base)" > 0 THEN
        Sign := 1
      ELSE
        Sign := -1;

      IF PurchRcptLine."Item Rcpt. Entry No." <> 0 THEN
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
                        TempItemLedgEntry,PurchRcptLine."Quantity (Base)",PurchRcptLine."Item Rcpt. Entry No.")
      ELSE BEGIN
        DistributeCharge := TRUE;
        ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Purch. Rcpt. Line",0,PurchRcptLine."Document No.",
          '',0,PurchRcptLine."Line No.",PurchRcptLine."Quantity (Base)");
      END;

      IF DistributeCharge THEN
        IF TempItemLedgEntry.FINDSET THEN BEGIN
          NonDistrQuantity := PurchRcptLine."Quantity (Base)";
          NonDistrQtyToAssign := TempItemChargeAssgntPurch."Qty. to Assign";
          NonDistrAmountToAssign := TempItemChargeAssgntPurch."Amount to Assign";
          REPEAT
            Factor := TempItemLedgEntry.Quantity / NonDistrQuantity;
            QtyToAssign := NonDistrQtyToAssign * Factor;
            AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
            IF Factor < 1 THEN BEGIN
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                AmountToAssign * Sign,QtyToAssign,PurchRcptLine."Indirect Cost %");
              NonDistrQuantity := NonDistrQuantity - TempItemLedgEntry.Quantity;
              NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
              NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
            END ELSE // the last time
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                NonDistrAmountToAssign * Sign,NonDistrQtyToAssign,PurchRcptLine."Indirect Cost %");
          UNTIL TempItemLedgEntry.NEXT = 0;
        END ELSE
          ERROR(Text042)
      ELSE
        PostItemCharge(PurchLine,
          PurchRcptLine."Item Rcpt. Entry No.",PurchRcptLine."Quantity (Base)",
          TempItemChargeAssgntPurch."Amount to Assign" * Sign,
          TempItemChargeAssgntPurch."Qty. to Assign",
          PurchRcptLine."Indirect Cost %");
    END;

    LOCAL PROCEDURE PostItemChargePerRetShpt@5811(PurchLine@1000 : Record 39);
    VAR
      ReturnShptLine@1002 : Record 6651;
      TempItemLedgEntry@1010 : TEMPORARY Record 32;
      ItemTrackingMgt@1009 : Codeunit 6500;
      Factor@1008 : Decimal;
      NonDistrQuantity@1007 : Decimal;
      NonDistrQtyToAssign@1006 : Decimal;
      NonDistrAmountToAssign@1005 : Decimal;
      QtyToAssign@1004 : Decimal;
      AmountToAssign@1003 : Decimal;
      Sign@1011 : Decimal;
      DistributeCharge@1001 : Boolean;
    BEGIN
      ReturnShptLine.GET(
        TempItemChargeAssgntPurch."Applies-to Doc. No.",TempItemChargeAssgntPurch."Applies-to Doc. Line No.");
      ReturnShptLine.TESTFIELD("Job No.",'');
      CASE PurchLine."Document Type" OF
        PurchLine."Document Type"::Order,PurchLine."Document Type"::Invoice:
          IF PurchLine."Line Amount" > 0 THEN
            Sign := -1
          ELSE
            Sign := 1;
        PurchLine."Document Type"::"Return Order",PurchLine."Document Type"::"Credit Memo":
          IF PurchLine."Line Amount" > 0 THEN
            Sign := 1
          ELSE
            Sign := -1;
      END;

      IF ReturnShptLine."Item Shpt. Entry No." <> 0 THEN
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
                        TempItemLedgEntry,-ReturnShptLine."Quantity (Base)",ReturnShptLine."Item Shpt. Entry No.")
      ELSE BEGIN
        DistributeCharge := TRUE;
        ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Return Shipment Line",0,ReturnShptLine."Document No.",
          '',0,ReturnShptLine."Line No.",ReturnShptLine."Quantity (Base)");
      END;

      IF DistributeCharge THEN
        IF TempItemLedgEntry.FINDSET THEN BEGIN
          NonDistrQuantity := -ReturnShptLine."Quantity (Base)";
          NonDistrQtyToAssign := TempItemChargeAssgntPurch."Qty. to Assign";
          NonDistrAmountToAssign := ABS(TempItemChargeAssgntPurch."Amount to Assign");
          REPEAT
            Factor := TempItemLedgEntry.Quantity / NonDistrQuantity;
            QtyToAssign := NonDistrQtyToAssign * Factor;
            AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
            IF Factor < 1 THEN BEGIN
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                AmountToAssign * Sign,QtyToAssign,ReturnShptLine."Indirect Cost %");
              NonDistrQuantity := NonDistrQuantity - TempItemLedgEntry.Quantity;
              NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
              NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
            END ELSE // the last time
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                NonDistrAmountToAssign * Sign,NonDistrQtyToAssign,ReturnShptLine."Indirect Cost %");
          UNTIL TempItemLedgEntry.NEXT = 0;
        END ELSE
          ERROR(Text042)
      ELSE
        PostItemCharge(PurchLine,
          ReturnShptLine."Item Shpt. Entry No.",-ReturnShptLine."Quantity (Base)",
          ABS(TempItemChargeAssgntPurch."Amount to Assign") * Sign,
          TempItemChargeAssgntPurch."Qty. to Assign",
          ReturnShptLine."Indirect Cost %");
    END;

    LOCAL PROCEDURE PostItemChargePerTransfer@23(PurchLine@1000 : Record 39);
    VAR
      TransRcptLine@1002 : Record 5747;
      ItemApplnEntry@1003 : Record 339;
      DummyTrackingSpecification@1001 : Record 336;
      TotalAmountToPostFCY@1004 : Decimal;
      TotalAmountToPostLCY@1005 : Decimal;
      TotalDiscAmountToPost@1006 : Decimal;
      AmountToPostFCY@1007 : Decimal;
      AmountToPostLCY@1008 : Decimal;
      DiscAmountToPost@1009 : Decimal;
      RemAmountToPostFCY@1010 : Decimal;
      RemAmountToPostLCY@1011 : Decimal;
      RemDiscAmountToPost@1012 : Decimal;
      CalcAmountToPostFCY@1013 : Decimal;
      CalcAmountToPostLCY@1014 : Decimal;
      CalcDiscAmountToPost@1015 : Decimal;
    BEGIN
      WITH TempItemChargeAssgntPurch DO BEGIN
        TransRcptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
        PurchLine."No." := "Item No.";
        PurchLine."Variant Code" := TransRcptLine."Variant Code";
        PurchLine."Location Code" := TransRcptLine."Transfer-to Code";
        PurchLine."Bin Code" := '';
        PurchLine."Line No." := "Document Line No.";

        IF TransRcptLine."Item Rcpt. Entry No." = 0 THEN
          PostItemChargePerITTransfer(PurchLine,TransRcptLine)
        ELSE BEGIN
          TotalAmountToPostFCY := "Amount to Assign";
          IF PurchHeader."Currency Code" <> '' THEN
            TotalAmountToPostLCY :=
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalAmountToPostFCY,PurchHeader."Currency Factor")
          ELSE
            TotalAmountToPostLCY := TotalAmountToPostFCY;

          TotalDiscAmountToPost :=
            ROUND(
              (PurchLine."Inv. Discount Amount" - PurchLine."Pmt. Disc. Rcd. Amount") / PurchLine.Quantity * "Qty. to Assign",
              GLSetup."Amount Rounding Precision");
          TotalDiscAmountToPost :=
            TotalDiscAmountToPost +
            ROUND(
              PurchLine."Line Discount Amount" * ("Qty. to Assign" / PurchLine."Qty. to Invoice"),
              GLSetup."Amount Rounding Precision");

          TotalAmountToPostLCY := ROUND(TotalAmountToPostLCY,GLSetup."Amount Rounding Precision");

          ItemApplnEntry.SETCURRENTKEY("Outbound Item Entry No.","Item Ledger Entry No.","Cost Application");
          ItemApplnEntry.SETRANGE("Outbound Item Entry No.",TransRcptLine."Item Rcpt. Entry No.");
          ItemApplnEntry.SETFILTER("Item Ledger Entry No.",'<>%1',TransRcptLine."Item Rcpt. Entry No.");
          ItemApplnEntry.SETRANGE("Cost Application",TRUE);
          IF ItemApplnEntry.FINDSET THEN BEGIN
            REPEAT
              PurchLine."Appl.-to Item Entry" := ItemApplnEntry."Item Ledger Entry No.";
              CalcAmountToPostFCY :=
                ((TotalAmountToPostFCY / TransRcptLine."Quantity (Base)") * ItemApplnEntry.Quantity) +
                RemAmountToPostFCY;
              AmountToPostFCY := ROUND(CalcAmountToPostFCY);
              RemAmountToPostFCY := CalcAmountToPostFCY - AmountToPostFCY;
              CalcAmountToPostLCY :=
                ((TotalAmountToPostLCY / TransRcptLine."Quantity (Base)") * ItemApplnEntry.Quantity) +
                RemAmountToPostLCY;
              AmountToPostLCY := ROUND(CalcAmountToPostLCY);
              RemAmountToPostLCY := CalcAmountToPostLCY - AmountToPostLCY;
              CalcDiscAmountToPost :=
                ((TotalDiscAmountToPost / TransRcptLine."Quantity (Base)") * ItemApplnEntry.Quantity) +
                RemDiscAmountToPost;
              DiscAmountToPost := ROUND(CalcDiscAmountToPost);
              RemDiscAmountToPost := CalcDiscAmountToPost - DiscAmountToPost;
              PurchLine.Amount := AmountToPostLCY;
              PurchLine."Inv. Discount Amount" := DiscAmountToPost;
              PurchLine."Line Discount Amount" := 0;
              PurchLine."Unit Cost" :=
                ROUND(AmountToPostFCY / ItemApplnEntry.Quantity,GLSetup."Unit-Amount Rounding Precision");
              PurchLine."Unit Cost (LCY)" :=
                ROUND(AmountToPostLCY / ItemApplnEntry.Quantity,GLSetup."Unit-Amount Rounding Precision");
              IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                PurchLine.Amount := -PurchLine.Amount;
              PostItemJnlLine(
                PurchLine,
                0,0,
                ItemApplnEntry.Quantity,ItemApplnEntry.Quantity,
                PurchLine."Appl.-to Item Entry","Item Charge No.",DummyTrackingSpecification);
            UNTIL ItemApplnEntry.NEXT = 0;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE PostItemChargePerITTransfer@43(PurchLine@1000 : Record 39;TransRcptLine@1017 : Record 5747);
    VAR
      TempItemLedgEntry@1016 : TEMPORARY Record 32;
      ItemTrackingMgt@1001 : Codeunit 6500;
      Factor@1023 : Decimal;
      NonDistrQuantity@1022 : Decimal;
      NonDistrQtyToAssign@1021 : Decimal;
      NonDistrAmountToAssign@1020 : Decimal;
      QtyToAssign@1019 : Decimal;
      AmountToAssign@1018 : Decimal;
    BEGIN
      WITH TempItemChargeAssgntPurch DO BEGIN
        ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Transfer Receipt Line",0,TransRcptLine."Document No.",
          '',0,TransRcptLine."Line No.",TransRcptLine."Quantity (Base)");
        IF TempItemLedgEntry.FINDSET THEN BEGIN
          NonDistrQuantity := TransRcptLine."Quantity (Base)";
          NonDistrQtyToAssign := TempItemChargeAssgntPurch."Qty. to Assign";
          NonDistrAmountToAssign := TempItemChargeAssgntPurch."Amount to Assign";
          REPEAT
            Factor := TempItemLedgEntry.Quantity / NonDistrQuantity;
            QtyToAssign := NonDistrQtyToAssign * Factor;
            AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
            IF Factor < 1 THEN BEGIN
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                AmountToAssign,QtyToAssign,0);
              NonDistrQuantity := NonDistrQuantity - TempItemLedgEntry.Quantity;
              NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
              NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
            END ELSE // the last time
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                NonDistrAmountToAssign,NonDistrQtyToAssign,0);
          UNTIL TempItemLedgEntry.NEXT = 0;
        END ELSE
          ERROR(Text042);
      END;
    END;

    LOCAL PROCEDURE PostItemChargePerSalesShpt@41(PurchLine@1000 : Record 39);
    VAR
      SalesShptLine@1002 : Record 111;
      TempItemLedgEntry@1010 : TEMPORARY Record 32;
      ItemTrackingMgt@1009 : Codeunit 6500;
      Factor@1008 : Decimal;
      NonDistrQuantity@1007 : Decimal;
      NonDistrQtyToAssign@1006 : Decimal;
      NonDistrAmountToAssign@1005 : Decimal;
      QtyToAssign@1004 : Decimal;
      AmountToAssign@1003 : Decimal;
      Sign@1001 : Decimal;
      DistributeCharge@1011 : Boolean;
    BEGIN
      IF NOT SalesShptLine.GET(
        TempItemChargeAssgntPurch."Applies-to Doc. No.",TempItemChargeAssgntPurch."Applies-to Doc. Line No.")
      THEN
        ERROR(Text042);
      SalesShptLine.TESTFIELD("Job No.",'');
      IF SalesShptLine."Quantity (Base)" < 0 THEN
        Sign := 1
      ELSE
        Sign := -1;

      IF SalesShptLine."Item Shpt. Entry No." <> 0 THEN
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
                        TempItemLedgEntry,-SalesShptLine."Quantity (Base)",SalesShptLine."Item Shpt. Entry No.")
      ELSE BEGIN
        DistributeCharge := TRUE;
        ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Sales Shipment Line",0,SalesShptLine."Document No.",
          '',0,SalesShptLine."Line No.",SalesShptLine."Quantity (Base)");
      END;

      IF DistributeCharge THEN
        IF TempItemLedgEntry.FINDSET THEN BEGIN
          NonDistrQuantity := -SalesShptLine."Quantity (Base)";
          NonDistrQtyToAssign := TempItemChargeAssgntPurch."Qty. to Assign";
          NonDistrAmountToAssign := TempItemChargeAssgntPurch."Amount to Assign";
          REPEAT
            Factor := TempItemLedgEntry.Quantity / NonDistrQuantity;
            QtyToAssign := NonDistrQtyToAssign * Factor;
            AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
            IF Factor < 1 THEN BEGIN
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                AmountToAssign * Sign,QtyToAssign,0);
              NonDistrQuantity := NonDistrQuantity - TempItemLedgEntry.Quantity;
              NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
              NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
            END ELSE // the last time
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                NonDistrAmountToAssign * Sign,NonDistrQtyToAssign,0);
          UNTIL TempItemLedgEntry.NEXT = 0;
        END ELSE
          ERROR(Text042)
      ELSE
        PostItemCharge(PurchLine,
          SalesShptLine."Item Shpt. Entry No.",-SalesShptLine."Quantity (Base)",
          TempItemChargeAssgntPurch."Amount to Assign" * Sign,
          TempItemChargeAssgntPurch."Qty. to Assign",0)
    END;

    PROCEDURE PostItemChargePerRetRcpt@37(PurchLine@1001 : Record 39);
    VAR
      ReturnRcptLine@1000 : Record 6661;
      TempItemLedgEntry@1011 : TEMPORARY Record 32;
      ItemTrackingMgt@1010 : Codeunit 6500;
      Factor@1009 : Decimal;
      NonDistrQuantity@1008 : Decimal;
      NonDistrQtyToAssign@1007 : Decimal;
      NonDistrAmountToAssign@1006 : Decimal;
      QtyToAssign@1005 : Decimal;
      AmountToAssign@1004 : Decimal;
      Sign@1003 : Decimal;
      DistributeCharge@1002 : Boolean;
    BEGIN
      IF NOT ReturnRcptLine.GET(
        TempItemChargeAssgntPurch."Applies-to Doc. No.",TempItemChargeAssgntPurch."Applies-to Doc. Line No.")
      THEN
        ERROR(Text042);
      ReturnRcptLine.TESTFIELD("Job No.",'');
      IF ReturnRcptLine."Quantity (Base)" > 0 THEN
        Sign := 1
      ELSE
        Sign := -1;

      IF ReturnRcptLine."Item Rcpt. Entry No." <> 0 THEN
        DistributeCharge :=
          CostCalcMgt.SplitItemLedgerEntriesExist(
                        TempItemLedgEntry,ReturnRcptLine."Quantity (Base)",ReturnRcptLine."Item Rcpt. Entry No.")
      ELSE BEGIN
        DistributeCharge := TRUE;
        ItemTrackingMgt.CollectItemEntryRelation(TempItemLedgEntry,
          DATABASE::"Return Receipt Line",0,ReturnRcptLine."Document No.",
          '',0,ReturnRcptLine."Line No.",ReturnRcptLine."Quantity (Base)");
      END;

      IF DistributeCharge THEN
        IF TempItemLedgEntry.FINDSET THEN BEGIN
          NonDistrQuantity := ReturnRcptLine."Quantity (Base)";
          NonDistrQtyToAssign := TempItemChargeAssgntPurch."Qty. to Assign";
          NonDistrAmountToAssign := TempItemChargeAssgntPurch."Amount to Assign";
          REPEAT
            Factor := TempItemLedgEntry.Quantity / NonDistrQuantity;
            QtyToAssign := NonDistrQtyToAssign * Factor;
            AmountToAssign := ROUND(NonDistrAmountToAssign * Factor,GLSetup."Amount Rounding Precision");
            IF Factor < 1 THEN BEGIN
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                AmountToAssign * Sign,QtyToAssign,0);
              NonDistrQuantity := NonDistrQuantity - TempItemLedgEntry.Quantity;
              NonDistrQtyToAssign := NonDistrQtyToAssign - QtyToAssign;
              NonDistrAmountToAssign := NonDistrAmountToAssign - AmountToAssign;
            END ELSE // the last time
              PostItemCharge(PurchLine,
                TempItemLedgEntry."Entry No.",TempItemLedgEntry.Quantity,
                NonDistrAmountToAssign * Sign,NonDistrQtyToAssign,0);
          UNTIL TempItemLedgEntry.NEXT = 0;
        END ELSE
          ERROR(Text042)
      ELSE
        PostItemCharge(PurchLine,
          ReturnRcptLine."Item Rcpt. Entry No.",ReturnRcptLine."Quantity (Base)",
          TempItemChargeAssgntPurch."Amount to Assign" * Sign,
          TempItemChargeAssgntPurch."Qty. to Assign",0)
    END;

    LOCAL PROCEDURE PostAssocItemJnlLine@3(QtyToBeShipped@1000 : Decimal;QtyToBeShippedBase@1001 : Decimal) : Integer;
    VAR
      TempDocDim2@1002 : TEMPORARY Record 357;
      TempJnlLineDim@1003 : TEMPORARY Record 356;
      TempHandlingSpecification2@1005 : TEMPORARY Record 336;
      ItemEntryRelation@1006 : Record 6507;
    BEGIN
      SalesOrderHeader.GET(
        SalesOrderHeader."Document Type"::Order,
        PurchLine."Sales Order No.");
      SalesOrderLine.GET(
        SalesOrderLine."Document Type"::Order,
        PurchLine."Sales Order No.",PurchLine."Sales Order Line No.");

      ItemJnlLine.INIT;
      ItemJnlLine."Source Posting Group" := SalesOrderHeader."Customer Posting Group";
      ItemJnlLine."Salespers./Purch. Code" := SalesOrderHeader."Salesperson Code";
      ItemJnlLine."Country/Region Code" := SalesOrderHeader."VAT Country/Region Code";
      ItemJnlLine."Reason Code" := SalesOrderHeader."Reason Code";
      ItemJnlLine."Posting No. Series" := SalesOrderHeader."Posting No. Series";
      ItemJnlLine."Item No." := SalesOrderLine."No.";
      ItemJnlLine.Description := SalesOrderLine.Description;
      ItemJnlLine."Shortcut Dimension 1 Code" := SalesOrderLine."Shortcut Dimension 1 Code";
      ItemJnlLine."Shortcut Dimension 2 Code" := SalesOrderLine."Shortcut Dimension 2 Code";
      ItemJnlLine."Location Code" := SalesOrderLine."Location Code";
      ItemJnlLine."Inventory Posting Group" := SalesOrderLine."Posting Group";
      ItemJnlLine."Gen. Bus. Posting Group" := SalesOrderLine."Gen. Bus. Posting Group";
      ItemJnlLine."Gen. Prod. Posting Group" := SalesOrderLine."Gen. Prod. Posting Group";
      ItemJnlLine."Applies-to Entry" := SalesOrderLine."Appl.-to Item Entry";
      ItemJnlLine."Transaction Type" := SalesOrderLine."Transaction Type";
      ItemJnlLine."Transport Method" := SalesOrderLine."Transport Method";
      ItemJnlLine."Entry/Exit Point" := SalesOrderLine."Exit Point";
      ItemJnlLine.Area := SalesOrderLine.Area;
      ItemJnlLine."Transaction Specification" := SalesOrderLine."Transaction Specification";
      ItemJnlLine."Drop Shipment" := SalesOrderLine."Drop Shipment";
      ItemJnlLine."Posting Date" := PurchHeader."Posting Date";
      ItemJnlLine."Document Date" := PurchHeader."Document Date";
      ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Sale;
      ItemJnlLine."Document No." := SalesOrderHeader."Shipping No.";
      ItemJnlLine."Document Type" := ItemJnlLine."Document Type"::"Sales Shipment";
      ItemJnlLine."Document Line No." := SalesOrderLine."Line No.";
      ItemJnlLine.Quantity := QtyToBeShipped;
      ItemJnlLine."Quantity (Base)" := QtyToBeShippedBase;
      ItemJnlLine."Invoiced Quantity" := 0;
      ItemJnlLine."Invoiced Qty. (Base)" := 0;
      ItemJnlLine."Unit Cost" := SalesOrderLine."Unit Cost (LCY)";
      ItemJnlLine."Source Currency Code" := PurchHeader."Currency Code";
      ItemJnlLine."Unit Cost (ACY)" := SalesOrderLine."Unit Cost";
      ItemJnlLine."Source Type" := ItemJnlLine."Source Type"::Customer;
      ItemJnlLine."Source No." := SalesOrderLine."Sell-to Customer No.";
      ItemJnlLine."Invoice-to Source No." := SalesOrderLine."Bill-to Customer No.";
      ItemJnlLine."Source Code" := SrcCode;
      ItemJnlLine."Variant Code" := SalesOrderLine."Variant Code";
      ItemJnlLine."Item Category Code" := SalesOrderLine."Item Category Code";
      ItemJnlLine."Product Group Code" := SalesOrderLine."Product Group Code";
      ItemJnlLine."Bin Code" := SalesOrderLine."Bin Code";
      ItemJnlLine."Unit of Measure Code" := SalesOrderLine."Unit of Measure Code";
      ItemJnlLine."Purchasing Code" := SalesOrderLine."Purchasing Code";
      ItemJnlLine."Qty. per Unit of Measure" := SalesOrderLine."Qty. per Unit of Measure";
      ItemJnlLine."Derived from Blanket Order" := SalesOrderLine."Blanket Order No." <> '';
      ItemJnlLine."Applies-to Entry" := ItemLedgShptEntryNo;

      IF SalesOrderLine."Job Contract Entry No." = 0 THEN BEGIN
        TransferReservToItemJnlLine(SalesOrderLine,ItemJnlLine,QtyToBeShippedBase,TRUE);
        DocDim.RESET;
        DocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
        DocDim.SETRANGE("Document Type",SalesOrderLine."Document Type");
        DocDim.SETRANGE("Document No.",SalesOrderLine."Document No.");
        DocDim.SETRANGE("Line No.",SalesOrderLine."Line No.");
        IF DocDim.FINDSET THEN
          REPEAT
            TempDocDim2.INIT;
            TempDocDim2 := DocDim;
            TempDocDim2.INSERT;
          UNTIL DocDim.NEXT = 0;
        TempJnlLineDim.DELETEALL;
        DimMgt.CopyDocDimToJnlLineDim(TempDocDim2,TempJnlLineDim);
        ItemJnlPostLine.RunWithCheck(ItemJnlLine,TempJnlLineDim);
        // Handle Item Tracking
        IF ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification2) THEN BEGIN
          IF TempHandlingSpecification2.FINDSET THEN
            REPEAT
              TempTrackingSpecification := TempHandlingSpecification2;
              TempTrackingSpecification."Source Type" := DATABASE::"Sales Line";
              TempTrackingSpecification."Source Subtype" := SalesOrderLine."Document Type";
              TempTrackingSpecification."Source ID" := SalesOrderLine."Document No.";
              TempTrackingSpecification."Source Batch Name" := '';
              TempTrackingSpecification."Source Prod. Order Line" := 0;
              TempTrackingSpecification."Source Ref. No." := SalesOrderLine."Line No.";
              IF TempTrackingSpecification.INSERT THEN;
              ItemEntryRelation.INIT;
              ItemEntryRelation."Item Entry No." := TempHandlingSpecification2."Entry No.";
              ItemEntryRelation."Serial No." := TempHandlingSpecification2."Serial No.";
              ItemEntryRelation."Lot No." := TempHandlingSpecification2."Lot No.";
              ItemEntryRelation."Source Type" := DATABASE::"Sales Shipment Line";
              ItemEntryRelation."Source ID" := SalesOrderHeader."Shipping No.";
              ItemEntryRelation."Source Ref. No." := SalesOrderLine."Line No.";
              ItemEntryRelation."Order No." := SalesOrderLine."Document No.";
              ItemEntryRelation."Order Line No." := SalesOrderLine."Line No.";
              ItemEntryRelation.INSERT;
            UNTIL TempHandlingSpecification2.NEXT = 0;
          EXIT(0);
        END;
      END;

      EXIT(ItemJnlLine."Item Shpt. Entry No.");
    END;

    LOCAL PROCEDURE UpdateAssocOrder@4();
    VAR
      ReserveSalesLine@1000 : Codeunit 99000832;
    BEGIN
      DropShptPostBuffer.RESET;
      IF DropShptPostBuffer.ISEMPTY THEN
        EXIT;
      IF DropShptPostBuffer.FINDSET THEN BEGIN
        IF NOT SalesOrderLine.RECORDLEVELLOCKING THEN
          SalesOrderLine.LOCKTABLE(TRUE,TRUE);
        REPEAT
          SalesOrderHeader.GET(
            SalesOrderHeader."Document Type"::Order,
            DropShptPostBuffer."Order No.");
          SalesOrderHeader."Last Shipping No." := SalesOrderHeader."Shipping No.";
          SalesOrderHeader."Shipping No." := '';
          SalesOrderHeader.MODIFY;
          ReserveSalesLine.UpdateItemTrackingAfterPosting(SalesOrderHeader);
          DropShptPostBuffer.SETRANGE("Order No.",DropShptPostBuffer."Order No.");
          REPEAT
            SalesOrderLine.GET(
              SalesOrderLine."Document Type"::Order,
              DropShptPostBuffer."Order No.",DropShptPostBuffer."Order Line No.");
            SalesOrderLine."Quantity Shipped" := SalesOrderLine."Quantity Shipped" + DropShptPostBuffer.Quantity;
            SalesOrderLine."Qty. Shipped (Base)" := SalesOrderLine."Qty. Shipped (Base)" + DropShptPostBuffer."Quantity (Base)";
            SalesOrderLine.InitOutstanding;
            SalesOrderLine.InitQtyToShip;
            SalesOrderLine.MODIFY;
          UNTIL DropShptPostBuffer.NEXT = 0;
          DropShptPostBuffer.SETRANGE("Order No.");
        UNTIL DropShptPostBuffer.NEXT = 0;
        DropShptPostBuffer.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE FillInvPostingBuffer@5804(PurchLine@1000 : Record 39;PurchLineACY@1001 : Record 39);
    VAR
      TotalVAT@1005 : Decimal;
      TotalVATACY@1004 : Decimal;
      TotalAmount@1003 : Decimal;
      TotalAmountACY@1002 : Decimal;
    BEGIN
      IF (PurchLine."Gen. Bus. Posting Group" <> GenPostingSetup."Gen. Bus. Posting Group") OR
         (PurchLine."Gen. Prod. Posting Group" <> GenPostingSetup."Gen. Prod. Posting Group")
      THEN
        GenPostingSetup.GET(PurchLine."Gen. Bus. Posting Group",PurchLine."Gen. Prod. Posting Group");

      InvPostingBuffer[1].PreparePurchase(PurchLine);

      TempDocDim.SETRANGE("Table ID",DATABASE::"Purchase Line");
      TempDocDim.SETRANGE("Line No.",PurchLine."Line No.");
      TotalVAT := PurchLine."Amount Including VAT" - PurchLine.Amount;
      TotalVATACY := PurchLineACY."Amount Including VAT" - PurchLineACY.Amount;
      TotalAmount := PurchLine.Amount;
      TotalAmountACY := PurchLineACY.Amount;

      IF PurchSetup."Post Invoice Discount" THEN BEGIN
        CASE PurchLine."VAT Calculation Type" OF
          PurchLine."VAT Calculation Type"::"Normal VAT",PurchLine."VAT Calculation Type"::"Full VAT",
          PurchLine."VAT Calculation Type"::"No Taxable VAT":
            InvPostingBuffer[1].CalcDiscount(
              PurchHeader."Prices Including VAT",
              -PurchLine."Inv. Discount Amount",
              -PurchLineACY."Inv. Discount Amount");
          PurchLine."VAT Calculation Type"::"Reverse Charge VAT" :
            InvPostingBuffer[1].CalcDiscountNoVAT(
              -PurchLine."Inv. Discount Amount",
              -PurchLineACY."Inv. Discount Amount");
          PurchLine."VAT Calculation Type"::"Sales Tax":
            IF NOT PurchLine."Use Tax" THEN // Use Tax is calculated later, based on totals
              InvPostingBuffer[1].CalcDiscount(
                PurchHeader."Prices Including VAT",
                -PurchLine."Inv. Discount Amount",
                -PurchLineACY."Inv. Discount Amount")
            ELSE
              InvPostingBuffer[1].CalcDiscountNoVAT(
                -PurchLine."Inv. Discount Amount",
                -PurchLineACY."Inv. Discount Amount");
        END;

        // $002 INCOMING

        VATBusGroup.GET(PurchLine."VAT Bus. Posting Group");
        InvPostingBuffer[1].Regimen := VATBusGroup.Regimen;

        IF PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Sales Tax" THEN
          InvPostingBuffer[1].SetSalesTax(PurchLine);

        IF (InvPostingBuffer[1].Amount <> 0) OR
           (InvPostingBuffer[1]."Amount (ACY)" <> 0)
        THEN BEGIN
          GenPostingSetup.TESTFIELD("Purch. Inv. Disc. Account");
          IF InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
            IF DeprBook."Subtract Disc. in Purch. Inv." THEN BEGIN
              GenPostingSetup.TESTFIELD("Purch. FA Disc. Account");
              InvPostingBuffer[1].SetAccount(
                PurchLine."No.",
                TotalVAT,
                TotalVATACY,
                TotalAmount,
                TotalAmountACY);
              UpdInvPostingBuffer;
              InvPostingBuffer[1].ReverseAmounts;
              InvPostingBuffer[1].SetAccount(
                GenPostingSetup."Purch. FA Disc. Account",
                TotalVAT,
                TotalVATACY,
                TotalAmount,
                TotalAmountACY);
              InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"G/L Account";
              UpdInvPostingBuffer;
              InvPostingBuffer[1].ReverseAmounts;
            END;
            InvPostingBuffer[1].SetAccount(
              GenPostingSetup."Purch. Inv. Disc. Account",
              TotalVAT,
              TotalVATACY,
              TotalAmount,
              TotalAmountACY);
            InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"G/L Account";
            UpdInvPostingBuffer;
            InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"Fixed Asset";
          END ELSE BEGIN;
            InvPostingBuffer[1].SetAccount(
              GenPostingSetup."Purch. Inv. Disc. Account",
              TotalVAT,
              TotalVATACY,
              TotalAmount,
              TotalAmountACY);
            UpdInvPostingBuffer;
          END;
        END;
      END;

      IF PurchSetup."Post Line Discount" THEN BEGIN
        CASE PurchLine."VAT Calculation Type" OF
          PurchLine."VAT Calculation Type"::"Normal VAT",PurchLine."VAT Calculation Type"::"Full VAT",
          PurchLine."VAT Calculation Type"::"No Taxable VAT":
            InvPostingBuffer[1].CalcDiscount(
              PurchHeader."Prices Including VAT",
              -PurchLine."Line Discount Amount",
              -PurchLineACY."Line Discount Amount");
          PurchLine."VAT Calculation Type"::"Reverse Charge VAT" :
            InvPostingBuffer[1].CalcDiscountNoVAT(
              -PurchLine."Line Discount Amount",
              -PurchLineACY."Line Discount Amount");
          PurchLine."VAT Calculation Type"::"Sales Tax":
            IF NOT PurchLine."Use Tax" THEN // Use Tax is calculated later, based on totals
              InvPostingBuffer[1].CalcDiscount(
                PurchHeader."Prices Including VAT",
                -PurchLine."Line Discount Amount",
                -PurchLineACY."Line Discount Amount")
            ELSE
              InvPostingBuffer[1].CalcDiscountNoVAT(
                -PurchLine."Line Discount Amount",
                -PurchLineACY."Line Discount Amount");
        END;

        IF PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Sales Tax" THEN
          InvPostingBuffer[1].SetSalesTax(PurchLine);

        IF (InvPostingBuffer[1].Amount <> 0) OR
           (InvPostingBuffer[1]."Amount (ACY)" <> 0)
        THEN BEGIN
          GenPostingSetup.TESTFIELD("Purch. Line Disc. Account");
          IF InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
            IF DeprBook."Subtract Disc. in Purch. Inv." THEN BEGIN
              GenPostingSetup.TESTFIELD("Purch. FA Disc. Account");
              InvPostingBuffer[1].SetAccount(
                PurchLine."No.",
                TotalVAT,
                TotalVATACY,
                TotalAmount,
                TotalAmountACY);
              UpdInvPostingBuffer;
              InvPostingBuffer[1].ReverseAmounts;
              InvPostingBuffer[1].SetAccount(
                GenPostingSetup."Purch. FA Disc. Account",
                TotalVAT,
                TotalVATACY,
                TotalAmount,
                TotalAmountACY);
              InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"G/L Account";
              UpdInvPostingBuffer;
              InvPostingBuffer[1].ReverseAmounts;
            END;
            InvPostingBuffer[1].SetAccount(
              GenPostingSetup."Purch. Line Disc. Account",
              TotalVAT,
              TotalVATACY,
              TotalAmount,
              TotalAmountACY);
            InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"G/L Account";
            UpdInvPostingBuffer;
            InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"Fixed Asset";
          END ELSE BEGIN;
            InvPostingBuffer[1].SetAccount(
              GenPostingSetup."Purch. Line Disc. Account",
              TotalVAT,
              TotalVATACY,
              TotalAmount,
              TotalAmountACY);
            UpdInvPostingBuffer;
          END;
        END;
      END;

      IF PurchSetup."Post Payment Discount" THEN BEGIN
        CASE PurchLine."VAT Calculation Type" OF
          PurchLine."VAT Calculation Type"::"Normal VAT",PurchLine."VAT Calculation Type"::"Full VAT",
          PurchLine."VAT Calculation Type"::"No Taxable VAT":
            InvPostingBuffer[1].CalcDiscount(
              PurchHeader."Prices Including VAT",
              -PurchLine."Pmt. Disc. Rcd. Amount",
              -PurchLineACY."Pmt. Disc. Rcd. Amount");
          PurchLine."VAT Calculation Type"::"Reverse Charge VAT" :
            InvPostingBuffer[1].CalcDiscountNoVAT(
              -PurchLine."Pmt. Disc. Rcd. Amount",
              -PurchLineACY."Pmt. Disc. Rcd. Amount");
          PurchLine."VAT Calculation Type"::"Sales Tax":
            IF NOT PurchLine."Use Tax" THEN // Use Tax is calculated later, based on totals
              InvPostingBuffer[1].CalcDiscount(
                PurchHeader."Prices Including VAT",
                -PurchLine."Pmt. Disc. Rcd. Amount",
                -PurchLineACY."Pmt. Disc. Rcd. Amount")
            ELSE
              InvPostingBuffer[1].CalcDiscountNoVAT(
                -PurchLine."Line Discount Amount",
                -PurchLineACY."Line Discount Amount");
        END;

        IF PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Sales Tax" THEN
          InvPostingBuffer[1].SetSalesTax(PurchLine);

        IF (InvPostingBuffer[1].Amount <> 0) OR
           (InvPostingBuffer[1]."Amount (ACY)" <> 0)
        THEN BEGIN
          GenPostingSetup.TESTFIELD("Purch. Pmt. Disc. Credit Acc.");
          IF InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
            IF DeprBook."Subtract Disc. in Purch. Inv." THEN BEGIN
              GenPostingSetup.TESTFIELD("Purch. FA Disc. Account");
              InvPostingBuffer[1].SetAccount(
                PurchLine."No.",
                TotalVAT,
                TotalVATACY,
                TotalAmount,
                TotalAmountACY);
              UpdInvPostingBuffer;
              InvPostingBuffer[1].ReverseAmounts;
              InvPostingBuffer[1].SetAccount(
                GenPostingSetup."Purch. FA Disc. Account",
                TotalVAT,
                TotalVATACY,
                TotalAmount,
                TotalAmountACY);
              InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"G/L Account";
              UpdInvPostingBuffer;
              InvPostingBuffer[1].ReverseAmounts;
            END;
            InvPostingBuffer[1].SetAccount(
              GenPostingSetup."Purch. Pmt. Disc. Credit Acc.",
              TotalVAT,
              TotalVATACY,
              TotalAmount,
              TotalAmountACY);
            InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"G/L Account";
            UpdInvPostingBuffer;
            InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"Fixed Asset";
          END ELSE BEGIN;
            InvPostingBuffer[1].SetAccount(
              GenPostingSetup."Purch. Pmt. Disc. Credit Acc.",
              TotalVAT,
              TotalVATACY,
              TotalAmount,
              TotalAmountACY);
            UpdInvPostingBuffer;
          END;
        END;
      END;

      // IF PurchSetup."Discount Posting" IN
      //   [PurchSetup."Discount Posting"::"Invoice Discounts",PurchSetup."Discount Posting"::"All Discounts"] THEN BEGIN
      //   CASE PurchLine."VAT Calculation Type" OF
      //     PurchLine."VAT Calculation Type"::"Normal VAT",PurchLine."VAT Calculation Type"::"Full VAT":
      //       InvPostingBuffer[1].CalcDiscount(
      //         PurchHeader."Prices Including VAT",
      //         -PurchLine."Inv. Discount Amount",
      //         -PurchLineACY."Inv. Discount Amount");
      //     PurchLine."VAT Calculation Type"::"Reverse Charge VAT" :
      //       InvPostingBuffer[1].CalcDiscountNoVAT(
      //         -PurchLine."Inv. Discount Amount",
      //         -PurchLineACY."Inv. Discount Amount");
      //     PurchLine."VAT Calculation Type"::"Sales Tax":
      //       IF NOT PurchLine."Use Tax" THEN // Use Tax is calculated later, based on totals
      //         InvPostingBuffer[1].CalcDiscount(
      //           PurchHeader."Prices Including VAT",
      //           -PurchLine."Inv. Discount Amount",
      //           -PurchLineACY."Inv. Discount Amount")
      //       ELSE
      //         InvPostingBuffer[1].CalcDiscountNoVAT(
      //           -PurchLine."Inv. Discount Amount",
      //           -PurchLineACY."Inv. Discount Amount");
      //   END;

      //   IF PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Sales Tax" THEN
      //     InvPostingBuffer[1].SetSalesTax(PurchLine);

      //   IF (InvPostingBuffer[1].Amount <> 0) OR
      //      (InvPostingBuffer[1]."Amount (ACY)" <> 0)
      //   THEN BEGIN
      //     GenPostingSetup.TESTFIELD("Purch. Inv. Disc. Account");
      //     IF InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
      //       IF DeprBook."Subtract Disc. in Purch. Inv." THEN BEGIN
      //         GenPostingSetup.TESTFIELD("Purch. FA Disc. Account");
      //         InvPostingBuffer[1].SetAccount(
      //           PurchLine."No.",
      //           TotalVAT,
      //           TotalVATACY,
      //           TotalAmount,
      //           TotalAmountACY);
      //         UpdInvPostingBuffer;
      //         InvPostingBuffer[1].ReverseAmounts;
      //         InvPostingBuffer[1].SetAccount(
      //           GenPostingSetup."Purch. FA Disc. Account",
      //           TotalVAT,
      //           TotalVATACY,
      //           TotalAmount,
      //           TotalAmountACY);
      //         InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"G/L Account";
      //         UpdInvPostingBuffer;
      //         InvPostingBuffer[1].ReverseAmounts;
      //       END;
      //       InvPostingBuffer[1].SetAccount(
      //         GenPostingSetup."Purch. Inv. Disc. Account",
      //         TotalVAT,
      //         TotalVATACY,
      //         TotalAmount,
      //         TotalAmountACY);
      //       InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"G/L Account";
      //       UpdInvPostingBuffer;
      //       InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"Fixed Asset";
      //     END ELSE BEGIN;
      //       InvPostingBuffer[1].SetAccount(
      //         GenPostingSetup."Purch. Inv. Disc. Account",
      //         TotalVAT,
      //         TotalVATACY,
      //         TotalAmount,
      //         TotalAmountACY);
      //       UpdInvPostingBuffer;
      //     END;
      //   END;
      // END;

      // IF PurchSetup."Discount Posting" IN
      //   [PurchSetup."Discount Posting"::"Line Discounts",PurchSetup."Discount Posting"::"All Discounts"] THEN BEGIN
      //   CASE PurchLine."VAT Calculation Type" OF
      //     PurchLine."VAT Calculation Type"::"Normal VAT",PurchLine."VAT Calculation Type"::"Full VAT":
      //       InvPostingBuffer[1].CalcDiscount(
      //         PurchHeader."Prices Including VAT",
      //         -PurchLine."Line Discount Amount",
      //         -PurchLineACY."Line Discount Amount");
      //     PurchLine."VAT Calculation Type"::"Reverse Charge VAT" :
      //       InvPostingBuffer[1].CalcDiscountNoVAT(
      //         -PurchLine."Line Discount Amount",
      //         -PurchLineACY."Line Discount Amount");
      //     PurchLine."VAT Calculation Type"::"Sales Tax":
      //       IF NOT PurchLine."Use Tax" THEN // Use Tax is calculated later, based on totals
      //         InvPostingBuffer[1].CalcDiscount(
      //           PurchHeader."Prices Including VAT",
      //           -PurchLine."Line Discount Amount",
      //           -PurchLineACY."Line Discount Amount")
      //       ELSE
      //         InvPostingBuffer[1].CalcDiscountNoVAT(
      //           -PurchLine."Line Discount Amount",
      //           -PurchLineACY."Line Discount Amount");
      //   END;

      //   IF PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Sales Tax" THEN
      //     InvPostingBuffer[1].SetSalesTax(PurchLine);

      //   IF (InvPostingBuffer[1].Amount <> 0) OR
      //      (InvPostingBuffer[1]."Amount (ACY)" <> 0)
      //   THEN BEGIN
      //     GenPostingSetup.TESTFIELD("Purch. Line Disc. Account");
      //     IF InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
      //       IF DeprBook."Subtract Disc. in Purch. Inv." THEN BEGIN
      //         GenPostingSetup.TESTFIELD("Purch. FA Disc. Account");
      //         InvPostingBuffer[1].SetAccount(
      //           PurchLine."No.",
      //           TotalVAT,
      //           TotalVATACY,
      //           TotalAmount,
      //           TotalAmountACY);
      //         UpdInvPostingBuffer;
      //         InvPostingBuffer[1].ReverseAmounts;
      //         InvPostingBuffer[1].SetAccount(
      //           GenPostingSetup."Purch. FA Disc. Account",
      //           TotalVAT,
      //           TotalVATACY,
      //           TotalAmount,
      //           TotalAmountACY);
      //         InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"G/L Account";
      //         UpdInvPostingBuffer;
      //         InvPostingBuffer[1].ReverseAmounts;
      //       END;
      //       InvPostingBuffer[1].SetAccount(
      //         GenPostingSetup."Purch. Line Disc. Account",
      //         TotalVAT,
      //         TotalVATACY,
      //         TotalAmount,
      //         TotalAmountACY);
      //       InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"G/L Account";
      //       UpdInvPostingBuffer;
      //       InvPostingBuffer[1].Type := InvPostingBuffer[1].Type::"Fixed Asset";
      //     END ELSE BEGIN;
      //       InvPostingBuffer[1].SetAccount(
      //         GenPostingSetup."Purch. Line Disc. Account",
      //         TotalVAT,
      //         TotalVATACY,
      //         TotalAmount,
      //         TotalAmountACY);
      //       UpdInvPostingBuffer;
      //     END;
      //   END;
      // END;

      IF PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Reverse Charge VAT" THEN
          InvPostingBuffer[1].SetAmountsNoVAT(
            TotalAmount,
            TotalAmountACY,
            PurchLine."VAT Difference")
      ELSE
        IF (NOT PurchLine."Use Tax") OR (PurchLine."VAT Calculation Type" <> PurchLine."VAT Calculation Type"::"Sales Tax") THEN BEGIN
          InvPostingBuffer[1].SetAmounts(
            TotalVAT,
            TotalVATACY,
            TotalAmount,
            TotalAmountACY,
            PurchLine."VAT Difference");
        END ELSE
          InvPostingBuffer[1].SetAmountsNoVAT(
            TotalAmount,
            TotalAmountACY,
            PurchLine."VAT Difference");

      IF PurchLine."VAT Calculation Type" = PurchLine."VAT Calculation Type"::"Sales Tax" THEN
        InvPostingBuffer[1].SetSalesTax(PurchLine);

      IF (PurchLine.Type = PurchLine.Type::"G/L Account") OR (PurchLine.Type = PurchLine.Type::"Fixed Asset") THEN
        InvPostingBuffer[1].SetAccount(
          PurchLine."No.",
          TotalVAT,
          TotalVATACY,
          TotalAmount,
          TotalAmountACY)
      ELSE IF PurchLine."Document Type" IN [PurchLine."Document Type"::"Return Order",PurchLine."Document Type"::"Credit Memo"] THEN
      BEGIN
        GenPostingSetup.TESTFIELD("Purch. Credit Memo Account");
        InvPostingBuffer[1].SetAccount(
          GenPostingSetup."Purch. Credit Memo Account",
          TotalVAT,
          TotalVATACY,
          TotalAmount,
          TotalAmountACY);
      END ELSE BEGIN
        GenPostingSetup.TESTFIELD("Purch. Account");
         InvPostingBuffer[1].SetAccount(
           GenPostingSetup."Purch. Account",
           TotalVAT,
           TotalVATACY,
           TotalAmount,
           TotalAmountACY);
      END;

      UpdInvPostingBuffer;
    END;

    LOCAL PROCEDURE UpdInvPostingBuffer@5();
    VAR
      TempDimBuf@1000 : TEMPORARY Record 360;
      EntryNo@1001 : Integer;
    BEGIN
      IF TempDocDim.FINDSET THEN
        REPEAT
          TempDimBuf."Table ID" := TempDocDim."Table ID";
          TempDimBuf."Dimension Code" := TempDocDim."Dimension Code";
          TempDimBuf."Dimension Value Code" := TempDocDim."Dimension Value Code";
          TempDimBuf.INSERT;
        UNTIL TempDocDim.NEXT = 0;
      EntryNo := DimBufMgt.FindDimensions(TempDimBuf);
      IF EntryNo = 0 THEN
        EntryNo := DimBufMgt.InsertDimensions(TempDimBuf);
      InvPostingBuffer[1]."Dimension Entry No." := EntryNo;

      IF InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" THEN BEGIN
        FALineNo := FALineNo + 1;
        InvPostingBuffer[1]."Fixed Asset Line No." := FALineNo;
      END;
      InvPostingBuffer[2] := InvPostingBuffer[1];
      IF InvPostingBuffer[2].FIND THEN BEGIN
        InvPostingBuffer[2].Amount :=
          InvPostingBuffer[2].Amount + InvPostingBuffer[1].Amount;
        InvPostingBuffer[2]."VAT Amount" :=
          InvPostingBuffer[2]."VAT Amount" + InvPostingBuffer[1]."VAT Amount";
        InvPostingBuffer[2]."VAT Base Amount" :=
          InvPostingBuffer[2]."VAT Base Amount" + InvPostingBuffer[1]."VAT Base Amount";
        InvPostingBuffer[2]."VAT Difference" :=
          InvPostingBuffer[2]."VAT Difference" + InvPostingBuffer[1]."VAT Difference";
        InvPostingBuffer[2]."Amount (ACY)" :=
          InvPostingBuffer[2]."Amount (ACY)" + InvPostingBuffer[1]."Amount (ACY)";
        InvPostingBuffer[2]."VAT Amount (ACY)" :=
          InvPostingBuffer[2]."VAT Amount (ACY)" + InvPostingBuffer[1]."VAT Amount (ACY)";
        InvPostingBuffer[2]."VAT Base Amount (ACY)" :=
          InvPostingBuffer[2]."VAT Base Amount (ACY)" +
          InvPostingBuffer[1]."VAT Base Amount (ACY)";
        InvPostingBuffer[2].Quantity :=
          InvPostingBuffer[2].Quantity + InvPostingBuffer[1].Quantity;
        IF NOT InvPostingBuffer[1]."System-Created Entry" THEN
          InvPostingBuffer[2]."System-Created Entry" := FALSE;
        InvPostingBuffer[2].MODIFY;
      END ELSE
        InvPostingBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE GetCurrency@17();
    BEGIN
      WITH PurchHeader DO
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
    END;

    LOCAL PROCEDURE DivideAmount@8(QtyType@1000 : 'General,Invoicing,Shipping';PurchLineQty@1001 : Decimal);
    BEGIN
      IF RoundingLineInserted AND (RoundingLineNo = PurchLine."Line No.") THEN
        EXIT;
      WITH PurchLine DO
        IF (PurchLineQty = 0) OR ("Direct Unit Cost" = 0) OR ("Line Discount %" = 100) THEN BEGIN
          "Line Amount" := 0;
          "Line Discount Amount" := 0;
          "Inv. Discount Amount" := 0;
          "VAT Base Amount" := 0;
          Amount := 0;
          "Amount Including VAT" := 0;
        END ELSE BEGIN
          TempVATAmountLine.GET(
            "VAT Identifier","VAT Calculation Type","Tax Group Code","Use Tax",
            "Line Amount" >= 0);
          IF "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" THEN
          BEGIN
            "VAT %" := TempVATAmountLine."VAT %";
            "EC %" := TempVATAmountLine."EC %";
          END;
          TempVATAmountLineRemainder := TempVATAmountLine;
          IF NOT TempVATAmountLineRemainder.FIND THEN BEGIN
            TempVATAmountLineRemainder.INIT;
            TempVATAmountLineRemainder.INSERT;
          END;
          "Line Amount" := ROUND(PurchLineQty * "Direct Unit Cost",Currency."Amount Rounding Precision");
          IF PurchLineQty <> Quantity THEN BEGIN
            "Line Discount Amount" :=
              ROUND("Line Amount" * "Line Discount %" / 100,Currency."Amount Rounding Precision");
            "Pmt. Disc. Rcd. Amount" := "Pmt. Disc. Rcd. Amount" * PurchLineQty / Quantity;
            SrcCurrPurchLine."Pmt. Disc. Rcd. Amount" := SrcCurrPurchLine."Pmt. Disc. Rcd. Amount" * PurchLineQty / Quantity;
          END;
          "Line Amount" := "Line Amount" - "Line Discount Amount";

          IF "Allow Invoice Disc." AND (TempVATAmountLine."Inv. Disc. Base Amount" <> 0) THEN
            IF QtyType = QtyType::Invoicing THEN
              "Inv. Discount Amount" := "Inv. Disc. Amount to Invoice"
            ELSE BEGIN
              TempVATAmountLineRemainder."Invoice Discount Amount" :=
                TempVATAmountLineRemainder."Invoice Discount Amount" +
                TempVATAmountLine."Invoice Discount Amount" * "Line Amount" /
                TempVATAmountLine."Inv. Disc. Base Amount";
              "Inv. Discount Amount" :=
                ROUND(
                  TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
              TempVATAmountLineRemainder."Invoice Discount Amount" :=
                TempVATAmountLineRemainder."Invoice Discount Amount" - "Inv. Discount Amount";
            END;

          IF PurchHeader."Prices Including VAT" THEN BEGIN
            IF (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" = 0) OR
               ("Line Amount" = 0)
            THEN BEGIN
              TempVATAmountLineRemainder."VAT Amount" := 0;
              TempVATAmountLineRemainder."EC Amount" := 0;
              TempVATAmountLineRemainder."Amount Including VAT+EC" := 0;
            END ELSE BEGIN
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" +
                TempVATAmountLine."VAT Amount" *
                ("Line Amount" - "Inv. Discount Amount" - "Pmt. Disc. Rcd. Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" -
                TempVATAmountLine."Pmt. Disc. Given Amount");
              TempVATAmountLineRemainder."EC Amount" :=
                TempVATAmountLineRemainder."EC Amount" +
                TempVATAmountLine."EC Amount" *
                ("Line Amount" - "Inv. Discount Amount" - "Pmt. Disc. Rcd. Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" -
                TempVATAmountLine."Pmt. Disc. Given Amount");
              TempVATAmountLineRemainder."Amount Including VAT+EC" :=
                TempVATAmountLineRemainder."Amount Including VAT+EC" +
                TempVATAmountLine."Amount Including VAT+EC" *
                ("Line Amount" - "Inv. Discount Amount" - "Pmt. Disc. Rcd. Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" -
                TempVATAmountLine."Pmt. Disc. Given Amount");
            END;
            "Amount Including VAT" :=
              ROUND(TempVATAmountLineRemainder."Amount Including VAT+EC",Currency."Amount Rounding Precision");
            Amount :=
              ROUND("Amount Including VAT",Currency."Amount Rounding Precision") -
              ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision") -
              ROUND(TempVATAmountLineRemainder."EC Amount",Currency."Amount Rounding Precision");
            "VAT Base Amount" :=
              ROUND(
                Amount * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
            TempVATAmountLineRemainder."Amount Including VAT+EC" :=
              TempVATAmountLineRemainder."Amount Including VAT+EC" - "Amount Including VAT";
            TempVATAmountLineRemainder."VAT Amount" :=
              TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
          END ELSE BEGIN
            IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
              "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount";
              Amount := 0;
              "VAT Base Amount" := 0;
            END ELSE BEGIN
              Amount := "Line Amount" - "Inv. Discount Amount" - "Pmt. Disc. Rcd. Amount";
              "VAT Base Amount" :=
                ROUND(
                  Amount * (1 - PurchHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
              IF TempVATAmountLine."VAT+EC Base" = 0 THEN
                TempVATAmountLineRemainder."VAT Amount" := 0
              ELSE
                IF TempVATAmountLine."Line Amount" <> 0 THEN
                BEGIN
                TempVATAmountLineRemainder."VAT Amount" :=
                  TempVATAmountLineRemainder."VAT Amount" +
                  TempVATAmountLine."VAT Amount" *
                  ("Line Amount" - "Inv. Discount Amount" - "Pmt. Disc. Rcd. Amount") /
                  (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" -
                  TempVATAmountLine."Pmt. Disc. Given Amount");
                TempVATAmountLineRemainder."EC Amount" :=
                  TempVATAmountLineRemainder."EC Amount" +
                  TempVATAmountLine."EC Amount" *
                  ("Line Amount" - "Inv. Discount Amount" - "Pmt. Disc. Rcd. Amount") /
                  (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" -
                  TempVATAmountLine."Pmt. Disc. Given Amount");
                END;
              "Amount Including VAT" :=
                Amount + ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision") +
                ROUND(TempVATAmountLineRemainder."EC Amount",Currency."Amount Rounding Precision");
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
            END;
          END;

          TempVATAmountLineRemainder.MODIFY;
        END;
    END;

    LOCAL PROCEDURE RoundAmount@9(PurchLineQty@1000 : Decimal);
    VAR
      NoVAT@1001 : Boolean;
    BEGIN
      WITH PurchLine DO BEGIN
        IncrAmount(TotalPurchLine);
        Increment(TotalPurchLine."Net Weight",ROUND(PurchLineQty * "Net Weight",0.000001));
        Increment(TotalPurchLine."Gross Weight",ROUND(PurchLineQty * "Gross Weight",0.000001));
        Increment(TotalPurchLine."Unit Volume",ROUND(PurchLineQty * "Unit Volume",0.000001));
        Increment(TotalPurchLine.Quantity,PurchLineQty);
        IF "Units per Parcel" > 0 THEN
          Increment(
            TotalPurchLine."Units per Parcel",
            ROUND(PurchLineQty / "Units per Parcel",1,'>'));

        TempPurchLine := PurchLine;
        PurchLineACY := PurchLine;
        IF PurchHeader."Currency Code" <> '' THEN BEGIN
          IF ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
             (PurchHeader."Posting Date" = 0D)
          THEN
            Usedate := WORKDATE
          ELSE
            Usedate := PurchHeader."Posting Date";

          NoVAT := Amount = "Amount Including VAT";
          "Amount Including VAT" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Amount Including VAT",PurchHeader."Currency Factor")) -
                  TotalPurchLineLCY."Amount Including VAT";
          IF NoVAT THEN
            Amount := "Amount Including VAT"
          ELSE
            Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  Usedate,PurchHeader."Currency Code",
                  TotalPurchLine.Amount,PurchHeader."Currency Factor")) -
                    TotalPurchLineLCY.Amount;
          "Line Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Line Amount",PurchHeader."Currency Factor")) -
                  TotalPurchLineLCY."Line Amount";
          "Line Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Line Discount Amount",PurchHeader."Currency Factor")) -
                  TotalPurchLineLCY."Line Discount Amount";
          "Inv. Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Inv. Discount Amount",PurchHeader."Currency Factor")) -
                  TotalPurchLineLCY."Inv. Discount Amount";
          "VAT Difference" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."VAT Difference",PurchHeader."Currency Factor")) -
                  TotalPurchLineLCY."VAT Difference";
          "Pmt. Disc. Rcd. Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                Usedate,PurchHeader."Currency Code",
                TotalPurchLine."Pmt. Disc. Rcd. Amount",PurchHeader."Currency Factor")) -
                  TotalPurchLineLCY."Pmt. Disc. Rcd. Amount";

        END;

        IncrAmount(TotalPurchLineLCY);
        Increment(TotalPurchLineLCY."Unit Cost (LCY)",ROUND(PurchLineQty * "Unit Cost (LCY)"));
      END;
    END;

    LOCAL PROCEDURE ReverseAmount@10(VAR PurchLine@1000 : Record 39);
    BEGIN
      WITH PurchLine DO BEGIN
        "Qty. to Receive" := -"Qty. to Receive";
        "Qty. to Receive (Base)" := -"Qty. to Receive (Base)";
        "Return Qty. to Ship" := -"Return Qty. to Ship";
        "Return Qty. to Ship (Base)" := -"Return Qty. to Ship (Base)";
        "Qty. to Invoice" := -"Qty. to Invoice";
        "Qty. to Invoice (Base)" := -"Qty. to Invoice (Base)";
        "Line Amount" := -"Line Amount";
        Amount := -Amount;
        "VAT Base Amount" := -"VAT Base Amount";
        "VAT Difference" := -"VAT Difference";
        "Amount Including VAT" := -"Amount Including VAT";
        "Line Discount Amount" := -"Line Discount Amount";
        "Inv. Discount Amount" := -"Inv. Discount Amount";
        "Pmt. Disc. Rcd. Amount" := -"Pmt. Disc. Rcd. Amount";
        "Salvage Value" := -"Salvage Value";
      END;
    END;

    LOCAL PROCEDURE InvoiceRounding@12(UseTempData@1000 : Boolean);
    VAR
      DocDim2@1003 : Record 357;
      InvoiceRoundingAmount@1001 : Decimal;
      NextLineNo@1002 : Integer;
    BEGIN
      Currency.TESTFIELD("Invoice Rounding Precision");
      InvoiceRoundingAmount :=
        -ROUND(
          TotalPurchLine."Amount Including VAT" -
          ROUND(
            TotalPurchLine."Amount Including VAT",
            Currency."Invoice Rounding Precision",
            Currency.InvoiceRoundingDirection),
          Currency."Amount Rounding Precision");
      IF InvoiceRoundingAmount <> 0 THEN BEGIN
        VendPostingGr.GET(PurchHeader."Vendor Posting Group");
        VendPostingGr.TESTFIELD("Invoice Rounding Account");
        WITH PurchLine DO BEGIN
          INIT;
          NextLineNo := "Line No." + 10000;
          "System-Created Entry" := TRUE;
          IF UseTempData THEN BEGIN
            "Line No." := 0;
            Type := Type::"G/L Account";
          END ELSE BEGIN
            "Line No." := NextLineNo;
            VALIDATE(Type,Type::"G/L Account");
          END;
          VALIDATE("No.",VendPostingGr."Invoice Rounding Account");
          VALIDATE(Quantity,1);
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
            VALIDATE(PurchLine."Return Qty. to Ship",Quantity)
          ELSE
            VALIDATE(PurchLine."Qty. to Receive",Quantity);
          IF PurchHeader."Prices Including VAT" THEN
            VALIDATE("Direct Unit Cost",InvoiceRoundingAmount)
          ELSE
            VALIDATE(
              "Direct Unit Cost",
              ROUND(
                InvoiceRoundingAmount /
                (1 + (1 - PurchHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
                Currency."Amount Rounding Precision"));
          VALIDATE("Amount Including VAT",InvoiceRoundingAmount);
          "Line No." := NextLineNo;
          IF NOT UseTempData THEN BEGIN
            DocDim2.SETRANGE("Table ID",DATABASE::"Purchase Line");
            DocDim2.SETRANGE("Document Type",PurchHeader."Document Type");
            DocDim2.SETRANGE("Document No.",PurchHeader."No.");
            DocDim2.SETRANGE("Line No.","Line No.");
            IF DocDim2.FINDSET THEN
              REPEAT
                TempDocDim := DocDim2;
                TempDocDim.INSERT;
              UNTIL DocDim2.NEXT = 0;
          END;
          LastLineRetrieved := FALSE;
          RoundingLineInserted := TRUE;
          RoundingLineNo := "Line No.";
        END;
      END;
    END;

    LOCAL PROCEDURE IncrAmount@13(VAR TotalPurchLine@1000 : Record 39);
    BEGIN
      WITH PurchLine DO BEGIN
        IF PurchHeader."Prices Including VAT" OR
           ("VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT")
        THEN
          Increment(TotalPurchLine."Line Amount","Line Amount");
        Increment(TotalPurchLine.Amount,Amount);
        Increment(TotalPurchLine."VAT Base Amount","VAT Base Amount");
        Increment(TotalPurchLine."VAT Difference","VAT Difference");
        Increment(TotalPurchLine."Amount Including VAT","Amount Including VAT");
        Increment(TotalPurchLine."Line Discount Amount","Line Discount Amount");
        Increment(TotalPurchLine."Inv. Discount Amount","Inv. Discount Amount");
        Increment(TotalPurchLine."Inv. Disc. Amount to Invoice","Inv. Disc. Amount to Invoice");
        Increment(TotalPurchLine."Prepmt. Line Amount","Prepmt. Line Amount");
        Increment(TotalPurchLine."Prepmt. Amt. Inv.","Prepmt. Amt. Inv.");
        Increment(TotalPurchLine."Prepmt Amt to Deduct","Prepmt Amt to Deduct");
        Increment(TotalPurchLine."Prepmt Amt Deducted","Prepmt Amt Deducted");
        Increment(TotalPurchLine."Prepayment VAT Difference","Prepayment VAT Difference");
        Increment(TotalPurchLine."Prepmt VAT Diff. to Deduct","Prepmt VAT Diff. to Deduct");
        Increment(TotalPurchLine."Prepmt VAT Diff. Deducted","Prepmt VAT Diff. Deducted");
        Increment(TotalPurchLine."Pmt. Disc. Rcd. Amount","Pmt. Disc. Rcd. Amount");
      END;
    END;

    LOCAL PROCEDURE Increment@14(VAR Number@1000 : Decimal;Number2@1001 : Decimal);
    BEGIN
      Number := Number + Number2;
    END;

    LOCAL PROCEDURE TestPrepmtAmount@55();
    VAR
      RemainingAmount@1000 : Decimal;
      RemainingQty@1001 : Decimal;
    BEGIN
      WITH PurchLine DO BEGIN
        IF "Prepmt. Line Amount" = 0 THEN
          EXIT;
        IF NOT PurchHeader.Receive AND ("Qty. to Invoice" = Quantity - "Quantity Invoiced") THEN BEGIN
          IF "Qty. Rcd. Not Invoiced" + "Quantity Received" = Quantity THEN
            RemainingAmount := 0
          ELSE BEGIN
            RemainingQty := "Qty. to Receive";
            RemainingAmount :=
              ROUND(RemainingQty * "Direct Unit Cost" * (1 - "Line Discount %" / 100),Currency."Amount Rounding Precision");
          END;
        END ELSE BEGIN
          IF "Qty. to Invoice" + "Quantity Invoiced" = Quantity THEN
            RemainingAmount := 0
          ELSE BEGIN
            RemainingQty := Quantity - "Qty. to Invoice" - "Quantity Invoiced";
            RemainingAmount :=
              ROUND(RemainingQty * "Direct Unit Cost" * (1 - "Line Discount %" / 100),Currency."Amount Rounding Precision");
          END;
        END;
        IF RemainingAmount < "Prepmt. Line Amount" - "Prepmt Amt to Deduct" - "Prepmt Amt Deducted" THEN
          FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text049,"Qty. to Invoice"));
      END;
    END;

    PROCEDURE GetPurchLines@16(VAR NewPurchHeader@1000 : Record 38;VAR PurchLine@1001 : Record 39;QtyType@1002 : 'General,Invoicing,Shipping');
    VAR
      OldPurchLine@1003 : Record 39;
      MergedPurchLines@1004 : TEMPORARY Record 39;
    BEGIN
      PurchHeader := NewPurchHeader;
      IF QtyType = QtyType::Invoicing THEN BEGIN
        CreatePrepmtLines(PurchHeader,TempPrepmtPurchLine,PrepmtDocDim,FALSE);
        MergePurchLines(PurchHeader,OldPurchLine,TempPrepmtPurchLine,MergedPurchLines);
        SumPurchLines2(PurchLine,MergedPurchLines,QtyType,TRUE);
      END ELSE
        SumPurchLines2(PurchLine,OldPurchLine,QtyType,TRUE);
    END;

    PROCEDURE SumPurchLines@15(VAR NewPurchHeader@1000 : Record 38;QtyType@1001 : 'General,Invoicing,Shipping';VAR NewTotalPurchLine@1002 : Record 39;VAR NewTotalPurchLineLCY@1003 : Record 39;VAR VATAmount@1004 : Decimal;VAR VATAmountText@1005 : Text[30]);
    VAR
      OldPurchLine@1006 : Record 39;
    BEGIN
      SumPurchLinesTemp(
        NewPurchHeader,OldPurchLine,QtyType,NewTotalPurchLine,NewTotalPurchLineLCY,
        VATAmount,VATAmountText);
    END;

    PROCEDURE SumPurchLinesTemp@24(VAR NewPurchHeader@1000 : Record 38;VAR OldPurchLine@1001 : Record 39;QtyType@1002 : 'General,Invoicing,Shipping';VAR NewTotalPurchLine@1003 : Record 39;VAR NewTotalPurchLineLCY@1004 : Record 39;VAR VATAmount@1005 : Decimal;VAR VATAmountText@1006 : Text[30]);
    VAR
      PurchLine@1007 : Record 39;
    BEGIN
      WITH PurchHeader DO BEGIN
        PurchHeader := NewPurchHeader;
        SumPurchLines2(PurchLine,OldPurchLine,QtyType,FALSE);
        VATAmount := TotalPurchLine."Amount Including VAT" - TotalPurchLine.Amount;
        IF (TotalPurchLine."VAT %" = 0) AND (TotalPurchLine."EC %" = 0) THEN
          VATAmountText := Text021
        ELSE
          VATAmountText := STRSUBSTNO(Text022,(TotalPurchLine."VAT %" + TotalPurchLine."EC %"));
        NewTotalPurchLine := TotalPurchLine;
        NewTotalPurchLineLCY := TotalPurchLineLCY;
      END;
    END;

    LOCAL PROCEDURE SumPurchLines2@11(VAR NewPurchLine@1000 : Record 39;VAR OldPurchLine@1001 : Record 39;QtyType@1002 : 'General,Invoicing,Shipping';InsertPurchLine@1003 : Boolean);
    VAR
      PurchLineQty@1004 : Decimal;
    BEGIN
      TempVATAmountLineRemainder.DELETEALL;
      OldPurchLine.CalcVATAmountLines(QtyType,PurchHeader,OldPurchLine,TempVATAmountLine);
      WITH PurchHeader DO BEGIN
        GetGLSetup;
        PurchSetup.GET;
        GetCurrency;
        OldPurchLine.SETRANGE("Document Type","Document Type");
        OldPurchLine.SETRANGE("Document No.","No.");
        RoundingLineInserted := FALSE;
        IF OldPurchLine.FINDSET THEN
          REPEAT
            IF NOT RoundingLineInserted THEN
              PurchLine := OldPurchLine;
            CASE QtyType OF
              QtyType::General:
                PurchLineQty := PurchLine.Quantity;
              QtyType::Invoicing:
                PurchLineQty := PurchLine."Qty. to Invoice";
              QtyType::Shipping:
                BEGIN
                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                    PurchLineQty := PurchLine."Return Qty. to Ship"
                  ELSE
                    PurchLineQty := PurchLine."Qty. to Receive"
                END;
            END;
            DivideAmount(QtyType,PurchLineQty);
            PurchLine.Quantity := PurchLineQty;
            IF PurchLineQty <> 0 THEN BEGIN
              IF (PurchLine.Amount <> 0) AND NOT RoundingLineInserted THEN
                IF TotalPurchLine.Amount = 0 THEN
                BEGIN
                  TotalPurchLine."VAT %" := PurchLine."VAT %";
                  TotalPurchLine."EC %" := PurchLine."EC %";
                END
                ELSE
                  IF TotalPurchLine."VAT %" <> PurchLine."VAT %" THEN
                    TotalPurchLine."VAT %" := 0;
              RoundAmount(PurchLineQty);
              PurchLine := TempPurchLine;
            END;
            IF InsertPurchLine THEN BEGIN
              NewPurchLine := PurchLine;
              NewPurchLine.INSERT;
            END;
            IF RoundingLineInserted THEN
              LastLineRetrieved := TRUE
            ELSE BEGIN
              LastLineRetrieved := OldPurchLine.NEXT = 0;
              IF LastLineRetrieved AND PurchSetup."Invoice Rounding" THEN
                InvoiceRounding(TRUE);
            END;
          UNTIL LastLineRetrieved;
      END;
    END;

    PROCEDURE TestDeleteHeader@19(PurchHeader@1000 : Record 38;VAR PurchRcptHeader@1001 : Record 120;VAR PurchInvHeader@1002 : Record 122;VAR PurchCrMemoHeader@1003 : Record 124;VAR ReturnShptHeader@1004 : Record 6650;VAR PurchInvHeaderPrepmt@1006 : Record 122;VAR PurchCrMemoHeaderPrepmt@1005 : Record 124);
    BEGIN
      WITH PurchHeader DO BEGIN
        CLEAR(PurchRcptHeader);
        CLEAR(PurchInvHeader);
        CLEAR(PurchCrMemoHeader);
        CLEAR(ReturnShptHeader);
        PurchSetup.GET;

        SourceCodeSetup.GET;
        SourceCodeSetup.TESTFIELD("Deleted Document");
        SourceCode.GET(SourceCodeSetup."Deleted Document");

        IF ("Receiving No. Series" <> '') AND ("Receiving No." <> '') THEN BEGIN
          PurchRcptHeader.TRANSFERFIELDS(PurchHeader);
          PurchRcptHeader."No." := "Receiving No.";
          PurchRcptHeader."Posting Date" := TODAY;
          PurchRcptHeader."User ID" := USERID;
          PurchRcptHeader."Source Code" := SourceCode.Code;
        END;

        IF ("Return Shipment No. Series" <> '') AND ("Return Shipment No." <> '') THEN BEGIN
          ReturnShptHeader.TRANSFERFIELDS(PurchHeader);
          ReturnShptHeader."No." := "Return Shipment No.";
          ReturnShptHeader."Posting Date" := TODAY;
          ReturnShptHeader."User ID" := USERID;
          ReturnShptHeader."Source Code" := SourceCode.Code;
        END;

        IF ("Posting No. Series" <> '') AND
           (("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
            ("Posting No." <> '') OR
            ("Document Type" = "Document Type"::Invoice) AND
            ("No. Series" = "Posting No. Series"))
        THEN BEGIN
          PurchInvHeader.TRANSFERFIELDS(PurchHeader);
          IF "Posting No." <> '' THEN
            PurchInvHeader."No." := "Posting No.";
          IF "Document Type" = "Document Type"::Invoice THEN BEGIN
            PurchInvHeader."Pre-Assigned No. Series" := "No. Series";
            PurchInvHeader."Pre-Assigned No." := "No.";
          END ELSE BEGIN
            PurchInvHeader."Pre-Assigned No. Series" := '';
            PurchInvHeader."Pre-Assigned No." := '';
            PurchInvHeader."Order No. Series" := "No. Series";
            PurchInvHeader."Order No." := "No.";
          END;
          PurchInvHeader."Posting Date" := TODAY;
          PurchInvHeader."User ID" := USERID;
          PurchInvHeader."Source Code" := SourceCode.Code;
        END;

        IF ("Posting No. Series" <> '') AND
           (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
            ("Posting No." <> '') OR
            ("Document Type" = "Document Type"::"Credit Memo") AND
            ("No. Series" = "Posting No. Series"))
        THEN BEGIN
          PurchCrMemoHeader.TRANSFERFIELDS(PurchHeader);
          IF "Posting No." <> '' THEN
            PurchCrMemoHeader."No." := "Posting No.";
          PurchCrMemoHeader."Pre-Assigned No. Series" := "No. Series";
          PurchCrMemoHeader."Pre-Assigned No." := "No.";
          PurchCrMemoHeader."Posting Date" := TODAY;
          PurchCrMemoHeader."User ID" := USERID;
          PurchCrMemoHeader."Source Code" := SourceCode.Code;
        END;

        IF ("Prepayment No. Series" <> '') AND ("Prepayment No." <> '') THEN BEGIN
          TESTFIELD("Document Type","Document Type"::Order);
          PurchInvHeaderPrepmt.TRANSFERFIELDS(PurchHeader);
          PurchInvHeaderPrepmt."No." := "Prepayment No.";
          PurchInvHeaderPrepmt."Order No. Series" := "No. Series";
          PurchInvHeaderPrepmt."Prepayment Order No." := "No.";
          PurchInvHeaderPrepmt."Posting Date" := TODAY;
          PurchInvHeaderPrepmt."Pre-Assigned No. Series" := '';
          PurchInvHeaderPrepmt."Pre-Assigned No." := '';
          PurchInvHeaderPrepmt."User ID" := USERID;
          PurchInvHeaderPrepmt."Source Code" := SourceCode.Code;
          PurchInvHeaderPrepmt."Prepayment Invoice" := TRUE;
        END;

        IF ("Prepmt. Cr. Memo No. Series" <> '') AND ("Prepmt. Cr. Memo No." <> '') THEN BEGIN
          TESTFIELD("Document Type","Document Type"::Order);
          PurchCrMemoHeaderPrepmt.TRANSFERFIELDS(PurchHeader);
          PurchCrMemoHeaderPrepmt."No." := "Prepmt. Cr. Memo No.";
          PurchCrMemoHeaderPrepmt."Prepayment Order No." := "No.";
          PurchCrMemoHeaderPrepmt."Posting Date" := TODAY;
          PurchCrMemoHeaderPrepmt."Pre-Assigned No. Series" := '';
          PurchCrMemoHeaderPrepmt."Pre-Assigned No." := '';
          PurchCrMemoHeaderPrepmt."User ID" := USERID;
          PurchCrMemoHeaderPrepmt."Source Code" := SourceCode.Code;
          PurchCrMemoHeaderPrepmt."Prepayment Credit Memo" := TRUE;
        END;
      END;
    END;

    PROCEDURE DeleteHeader@18(PurchHeader@1000 : Record 38;VAR PurchRcptHeader@1001 : Record 120;VAR PurchInvHeader@1002 : Record 122;VAR PurchCrMemoHeader@1003 : Record 124;VAR ReturnShptHeader@1004 : Record 6650;VAR PurchInvHeaderPrepmt@1006 : Record 122;VAR PurchCrMemoHeaderPrepmt@1005 : Record 124);
    BEGIN
      WITH PurchHeader DO BEGIN
        TestDeleteHeader(
          PurchHeader,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
          ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHeaderPrepmt);
        IF PurchRcptHeader."No." <> '' THEN BEGIN
          PurchRcptHeader.INSERT;
          PurchRcptLine.INIT;
          PurchRcptLine."Document No." := PurchRcptHeader."No.";
          PurchRcptLine."Line No." := 10000;
          PurchRcptLine.Description := SourceCode.Description;
          PurchRcptLine.INSERT;
        END;

        IF ReturnShptHeader."No." <> '' THEN BEGIN
          ReturnShptHeader.INSERT;
          ReturnShptLine.INIT;
          ReturnShptLine."Document No." := ReturnShptHeader."No.";
          ReturnShptLine."Line No." := 10000;
          ReturnShptLine.Description := SourceCode.Description;
          ReturnShptLine.INSERT;
        END;

        IF PurchInvHeader."No." <> '' THEN BEGIN
          PurchInvHeader.INSERT;
          PurchInvLine.INIT;
          PurchInvLine."Document No." := PurchInvHeader."No.";
          PurchInvLine."Line No." := 10000;
          PurchInvLine.Description := SourceCode.Description;
          PurchInvLine.INSERT;
        END;

        IF PurchCrMemoHeader."No." <> '' THEN BEGIN
          PurchCrMemoHeader.INSERT(TRUE);
          PurchCrMemoLine.INIT;
          PurchCrMemoLine."Document No." := PurchCrMemoHeader."No.";
          PurchCrMemoLine."Line No." := 10000;
          PurchCrMemoLine.Description := SourceCode.Description;
          PurchCrMemoLine.INSERT;
        END;

        IF PurchInvHeaderPrepmt."No." <> '' THEN BEGIN
          PurchInvHeaderPrepmt.INSERT;
          PurchInvLine."Document No." := PurchInvHeaderPrepmt."No.";
          PurchInvLine."Line No." := 10000;
          PurchInvLine.Description := SourceCode.Description;
          PurchInvLine.INSERT;
        END;

        IF PurchCrMemoHeaderPrepmt."No." <> '' THEN BEGIN
          PurchCrMemoHeaderPrepmt.INSERT;
          PurchCrMemoLine.INIT;
          PurchCrMemoLine."Document No." := PurchCrMemoHeaderPrepmt."No.";
          PurchCrMemoLine."Line No." := 10000;
          PurchCrMemoLine.Description := SourceCode.Description;
          PurchCrMemoLine.INSERT;
        END;
      END;
    END;

    PROCEDURE UpdateBlanketOrderLine@21(PurchLine@1000 : Record 39;Receive@1001 : Boolean;Ship@1006 : Boolean;Invoice@1002 : Boolean);
    VAR
      BlanketOrderPurchLine@1003 : Record 39;
      ModifyLine@1004 : Boolean;
      Sign@1005 : Decimal;
    BEGIN
      IF (PurchLine."Blanket Order No." <> '') AND (PurchLine."Blanket Order Line No." <> 0) AND
         ((Receive AND (PurchLine."Qty. to Receive" <> 0)) OR
          (Ship AND (PurchLine."Return Qty. to Ship" <> 0)) OR
          (Invoice AND (PurchLine."Qty. to Invoice" <> 0)))
      THEN
        IF BlanketOrderPurchLine.GET(
             BlanketOrderPurchLine."Document Type"::"Blanket Order",PurchLine."Blanket Order No.",
             PurchLine."Blanket Order Line No.")
        THEN BEGIN
          BlanketOrderPurchLine.TESTFIELD(Type,PurchLine.Type);
          BlanketOrderPurchLine.TESTFIELD("No.",PurchLine."No.");
          BlanketOrderPurchLine.TESTFIELD("Buy-from Vendor No.",PurchLine."Buy-from Vendor No.");

          ModifyLine := FALSE;
          CASE PurchLine."Document Type" OF
            PurchLine."Document Type"::Order,
            PurchLine."Document Type"::Invoice:
              Sign := 1;
            PurchLine."Document Type"::"Return Order",
            PurchLine."Document Type"::"Credit Memo":
              Sign := -1;
          END;
          IF Receive AND (PurchLine."Receipt No." = '') THEN BEGIN
            IF BlanketOrderPurchLine."Qty. per Unit of Measure" =
               PurchLine."Qty. per Unit of Measure"
            THEN
              BlanketOrderPurchLine."Quantity Received" :=
                BlanketOrderPurchLine."Quantity Received" + Sign * PurchLine."Qty. to Receive"
            ELSE
              BlanketOrderPurchLine."Quantity Received" :=
                BlanketOrderPurchLine."Quantity Received" +
                Sign *
                ROUND(
                  (PurchLine."Qty. per Unit of Measure" /
                   BlanketOrderPurchLine."Qty. per Unit of Measure") *
                  PurchLine."Qty. to Receive",0.000001);
            BlanketOrderPurchLine."Qty. Received (Base)" :=
              BlanketOrderPurchLine."Qty. Received (Base)" + Sign * PurchLine."Qty. to Receive (Base)";
            ModifyLine := TRUE;
          END;
          IF Ship AND (PurchLine."Return Shipment No." = '') THEN BEGIN
            IF BlanketOrderPurchLine."Qty. per Unit of Measure" =
               PurchLine."Qty. per Unit of Measure"
            THEN
              BlanketOrderPurchLine."Quantity Received" :=
                BlanketOrderPurchLine."Quantity Received" + Sign * PurchLine."Return Qty. to Ship"
            ELSE
              BlanketOrderPurchLine."Quantity Received" :=
                BlanketOrderPurchLine."Quantity Received" +
                Sign *
                ROUND(
                  (PurchLine."Qty. per Unit of Measure" /
                   BlanketOrderPurchLine."Qty. per Unit of Measure") *
                  PurchLine."Return Qty. to Ship",0.00001);
            BlanketOrderPurchLine."Qty. Received (Base)" :=
              BlanketOrderPurchLine."Qty. Received (Base)" + Sign * PurchLine."Return Qty. to Ship (Base)";
            ModifyLine := TRUE;
          END;

          IF Invoice THEN BEGIN
            IF BlanketOrderPurchLine."Qty. per Unit of Measure" =
               PurchLine."Qty. per Unit of Measure"
            THEN
              BlanketOrderPurchLine."Quantity Invoiced" :=
                BlanketOrderPurchLine."Quantity Invoiced" + Sign * PurchLine."Qty. to Invoice"
            ELSE
              BlanketOrderPurchLine."Quantity Invoiced" :=
                BlanketOrderPurchLine."Quantity Invoiced" +
                Sign *
                ROUND(
                  (PurchLine."Qty. per Unit of Measure" /
                   BlanketOrderPurchLine."Qty. per Unit of Measure") *
                  PurchLine."Qty. to Invoice",0.00001);
            BlanketOrderPurchLine."Qty. Invoiced (Base)" :=
              BlanketOrderPurchLine."Qty. Invoiced (Base)" + Sign * PurchLine."Qty. to Invoice (Base)";
            ModifyLine := TRUE;
          END;

          IF ModifyLine THEN BEGIN
            BlanketOrderPurchLine.InitOutstanding;

            IF (BlanketOrderPurchLine.Quantity *
               BlanketOrderPurchLine."Quantity Received" < 0) OR
               (ABS(BlanketOrderPurchLine.Quantity) <
               ABS(BlanketOrderPurchLine."Quantity Received"))
            THEN
              BlanketOrderPurchLine.FIELDERROR(
                "Quantity Received",
                STRSUBSTNO(
                  Text023,
                  BlanketOrderPurchLine.FIELDCAPTION(Quantity)));

            IF (BlanketOrderPurchLine."Quantity (Base)" *
               BlanketOrderPurchLine."Qty. Received (Base)" < 0) OR
               (ABS(BlanketOrderPurchLine."Quantity (Base)") <
               ABS(BlanketOrderPurchLine."Qty. Received (Base)"))
            THEN
              BlanketOrderPurchLine.FIELDERROR(
                "Qty. Received (Base)",
                STRSUBSTNO(
                  Text023,
                  BlanketOrderPurchLine.FIELDCAPTION("Quantity Received")));

            BlanketOrderPurchLine.CALCFIELDS("Reserved Qty. (Base)");
            IF ABS(BlanketOrderPurchLine."Outstanding Qty. (Base)") <
               ABS(BlanketOrderPurchLine."Reserved Qty. (Base)")
            THEN
              BlanketOrderPurchLine.FIELDERROR(
                "Reserved Qty. (Base)",Text024);

            BlanketOrderPurchLine."Qty. to Invoice" :=
              BlanketOrderPurchLine.Quantity - BlanketOrderPurchLine."Quantity Invoiced";
            BlanketOrderPurchLine."Qty. to Receive" :=
              BlanketOrderPurchLine.Quantity - BlanketOrderPurchLine."Quantity Received";
            BlanketOrderPurchLine."Qty. to Invoice (Base)" :=
              BlanketOrderPurchLine."Quantity (Base)" - BlanketOrderPurchLine."Qty. Invoiced (Base)";
            BlanketOrderPurchLine."Qty. to Receive (Base)" :=
              BlanketOrderPurchLine."Quantity (Base)"- BlanketOrderPurchLine."Qty. Received (Base)";

            BlanketOrderPurchLine.MODIFY;
          END;
        END;
    END;

    LOCAL PROCEDURE CopyCommentLines@6(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNumber@1002 : Code[20];ToNumber@1003 : Code[20]);
    BEGIN
      PurchCommentLine.SETRANGE("Document Type",FromDocumentType);
      PurchCommentLine.SETRANGE("No.",FromNumber);
      IF PurchCommentLine.FINDSET THEN
        REPEAT
          PurchCommentLine2 := PurchCommentLine;
          PurchCommentLine2."Document Type" := ToDocumentType;
          PurchCommentLine2."No." := ToNumber;
          PurchCommentLine2.INSERT;
        UNTIL PurchCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE RunGenJnlPostLine@52(VAR GenJnlLine@1000 : Record 81;DimEntryNo@1001 : Integer);
    VAR
      TempDimBuf@1002 : TEMPORARY Record 360;
      TempJnlLineDim@1003 : TEMPORARY Record 356;
    BEGIN
      TempDimBuf.DELETEALL;
      TempJnlLineDim.DELETEALL;
      DimBufMgt.GetDimensions(DimEntryNo,TempDimBuf);
      DimMgt.CopyDimBufToJnlLineDim(
        TempDimBuf,TempJnlLineDim,GenJnlLine."Journal Template Name",
        GenJnlLine."Journal Batch Name",GenJnlLine."Line No.");
      GenJnlPostLine.RunWithCheck(GenJnlLine,TempJnlLineDim);
    END;

    LOCAL PROCEDURE CopyAndCheckDocDimToTempDocDim@34();
    VAR
      PurchLine2@1000 : Record 39;
      DimExist@1001 : Boolean;
    BEGIN
      TempDocDim.RESET;
      TempDocDim.DELETEALL;
      DocDim.SETRANGE("Table ID",DATABASE::"Purchase Header");
      DocDim.SETRANGE("Document Type",PurchHeader."Document Type");
      DocDim.SETRANGE("Document No.",PurchHeader."No.");
      IF DocDim.FINDSET THEN BEGIN
        REPEAT
          TempDocDim.INIT;
          TempDocDim := DocDim;
          TempDocDim.INSERT;
        UNTIL DocDim.NEXT = 0;
        DimExist := TRUE;
      END;
      IF PrepmtDocDim.FIND('-') THEN BEGIN
        REPEAT
          TempDocDim := PrepmtDocDim;
          TempDocDim.INSERT;
        UNTIL PrepmtDocDim.NEXT = 0;
        DimExist := TRUE;
      END;
      IF DimExist THEN BEGIN
        TempDocDim.SETRANGE("Line No.",0);
        CheckDimComb(0);
      END;
      DocDim.SETRANGE("Table ID",DATABASE::"Purchase Line");
      DocDim.SETRANGE("Document Type",PurchHeader."Document Type");
      DocDim.SETRANGE("Document No.",PurchHeader."No.");
      IF DocDim.FINDSET THEN BEGIN
        REPEAT
          TempDocDim.INIT;
          TempDocDim := DocDim;
          TempDocDim.INSERT;
        UNTIL DocDim.NEXT = 0;
        TempDocDim.SETRANGE("Line No.",0);
        CheckDimComb(0);
      END;
      PurchLine2."Line No." := 0;
      CheckDimValuePosting(PurchLine2);

      PurchLine2.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine2.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine2.SETFILTER(Type,'<>%1',PurchLine2.Type::" ");
      IF PurchLine2.FINDSET THEN
        REPEAT
          IF (PurchHeader.Receive AND (PurchLine2."Qty. to Receive" <> 0)) OR
             (PurchHeader.Invoice AND (PurchLine2."Qty. to Invoice" <> 0)) OR
             (PurchHeader.Ship AND (PurchLine2."Return Qty. to Ship" <> 0))
          THEN BEGIN
            TempDocDim.SETRANGE("Line No.",PurchLine2."Line No.");
            CheckDimComb(PurchLine2."Line No.");
            CheckDimValuePosting(PurchLine2);
          END
        UNTIL PurchLine2.NEXT = 0;
      TempDocDim.RESET;
    END;

    LOCAL PROCEDURE CheckDimComb@30(LineNo@1000 : Integer);
    BEGIN
      IF NOT DimMgt.CheckDocDimComb(TempDocDim) THEN
        IF LineNo = 0 THEN
          ERROR(
            Text032,
            PurchHeader."Document Type",PurchHeader."No.",DimMgt.GetDimCombErr)
        ELSE
          ERROR(
            Text033,
            PurchHeader."Document Type",PurchHeader."No.",LineNo,DimMgt.GetDimCombErr);
    END;

    LOCAL PROCEDURE CheckDimValuePosting@28(VAR PurchLine2@1000 : Record 39);
    VAR
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      IF PurchLine2."Line No." = 0 THEN BEGIN
        TableIDArr[1] := DATABASE::Vendor;
        NumberArr[1] := PurchHeader."Pay-to Vendor No.";
        TableIDArr[2] := DATABASE::"Salesperson/Purchaser";
        NumberArr[2] := PurchHeader."Purchaser Code";
        TableIDArr[3] := DATABASE::Campaign;
        NumberArr[3] := PurchHeader."Campaign No.";
        TableIDArr[4] := DATABASE::"Responsibility Center";
        NumberArr[4] := PurchHeader."Responsibility Center";
        IF NOT DimMgt.CheckDocDimValuePosting(TempDocDim,TableIDArr,NumberArr) THEN
          ERROR(
            Text034,
            PurchHeader."Document Type",PurchHeader."No.",DimMgt.GetDimValuePostingErr);
      END ELSE BEGIN
        TableIDArr[1] := DimMgt.TypeToTableID3(PurchLine2.Type);
        NumberArr[1] := PurchLine2."No.";
        TableIDArr[2] := DATABASE::Job;
        NumberArr[2] := PurchLine2."Job No.";
        TableIDArr[3] := DATABASE::"Work Center";
        NumberArr[3] := PurchLine2."Work Center No.";
        IF NOT DimMgt.CheckDocDimValuePosting(TempDocDim,TableIDArr,NumberArr) THEN
          ERROR(
            Text035,
            PurchHeader."Document Type",PurchHeader."No.",PurchLine2."Line No.",DimMgt.GetDimValuePostingErr);
      END;
    END;

    PROCEDURE CopyAprvlToTempApprvl@49();
    BEGIN
      TempApprovalEntry.RESET;
      TempApprovalEntry.DELETEALL;
      ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalEntry.SETRANGE("Document Type",PurchHeader."Document Type");
      ApprovalEntry.SETRANGE("Document No.",PurchHeader."No.");
      IF ApprovalEntry.FIND('-') THEN BEGIN
        REPEAT
          TempApprovalEntry.INIT;
          TempApprovalEntry := ApprovalEntry;
          TempApprovalEntry.INSERT;
        UNTIL ApprovalEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE DeleteItemChargeAssgnt@5803();
    VAR
      ItemChargeAssgntPurch@1000 : Record 5805;
    BEGIN
      ItemChargeAssgntPurch.SETRANGE("Document Type",PurchLine."Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.",PurchLine."Document No.");
      IF NOT ItemChargeAssgntPurch.ISEMPTY THEN
        ItemChargeAssgntPurch.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateItemChargeAssgnt@5808();
    VAR
      ItemChargeAssgntPurch@1000 : Record 5805;
    BEGIN
      WITH TempItemChargeAssgntPurch DO BEGIN
        ClearItemChargeAssgntFilter;
        MARKEDONLY(TRUE);
        IF FINDSET THEN
          REPEAT
            ItemChargeAssgntPurch.GET("Document Type","Document No.","Document Line No.","Line No.");
            ItemChargeAssgntPurch."Qty. Assigned" :=
              ItemChargeAssgntPurch."Qty. Assigned" + TempItemChargeAssgntPurch."Qty. to Assign";
            ItemChargeAssgntPurch."Qty. to Assign" := 0;
            ItemChargeAssgntPurch."Amount to Assign" := 0;
            ItemChargeAssgntPurch.MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdatePurchOrderChargeAssgnt@5814(PurchOrderInvLine@1000 : Record 39;PurchOrderLine@1001 : Record 39);
    VAR
      PurchOrderLine2@1002 : Record 39;
      PurchOrderInvLine2@1003 : Record 39;
      PurchRcptLine@1004 : Record 121;
    BEGIN
      WITH PurchOrderInvLine DO BEGIN
        ClearItemChargeAssgntFilter;
        TempItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
        TempItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
        TempItemChargeAssgntPurch.SETRANGE("Document Line No.","Line No.");
        TempItemChargeAssgntPurch.MARKEDONLY(TRUE);
        IF TempItemChargeAssgntPurch.FINDSET THEN
          REPEAT
            IF TempItemChargeAssgntPurch."Applies-to Doc. Type" = "Document Type" THEN BEGIN
              PurchOrderInvLine2.GET(
                TempItemChargeAssgntPurch."Applies-to Doc. Type",
                TempItemChargeAssgntPurch."Applies-to Doc. No.",
                TempItemChargeAssgntPurch."Applies-to Doc. Line No.");
              IF ((PurchOrderLine."Document Type" = PurchOrderLine."Document Type"::Order) AND
                  (PurchOrderInvLine2."Receipt No." = "Receipt No.")) OR
                 ((PurchOrderLine."Document Type" = PurchOrderLine."Document Type"::"Return Order") AND
                  (PurchOrderInvLine2."Return Shipment No." = "Return Shipment No."))
              THEN BEGIN
                IF PurchLine."Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
                  IF NOT
                     PurchRcptLine.GET(PurchOrderInvLine2."Receipt No.",PurchOrderInvLine2."Receipt Line No.")
                  THEN
                    ERROR(Text014);
                  PurchOrderLine2.GET(
                    PurchOrderLine2."Document Type"::Order,
                    PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");
                END ELSE BEGIN
                  IF NOT
                     ReturnShptLine.GET(PurchOrderInvLine2."Return Shipment No.",PurchOrderInvLine2."Return Shipment Line No.")
                  THEN
                    ERROR(Text040);
                  PurchOrderLine2.GET(
                    PurchOrderLine2."Document Type"::"Return Order",
                    ReturnShptLine."Return Order No.",ReturnShptLine."Return Order Line No.");
                END;
                UpdatePurchChargeAssgntLines(
                  PurchOrderLine,
                  PurchOrderLine2."Document Type",
                  PurchOrderLine2."Document No.",
                  PurchOrderLine2."Line No.",
                  TempItemChargeAssgntPurch."Qty. to Assign");
              END;
            END ELSE
              UpdatePurchChargeAssgntLines(
                PurchOrderLine,
                TempItemChargeAssgntPurch."Applies-to Doc. Type",
                TempItemChargeAssgntPurch."Applies-to Doc. No.",
                TempItemChargeAssgntPurch."Applies-to Doc. Line No.",
                TempItemChargeAssgntPurch."Qty. to Assign");
          UNTIL TempItemChargeAssgntPurch.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdatePurchChargeAssgntLines@5813(PurchOrderLine@1000 : Record 39;ApplToDocType@1001 : Option;ApplToDocNo@1002 : Code[20];ApplToDocLineNo@1003 : Integer;QtytoAssign@1004 : Decimal);
    VAR
      ItemChargeAssgntPurch@1005 : Record 5805;
      TempItemChargeAssgntPurch2@1008 : Record 5805;
      LastLineNo@1006 : Integer;
      TotalToAssign@1007 : Decimal;
    BEGIN
      ItemChargeAssgntPurch.SETRANGE("Document Type",PurchOrderLine."Document Type");
      ItemChargeAssgntPurch.SETRANGE("Document No.",PurchOrderLine."Document No.");
      ItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchOrderLine."Line No.");
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",ApplToDocType);
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.",ApplToDocNo);
      ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.",ApplToDocLineNo);
      IF ItemChargeAssgntPurch.FINDFIRST THEN BEGIN
        ItemChargeAssgntPurch."Qty. Assigned" :=
          ItemChargeAssgntPurch."Qty. Assigned" + QtytoAssign;
        ItemChargeAssgntPurch."Qty. to Assign" := 0;
        ItemChargeAssgntPurch."Amount to Assign" := 0;
        ItemChargeAssgntPurch.MODIFY;
      END ELSE BEGIN
        ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type");
        ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.");
        ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.");
        ItemChargeAssgntPurch.CALCSUMS("Qty. to Assign");

        TempItemChargeAssgntPurch2.SETRANGE("Document Type",TempItemChargeAssgntPurch."Document Type");
        TempItemChargeAssgntPurch2.SETRANGE("Document No.",TempItemChargeAssgntPurch."Document No.");
        TempItemChargeAssgntPurch2.SETRANGE("Document Line No.",TempItemChargeAssgntPurch."Document Line No.");
        TempItemChargeAssgntPurch2.CALCSUMS("Qty. to Assign");

        TotalToAssign := ItemChargeAssgntPurch."Qty. to Assign" +
          TempItemChargeAssgntPurch2."Qty. to Assign";

        IF ItemChargeAssgntPurch.FINDLAST THEN
          LastLineNo := ItemChargeAssgntPurch."Line No.";

        IF PurchOrderLine.Quantity < TotalToAssign THEN
          REPEAT
            TotalToAssign := TotalToAssign - ItemChargeAssgntPurch."Qty. to Assign";
            ItemChargeAssgntPurch."Qty. to Assign" := 0;
            ItemChargeAssgntPurch."Amount to Assign" := 0;
            ItemChargeAssgntPurch.MODIFY;
          UNTIL (ItemChargeAssgntPurch.NEXT(-1) = 0) OR
                (TotalToAssign = PurchOrderLine.Quantity);

        InsertAssocOrderCharge(
          PurchOrderLine,
          ApplToDocType,
          ApplToDocNo,
          ApplToDocLineNo,
          LastLineNo,
          TempItemChargeAssgntPurch."Applies-to Doc. Line Amount");
       END;
    END;

    LOCAL PROCEDURE InsertAssocOrderCharge@48(PurchOrderLine@1000 : Record 39;ApplToDocType@1002 : Option;ApplToDocNo@1003 : Code[20];ApplToDocLineNo@1004 : Integer;LastLineNo@1007 : Integer;ApplToDocLineAmt@1005 : Decimal);
    VAR
      NewItemChargeAssgntPurch@1001 : Record 5805;
    BEGIN
      WITH NewItemChargeAssgntPurch DO BEGIN
        INIT;
        "Document Type" := PurchOrderLine."Document Type";
        "Document No." := PurchOrderLine."Document No.";
        "Document Line No." := PurchOrderLine."Line No.";
        "Line No." := LastLineNo + 10000;
        "Item Charge No." := TempItemChargeAssgntPurch."Item Charge No.";
        "Item No." := TempItemChargeAssgntPurch."Item No.";
        "Qty. Assigned" := TempItemChargeAssgntPurch."Qty. to Assign";
        "Qty. to Assign" := 0;
        "Amount to Assign" := 0;
        Description := TempItemChargeAssgntPurch.Description;
        "Unit Cost" := TempItemChargeAssgntPurch."Unit Cost";
        "Applies-to Doc. Type" := ApplToDocType;
        "Applies-to Doc. No." := ApplToDocNo;
        "Applies-to Doc. Line No." := ApplToDocLineNo;
        "Applies-to Doc. Line Amount" := ApplToDocLineAmt;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CopyAndCheckItemCharge@5806(PurchHeader@1000 : Record 38);
    VAR
      PurchLine2@1001 : Record 39;
      PurchLine3@1002 : Record 39;
      InvoiceEverything@1004 : Boolean;
      AssignError@1005 : Boolean;
      QtyNeeded@1102601000 : Decimal;
    BEGIN
      TempItemChargeAssgntPurch.RESET;
      TempItemChargeAssgntPurch.DELETEALL;

      // Check for max qty posting
      PurchLine2.RESET;
      PurchLine2.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine2.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine2.SETRANGE(Type,PurchLine2.Type::"Charge (Item)");
      PurchLine2.SETFILTER("Qty. to Invoice",'<>0');
      IF PurchLine2.ISEMPTY THEN
        EXIT;

      PurchLine2.FINDSET;
      REPEAT
        ItemChargeAssgntPurch.RESET;
        ItemChargeAssgntPurch.SETRANGE("Document Type",PurchLine2."Document Type");
        ItemChargeAssgntPurch.SETRANGE("Document No.",PurchLine2."Document No.");
        ItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLine2."Line No.");
        ItemChargeAssgntPurch.SETFILTER("Qty. to Assign",'<>0');
        IF ItemChargeAssgntPurch.FINDSET THEN
          REPEAT
            TempItemChargeAssgntPurch.INIT;
            TempItemChargeAssgntPurch := ItemChargeAssgntPurch;
            TempItemChargeAssgntPurch.INSERT;
          UNTIL ItemChargeAssgntPurch.NEXT = 0;

        PurchLine2.TESTFIELD("Job No.",'');
        IF PurchHeader.Invoice AND
           (PurchLine2."Qty. to Receive" + PurchLine2."Return Qty. to Ship" <> 0) AND
           ((PurchHeader.Ship OR PurchHeader.Receive) OR
            (ABS(PurchLine2."Qty. to Invoice") >
             ABS(PurchLine2."Qty. Rcd. Not Invoiced" + PurchLine2."Qty. to Receive") +
             ABS(PurchLine2."Ret. Qty. Shpd Not Invd.(Base)" + PurchLine2."Return Qty. to Ship")))
        THEN
          PurchLine2.TESTFIELD("Line Amount");

        IF NOT PurchHeader.Receive THEN
          PurchLine2."Qty. to Receive" := 0;
        IF NOT PurchHeader.Ship THEN
          PurchLine2."Return Qty. to Ship" := 0;
        IF ABS(PurchLine2."Qty. to Invoice") >
           ABS(PurchLine2."Quantity Received" + PurchLine2."Qty. to Receive" +
             PurchLine2."Return Qty. Shipped" + PurchLine2."Return Qty. to Ship" -
             PurchLine2."Quantity Invoiced")
        THEN
          PurchLine2."Qty. to Invoice" :=
            PurchLine2."Quantity Received" + PurchLine2."Qty. to Receive" +
            PurchLine2."Return Qty. Shipped (Base)" + PurchLine2."Return Qty. to Ship (Base)" -
            PurchLine2."Quantity Invoiced";

        PurchLine2.CALCFIELDS("Qty. to Assign","Qty. Assigned");
        IF ABS(PurchLine2."Qty. to Assign" + PurchLine2."Qty. Assigned") >
           ABS(PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced")
        THEN
          ERROR(Text036,
            PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced" -
            PurchLine2."Qty. Assigned",PurchLine2.FIELDCAPTION("Document Type"),
            PurchLine2."Document Type",PurchLine2.FIELDCAPTION("Document No."),
            PurchLine2."Document No.",PurchLine2.FIELDCAPTION("Line No."),
            PurchLine2."Line No.");
        IF PurchLine2.Quantity =
           PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced"
        THEN BEGIN
          IF PurchLine2."Qty. to Assign" <> 0 THEN BEGIN
            IF PurchLine2.Quantity = PurchLine2."Quantity Invoiced" THEN BEGIN
              TempItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLine2."Line No.");
              TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",PurchLine2."Document Type");
              IF TempItemChargeAssgntPurch.FINDSET THEN
                REPEAT
                  PurchLine3.GET(
                    TempItemChargeAssgntPurch."Applies-to Doc. Type",
                    TempItemChargeAssgntPurch."Applies-to Doc. No.",
                    TempItemChargeAssgntPurch."Applies-to Doc. Line No.");
                  IF PurchLine3.Quantity = PurchLine3."Quantity Invoiced" THEN
                    ERROR(Text038,PurchLine3.TABLECAPTION,
                      PurchLine3.FIELDCAPTION("Document Type"),PurchLine3."Document Type",
                      PurchLine3.FIELDCAPTION("Document No."),PurchLine3."Document No.",
                      PurchLine3.FIELDCAPTION("Line No."),PurchLine3."Line No.");
                UNTIL TempItemChargeAssgntPurch.NEXT = 0;
            END;
          END;
          IF PurchLine2.Quantity <>
             PurchLine2."Qty. to Assign" + PurchLine2."Qty. Assigned"
          THEN
            AssignError := TRUE;
        END;

        IF (PurchLine2."Qty. to Assign" + PurchLine2."Qty. Assigned") < (PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced")
        THEN
          ERROR(Text059,PurchLine2."No.");

        // check if all ILEs exist
        QtyNeeded := PurchLine2."Qty. to Assign";
        TempItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLine2."Line No.");
        IF TempItemChargeAssgntPurch.FINDSET THEN
          REPEAT
            IF (TempItemChargeAssgntPurch."Applies-to Doc. Type" <> PurchLine2."Document Type") AND
               (TempItemChargeAssgntPurch."Applies-to Doc. No." <> PurchLine2."Document No.")
            THEN
              QtyNeeded := QtyNeeded - TempItemChargeAssgntPurch."Qty. to Assign"
            ELSE BEGIN
              PurchLine3.GET(
                TempItemChargeAssgntPurch."Applies-to Doc. Type",
                TempItemChargeAssgntPurch."Applies-to Doc. No.",
                TempItemChargeAssgntPurch."Applies-to Doc. Line No.");
              IF ItemLedgerEntryExist(PurchLine3) THEN
                QtyNeeded := QtyNeeded - TempItemChargeAssgntPurch."Qty. to Assign";
            END;
          UNTIL TempItemChargeAssgntPurch.NEXT = 0;

        IF QtyNeeded > 0 THEN
          ERROR(Text060,PurchLine2."No.");
      UNTIL PurchLine2.NEXT = 0;

      // Check purchlines
      IF AssignError THEN
        IF PurchHeader."Document Type" IN
           [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::"Credit Memo"]
        THEN
          InvoiceEverything := TRUE
        ELSE BEGIN
          PurchLine2.RESET;
          PurchLine2.SETRANGE("Document Type",PurchHeader."Document Type");
          PurchLine2.SETRANGE("Document No.",PurchHeader."No.");
          PurchLine2.SETFILTER(Type,'%1|%2',PurchLine2.Type::Item,PurchLine2.Type::"Charge (Item)");
          IF PurchLine2.FINDSET THEN
            REPEAT
              IF PurchHeader.Ship OR PurchHeader.Receive THEN
                InvoiceEverything :=
                  PurchLine2.Quantity = PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced"
              ELSE
                InvoiceEverything :=
                  (PurchLine2.Quantity = PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced") AND
                  (PurchLine2."Qty. to Invoice" =
                   PurchLine2."Qty. Rcd. Not Invoiced" + PurchLine2."Return Qty. Shipped Not Invd.");
            UNTIL (PurchLine2.NEXT = 0) OR (NOT InvoiceEverything);
        END;

      IF InvoiceEverything AND AssignError THEN
        ERROR(Text037);
    END;

    LOCAL PROCEDURE ClearItemChargeAssgntFilter@27();
    BEGIN
      TempItemChargeAssgntPurch.SETRANGE("Document Line No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.");
      TempItemChargeAssgntPurch.MARKEDONLY(FALSE);
    END;

    LOCAL PROCEDURE GetItemChargeLine@5809(VAR ItemChargePurchLine@1000 : Record 39);
    BEGIN
      WITH TempItemChargeAssgntPurch DO BEGIN
        IF (ItemChargePurchLine."Document Type" <> "Document Type") OR
           (ItemChargePurchLine."Document No." <> "Document No.") OR
           (ItemChargePurchLine."Line No." <> "Document Line No.")
        THEN BEGIN
          ItemChargePurchLine.GET("Document Type","Document No.","Document Line No.");
          IF NOT PurchHeader.Receive THEN
            PurchLine2."Qty. to Receive" := 0;
          IF NOT PurchHeader.Ship THEN
            PurchLine2."Return Qty. to Ship" := 0;
          IF ABS(PurchLine2."Qty. to Invoice") >
             ABS(PurchLine2."Quantity Received" + PurchLine2."Qty. to Receive" +
                 PurchLine2."Return Qty. Shipped" + PurchLine2."Return Qty. to Ship" -
                 PurchLine2."Quantity Invoiced")
          THEN
            PurchLine2."Qty. to Invoice" :=
             PurchLine2."Quantity Received" + PurchLine2."Qty. to Receive" +
             PurchLine2."Return Qty. Shipped (Base)" + PurchLine2."Return Qty. to Ship (Base)" -
             PurchLine2."Quantity Invoiced";
        END;
      END;
    END;

    LOCAL PROCEDURE OnlyAssgntPosting@36() : Boolean;
    VAR
      PurchLine@1000 : Record 39;
      QtyLeftToAssign@1002 : Boolean;
    BEGIN
      WITH PurchHeader DO BEGIN
        ItemChargeAssgntOnly := FALSE;
        QtyLeftToAssign := FALSE;
        PurchLine.SETRANGE("Document Type","Document Type");
        PurchLine.SETRANGE("Document No.","No.");
        PurchLine.SETRANGE(Type, PurchLine.Type::"Charge (Item)");
        IF PurchLine.FINDSET THEN BEGIN
          REPEAT
            PurchLine.CALCFIELDS("Qty. Assigned");
            IF (PurchLine."Quantity Invoiced" > PurchLine."Qty. Assigned") THEN
              QtyLeftToAssign := TRUE;
          UNTIL PurchLine.NEXT = 0;
        END;

        IF QtyLeftToAssign THEN
          CopyAndCheckItemCharge(PurchHeader);
        ClearItemChargeAssgntFilter;
        TempItemChargeAssgntPurch.SETCURRENTKEY("Applies-to Doc. Type");
        TempItemChargeAssgntPurch.SETFILTER("Applies-to Doc. Type",'<>%1',"Document Type");
        PurchLine.SETRANGE(Type);
        PurchLine.SETRANGE("Quantity Invoiced");
        PurchLine.SETFILTER("Qty. to Assign",'<>0');
        IF PurchLine.FINDSET THEN
          REPEAT
            TempItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLine."Line No.");
            IF TempItemChargeAssgntPurch.FINDFIRST THEN
              ItemChargeAssgntOnly := TRUE;
          UNTIL (PurchLine.NEXT = 0) OR ItemChargeAssgntOnly
        ELSE
          ItemChargeAssgntOnly := FALSE;
      END;
      EXIT(ItemChargeAssgntOnly);
    END;

    LOCAL PROCEDURE CalcQtyToInvoice@5810(QtyToHandle@1000 : Decimal;QtyToInvoice@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(QtyToHandle) > ABS(QtyToInvoice) THEN
        EXIT(QtyToHandle)
      ELSE
        EXIT(QtyToInvoice);
    END;

    LOCAL PROCEDURE GetGLSetup@20();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE CheckWarehouse@7301(VAR PurchLine@1000 : Record 39);
    VAR
      PurchLine2@1001 : Record 39;
      WhseValidateSourceLine@1003 : Codeunit 5777;
      ShowError@1002 : Boolean;
    BEGIN
      PurchLine2.COPY(PurchLine);
      PurchLine2.SETRANGE(Type,PurchLine2.Type::Item);
      PurchLine2.SETRANGE("Drop Shipment",FALSE);
      IF PurchLine2.FINDSET THEN
        REPEAT
          GetLocation(PurchLine2."Location Code");
          CASE PurchLine2."Document Type" OF
            PurchLine2."Document Type"::Order:
              IF ((Location."Require Receive" OR Location."Require Put-away") AND
                  (PurchLine2.Quantity >= 0)) OR
                 ((Location."Require Shipment" OR Location."Require Pick") AND
                  (PurchLine2.Quantity < 0))
              THEN BEGIN
                IF Location."Directed Put-away and Pick" THEN
                  ShowError := TRUE
                ELSE
                  IF WhseValidateSourceLine.WhseLinesExist(
                       DATABASE::"Purchase Line",
                       PurchLine2."Document Type",
                       PurchLine2."Document No.",
                       PurchLine2."Line No.",
                       0,
                       PurchLine2.Quantity)
                  THEN
                    ShowError := TRUE;
              END;
            PurchLine2."Document Type"::"Return Order":
              IF ((Location."Require Receive" OR Location."Require Put-away") AND
                  (PurchLine2.Quantity < 0)) OR
                 ((Location."Require Shipment" OR Location."Require Pick") AND
                  (PurchLine2.Quantity >= 0))
              THEN BEGIN
                IF Location."Directed Put-away and Pick" THEN
                  ShowError := TRUE
                ELSE
                  IF WhseValidateSourceLine.WhseLinesExist(
                       DATABASE::"Purchase Line",
                       PurchLine2."Document Type",
                       PurchLine2."Document No.",
                       PurchLine2."Line No.",
                       0,
                       PurchLine2.Quantity)
                  THEN
                    ShowError := TRUE;
              END;
            PurchLine2."Document Type"::Invoice,PurchLine2."Document Type"::"Credit Memo":
              IF Location."Directed Put-away and Pick" THEN
                Location.TESTFIELD("Adjustment Bin Code");
          END;
          IF ShowError THEN
            ERROR(
              Text026,
              PurchLine2.FIELDCAPTION("Document Type"),
              PurchLine2."Document Type",
              PurchLine2.FIELDCAPTION("Document No."),
              PurchLine2."Document No.",
              PurchLine2.FIELDCAPTION("Line No."),
              PurchLine2."Line No.");
        UNTIL PurchLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateWhseJnlLine@7302(ItemJnlLine@1000 : Record 83;PurchLine@1002 : Record 39;VAR TempWhseJnlLine@1001 : TEMPORARY Record 7311);
    VAR
      WhseMgt@1003 : Codeunit 5775;
    BEGIN
      WITH PurchLine DO BEGIN
        WMSMgmt.CheckAdjmtBin(Location,ItemJnlLine.Quantity,TRUE);
        WMSMgmt.CreateWhseJnlLine(ItemJnlLine,0,TempWhseJnlLine,FALSE,FALSE);
        TempWhseJnlLine."Source Type" := DATABASE::"Purchase Line";
        TempWhseJnlLine."Source Subtype" := "Document Type";
        WhseMgt.GetSourceDocument(
          TempWhseJnlLine."Source Document",TempWhseJnlLine."Source Type",TempWhseJnlLine."Source Subtype");
        TempWhseJnlLine."Source No." := "Document No.";
        TempWhseJnlLine."Source Line No." := "Line No.";
        TempWhseJnlLine."Source Code" := SrcCode;
        CASE "Document Type" OF
          "Document Type"::Order:
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted Rcpt.";
          "Document Type"::Invoice:
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted P. Inv.";
          "Document Type"::"Credit Memo":
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted P. Cr. Memo";
          "Document Type"::"Return Order":
            TempWhseJnlLine."Reference Document" :=
              TempWhseJnlLine."Reference Document"::"Posted Rtrn. Rcpt.";
        END;
        TempWhseJnlLine."Reference No." := ItemJnlLine."Document No.";
      END;
    END;

    LOCAL PROCEDURE WhseHandlingRequired@7307() : Boolean;
    VAR
      WhseSetup@1000 : Record 5769;
    BEGIN
      IF (PurchLine.Type = PurchLine.Type::Item) AND
         (NOT PurchLine."Drop Shipment")
      THEN BEGIN
        IF PurchLine."Location Code" = '' THEN BEGIN
          WhseSetup.GET;
          IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN
            EXIT(WhseSetup."Require Pick")
          ELSE
            EXIT(WhseSetup."Require Receive");
        END ELSE BEGIN
          GetLocation(PurchLine."Location Code");
          IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN
            EXIT(Location."Require Pick")
          ELSE
            EXIT(Location."Require Receive");
        END;
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        Location.GetLocationSetup(LocationCode,Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE InsertRcptEntryRelation@38(VAR PurchRcptLine@1002 : Record 121) : Integer;
    VAR
      ItemEntryRelation@1001 : Record 6507;
    BEGIN
      TempTrackingSpecificationInv.RESET;
      IF TempTrackingSpecificationInv.FINDSET THEN BEGIN
        REPEAT
          TempHandlingSpecification := TempTrackingSpecificationInv;
          IF TempHandlingSpecification.INSERT THEN;
        UNTIL TempTrackingSpecificationInv.NEXT = 0;
        TempTrackingSpecificationInv.DELETEALL;
      END;

      TempHandlingSpecification.RESET;
      IF TempHandlingSpecification.FINDSET THEN BEGIN
        REPEAT
          ItemEntryRelation.INIT;
          ItemEntryRelation."Item Entry No." := TempHandlingSpecification."Entry No.";
          ItemEntryRelation."Serial No." := TempHandlingSpecification."Serial No.";
          ItemEntryRelation."Lot No." := TempHandlingSpecification."Lot No.";
          ItemEntryRelation.TransferFieldsPurchRcptLine(PurchRcptLine);
          ItemEntryRelation.INSERT;
        UNTIL TempHandlingSpecification.NEXT = 0;
        TempHandlingSpecification.DELETEALL;
        EXIT(0);
      END ELSE
        EXIT(ItemLedgShptEntryNo);
    END;

    LOCAL PROCEDURE InsertReturnEntryRelation@39(VAR ReturnShptLine@1002 : Record 6651) : Integer;
    VAR
      ItemEntryRelation@1001 : Record 6507;
    BEGIN
      TempTrackingSpecificationInv.RESET;
      IF TempTrackingSpecificationInv.FINDSET THEN BEGIN
        REPEAT
          TempHandlingSpecification := TempTrackingSpecificationInv;
          IF TempHandlingSpecification.INSERT THEN;
        UNTIL TempTrackingSpecificationInv.NEXT = 0;
        TempTrackingSpecificationInv.DELETEALL;
      END;

      TempHandlingSpecification.RESET;
      IF TempHandlingSpecification.FINDSET THEN BEGIN
        REPEAT
          ItemEntryRelation.INIT;
          ItemEntryRelation."Item Entry No." := TempHandlingSpecification."Entry No.";
          ItemEntryRelation."Serial No." := TempHandlingSpecification."Serial No.";
          ItemEntryRelation."Lot No." := TempHandlingSpecification."Lot No.";
          ItemEntryRelation.TransferFieldsReturnShptLine(ReturnShptLine);
          ItemEntryRelation.INSERT;
        UNTIL TempHandlingSpecification.NEXT = 0;
        TempHandlingSpecification.DELETEALL;
        EXIT(0);
      END ELSE
        EXIT(ItemLedgShptEntryNo);
    END;

    LOCAL PROCEDURE CheckTrackingSpecification@46(VAR PurchLine@1019 : Record 39);
    VAR
      PurchLineToCheck@1000 : Record 39;
      ReservationEntry@1001 : Record 337;
      Item@1016 : Record 27;
      ItemTrackingCode@1009 : Record 6502;
      CreateReservEntry@1004 : Codeunit 99000830;
      ItemTrackingManagement@1015 : Codeunit 6500;
      ErrorFieldCaption@1018 : Text[250];
      SignFactor@1005 : Integer;
      PurchLineQtyHandled@1022 : Decimal;
      PurchLineQtyToHandle@1023 : Decimal;
      TrackingQtyHandled@1021 : Decimal;
      TrackingQtyToHandle@1003 : Decimal;
      Inbound@1010 : Boolean;
      SNRequired@1011 : Boolean;
      LotRequired@1012 : Boolean;
      SNInfoRequired@1013 : Boolean;
      LotInfoReguired@1014 : Boolean;
      CheckPurchLine@1008 : Boolean;
    BEGIN
      // if a PurchaseLine is posted with ItemTracking then the whole quantity of
      // the regarding PurchaseLine has to be post with Item-Tracking

      IF PurchHeader."Document Type" IN
        [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::"Return Order"] = FALSE
      THEN
        EXIT;

      TrackingQtyToHandle := 0;
      TrackingQtyHandled := 0;

      PurchLineToCheck.COPY(PurchLine);
      PurchLineToCheck.SETRANGE(Type,PurchLineToCheck.Type::Item);
      IF PurchHeader.Receive THEN BEGIN
        PurchLineToCheck.SETFILTER("Quantity Received",'<>%1',0);
        ErrorFieldCaption := PurchLineToCheck.FIELDCAPTION("Qty. to Receive");
      END ELSE BEGIN
        PurchLineToCheck.SETFILTER("Return Qty. Shipped",'<>%1',0);
        ErrorFieldCaption := PurchLineToCheck.FIELDCAPTION("Return Qty. to Ship");
      END;

      IF PurchLineToCheck.FINDSET THEN BEGIN
        ReservationEntry."Source Type" := DATABASE::"Purchase Line";
        ReservationEntry."Source Subtype" := PurchHeader."Document Type";
        SignFactor := CreateReservEntry.SignFactor(ReservationEntry);
        REPEAT
          // Only Item where no SerialNo or LotNo is required
          Item.GET(PurchLineToCheck."No.");
          IF Item."Item Tracking Code" <> '' THEN BEGIN
            Inbound := (PurchLineToCheck.Quantity * SignFactor) > 0;
            ItemTrackingCode.Code := Item."Item Tracking Code";
            ItemTrackingManagement.GetItemTrackingSettings(ItemTrackingCode,
              ItemJnlLine."Entry Type"::Purchase,
              Inbound,
              SNRequired,
              LotRequired,
              SNInfoRequired,
              LotInfoReguired);
            CheckPurchLine := (SNRequired = FALSE) AND (LotRequired = FALSE);
            IF CheckPurchLine THEN
              CheckPurchLine := GetTrackingQuantities(PurchLineToCheck,0,TrackingQtyToHandle,TrackingQtyHandled);
          END ELSE
            CheckPurchLine := FALSE;

          TrackingQtyToHandle := 0;
          TrackingQtyHandled := 0;

          IF CheckPurchLine THEN BEGIN
            GetTrackingQuantities(PurchLineToCheck,1,TrackingQtyToHandle,TrackingQtyHandled);
            TrackingQtyToHandle := TrackingQtyToHandle * SignFactor;
            TrackingQtyHandled := TrackingQtyHandled * SignFactor;
            IF PurchHeader.Receive THEN BEGIN
              PurchLineQtyToHandle := PurchLineToCheck."Qty. to Receive (Base)";
              PurchLineQtyHandled := PurchLineToCheck."Qty. Received (Base)";
            END ELSE BEGIN
              PurchLineQtyToHandle := PurchLineToCheck."Return Qty. to Ship (Base)";
              PurchLineQtyHandled := PurchLineToCheck."Return Qty. Shipped (Base)";
            END;
            IF ((TrackingQtyHandled + TrackingQtyToHandle) <> (PurchLineQtyHandled + PurchLineQtyToHandle)) OR
               (TrackingQtyToHandle <> PurchLineQtyToHandle)
            THEN
              ERROR(STRSUBSTNO(Text046,ErrorFieldCaption));
          END;
        UNTIL PurchLineToCheck.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetTrackingQuantities@47(PurchLine@1000 : Record 39;FunctionType@1002 : 'CheckTrackingExists,GetQty';VAR TrackingQtyToHandle@1003 : Decimal;VAR TrackingQtyHandled@1005 : Decimal) : Boolean;
    VAR
      TrackingSpecification@1004 : Record 336;
      ReservEntry@1001 : Record 337;
    BEGIN
      WITH TrackingSpecification DO BEGIN
        SETCURRENTKEY("Source ID","Source Type","Source Subtype","Source Batch Name",
          "Source Prod. Order Line","Source Ref. No.");
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype",PurchLine."Document Type");
        SETRANGE("Source ID",PurchLine."Document No.");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
        SETRANGE("Source Ref. No.",PurchLine."Line No.");
      END;
      WITH ReservEntry DO BEGIN
        SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line");
        SETRANGE("Source ID",PurchLine."Document No.");
        SETRANGE("Source Ref. No.",PurchLine."Line No.");
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype",PurchLine."Document Type");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
      END;

      CASE FunctionType OF
        FunctionType::CheckTrackingExists:
          BEGIN
            TrackingSpecification.SETRANGE(Correction,FALSE);
            IF NOT TrackingSpecification.ISEMPTY THEN
              EXIT(TRUE);
            ReservEntry.SETFILTER("Serial No.",'<>%1','');
            IF NOT ReservEntry.ISEMPTY THEN
              EXIT(TRUE);
            ReservEntry.SETRANGE("Serial No.");
            ReservEntry.SETFILTER("Lot No.",'<>%1','');
            IF NOT ReservEntry.ISEMPTY THEN
              EXIT(TRUE);
          END;
        FunctionType::GetQty:
          BEGIN
            TrackingSpecification.CALCSUMS("Quantity Handled (Base)");
            TrackingQtyHandled := TrackingSpecification."Quantity Handled (Base)";
            IF ReservEntry.FINDSET THEN
              REPEAT
                IF (ReservEntry."Lot No." <> '') OR (ReservEntry."Serial No." <> '') THEN
                  TrackingQtyToHandle := TrackingQtyToHandle + ReservEntry."Qty. to Handle (Base)";
              UNTIL ReservEntry.NEXT = 0;
          END;
      END;
    END;

    LOCAL PROCEDURE SaveInvoiceSpecification@33(VAR TempInvoicingSpecification@1000 : TEMPORARY Record 336);
    BEGIN
      TempInvoicingSpecification.RESET;
      IF TempInvoicingSpecification.FINDSET THEN BEGIN
        REPEAT
          TempInvoicingSpecification."Quantity Invoiced (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
          TempTrackingSpecification := TempInvoicingSpecification;
          TempTrackingSpecification."Buffer Status" := TempTrackingSpecification."Buffer Status"::MODIFY;
          IF NOT (TempTrackingSpecification.INSERT) THEN BEGIN
            TempTrackingSpecification.GET(TempInvoicingSpecification."Entry No.");
            TempTrackingSpecification."Qty. to Invoice (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
            IF TempInvoicingSpecification."Qty. to Invoice (Base)" = TempInvoicingSpecification."Quantity Invoiced (Base)" THEN
              TempTrackingSpecification."Quantity Invoiced (Base)" += TempInvoicingSpecification."Quantity Invoiced (Base)"
            ELSE
              TempTrackingSpecification."Quantity Invoiced (Base)" += TempInvoicingSpecification."Qty. to Invoice (Base)";
            TempTrackingSpecification."Qty. to Invoice" += TempInvoicingSpecification."Qty. to Invoice";
            TempTrackingSpecification.MODIFY;
          END;
        UNTIL TempInvoicingSpecification.NEXT = 0;
        TempInvoicingSpecification.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE InsertTrackingSpecification@35();
    VAR
      TrackingSpecification@1000 : Record 336;
    BEGIN
      TempTrackingSpecification.RESET;
      IF TempTrackingSpecification.FINDSET THEN BEGIN
        REPEAT
          TrackingSpecification := TempTrackingSpecification;
          TrackingSpecification."Buffer Status" := 0;
          TrackingSpecification.InitQtyToShip;
          TrackingSpecification.Correction := FALSE;
          TrackingSpecification."Quantity actual Handled (Base)" := 0;
          IF TempTrackingSpecification."Buffer Status" = TempTrackingSpecification."Buffer Status"::MODIFY THEN
            TrackingSpecification.MODIFY
          ELSE
            TrackingSpecification.INSERT;
        UNTIL TempTrackingSpecification.NEXT = 0;
        TempTrackingSpecification.DELETEALL;
      END;

      ReservePurchLine.UpdateItemTrackingAfterPosting(PurchHeader);
    END;

    LOCAL PROCEDURE CalcBaseQty@29(ItemNo@1002 : Code[20];UOMCode@1004 : Code[10];Qty@1000 : Decimal) : Decimal;
    VAR
      UOMMgt@1001 : Codeunit 5402;
      Item@1003 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      EXIT(ROUND(Qty * UOMMgt.GetQtyPerUnitOfMeasure(Item,UOMCode),0.00001));
    END;

    LOCAL PROCEDURE InsertValueEntryRelation@40();
    VAR
      ValueEntryRelation@1000 : Record 6508;
    BEGIN
      TempValueEntryRelation.RESET;
      IF TempValueEntryRelation.FINDSET THEN BEGIN
        REPEAT
          ValueEntryRelation := TempValueEntryRelation;
          ValueEntryRelation.INSERT;
        UNTIL TempValueEntryRelation.NEXT = 0;
        TempValueEntryRelation.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE PostItemCharge@42(PurchLine@1000 : Record 39;ItemEntryNo@1004 : Integer;QuantityBase@1005 : Decimal;AmountToAssign@1006 : Decimal;QtyToAssign@1007 : Decimal;IndirectCostPct@1008 : Decimal);
    VAR
      DummyTrackingSpecification@1001 : Record 336;
    BEGIN
      WITH TempItemChargeAssgntPurch DO BEGIN
        PurchLine."No." := "Item No.";
        PurchLine."Line No." := "Document Line No.";
        PurchLine."Appl.-to Item Entry" := ItemEntryNo;
        PurchLine."Indirect Cost %" := IndirectCostPct;

        PurchLine.Amount := AmountToAssign;

        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          PurchLine.Amount := -PurchLine.Amount;

        IF PurchLine."Currency Code" <> '' THEN
          PurchLine."Unit Cost" := ROUND(
            PurchLine.Amount / QuantityBase,Currency."Unit-Amount Rounding Precision")
        ELSE
          PurchLine."Unit Cost" := ROUND(
            PurchLine.Amount / QuantityBase,GLSetup."Unit-Amount Rounding Precision");

        TotalChargeAmt := TotalChargeAmt + PurchLine.Amount;
        IF PurchHeader."Currency Code" <> '' THEN
          PurchLine.Amount :=
            CurrExchRate.ExchangeAmtFCYToLCY(
              Usedate,PurchHeader."Currency Code",TotalChargeAmt,PurchHeader."Currency Factor");

        PurchLine.Amount := ROUND(PurchLine.Amount,GLSetup."Amount Rounding Precision") - TotalChargeAmtLCY;
        IF PurchHeader."Currency Code" <> '' THEN
          TotalChargeAmtLCY := TotalChargeAmtLCY + PurchLine.Amount;
        PurchLine."Unit Cost (LCY)" :=
          ROUND(
            PurchLine.Amount / QuantityBase,GLSetup."Unit-Amount Rounding Precision");

        PurchLine."Inv. Discount Amount" := ROUND(
          PurchLine."Inv. Discount Amount" / PurchLine.Quantity * QtyToAssign,
          GLSetup."Amount Rounding Precision");

        PurchLine."Line Discount Amount" := ROUND(
            PurchLine."Line Discount Amount" / PurchLine.Quantity * QtyToAssign,
            GLSetup."Amount Rounding Precision");
        PostItemJnlLine(
          PurchLine,
          0,0,
          QuantityBase,QuantityBase,
          PurchLine."Appl.-to Item Entry","Item Charge No.",DummyTrackingSpecification);
      END;
    END;

    PROCEDURE SaveTempWhseSplitSpec@45(PurchLine3@1000 : Record 39);
    BEGIN
      TempWhseSplitSpecification.RESET;
      TempWhseSplitSpecification.DELETEALL;
      IF TempHandlingSpecification.FINDSET THEN
        REPEAT
          TempWhseSplitSpecification := TempHandlingSpecification;
          TempWhseSplitSpecification."Source Type" := DATABASE::"Purchase Line";
          TempWhseSplitSpecification."Source Subtype" := PurchLine3."Document Type";
          TempWhseSplitSpecification."Source ID" := PurchLine3."Document No.";
          TempWhseSplitSpecification."Source Ref. No." := PurchLine3."Line No.";
          TempWhseSplitSpecification.INSERT;
        UNTIL TempHandlingSpecification.NEXT = 0;
    END;

    PROCEDURE TransferReservToItemJnlLine@32(VAR SalesOrderLine@1000 : Record 37;VAR ItemJnlLine@1001 : Record 83;VAR QtyToBeShippedBase@1002 : Decimal;ApplySpecificItemTracking@1003 : Boolean);
    VAR
      ReserveSalesLine@1006 : Codeunit 99000832;
      RemainingQuantity@1004 : Decimal;
      CheckApplFromItemEntry@1005 : Boolean;
    BEGIN
      // Handle Item Tracking and reservations, also on drop shipment
      IF QtyToBeShippedBase = 0 THEN
        EXIT;

      IF NOT ApplySpecificItemTracking THEN
        ReserveSalesLine.TransferSalesLineToItemJnlLine(
          SalesOrderLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry)
      ELSE BEGIN
        TempTrackingSpecification.RESET;
        TempTrackingSpecification.SETRANGE("Source Type",DATABASE::"Purchase Line");
        TempTrackingSpecification.SETRANGE("Source Subtype",PurchLine."Document Type");
        TempTrackingSpecification.SETRANGE("Source ID",PurchLine."Document No.");
        TempTrackingSpecification.SETRANGE("Source Batch Name",'');
        TempTrackingSpecification.SETRANGE("Source Prod. Order Line",0);
        TempTrackingSpecification.SETRANGE("Source Ref. No.",PurchLine."Line No.");
        IF TempTrackingSpecification.ISEMPTY THEN
          ReserveSalesLine.TransferSalesLineToItemJnlLine(
            SalesOrderLine,ItemJnlLine,QtyToBeShippedBase,CheckApplFromItemEntry)
        ELSE BEGIN
          ReserveSalesLine.SetApplySpecificItemTracking(TRUE);
          ReserveSalesLine.SetOverruleItemTracking(TRUE);
          TempTrackingSpecification.FINDSET;
          IF TempTrackingSpecification."Quantity (Base)" / QtyToBeShippedBase < 0 THEN
            ERROR(Text043);
          REPEAT
            ItemJnlLine."Serial No." := TempTrackingSpecification."Serial No.";
            ItemJnlLine."Lot No." := TempTrackingSpecification."Lot No.";
            ItemJnlLine."Applies-to Entry" := TempTrackingSpecification."Appl.-to Item Entry";
            RemainingQuantity :=
              ReserveSalesLine.TransferSalesLineToItemJnlLine(
                SalesOrderLine,ItemJnlLine,TempTrackingSpecification."Quantity (Base)",CheckApplFromItemEntry);
            IF RemainingQuantity <> 0 THEN
              ERROR(Text044);
          UNTIL TempTrackingSpecification.NEXT = 0;
          ItemJnlLine."Serial No." := '';
          ItemJnlLine."Lot No." := '';
          ItemJnlLine."Applies-to Entry" := 0;
        END;
      END;
    END;

    PROCEDURE SetWhseRcptHeader@26(VAR WhseRcptHeader2@1000 : Record 7316);
    BEGIN
      WhseRcptHeader := WhseRcptHeader2;
      TempWhseRcptHeader := WhseRcptHeader;
      TempWhseRcptHeader.INSERT;
    END;

    PROCEDURE SetWhseShptHeader@44(VAR WhseShptHeader2@1000 : Record 7320);
    BEGIN
      WhseShptHeader := WhseShptHeader2;
      TempWhseShptHeader := WhseShptHeader;
      TempWhseShptHeader.INSERT;
    END;

    LOCAL PROCEDURE CopySalesCommentLines@649(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNumber@1002 : Code[20];ToNumber@1003 : Code[20]);
    VAR
      SalesCommentLine@1004 : Record 44;
      SalesCommentLine2@1005 : Record 44;
    BEGIN
      SalesCommentLine.SETRANGE("Document Type",FromDocumentType);
      SalesCommentLine.SETRANGE("No.",FromNumber);
      IF SalesCommentLine.FINDSET THEN
        REPEAT
          SalesCommentLine2 := SalesCommentLine;
          SalesCommentLine2."Document Type" := ToDocumentType;
          SalesCommentLine2."No." := ToNumber;
          SalesCommentLine2.INSERT;
        UNTIL SalesCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE GetNextPurchline@54(VAR PurchLine@1000 : Record 39) : Boolean;
    BEGIN
      IF PurchLine.NEXT = 1 THEN
        EXIT(FALSE);
      IF TempPrepmtPurchLine.FIND('-') THEN BEGIN
        PurchLine := TempPrepmtPurchLine;
        TempPrepmtPurchLine.DELETE;
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CreatePrepmtLines@51(PurchHeader@1003 : Record 38;VAR TempPrepmtPurchLine@1004 : Record 39;VAR TempDocDim@1005 : Record 357;CompleteFunctionality@1009 : Boolean);
    VAR
      GLAcc@1002 : Record 15;
      PurchLine@1000 : Record 39;
      DocDim@1007 : Record 357;
      TempExtTextLine@1011 : TEMPORARY Record 280;
      DimMgt@1006 : Codeunit 408;
      TransferExtText@1012 : Codeunit 378;
      NextLineNo@1001 : Integer;
      Fraction@1008 : Decimal;
      VATDifference@1015 : Decimal;
      TempLineFound@1010 : Boolean;
      PrePmtTestRun@1014 : Boolean;
    BEGIN
      GetGLSetup;
      WITH PurchLine DO BEGIN
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        IF NOT FIND('+') THEN
          EXIT;
        NextLineNo := "Line No." + 10000;
        SETFILTER(Quantity,'>0');
        SETFILTER("Qty. to Invoice",'>0');
        IF FIND('-') THEN
          REPEAT
            IF CompleteFunctionality THEN BEGIN
              IF PurchHeader."Document Type" <> PurchHeader."Document Type"::Invoice THEN BEGIN
                IF NOT PurchHeader.Receive AND ("Qty. to Invoice" = Quantity - "Quantity Invoiced") THEN
                  Fraction := ("Qty. Rcd. Not Invoiced" + "Quantity Invoiced") / Quantity
                ELSE
                  Fraction := ("Qty. to Invoice" + "Quantity Invoiced") / Quantity;

                IF (PurchHeader.Receive = FALSE) AND (PurchHeader.Invoice = TRUE) THEN
                  VALIDATE("Qty. to Receive",0);

                CASE TRUE OF
                  ("Prepmt Amt to Deduct" <> 0) AND
                  (ROUND(Fraction * "Line Amount",Currency."Amount Rounding Precision") < "Prepmt Amt to Deduct"):
                    FIELDERROR(
                      "Prepmt Amt to Deduct",
                      STRSUBSTNO(
                        Text047,
                        ROUND(Fraction * "Line Amount",Currency."Amount Rounding Precision")));
                  ("Prepmt. Amt. Inv." <> 0) AND
                  (ROUND((1 - Fraction) * "Line Amount",Currency."Amount Rounding Precision") <
                   ROUND(
                     ROUND(
                       ROUND("Direct Unit Cost" * (Quantity - "Quantity Invoiced" - "Qty. to Invoice"),
                         Currency."Amount Rounding Precision") *
                       (1 - "Line Discount %" / 100),Currency."Amount Rounding Precision") *
                     "Prepayment %" / 100,Currency."Amount Rounding Precision")):
                    FIELDERROR(
                      "Prepmt Amt to Deduct",
                      STRSUBSTNO(
                        Text048,
                        ROUND(
                          "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" -
                          (1 - Fraction) * "Line Amount",Currency."Amount Rounding Precision")));
                END;
              END ELSE
                IF NOT PrePmtTestRun THEN BEGIN
                  TestGetRcptPPmtAmtToDeduct(PurchHeader,PurchLine);
                  PrePmtTestRun := TRUE;
                END;
            END;

            IF "Prepmt Amt to Deduct" <> 0 THEN BEGIN
              IF ("Gen. Bus. Posting Group" <> GenPostingSetup."Gen. Bus. Posting Group") OR
                 ("Gen. Prod. Posting Group" <> GenPostingSetup."Gen. Prod. Posting Group")
              THEN BEGIN
                GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
                GenPostingSetup.TESTFIELD("Purch. Prepayments Account");
              END;
              GLAcc.GET(GenPostingSetup."Purch. Prepayments Account");
              TempLineFound := FALSE;
              IF PurchHeader."Compress Prepayment" THEN BEGIN
                TempPrepmtPurchLine.SETRANGE("No.",GLAcc."No.");
                IF TempPrepmtPurchLine.FIND('-') THEN
                  TempLineFound := DocDimMatch(PurchLine,TempPrepmtPurchLine."Line No.",TempDocDim);
                TempPrepmtPurchLine.SETRANGE("No.");
              END;
              IF TempLineFound THEN BEGIN
                IF PurchHeader."Currency Code" <> '' THEN BEGIN
                  TempPrePayDeductLCYPurchLine := PurchLine;
                  TempPrePayDeductLCYPurchLine."Prepmt. Amount Inv. (LCY)" :=
                    ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                      PurchHeader."Posting Date",
                      PurchHeader."Currency Code",
                      TempPrepmtPurchLine."Direct Unit Cost" + "Prepmt Amt to Deduct",
                      PurchHeader."Currency Factor")) -
                    ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                      PurchHeader."Posting Date",
                      PurchHeader."Currency Code",
                      TempPrepmtPurchLine."Direct Unit Cost",
                      PurchHeader."Currency Factor"));
                  TempPrePayDeductLCYPurchLine.INSERT;
                END;
                VATDifference := TempPrepmtPurchLine."VAT Difference";
                TempPrepmtPurchLine.VALIDATE(
                  "Direct Unit Cost",TempPrepmtPurchLine."Direct Unit Cost" + "Prepmt Amt to Deduct");
                TempPrepmtPurchLine.VALIDATE("VAT Difference",VATDifference - "Prepmt VAT Diff. to Deduct");
                TempPrepmtPurchLine.MODIFY;
              END ELSE BEGIN
                TempPrepmtPurchLine.INIT;
                TempPrepmtPurchLine."Document Type" := PurchHeader."Document Type";
                TempPrepmtPurchLine."Document No." := PurchHeader."No.";
                TempPrepmtPurchLine."Line No." := 0;
                TempPrepmtPurchLine."System-Created Entry" := TRUE;
                IF CompleteFunctionality THEN
                  TempPrepmtPurchLine.VALIDATE(Type,TempPrepmtPurchLine.Type::"G/L Account")
                ELSE
                  TempPrepmtPurchLine.Type := TempPrepmtPurchLine.Type::"G/L Account";
                TempPrepmtPurchLine.VALIDATE("No.",GenPostingSetup."Purch. Prepayments Account");
                TempPrepmtPurchLine.VALIDATE(Quantity,-1);
                TempPrepmtPurchLine."Qty. to Receive" := TempPrepmtPurchLine.Quantity;
                TempPrepmtPurchLine."Qty. to Invoice" := TempPrepmtPurchLine.Quantity;
                IF PurchHeader."Currency Code" <> '' THEN BEGIN
                  TempPrePayDeductLCYPurchLine := PurchLine;
                  TempPrePayDeductLCYPurchLine."Prepmt. Amount Inv. (LCY)" :=
                    ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                      PurchHeader."Posting Date",
                      PurchHeader."Currency Code",
                      "Prepmt Amt to Deduct",
                      PurchHeader."Currency Factor"));
                  TempPrePayDeductLCYPurchLine.INSERT;
                END;
                TempPrepmtPurchLine.VALIDATE("Direct Unit Cost","Prepmt Amt to Deduct");
                TempPrepmtPurchLine.VALIDATE("VAT Difference",-"Prepmt VAT Diff. to Deduct");
                TempPrepmtPurchLine."Prepayment Line" := TRUE;
                TempPrepmtPurchLine."Line No." := NextLineNo;
                NextLineNo := NextLineNo + 10000;
                DocDim.SETRANGE("Table ID",DATABASE::"Purchase Line");
                DocDim.SETRANGE("Document Type","Document Type");
                DocDim.SETRANGE("Document No.","Document No.");
                DocDim.SETRANGE("Line No.","Line No.");
                IF DocDim.FIND('-') THEN
                  REPEAT
                    TempDocDim := DocDim;
                    TempDocDim."Line No." := TempPrepmtPurchLine."Line No.";
                    TempDocDim.INSERT;
                    IF TempDocDim."Dimension Code" = GLSetup."Global Dimension 1 Code" THEN
                      TempPrepmtPurchLine."Shortcut Dimension 1 Code" := TempDocDim."Dimension Value Code";
                    IF TempDocDim."Dimension Code" = GLSetup."Global Dimension 2 Code" THEN
                      TempPrepmtPurchLine."Shortcut Dimension 2 Code" := TempDocDim."Dimension Value Code";
                  UNTIL DocDim.NEXT = 0;
                TempPrepmtPurchLine.INSERT;
                TransferExtText.PrepmtGetAnyExtText(
                  TempPrepmtPurchLine."No.",DATABASE::"Purch. Inv. Line",
                  PurchHeader."Document Date",PurchHeader."Language Code",TempExtTextLine);
                IF TempExtTextLine.FIND('-') THEN
                  REPEAT
                    TempPrepmtPurchLine.INIT;
                    TempPrepmtPurchLine.Description := TempExtTextLine.Text;
                    TempPrepmtPurchLine."System-Created Entry" := TRUE;
                    TempPrepmtPurchLine."Prepayment Line" := TRUE;
                    TempPrepmtPurchLine."Line No." := NextLineNo;
                    NextLineNo := NextLineNo + 10000;
                    TempPrepmtPurchLine.INSERT;
                  UNTIL TempExtTextLine.NEXT = 0;

              END;
            END;
          UNTIL NEXT = 0
      END;
    END;

    PROCEDURE MergePurchLines@50(PurchHeader@1000000004 : Record 38;VAR PurchLine@1000 : Record 39;VAR PurchLine2@1000000002 : Record 39;VAR MergedPurchLine@1000000003 : Record 39);
    BEGIN
      WITH PurchLine DO BEGIN
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        IF FIND('-') THEN
          REPEAT
            MergedPurchLine := PurchLine;
            MergedPurchLine.INSERT;
          UNTIL NEXT = 0;
      END;
      WITH PurchLine2 DO BEGIN
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        IF FIND('-') THEN
          REPEAT
            MergedPurchLine := PurchLine2;
            MergedPurchLine.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE DocDimMatch@53(PurchLine@1000 : Record 39;LineNo2@1001 : Integer;VAR TempDocDim@1002 : Record 357) : Boolean;
    VAR
      DocDim@1003 : Record 357;
      Found@1004 : Boolean;
      Found2@1005 : Boolean;
    BEGIN
      WITH DocDim DO BEGIN
        SETRANGE("Table ID",DATABASE::"Purchase Line");
        SETRANGE("Document Type",PurchLine."Document Type");
        SETRANGE("Document No.",PurchLine."Document No.");
        SETRANGE("Line No.",PurchLine."Line No.");
        IF NOT FIND('-') THEN
          CLEAR(DocDim);
      END;
      WITH TempDocDim DO BEGIN
        SETRANGE("Table ID",DATABASE::"Purchase Line");
        SETRANGE("Document Type",PurchLine."Document Type");
        SETRANGE("Document No.",PurchLine."Document No.");
        SETRANGE("Line No.",LineNo2);
        IF NOT FIND('-') THEN
          CLEAR(TempDocDim);
      END;

      WHILE (DocDim."Dimension Code" = TempDocDim."Dimension Code") AND
            (DocDim."Dimension Value Code" = TempDocDim."Dimension Value Code") AND
            (DocDim."Dimension Code" <> '')
      DO BEGIN
        IF NOT DocDim.FIND('>') THEN
          CLEAR(DocDim);
        IF NOT TempDocDim.FIND('>') THEN
          CLEAR(TempDocDim);
      END;

      TempDocDim.RESET;
      EXIT((DocDim."Dimension Code" = TempDocDim."Dimension Code") AND
          (DocDim."Dimension Value Code" = TempDocDim."Dimension Value Code"));
    END;

    LOCAL PROCEDURE InsertICGenJnlLine@150(PurchLine@1000 : Record 39);
    VAR
      ICGLAccount@1001 : Record 410;
      Cust@1002 : Record 18;
      Currency@1003 : Record 4;
      ICPartner@1004 : Record 413;
    BEGIN
      PurchHeader.TESTFIELD("Buy-from IC Partner Code",'');
      PurchHeader.TESTFIELD("Pay-to IC Partner Code",'');
      PurchLine.TESTFIELD("IC Partner Ref. Type",PurchLine."IC Partner Ref. Type"::"G/L Account");
      ICGLAccount.GET(PurchLine."IC Partner Reference");
      ICGenJnlLineNo := ICGenJnlLineNo + 1;
      TempICGenJnlLine.INIT;
      TempICGenJnlLine."Line No." := ICGenJnlLineNo;
      TempICGenJnlLine.VALIDATE("Posting Date",PurchHeader."Posting Date");
      TempICGenJnlLine."Document Date" := PurchHeader."Document Date";
      TempICGenJnlLine.Description := PurchHeader."Posting Description";
      TempICGenJnlLine."Reason Code" := PurchHeader."Reason Code";
      TempICGenJnlLine."Document Type" := GenJnlLineDocType;
      TempICGenJnlLine."Document No." := GenJnlLineDocNo;
      TempICGenJnlLine."External Document No." := GenJnlLineExtDocNo;
      TempICGenJnlLine.VALIDATE("Account Type",TempICGenJnlLine."Account Type"::"IC Partner");
      TempICGenJnlLine.VALIDATE("Account No.",PurchLine."IC Partner Code");
      TempICGenJnlLine."Source Currency Code" := PurchHeader."Currency Code";
      TempICGenJnlLine."Source Currency Amount" := TempICGenJnlLine.Amount;
      TempICGenJnlLine.Correction := PurchHeader.Correction;
      TempICGenJnlLine."Shortcut Dimension 1 Code" := PurchLine."Shortcut Dimension 1 Code";
      TempICGenJnlLine."Shortcut Dimension 2 Code" := PurchLine."Shortcut Dimension 2 Code";
      TempICGenJnlLine."Source Code" := SrcCode;
      TempICGenJnlLine."Country/Region Code" := PurchHeader."VAT Country/Region Code";
      TempICGenJnlLine."Source Type" := GenJnlLine."Source Type"::Vendor;
      TempICGenJnlLine."Source No." := PurchHeader."Pay-to Vendor No.";
      TempICGenJnlLine."Posting No. Series" := PurchHeader."Posting No. Series";
      TempICGenJnlLine.VALIDATE("Bal. Account Type",TempICGenJnlLine."Bal. Account Type"::"G/L Account");
      TempICGenJnlLine.VALIDATE("Bal. Account No.",PurchLine."No.");
      Cust.SETRANGE("IC Partner Code",PurchLine."IC Partner Code");
      IF Cust.FINDFIRST THEN BEGIN
        TempICGenJnlLine.VALIDATE("Bal. Gen. Bus. Posting Group",Cust."Gen. Bus. Posting Group");
        TempICGenJnlLine.VALIDATE("Bal. VAT Bus. Posting Group",Cust."VAT Bus. Posting Group");
      END;
      TempICGenJnlLine."IC Partner Code" := PurchLine."IC Partner Code";
      TempICGenJnlLine."IC Partner G/L Acc. No." := PurchLine."IC Partner Reference";
      TempICGenJnlLine."IC Direction" := TempICGenJnlLine."IC Direction"::Outgoing;
      ICPartner.GET(PurchLine."IC Partner Code");
      IF ICPartner."Cost Distribution in LCY" AND (PurchLine."Currency Code" <> '') THEN BEGIN
        TempICGenJnlLine."Currency Code" := '';
        TempICGenJnlLine."Currency Factor" := 0;
        Currency.GET(PurchLine."Currency Code");
        IF PurchHeader."Document Type" IN
           [PurchHeader."Document Type"::"Return Order",PurchHeader."Document Type"::"Credit Memo"]
        THEN
          TempICGenJnlLine.Amount :=
            -ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                PurchHeader."Posting Date",PurchLine."Currency Code",
                PurchLine.Amount,PurchHeader."Currency Factor"))
        ELSE
          TempICGenJnlLine.Amount :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                PurchHeader."Posting Date",PurchLine."Currency Code",
                PurchLine.Amount,PurchHeader."Currency Factor"));
      END ELSE BEGIN
        Currency.InitRoundingPrecision;
        TempICGenJnlLine."Currency Code" := PurchHeader."Currency Code";
        TempICGenJnlLine."Currency Factor" := PurchHeader."Currency Factor";
        IF PurchHeader."Document Type" IN
          [PurchHeader."Document Type"::"Return Order",PurchHeader."Document Type"::"Credit Memo"]
        THEN
          TempICGenJnlLine.Amount := -PurchLine.Amount
        ELSE
          TempICGenJnlLine.Amount := PurchLine.Amount;
      END;
      IF TempICGenJnlLine."Bal. VAT %" <> 0 THEN
        TempICGenJnlLine.Amount := ROUND(TempICGenJnlLine.Amount * (1 + TempICGenJnlLine."Bal. VAT %" / 100),
                                               Currency."Amount Rounding Precision");
      TempICGenJnlLine.VALIDATE(Amount);
      TempICGenJnlLine.INSERT;

      TempDocDim.RESET;
      TempDocDim.SETRANGE("Table ID",DATABASE::"Purchase Line");
      TempDocDim.SETRANGE("Line No.",PurchLine."Line No.");
      IF TempDocDim.FIND('-') THEN
        REPEAT
          TempICJnlLineDim."Table ID" := DATABASE::"Gen. Journal Line";
          TempICJnlLineDim."Journal Line No." := ICGenJnlLineNo;
          TempICJnlLineDim."Dimension Code" := TempDocDim."Dimension Code";
          TempICJnlLineDim."Dimension Value Code" := TempDocDim."Dimension Value Code";
          TempICJnlLineDim.INSERT;
        UNTIL TempDocDim.NEXT = 0;
    END;

    LOCAL PROCEDURE PostICGenJnl@151();
    VAR
      ICTransactionNo@1000 : Integer;
    BEGIN
      TempICGenJnlLine.RESET;
      IF TempICGenJnlLine.FIND('-') THEN
        REPEAT
          TempICJnlLineDim.RESET;
          TempICJnlLineDim.SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
          TempICJnlLineDim.SETRANGE("Journal Line No.",TempICGenJnlLine."Line No.");
          ICTransactionNo := ICInOutBoxMgt.CreateOutboxJnlTransaction(TempICGenJnlLine,FALSE);
          ICInOutBoxMgt.CreateOutboxJnlLine(ICTransactionNo,1,TempICGenJnlLine,TempICJnlLineDim);
          GenJnlPostLine.RunWithCheck(TempICGenJnlLine,TempICJnlLineDim);
        UNTIL TempICGenJnlLine.NEXT = 0;
    END;

    PROCEDURE TestGetRcptPPmtAmtToDeduct@57(PurchHeader@1001 : Record 38;PurchLine@1000 : Record 39);
    VAR
      TempPurchLine2@1008 : Record 39;
      TempPurchLine3@1007 : TEMPORARY Record 39;
      OrderNo@1006 : Code[20];
      TotalPrePmtAmtToDeduct@1005 : Decimal;
      QtyToInv@1004 : Decimal;
      LineNo@1002 : Decimal;
    BEGIN
      TempPurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      TempPurchLine.SETRANGE("Document No.",PurchHeader."No.");
      IF NOT TempPurchLine.FIND('+') THEN
        EXIT;
      TempPurchLine.SETFILTER(Quantity,'>0');
      TempPurchLine.SETFILTER("Qty. to Invoice",'>0');
      TempPurchLine.SETFILTER("Receipt No.",'<>%1','');

      IF TempPurchLine.FINDSET THEN
        REPEAT
          TempPurchLine3 := TempPurchLine;
          TempPurchLine3.INSERT;
        UNTIL TempPurchLine.NEXT = 0;

      IF TempPurchLine.FINDSET THEN
        REPEAT
          IF PurchRcptLine.GET(TempPurchLine."Receipt No.",TempPurchLine."Receipt Line No.") THEN BEGIN
            TempPurchLine2.GET(
              TempPurchLine."Document Type"::Order,
              PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");
            OrderNo := PurchRcptLine."Order No.";
            LineNo := PurchRcptLine."Line No.";

            IF TempPurchLine3.FINDSET THEN
              REPEAT
                IF PurchRcptLine.GET(TempPurchLine3."Receipt No.",TempPurchLine3."Receipt Line No.") THEN
                  IF (PurchRcptLine."Order No." = OrderNo) AND (PurchRcptLine."Line No." = LineNo)  THEN BEGIN
                    QtyToInv := QtyToInv + TempPurchLine3."Qty. to Invoice";
                    TotalPrePmtAmtToDeduct := TotalPrePmtAmtToDeduct + TempPurchLine3."Prepmt Amt to Deduct";
                  END;
              UNTIL TempPurchLine3.NEXT = 0;
              CASE TRUE OF
                (TotalPrePmtAmtToDeduct > TempPurchLine2."Prepmt. Amt. Inv." - TempPurchLine2."Prepmt Amt Deducted"):
                  ERROR(
                    STRSUBSTNO(Text050,
                      TempPurchLine2.FIELDCAPTION("Prepmt Amt to Deduct"),
                      ROUND(
                        TempPurchLine2."Prepmt. Amt. Inv." - TempPurchLine2."Prepmt Amt Deducted",
                        GLSetup."Amount Rounding Precision")));
                (QtyToInv = TempPurchLine2.Quantity - TempPurchLine2."Quantity Invoiced"):
                  IF NOT (TotalPrePmtAmtToDeduct = TempPurchLine2."Prepmt. Amt. Inv." - TempPurchLine2."Prepmt Amt Deducted") THEN
                    ERROR(
                      STRSUBSTNO(Text051,
                        TempPurchLine2.FIELDCAPTION("Prepmt Amt to Deduct"),
                        ROUND(
                          TempPurchLine2."Prepmt. Amt. Inv." - TempPurchLine2."Prepmt Amt Deducted",
                          GLSetup."Amount Rounding Precision")));
              END;
              TotalPrePmtAmtToDeduct := 0;
              QtyToInv := 0;
          END;
        UNTIL TempPurchLine.NEXT = 0;
    END;

    PROCEDURE ArchiveUnpostedOrder@56();
    VAR
      ArchiveManagement@1000 : Codeunit 5063;
    BEGIN
      IF NOT PurchSetup."Archive Quotes and Orders" THEN
        EXIT;
      IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::"Return Order"]) THEN
        EXIT;
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETFILTER(Quantity,'<>0');
      IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN BEGIN
        PurchLine.SETRANGE("Quantity Received",0);
        PurchLine.SETFILTER("Qty. to Receive",'<>0');
      END ELSE BEGIN
        PurchLine.SETRANGE("Return Qty. Shipped",0);
        PurchLine.SETFILTER("Return Qty. to Ship",'<>0');
      END;
      IF NOT PurchLine.ISEMPTY THEN BEGIN
        ArchiveManagement.ArchPurchDocumentNoConfirm(PurchHeader);
        COMMIT;
      END;
    END;

    PROCEDURE PrepayRealizeGainLoss@58(PurchLine@1000 : Record 39);
    VAR
      TempJnlLineDim@1001 : TEMPORARY Record 356;
      PurchasePostPrepayments@1002 : Codeunit 444;
    BEGIN
      WITH PurchHeader DO BEGIN
        IF (PurchLine."Prepmt. Amount Inv. (LCY)" <> 0) THEN BEGIN
          GenJnlLine.INIT;
          GenJnlLine."Posting Date" := "Posting Date";
          GenJnlLine."Document Date" := "Document Date";
          GenJnlLine.Description := "Posting Description";
          GenJnlLine."Reason Code" := "Reason Code";
          GenJnlLine."Document Type" := GenJnlLineDocType;
          GenJnlLine."Document No." := GenJnlLineDocNo;
          GenJnlLine."External Document No." := GenJnlLineExtDocNo;
          DocDim.SETRANGE("Table ID",DATABASE::"Purchase Line");
          DocDim.SETRANGE("Document Type","Document Type");
          DocDim.SETRANGE("Document No.",PurchLine."Document No.");
          DocDim.SETRANGE("Line No.",PurchLine."Line No.");
          TempJnlLineDim.RESET;
          TempJnlLineDim.DELETEALL;
          DimMgt.CopyDocDimToJnlLineDim(DocDim,TempJnlLineDim);
          GenJnlLine."Shortcut Dimension 1 Code" := PurchLine."Shortcut Dimension 1 Code";
          GenJnlLine."Shortcut Dimension 2 Code" := PurchLine."Shortcut Dimension 2 Code";
          GenJnlLine."Source Code" := SrcCode;
          GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
          GenJnlLine."Source No." := "Pay-to Vendor No.";
          GenJnlLine."Posting No. Series" := "Posting No. Series";
          GenJnlLine."Source Currency Code" := "Currency Code";
          PurchasePostPrepayments.RealizeGainLoss(GenJnlLine,PurchLine);
          GenJnlPostLine.RunWithCheck(GenJnlLine,TempJnlLineDim);
        END;
      END;
    END;

    PROCEDURE PostItemJrnlLineJobConsumption@59(VAR PurchLine@1000 : Record 39;VAR NextReservationEntryNo@1001 : Integer;VAR QtyToBeInvoiced@1002 : Decimal;VAR QtyToBeInvoicedBase@1003 : Decimal;VAR QtyToBeReceived@1004 : Decimal;VAR QtyToBeReceivedBase@1005 : Decimal;VAR CheckApplToItemEntry@1006 : Boolean;VAR TempJnlLineDim@1007 : TEMPORARY Record 356);
    BEGIN
      WITH PurchLine DO BEGIN
        IF ("Job No." <> '') THEN BEGIN
          ItemJnlLine2."Entry Type" := ItemJnlLine2."Entry Type"::"Negative Adjmt.";
          Job.GET("Job No.");
          ItemJnlLine2."Source No." := Job."Bill-to Customer No.";
          ItemJnlLine2."Source Type" := ItemJnlLine2."Source Type"::Customer;
          ItemJnlLine2."Discount Amount" := 0;
          IF "Quantity Received" <> 0 THEN
              GetNextItemLedgEntryNo(ItemJnlLine2);

          IF (QtyToBeReceived <> 0) THEN BEGIN
            // item tracking for consumption
            ReservationEntry2.RESET;
            IF ReservationEntry3.FIND('-') THEN BEGIN
              IF ReservationEntry2.FIND('+') THEN
                NextReservationEntryNo := ReservationEntry2."Entry No." + 1
              ELSE
                NextReservationEntryNo := 1;
              REPEAT
                ReservationEntry2 := ReservationEntry3;
                ReservationEntry2."Entry No." := NextReservationEntryNo;
                IF ReservationEntry2.Positive THEN
                  ReservationEntry2.Positive := FALSE
                ELSE
                  ReservationEntry2.Positive := TRUE;
                ReservationEntry2."Quantity (Base)" := ReservationEntry2."Quantity (Base)" * -1;
                ReservationEntry2."Shipment Date" := ReservationEntry2."Expected Receipt Date";
                ReservationEntry2."Expected Receipt Date" := 0D;
                ReservationEntry2.Quantity := ReservationEntry2.Quantity * -1;
                ReservationEntry2."Qty. to Handle (Base)" := ReservationEntry2."Qty. to Handle (Base)" * -1;
                ReservationEntry2."Qty. to Invoice (Base)" := ReservationEntry2."Qty. to Invoice (Base)" * -1;
                ReservationEntry2.INSERT;
                NextReservationEntryNo := NextReservationEntryNo + 1;
              UNTIL ReservationEntry3.NEXT = 0;
              IF (QtyToBeReceivedBase <> 0) THEN
                IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                  ReservePurchLine.TransferPurchLineToItemJnlLine(PurchLine,ItemJnlLine2,QtyToBeReceivedBase,CheckApplToItemEntry)
                ELSE
                  ReservePurchLine.TransferPurchLineToItemJnlLine(PurchLine,ItemJnlLine2,-QtyToBeReceivedBase,CheckApplToItemEntry);
            END;
          END;

          ItemJnlPostLine.RunWithCheck(ItemJnlLine2,TempJnlLineDim);

          IF (QtyToBeInvoiced <> 0) THEN BEGIN
            JobPostLine.InsertPurchLine(PurchHeader,PurchInvHeader,PurchCrMemoHeader,PurchLine,SrcCode,TempJnlLineDim);
          END;
        END;
      END;
    END;

    PROCEDURE GetNextItemLedgEntryNo@1106000000(VAR ItemJnlLine@1106000000 : Record 83);
    VAR
      ItemLedgEntry@1106000001 : Record 32;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        SETRANGE("Job No.",ItemJnlLine."Job No.");
        SETRANGE("Job Task No.",ItemJnlLine."Job Task No.");
        SETRANGE("Item No.",ItemJnlLine."Item No.");

        SETFILTER("Item Tracking",'<>%1',"Item Tracking"::None);
        IF FINDFIRST THEN BEGIN
          SETRANGE("Entry Type",ItemJnlLine."Entry Type"::"Negative Adjmt.");
          SETRANGE("Serial No.",ItemJnlLine."Serial No.");
          SETRANGE("Lot No.",ItemJnlLine."Lot No.");
          IF FINDFIRST THEN
            ItemJnlLine."Item Shpt. Entry No." := "Entry No.";
          EXIT;
        END;
        SETRANGE("Item Tracking");

        IF FINDSET THEN
          REPEAT
            IF "Entry No." = ItemJnlLine."Item Shpt. Entry No." THEN BEGIN
              NEXT;
              ItemJnlLine."Item Shpt. Entry No." := "Entry No.";
              EXIT;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ItemLedgerEntryExist@7(PurchLine2@1000 : Record 39) : Boolean;
    VAR
      HasItemLedgerEntry@1001 : Boolean;
    BEGIN
      IF PurchHeader.Receive OR PurchHeader.Ship THEN
        // item ledger entry will be created during posting in this transaction
        HasItemLedgerEntry :=
          ((PurchLine2."Qty. to Receive" + PurchLine2."Quantity Received") <> 0) OR
          ((PurchLine2."Qty. to Invoice" + PurchLine2."Quantity Invoiced") <> 0) OR
          ((PurchLine2."Return Qty. to Ship" + PurchLine2."Return Qty. Shipped") <> 0)
      ELSE
        // item ledger entry must already exist
        HasItemLedgerEntry :=
          (PurchLine2."Quantity Received" <> 0) OR
          (PurchLine2."Return Qty. Shipped" <> 0);

      EXIT(HasItemLedgerEntry);
    END;

    PROCEDURE TestPurchEfects@1100010(PurchHeader@1100000 : Record 38;Vend@1100001 : Record 23);
    VAR
      VendLedgEntry@1100003 : Record 25;
      Text1100000@1100005 : TextConst 'ENU=At least one document of %1 No. %2 is closed or in a Payment Order.;ESP=Al menos un documento de %1 n§ %2 est  cerrado o en una Orden de pago.';
      Text1100001@1100006 : TextConst 'ENU=This will avoid the document to be settled.\;ESP=Esto evita que el documento sea liquidado.\';
      Text1100002@1100007 : TextConst 'ENU=The posting process of %3 No. %4 will not settle any document.\;ESP=El registro de %3 n§ %4 no liquidar  ning£n documento.\';
      ShowError@1100004 : Boolean;
      Text1100003@1100008 : TextConst 'ENU=Please remove the lines for the Payment Order before posting.;ESP=Elimine las l¡neas para la Orden de pago antes del registro.';
    BEGIN
      ShowError := FALSE;
      IF PurchHeader."Document Type" = PurchHeader."Document Type"::"Credit Memo" THEN BEGIN
        VendLedgEntry.SETCURRENTKEY("Document No.","Document Type","Vendor No.");
        VendLedgEntry.SETFILTER("Document Type",'%1|%2',VendLedgEntry."Document Type"::Invoice,
          VendLedgEntry."Document Type"::Bill);
        VendLedgEntry.SETFILTER("Document Situation",'<>%1',VendLedgEntry."Document Situation"::" ");
        VendLedgEntry.SETRANGE("Vendor No.",PurchHeader."Pay-to Vendor No.");
        VendLedgEntry.SETRANGE(Open,TRUE);

        IF VendLedgEntry.FIND('-') THEN
          REPEAT
            IF VendLedgEntry."Document Situation" <> VendLedgEntry."Document Situation"::Cartera THEN
              IF NOT ((VendLedgEntry."Document Situation" IN
                [VendLedgEntry."Document Situation"::"Closed Documents",
                VendLedgEntry."Document Situation"::"Closed BG/PO"]) AND
                (VendLedgEntry."Document Status" = VendLedgEntry."Document Status"::Rejected)) THEN
                  ShowError := TRUE;
          UNTIL VendLedgEntry.NEXT = 0;

        IF ShowError THEN
          ERROR(Text1100000 +
            Text1100001 +
            Text1100002 +
            Text1100003,
            FORMAT(VendLedgEntry."Document Type"),
            FORMAT(VendLedgEntry."Document No."),
            FORMAT(PurchHeader."Document Type"),
            FORMAT(PurchHeader."No."));
      END;
    END;

    LOCAL PROCEDURE _LineaRetencionISR@1100253000(pwTipoDocumento@1100253000 : Integer;pwNumDocumento@1100253001 : Code[20]);
    VAR
      lwTotalBase@1100253002 : Decimal;
      lwRetencion@1100253005 : Decimal;
      lwNumLinea@1100253004 : Integer;
      lrLin@1100253003 : Record 81;
      lrLibro@1100253006 : Record 80;
      lrCab@1100253007 : Record 38;
    BEGIN
      // _LineaRetencionISR

      IF Vend."% IRPF" = 0 THEN
        EXIT;

      //. Hay que buscar la base de la factura

      lwTotalBase := 0;

      TempVATAmountLine.RESET;
      IF TempVATAmountLine.FINDSET THEN
      BEGIN
        REPEAT
          lwTotalBase += TempVATAmountLine."VAT+EC Base";
        UNTIL TempVATAmountLine.NEXT = 0;
      END;

      //. Creamos un diario con el importe de la retencion

      IF lwTotalBase <> 0 THEN
      BEGIN
        //. Calculamos la retencion

        lwRetencion := ROUND(lwTotalBase * Vend."% IRPF" / 100, Currency."Invoice Rounding Precision");

        //. Buscamos el grupo contable proveedor

        VendPostingGr.GET(Vend."Vendor Posting Group");
        VendPostingGr.TESTFIELD("Cta. IRPF");

        lrCab.GET(pwTipoDocumento, pwNumDocumento);

        //. Buscamos el libro diario de pagos
        lrLibro.RESET;
        lrLibro.SETRANGE(Type, lrLibro.Type::Payments);
        lrLibro.FINDFIRST;

        //. Buscar la ultima linea de diario

        lwNumLinea := 10000;

        lrLin.RESET;
        lrLin.SETRANGE("Journal Template Name", lrLibro.Name);
        lrLin.SETRANGE("Journal Batch Name"   , 'GENERICO');
        IF lrLin.FINDLAST THEN
          lwNumLinea := lrLin."Line No." + 10000;

        lrLin.INIT;
        lrLin.VALIDATE("Journal Template Name", lrLibro.Name);
        lrLin.VALIDATE("Journal Batch Name"   , 'GENERICO');
        lrLin.VALIDATE("Line No."             , lwNumLinea);
        lrLin.VALIDATE("Posting Date"         , lrCab."Posting Date");
        lrLin.VALIDATE("Account Type"         , lrLin."Account Type"::Vendor);
        lrLin.VALIDATE("Account No."          , Vend."No.");
        lrLin.VALIDATE("Document Type"        , lrLin."Document Type"::Payment);
        lrLin.VALIDATE("Document No."         , 'ISR-' + lrCab."No.");
        lrLin.VALIDATE("Debit Amount"         , lwRetencion);

        lrLin."Applies-to Doc. Type" := lrCab."Document Type";
        lrLin."Applies-to Doc. No."  := lrCab."No.";
        lrLin.INSERT;

        lwNumLinea := lrLin."Line No." + 10000;

        lrLin.INIT;
        lrLin.VALIDATE("Journal Template Name", lrLibro.Name);
        lrLin.VALIDATE("Journal Batch Name"   , 'GENERICO');
        lrLin.VALIDATE("Line No."             , lwNumLinea);
        lrLin.VALIDATE("Posting Date"         , lrCab."Posting Date");
        lrLin.VALIDATE("Account Type"         , lrLin."Account Type"::"G/L Account");
        lrLin.VALIDATE("Account No."          , VendPostingGr."Cta. IRPF");
        lrLin.VALIDATE("Document Type"        , lrLin."Document Type"::Payment);
        lrLin.VALIDATE("Document No."         , 'ISR-' + lrCab."No.");
        lrLin.VALIDATE("Credit Amount"         , lwRetencion);
        lrLin.INSERT;

        MESSAGE(Text50002, lrLin."Journal Template Name", lrLin."Journal Batch Name");
      END;
    END;

    LOCAL PROCEDURE _LineasRetencionITBIS@1100253001(pwTipoDocumento@1100253001 : Integer;pwNumDocumento@1100253000 : Code[20]);
    VAR
      lrLin@1100253002 : Record 81;
      lrCab@1100253004 : Record 38;
      lrLibro@1100253005 : Record 80;
      lwNumLinea@1100253003 : Integer;
      lwImporte@1100217000 : Decimal;
    BEGIN
      // _LineasRetencionITBIS

      IF NOT Vend."Retiene ITBIS" THEN
        EXIT;

      //. Buscamos el grupo contable proveedor

      VendPostingGr.GET(Vend."Vendor Posting Group");
      VendPostingGr.TESTFIELD("Cta. Retencion ITBIS");

      lrCab.GET(pwTipoDocumento, pwNumDocumento);

      //. Buscamos las lineas de buffer que aplican ITBIS para crear las lineas en negativo

      TempVATAmountLine.RESET;
      TempVATAmountLine.SETFILTER("VAT Amount", '<>%1', 0);
      IF TempVATAmountLine.FINDSET THEN
      BEGIN
        //. Buscamos el libro diario de pagos
        lrLibro.RESET;
        lrLibro.SETRANGE(Type, lrLibro.Type::Payments);
        lrLibro.FINDFIRST;

        //. Buscar la ultima linea de diario

        lwNumLinea := 10000;

        lrLin.RESET;
        lrLin.SETRANGE("Journal Template Name", lrLibro.Name);
        lrLin.SETRANGE("Journal Batch Name"   , 'GENERICO');
        IF lrLin.FINDLAST THEN
          lwNumLinea := lrLin."Line No." + 10000;

        REPEAT
          lwNumLinea += 10000;

          lwImporte := ROUND(TempVATAmountLine."VAT Amount" * Vend."% Retencion ITBIS" / 100); //+$018

          lrLin.INIT;
          lrLin.VALIDATE("Journal Template Name", lrLibro.Name);
          lrLin.VALIDATE("Journal Batch Name"   , 'GENERICO');
          lrLin.VALIDATE("Line No."             , lwNumLinea);
          lrLin.VALIDATE("Posting Date"         , lrCab."Posting Date");
          lrLin.VALIDATE("Account Type"         , lrLin."Account Type"::Vendor);
          lrLin.VALIDATE("Account No."          , Vend."No.");
          lrLin.VALIDATE("Document Type"        , lrLin."Document Type"::Payment);
          lrLin.VALIDATE("Document No."         , 'ITBIS-' + lrCab."No.");
          //-$018lrLin.VALIDATE("Debit Amount"         , TempVATAmountLine."VAT Amount");
          lrLin.VALIDATE("Debit Amount"         , lwImporte); //+$018

          lrLin."Applies-to Doc. Type" := lrCab."Document Type";
          lrLin."Applies-to Doc. No."  := lrCab."No.";
          lrLin.INSERT;

          lwNumLinea := lrLin."Line No." + 10000;

          lrLin.INIT;
          lrLin.VALIDATE("Journal Template Name", lrLibro.Name);
          lrLin.VALIDATE("Journal Batch Name"   , 'GENERICO');
          lrLin.VALIDATE("Line No."             , lwNumLinea);
          lrLin.VALIDATE("Posting Date"         , lrCab."Posting Date");
          lrLin.VALIDATE("Account Type"         , lrLin."Account Type"::"G/L Account");
          lrLin.VALIDATE("Account No."          , VendPostingGr."Cta. Retencion ITBIS");
          lrLin.VALIDATE("Document Type"        , lrLin."Document Type"::Payment);
          lrLin.VALIDATE("Document No."         , 'ITBIS-' + lrCab."No.");
          //-$018lrLin.VALIDATE("Credit Amount"         , TempVATAmountLine."VAT Amount");
          lrLin.VALIDATE("Credit Amount"         , lwImporte); //+$018
          lrLin.INSERT;
        UNTIL TempVATAmountLine.NEXT = 0;

        //. Mostramos el mensaje si el proveedor no retiene IRPF, en caso contrario ya se lo hemos mostrado antes
        IF Vend."% IRPF" = 0 THEN
          MESSAGE(Text50002, lrLin."Journal Template Name", lrLin."Journal Batch Name");
      END;
      TempVATAmountLine.SETRANGE("VAT Amount");
    END;

    BEGIN
    {
      // INCOMING

      $001 Incluir la comprobacion del Departamento (tanto en cabecera como en las lineas) si asi se ha parametrizado
         en la tabla de parametros agencia

      $002 Rellenar los campos Regimen y "Tipo de clave" en la tabla temporal de lineas usada para registrar la factura

      $003 Rellenar los campos Regimen y "Tipo de clave" en la tabla Lin diario general para registrar contabilidad

      $004 Rellenar el campo "Tipo de clave" en lin diario general para registrar el movimiento proveedor

      $005 AJS 02.01.2007, Comprobantes fiscales
         Rellenar los campos "Cod. Grupo NCF" y "Comprobante Fiscal" del diario general para traspasar a Mov. Proveedor

      $006 AJS 07.02.2007, Declaracion ITBIS
         Rellenar el campo GenJnlLine."Tipo factura compra" del diario general para traspasar a Mov. Proveedor

      $007 AJS 07.02.2007, Texto de registro
         No quieren que se cambie el Texto de registro cuando se rellena el campo PurchHeader."Corrected Invoice No."

      $008 AJS 27.02.2007, Escaneo documentos
         No se puede registrar una factura o abono sin que tenga su codigo de barras

      $009 AJS 28.02.2007, Escaneo documentos
         Al registrar la factura hay que mover el documento a la carpeta correspondiente por a¤o y mes

      $010 AJS 18.04.2007, Comprobantes fiscales
         Comprobar la correccion del comprobante fiscal, el codigo esta en codeunit 50005

      $011 AJS 18.04.2007, Comprobantes fiscales
         Buscar si el movimiento proveedor esta duplicado

      $012 AJS 05.05.2007, Escaneo documentos
         Si se trata de una anulacion no hay que buscar PDF

      $013 AJS 02.09.2007, Escaneo documentos
         Hay que intentar mover los ficheros antes de registrar la factura para evitar que se registre una factura y
         no se mueva el fichero

      $014 JPT 01/02/08 Gestion Documental FTP GOC

      $015 JPT 11/03/08 Escaneo documentos
        Para evitar que se registre y no se mueva el fichero, o viceversa primero insertamos un registro
        de comentarios factura compra que una vez terminado el proceso y eliminamos. As¡ aseguramos la integridad

      $016 AJS 01022012 Retencion ISR/IRPF, crear lineas de diario para descontar la retencion del proveedor

      $017 AJS 20082012 Eliminar la obligacion del PDF en el registro de los pedidos de compra

      $018 AJS 27112012 En algunos casos la retencion de ITBIS no es por el 100 % de los impuestos

      $019 AJS 26082013 Elimino las referencias al campo Tipo de clave porque es obsoleto

      <changelog>
        <add id="es0001" dev="VGARCA" date="2004-08-27" area="AUTOINV" request="es-start-40"
        releaseversion="ES4.00">Automatic Invoices and Credit Memos</add>
        <add id="es0002" dev="VGARCA" date="2004-08-27" area="DOCNUM" request="es-start-40"
        releaseversion="ES4.00">Document Numbering</add>
        <add id="es0003" dev="VGARCA" date="2004-08-27" area="EQUIVCHRG" request="es-start-40"
        releaseversion="ES4.00">Equivalence Charge</add>
        <add id="es0004" dev="VGARCA" date="2004-08-27" area="PAYDISC" request="es-start-40"
        releaseversion="ES4.00">Payment Discount</add>
        <add id="es0005" dev="VGARCA" date="2004-08-27" area="ROUNDING" request="es-start-40"
        releaseversion="ES4.00">Rounding</add>
        <add id="es0006" dev="VGARCA" date="2004-08-27" area="SHIPMENT" request="es-start-40"
        releaseversion="ES4.00">Shipment Method</add>
        <add id="es0007" dev="VGARCA" date="2004-08-27" area="TRNSMETH" request="es-start-40"
        releaseversion="ES4.00">Transportation Method, Port/Airport</add>
        <add id="es0008" dev="VGARCA" date="2004-08-27" area="VATECCALC" request="es-start-40"
        releaseversion="ES4.00">VAT+EC % calculation</add>
        <add id="es0009" dev="VGARCA" date="2004-08-27" area="CARTERA" request="es-start-40"
        releaseversion="ES4.00">Cartera Add-On (Spanish)</add>
        <add id="es0010" dev="VGARCA" date="2005-06-20" area="CORRINV" feature="PS-SE-6265"
        releaseversion="ES4.00.A">Corrective Invoices</add>
        <add id="es0011" dev="VGARCA" date="2005-06-20" area="MISCELL" feature="PS-SE-7227"
        releaseversion="ES4.00.A">Miscellaneous</add>
        <change id="es0012" dev="VGARCA" date="2005-06-20" area="CARTERA" feature="PS-SE-9018"
        releaseversion="ES4.00.A" baseversion="ES4.00">Cartera Add-On (Spanish)</change>
        <change id="es0013" dev="VGARCA" date="2005-06-20" area="CARTERA" feature="PS-SE-9030"
        releaseversion="ES4.00.A" baseversion="ES4.00">Cartera Add-On (Spanish)</change>
        <change id="es0014" dev="VGARCA" date="2005-11-01" area="PAYDISC" feature="PS-SE-12551"
        releaseversion="ES4.00.02" baseversion="ES4.00.A">Payment Discount</change>
        <change id="es0015" dev="VGARCA" date="2005-10-19" area="CORRINV" feature="PS-SE-10846"
        releaseversion="ES4.00.02" baseversion="ES4.00.A">Corrective Invoices</change>
        <change id="es0016" dev="VGARCA" date="2005-10-21" area="MISCELL" feature="PS-SE-12120"
        releaseversion="ES4.00.02" baseversion="ES4.00.A">Development Standards</change>
        <change id="es0017" dev="VGARCA" date="2006-03-25" area="CARTERA" feature="PS15836"
        releaseversion="ES4.00.03" baseversion="ES4.00.02">Cartera Add-On (Spanish)</change>
        <change id="es0018" dev="VGARCA" date="2006-09-15" area="CARTERA" feature="NAVCORS4835"
        releaseversion="ES5.00" baseversion="ES4.00.03">Cannot create Credit Memo </change>
        <change id="es0019" dev="VGARCA" date="2006-06-07" area="CARTERA" feature="NAVCORS4753"
        releaseversion="ES5.00" baseversion="ES5.00">Spelling errors </change>
        <change id="es0020" dev="VGARCA" date="2007-09-06" area="CARTERA" feature="NAVCORS13530"
        releaseversion="ES6.00" baseversion="ES5.00">Cannot created Credit Memo with apply to oldest method </change>
        <change id="es0021" dev="mnommens" date="2008-06-26" area="VATECCALC" feature="NAVCORS25237"
        baseversion="ES5.00" releaseversion="ES6.00">Prepayments ES changes</change>
        <add id="es0022" dev="tmarti" date="2008-07-22" area="INTRASTAT" feature="NAVCORS26242"
        releaseversion="ES6.00">C/Track - consolidation of application areas</add>
        <remove id="es0023" dev="TMARTI" date="2008-07-22" area="SHIPMENT"
          baseversion="ES4.00" releaseversion="ES6.00"  feature="NAVCORS26242">
          C/Track - consolidation of application areas
        </remove>
        <remove id="es0024" dev="TMARTI" date="2008-07-24" area="MISCELL"
          baseversion="ES4.00.02" releaseversion="ES6.00"  feature="NAVCORS26647">
          MISCELL - 129 out of 190+ objects should not be part of this area
        </remove>
        <change id="es0025" dev="VGARCA" date="2009-03-23" area="PAYDISC" feature="NAVCORS36262"
        releaseversion="ES6.00.01" baseversion="ES4.00">
        GDL localization: CDCR: VAT 1:1 relationship between VAT and GL Ledger (Spanish localization Payment Discount)</change>
        <change id="es0026" dev="all-e" date="2009-06-04" area="PAYDISC" feature="NAVCORS40055"
        releaseversion="ES6.00.01" baseversion="ES4.00">
        Discount disregarded when posting purchase order without VAT</change>
        <change id="es0027" dev="VGARCA" date="2009-06-05" area="PAYDISC" feature="NAVCORS40069"
        releaseversion="ES6.00.01" baseversion="ES4.00">
        Incorrect VAT amount in the G/L entry created with the Payment Discount
        Discount disregarded when posting purchase order without VAT</change>
        <change id="es0028" dev="Andersla" date="2009-06-07" area="PAYDISC" feature="NAVCORS40130"
        releaseversion="ES6.00.01" baseversion="ES4.00">
        Error while posting the Purchase Order with Item Charge Lines</change>
      </changelog>
    }
    END.
  }
}
