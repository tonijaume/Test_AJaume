OBJECT Codeunit 7705 Miniform Logon
{
  OBJECT-PROPERTIES
  {
    Date=25/02/04;
    Time=12:00:00;
    Version List=NAVW13.70.01;
  }
  PROPERTIES
  {
    TableNo=7700;
    OnRun=VAR
            MiniformMgmt@1000 : Codeunit 7702;
          BEGIN
            MiniformMgmt.Initialize(
              MiniformHeader,Rec,DOMxmlin,ReturnedNode,
              RootNode,XMLDOMMgmt,ADCSCommunication,LoginID,
              CurrentCode,StackCode,LocationFilter);

            IF ADCSCommunication.GetNodeAttribute(ReturnedNode,'RunReturn') = '0' THEN BEGIN
              IF Code <> CurrentCode THEN
                PrepareData
              ELSE
                ProcessInput;
            END ELSE
              PrepareData;

            CLEAR(DOMxmlin);
          END;

  }
  CODE
  {
    VAR
      MiniformHeader@1015 : Record 7700;
      MiniformHeader2@1006 : Record 7700;
      User@1009 : Record 2000000002;
      DOMxmlin@1011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      ReturnedNode@1012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      RootNode@1010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLDOMMgmt@1007 : Codeunit 99008516;
      ADCSCommunication@1003 : Codeunit 7701;
      ADCSNasStartup@1024 : Codeunit 7700;
      LoginID@1004 : Text[250];
      Remark@1002 : Text[250];
      LocationFilter@1000 : Text[250];
      Text001@1016 : TextConst 'ENU=Invalid User ID;ESP=Id usuario no v lida';
      Text002@1013 : TextConst 'ENU=Invalid Password;ESP=Contrase¤a incorrecta';
      Text003@1001 : TextConst 'ENU=No input Node found;ESP=No se ha encontrado el Nodo de entrada';
      Text004@1014 : TextConst 'ENU=Record not found;ESP=No se ha encontrado ning£n registro';
      CurrentCode@1008 : Text[250];
      StackCode@1017 : Text[250];
      ActiveInputField@1026 : Integer;
      RecRef@1005 : RecordRef;

    LOCAL PROCEDURE ProcessInput@10();
    VAR
      TableNo@1008 : Integer;
      RecordId@1004 : RecordID;
      FldNo@1000 : Integer;
      FuncGroup@1001 : Record 7702;
      TextValue@1007 : Text[250];
    BEGIN
      IF XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode) THEN
        TextValue := ReturnedNode.text
      ELSE
        ERROR(Text003);

      IF EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo')) THEN BEGIN
        RecRef.OPEN(TableNo);
        EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));
        IF RecRef.GET(RecordId) THEN BEGIN
          RecRef.SETTABLE(User);
          ADCSCommunication.SetRecRef(RecRef);
        END ELSE
          ERROR(Text004);
      END;

      FuncGroup.KeyDef := ADCSCommunication.GetFunctionKey(MiniformHeader.Code,TextValue);

      CASE FuncGroup.KeyDef OF

        FuncGroup.KeyDef::Esc : PrepareData;
        FuncGroup.KeyDef::Input : BEGIN
          EVALUATE(FldNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'FieldID'));
          CASE FldNo OF
            User.FIELDNO("User ID"):
              IF NOT GetUserID(UPPERCASE(TextValue)) THEN
                EXIT;
            User.FIELDNO(Password):
              IF NOT CheckPassword(TextValue) THEN
                EXIT;
            ELSE BEGIN
              ADCSCommunication.FieldSetvalue(RecRef,FldNo,TextValue);
              RecRef.SETTABLE(User);
            END;
          END;

          ActiveInputField := ADCSCommunication.GetActiveInputNo(CurrentCode,FldNo);
          IF ADCSCommunication.LastEntryField(CurrentCode,FldNo) THEN BEGIN
            ADCSCommunication.GetNextMiniForm(MiniformHeader,MiniformHeader2);
            MiniformHeader2.SaveXMLin(DOMxmlin);
            CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
          END ELSE
            ActiveInputField += 1;

          RecRef.GETTABLE(User);
          ADCSCommunication.SetRecRef(RecRef);
        END;
      END;

      IF NOT (FuncGroup.KeyDef IN [FuncGroup.KeyDef::Esc]) AND
         NOT ADCSCommunication.LastEntryField(CurrentCode,FldNo)
      THEN
        SendForm(ActiveInputField);
    END;

    LOCAL PROCEDURE GetUserID@21(TextValue@1000 : Text[250]) ReturnValue : Boolean;
    BEGIN
      IF User.GET(TextValue) THEN BEGIN
        LoginID := User."User ID";
        User.Password := '';
        IF NOT ADCSCommunication.CheckWhseEmployee(LoginID,LocationFilter) THEN BEGIN
          ADCSNasStartup.SendError(Text001);
          ReturnValue := FALSE;
          EXIT;
        END;
      END ELSE BEGIN
        ADCSNasStartup.SendError(Text001);
        ReturnValue := FALSE;
        EXIT;
      END;
      ReturnValue := TRUE;
    END;

    LOCAL PROCEDURE CheckPassword@23(TextValue@1000 : Text[250]) ReturnValue : Boolean;
    VAR
      RefUser@1001 : Record 2000000002;
    BEGIN
      User.GET(LoginID);
      RefUser := User;
      RefUser.VALIDATE(Password,TextValue);
      IF User.Password <> RefUser.Password THEN BEGIN
        ADCSNasStartup.SendError(Text002);
        ReturnValue := FALSE;
        EXIT;
      END;
      ReturnValue := TRUE;
    END;

    LOCAL PROCEDURE PrepareData@1();
    BEGIN
      ActiveInputField := 1;
      SendForm(ActiveInputField);
    END;

    LOCAL PROCEDURE SendForm@3(InputField@1000 : Integer);
    BEGIN
      ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,InputField,Remark,LoginID);
      ADCSCommunication.GetReturnXML(DOMxmlin);
      ADCSNasStartup.SendXMLReply(DOMxmlin);
    END;

    EVENT DOMxmlin@1011::ondataavailable@198();
    BEGIN
    END;

    EVENT DOMxmlin@1011::onreadystatechange@-609();
    BEGIN
    END;

    BEGIN
    END.
  }
}
