OBJECT Codeunit 7010146 Validar costes excursiones
{
  OBJECT-PROPERTIES
  {
    Date=27/07/15;
    Time=[ 9:43:54];
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    TableNo=7010166;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1103355013 : TextConst 'ENU=Validate Cost;ESP=Validar Coste';
      Text001@1103355014 : TextConst 'ENU=Reviewing Services'';ESP=Repasando Servicios...';
      Text002@1103355015 : TextConst 'ENU=Service %1 remaining to be calculated again, continue?;ESP=Servicio %1 pendiente de recalcular, continuar?';
      Text003@1103355016 : TextConst 'ENU=Service %1 is remaining to calculate again;ESP=El servicio %1 esta pendiente de recalcular';
      Text004@1103355017 : TextConst 'ENU=EXCI;ESP=EXCI';
      Text005@1103355018 : TextConst 'ENU=Service %1 has not been invoiced, continue?;ESP=El servicio %1 no ha sido facturado, desea continuar.';
      Text006@1103355019 : TextConst 'ENU=Service %1 has not been invoiced;ESP=El servicio %1 no ha sido facturado.';
      Text007@1103355020 : TextConst 'ENU=Looking for supplier...;ESP=Buscando proveedor...';
      Text008@1103355021 : TextConst 'ENU=EXAC;ESP=EXAC';
      Text009@1103355022 : TextConst 'ENU=EXCC;ESP=EXCC';
      Text010@1103355023 : TextConst 'ENU=EXGO;ESP=EXGO';
      Text011@1103355024 : TextConst 'ENU=Purchase contract %1 does not exist for excursions supplier;ESP=No existe el contrato de compra %1 para proveedor excursiones';
      Text012@1103355025 : TextConst 'ENU=Supplier %1 does not exist;ESP=No existe el proveedor %1';
      Text013@1103355026 : TextConst 'ENU=Supplier posting group %1 does not exist;ESP=No existe el grupo contable proveedor %1';
      Text014@1103355027 : TextConst 'ENU=Checking requirements...;ESP=Comprobando condiciones...';
      Text015@1103355028 : TextConst 'ENU=Must indicate a supplier;ESP=Se debe indicar un proveedor';
      Text016@1103355029 : TextConst 'ENU=Must indicate issuing date of supplier;ESP=Se debe indicar la fecha de emisi¢n del Proveedor';
      Text017@1103355030 : TextConst 'ENU=Must indicate supplier invoice no.;ESP=Se debe indicar el n§ factura proveedor';
      Text018@1103355031 : TextConst 'ENU=Must indicate total of invoice;ESP=Se debe indicar el total de la factura';
      Text019@1103355032 : TextConst 'ENU=Amounts do not coincide;ESP=Los importes no coinciden';
      Text020@1103355033 : TextConst 'ENU=DB parameters folder does not exist;ESP=No existe el fichero de parametros de la B.D.';
      Text021@1103355034 : TextConst 'ENU=Purchase VAT %1, %2 does not exist;ESP=No existe el IVA de compra %1 %2.';
      Text022@1103355035 : TextConst 'ENU=Invoice the costs of the window;ESP=Facturar los costes de la ventana';
      Text023@1103355036 : TextConst 'ENU=Creating purchase invoice...;ESP=Creando factura compra...';
      Text024@1103355037 : TextConst 'ENU=Purchase and payments configuration does not exist;ESP=No existe la configuraci¢n de Compras y Pagos.';
      Text025@1103355038 : TextConst 'ENU=Exc. transport from;ESP=Transporte exc. desde';
      Text026@1103355039 : TextConst 'ENU=" to";ESP=" hasta"';
      Text027@1103355040 : TextConst 'ENU=Exc. From;ESP=Exc. desde';
      Text028@1103355041 : TextConst 'ENU=" to";ESP=" hasta"';
      Text029@1103355042 : TextConst 'ENU=Guide from;ESP=Guia desde';
      Text036@1103355049 : TextConst 'ENU=Accounts file for Touroperator %1 does not exist \;ESP=No existe el fichero de Cuentas para el Touroperador %1';
      Text037@1103355050 : TextConst 'ENU=in Local Office %2, neither in generic card;ESP=en la Delegacion %2, ni la ficha generica.';
      Text038@1103355051 : TextConst 'ENU=Purchase VAT %1 %2 does not exist;ESP=No existe el IVA de compra %1 %2';
      Text040@1103355053 : TextConst 'ENU=Purchase VAT-Exempt %1 %2 does not exist, Review parameter Exempt VAT Prod. Posting Group;ESP=No existe el IVA de compra exento %1 %2, Revise el par metro Grupo registro IVA Prod.exento';
      Text041@1103355054 : TextConst 'ENU=Validating Carrier'';ESP=Validando Transportista...';
      Text042@1103355055 : TextConst 'ENU=Validating Excursion'';ESP=Validando Excursi¢n...';
      Text043@1103355056 : TextConst 'ENU=Validating Official Guide'';ESP=Validando Gu¡a Oficial...';
      rContrato@1103355000 : Record 7010142;
      rCond@1103355001 : Record 7010243;
      rParam@1103355002 : Record 7009700;
      rProveedor@1103355003 : Record 23;
      rGrupo@1103355004 : Record 93;
      GLSetup@1103355059 : Record 98;
      CurrExchange@1100217007 : Record 330;
      rIVACompra@1100217008 : Record 325;
      Dialogo@1103355006 : Dialog;
      aux_importe_manual@1103355007 : Decimal;
      tab_touroperadores@1103355008 : ARRAY [150] OF Code[10];
      tab_importes@1103355009 : ARRAY [150] OF Decimal;
      indice@1103355010 : Integer;
      num_linea@1103355012 : Integer;
      Text044@1103355057 : TextConst 'ENU=Barcode is compulsory when validating invoice.;ESP=El codigo de barras es obligatorio al validar la factura.';
      Text045@1103355058 : TextConst 'ENU=Costs to validate were not found with the conditions;ESP=No se han encontrado costes a validar con estas condiciones.';
      Text046@1100253000 : TextConst 'ENU=The total of the invoice is higher than the total to validate;ESP=El total de la factura es superior al total a validar.';
      cNoSeries@1100253001 : Codeunit 396;
      Text047@1100253002 : TextConst 'ENU=Fiscal receipt %1 has been used.;ESP=El comprobante fiscal %1 ya ha sido utilizado.';
      Text048@1100253003 : TextConst 'ENU=Is compulsory to enter the information of fiscal receipt;ESP=Es obligatorio introducir la informacion de comprobante fiscal.';
      Text049@1100253004 : TextConst 'ENU=Cost lines must coincide in currency and exchange date;ESP=Las l¡neas de coste deben coincidir en divisa y fecha de cambio.';
      Text050@1100217000 : TextConst 'ENU=You can''t include two office codes on an invoice;ESP="No se pueden incluir dos c¢digos de oficina en una factura "';
      cFunSeg@1100217001 : Codeunit 7009751;
      Text051@1100217006 : TextConst 'ENU=Intro to continue...;ESP=Intro para continuar...';
      Text052@1100217005 : TextConst 'ENU=TOTALIZING AMOUNTS\;ESP=TOTALIZACION DE IMPORTES';
      Text053@1100217004 : TextConst 'ENU=Amount with tax #1#############\;ESP=Importe con Impuesto #1#############';
      Text054@1100217003 : TextConst 'ENU=MARKED LINES BY  #2########\;ESP=LINEAS MARCADAS POR  #2########';
      Text055@1100217002 : TextConst 'ENU=Amount with tax #3#############\;ESP=Importe con Impuesto #3#############';
      cFacturar@1100217009 : Codeunit 7010140;
      Text056@1100217010 : TextConst 'ENU=IPR adjustment for differences in exchange rate - Invoice %1;ESP=Ajuste FPR por diferencias de tasa - Factura %1';
      Text057@1000000000 : TextConst 'ESP=La l¡nea seleccionada ya forma parte de la valoraci¢n.';
      Text058@1000000001 : TextConst 'ESP=La factura no se puede validar porque est  marcada para reclamar.';
      cNom@1000000002 : Codeunit 7009702;
      Text059@1000000003 : TextConst 'ENU=Invoice already registered;ESP=Factura ya registrada';
      Text060@1000000004 : TextConst 'ENU=Do you want to recalculate the invoice lines;ESP=Desea recalcular las lineas de la factura';
      Text061@1000000005 : TextConst 'ENU=Do you want to add all the pending costs to the invoice;ESP=Desea agregar todos los costes pendientes a la factura';
      Text062@1000000006 : TextConst 'ENU="Do you want to remove the selected lines ";ESP=Desea eliminar las lineas seleccionadas';
      Text063@1000000007 : TextConst 'ENU=Billing department;ESP=Departamento facturacion';
      Text064@1000000013 : TextConst 'ENU=Service Num.;ESP=Num. Servicio';
      Text065@1000000012 : TextConst 'ENU=excursion;ESP=excursion';
      Text066@1000000011 : TextConst 'ENU=persons;ESP=personas';
      Text067@1000000010 : TextConst 'ENU=our amount;ESP=nuestro importe';
      Text068@1000000009 : TextConst 'ENU=We have found differences in your bill of day %1;ESP=Hemos encontrado diferencias en su factura de dia %1';
      Text069@1000000008 : TextConst 'ENU=We look forward to your reply;ESP=Quedamos a la espera de su respuesta';
      Text070@1000000014 : TextConst 'ENU=Ticket Num.;ESP=Num. Ticket';
      Text071@1000000015 : TextConst 'ENU=The sum of vendor amount in the lines does not match with the header;ESP=La suma de importe proveedor de las lineas no coincide con la cabecera';

    LOCAL PROCEDURE _Repasar_Servicios@1(VAR prCabVal@1103355000 : Record 7009948);
    VAR
      lrReserva@1100253000 : Record 7010162;
      rCI2@1103355001 : Record 7010166;
      rServicio@1103355003 : Record 7010163;
      lrDetVal@1000000000 : Record 7009949;
      Texto@1103355004 : Text[80];
      nRegs@1103355005 : Integer;
      i@1103355006 : Integer;
      servicio_anterior@1103355007 : Integer;
      lrCIAux@1100253001 : Record 7010166;
      lwCodOficina@1100217000 : Code[20];
      lwImporteProveedor@1000000001 : Decimal;
    BEGIN
      // Repasar_Servicios

      Dialogo.UPDATE(1, Text001);

      servicio_anterior := 0;
      lwImporteProveedor := 0; //+$037

      lrDetVal.RESET;
      lrDetVal.SETRANGE(Proveedor              , prCabVal.Proveedor);
      lrDetVal.SETRANGE("No. Factura proveedor", prCabVal."No. Factura proveedor");
      lrDetVal.SETRANGE("Fecha registro"       , prCabVal."Fecha registro");
      IF lrDetVal.FINDSET THEN
      BEGIN
        REPEAT
          rCI2.RESET;
          //rCI2.SETRANGE(Delegacion   , prCabVal.Departamento);
          rCI2.SETRANGE("N§ Servicio", lrDetVal."N§ Servicio");
          rCI2.SETRANGE(Concepto     , prCabVal."Tipo coste");
          rCI2.SETRANGE(Proveedor    , prCabVal.Proveedor);
          rCI2.SETRANGE(Usuario      , prCabVal."No. Factura proveedor"); //+$034
          IF rCI2.FINDSET THEN
          BEGIN
            // Tomamos el primer registro como referencia para comparar la divisa
            // con el resto de registros.
            lrCIAux := rCI2; //+005

            nRegs := rCI2.COUNT;
            i := 0;
            // $007
            lwCodOficina := rCI2.Oficina;
            REPEAT
              i := i + 1;
              Dialogo.UPDATE(2, ROUND((i * 10000) / nRegs, 1));

              //+005
              // Se comprueba que los datos de divisa coincidan.
              IF (lrCIAux."Cod. divisa" <> rCI2."Cod. divisa") THEN
              BEGIN
                Dialogo.CLOSE;
                ERROR(Text049);
              END;
              //-005

              IF servicio_anterior <> rCI2."N§ Servicio" THEN
              BEGIN
                IF rServicio.GET(rCI2.Delegacion, rCI2."N§ Servicio") THEN
                BEGIN
                  IF rServicio."Pendiente Recalcular" THEN
                  BEGIN
                    Texto := STRSUBSTNO(Text002, rServicio."N§ Servicio");
                    IF NOT CONFIRM(Texto, TRUE) THEN
                    BEGIN
                      Dialogo.CLOSE;
                      ERROR(Text003, rServicio."N§ Servicio");
                    END;
                  END;
                END;

                //-$004rCI3.RESET;
                //-$004rCI3.SETRANGE(Delegacion   , rCI2.Delegacion);
                //-$004rCI3.SETRANGE("N§ Servicio", rCI2."N§ Servicio");
                //-$004rCI3.SETRANGE(Concepto     , Text004);
                //-$004rCI3.SETRANGE("N§ Factura" , '');
                //-$004IF rCI3.FIND('-') THEN

                //+$004
                lrReserva.RESET;
                lrReserva.SETCURRENTKEY("N§ Servicio");
                lrReserva.SETRANGE("N§ Servicio" , rCI2."N§ Servicio");
                lrReserva.SETRANGE("Num. Factura", '');
                IF lrReserva.FINDFIRST THEN
                BEGIN
                  Dialogo.CLOSE;
                  ERROR(Text006, rCI2."N§ Servicio");
                END;
                //+$004

                servicio_anterior := rCI2."N§ Servicio";
              END;

              // $007
              IF rParam."Oficina Excursion Obligatoria" THEN
              BEGIN
                rCI2.TESTFIELD(Oficina);
                IF lwCodOficina <> rCI2.Oficina THEN
                  ERROR(Text050);
              END;

            UNTIL rCI2.NEXT = 0
          END;

          lwImporteProveedor += lrDetVal."Importe proveedor"; //+$037
        UNTIL lrDetVal.NEXT = 0;
      END;

      IF lwImporteProveedor <> prCabVal."Importe proveedor" THEN
        ERROR(Text071);
    END;

    LOCAL PROCEDURE _Proveedor_Encontrado@2(VAR prCabVal@1000000000 : Record 7009948) : Boolean;
    VAR
      rCI@1000000001 : Record 7010166;
      lrDetVal@1000000002 : Record 7009949;
    BEGIN
      // _Proveedor_Encontrado

      Dialogo.UPDATE(1, Text007);
      Dialogo.UPDATE(2, 0);

      lrDetVal.RESET;
      lrDetVal.SETRANGE(Proveedor              , prCabVal.Proveedor);
      lrDetVal.SETRANGE("No. Factura proveedor", prCabVal."No. Factura proveedor");
      lrDetVal.SETRANGE("Fecha registro"       , prCabVal."Fecha registro");
      lrDetVal.FINDFIRST;

      rCI.RESET;
      //rCI.SETRANGE(Delegacion   , prCabVal.Departamento);
      rCI.SETRANGE("N§ Servicio", lrDetVal."N§ Servicio");
      rCI.SETRANGE(Concepto     , prCabVal."Tipo coste");
      rCI.SETRANGE(Proveedor    , prCabVal.Proveedor);
      rCI.SETRANGE(Usuario      , prCabVal."No. Factura proveedor");
      rCI.FINDFIRST;

      rContrato.SETCURRENTKEY(rContrato.Proveedor);
      CASE rCI.Concepto OF
        Text008: BEGIN
          rContrato.SETRANGE("Tipo Contrato", rContrato."Tipo Contrato"::Transportista);
          rContrato.SETRANGE("N§ Contrato compra", rCI."N§ Contrato Excursion");
        END;
        Text009: BEGIN
          rContrato.SETRANGE("Tipo Contrato", rContrato."Tipo Contrato"::Excursion);
          rContrato.SETRANGE("N§ Contrato compra", rCI."N§ Contrato Excursion");
        END;
        Text010: BEGIN
          rContrato.SETRANGE("Tipo Contrato", rContrato."Tipo Contrato"::"Guia Oficial");
          rContrato.SETRANGE("N§ Contrato compra", rCI."N§ Contrato Excursion");
        END;
      END;
      IF NOT rContrato.FINDFIRST THEN BEGIN
        Dialogo.CLOSE;
        ERROR(Text011, rCI."N§ Contrato Excursion");
      END;
      IF NOT rProveedor.GET(rContrato.Proveedor) THEN BEGIN
        Dialogo.CLOSE;
        ERROR(Text012, rContrato.Proveedor);
      END;
      IF NOT rGrupo.GET(rProveedor."Vendor Posting Group") THEN BEGIN
        Dialogo.CLOSE;
        ERROR(Text013, rProveedor."Vendor Posting Group");
      END;
      IF rParam."No generar FPR G.O. excursion" AND (rCI.Concepto = Text010) THEN BEGIN
        rGrupo.TESTFIELD("Cta. Gastos servs profesio exc");
      END;

      rGrupo.TESTFIELD("Cta. FPR Excursiones");

      GLSetup.FINDFIRST;
      IF GLSetup."Aplica legislacion NCF" THEN
        rParam.TESTFIELD("Tipo factura compra Incoming");

      _BuscarIVACompra;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE _Pedir_Datos@3(VAR rCI@1103355000 : Record 7010166) : Boolean;
    VAR
      ImporteAux@1103355001 : Decimal;
      nRegs@1103355002 : Integer;
      i@1103355003 : Integer;
      lrCI@1100253001 : Record 7010166;
      lwImporteYaValidado@1100217000 : Decimal;
      lwImporteValidar@1000000000 : Decimal;
    BEGIN
      // Pedir_Datos

      rParam.FINDFIRST;

      //+001
      CLEAR(lrCI);
      lrCI.SETCURRENTKEY(Concepto, Fecha, TourOperador, "N§ Contrato Excursion", Zona);
      lrCI.COPYFILTERS(rCI);
      lrCI.FINDFIRST;

      rCond.RESET;
      IF NOT rCond.GET(USERID) THEN BEGIN
        rCond.INIT;
        rCond.Usuario := USERID;
        rCond.INSERT;
      END;

      rCond.INIT;
      rCond.Usuario                   := USERID;
      rCond.Correcto                  := FALSE;

      rCond.VALIDATE(Proveedor, rContrato.Proveedor);

      rCond.VALIDATE("Cod. Divisa", lrCI."Cod. divisa"); //+$016

      rCond.Fecha := lrCI.Fecha;

      rCond."No. Factura proveedor"   := '';
      rCond."Fecha emision proveedor" := 0D;
      rCond."Total Factura"           := 0;
      rCond."Importe a validar"       := 0;
      rCond.Fecha                     := 0D; //+$015

      REPEAT
        lwImporteYaValidado := 0;
        CASE rCI.Concepto OF
          'EXAC':
          BEGIN
            lrCI.CALCFIELDS("Importe Validados Trans");
            lwImporteYaValidado := lrCI."Importe Validados Trans";
          END;
          'EXCC':
          BEGIN
            lrCI.CALCFIELDS("Importe Validados Excursion");
            lwImporteYaValidado := lrCI."Importe Validados Excursion";
          END;
          'EXGO':
          BEGIN
            lrCI.CALCFIELDS("Importe Validados GO");
            lwImporteYaValidado := lrCI."Importe Validados GO";
          END;
        END;

        //+$019 <
        IF rParam."Permite validacion parcial" THEN
        BEGIN
          IF lrCI."Importe Validacion" <> 0 THEN
            lwImporteValidar := (lrCI."Importe Validacion")
          ELSE
            lwImporteValidar := (lrCI."Importe con Impuesto" - lwImporteYaValidado);
        END
        ELSE
          lwImporteValidar := (lrCI."Importe con Impuesto" - lwImporteYaValidado);
        //+$019 >

        //+$022 <
        rCond."Importe a validar" -= lwImporteValidar;
        IF lwImporteYaValidado <> 0 THEN
          rCond."Importe resto validacion" -= lwImporteValidar
        ELSE
        BEGIN
          rCond."Importe base"   -= lrCI."Importe base impuesto";
          rCond."Importe exento" -= lrCI."Importe exento";
        END;
        //+$022 >
      UNTIL lrCI.NEXT = 0;

      //+$012 <
      //. Validamos para obtener los importes en DL
      rCond.VALIDATE("Importe a validar");
      //+$012 >

      //-001
      rCond."Codigo de barras" := '';
      rCond.Delegacion         := rParam.Delegacion;
      rCond.MODIFY;

      COMMIT;

      Dialogo.CLOSE;

      FORM.RUNMODAL(7010293, rCond);
      rCond.GET(USERID);
      IF NOT rCond.Correcto THEN
        EXIT(FALSE);

      Dialogo.OPEN(Text000 +
                   '  #1######################\' +
                   '  @2@@@@@@@@@@@@@@@@@@@@@@');
      Dialogo.UPDATE(1, Text014);
      Dialogo.UPDATE(2, 0);

      //+$018 Si el total de la factura es superior al importe a validar se lanza un aviso para continuar.
      IF (rCond."Total Factura" > 0) AND (rCond."Total Factura" > rCond."Importe a validar") THEN
        ERROR(Text046);

      IF (rCond."Comprobante Fiscal" = '') AND (rCond."Digitos fijos NCF" <> '') THEN
      BEGIN //+$003
        ERROR(Text048);
      END;

      IF rCond.Proveedor= '' THEN BEGIN
        Dialogo.CLOSE;
        ERROR(Text015);
      END;

      IF NOT rProveedor.GET(rCond.Proveedor) THEN BEGIN
        Dialogo.CLOSE;
        ERROR(Text012, rCond.Proveedor);
      END;

      IF NOT rGrupo.GET(rProveedor."Vendor Posting Group") THEN BEGIN
        Dialogo.CLOSE;
        ERROR(Text013, rProveedor."Vendor Posting Group");
      END;

      IF rCond."Fecha emision proveedor" = 0D THEN BEGIN
        Dialogo.CLOSE;
        ERROR(Text016);
      END;

      IF rCond."No. Factura proveedor" = '' THEN BEGIN
        Dialogo.CLOSE;
        ERROR(Text017);
      END;

      IF rCond."Total Factura" = 0 THEN BEGIN
        Dialogo.CLOSE;
        ERROR(Text018);
      END;

      // El codigo de barras es obligatorio, reutilizamos un campo de condiciones temporales

      IF rCond."Codigo de barras" = '' THEN BEGIN
        Dialogo.CLOSE;
        ERROR(Text044);
      END;

      IF rCond.Delegacion = '' THEN
        rCond.Delegacion := rParam.Delegacion;

      _BuscarIVACompra;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE _Facturar@4(VAR prCabVal@1000000002 : Record 7009948);
    VAR
      rCabFra@1103355001 : Record 38;
      rLinFra@1103355002 : Record 39;
      rLinFra2@1103355003 : Record 39;
      rConfCmp@1103355004 : Record 312;
      lrCI@1000000006 : Record 7010166;
      rCI2@1103355005 : Record 7010166;
      lrCtas@1100217003 : Record 7009705;
      lrCurrency@1100217002 : Record 4;
      lrDetVal@1000000003 : Record 7009949;
      lcCheck@1100217004 : Codeunit 11;
      nSerie@1103355006 : Code[10];
      ImporteSIN@1103355011 : Decimal;
      importeCON@1103355012 : Decimal;
      lwImporteExento@1000000000 : Decimal;
      signo@1103355013 : Integer;
      lwCodDim1@1100217000 : Code[20];
      lwTasaInterna@1100217001 : Decimal;
      lcRelease@1000000001 : Codeunit 415;
      vImpDifPos@1000000004 : Decimal;
      vImpDifNeg@1000000005 : Decimal;
      lcSincro@1000000007 : Codeunit 7009793;
      lrTO@1000000008 : Record 7009717;
    BEGIN
      // _Facturar

      Dialogo.CLOSE;

      rParam.FINDFIRST;

      IF NOT CONFIRM(Text022, FALSE) THEN
        EXIT;

      Dialogo.OPEN(Text000 +
                   '  #1######################\' +
                   '  @2@@@@@@@@@@@@@@@@@@@@@@');
      Dialogo.UPDATE(1, Text023);
      Dialogo.UPDATE(2, 0);

      rConfCmp.FINDFIRST;

      lrDetVal.RESET;
      lrDetVal.SETRANGE(Proveedor              , prCabVal.Proveedor);
      lrDetVal.SETRANGE("No. Factura proveedor", prCabVal."No. Factura proveedor");
      lrDetVal.SETRANGE("Fecha registro"       , prCabVal."Fecha registro");
      lrDetVal.FINDSET;

      rCI2.RESET;
      //rCI2.SETRANGE(Delegacion   , prCabVal.Departamento);
      rCI2.SETRANGE("N§ Servicio", lrDetVal."N§ Servicio");
      rCI2.SETRANGE(Concepto     , prCabVal."Tipo coste");
      rCI2.SETRANGE(Proveedor    , prCabVal.Proveedor);
      rCI2.SETRANGE(Usuario      , prCabVal."No. Factura proveedor");
      rCI2.FINDSET;

      CLEAR(rCabFra);
      IF prCabVal."Importe proveedor" >= 0 THEN
      BEGIN
        //-$009nSerie := rContrato."Cod. Serie";
        rConfCmp.TESTFIELD("Invoice Nos."); //+$009
        nSerie := rConfCmp."Invoice Nos.";  //+$009
        signo := 1;
        rCabFra.VALIDATE("Document Type", rCabFra."Document Type"::Invoice);
      END
      ELSE
      BEGIN
        rConfCmp.TESTFIELD("Credit Memo Nos.");
        nSerie := rConfCmp."Credit Memo Nos.";
        signo := -1;
        rCabFra.VALIDATE("Document Type", rCabFra."Document Type"::"Credit Memo");
      END;
      rCabFra.VALIDATE("No. Series"        , nSerie);
      _CheckReasonCode;
      rCabFra.INSERT(TRUE);

      rCabFra.VALIDATE("Buy-from Vendor No.", rProveedor."No.");

      //+$015 <
      IF prCabVal."Fecha registro" <> 0D THEN
        rCabFra.VALIDATE("Posting Date", prCabVal."Fecha registro")
      ELSE
        rCabFra.VALIDATE("Posting Date", prCabVal."Fecha desde");
      //+$015 >

      lcCheck.DateNotAllowed(rCabFra."Posting Date"); //+$021

      CASE prCabVal."Tipo coste" OF
        Text008:
          rCabFra.VALIDATE("Posting Description"  , Text025 + ' ' +
                            STRSUBSTNO('%1', prCabVal."Fecha desde") + ' ' + Text026 + ' ' +
                            STRSUBSTNO('%1', prCabVal."Fecha hasta"));
        Text009:
          rCabFra.VALIDATE("Posting Description"  , Text027 + ' ' +
                            STRSUBSTNO('%1', prCabVal."Fecha desde") + ' ' + Text028 + ' ' +
                            STRSUBSTNO('%1', prCabVal."Fecha hasta"));
        Text010:
          rCabFra.VALIDATE("Posting Description"  , Text029 + ' ' +
                            STRSUBSTNO('%1', prCabVal."Fecha desde") + ' ' + Text028 + ' ' +
                            STRSUBSTNO('%1', prCabVal."Fecha hasta"));
      END;
      Dialogo.UPDATE(2, 3333);
      rCabFra.VALIDATE("Document Date", prCabVal."Fecha emision proveedor");

      IF prCabVal."Importe proveedor" >= 0 THEN
        rCabFra.VALIDATE("Vendor Invoice No." , prCabVal."No. Factura proveedor")
      ELSE
        rCabFra.VALIDATE("Vendor Cr. Memo No.", prCabVal."No. Factura proveedor");

      IF (rContrato."Cod. Terminos Pago" <> '') AND
         (rContrato."Cod. Terminos Pago" <> rCabFra."Payment Terms Code") THEN
        rCabFra.VALIDATE("Payment Terms Code", rContrato."Cod. Terminos Pago");

      IF (rContrato."Cod. Formas Pago" <> '') AND
         (rContrato."Cod. Formas Pago" <> rCabFra."Payment Method Code") THEN
        rCabFra.VALIDATE("Payment Method Code", rContrato."Cod. Formas Pago");

      // $007 <
      IF rParam."Oficina Excursion Obligatoria" THEN
        lwCodDim1 := rCI2.Oficina
      ELSE
        lwCodDim1 := prCabVal.Departamento;

      // rCabFra.VALIDATE("Shortcut Dimension 1 Code", prCabVal.Delegacion);
      rCabFra.VALIDATE("Shortcut Dimension 1 Code", lwCodDim1);
      // $007 >

      //+$029 <
      lrTO.GET(rCI2.TourOperador);
      IF lrTO."Codigo en comercializadora" <> '' THEN
        rCabFra.VALIDATE("Shortcut Dimension 2 Code", lrTO."Codigo en comercializadora")
      ELSE
        rCabFra.VALIDATE("Shortcut Dimension 2 Code", rCI2.TourOperador);
      //+$029 <

      // Se usa la divisa de las l¡neas de C/I para generar la factura.
      //-005rCabFra.VALIDATE("Currency Code", '');
      //. Dejamos en blanco para utilizar siempre la divisa de la ficha de proveedor
      //-$010rCabFra.VALIDATE("Currency Code", rCI."C¢d. divisa"); //+005

      //. Pasamos el codigo de barras a la factura de compra, reutilizamos un campo de condiciones temporales
      rCabFra.VALIDATE("Codigo barras PDF", prCabVal."Codigo de barras");

      //. Rellenar el campo Tipo de factura con un parametro si aplica NCF
      IF GLSetup."Aplica legislacion NCF" THEN
        rCabFra."Tipo factura compra" := rParam."Tipo factura compra Incoming";

      //. Se incluye el c¢digo del grup NCF y el n§ de comprobante fiscal.
      IF prCabVal."Digitos fijos NCF" <> '' THEN
        rCabFra."Comprobante Fiscal" := prCabVal."Comprobante Fiscal";

      IF GLSetup."LCY Code" <> rCabFra."Currency Code" THEN
      BEGIN
        //+$012 <
        IF prCabVal."Tasa de cambio" <> 0 THEN
          rCabFra.VALIDATE("Currency Factor", 1 / prCabVal."Tasa de cambio");
        //+$012 >
      END;

      rCabFra.MODIFY;

      //. Vamos a controlar la divisa de coste para aquellos casos en que CNT utiliza distintos
      //. codigos para la misma divisa, haciendolo de esta manera no se hace conversion entre el
      //. importe calculado en excursion y el enviado a contabilidad
      lwTasaInterna := prCabVal."Tasa de cambio";
      IF COPYSTR(rCI2."Cod. divisa", 1, 2) = COPYSTR(rCabFra."Currency Code", 1, 2) THEN
        lwTasaInterna := 1;

      Dialogo.UPDATE(2, 6666);

      //. Buscar la divisa de la factura para hacer el redondeo
      CLEAR(lrCurrency);
      IF rCabFra."Currency Code" <> '' THEN
        lrCurrency.GET(rCabFra."Currency Code");

      // Creamos las lineas de factura contra la cuenta de FPR del proveedor
      // a excepci¢n del G.O. si est  marcado no crear FPR G.O. excursion

      //-$022importeCON := signo * (prCabVal."Importe a validar");
      //-$022ImporteSIN := ROUND(importeCON / (1 + (rIVACompra."VAT+EC %" / 100)), lrCurrency."Amount Rounding Precision");

      //+$022 <
      prCabVal."Importe agencia"        := signo * prCabVal."Importe agencia";
      prCabVal."Importe base"             := signo * prCabVal."Importe base";
      prCabVal."Importe exento"           := signo * prCabVal."Importe exento";
      //+$022 >

      IF prCabVal."Importe agencia" = 0 THEN
        EXIT;

      //. Creamos una linea de factura por el importe con o sin impuestos dependiendo de la configuracion del contrato
      CLEAR(rLinFra);
      rLinFra.VALIDATE("Document Type", rCabFra."Document Type");
      rLinFra.VALIDATE("Document No." , rCabFra."No.");
      rLinFra.VALIDATE("Line No."     , 10000);
      rLinFra.VALIDATE(Type           , rLinFra.Type::"G/L Account");
      rLinFra.INSERT;

      IF rParam."No generar FPR G.O. excursion" AND (rCI2.Concepto = Text010) THEN
        rLinFra.VALIDATE("No.", rGrupo."Cta. Gastos servs profesio exc")
      ELSE
        rLinFra.VALIDATE("No.", rGrupo."Cta. FPR Excursiones");

      // $007 <
      // rLinFra.VALIDATE("Shortcut Dimension 1 Code", prCabVal.Delegacion);
      rLinFra.VALIDATE("Shortcut Dimension 1 Code", lwCodDim1);
      // $007 >

      //+$029 <
      lrTO.GET(rCI2.TourOperador);
      IF lrTO."Codigo en comercializadora" <> '' THEN
        rLinFra.VALIDATE("Shortcut Dimension 2 Code", lrTO."Codigo en comercializadora")
      ELSE
        rLinFra.VALIDATE("Shortcut Dimension 2 Code", rCI2.TourOperador);
      //+$029 <

      rLinFra.VALIDATE("Allow Invoice Disc."      , FALSE);
      rLinFra.VALIDATE(Quantity                   , 1);
      rLinFra.VALIDATE("VAT Prod. Posting Group"  , rContrato."Grupo registro iva prod.");
      //+$010 <
      IF rCabFra."Prices Including VAT" THEN
        rLinFra.VALIDATE("Direct Unit Cost", ROUND(prCabVal."Importe agencia" * lwTasaInterna))
      ELSE
        rLinFra.VALIDATE("Direct Unit Cost", ROUND(prCabVal."Importe base" * lwTasaInterna));

      //+$010 >
      rLinFra."Line Discount %"      := 0;
      rLinFra.MODIFY;

      //+$022
      //. Hay que comprobar si tenemos que crear una linea exenta de impuestos
      IF prCabVal."Importe exento" <> 0 THEN
      BEGIN
        lwImporteExento := prCabVal."Importe exento";

        CLEAR(rLinFra);
        rLinFra.VALIDATE("Document Type", rCabFra."Document Type");
        rLinFra.VALIDATE("Document No." , rCabFra."No.");
        rLinFra.VALIDATE("Line No."     , 20000);
        rLinFra.VALIDATE(Type           , rLinFra.Type::"G/L Account");
        rLinFra.INSERT;

        IF rParam."No generar FPR G.O. excursion" AND (rCI2.Concepto = Text010) THEN
          rLinFra.VALIDATE("No.", rGrupo."Cta. Gastos servs profesio exc")
        ELSE
          rLinFra.VALIDATE("No.", rGrupo."Cta. FPR Excursiones");

        rLinFra.VALIDATE("Shortcut Dimension 1 Code", lwCodDim1);

        //+$029 <
        lrTO.GET(rCI2.TourOperador);
        IF lrTO."Codigo en comercializadora" <> '' THEN
          rLinFra.VALIDATE("Shortcut Dimension 2 Code", lrTO."Codigo en comercializadora")
        ELSE
          rLinFra.VALIDATE("Shortcut Dimension 2 Code", rCI2.TourOperador);
        //+$029 <

        rLinFra.VALIDATE("Allow Invoice Disc."      , FALSE);
        rLinFra.VALIDATE(Quantity                   , 1);
        rLinFra.VALIDATE("VAT Prod. Posting Group"  , rParam."Grupo Registro IVA Prod.Exento");
        rLinFra.VALIDATE("Direct Unit Cost"         , ROUND(lwImporteExento * lwTasaInterna));
        //+$010 >
        rLinFra."Line Discount %"      := 0;
        rLinFra.MODIFY;
      END;

      vImpDifPos := 0;
      vImpDifNeg := 0;
      IF lrDetVal.FINDSET THEN
      BEGIN
        REPEAT
          IF (lrDetVal.Importe > lrDetVal."Importe proveedor") THEN
            vImpDifNeg += lrDetVal."Importe proveedor" - lrDetVal.Importe;

          IF (lrDetVal.Importe < lrDetVal."Importe proveedor") THEN
            vImpDifPos += lrDetVal."Importe proveedor" - lrDetVal.Importe;

          IF (lrDetVal.Importe <> lrDetVal."Importe proveedor") OR
             (lrDetVal.Cantidad <> lrDetVal."Cantidad proveedor") THEN
          BEGIN
            // Creamos ajuste
            rCI2.RESET;
            //rCI2.SETRANGE(Delegacion   , prCabVal.Departamento);
            rCI2.SETRANGE("N§ Servicio", lrDetVal."N§ Servicio");
            rCI2.SETRANGE(Concepto     , prCabVal."Tipo coste");
            rCI2.SETRANGE(Usuario      , prCabVal."No. Factura proveedor"); //+$034
            rCI2.SETRANGE(Proveedor    , prCabVal.Proveedor);
            rCI2.FINDSET;

            lrCI := rCI2;
            lrCI."Automatico/Manual" := lrCI."Automatico/Manual"::Manual;
            lrCI."Tipo Elemento"     := lrCI."Tipo Elemento"::Manual;
            lrCI.VALIDATE(Importe, lrDetVal.Importe - lrDetVal."Importe proveedor");
            lrCI."Cantidad Real"     := lrDetVal.Cantidad - lrDetVal."Cantidad proveedor";

            CLEAR(lrCI."Cantidad Aplicada");
            CLEAR(lrCI."N§ Vehiculos");
            CLEAR(lrCI."Precio x Vehiculo");
            CLEAR(lrCI."Precio Pax");
            CLEAR(lrCI."Tipo Pax");
            CLEAR(lrCI."Tipo Vehiculo");
            CLEAR(lrCI."N§ Factura");
            CLEAR(lrCI."Importe Original SIN");
            CLEAR(lrCI."Importe sin Impuesto");
            CLEAR(lrCI."Importe con Impuesto");
            CLEAR(lrCI."% Reparto TourOperador");
            CLEAR(lrCI."Pax Validacion");
            CLEAR(lrCI."Importe Validacion");
            lrCI.INSERT(TRUE);
          END;
        UNTIL lrDetVal.NEXT = 0;
      END;

      // Linea diferencias positivas
      IF vImpDifPos <> 0 THEN
      BEGIN
        // Se comprueba que se haya configurado la cuenta a la que iran las diferencias.
        CLEAR(lrCtas);
        lrCtas.GET(rParam.Delegacion, rCI2.TourOperador);
        lrCtas.TESTFIELD("Cta. ajuste FPR excursion");

        CLEAR(rLinFra);
        rLinFra.VALIDATE("Document Type", rCabFra."Document Type");
        rLinFra.VALIDATE("Document No." , rCabFra."No.");
        rLinFra.VALIDATE("Line No."     , 30000);
        rLinFra.VALIDATE(Type           , rLinFra.Type::"G/L Account");
        rLinFra.INSERT;

        rLinFra.VALIDATE("No.", lrCtas."Cta. ajuste FPR excursion");

        // $007 <
        // rLinFra.VALIDATE("Shortcut Dimension 1 Code", prCabVal.Delegacion);
        rLinFra.VALIDATE("Shortcut Dimension 1 Code", lwCodDim1);
        // $007 >

        //+$029 <
        lrTO.GET(rCI2.TourOperador);
        IF lrTO."Codigo en comercializadora" <> '' THEN
          rLinFra.VALIDATE("Shortcut Dimension 2 Code", lrTO."Codigo en comercializadora")
        ELSE
          rLinFra.VALIDATE("Shortcut Dimension 2 Code", rCI2.TourOperador);
        //+$029 <

        rLinFra.VALIDATE("Allow Invoice Disc."      , FALSE);
        rLinFra.VALIDATE(Quantity                   , 1);
        rLinFra.VALIDATE("VAT Prod. Posting Group"  , rContrato."Grupo registro iva prod.");
        rLinFra.VALIDATE("Direct Unit Cost"         , ROUND(vImpDifPos * lwTasaInterna));

        //+$010 >
        rLinFra."Line Discount %" := 0;
        rLinFra.MODIFY;
      END;

      // Linea diferencias negativas
      IF vImpDifNeg <> 0 THEN
      BEGIN
        // Se comprueba que se haya configurado la cuenta a la que iran las diferencias.
        CLEAR(lrCtas);
        lrCtas.GET(rParam.Delegacion, rCI2.TourOperador);
        lrCtas.TESTFIELD("Cta. compra excursiones");

        CLEAR(rLinFra);
        rLinFra.VALIDATE("Document Type", rCabFra."Document Type");
        rLinFra.VALIDATE("Document No." , rCabFra."No.");
        rLinFra.VALIDATE("Line No."     , 30000);
        rLinFra.VALIDATE(Type           , rLinFra.Type::"G/L Account");
        rLinFra.INSERT;

        rLinFra.VALIDATE("No.", lrCtas."Cta. compra excursiones");

        // $007 <
        // rLinFra.VALIDATE("Shortcut Dimension 1 Code", prCabVal.Delegacion);
        rLinFra.VALIDATE("Shortcut Dimension 1 Code", lwCodDim1);
        // $007 >

        //+$029 <
        lrTO.GET(rCI2.TourOperador);
        IF lrTO."Codigo en comercializadora" <> '' THEN
          rLinFra.VALIDATE("Shortcut Dimension 2 Code", lrTO."Codigo en comercializadora")
        ELSE
          rLinFra.VALIDATE("Shortcut Dimension 2 Code", rCI2.TourOperador);
        //+$029 >

        rLinFra.VALIDATE("Allow Invoice Disc."      , FALSE);
        rLinFra.VALIDATE(Quantity                   , 1);
        rLinFra.VALIDATE("VAT Prod. Posting Group"  , rContrato."Grupo registro iva prod.");
        rLinFra.VALIDATE("Direct Unit Cost"         , ROUND(vImpDifNeg * lwTasaInterna));

        //+$010 >
        rLinFra."Line Discount %" := 0;
        rLinFra.MODIFY;
      END;

      //+$025 <
      IF rCabFra.GET(rCabFra."Document Type", rCabFra."No.") THEN
        lcRelease.RUN(rCabFra);
      //+$025 >

      //+$027 <
      IF rCabFra.GET(rCabFra."Document Type", rCabFra."No.") THEN
      BEGIN
        rCabFra."Reason Code" := 'ATENNEA';
        rCabFra.MODIFY;
      END;
      //+$027 >

      //+$028 <
      IF rParam."Registrar costes en comerciali" THEN
        lcSincro.SincronizaDocCompra(rCabFra."Document Type", rCabFra."No.", rCabFra."Shortcut Dimension 2 Code");
      //+$028 >

      Dialogo.UPDATE(2, 10000);

      CASE rCI2.Concepto OF
        Text008: _Validacion_Transp(rCabFra, prCabVal);
        Text009: _Validacion_Excur (rCabFra, prCabVal);
        Text010: _Validacion_GO    (rCabFra, prCabVal);
      END;

      prCabVal.Registrada            := TRUE;
      prCabVal."Usuario registro"    := USERID;
      prCabVal."Fecha/hora registro" := CURRENTDATETIME;
      prCabVal.MODIFY;
    END;

    LOCAL PROCEDURE _BuscarIVACompra@24();
    BEGIN
      // _BuscarIVACompra

      IF NOT rIVACompra.GET(rProveedor."VAT Bus. Posting Group", rContrato."Grupo registro iva prod.") THEN
      BEGIN
        Dialogo.CLOSE;
        ERROR(Text038, rProveedor."VAT Bus. Posting Group", rContrato."Grupo registro iva prod.");
      END;
    END;

    LOCAL PROCEDURE _Validacion_Transp@6(rCabFra@1103355001 : Record 38;VAR prCabVal@1000000000 : Record 7009948);
    VAR
      lrTMPPrv@1100217001 : TEMPORARY Record 7010166;
      rCI2@1103355003 : Record 7010166;
      lrCI3@1000000002 : Record 7010166;
      lrDetVal@1000000001 : Record 7009949;
      nRegs@1103355004 : Integer;
      i@1103355005 : Integer;
    BEGIN
      // Validacion_Transp

      //+$014
      CLEAR(lrTMPPrv);
      lrTMPPrv.DELETEALL;

      lrDetVal.RESET;
      lrDetVal.SETRANGE(Proveedor              , prCabVal.Proveedor);
      lrDetVal.SETRANGE("No. Factura proveedor", prCabVal."No. Factura proveedor");
      lrDetVal.SETRANGE("Fecha registro"       , prCabVal."Fecha registro");
      IF lrDetVal.FINDSET THEN
      BEGIN
        nRegs := lrDetVal.COUNT;
        i := 0;
        Dialogo.UPDATE(1, Text041);
        REPEAT
          i := i + 1;
          Dialogo.UPDATE(2, ROUND((i * 10000) / nRegs, 1));

          rCI2.RESET;
          //rCI2.SETRANGE(Delegacion   , prCabVal.Departamento);
          rCI2.SETRANGE("N§ Servicio", lrDetVal."N§ Servicio");
          rCI2.SETRANGE(Concepto     , prCabVal."Tipo coste");
          rCI2.SETRANGE(Usuario      , prCabVal."No. Factura proveedor");
          rCI2.SETRANGE(Proveedor    , prCabVal.Proveedor);
          IF rCI2.FINDSET THEN
          BEGIN
            REPEAT
              lrCI3 := rCI2;
              lrCI3."N§ Factura"          := prCabVal."No. Factura proveedor";
              lrCI3.Usuario               := '';
              lrCI3."Tipo cambio Factura" := prCabVal."Tasa de cambio"; //+$012
              lrCI3.MODIFY;

              //. Si tenemos diferencia de tipo de cambio hay que generar un asiento de diferencia
              //+$014 <
              IF rCI2."Tipo cambio FPR" <> rCI2."Tipo cambio Factura" THEN
              BEGIN
                IF rParam."Registrar FPR con impuestos" THEN
                BEGIN
                  _AcumularImportes(lrTMPPrv, rCI2, rCI2."Importe con Impuesto" * (rCI2."Tipo cambio Factura" - rCI2."Tipo cambio FPR"))
                END
                ELSE
                BEGIN
                  _AcumularImportes(lrTMPPrv, rCI2, rCI2."Importe sin Impuesto" * (rCI2."Tipo cambio Factura" - rCI2."Tipo cambio FPR"))
                END;
              END;
              //+$014 >
            UNTIL rCI2.NEXT = 0;
          END;
        UNTIL lrDetVal.NEXT = 0;
      END;

      //+$014 <
      //. Asiento de ajuste de tasa
      _AsientoAjusteTasa(lrTMPPrv, rCabFra."Posting Date", rCabFra."Vendor Invoice No.", rCabFra."Buy-from Vendor No.",
                         rCabFra."Shortcut Dimension 1 Code");
      //+$014 >
    END;

    LOCAL PROCEDURE _Validacion_Excur@7(rCabFra@1103355001 : Record 38;VAR prCabVal@1000000000 : Record 7009948);
    VAR
      lrTMPPrv@1100217000 : TEMPORARY Record 7010166;
      rCI2@1103355003 : Record 7010166;
      lrCI3@1000000002 : Record 7010166;
      lrDetVal@1000000001 : Record 7009949;
      nRegs@1103355004 : Integer;
      i@1103355005 : Integer;
    BEGIN
      // Validacion_Excur

      //+$014
      CLEAR(lrTMPPrv);
      lrTMPPrv.DELETEALL;

      lrDetVal.RESET;
      lrDetVal.SETRANGE(Proveedor, prCabVal.Proveedor);
      lrDetVal.SETRANGE("No. Factura proveedor", prCabVal."No. Factura proveedor");
      lrDetVal.SETRANGE("Fecha registro", prCabVal."Fecha registro");
      IF lrDetVal.FINDSET THEN
      BEGIN
        nRegs := lrDetVal.COUNT;
        i := 0;
        Dialogo.UPDATE(1, Text042);
        REPEAT
          i := i + 1;
          Dialogo.UPDATE(2, ROUND((i * 10000) / nRegs, 1));

          rCI2.RESET;
          //rCI2.SETRANGE(Delegacion   , prCabVal.Departamento);
          rCI2.SETRANGE("N§ Servicio", lrDetVal."N§ Servicio");
          rCI2.SETRANGE(Concepto     , prCabVal."Tipo coste");
          rCI2.SETRANGE(Usuario      , prCabVal."No. Factura proveedor");
          rCI2.SETRANGE(Proveedor    , prCabVal.Proveedor);
          IF rCI2.FINDSET THEN
          BEGIN
            REPEAT
              lrCI3 := rCI2;
              lrCI3."N§ Factura"          := prCabVal."No. Factura proveedor";
              lrCI3.Usuario               := '';
              lrCI3."Tipo cambio Factura" := prCabVal."Tasa de cambio"; //+$012
              lrCI3.MODIFY;

              //. Si tenemos diferencia de tipo de cambio hay que generar un asiento de diferencia
              //+$014 <
              IF rCI2."Tipo cambio FPR" <> rCI2."Tipo cambio Factura" THEN
              BEGIN
                IF rParam."Registrar FPR con impuestos" THEN
                BEGIN
                  _AcumularImportes(lrTMPPrv, rCI2, rCI2."Importe con Impuesto" * (rCI2."Tipo cambio Factura" - rCI2."Tipo cambio FPR"))
                END
                ELSE
                BEGIN
                  _AcumularImportes(lrTMPPrv, rCI2, rCI2."Importe sin Impuesto" * (rCI2."Tipo cambio Factura" - rCI2."Tipo cambio FPR"))
                END;
              END;
              //+$014 >
            UNTIL rCI2.NEXT = 0;
          END;
        UNTIL lrDetVal.NEXT = 0;
      END;

      //+$014 <
      //. Asiento de ajuste de tasa
      _AsientoAjusteTasa(lrTMPPrv, rCabFra."Posting Date", rCabFra."Vendor Invoice No.", rCabFra."Buy-from Vendor No.",
                         rCabFra."Shortcut Dimension 1 Code");
      //+$014 >
    END;

    LOCAL PROCEDURE _Validacion_GO@8(rCabFra@1103355001 : Record 38;VAR prCabVal@1000000000 : Record 7009948);
    VAR
      lrTMPPrv@1100217000 : TEMPORARY Record 7010166;
      rCI2@1103355003 : Record 7010166;
      lrCI3@1000000002 : Record 7010166;
      lrDetVal@1000000001 : Record 7009949;
      nRegs@1103355004 : Integer;
      i@1103355005 : Integer;
    BEGIN
      // Validacion_GO

      //+$014
      CLEAR(lrTMPPrv);
      lrTMPPrv.DELETEALL;

      lrDetVal.RESET;
      lrDetVal.SETRANGE(Proveedor, prCabVal.Proveedor);
      lrDetVal.SETRANGE("No. Factura proveedor", prCabVal."No. Factura proveedor");
      lrDetVal.SETRANGE("Fecha registro", prCabVal."Fecha registro");
      IF lrDetVal.FINDSET THEN
      BEGIN
        nRegs := lrDetVal.COUNT;
        i := 0;
        Dialogo.UPDATE(1, Text043);
        REPEAT
          i := i + 1;
          Dialogo.UPDATE(2, ROUND((i * 10000) / nRegs, 1));

          rCI2.RESET;
          //rCI2.SETRANGE(Delegacion   , prCabVal.Departamento);
          rCI2.SETRANGE("N§ Servicio", lrDetVal."N§ Servicio");
          rCI2.SETRANGE(Concepto     , prCabVal."Tipo coste");
          rCI2.SETRANGE(Usuario      , prCabVal."No. Factura proveedor");
          rCI2.SETRANGE(Proveedor    , prCabVal.Proveedor);
          IF rCI2.FINDSET THEN
          BEGIN
            REPEAT
              lrCI3 := rCI2;
              lrCI3."N§ Factura"          := prCabVal."No. Factura proveedor";
              lrCI3.Usuario               := '';
              lrCI3."Tipo cambio Factura" := prCabVal."Tasa de cambio"; //+$012
              lrCI3.MODIFY;

              //. Si tenemos diferencia de tipo de cambio hay que generar un asiento de diferencia
              //+$014 <
              IF rCI2."Tipo cambio FPR" <> rCI2."Tipo cambio Factura" THEN
              BEGIN
                IF rParam."Registrar FPR con impuestos" THEN
                BEGIN
                  _AcumularImportes(lrTMPPrv, rCI2, rCI2."Importe con Impuesto" * (rCI2."Tipo cambio Factura" - rCI2."Tipo cambio FPR"))
                END
                ELSE
                BEGIN
                  _AcumularImportes(lrTMPPrv, rCI2, rCI2."Importe sin Impuesto" * (rCI2."Tipo cambio Factura" - rCI2."Tipo cambio FPR"))
                END;
              END;
              //+$014 >
            UNTIL rCI2.NEXT = 0;
          END;
        UNTIL lrDetVal.NEXT = 0;
      END;

      //+$014 <
      //. Asiento de ajuste de tasa
      _AsientoAjusteTasa(lrTMPPrv, rCabFra."Posting Date", rCabFra."Vendor Invoice No.", rCabFra."Buy-from Vendor No.",
                         rCabFra."Shortcut Dimension 1 Code");
      //+$014 >
    END;

    LOCAL PROCEDURE _buscar_touroperador@9(par_touroperador@1103355000 : Code[10]);
    VAR
      encontrado@1103355001 : Boolean;
    BEGIN
      // buscar_touroperador

      indice := 1;
      encontrado := FALSE;
      WHILE NOT encontrado DO
      BEGIN
        IF tab_touroperadores[indice] = '' THEN
        BEGIN
          tab_touroperadores[indice] := par_touroperador;
          encontrado := TRUE;
        END
        ELSE
        BEGIN
          IF tab_touroperadores[indice] = par_touroperador THEN
            encontrado := TRUE
          ELSE
            indice := indice + 1;
        END;
      END;
    END;

    PROCEDURE EntradaValidacion@1103355000(pwConcepto@1103355002 : Code[10]);
    VAR
      lrCI@1103355000 : Record 7010166;
      lrCond@1100253000 : Record 7010085;
      lfValidaCosteTR@1103355001 : Form 7010213;
      lfValidaCosteEX@1103355003 : Form 7010217;
      lfValidaCosteGO@1103355004 : Form 7010219;
    BEGIN
      // EntradaValidacion

      rParam.FINDFIRST;

      // Mostrar una ventana para que el usuario pueda establecer filtros de entrada a la ventana de validacion

      IF NOT lrCond.GET(USERID) THEN
      BEGIN
        CLEAR(lrCond);
        lrCond.Usuario := USERID;
        lrCond.INSERT;
      END;

      lrCond."Fecha desde" := 0D;
      lrCond."Fecha hasta" := 0D;
      lrCond.Proveedor     := '';
      lrCond.MODIFY;

      COMMIT;

      IF FORM.RUNMODAL(7009885, lrCond) <> ACTION::OK THEN
        EXIT;

      // Recuperamos el registro de condiciones

      lrCond.GET(USERID);

      // Filtramos las lineas de coste para llamar a la ventana

      lrCI.RESET;
      lrCI.SETCURRENTKEY(Delegacion,
                         Concepto,
                         Proveedor,
                         "N§ Factura",
                         Fecha);
      lrCI.FILTERGROUP(2);
      lrCI.SETRANGE(Delegacion, rParam.Delegacion);
      lrCI.SETRANGE(Concepto  , pwConcepto);
      lrCI.FILTERGROUP(0);

      IF lrCond."Fecha desde" <> 0D THEN
        lrCI.SETRANGE(Fecha, lrCond."Fecha desde", lrCond."Fecha hasta");
      IF lrCond.Proveedor <> '' THEN
        lrCI.SETRANGE(Proveedor, lrCond.Proveedor);
      lrCI.SETRANGE("N§ Factura", '');
      IF NOT lrCI.FINDFIRST THEN
      BEGIN
        lrCI.SETRANGE("N§ Factura");
        IF NOT lrCI.FINDFIRST THEN
          ERROR(Text045);
      END;

      CASE pwConcepto OF
        'EXAC':
        BEGIN
          CLEAR(lfValidaCosteTR);
          lfValidaCosteTR.SETTABLEVIEW(lrCI);
          lfValidaCosteTR.RUNMODAL;
        END;
        'EXCC':
        BEGIN
          CLEAR(lfValidaCosteEX);
          lfValidaCosteEX.SETTABLEVIEW(lrCI);
          lfValidaCosteEX.RUNMODAL;
        END;
        'EXGO':
        BEGIN
          CLEAR(lfValidaCosteGO);
          lfValidaCosteGO.SETTABLEVIEW(lrCI);
          lfValidaCosteGO.RUNMODAL;
        END;
      END;
    END;

    PROCEDURE TotalizarCostesVentana@1100217000(VAR prCostes@1100217000 : Record 7010166);
    VAR
      lwImporteTotal@1100217004 : Decimal;
      lwImporteTotalMarca@1100217003 : Decimal;
      lwVentana@1100217002 : Dialog;
    BEGIN
      lwImporteTotal := 0;
      lwImporteTotalMarca := 0;
      IF prCostes.FINDSET THEN
        REPEAT
          IF prCostes."Importe Validacion" = 0 THEN BEGIN
            CASE prCostes.Concepto OF
              'EXAC': BEGIN
                prCostes.CALCFIELDS("Importe Validados Trans");
                lwImporteTotal += (prCostes."Importe con Impuesto" - prCostes."Importe Validados Trans");
                IF prCostes.Usuario = UPPERCASE(USERID) THEN
                  lwImporteTotalMarca += (prCostes."Importe con Impuesto" - prCostes."Importe Validados Trans");
              END;
              'EXCC': BEGIN
                prCostes.CALCFIELDS("Importe Validados Excursion");
                lwImporteTotal += (prCostes."Importe con Impuesto" - prCostes."Importe Validados Excursion");
                IF prCostes.Usuario = UPPERCASE(USERID) THEN
                  lwImporteTotalMarca += (prCostes."Importe con Impuesto" - prCostes."Importe Validados Excursion");
              END;
              'EXGO': BEGIN
                prCostes.CALCFIELDS("Importe Validados GO");
                lwImporteTotal += (prCostes."Importe con Impuesto" - prCostes."Importe Validados GO");
                IF prCostes.Usuario = UPPERCASE(USERID) THEN
                  lwImporteTotalMarca += (prCostes."Importe con Impuesto" - prCostes."Importe Validados GO");
              END;
            END;
          END
          ELSE BEGIN
            lwImporteTotal += prCostes."Importe Validacion";
            IF prCostes.Usuario = UPPERCASE(USERID) THEN
              lwImporteTotalMarca += prCostes."Importe Validacion";
          END;
        UNTIL prCostes.NEXT = 0;
      lwImporteTotal := (-1) * lwImporteTotal;
      lwImporteTotalMarca := (-1) * lwImporteTotalMarca;

      //. Hacemos los round para visualizar los decimales correctos  ----

      lwImporteTotal := ROUND(lwImporteTotal);
      lwImporteTotalMarca := ROUND(lwImporteTotalMarca);

      lwVentana.OPEN(Text052 +
                     '\' +
                     Text053 +
                     '\' +
                     Text054 +
                     '\' +
                     Text055 +
                     '\' +
                     '#4#####################');
      lwVentana.UPDATE(1, lwImporteTotal);
      lwVentana.UPDATE(2, USERID);
      lwVentana.UPDATE(3, lwImporteTotalMarca);
      lwVentana.INPUT (4, Text051);
    END;

    LOCAL PROCEDURE _AsientoAjusteTasa@1100217001(VAR prTMPPrv@1100217007 : TEMPORARY Record 7010166;pwFecha@1100217000 : Date;pwFactura@1100217001 : Code[20];pwProveedor@1100217002 : Code[20];pwDepartamento@1100217005 : Code[10]);
    VAR
      lrCtas@1100217008 : Record 7009705;
      lwDoc@1100217003 : Code[20];
      lwTexto@1100217006 : Text[80];
      lwImporte@1100217004 : Decimal;
      lcSincro@1000000000 : Codeunit 7009793;
    BEGIN
      // Numero de asiento

      lwDoc := 'AJ' + pwFactura;

      lwTexto := STRSUBSTNO(Text056, pwFactura);

      CLEAR(prTMPPrv);
      IF prTMPPrv.FINDSET THEN
      BEGIN
        lrCtas.GET(prTMPPrv.Delegacion, prTMPPrv.TourOperador);
        REPEAT
          // Debe
          cFacturar.GenerarAsiento(0, 0, lrCtas."Cta. compra excursiones", prTMPPrv.Importe, pwDepartamento,
                                   prTMPPrv.TourOperador, lwDoc, pwFecha, 0, lwTexto, '', pwProveedor);
          // Haber
          cFacturar.GenerarAsiento(1, 0, rGrupo."Cta. FPR Excursiones", prTMPPrv.Importe, pwDepartamento,
                                   prTMPPrv.TourOperador, lwDoc, pwFecha, 0, lwTexto, '', pwProveedor);

          //+$028 <
          IF rParam."Registrar costes en comerciali" THEN
            lcSincro.SincronizaDiario(rParam.GetLibroDiarioGeneral, 'EXCUR', '', prTMPPrv.TourOperador);
          //+$028 >
        UNTIL prTMPPrv.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _AcumularImportes@1100217002(VAR prTMPPrv@1100217000 : TEMPORARY Record 7010166;lrCoste@1100217001 : Record 7010166;pwImporte@1100217002 : Decimal);
    BEGIN
      CLEAR(prTMPPrv);
      prTMPPrv.SETRANGE(TourOperador , lrCoste.TourOperador);
      IF NOT prTMPPrv.FINDSET THEN BEGIN
        CLEAR(prTMPPrv);
        prTMPPrv.Delegacion    := lrCoste.Delegacion;     //PK
        prTMPPrv."N§ Servicio" := lrCoste."N§ Servicio";  //PK
        prTMPPrv."Orden Linea" := lrCoste."Orden Linea";  //PK
        prTMPPrv.Proveedor     := lrCoste.Proveedor;
        prTMPPrv.TourOperador  := lrCoste.TourOperador;
        prTMPPrv.Fecha         := lrCoste.Fecha;
        prTMPPrv.INSERT;
      END;

      prTMPPrv.Importe -= pwImporte;
      prTMPPrv.Fecha := lrCoste.Fecha;
      prTMPPrv.MODIFY;
    END;

    LOCAL PROCEDURE _CheckReasonCode@1000000008();
    VAR
      lrReason@1000000000 : Record 231;
      TextCodAu@1000000001 : TextConst 'ENU=ATENNEA;ESP=ATENNEA';
    BEGIN
      // _CheckReasonCode

      IF NOT lrReason.GET(TextCodAu) THEN
      BEGIN
        lrReason.INIT;
        lrReason.Code        := TextCodAu;
        lrReason.Description := lrReason.Code;
        lrReason.INSERT;
      END;
    END;

    PROCEDURE BuscaCosteValidacion@1000000002(VAR prCabCoste@1000000000 : Record 7009948);
    VAR
      lrDetCoste@1000000001 : Record 7009949;
      lrCosteExc@1000000002 : Record 7010166;
      lrCosteExc2@1000000003 : Record 7010166;
    BEGIN
      // +$026
      // Si no est  todo relleno salimos
      IF (prCabCoste."Fecha desde" = 0D) OR
         (prCabCoste."Fecha hasta" = 0D) OR
         (prCabCoste.Proveedor = '') OR
         (prCabCoste.Departamento = '') OR
         (prCabCoste."No. Factura proveedor" = '') OR
         (prCabCoste."Fecha registro" = 0D) THEN
         EXIT;

      // Si ya hay alguna l¡nea pide si se recalcula
      lrDetCoste.RESET;
      lrDetCoste.SETRANGE(Proveedor              , prCabCoste.Proveedor);
      lrDetCoste.SETRANGE("No. Factura proveedor", prCabCoste."No. Factura proveedor");
      lrDetCoste.SETRANGE("Fecha registro"       , prCabCoste."Fecha registro");
      IF lrDetCoste.FINDFIRST THEN
      BEGIN
        IF NOT CONFIRM(Text060) THEN
          EXIT
        ELSE
        BEGIN
          lrDetCoste.DELETEALL(TRUE);

          prCabCoste."Importe proveedor"      := 0;
          prCabCoste."Importe proveedor (DL)" := 0;
          prCabCoste."Importe agencia"        := 0;
          prCabCoste."Importe agencia (DL)"   := 0;
          prCabCoste."Importe base"           := 0;
          prCabCoste."Importe exento"         := 0;
          prCabCoste.MODIFY;
        END;
      END
      ELSE
        IF NOT CONFIRM(Text061) THEN
          EXIT;

      // Buscamos los costes que est n dentro de la cabecera de validacion de coste
      lrCosteExc.RESET;
      lrCosteExc.SETCURRENTKEY(Excursion, TourOperador, Proveedor, "N§ Factura", "Automatico/Manual", Fecha);
      //lrCosteExc.SETRANGE (Delegacion  , prCabCoste.Departamento);
      lrCosteExc.SETRANGE (Proveedor   , prCabCoste.Proveedor);
      lrCosteExc.SETRANGE (Fecha       , prCabCoste."Fecha desde", prCabCoste."Fecha hasta");
      lrCosteExc.SETRANGE (Concepto    , prCabCoste."Tipo coste");
      lrCosteExc.SETFILTER("N§ Factura", '%1', '');
      lrCosteExc.SETRANGE (Usuario     , '');
      IF lrCosteExc.FINDFIRST THEN
      BEGIN
        REPEAT
          lrDetCoste.RESET;
          lrDetCoste.SETRANGE(Proveedor                , prCabCoste.Proveedor);
          lrDetCoste.SETRANGE("No. Factura proveedor"  , prCabCoste."No. Factura proveedor");
          lrDetCoste.SETRANGE("Fecha registro"         , prCabCoste."Fecha registro");
          lrDetCoste.SETRANGE("N§ Servicio / N§ Ticket", FORMAT(lrCosteExc."N§ Servicio"));
          IF lrCosteExc."Coste x Ticket" THEN
            lrDetCoste.SETRANGE("N§ Servicio / N§ Ticket", lrCosteExc."Num. Ticket");
          IF NOT lrDetCoste.FINDFIRST THEN
          BEGIN

            lrDetCoste.INIT;
            lrDetCoste.Proveedor                 := prCabCoste.Proveedor;
            lrDetCoste."No. Factura proveedor"   := prCabCoste."No. Factura proveedor";
            lrDetCoste."Fecha registro"          := prCabCoste."Fecha registro";
            lrDetCoste."N§ Servicio / N§ Ticket" := FORMAT(lrCosteExc."N§ Servicio");
            lrDetCoste."N§ Servicio"             := lrCosteExc."N§ Servicio";
            lrDetCoste."Orden Linea"             := lrCosteExc."Orden Linea";
            lrDetCoste."Coste x ticket"          := lrCosteExc."Coste x Ticket";
            lrDetCoste.Fecha                     := lrCosteExc.Fecha;
            lrDetCoste.Excursion                 := lrCosteExc.Excursion;

            IF lrCosteExc."Coste x Ticket" THEN
            BEGIN
              lrDetCoste."N§ Servicio / N§ Ticket"   := lrCosteExc."Num. Ticket";
              lrDetCoste."Booking Touroperador"      := lrCosteExc."Booking Touroperador";
              lrDetCoste."N§ Confirmacion proveedor" := lrCosteExc."Confirmacion proveedor";
            END;

            lrDetCoste.Cantidad                    := lrCosteExc."Cantidad Real";
            lrDetCoste."Cantidad proveedor"        := lrCosteExc."Cantidad Real";

            IF prCabCoste."Impuestos incluidos" THEN
            BEGIN
              lrDetCoste.Importe := (-1) * lrCosteExc."Importe con Impuesto";
              lrDetCoste."Importe proveedor" := (-1) * lrCosteExc."Importe con Impuesto";

              prCabCoste.VALIDATE("Importe agencia", prCabCoste."Importe agencia" + (-1) * lrCosteExc."Importe con Impuesto");
            END
            ELSE
            BEGIN
              lrDetCoste.Importe := (-1) * lrCosteExc."Importe sin Impuesto";
              lrDetCoste."Importe proveedor" := (-1) * lrCosteExc."Importe sin Impuesto";

              prCabCoste.VALIDATE("Importe agencia", prCabCoste."Importe agencia" + (-1) * lrCosteExc."Importe sin Impuesto");
            END;
            lrDetCoste.INSERT;

            IF prCabCoste."Cod. Divisa" = '' THEN
              prCabCoste.VALIDATE("Cod. Divisa", lrCosteExc."Cod. divisa")
            ELSE
              IF prCabCoste."Cod. Divisa" <> lrCosteExc."Cod. divisa" THEN
                ERROR(Text049);

            prCabCoste."Importe base" := (-1) * lrCosteExc."Importe base impuesto";
            prCabCoste."Importe exento" := (-1) * lrCosteExc."Importe exento";
          END
          ELSE
          BEGIN
            IF prCabCoste."Impuestos incluidos" THEN
            BEGIN
              lrDetCoste.Importe += (-1) * lrCosteExc."Importe con Impuesto";
              lrDetCoste."Importe proveedor" += (-1) * lrCosteExc."Importe con Impuesto";

              prCabCoste.VALIDATE("Importe agencia", prCabCoste."Importe agencia" + (-1) * lrCosteExc."Importe con Impuesto");
            END
            ELSE
            BEGIN
              lrDetCoste.Importe += (-1) * lrCosteExc."Importe sin Impuesto";
              lrDetCoste."Importe proveedor" += (-1) * lrCosteExc."Importe sin Impuesto";

              prCabCoste.VALIDATE("Importe agencia", prCabCoste."Importe agencia" + (-1) * lrCosteExc."Importe sin Impuesto");
            END;

            IF lrCosteExc."Tipo Elemento" IN [lrCosteExc."Tipo Elemento"::Paxes, lrCosteExc."Tipo Elemento"::Servicio] THEN
            BEGIN
              lrDetCoste.Cantidad             += lrCosteExc."Cantidad Real";
              lrDetCoste."Cantidad proveedor" += lrCosteExc."Cantidad Real";
            END;
            lrDetCoste.MODIFY;

            prCabCoste."Importe base" += (-1) * lrCosteExc."Importe base impuesto";
            prCabCoste."Importe exento" += (-1) * lrCosteExc."Importe exento";
          END;

          lrCosteExc2 := lrCosteExc;
          lrCosteExc2.Usuario := prCabCoste."No. Factura proveedor";
          lrCosteExc2.MODIFY;
        UNTIL lrCosteExc.NEXT = 0;
      END;
      prCabCoste.MODIFY;
    END;

    PROCEDURE AgregarCoste@1000000005(VAR prCabCoste@1000000000 : Record 7009948);
    VAR
      lrDetCoste@1000000001 : Record 7009949;
      lrCosteExc@1000000002 : Record 7010166;
      lrCosteExc2@1000000004 : Record 7010166;
      lfCoste@1000000003 : Form 7010217;
    BEGIN
      // +$026
      // Si no est  todo relleno salimos
      IF (prCabCoste."Fecha desde" = 0D) OR
         (prCabCoste."Fecha hasta" = 0D) OR
         (prCabCoste.Proveedor = '') OR
         (prCabCoste.Departamento = '') OR
         (prCabCoste."No. Factura proveedor" = '') OR
         (prCabCoste."Fecha registro" = 0D) THEN
         EXIT;

      // Buscamos los costes que est n dentro de la cabecera de validacion de coste
      lrCosteExc.RESET;
      lrCosteExc.SETCURRENTKEY(Excursion, TourOperador, Proveedor, "N§ Factura", "Automatico/Manual", Fecha);
      lrCosteExc.FILTERGROUP(2);
      lrCosteExc.SETRANGE (Proveedor   , prCabCoste.Proveedor);
      lrCosteExc.SETRANGE (Fecha       , prCabCoste."Fecha desde", prCabCoste."Fecha hasta");
      lrCosteExc.SETRANGE (Concepto    , prCabCoste."Tipo coste");
      lrCosteExc.SETFILTER("N§ Factura", '%1', '');
      lrCosteExc.SETFILTER(Usuario     , '%1|%2', '', UPPERCASE(USERID));
      lrCosteExc.FILTERGROUP(0);
      IF lrCosteExc.FINDFIRST THEN
      BEGIN
        // Mostramos formulario para que seleccionen el coste a a¤adir
        CLEAR(lfCoste);
        lfCoste.SETTABLEVIEW(lrCosteExc);
        lfCoste.LOOKUPMODE(TRUE);
        IF lfCoste.RUNMODAL = ACTION::LookupOK THEN
        BEGIN
          //-$035lfCoste.GetSeleccion(lrCosteExc);
          //+$035 <
          lrCosteExc.FILTERGROUP(2);
          lrCosteExc.SETRANGE(Usuario, UPPERCASE(USERID));
          lrCosteExc.FILTERGROUP(0);
          //+$035 >
          IF lrCosteExc.FINDSET THEN
          BEGIN
            REPEAT
              lrDetCoste.RESET;
              lrDetCoste.SETRANGE(Proveedor                , prCabCoste.Proveedor);
              lrDetCoste.SETRANGE("No. Factura proveedor"  , prCabCoste."No. Factura proveedor");
              lrDetCoste.SETRANGE("Fecha registro"         , prCabCoste."Fecha registro");
              lrDetCoste.SETRANGE("N§ Servicio / N§ Ticket", FORMAT(lrCosteExc."N§ Servicio"));
              IF lrCosteExc."Coste x Ticket" THEN
                lrDetCoste.SETRANGE("N§ Servicio / N§ Ticket", lrCosteExc."Num. Ticket");
              IF NOT lrDetCoste.FINDFIRST THEN
              BEGIN
                lrDetCoste.INIT;
                lrDetCoste.Proveedor                 := prCabCoste.Proveedor;
                lrDetCoste."No. Factura proveedor"   := prCabCoste."No. Factura proveedor";
                lrDetCoste."Fecha registro"          := prCabCoste."Fecha registro";
                lrDetCoste."N§ Servicio / N§ Ticket" := FORMAT(lrCosteExc."N§ Servicio");
                lrDetCoste."N§ Servicio"             := lrCosteExc."N§ Servicio";
                lrDetCoste."Orden Linea"             := lrCosteExc."Orden Linea";
                lrDetCoste."Coste x ticket"          := lrCosteExc."Coste x Ticket";
                lrDetCoste.Fecha                     := lrCosteExc.Fecha;
                lrDetCoste.Excursion                 := lrCosteExc.Excursion;

                IF lrCosteExc."Coste x Ticket" THEN
                BEGIN
                  lrDetCoste."N§ Servicio / N§ Ticket"   := lrCosteExc."Num. Ticket";
                  lrDetCoste."Booking Touroperador"      := lrCosteExc."Booking Touroperador";
                  lrDetCoste."N§ Confirmacion proveedor" := lrCosteExc."Confirmacion proveedor";
                END;
                lrDetCoste.Cantidad                    := lrCosteExc."Cantidad Real";
                lrDetCoste."Cantidad proveedor"        := lrCosteExc."Cantidad Real";

                IF prCabCoste."Impuestos incluidos" THEN
                BEGIN
                  lrDetCoste.Importe := (-1) * lrCosteExc."Importe con Impuesto";
                  lrDetCoste."Importe proveedor" := (-1) * lrCosteExc."Importe con Impuesto";

                  prCabCoste.VALIDATE("Importe agencia", prCabCoste."Importe agencia" + (-1) * lrCosteExc."Importe con Impuesto");
                END
                ELSE
                BEGIN
                  lrDetCoste.Importe := (-1) * lrCosteExc."Importe sin Impuesto";
                  lrDetCoste."Importe proveedor" := (-1) * lrCosteExc."Importe sin Impuesto";

                  prCabCoste.VALIDATE("Importe agencia", prCabCoste."Importe agencia" + (-1) * lrCosteExc."Importe sin Impuesto");
                END;

                lrDetCoste.INSERT(TRUE);

                IF prCabCoste."Cod. Divisa" = '' THEN
                  prCabCoste.VALIDATE("Cod. Divisa", lrCosteExc."Cod. divisa")
                ELSE
                  IF prCabCoste."Cod. Divisa" <> lrCosteExc."Cod. divisa" THEN
                    ERROR(Text049);

                prCabCoste."Importe base" += (-1) * lrCosteExc."Importe base impuesto";
                prCabCoste."Importe exento" += (-1) * lrCosteExc."Importe exento";
              END
              ELSE
              BEGIN
                IF prCabCoste."Impuestos incluidos" THEN
                BEGIN
                  lrDetCoste.Importe += (-1) * lrCosteExc."Importe con Impuesto";
                  lrDetCoste."Importe proveedor" += (-1) * lrCosteExc."Importe con Impuesto";

                  prCabCoste.VALIDATE("Importe agencia", prCabCoste."Importe agencia" + (-1) * lrCosteExc."Importe con Impuesto");
                END
                ELSE
                BEGIN
                  lrDetCoste.Importe += (-1) * lrCosteExc."Importe sin Impuesto";
                  lrDetCoste."Importe proveedor" += (-1) * lrCosteExc."Importe sin Impuesto";

                  prCabCoste.VALIDATE("Importe agencia", prCabCoste."Importe agencia" + (-1) * lrCosteExc."Importe sin Impuesto");
                END;

                IF lrCosteExc."Tipo Elemento" IN [lrCosteExc."Tipo Elemento"::Paxes, lrCosteExc."Tipo Elemento"::Servicio] THEN
                BEGIN
                  lrDetCoste.Cantidad             += lrCosteExc."Cantidad Real";
                  lrDetCoste."Cantidad proveedor" += lrCosteExc."Cantidad Real";
                END;
                lrDetCoste.MODIFY(TRUE);

                IF prCabCoste."Cod. Divisa" = '' THEN
                  prCabCoste.VALIDATE("Cod. Divisa", lrCosteExc."Cod. divisa")
                ELSE
                  IF prCabCoste."Cod. Divisa" <> lrCosteExc."Cod. divisa" THEN
                    ERROR(Text049);

                prCabCoste."Importe base" += (-1) * lrCosteExc."Importe base impuesto";
                prCabCoste."Importe exento" += (-1) * lrCosteExc."Importe exento";
              END;

              lrCosteExc2 := lrCosteExc;
              lrCosteExc2.Usuario := prCabCoste."No. Factura proveedor";
              lrCosteExc2.MODIFY;
            UNTIL lrCosteExc.NEXT = 0;
          END;
        END;
      END;
      prCabCoste.MODIFY;
    END;

    PROCEDURE EliminaCoste@1000000000(VAR prDet@1000000000 : Record 7009949);
    VAR
      lrDet2@1000000001 : Record 7009949;
      lrCabCoste@1000000002 : Record 7009948;
    BEGIN
      // +$026
      IF CONFIRM(Text062) THEN
      BEGIN
        IF prDet.FINDSET(TRUE) THEN
        BEGIN
          REPEAT
            lrCabCoste.RESET;
            IF lrCabCoste.GET(prDet.Proveedor, prDet."No. Factura proveedor", prDet."Fecha registro") THEN
            BEGIN
              lrCabCoste.VALIDATE(lrCabCoste."Importe agencia" , lrCabCoste."Importe agencia" - prDet.Importe);
              lrCabCoste.MODIFY;
            END;

            lrDet2 := prDet;
            lrDet2.DELETE(TRUE);
          UNTIL prDet.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE DesmarcarCoste@1000000003(prCabCoste@1000000002 : Record 7009948;prDetCoste@1000000001 : Record 7009949);
    VAR
      lrCoste@1000000000 : Record 7010166;
    BEGIN
      // DesmarcarCoste

      //. Quitamos la marca de usuario de las lineas de coste para que puedan volver a ser cogidas en otra factura

      lrCoste.RESET;
      lrCoste.SETRANGE(Proveedor   , prDetCoste.Proveedor);
      lrCoste.SETRANGE(Concepto    , prCabCoste."Tipo coste");
      lrCoste.SETRANGE("N§ Factura", '');
      lrCoste.SETRANGE(Usuario     , prDetCoste."No. Factura proveedor");
      IF prDetCoste."Coste x ticket" THEN
        lrCoste.SETRANGE("Num. Ticket", prDetCoste."N§ Servicio / N§ Ticket")
      ELSE
        lrCoste.SETRANGE("N§ Servicio", prDetCoste."N§ Servicio");
      IF lrCoste.FINDSET(TRUE) THEN
        lrCoste.MODIFYALL(Usuario, '');
    END;

    PROCEDURE ValidarCoste@1000000001(VAR prCabCoste@1000000000 : Record 7009948);
    VAR
      lrDetVal@1000000001 : Record 7009949;
    BEGIN
      // +$026

      IF prCabCoste.Registrada THEN
        ERROR(Text059);

      cFunSeg.TienePermiso('EXC-VAL-COS', TRUE); // $008

      Dialogo.OPEN(Text000 +
                   '  #1###############################\' +
                   '  @2@@@@@@@@@@@@@@@@@@@@@@');

      rParam.FINDFIRST;

      // Comprobamos que no se haya reclamado
      lrDetVal.RESET;
      lrDetVal.SETRANGE(Proveedor              , prCabCoste.Proveedor);
      lrDetVal.SETRANGE("No. Factura proveedor", prCabCoste."No. Factura proveedor");
      lrDetVal.SETRANGE("Fecha registro"       , prCabCoste."Fecha registro");
      lrDetVal.SETRANGE(Reclamar               , TRUE);
      IF lrDetVal.FINDFIRST THEN
        ERROR(Text058);

      _CheckCabecera(prCabCoste); //+$036

      _Repasar_Servicios(prCabCoste);
      IF _Proveedor_Encontrado(prCabCoste) THEN
        _Facturar(prCabCoste);
      Dialogo.CLOSE;
      COMMIT;
    END;

    PROCEDURE SendReclamacionEmail@1020008(VAR prCabCoste@1000000000 : Record 7009948);
    VAR
      lrDetVal@1000000001 : Record 7009949;
      SMTPMail@1020005 : Codeunit 400;
      lvSubject@1000000002 : Text[200];
      lText001@1000000003 : TextConst 'ENU="Claim Invoice ";ESP="Reclamaci¢n Factura "';
      lvBody@1000000004 : Text[1024];
    BEGIN
      // +$026

      lrDetVal.RESET;
      lrDetVal.SETRANGE(Proveedor              , prCabCoste.Proveedor);
      lrDetVal.SETRANGE("No. Factura proveedor", prCabCoste."No. Factura proveedor");
      lrDetVal.SETRANGE("Fecha registro"       , prCabCoste."Fecha registro");
      lrDetVal.SETRANGE(Reclamar               , TRUE);
      IF lrDetVal.FINDSET THEN
      BEGIN
        rParam.FINDFIRST;
        rParam.TESTFIELD(rParam."Email env¡o reclamaciones");

        rProveedor.RESET;
        rProveedor.GET(prCabCoste.Proveedor);
        rProveedor.TESTFIELD(rProveedor."E-Mail");

        lvSubject := lText001 + prCabCoste."No. Factura proveedor";

        SMTPMail.CreateMessage(Text063, rParam."Email env¡o reclamaciones", rProveedor."E-Mail", lvSubject, '', TRUE);

        SMTPMail.AppendBody(STRSUBSTNO(Text068, prCabCoste."Fecha emision proveedor") + '<br>' + '<br>');
        REPEAT
          IF lrDetVal."Coste x ticket" THEN
            lvBody := Text070 + ' ' + lrDetVal."N§ Servicio / N§ Ticket" + ' ' + Text065 + ' ' + cNom.nom_producto(lrDetVal.Excursion) +
                      ' ' + Text066 + ' ' + FORMAT(lrDetVal.Cantidad) + ' ' + Text067 + ' ' + FORMAT(lrDetVal.Importe) + '<br>'
          ELSE
            lvBody := Text064 + ' ' + lrDetVal."N§ Servicio / N§ Ticket" + ' ' + Text065 + ' ' + cNom.nom_producto(lrDetVal.Excursion) +
                      ' ' + Text066 + ' ' + FORMAT(lrDetVal.Cantidad) + ' ' + Text067 + ' ' + FORMAT(lrDetVal.Importe) + '<br>';

          SMTPMail.AppendBody(lvBody);
        UNTIL lrDetVal.NEXT = 0;
        SMTPMail.AppendBody('<br>' + Text069);

        SMTPMail.Send;

        prCabCoste."Reclamacion enviada" := TRUE;
        prCabCoste."Reclamada dia"       := TODAY;
        prCabCoste."Reclamada usuario"   := USERID;
        prCabCoste.MODIFY;
      END;
    END;

    LOCAL PROCEDURE _CheckCabecera@1000000004(prCabCoste@1000000000 : Record 7009948);
    BEGIN
      // _CheckCabecera

      IF (prCabCoste."Comprobante Fiscal" = '') AND (prCabCoste."Digitos fijos NCF" <> '') THEN //+$003
        ERROR(Text048);

      IF prCabCoste.Proveedor = '' THEN
        ERROR(Text015);

      IF NOT rProveedor.GET(prCabCoste.Proveedor) THEN
        ERROR(Text012, prCabCoste.Proveedor);

      IF NOT rGrupo.GET(rProveedor."Vendor Posting Group") THEN
        ERROR(Text013, rProveedor."Vendor Posting Group");

      IF prCabCoste."Fecha emision proveedor" = 0D THEN
        ERROR(Text016);

      IF prCabCoste."No. Factura proveedor" = '' THEN
        ERROR(Text017);

      IF prCabCoste."Importe proveedor" = 0 THEN
        ERROR(Text018);

      IF prCabCoste."Codigo de barras" = '' THEN
        ERROR(Text044);

      prCabCoste.TESTFIELD(Departamento);
    END;

    BEGIN
    {
      $001 AJF 09032011 Se modifican las condiciones que aparecen al validar para incluir el grupo de NCF y
                        el c¢digo de comprobante fiscal asociado que se va a incluir en la factura de compra.

      $002 AJS 13052011 He modificado la tabla de condiciones para tener una tabla propia para los temas de excursiones

      $003 AJS 24052011 La comprobacion de Comprobante fiscal rellenado solo debe hacerse si el proveedor tiene digitos fijos

      $004 AJS 01062011 El control de ingresos facturados lo paso a nivel de reserva

      $005 AJF 04072011 (GOC-OC-11016) Se comprueba que los datos de divisa sean los mismos entre todas las l¡neas
                        a validar (c¢digo de divisa). Se usa la divisa para generar la factura.

      $006 JPT 29/05/12  CNT-CAR-12004/EXC-15 - Providers confirmations - Mostramos las lineas de confirmaci¢n de proveedor para
           que sean marcadas

      $007 JPT 08/08/12 CNT-OC-12004 Incluir filtro por oficina en las excursiones. Codigo Oficina en Dimension Departamento

      $008 AJS 23082012 Control de seguridad por usuario

      $009 AJS 22092012 Utilizar siempre la serie de facturacion estandar

      $010 AJS 27112012 En algunos casos casos la divisa del contrato no coincide con la divisa del proveedor, en esos casos
                        la factura se debe hacer en la divisa de la ficha contable

      $011 AJS 25032013 Nuevo parametro para indicar si se permiten validaciones parciales

      $012 AJS 20052013 Recogemos la tasa de cambio que el usuario quiere aplicar

      $013 AJS 17062013 Elimino la funcionalidad de confirmacion proveedor que se sustituye por el costeo por ticket

      $014 AJS 18062013 Al hacer la factura comprobamos si se producen diferencias de cambio entre el FPR y la factura

      $015 AJS 28062013 Incluyo la posibilidad de que el usuario introduzca la fecha de registro de la factura proveedor

      $016 AJS 07082013 La divisa que mostramos en la ficha de condiciones debe ser la de costes

      $017 AJS 26082013 Elimino las referencias a la tabla Maestro de claves porque es obsoleta

      $018 AJS 04092013 Corrijo un error que permitia validar facturas por encima del importe pendiente

      $019 AJS 28112013 Si se permiten validaciones parciales vamos a respetar el importe validacion

      $020 AJS 17032014 Cambio la llamada a la funcion que crea el asiento de ajuste de tasa para que utilice el proveedor de factura
                        en lugar del proveedor de pago

      $021 AJS 18062014 Comprobar que la fecha de registro no esta bloqueada en contabilidad

      $022 AJS 20082014 CNT-OC-14077, Creamos las lineas de factura con los importes base y exentos

      $023 AJS 18102014 Corregir el rellenado de Amount y Amount including VAT

      $024 AJS 21112014 Utilizo la funcion ActualizaCamposImporte de las lineas de factura para rellenar los campos
                        Amount y Amount incl. VAT

      $025 AJS 21012015 Ejecutar el proceso estandar de Lanzar Factura

      $026 ARM 16042015 CNT-OC-14068 Cambio para validar costes a travs de cabecera y detalle

      $027 AJS 06052015 El campo Reason code no se rellena hasta el final del proceso

      $028 AJS 11052015 En algunas empresas no se registran las facturas, se traspasan a comercializadora

      $029 AJS 08062015 Algunos touroperadores convierten codigo en la empresa offshore

      $030 AJS 19062015 Corregir error en al agregar coste por servicio

      $031 AJS 30062015 Modificaciones para permitir la validacion parcial de servicios

      $032 AJS 06072015 En la funcion BuscaCosteValidacion si no hay que recalcular las lineas hacemos exit, no error

      $033 AJS 06072015 No podemos utilizar el campo Departamento de la factura para filtrar en costes

      $034 AJS 09072015 Corregir error en las validaciones parciales de servicios

      $035 AJS 24072015 Modifico la funcion AgregarCoste para trabajar con el filtro de Usuario

      $036 AJS 27072015 Saco las verificaciones de la cabecera a una funcion _CheckCabecera

      $037 AJS 27072015 Modifico la funcion _Repasar_Servicios para comprobar que Importe proveedor coincida con la suma
                        de las lineas
    }
    END.
  }
}
