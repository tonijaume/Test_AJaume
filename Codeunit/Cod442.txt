OBJECT Codeunit 442 Sales-Post Prepayments
{
  OBJECT-PROPERTIES
  {
    Date=25/08/11;
    Time=12:00:00;
    Version List=NAVW16.00.01,NAVES6.00,RegF269949;
  }
  PROPERTIES
  {
    Permissions=TableData 37=imd,
                TableData 49=imd,
                TableData 112=imd,
                TableData 113=imd,
                TableData 114=imd,
                TableData 115=imd,
                TableData 252=imd,
                TableData 357=imd,
                TableData 359=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=is not within your range of allowed posting dates;ESP=no est  dentro del periodo de fechas de registro permitidas';
      GLSetup@1024 : Record 98;
      GenPostingSetup@1002 : Record 252;
      Text001@1003 : TextConst 'ENU=There is nothing to post.;ESP=No hay nada que registrar.';
      Text002@1006 : TextConst 'ENU=Posting Prepayment Lines   #2######\;ESP=Registrando l¡neas prepago #2######\';
      Text003@1004 : TextConst 'ENU=%1 %2 -> Invoice %3;ESP=%1 %2 -> Factura %3';
      Text004@1005 : TextConst 'ENU=Posting sales and VAT      #3######\;ESP=Registrando venta e IVA    #3######\';
      Text005@1007 : TextConst 'ENU=Posting to customers       #4######\;ESP=Registrando cliente        #4######\';
      Text006@1022 : TextConst 'ENU=Posting to bal. account    #5######;ESP=Registrando contrapartida  #5######';
      Text007@1009 : TextConst 'ENU=The combination of dimensions used in %1 %2 is blocked. %3;ESP=La combinaci¢n de dimensiones utilizada en %1 %2 est  bloqueada. %3';
      Text008@1008 : TextConst 'ENU=The combination of dimensions used in %1 %2, line no. %3 is blocked. %4;ESP=La combinaci¢n de dimensiones utilizada en %1 %2, n§ l¡nea %3 est  bloqueada. %4';
      Text009@1011 : TextConst 'ENU=The dimensions used in %1 %2 are invalid. %3;ESP=Las dimensiones usadas en %1 %2 no son v lidas. %3';
      Text010@1010 : TextConst 'ENU=The dimensions used in %1 %2, line no. %3 are invalid. %4;ESP=Las dim. usadas en %1 %2, n§ l¡n. %3 no son v lidas. %4';
      GenJnlPostLine@1013 : Codeunit 12;
      DimBufMgt@1012 : Codeunit 411;
      Text011@1001 : TextConst 'ENU=%1 %2 -> Credit Memo %3;ESP=%1 %2 -> Abono %3';
      Text012@1015 : TextConst 'ENU=Prepayment %1, %2 %3.;ESP=%1 de prepago, %2 %3.';
      Text013@1016 : TextConst 'ENU=It is not possible to assign a prepayment amount of %1 to the sales lines.;ESP=No es posible asignar un importe prepago de %1 a las l¡neas de ventas.';
      Text014@1018 : TextConst 'ENU=VAT Amount;ESP=Importe IVA';
      Text015@1017 : TextConst 'ENU=%1% VAT;ESP=%1% IVA';
      Text016@1019 : TextConst 'ENU=The new prepayment amount must be between %1 and %2.;ESP=El nuevo importe de prepago debe estar entre %1 y %2.';
      Text017@1020 : TextConst 'ENU=At least one line must have %1 > 0 to distribute prepayment amount.;ESP=Al menos una l¡nea debe tener %1 > 0 para distribuir como importe prepago.';
      Text018@1021 : TextConst 'ENU=must be positive when %1 is not 0;ESP=debe ser positivo cuando %1 no es 0';
      Text019@1014 : TextConst 'ENU=Invoice,Credit Memo;ESP=Factura,Abono';
      CurrExchRate@1023 : Record 330;

    PROCEDURE Invoice@9(VAR SalesHeader@1000 : Record 36);
    BEGIN
      Code(SalesHeader,0);
    END;

    PROCEDURE CreditMemo@10(VAR SalesHeader@1000 : Record 36);
    BEGIN
      Code(SalesHeader,1);
    END;

    LOCAL PROCEDURE Code@2(VAR SalesHeader2@1013 : Record 36;DocumentType@1022 : 'Invoice,Credit Memo');
    VAR
      SalesSetup@1010 : Record 311;
      SourceCodeSetup@1027 : Record 242;
      PaymentTerms@1030 : Record 3;
      Cust@1029 : Record 18;
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      SalesInvHeader@1002 : Record 112;
      SalesCrMemoHeader@1023 : Record 114;
      SalesInvLine@1014 : Record 113;
      SalesCrMemoLine@1024 : Record 115;
      PrepmtInvBuffer@1021 : TEMPORARY Record 461;
      TotalPrepmtInvLineBuffer@1019 : Record 461;
      TotalPrepmtInvLineBufferLCY@1020 : Record 461;
      GenJnlLine@1012 : Record 81;
      TempVATAmountLine@1000000002 : TEMPORARY Record 290;
      TempVATAmountLineDeduct@1015 : TEMPORARY Record 290;
      TempDocDim@1017 : TEMPORARY Record 357;
      TempJnlLineDim@1018 : TEMPORARY Record 356;
      TempDimBuf@1011 : TEMPORARY Record 360;
      CustLedgEntry@1031 : Record 21;
      DocDim@1033 : Record 357;
      TempSalesLines@1032 : TEMPORARY Record 37;
      GenJnlCheckLine@1009 : Codeunit 11;
      NoSeriesMgt@1008 : Codeunit 396;
      DimMgt@1007 : Codeunit 408;
      Window@1000000003 : Dialog;
      GenJnlLineDocNo@1006 : Code[20];
      GenJnlLineExtDocNo@1005 : Code[20];
      SrcCode@1004 : Code[10];
      PostingDescription@1028 : Text[50];
      GenJnlLineDocType@1003 : Integer;
      PrevLineNo@1016 : Integer;
      LineCount@1000000004 : Integer;
      PostedDocTabNo@1025 : Integer;
      LineNo@1026 : Integer;
    BEGIN
      SalesHeader := SalesHeader2;
      GLSetup.GET;
      WITH SalesHeader DO BEGIN
        TESTFIELD("Document Type","Document Type"::Order);
        TESTFIELD("Sell-to Customer No.");
        TESTFIELD("Bill-to Customer No.");
        TESTFIELD("Posting Date");
        TESTFIELD("Document Date");
        IF GenJnlCheckLine.DateNotAllowed("Posting Date") THEN
          FIELDERROR("Posting Date",Text000);

        IF NOT CheckOpenPrepaymentLines(SalesHeader,DocumentType) THEN
          ERROR(Text001);

        CopyAndCheckDocDimToTempDocDim(TempDocDim,SalesHeader);

        Cust.GET("Sell-to Customer No.");
        Cust.CheckBlockedCustOnDocs(Cust,PrepmtDocTypeToDocType("Document Type"),FALSE,TRUE);
        IF "Bill-to Customer No." <> "Sell-to Customer No." THEN BEGIN
          Cust.GET("Bill-to Customer No.");
          Cust.CheckBlockedCustOnDocs(Cust,PrepmtDocTypeToDocType("Document Type"),FALSE,TRUE);
        END;

        // Get Doc. No. and save
        CASE DocumentType OF
          DocumentType::Invoice:
            BEGIN
              TESTFIELD("Prepayment Due Date");
              PaymentTerms.GET("Prepmt. Payment Terms Code");
              PaymentTerms.VerifyMaxNoDaysTillDueDate("Prepayment Due Date","Document Date",FIELDCAPTION("Prepayment Due Date"));
              TESTFIELD("Prepmt. Cr. Memo No.",'');
              IF "Prepayment No." = '' THEN BEGIN
                TESTFIELD("Prepayment No. Series");
                "Prepayment No." :=
                  NoSeriesMgt.GetNextNo("Prepayment No. Series","Posting Date",TRUE);
                MODIFY;
                COMMIT;
              END;
              GenJnlLineDocNo := "Prepayment No.";
            END;
          DocumentType::"Credit Memo":
            BEGIN
              TESTFIELD("Prepayment No.",'');
              IF "Prepmt. Cr. Memo No." = '' THEN BEGIN
                TESTFIELD("Prepmt. Cr. Memo No. Series");
                "Prepmt. Cr. Memo No." :=
                  NoSeriesMgt.GetNextNo("Prepmt. Cr. Memo No. Series","Posting Date",TRUE);
                MODIFY;
                COMMIT;
              END;
              GenJnlLineDocNo := "Prepmt. Cr. Memo No.";
            END;
        END;

        Window.OPEN(
          '#1#################################\\' +
          Text002 +
          Text004 +
          Text005 +
          Text006);
        Window.UPDATE(1,STRSUBSTNO('%1 %2',SELECTSTR(1 + DocumentType,Text019),"No."));

        SalesSetup.GET;
        SourceCodeSetup.GET;
        SrcCode := SourceCodeSetup.Sales;
        IF "Prepmt. Posting Description" <> '' THEN
          PostingDescription := "Prepmt. Posting Description"
        ELSE
          PostingDescription :=
            COPYSTR(
              STRSUBSTNO(Text012,SELECTSTR(1 + DocumentType,Text019),"Document Type","No."),
              1,MAXSTRLEN("Posting Description"));

        // Create posted header
        IF SalesSetup."Ext. Doc. No. Mandatory" THEN
          TESTFIELD("External Document No.");
        CASE DocumentType OF
          DocumentType::Invoice:
            BEGIN
              SalesInvHeader.INIT;
              SalesInvHeader.TRANSFERFIELDS(SalesHeader);
              SalesInvHeader."Posting Description" := PostingDescription;
              SalesInvHeader."Payment Terms Code" := "Prepmt. Payment Terms Code";
              SalesInvHeader."Due Date" := "Prepayment Due Date";
              SalesInvHeader."Pmt. Discount Date" := "Prepmt. Pmt. Discount Date";
              SalesInvHeader."Payment Discount %" := "Prepmt. Payment Discount %";
              SalesInvHeader."Date Sent" := 0D;
              SalesInvHeader."Time Sent" := 0T;
              SalesInvHeader."No." := GenJnlLineDocNo;
              SalesInvHeader."Pre-Assigned No. Series" := '';
              SalesInvHeader."Source Code" := SrcCode;
              SalesInvHeader."User ID" := USERID;
              SalesInvHeader."No. Printed" := 0;
              SalesInvHeader."Prepayment Invoice" := TRUE;
              SalesInvHeader."Prepayment Order No." := "No.";
              SalesInvHeader.INSERT;
              GenJnlLineDocType := GenJnlLine."Document Type"::Invoice;
              PostedDocTabNo := DATABASE::"Sales Invoice Header";
              Window.UPDATE(1,STRSUBSTNO(Text003,"Document Type","No.",SalesInvHeader."No."));
            END;
          DocumentType::"Credit Memo":
            BEGIN
              SalesCrMemoHeader.INIT;
              SalesCrMemoHeader.TRANSFERFIELDS(SalesHeader);
              SalesCrMemoHeader."Payment Terms Code" := "Prepmt. Payment Terms Code";
              SalesCrMemoHeader."Pmt. Discount Date" := "Prepmt. Pmt. Discount Date";
              SalesCrMemoHeader."Payment Discount %" := "Prepmt. Payment Discount %";
              IF "Prepmt. Payment Terms Code" <> '' THEN BEGIN
                PaymentTerms.GET("Prepmt. Payment Terms Code");
                IF NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN BEGIN
                  SalesCrMemoHeader."Payment Discount %" := 0;
                  SalesCrMemoHeader."Pmt. Discount Date" := 0D;
                END;
              END;
              SalesCrMemoHeader."Posting Description" := PostingDescription;
              SalesCrMemoHeader."Due Date" := "Prepayment Due Date";
              SalesCrMemoHeader."Date Sent" := 0D;
              SalesCrMemoHeader."Time Sent" := 0T;
              SalesCrMemoHeader."No." := GenJnlLineDocNo;
              SalesCrMemoHeader."Pre-Assigned No. Series" := '';
              SalesCrMemoHeader."Source Code" := SrcCode;
              SalesCrMemoHeader."User ID" := USERID;
              SalesCrMemoHeader."No. Printed" := 0;
              SalesCrMemoHeader."Prepayment Credit Memo" := TRUE;
              SalesCrMemoHeader."Prepayment Order No." := "No.";
              SalesCrMemoHeader.Correction := GLSetup."Mark Cr. Memos as Corrections";
              SalesCrMemoHeader.INSERT;
              GenJnlLineDocType := GenJnlLine."Document Type"::"Credit Memo";
              PostedDocTabNo := DATABASE::"Sales Cr.Memo Header";
              Window.UPDATE(1,STRSUBSTNO(Text011,"Document Type","No.",SalesCrMemoHeader."No."));
            END;
        END;
        DimMgt.MoveOneDocDimToPostedDocDim(
          TempDocDim,DATABASE::"Sales Header","Document Type","No.",0,PostedDocTabNo,GenJnlLineDocNo);
        IF SalesSetup."Copy Comments Order to Invoice" THEN
          CopyCommentLines("No.",PostedDocTabNo,GenJnlLineDocNo);
        GenJnlLineExtDocNo := "External Document No.";
        // Reverse old lines
        IF (DocumentType = DocumentType::Invoice) THEN BEGIN
          GetSalesLinesToDeduct(SalesHeader,TempSalesLines);
          IF NOT TempSalesLines.ISEMPTY THEN
            CalcVATAmountLines(SalesHeader,TempSalesLines,TempVATAmountLineDeduct,DocumentType::"Credit Memo");
        END;

        // Create Lines
        PrepmtInvBuffer.DELETEALL;
        CalcVATAmountLines(SalesHeader,SalesLine,TempVATAmountLine,DocumentType);
        IF TempVATAmountLine.FINDSET THEN
          REPEAT
            TempVATAmountLineDeduct := TempVATAmountLine;
            IF TempVATAmountLineDeduct.FIND THEN BEGIN
              TempVATAmountLine."VAT+EC Base" := TempVATAmountLine."VAT+EC Base" - TempVATAmountLineDeduct."VAT+EC Base";
              TempVATAmountLine."VAT Amount" := TempVATAmountLine."VAT Amount" - TempVATAmountLineDeduct."VAT Amount";
              TempVATAmountLine."Amount Including VAT+EC" := TempVATAmountLine."Amount Including VAT+EC" -
                TempVATAmountLineDeduct."Amount Including VAT+EC";
              TempVATAmountLine."Line Amount" := TempVATAmountLine."Line Amount" - TempVATAmountLineDeduct."Line Amount";
              TempVATAmountLine."Inv. Disc. Base Amount" := TempVATAmountLine."Inv. Disc. Base Amount" -
                TempVATAmountLineDeduct."Inv. Disc. Base Amount";
              TempVATAmountLine."Invoice Discount Amount" := TempVATAmountLine."Invoice Discount Amount" -
                TempVATAmountLineDeduct."Invoice Discount Amount";
              TempVATAmountLine."Calculated VAT Amount" := TempVATAmountLine."Calculated VAT Amount" -
                TempVATAmountLineDeduct."Calculated VAT Amount";
              TempVATAmountLine."VAT Difference" := TempVATAmountLine."VAT Difference" -
                TempVATAmountLineDeduct."VAT Difference";
              TempVATAmountLine.MODIFY;
            END;
          UNTIL TempVATAmountLine.NEXT = 0;

        UpdateVATOnLines(SalesHeader,SalesLine,TempVATAmountLine,DocumentType);
        BuildInvLineBuffer(
          SalesHeader,SalesLine,DocumentType,PrepmtInvBuffer,TempDocDim,SalesSetup."Invoice Rounding",TRUE);
        PrepmtInvBuffer.FIND('-');
        TempDimBuf.INIT;
        REPEAT
          LineCount := LineCount + 1;
          Window.UPDATE(2,LineCount);
          IF PrepmtInvBuffer."Line No." <> 0 THEN
            LineNo := PrevLineNo + PrepmtInvBuffer."Line No."
          ELSE
            LineNo := PrevLineNo + 10000;
          CASE DocumentType OF
            DocumentType::Invoice:
              BEGIN
                SalesInvLine.INIT;
                SalesInvLine."Document No." := SalesInvHeader."No.";
                SalesInvLine."Line No." := LineNo;
                SalesInvLine."Sell-to Customer No." := SalesInvHeader."Sell-to Customer No.";
                SalesInvLine.Type := SalesInvLine.Type::"G/L Account";
                SalesInvLine."No." := PrepmtInvBuffer."G/L Account No.";
                SalesInvLine."Shortcut Dimension 1 Code" := PrepmtInvBuffer."Global Dimension 1 Code";
                SalesInvLine."Shortcut Dimension 2 Code" := PrepmtInvBuffer."Global Dimension 2 Code";
                SalesInvLine.Description := PrepmtInvBuffer.Description;
                SalesInvLine.Quantity := 1;
                IF "Prices Including VAT" THEN BEGIN
                  SalesInvLine."Unit Price" := PrepmtInvBuffer."Amount Incl. VAT";
                  SalesInvLine."Line Amount" := PrepmtInvBuffer."Amount Incl. VAT";
                END ELSE BEGIN
                  SalesInvLine."Unit Price" := PrepmtInvBuffer.Amount;
                  SalesInvLine."Line Amount" := PrepmtInvBuffer.Amount;
                END;
                SalesInvLine."Gen. Bus. Posting Group" := PrepmtInvBuffer."Gen. Bus. Posting Group";
                SalesInvLine."Gen. Prod. Posting Group" := PrepmtInvBuffer."Gen. Prod. Posting Group";
                SalesInvLine."VAT Bus. Posting Group" := PrepmtInvBuffer."VAT Bus. Posting Group";
                SalesInvLine."VAT Prod. Posting Group" := PrepmtInvBuffer."VAT Prod. Posting Group";
                SalesInvLine."VAT %" := PrepmtInvBuffer."VAT %";
                SalesInvLine."EC %" := PrepmtInvBuffer."EC %"; // ES0003
                SalesInvLine.Amount := PrepmtInvBuffer.Amount;
                SalesInvLine."VAT Difference" := PrepmtInvBuffer."VAT Difference";
                SalesInvLine."Amount Including VAT" := PrepmtInvBuffer."Amount Incl. VAT";
                SalesInvLine."VAT Calculation Type" := PrepmtInvBuffer."VAT Calculation Type";
                SalesInvLine."VAT Base Amount" := PrepmtInvBuffer."VAT Base Amount";
                SalesInvLine."VAT Identifier" := PrepmtInvBuffer."VAT Identifier";
                SalesInvLine.INSERT;
                PostedDocTabNo := DATABASE::"Sales Invoice Line";
              END;
            DocumentType::"Credit Memo":
              BEGIN
                SalesCrMemoLine.INIT;
                SalesCrMemoLine."Document No." := SalesCrMemoHeader."No.";
                SalesCrMemoLine."Line No." := LineNo;
                SalesCrMemoLine."Sell-to Customer No." := SalesCrMemoHeader."Sell-to Customer No.";
                SalesCrMemoLine.Type := SalesInvLine.Type::"G/L Account";
                SalesCrMemoLine."No." := PrepmtInvBuffer."G/L Account No.";
                SalesCrMemoLine."Shortcut Dimension 1 Code" := PrepmtInvBuffer."Global Dimension 1 Code";
                SalesCrMemoLine."Shortcut Dimension 2 Code" := PrepmtInvBuffer."Global Dimension 2 Code";
                SalesCrMemoLine.Description := PrepmtInvBuffer.Description;
                SalesCrMemoLine.Quantity := 1;
                IF "Prices Including VAT" THEN BEGIN
                  SalesCrMemoLine."Unit Price" := PrepmtInvBuffer."Amount Incl. VAT";
                  SalesCrMemoLine."Line Amount" := PrepmtInvBuffer."Amount Incl. VAT";
                END ELSE BEGIN
                  SalesCrMemoLine."Unit Price" := PrepmtInvBuffer.Amount;
                  SalesCrMemoLine."Line Amount" := PrepmtInvBuffer.Amount;
                END;
                SalesCrMemoLine."Gen. Bus. Posting Group" := PrepmtInvBuffer."Gen. Bus. Posting Group";
                SalesCrMemoLine."Gen. Prod. Posting Group" := PrepmtInvBuffer."Gen. Prod. Posting Group";
                SalesCrMemoLine."VAT Bus. Posting Group" := PrepmtInvBuffer."VAT Bus. Posting Group";
                SalesCrMemoLine."VAT Prod. Posting Group" := PrepmtInvBuffer."VAT Prod. Posting Group";
                SalesCrMemoLine."VAT %" := PrepmtInvBuffer."VAT %";
                SalesCrMemoLine."EC %" := PrepmtInvBuffer."EC %"; // es0003
                SalesCrMemoLine.Amount := PrepmtInvBuffer.Amount;
                SalesCrMemoLine."VAT Difference" := PrepmtInvBuffer."VAT Difference";
                SalesCrMemoLine."Amount Including VAT" := PrepmtInvBuffer."Amount Incl. VAT";
                SalesCrMemoLine."VAT Calculation Type" := PrepmtInvBuffer."VAT Calculation Type";
                SalesCrMemoLine."VAT Base Amount" := PrepmtInvBuffer."VAT Base Amount";
                SalesCrMemoLine."VAT Identifier" := PrepmtInvBuffer."VAT Identifier";
                SalesCrMemoLine.INSERT;
                PostedDocTabNo := DATABASE::"Sales Cr.Memo Line";
              END;
          END;
          TempDimBuf.RESET;
          TempDimBuf.DELETEALL;
          DimBufMgt.GetDimensions(PrepmtInvBuffer."Dimension Entry No.",TempDimBuf);
          DimMgt.MoveDimBufToPostedDocDim(TempDimBuf,PostedDocTabNo,GenJnlLineDocNo,LineNo);
          PrevLineNo := LineNo;
          InsertExtendedText(
            PostedDocTabNo,GenJnlLineDocNo,PrepmtInvBuffer."G/L Account No.","Document Date","Language Code",PrevLineNo);
        UNTIL PrepmtInvBuffer.NEXT = 0;

        // G/L Posting
        LineCount := 0;
        CompressInvLineBuffer(SalesHeader,PrepmtInvBuffer);
        PrepmtInvBuffer.FIND('+');
        REPEAT
          LineCount := LineCount + 1;
          Window.UPDATE(3,LineCount);

          IF DocumentType = DocumentType::Invoice THEN
            ReverseAmounts(PrepmtInvBuffer);
          RoundAmounts(SalesHeader,PrepmtInvBuffer,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY);

          GenJnlLine.INIT;
          GenJnlLine."Posting Date" := "Posting Date";
          GenJnlLine."Document Date" := "Document Date";
          GenJnlLine.Description := PostingDescription;
          GenJnlLine."Reason Code" := "Reason Code";
          GenJnlLine."Document Type" := GenJnlLineDocType;
          GenJnlLine."Document No." := GenJnlLineDocNo;
          GenJnlLine."External Document No." := GenJnlLineExtDocNo;
          GenJnlLine."Account No." := PrepmtInvBuffer."G/L Account No.";
          GenJnlLine."System-Created Entry" := TRUE;
          GenJnlLine.Amount := PrepmtInvBuffer.Amount;
          GenJnlLine."Source Currency Code" := "Currency Code";
          GenJnlLine."Source Currency Amount" := PrepmtInvBuffer."Amount (ACY)";
          GenJnlLine.Correction :=
            (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
          GenJnlLine."Gen. Posting Type" := GenJnlLine."Gen. Posting Type"::Sale;
          GenJnlLine."Gen. Bus. Posting Group" := PrepmtInvBuffer."Gen. Bus. Posting Group";
          GenJnlLine."Gen. Prod. Posting Group" := PrepmtInvBuffer."Gen. Prod. Posting Group";
          GenJnlLine."VAT Bus. Posting Group" := PrepmtInvBuffer."VAT Bus. Posting Group";
          GenJnlLine."VAT Prod. Posting Group" := PrepmtInvBuffer."VAT Prod. Posting Group";
          GenJnlLine."Tax Area Code" := PrepmtInvBuffer."Tax Area Code";
          GenJnlLine."Tax Liable" := PrepmtInvBuffer."Tax Liable";
          GenJnlLine."Tax Group Code" := PrepmtInvBuffer."Tax Group Code";
          GenJnlLine."VAT Calculation Type" := PrepmtInvBuffer."VAT Calculation Type";
          GenJnlLine."VAT Base Amount" := PrepmtInvBuffer."VAT Base Amount";
          GenJnlLine."VAT Base Discount %" := "VAT Base Discount %";
          GenJnlLine."Source Curr. VAT Base Amount" := PrepmtInvBuffer."VAT Base Amount (ACY)";
          GenJnlLine."VAT Amount" := PrepmtInvBuffer."VAT Amount";
          GenJnlLine."Source Curr. VAT Amount" := PrepmtInvBuffer."VAT Amount (ACY)";
          GenJnlLine."VAT Difference" := PrepmtInvBuffer."VAT Difference";
          GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Manual VAT Entry";
          GenJnlLine."Shortcut Dimension 1 Code" := PrepmtInvBuffer."Global Dimension 1 Code";
          GenJnlLine."Shortcut Dimension 2 Code" := PrepmtInvBuffer."Global Dimension 2 Code";
          GenJnlLine."Job No." := PrepmtInvBuffer."Job No.";
          GenJnlLine."Source Code" := SrcCode;
          GenJnlLine."EU 3-Party Trade" := "EU 3-Party Trade";
          GenJnlLine."Bill-to/Pay-to No." := "Bill-to Customer No.";
          GenJnlLine."Country/Region Code" := "VAT Country/Region Code";
          GenJnlLine."VAT Registration No." := "VAT Registration No.";
          GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
          GenJnlLine."Source No." := "Bill-to Customer No.";
          GenJnlLine."Posting No. Series" := "Posting No. Series";
          GenJnlLine."IC Partner Code" := "Sell-to IC Partner Code";
          GenJnlLine.Prepayment := TRUE;

          GenJnlLine."Payment Terms Code" := "Payment Terms Code";
          GenJnlLine."Payment Method Code" := "Payment Method Code";

          RunGenJnlPostLine(GenJnlLine,PrepmtInvBuffer."Dimension Entry No.");
        UNTIL PrepmtInvBuffer.NEXT(-1) = 0;

        // Post customer entry
        Window.UPDATE(4,1);
        GenJnlLine.INIT;
        GenJnlLine."Posting Date" := "Posting Date";
        GenJnlLine."Document Date" := "Document Date";
        GenJnlLine.Description := PostingDescription;
        GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        GenJnlLine."Reason Code" := "Reason Code";
        GenJnlLine."Account Type" := GenJnlLine."Account Type"::Customer;
        GenJnlLine."Account No." := "Bill-to Customer No.";
        GenJnlLine."Document Type" := GenJnlLineDocType;
        GenJnlLine."Document No." := GenJnlLineDocNo;
        GenJnlLine."External Document No." := GenJnlLineExtDocNo;
        GenJnlLine."Currency Code" := "Currency Code";
        GenJnlLine.Amount := -TotalPrepmtInvLineBuffer."Amount Incl. VAT";
        GenJnlLine."Source Currency Code" := "Currency Code";
        GenJnlLine."Source Currency Amount" := -TotalPrepmtInvLineBuffer."Amount Incl. VAT";
        GenJnlLine."Amount (LCY)" := -TotalPrepmtInvLineBufferLCY."Amount Incl. VAT";
        IF SalesHeader."Currency Code" = '' THEN
          GenJnlLine."Currency Factor" := 1
        ELSE
          GenJnlLine."Currency Factor" :=  SalesHeader."Currency Factor";
        GenJnlLine.Correction :=
          (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
        GenJnlLine."Sales/Purch. (LCY)" := -TotalPrepmtInvLineBufferLCY.Amount;
        GenJnlLine."Profit (LCY)" := -TotalPrepmtInvLineBufferLCY.Amount;
        GenJnlLine."Sell-to/Buy-from No." := "Sell-to Customer No.";
        GenJnlLine."Bill-to/Pay-to No." := "Bill-to Customer No.";
        GenJnlLine."Salespers./Purch. Code" := "Salesperson Code";
        GenJnlLine."System-Created Entry" := TRUE;
        GenJnlLine."Due Date" := "Prepayment Due Date";
        GenJnlLine."Payment Terms Code" := "Prepmt. Payment Terms Code";
        IF (DocumentType = DocumentType::Invoice) OR
           PaymentTerms."Calc. Pmt. Disc. on Cr. Memos"
        THEN BEGIN
          GenJnlLine."Pmt. Discount Date" := "Prepmt. Pmt. Discount Date";
          GenJnlLine."Payment Discount %" := "Prepmt. Payment Discount %";
        END;
        GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
        GenJnlLine."Source No." := "Bill-to Customer No.";
        GenJnlLine."Source Code" := SrcCode;
        GenJnlLine."Posting No. Series" := "Posting No. Series";
        GenJnlLine."IC Partner Code" := "Sell-to IC Partner Code";
        GenJnlLine."Payment Terms Code" := "Payment Terms Code";
        GenJnlLine."Payment Method Code" := "Payment Method Code";
        GenJnlLine.Prepayment := TRUE;
        TempJnlLineDim.INIT;
        TempDocDim.RESET;
        TempDocDim.SETRANGE("Table ID",DATABASE::"Sales Header");
        DimMgt.CopyDocDimToJnlLineDim(TempDocDim,TempJnlLineDim);
        GenJnlPostLine.RunWithCheck(GenJnlLine,TempJnlLineDim);

        // Balancing account
        IF "Bal. Account No." <> '' THEN BEGIN
          Window.UPDATE(5,1);
          CustLedgEntry.FINDLAST;
          GenJnlLine.INIT;
          GenJnlLine."Posting Date" := "Posting Date";
          GenJnlLine."Document Date" := "Document Date";
          GenJnlLine.Description := PostingDescription;
          GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
          GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
          GenJnlLine."Reason Code" := "Reason Code";
          GenJnlLine."Account Type" := GenJnlLine."Account Type"::Customer;
          GenJnlLine."Account No." := "Bill-to Customer No.";
          IF GenJnlLineDocType = GenJnlLine."Document Type"::"Credit Memo" THEN
            GenJnlLine."Document Type" := GenJnlLine."Document Type"::Refund
          ELSE
            GenJnlLine."Document Type" := GenJnlLine."Document Type"::Payment;
          GenJnlLine."Document No." := GenJnlLineDocNo;
          GenJnlLine."External Document No." := GenJnlLineExtDocNo;
          IF "Bal. Account Type" = "Bal. Account Type"::"Bank Account" THEN
            GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::"Bank Account";
          GenJnlLine."Bal. Account No." := "Bal. Account No.";
          GenJnlLine."Currency Code" := "Currency Code";
          GenJnlLine.Amount :=
            TotalPrepmtInvLineBuffer."Amount Incl. VAT" + CustLedgEntry."Remaining Pmt. Disc. Possible";
          GenJnlLine."Source Currency Code" := "Currency Code";
          GenJnlLine."Source Currency Amount" := GenJnlLine.Amount;
          GenJnlLine.Correction :=
            (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
          CustLedgEntry.CALCFIELDS(Amount);
          IF CustLedgEntry.Amount = 0 THEN
            GenJnlLine."Amount (LCY)" := TotalPrepmtInvLineBufferLCY.Amount
          ELSE
            GenJnlLine."Amount (LCY)" :=
              TotalPrepmtInvLineBufferLCY.Amount +
              ROUND(
                CustLedgEntry."Remaining Pmt. Disc. Possible" / CustLedgEntry."Adjusted Currency Factor");
          IF SalesHeader."Currency Code" = '' THEN
            GenJnlLine."Currency Factor" := 1
          ELSE
            GenJnlLine."Currency Factor" :=  SalesHeader."Currency Factor";
          GenJnlLine."Applies-to Doc. Type" := GenJnlLineDocType;
          GenJnlLine."Applies-to Doc. No." := GenJnlLineDocNo;
          GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
          GenJnlLine."Source No." := "Bill-to Customer No.";
          GenJnlLine."Source Code" := SrcCode;
          GenJnlLine."Posting No. Series" := "Posting No. Series";
          GenJnlLine."IC Partner Code" := "Sell-to IC Partner Code";
          GenJnlLine."System-Created Entry" := TRUE;
          GenJnlPostLine.RunWithCheck(GenJnlLine,TempJnlLineDim);
        END;

        // Update lines & header
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        IF DocumentType = DocumentType::Invoice THEN BEGIN
          "Last Prepayment No." := GenJnlLineDocNo;
          "Prepayment No." := '';
          SalesLine.SETFILTER("Prepmt. Line Amount",'<>0');
          IF SalesLine.FIND('-') THEN
            REPEAT
              IF SalesLine."Prepmt. Line Amount" <> SalesLine."Prepmt. Amt. Inv." THEN BEGIN
                SalesLine."Prepmt. Amt. Inv." := SalesLine."Prepmt. Line Amount";
                SalesLine."Prepmt. Amount Inv. Incl. VAT" := SalesLine."Prepmt. Amt. Incl. VAT";
                SalesLine.CalcPrepaymentToDeduct;
                SalesLine."Prepmt VAT Diff. to Deduct" :=
                  SalesLine."Prepmt VAT Diff. to Deduct" + SalesLine."Prepayment VAT Difference";
                SalesLine."Prepayment VAT Difference" := 0;
                SalesLine.MODIFY;
              END;
            UNTIL SalesLine.NEXT = 0;
        END ELSE BEGIN
          "Last Prepmt. Cr. Memo No." := GenJnlLineDocNo;
          "Prepmt. Cr. Memo No." := '';
          SalesLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
          IF SalesLine.FIND('-') THEN
            REPEAT
              SalesLine."Prepmt. Amt. Inv." := SalesLine."Prepmt Amt Deducted";
              SalesLine."Prepmt. Amount Inv. Incl. VAT" :=
                SalesLine."Prepmt. Amt. Inv." + SalesLine."Prepmt. Amt. Inv." * SalesLine."Prepayment VAT %"/100;
              SalesLine."Prepmt Amt to Deduct" := 0;
              SalesLine."Prepmt VAT Diff. to Deduct" := 0;
              IF SalesLine."Prepmt. Amount Inv. (LCY)" <> 0 THEN BEGIN
                WITH SalesHeader DO BEGIN
                  GenJnlLine.INIT;
                  GenJnlLine."Posting Date" := "Posting Date";
                  GenJnlLine."Document Date" := "Document Date";
                  GenJnlLine.Description := "Posting Description";
                  GenJnlLine."Reason Code" := "Reason Code";
                  GenJnlLine."Document Type" := GenJnlLineDocType;
                  GenJnlLine."Document No." := GenJnlLineDocNo;
                  GenJnlLine.Correction :=
                    (DocumentType = DocumentType::"Credit Memo") AND GLSetup."Mark Cr. Memos as Corrections";
                  GenJnlLine."External Document No." := GenJnlLineExtDocNo;
                  DocDim.SETRANGE("Table ID",DATABASE::"Sales Line");
                  DocDim.SETRANGE("Document Type","Document Type");
                  DocDim.SETRANGE("Document No.",SalesLine."Document No.");
                  DocDim.SETRANGE("Line No.",SalesLine."Line No.");
                  TempJnlLineDim.RESET;
                  TempJnlLineDim.DELETEALL;
                  DimMgt.CopyDocDimToJnlLineDim(DocDim,TempJnlLineDim);
                  GenJnlLine."Shortcut Dimension 1 Code" := SalesLine."Shortcut Dimension 1 Code";
                  GenJnlLine."Shortcut Dimension 2 Code" := SalesLine."Shortcut Dimension 2 Code";
                  GenJnlLine."Source Code" := SrcCode;
                  GenJnlLine."Source Type" := GenJnlLine."Source Type"::Customer;
                  GenJnlLine."Source No." := "Bill-to Customer No.";
                  GenJnlLine."Posting No. Series" := "Posting No. Series";
                  GenJnlLine."Source Currency Code" := "Currency Code";
                  RealizeGainLoss(GenJnlLine,SalesLine);
                  GenJnlPostLine.RunWithCheck(GenJnlLine,TempJnlLineDim);
                END;
                SalesLine."Prepmt. Amount Inv. (LCY)" := 0;
              END;
              SalesLine."Prepayment VAT Difference" := 0;
              SalesLine.MODIFY;
            UNTIL SalesLine.NEXT = 0;
        END;
        IF SalesHeader.Status <> SalesHeader.Status::"Pending Prepayment" THEN
          SalesHeader.Status := SalesHeader.Status::"Pending Prepayment";
        MODIFY;
      END;

      SalesHeader2 := SalesHeader;
    END;

    PROCEDURE CheckOpenPrepaymentLines@1(SalesHeader@1000 : Record 36;DocumentType@1003 : 'Invoice,Credit Memo') : Boolean;
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        ApplyFilter(SalesHeader,DocumentType,SalesLine);
        IF FIND('-') THEN BEGIN
          REPEAT
            IF PrepmtAmount(SalesLine,DocumentType) <> 0 THEN
              EXIT(TRUE);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE RoundAmounts@5(SalesHeader@1001 : Record 36;VAR PrepmtInvLineBuf@1000 : Record 461;VAR TotalPrepmtInvLineBuf@1002 : Record 461;VAR TotalPrepmtInvLineBufLCY@1003 : Record 461);
    VAR
      VAT@1004 : Boolean;
      DummySalesLine@1005 : Record 37;
    BEGIN
      IncrAmounts(PrepmtInvLineBuf,TotalPrepmtInvLineBuf,SalesHeader,DummySalesLine,FALSE,0);

      IF SalesHeader."Currency Code" <> '' THEN BEGIN
        VAT := PrepmtInvLineBuf.Amount <> PrepmtInvLineBuf."Amount Incl. VAT";

        PrepmtInvLineBuf."Amount Incl. VAT" :=
          AmountToLCY(
            SalesHeader,TotalPrepmtInvLineBuf."Amount Incl. VAT",TotalPrepmtInvLineBufLCY."Amount Incl. VAT");
        IF VAT THEN
          PrepmtInvLineBuf.Amount := ROUND(PrepmtInvLineBuf."Amount Incl. VAT" / (1 + PrepmtInvLineBuf."VAT %" / 100))
        ELSE
          PrepmtInvLineBuf.Amount := PrepmtInvLineBuf."Amount Incl. VAT";
        PrepmtInvLineBuf."VAT Amount" := PrepmtInvLineBuf."Amount Incl. VAT" - PrepmtInvLineBuf.Amount;
        IF PrepmtInvLineBuf."VAT Base Amount" <> 0 THEN
          PrepmtInvLineBuf."VAT Base Amount" := PrepmtInvLineBuf.Amount;
      END;

      IncrAmounts(PrepmtInvLineBuf,TotalPrepmtInvLineBufLCY,SalesHeader,DummySalesLine,FALSE,0);
    END;

    LOCAL PROCEDURE IncrAmounts@8(PrepmtInvLineBuf@1001 : Record 461;VAR TotalPrepmtInvLineBuf@1000 : Record 461;SalesHeader@1004 : Record 36;SalesLine@1002 : Record 37;UpdateSalesLine@1003 : Boolean;DocumentType@1005 : 'Invoice,Credit Memo');
    VAR
      PrePmtAmount@1006 : Decimal;
    BEGIN
      WITH TotalPrepmtInvLineBuf DO BEGIN
        IF UpdateSalesLine THEN BEGIN
          IF SalesHeader."Prices Including VAT" THEN
            PrePmtAmount := PrepmtInvLineBuf.Amount + PrepmtInvLineBuf."VAT Amount"
          ELSE
            PrePmtAmount := PrepmtInvLineBuf.Amount;
          IF SalesHeader."Currency Code" <> '' THEN
            IF DocumentType = DocumentType::Invoice THEN
              SalesLine."Prepmt. Amount Inv. (LCY)" := SalesLine."Prepmt. Amount Inv. (LCY)" +
                (ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                  SalesHeader."Posting Date",
                  SalesHeader."Currency Code",
                  Amount + PrePmtAmount,
                  SalesHeader."Currency Factor")) -
                ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                  SalesHeader."Posting Date",
                  SalesHeader."Currency Code",
                  Amount,
                  SalesHeader."Currency Factor")))
            ELSE
              SalesLine."Prepmt. Amount Inv. (LCY)" := SalesLine."Prepmt. Amount Inv. (LCY)" -
                (ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                  SalesHeader."Posting Date",
                  SalesHeader."Currency Code",
                  Amount + PrePmtAmount,
                  SalesHeader."Currency Factor")) -
                ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                  SalesHeader."Posting Date",
                  SalesHeader."Currency Code",
                  Amount,
                  SalesHeader."Currency Factor")))
          ELSE
            IF DocumentType = DocumentType::Invoice THEN
              SalesLine."Prepmt. Amount Inv. (LCY)" := SalesLine."Prepmt. Amount Inv. (LCY)" +
                PrePmtAmount
            ELSE
              SalesLine."Prepmt. Amount Inv. (LCY)" := SalesLine."Prepmt. Amount Inv. (LCY)" -
                PrePmtAmount;
          SalesLine.MODIFY;
        END;
        Amount := Amount + PrepmtInvLineBuf.Amount;
        "Amount Incl. VAT" := "Amount Incl. VAT" + PrepmtInvLineBuf."Amount Incl. VAT";
        "VAT Amount" := "VAT Amount" + PrepmtInvLineBuf."VAT Amount";
        "VAT Base Amount" := "VAT Base Amount" + PrepmtInvLineBuf."VAT Base Amount";
        "Amount (ACY)" := "Amount (ACY)" + PrepmtInvLineBuf."Amount (ACY)";
        "VAT Amount (ACY)" := "VAT Amount (ACY)" + PrepmtInvLineBuf."VAT Amount (ACY)";
        "VAT Base Amount (ACY)" := "VAT Base Amount (ACY)" + PrepmtInvLineBuf."VAT Base Amount (ACY)";
        "VAT Difference" := "VAT Difference" + PrepmtInvLineBuf."VAT Difference";
      END;
    END;

    LOCAL PROCEDURE AmountToLCY@6(SalesHeader@1001 : Record 36;TotalAmt@1000 : Decimal;PrevTotalAmt@1002 : Decimal) : Decimal;
    VAR
      CurrExchRate@1003 : Record 330;
    BEGIN
      CurrExchRate.INIT;
      WITH SalesHeader DO
        EXIT(
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code",TotalAmt,"Currency Factor")) -
          PrevTotalAmt);
    END;

    LOCAL PROCEDURE ReverseAmounts@7(VAR PrepmtInvLineBuffer@1000 : Record 461);
    BEGIN
      WITH PrepmtInvLineBuffer DO BEGIN
        Amount := -Amount;
        "Amount Incl. VAT" := -"Amount Incl. VAT";
        "VAT Amount" := -"VAT Amount";
        "VAT Base Amount" := -"VAT Base Amount";
        "Amount (ACY)" := -"Amount (ACY)";
        "VAT Amount (ACY)" := -"VAT Amount (ACY)";
        "VAT Base Amount (ACY)" := -"VAT Base Amount (ACY)";
        "VAT Difference" := -"VAT Difference";
      END;
    END;

    PROCEDURE BuildInvLineBuffer@3(SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;DocumentType@1005 : 'Invoice,Credit Memo,Statistic';VAR PrepmtInvBuf@1002 : Record 461;VAR TempDocDim@1004 : Record 357;InvoiceRounding@1007 : Boolean;UpdateLines@1010 : Boolean);
    VAR
      GLAcc@1006 : Record 15;
      PrepmtInvBuf2@1003 : Record 461;
      TotalPrepmtInvLineBuffer@1009 : Record 461;
      TotalPrepmtInvLineBufferDummy@1008 : Record 461;
    BEGIN
      WITH SalesHeader DO BEGIN
        ApplyFilter(SalesHeader,DocumentType,SalesLine);
        SalesLine.SETRANGE("System-Created Entry",FALSE);
        IF SalesLine.FIND('-') THEN
          REPEAT
            IF PrepmtAmount(SalesLine,DocumentType) <> 0 THEN BEGIN
              IF SalesLine.Quantity < 0 THEN
                SalesLine.FIELDERROR(Quantity,STRSUBSTNO(Text018,FIELDCAPTION("Prepayment %")));
              IF SalesLine."Unit Price" < 0 THEN
                SalesLine.FIELDERROR("Unit Price",STRSUBSTNO(Text018,FIELDCAPTION("Prepayment %")));
              IF (SalesLine."Gen. Bus. Posting Group" <> GenPostingSetup."Gen. Bus. Posting Group") OR
                 (SalesLine."Gen. Prod. Posting Group" <> GenPostingSetup."Gen. Prod. Posting Group")
              THEN BEGIN
                GenPostingSetup.GET(
                  SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");
                GenPostingSetup.TESTFIELD("Sales Prepayments Account");
              END;
              GLAcc.GET(GenPostingSetup."Sales Prepayments Account");
              FillInvLineBuffer(SalesHeader,SalesLine,GLAcc,PrepmtInvBuf2,TempDocDim);
              InsertInvLineBuffer(PrepmtInvBuf,PrepmtInvBuf2,SalesHeader,SalesLine,DocumentType,UpdateLines);
              IF InvoiceRounding THEN
                RoundAmounts(
                  SalesHeader,PrepmtInvBuf2,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferDummy);
            END;
          UNTIL SalesLine.NEXT = 0;
        IF InvoiceRounding THEN
          IF InsertInvoiceRounding(
            SalesHeader,PrepmtInvBuf2,TotalPrepmtInvLineBuffer,SalesLine."Line No.")
          THEN
            InsertInvLineBuffer(PrepmtInvBuf,PrepmtInvBuf2,SalesHeader,SalesLine,DocumentType,UpdateLines);
      END;
    END;

    PROCEDURE BuildInvLineBuffer2@19(SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;DocumentType@1005 : 'Invoice,Credit Memo,Statistic';VAR PrepmtInvBuf@1002 : Record 461;VAR TempDocDim@1004 : Record 357);
    VAR
      SalesSetup@1003 : Record 311;
    BEGIN
      SalesSetup.GET;
      BuildInvLineBuffer(
        SalesHeader,SalesLine,DocumentType,PrepmtInvBuf,TempDocDim,SalesSetup."Invoice Rounding",FALSE);
    END;

    PROCEDURE InsertInvLineBuffer@11(VAR PrepmtInvBuf@1001 : Record 461;PrepmtInvBuf2@1000 : Record 461;SalesHeader@1003 : Record 36;SalesLine@1002 : Record 37;DocumentType@1004 : 'Invoice,Credit Memo';UpdateLine@1005 : Boolean);
    VAR
      PrePmtAmount@1006 : Decimal;
    BEGIN
      WITH PrepmtInvBuf DO BEGIN
        PrepmtInvBuf := PrepmtInvBuf2;
        IF FIND THEN BEGIN
          IncrAmounts(PrepmtInvBuf2,PrepmtInvBuf,SalesHeader,SalesLine,UpdateLine,DocumentType);
          MODIFY;
        END ELSE BEGIN
          IF UpdateLine THEN BEGIN
            IF SalesHeader."Prices Including VAT" THEN
              PrePmtAmount := "Amount Incl. VAT"
            ELSE
              PrePmtAmount := Amount;
            IF DocumentType = DocumentType::Invoice THEN
              SalesLine."Prepmt. Amount Inv. (LCY)" := SalesLine."Prepmt. Amount Inv. (LCY)" +
                ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                  SalesHeader."Posting Date",
                  SalesHeader."Currency Code",
                  PrePmtAmount,
                  SalesHeader."Currency Factor"))
            ELSE
              SalesLine."Prepmt. Amount Inv. (LCY)" := SalesLine."Prepmt. Amount Inv. (LCY)" -
                ROUND(CurrExchRate.ExchangeAmtFCYToLCY(
                  SalesHeader."Posting Date",
                  SalesHeader."Currency Code",
                  PrePmtAmount,
                  SalesHeader."Currency Factor"));
            SalesLine.MODIFY;
          END;
          INSERT;
        END;
      END;
    END;

    PROCEDURE FillInvLineBuffer@4(SalesHeader@1001 : Record 36;SalesLine@1002 : Record 37;GLAcc@1007 : Record 15;VAR PrepmtInvBuf@1000 : Record 461;VAR TempDocDim@1006 : Record 357);
    BEGIN
      WITH PrepmtInvBuf DO BEGIN
        CLEAR(PrepmtInvBuf);

        "G/L Account No." := GLAcc."No.";
        "Dimension Entry No." := InsertInDimBuffer(TempDocDim,SalesLine);
        "Gen. Bus. Posting Group" := SalesLine."Gen. Bus. Posting Group";
        "VAT Bus. Posting Group" := SalesLine."VAT Bus. Posting Group";
        "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
        "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
        "VAT Calculation Type" := SalesLine."Prepmt. VAT Calc. Type";
        "Global Dimension 1 Code" := SalesLine."Shortcut Dimension 1 Code";
        "Global Dimension 2 Code" := SalesLine."Shortcut Dimension 2 Code";
        "Job No." := SalesLine."Job No.";
        Amount := SalesLine."Prepayment Amount";
        "Amount Incl. VAT" := SalesLine."Prepmt. Amt. Incl. VAT";
        "VAT Base Amount" := SalesLine."Prepayment Amount";
        "VAT Amount" := SalesLine."Prepmt. Amt. Incl. VAT" - SalesLine."Prepayment Amount";
        "Amount (ACY)" := SalesLine."Prepayment Amount";
        "VAT Base Amount (ACY)" := SalesLine."Prepayment Amount";
        "VAT Amount (ACY)" := SalesLine."Prepmt. Amt. Incl. VAT" - SalesLine."Prepayment Amount";
        "VAT %" := SalesLine."Prepayment VAT %";
        "EC %" := SalesLine."Prepayment EC %"; // es0003
        "VAT Identifier" := SalesLine."Prepayment VAT Identifier";
        "VAT Difference" := SalesLine."Prepayment VAT Difference";
        "Tax Area Code" := SalesLine."Tax Area Code";
        "Tax Liable" := SalesLine."Tax Liable";
        "Tax Group Code" := SalesLine."Tax Group Code";
        IF NOT SalesHeader."Compress Prepayment" THEN BEGIN
          "Line No." := SalesLine."Line No.";
          Description := SalesLine.Description;
        END ELSE
          Description := GLAcc.Name;
      END;
    END;

    LOCAL PROCEDURE InsertInvoiceRounding@25(SalesHeader@1002 : Record 36;VAR PrepmtInvBuf@1000 : Record 461;TotalPrepmtInvBuf@1001 : Record 461;PrevLineNo@1008 : Integer) : Boolean;
    VAR
      SalesLine@1007 : Record 37;
      TempDocDim@1009 : TEMPORARY Record 357;
    BEGIN
      IF InitInvoiceRoundingLine(SalesHeader,TotalPrepmtInvBuf."Amount Incl. VAT",SalesLine) THEN BEGIN
        CreateDimensions(SalesLine,TempDocDim);
        WITH PrepmtInvBuf DO BEGIN
          CLEAR(PrepmtInvBuf);
          "Invoice Rounding" := TRUE;
          "G/L Account No." := SalesLine."No.";
          "Dimension Entry No." := InsertInDimBuffer(TempDocDim,SalesLine);
          "Gen. Bus. Posting Group" := SalesHeader."Gen. Bus. Posting Group";
          "VAT Bus. Posting Group" := SalesHeader."VAT Bus. Posting Group";
          "Gen. Prod. Posting Group" := SalesLine."Gen. Prod. Posting Group";
          "VAT Prod. Posting Group" := SalesLine."VAT Prod. Posting Group";
          "VAT Calculation Type" := SalesLine."VAT Calculation Type";
          "Global Dimension 1 Code" := SalesLine."Shortcut Dimension 1 Code";
          "Global Dimension 2 Code" := SalesLine."Shortcut Dimension 2 Code";
          Amount := SalesLine."Line Amount";
          "Amount Incl. VAT" := SalesLine."Amount Including VAT";
          "VAT Base Amount" := SalesLine."Line Amount";
          "VAT Amount" := SalesLine."Amount Including VAT" - SalesLine."Line Amount";
          "Amount (ACY)" := SalesLine."Prepayment Amount";
          "VAT Base Amount (ACY)" := SalesLine."Line Amount";
          "VAT Amount (ACY)" := SalesLine."Amount Including VAT" - SalesLine."Line Amount";
          "VAT %" := SalesLine."VAT %";
          "VAT Identifier" := SalesLine."VAT Identifier";
          "Tax Area Code" := SalesLine."Tax Area Code";
          "Tax Liable" := SalesLine."Tax Liable";
          "Tax Group Code" := SalesLine."Tax Group Code";
          "Line No." := PrevLineNo + 10000;
        END;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE InitInvoiceRoundingLine@29(SalesHeader@1000 : Record 36;TotalAmount@1004 : Decimal;VAR SalesLine@1001 : Record 37) : Boolean;
    VAR
      Currency@1007 : Record 4;
      CustPostingGr@1006 : Record 92;
      GLAcc@1005 : Record 15;
      InvoiceRoundingAmount@1002 : Decimal;
    BEGIN
      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesHeader."Currency Code");
      Currency.TESTFIELD("Invoice Rounding Precision");
      InvoiceRoundingAmount :=
        -ROUND(
          TotalAmount -
          ROUND(
            TotalAmount,
            Currency."Invoice Rounding Precision",
            Currency.InvoiceRoundingDirection),
          Currency."Amount Rounding Precision");

      IF InvoiceRoundingAmount = 0 THEN
        EXIT(FALSE);

      CustPostingGr.GET(SalesHeader."Customer Posting Group");
      CustPostingGr.TESTFIELD("Invoice Rounding Account");
      GLAcc.GET(CustPostingGr."Invoice Rounding Account");
      WITH SalesLine DO BEGIN
        SetHideValidationDialog(TRUE);
        "Document Type" := SalesHeader."Document Type";
        "Document No." := SalesHeader."No.";
        "System-Created Entry" := TRUE;
        Type := Type::"G/L Account";
        VALIDATE("No.",CustPostingGr."Invoice Rounding Account");
        VALIDATE(Quantity,1);
        IF SalesHeader."Prices Including VAT" THEN
          VALIDATE("Unit Price",InvoiceRoundingAmount)
        ELSE
          VALIDATE(
            "Unit Price",
            ROUND(
              InvoiceRoundingAmount /
              (1 + (1 - SalesHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
              Currency."Amount Rounding Precision"));
        VALIDATE("Amount Including VAT",InvoiceRoundingAmount);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CompressInvLineBuffer@1000000000(SalesHeader@1000000001 : Record 36;VAR PrepmtInvBuffer@1000000000 : Record 461);
    VAR
      PrepmtInvBuffer2@1000 : TEMPORARY Record 461;
      DummySalesLine@1001 : Record 37;
    BEGIN
      IF SalesHeader."Compress Prepayment" THEN
        EXIT;

      WITH PrepmtInvBuffer2 DO BEGIN
        PrepmtInvBuffer.FIND('-');
        REPEAT
          PrepmtInvBuffer2 := PrepmtInvBuffer;
          "Line No." := 0;
          IF FIND THEN BEGIN
            IncrAmounts(PrepmtInvBuffer,PrepmtInvBuffer2,SalesHeader,DummySalesLine,FALSE,0);
            MODIFY;
          END ELSE
            INSERT;
        UNTIL PrepmtInvBuffer.NEXT = 0;

        PrepmtInvBuffer.DELETEALL;

        FIND('-');
        REPEAT
          PrepmtInvBuffer := PrepmtInvBuffer2;
          PrepmtInvBuffer.INSERT;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CopyCommentLines@22(FromNumber@1002 : Code[20];ToDocType@1000 : Integer;ToNumber@1003 : Code[20]);
    VAR
      SalesCommentLine@1004 : Record 44;
      SalesCommentLine2@1005 : Record 44;
    BEGIN
      WITH SalesCommentLine DO BEGIN
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE("No.",FromNumber);
        IF FIND('-') THEN
          REPEAT
            SalesCommentLine2 := SalesCommentLine;
            CASE ToDocType OF
              DATABASE::"Sales Invoice Header":
                SalesCommentLine2."Document Type" :=
                  SalesCommentLine2."Document Type"::"Posted Invoice";
              DATABASE::"Sales Cr.Memo Header":
                SalesCommentLine2."Document Type" :=
                  SalesCommentLine2."Document Type"::"Posted Credit Memo";
            END;
            SalesCommentLine2."No." := ToNumber;
            SalesCommentLine2.INSERT;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE InsertExtendedText@17(TabNo@1000 : Integer;DocNo@1003 : Code[20];GLAccNo@1006 : Code[20];DocDate@1001 : Date;LanguageCode@1009 : Code[10];VAR PrevLineNo@1002 : Integer);
    VAR
      TempExtTextLine@1005 : TEMPORARY Record 280;
      SalesInvLine@1007 : Record 113;
      SalesCrMemoLine@1008 : Record 115;
      TransferExtText@1004 : Codeunit 378;
      NextLineNo@1010 : Integer;
    BEGIN
      TransferExtText.PrepmtGetAnyExtText(GLAccNo,TabNo,DocDate,LanguageCode,TempExtTextLine);
      IF TempExtTextLine.FIND('-') THEN BEGIN
        NextLineNo := PrevLineNo + 10000;
        REPEAT
          CASE TabNo OF
            DATABASE::"Sales Invoice Line":
              BEGIN
                SalesInvLine."Document No." := DocNo;
                SalesInvLine."Line No." := NextLineNo;
                SalesInvLine.Description := TempExtTextLine.Text;
                SalesInvLine.INSERT;
              END;
            DATABASE::"Sales Cr.Memo Line":
              BEGIN
                SalesCrMemoLine."Document No." := DocNo;
                SalesCrMemoLine."Line No." := NextLineNo;
                SalesCrMemoLine.Description := TempExtTextLine.Text;
                SalesCrMemoLine.INSERT;
              END;
          END;
          PrevLineNo := NextLineNo;
          NextLineNo := NextLineNo + 10000;
        UNTIL TempExtTextLine.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateVATOnLines@36(SalesHeader@1001 : Record 36;VAR SalesLine@1011 : Record 37;VAR VATAmountLine@1003 : Record 290;DocumentType@1000 : 'Invoice,Credit Memo,Statistic');
    VAR
      TempVATAmountLineRemainder@1004 : TEMPORARY Record 290;
      Currency@1005 : Record 4;
      ChangeLogMgt@1012 : Codeunit 423;
      RecRef@1015 : RecordRef;
      xRecRef@1014 : RecordRef;
      PrepmtAmt@1002 : Decimal;
      NewAmount@1006 : Decimal;
      NewAmountIncludingVAT@1007 : Decimal;
      NewVATBaseAmount@1008 : Decimal;
      VATAmount@1009 : Decimal;
      VATDifference@1010 : Decimal;
      PrepmtAmtToInvTotal@1013 : Decimal;
    BEGIN
      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesHeader."Currency Code");

      WITH SalesLine DO BEGIN
        ApplyFilter(SalesHeader,DocumentType,SalesLine);
        LOCKTABLE;
        IF FIND('-') THEN
          REPEAT
            PrepmtAmtToInvTotal := PrepmtAmtToInvTotal + ("Prepmt. Line Amount" - "Prepmt. Amt. Inv.");
          UNTIL NEXT = 0;
        IF FIND('-') THEN
          REPEAT
            PrepmtAmt := PrepmtAmount(SalesLine,DocumentType);
            IF PrepmtAmt <> 0 THEN BEGIN
              VATAmountLine.GET(
                "Prepayment VAT Identifier",
                "Prepmt. VAT Calc. Type",
                "Prepayment Tax Group Code",
                FALSE,
                PrepmtAmt >= 0);
              IF VATAmountLine.Modified THEN BEGIN
                xRecRef.GETTABLE(SalesLine);
                IF NOT TempVATAmountLineRemainder.GET(
                     "Prepayment VAT Identifier",
                     "Prepmt. VAT Calc. Type",
                     "Prepayment Tax Group Code",
                     FALSE,
                     PrepmtAmt >= 0)
                THEN BEGIN
                  TempVATAmountLineRemainder := VATAmountLine;
                  TempVATAmountLineRemainder.INIT;
                  TempVATAmountLineRemainder.INSERT;
                END;

                IF SalesHeader."Prices Including VAT" THEN BEGIN
                  IF PrepmtAmt = 0 THEN BEGIN
                    VATAmount := 0;
                    NewAmountIncludingVAT := 0;
                  END ELSE BEGIN
                    VATAmount :=
                      TempVATAmountLineRemainder."VAT Amount" +
                      (VATAmountLine."VAT Amount" + VATAmountLine."EC Amount") * PrepmtAmt / VATAmountLine."Line Amount";
                    NewAmountIncludingVAT :=
                      TempVATAmountLineRemainder."Amount Including VAT+EC" +
                      VATAmountLine."Amount Including VAT+EC" * PrepmtAmt / VATAmountLine."Line Amount";
                  END;
                  NewAmount :=
                    ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision") -
                    ROUND(VATAmount,Currency."Amount Rounding Precision");
                  NewVATBaseAmount :=
                    ROUND(
                      NewAmount * (1 - SalesHeader."VAT Base Discount %" / 100),
                      Currency."Amount Rounding Precision");
                END ELSE BEGIN
                  NewAmount := PrepmtAmt;
                  NewVATBaseAmount :=
                    ROUND(
                      NewAmount * (1 - SalesHeader."VAT Base Discount %" / 100),
                      Currency."Amount Rounding Precision");
                  IF VATAmountLine."VAT+EC Base" = 0 THEN
                    VATAmount := 0
                  ELSE
                    VATAmount :=
                      TempVATAmountLineRemainder."VAT Amount" +
                      (VATAmountLine."VAT Amount" + VATAmountLine."EC Amount") * NewAmount / VATAmountLine."VAT+EC Base";
                  NewAmountIncludingVAT := NewAmount + ROUND(VATAmount,Currency."Amount Rounding Precision");
                END;

                "Prepayment Amount" := NewAmount;
                "Prepmt. Amt. Incl. VAT" :=
                  ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                "Prepmt. VAT Base Amt." := NewVATBaseAmount;

                IF (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount") = 0 THEN
                  VATDifference := 0
                ELSE
                  IF PrepmtAmtToInvTotal = 0 THEN
                    VATDifference :=
                      VATAmountLine."VAT Difference" * ("Prepmt. Line Amount" - "Prepmt. Amt. Inv.") /
                      (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount")
                  ELSE
                    VATDifference :=
                      VATAmountLine."VAT Difference" * ("Prepmt. Line Amount" - "Prepmt. Amt. Inv.") /
                      PrepmtAmtToInvTotal;

                "Prepayment VAT Difference" := ROUND(VATDifference,Currency."Amount Rounding Precision");

                MODIFY;
                RecRef.GETTABLE(SalesLine);
                ChangeLogMgt.LogModification(RecRef,xRecRef);

                TempVATAmountLineRemainder."Amount Including VAT+EC" :=
                  NewAmountIncludingVAT - ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                TempVATAmountLineRemainder."VAT Amount" := VATAmount - NewAmountIncludingVAT + NewAmount;
                TempVATAmountLineRemainder."VAT Difference" := VATDifference - "Prepayment VAT Difference";
                TempVATAmountLineRemainder.MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CalcVATAmountLines@35(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1009 : Record 37;VAR VATAmountLine@1003 : Record 290;DocumentType@1008 : 'Invoice,Credit Memo,Statistic');
    VAR
      PrevVatAmountLine@1007 : Record 290;
      Currency@1004 : Record 4;
      SalesTaxCalculate@1005 : Codeunit 398;
      NewAmount@1002 : Decimal;
      NewPrepmtVATDiffAmt@1010 : Decimal;
    BEGIN
      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesHeader."Currency Code");

      VATAmountLine.DELETEALL;

      WITH SalesLine DO BEGIN
        ApplyFilter(SalesHeader,DocumentType,SalesLine);
        IF FIND('-') THEN
          REPEAT
            NewAmount := PrepmtAmount(SalesLine,DocumentType);
            IF NewAmount <> 0 THEN BEGIN
              IF DocumentType = DocumentType::Invoice THEN
                NewAmount := "Prepmt. Line Amount";
              IF "Prepmt. VAT Calc. Type" IN
                 ["VAT Calculation Type"::"Reverse Charge VAT","VAT Calculation Type"::"Sales Tax"]
              THEN
                "VAT %" := 0;
              IF NOT VATAmountLine.GET(
                   "Prepayment VAT Identifier",
                   "Prepmt. VAT Calc. Type","Prepayment Tax Group Code",
                   FALSE,NewAmount >= 0)
              THEN BEGIN
                VATAmountLine.INIT;
                VATAmountLine."VAT Identifier" := "Prepayment VAT Identifier";
                VATAmountLine."VAT Calculation Type" := "Prepmt. VAT Calc. Type";
                VATAmountLine."Tax Group Code" := "Prepayment Tax Group Code";
                VATAmountLine."VAT %" := "Prepayment VAT %";
                VATAmountLine."EC %" := "Prepayment EC %"; // es0003
                VATAmountLine.Modified := TRUE;
                VATAmountLine.Positive := NewAmount >= 0;
                VATAmountLine."Includes Prepayment" := TRUE;
                VATAmountLine.INSERT;
              END;
              VATAmountLine."Line Amount" := VATAmountLine."Line Amount" + NewAmount;
              NewPrepmtVATDiffAmt := PrepmtVATDiffAmount(SalesLine,DocumentType);
              IF DocumentType = DocumentType::Invoice THEN
                NewPrepmtVATDiffAmt := SalesLine."Prepayment VAT Difference" + SalesLine."Prepmt VAT Diff. to Deduct" +
                  SalesLine."Prepmt VAT Diff. Deducted";
              VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + NewPrepmtVATDiffAmt;
              VATAmountLine.MODIFY;
            END;
          UNTIL NEXT = 0;
      END;

      WITH VATAmountLine DO
        IF FIND('-') THEN
          REPEAT
            IF (PrevVatAmountLine."VAT Identifier" <> "VAT Identifier") OR
               (PrevVatAmountLine."VAT Calculation Type" <> "VAT Calculation Type") OR
               (PrevVatAmountLine."Tax Group Code" <> "Tax Group Code") OR
               (PrevVatAmountLine."Use Tax" <> "Use Tax")
            THEN
              PrevVatAmountLine.INIT;
            IF SalesHeader."Prices Including VAT" THEN BEGIN
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    "VAT+EC Base" :=
                      ROUND(
                        ("Line Amount" - "Invoice Discount Amount") / (1 + ("VAT %" + "EC %") / 100),
                        Currency."Amount Rounding Precision") - "VAT Difference";
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND(
                        PrevVatAmountLine."VAT Amount" +
                        ("Line Amount" - "VAT+EC Base" - "VAT Difference") *
                        ("VAT %" / ("VAT %" + "EC %")) * // es0003
                        (1 - SalesHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "EC Amount" :=
                      "EC Difference" +
                      ROUND(
                        PrevVatAmountLine."EC Amount" +
                        ("Line Amount" - "VAT+EC Base" - "EC Difference") *
                        ("EC %" / ("VAT %" + "EC %")) * // es0003
                        (1 - SalesHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT+EC" := "VAT+EC Base" + "VAT Amount" + "EC Amount";
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE BEGIN
                      PrevVatAmountLine := VATAmountLine;
                      PrevVatAmountLine."VAT Amount" :=
                        ("Line Amount" - "VAT+EC Base" - "VAT Difference") *
                        (1 - SalesHeader."VAT Base Discount %" / 100);
                      PrevVatAmountLine."VAT Amount" :=
                        PrevVatAmountLine."VAT Amount" -
                        ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    END;
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "Amount Including VAT+EC" := "Line Amount" - "Invoice Discount Amount";
                    "VAT+EC Base" :=
                      ROUND(
                        SalesTaxCalculate.ReverseCalculateTax(
                          SalesHeader."Tax Area Code","Tax Group Code",SalesHeader."Tax Liable",
                          SalesHeader."Posting Date","Amount Including VAT+EC",Quantity,SalesHeader."Currency Factor"),
                        Currency."Amount Rounding Precision");
                    "VAT Amount" := "VAT Difference" + "Amount Including VAT+EC" - "VAT+EC Base";
                    IF "VAT+EC Base" = 0 THEN
                      "VAT %" := 0
                    ELSE
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT+EC Base",0.00001);
                  END;
              END;
            END ELSE BEGIN
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    "VAT+EC Base" := "Line Amount" - "Invoice Discount Amount";
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND(
                        PrevVatAmountLine."VAT Amount" +
                        "VAT+EC Base" * "VAT %" / 100 * (1 - SalesHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "EC Amount" :=
                      "EC Difference" +
                      ROUND(
                        PrevVatAmountLine."EC Amount" +
                        "VAT+EC Base" * "EC %" / 100 * (1 - SalesHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);

                    "Amount Including VAT+EC" := "Line Amount" - "Invoice Discount Amount" + "VAT Amount" + "EC Amount";
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE BEGIN
                      PrevVatAmountLine := VATAmountLine;
                      PrevVatAmountLine."VAT Amount" :=
                        "VAT+EC Base" * ("VAT %" + "EC %") / 100 * (1 - SalesHeader."VAT Base Discount %" / 100);
                      PrevVatAmountLine."VAT Amount" :=
                        PrevVatAmountLine."VAT Amount" -
                        ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    END;
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "VAT+EC Base" := "Line Amount" - "Invoice Discount Amount";
                    "VAT Amount" :=
                      SalesTaxCalculate.CalculateTax(
                        SalesHeader."Tax Area Code","Tax Group Code",SalesHeader."Tax Liable",
                        SalesHeader."Posting Date","VAT+EC Base",Quantity,SalesHeader."Currency Factor");
                    IF "VAT+EC Base" = 0 THEN
                      "VAT %" := 0
                    ELSE
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT+EC Base",0.00001);
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND("VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT+EC" := "VAT+EC Base" + "VAT Amount";
                  END;
              END;
            END;
            "Calculated VAT Amount" := "VAT Amount" - "VAT Difference";
            MODIFY;
          UNTIL NEXT = 0;
    END;

    PROCEDURE SumPrepmt@15(SalesHeader@1000 : Record 36;VAR SalesLine@1011 : Record 37;VAR VATAmountLine@1003 : Record 290;VAR TotalAmount@1001 : Decimal;VAR TotalVATAmount@1002 : Decimal;VAR VATAmountText@1004 : Text[30]);
    VAR
      SalesSetup@1012 : Record 311;
      PrepmtInvBuf@1005 : TEMPORARY Record 461;
      TotalPrepmtBuf@1007 : Record 461;
      TotalPrepmtBufLCY@1008 : Record 461;
      TempDocDim@1006 : TEMPORARY Record 357;
      DifVATPct@1009 : Boolean;
      PrevVATPct@1010 : Decimal;
    BEGIN
      SalesSetup.GET;
      CalcVATAmountLines(SalesHeader,SalesLine,VATAmountLine,2);
      UpdateVATOnLines(SalesHeader,SalesLine,VATAmountLine,2);
      BuildInvLineBuffer(SalesHeader,SalesLine,2,PrepmtInvBuf,TempDocDim,SalesSetup."Invoice Rounding",FALSE);
      IF PrepmtInvBuf.FIND('-') THEN BEGIN
        PrevVATPct := PrepmtInvBuf."VAT %" + PrepmtInvBuf."EC %";
        REPEAT
          RoundAmounts(SalesHeader,PrepmtInvBuf,TotalPrepmtBuf,TotalPrepmtBufLCY);
          IF (PrepmtInvBuf."VAT %" + PrepmtInvBuf."EC %") <> PrevVATPct THEN
            DifVATPct := TRUE;
        UNTIL PrepmtInvBuf.NEXT = 0;
      END;

      TotalAmount := TotalPrepmtBuf.Amount;
      TotalVATAmount := TotalPrepmtBuf."VAT Amount";
      IF DifVATPct OR ((PrepmtInvBuf."VAT %" = 0) AND (PrepmtInvBuf."EC %" = 0)) THEN
        VATAmountText := Text014
      ELSE
        VATAmountText := STRSUBSTNO(Text015,PrevVATPct);
    END;

    PROCEDURE GetSalesLines@16(SalesHeader@1000 : Record 36;DocumentType@1003 : 'Invoice,Credit Memo,Statistic';VAR ToSalesLine@1001 : Record 37);
    VAR
      SalesSetup@1004 : Record 311;
      FromSalesLine@1002 : Record 37;
      InvRoundingSalesLine@1007 : Record 37;
      TempVATAmountLine@1005 : TEMPORARY Record 290;
      TotalAmt@1006 : Decimal;
      NextLineNo@1008 : Integer;
    BEGIN
      ApplyFilter(SalesHeader,DocumentType,FromSalesLine);
      IF FromSalesLine.FIND('-') THEN BEGIN
        REPEAT
          ToSalesLine := FromSalesLine;
          ToSalesLine.INSERT;
        UNTIL FromSalesLine.NEXT = 0;

        SalesSetup.GET;
        IF SalesSetup."Invoice Rounding" THEN BEGIN
          CalcVATAmountLines(SalesHeader,ToSalesLine,TempVATAmountLine,2);
          UpdateVATOnLines(SalesHeader,ToSalesLine,TempVATAmountLine,2);
          ToSalesLine.FIND('-');
          REPEAT
            TotalAmt := TotalAmt + ToSalesLine."Prepmt. Amt. Incl. VAT";
          UNTIL ToSalesLine.NEXT = 0;
          IF InitInvoiceRoundingLine(SalesHeader,TotalAmt,InvRoundingSalesLine) THEN
            WITH ToSalesLine DO BEGIN
              NextLineNo := "Line No." + 1;
              ToSalesLine := InvRoundingSalesLine;
              "Line No." := NextLineNo;

              IF DocumentType <> DocumentType::"Credit Memo" THEN
                "Prepmt. Line Amount" := "Line Amount"
              ELSE
                "Prepmt. Amt. Inv." := "Line Amount";
              "Prepmt. VAT Calc. Type" := "VAT Calculation Type";
              "Prepayment VAT Identifier" := "VAT Identifier";
              "Prepayment Tax Group Code" := "Tax Group Code";
              "Prepayment VAT Identifier" := "VAT Identifier";
              "Prepayment Tax Group Code" := "Tax Group Code";
              "Prepayment VAT %" := "VAT %";
              "Prepayment EC %" := "EC %"; // es0003
              INSERT;
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE CopyAndCheckDocDimToTempDocDim@34(VAR TempDocDim@1000 : Record 357;SalesHeader@1001 : Record 36);
    VAR
      DocDim@1002 : Record 357;
      SalesLine@1003 : Record 37;
    BEGIN
      TempDocDim.RESET;
      TempDocDim.DELETEALL;
      DocDim.SETFILTER("Table ID",'%1|%2',DATABASE::"Sales Header",DATABASE::"Sales Line");
      DocDim.SETRANGE("Document Type",SalesHeader."Document Type");
      DocDim.SETRANGE("Document No.",SalesHeader."No.");
      IF DocDim.FIND('-') THEN BEGIN
        REPEAT
          TempDocDim.INIT;
          TempDocDim := DocDim;
          TempDocDim.INSERT;
        UNTIL DocDim.NEXT = 0;
        TempDocDim.SETRANGE("Line No.",0);
        CheckDimComb(TempDocDim,0,SalesHeader);
      END;
      SalesLine."Line No." := 0;
      CheckDimValuePosting(TempDocDim,SalesHeader,SalesLine);

      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
      IF SalesLine.FIND('-') THEN
        REPEAT
          TempDocDim.SETRANGE("Line No.",SalesLine."Line No.");
          CheckDimComb(TempDocDim,SalesLine."Line No.",SalesHeader);
          CheckDimValuePosting(TempDocDim,SalesHeader,SalesLine);
        UNTIL SalesLine.NEXT = 0;
      TempDocDim.RESET;
    END;

    PROCEDURE ApplyFilter@20(SalesHeader@1000 : Record 36;DocumentType@1001 : 'Invoice,Credit Memo,Statistic';VAR SalesLine@1002 : Record 37);
    BEGIN
      WITH SalesLine DO BEGIN
        RESET;
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        SETFILTER(Type,'<>%1',Type::" ");
        IF DocumentType IN [DocumentType::Invoice,DocumentType::Statistic] THEN
          SETFILTER("Prepmt. Line Amount",'<>0')
        ELSE
          SETFILTER("Prepmt. Amt. Inv.",'<>0');
      END;
    END;

    PROCEDURE PrepmtAmount@12(SalesLine@1000 : Record 37;DocumentType@1001 : 'Invoice,Credit Memo,Statistic') : Decimal;
    BEGIN
      WITH SalesLine DO BEGIN
        CASE DocumentType OF
          DocumentType::Statistic:
            EXIT("Prepmt. Line Amount");
          DocumentType::Invoice:
            EXIT("Prepmt. Line Amount" - "Prepmt. Amt. Inv.");
          ELSE
            EXIT("Prepmt. Amt. Inv." - "Prepmt Amt Deducted");
        END;
      END;
    END;

    LOCAL PROCEDURE CheckDimComb@30(VAR TempDocDim@1003 : Record 357;LineNo@1000 : Integer;SalesHeader@1001 : Record 36);
    VAR
      DimMgt@1002 : Codeunit 408;
    BEGIN
      IF NOT DimMgt.CheckDocDimComb(TempDocDim) THEN BEGIN
        IF LineNo = 0 THEN
          ERROR(
            Text007,
            SalesHeader."Document Type",SalesHeader."No.",DimMgt.GetDimCombErr);
        ERROR(
          Text008,
          SalesHeader."Document Type",SalesHeader."No.",LineNo,DimMgt.GetDimCombErr);
      END;
    END;

    LOCAL PROCEDURE CheckDimValuePosting@28(VAR TempDocDim@1001 : Record 357;SalesHeader@1004 : Record 36;VAR SalesLine@1000 : Record 37);
    VAR
      DimMgt@1005 : Codeunit 408;
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      IF SalesLine."Line No." = 0 THEN BEGIN
        TableIDArr[1] := DATABASE::Customer;
        NumberArr[1] := SalesHeader."Bill-to Customer No.";
        TableIDArr[2] := DATABASE::Job;
        // NumberArr[2] := SalesHeader."Job No.";
        TableIDArr[3] := DATABASE::"Salesperson/Purchaser";
        NumberArr[3] := SalesHeader."Salesperson Code";
        TableIDArr[4] := DATABASE::Campaign;
        NumberArr[4] := SalesHeader."Campaign No.";
        TableIDArr[5] := DATABASE::"Responsibility Center";
        NumberArr[5] := SalesHeader."Responsibility Center";
        IF NOT DimMgt.CheckDocDimValuePosting(TempDocDim,TableIDArr,NumberArr) THEN
          ERROR(
            Text009,
            SalesHeader."Document Type",SalesHeader."No.",DimMgt.GetDimValuePostingErr);
      END ELSE BEGIN
        TableIDArr[1] := DimMgt.TypeToTableID3(SalesLine.Type);
        NumberArr[1] := SalesLine."No.";
        TableIDArr[2] := DATABASE::Job;
        NumberArr[2] := SalesLine."Job No.";
        IF NOT DimMgt.CheckDocDimValuePosting(TempDocDim,TableIDArr,NumberArr) THEN
          ERROR(
            Text010,
            SalesHeader."Document Type",SalesHeader."No.",SalesLine."Line No.",DimMgt.GetDimValuePostingErr);
      END;
    END;

    LOCAL PROCEDURE RunGenJnlPostLine@23(VAR GenJnlLine@1000 : Record 81;DimEntryNo@1001 : Integer);
    VAR
      TempDimBuf@1002 : TEMPORARY Record 360;
      TempJnlLineDim@1003 : TEMPORARY Record 356;
      DimMgt@1005 : Codeunit 408;
    BEGIN
      TempDimBuf.INIT;
      TempJnlLineDim.INIT;
      DimBufMgt.GetDimensions(DimEntryNo,TempDimBuf);
      DimMgt.CopyDimBufToJnlLineDim(
        TempDimBuf,TempJnlLineDim,GenJnlLine."Journal Template Name",
        GenJnlLine."Journal Batch Name",GenJnlLine."Line No.");
      GenJnlPostLine.RunWithCheck(GenJnlLine,TempJnlLineDim);
    END;

    PROCEDURE UpdatePrepmtAmountOnSaleslines@13(SalesHeader@1001 : Record 36;NewTotalPrepmtAmount@1000 : Decimal);
    VAR
      Currency@1004 : Record 4;
      SalesLine@1002 : Record 37;
      ChangeLogMgt@1005 : Codeunit 423;
      RecRef@1007 : RecordRef;
      xRecRef@1006 : RecordRef;
      TotalLineAmount@1003 : Decimal;
      TotalPrepmtAmount@1008 : Decimal;
      TotalPrepmtAmtInv@1010 : Decimal;
      LastLineNo@1009 : Integer;
    BEGIN
      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesHeader."Currency Code");

      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        SETFILTER(Type,'<>%1',Type::" ");
        SETFILTER("Line Amount",'<>0');
        SETFILTER("Prepayment %",'<>0');
        LOCKTABLE;
        IF FIND('-') THEN
          REPEAT
            TotalLineAmount := TotalLineAmount + "Line Amount";
            TotalPrepmtAmtInv := TotalPrepmtAmtInv + "Prepmt. Amt. Inv.";
            LastLineNo := "Line No.";
          UNTIL NEXT = 0
        ELSE
          ERROR(Text017,FIELDCAPTION("Prepayment %"));
        IF TotalLineAmount = 0 THEN
          ERROR(Text013,NewTotalPrepmtAmount);
        IF NOT (NewTotalPrepmtAmount IN [TotalPrepmtAmtInv ..TotalLineAmount]) THEN
          ERROR(Text016,TotalPrepmtAmtInv,TotalLineAmount);
        IF FIND('-') THEN
          REPEAT
            xRecRef.GETTABLE(SalesLine);
            IF "Line No." <> LastLineNo THEN
              VALIDATE(
                "Prepmt. Line Amount",
                ROUND(
                  NewTotalPrepmtAmount * "Line Amount" / TotalLineAmount,
                  Currency."Amount Rounding Precision"))
            ELSE
              VALIDATE("Prepmt. Line Amount",NewTotalPrepmtAmount - TotalPrepmtAmount);
            TotalPrepmtAmount := TotalPrepmtAmount + "Prepmt. Line Amount";
            MODIFY;
            RecRef.GETTABLE(SalesLine);
            ChangeLogMgt.LogModification(RecRef,xRecRef);
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE GetDimBuf@14(DimEntryNo@1001 : Integer;VAR ToDocDim@1002 : Record 357);
    VAR
      TempDimBuf@1000 : TEMPORARY Record 360;
      DimMgt@1003 : Codeunit 408;
    BEGIN
      ToDocDim.RESET;
      ToDocDim.DELETEALL;
      TempDimBuf.INIT;
      DimBufMgt.GetDimensions(DimEntryNo,TempDimBuf);
      DimMgt.CopyDimBufToDocDim(TempDimBuf,0,'',0,ToDocDim)
    END;

    LOCAL PROCEDURE CreateDimensions@26(VAR SalesLine@1009 : Record 37;VAR DocDim@1000 : Record 357);
    VAR
      SourceCodeSetup@1006 : Record 242;
      DimMgt@1010 : Codeunit 408;
      TableID@1007 : ARRAY [10] OF Integer;
      No@1008 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := DATABASE::"G/L Account";
      No[1] := SalesLine."No.";
      TableID[2] := DATABASE::Job;
      No[2] := SalesLine."Job No.";
      TableID[3] := DATABASE::"Responsibility Center";
      No[3] := SalesLine."Responsibility Center";
      SalesLine."Shortcut Dimension 1 Code" := '';
      SalesLine."Shortcut Dimension 2 Code" := '';
      DimMgt.GetPreviousDocDefaultDim(
        DATABASE::"Sales Header",SalesLine."Document Type",SalesLine."Document No.",0,
        DATABASE::Customer,SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");
      DimMgt.GetDefaultDim(
        TableID,No,SourceCodeSetup.Sales,
        SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");
      DimMgt.ExtractDocDefaultDim(
        DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",DocDim)
    END;

    LOCAL PROCEDURE InsertInDimBuffer@18(VAR DocDim@1001 : Record 357;SalesLine@1002 : Record 37) : Integer;
    VAR
      TempDimBuf@1003 : TEMPORARY Record 360;
      EntryNo@1000 : Integer;
    BEGIN
      WITH DocDim DO BEGIN
        RESET;
        SETRANGE("Table ID",DATABASE::"Sales Line");
        SETRANGE("Document Type",SalesLine."Document Type");
        SETRANGE("Document No.",SalesLine."Document No.");
        SETRANGE("Line No.",SalesLine."Line No.");
        IF FIND('-') THEN BEGIN
          TempDimBuf.INIT;
          REPEAT
            TempDimBuf."Table ID" := "Table ID";
            TempDimBuf."Dimension Code" := "Dimension Code";
            TempDimBuf."Dimension Value Code" := "Dimension Value Code";
            TempDimBuf.INSERT;
          UNTIL NEXT = 0;
        END;
        RESET;
        EntryNo := DimBufMgt.FindDimensions(TempDimBuf);
        IF EntryNo = 0 THEN
          EntryNo := DimBufMgt.InsertDimensions(TempDimBuf);

        EXIT(EntryNo);
      END;
    END;

    LOCAL PROCEDURE PrepmtDocTypeToDocType@21(DocumentType@1000 : 'Invoice,Credit Memo') : Integer;
    BEGIN
      CASE DocumentType OF
        DocumentType::Invoice:
          EXIT(2);
        DocumentType::"Credit Memo":
          EXIT(3);
      END;
          EXIT(2);
    END;

    PROCEDURE GetSalesLinesToDeduct@24(SalesHeader@1000 : Record 36;VAR SalesLines@1002 : Record 37);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      ApplyFilter(SalesHeader,1,SalesLine);
      IF SalesLine.FINDSET THEN
        REPEAT
          IF (PrepmtAmount(SalesLine,0) <> 0) AND (PrepmtAmount(SalesLine,1) <> 0) THEN BEGIN
            SalesLines := SalesLine;
            SalesLines.INSERT;
          END;
        UNTIL SalesLine.NEXT = 0;
    END;

    PROCEDURE RealizeGainLoss@27(VAR GenJnlLine@1000 : Record 81;SalesLine@1001 : Record 37);
    VAR
      Currency@1003 : Record 4;
    BEGIN
      IF (SalesLine."Gen. Bus. Posting Group" <> GenPostingSetup."Gen. Bus. Posting Group") OR
         (SalesLine."Gen. Prod. Posting Group" <> GenPostingSetup."Gen. Prod. Posting Group")
      THEN
        GenPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");
      GenPostingSetup.TESTFIELD("Sales Prepayments Account");

      GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
      GenJnlLine."Account No." := GenPostingSetup."Sales Prepayments Account";
      GenJnlLine."System-Created Entry" := TRUE;
      GenJnlLine.Amount := SalesLine."Prepmt. Amount Inv. (LCY)";
      Currency.GET(SalesLine."Currency Code");
      GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::"G/L Account";
      IF GenJnlLine.Amount > 0 THEN  BEGIN
        Currency.TESTFIELD("Realized Gains Acc.");
        GenJnlLine."Bal. Account No." := Currency."Realized Gains Acc.";
      END ELSE BEGIN
        Currency.TESTFIELD("Realized Losses Acc.");
        GenJnlLine."Bal. Account No." := Currency."Realized Losses Acc.";
      END;
    END;

    PROCEDURE PrepmtVATDiffAmount@37(SalesLine@1000 : Record 37;DocumentType@1001 : 'Invoice,Credit Memo,Statistic') : Decimal;
    BEGIN
      WITH SalesLine DO BEGIN
        CASE DocumentType OF
          DocumentType::Statistic:
            EXIT("Prepayment VAT Difference");
          DocumentType::Invoice:
            EXIT("Prepayment VAT Difference");
          ELSE
            EXIT("Prepmt VAT Diff. to Deduct");
        END;
      END;
    END;

    BEGIN
    {
      <changelog>
        <add id="es0001" dev="VGARCA" date="2006-02-21" area="VATECCALC" feature="NAVCORS2594"
        releaseversion="ES5.00">ES Changes in W1 field names</add>
        <add id="es0002" dev="VGARCA" date="2006-03-31" area="PREPMTS" feature="PSCORS326"
        releaseversion="ES5.00">Prepayments Adaptation to ES </add>
        <change id="es0003" dev="mnommens" date="2008-06-26" area="VATECCALC" feature="NAVCORS25237"
        baseversion="ES5.00" releaseversion="ES6.00">Prepayments ES changes</change>
      </changelog>
    }
    END.
  }
}
