OBJECT Codeunit 7010406 Facturacion clientes
{
  OBJECT-PROPERTIES
  {
    Date=01/07/15;
    Time=17:09:18;
    Modified=Yes;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text50000@1103355011 : TextConst 'ESP=VEHICULO';
      Text50001@1103355012 : TextConst 'ESP=<integer>';
      rPar@1100244000 : Record 7010311;
      rParAux@1103355008 : Record 7010433;
      rConfIVA@1100253003 : Record 325;
      rConfVta@1100253013 : Record 311;
      rGrupContCli@1100253014 : Record 92;
      rCli@1100253015 : Record 18;
      rComp@1100253016 : Record 7010313;
      rTipoCambDiv@1103355002 : Record 330;
      rTempTextAltr@1103355001 : TEMPORARY Record 7035394;
      rTempLinVta@1103355003 : TEMPORARY Record 37;
      rCta@1103355004 : Record 15;
      rLinPre@1103355006 : Record 7010417;
      rTPI@1103355007 : TEMPORARY Record 7035392;
      cFunBas@1100244001 : Codeunit 7010310;
      Text001@1100244004 : TextConst 'ESP=FACTURAR';
      Text002@1100244002 : TextConst 'ESP=Se ha restringido el uso de esta acci¢n. Dirijase a su administrador.';
      Text003@1100244003 : TextConst 'ESP=&Prefacturar,&Facturar';
      Text004@1100244017 : TextConst 'ESP=No se ha especificado cliente.';
      Text005@1100244016 : TextConst 'ESP=No se ha especificado Touroperador.';
      Text006@1100244008 : TextConst 'ESP=No existe la composicion cliente %1 Touroperador %2.';
      Text007@1100244014 : TextConst 'ESP=No se ha especificado fecha de inicio de periodo.';
      Text008@1100244013 : TextConst 'ESP=No se ha especificado fecha de final de periodo.';
      Text009@1100244009 : TextConst 'ESP=No se pueden juntar tipos de servicio en una factura.';
      Text010@1100244005 : TextConst 'ESP=Debe especificar un tipo de servicio para la factura.';
      Text011@1100244007 : TextConst 'ESP=No hay servicios pendientes de facturar para el garaje %1 cliente %2 touroperador %3 marcados con usuario %4';
      Text012@1100244018 : TextConst 'ESP=No hay ning£n servicio pendiente de facturar por los siguientes conceptos: \';
      Text013@1100244026 : TextConst 'ESP="Garaje=  %1"';
      Text014@1100244025 : TextConst 'ESP="Cliente= %1"';
      Text015@1100244024 : TextConst 'ESP="Touroperador= %1"';
      Text016@1100244023 : TextConst 'ESP="Fechas= %1 - %2"';
      Text017@1100244022 : TextConst 'ESP="Tipo de Servicio= %1"';
      Text018@1100244021 : TextConst 'ESP="Codigos de Servicio= %1"';
      Text019@1100244020 : TextConst 'ESP="Tipo de Vehiculo= %1"';
      Text020@1100244019 : TextConst 'ESP="Zona de Precios= %1"';
      Text021@1100244006 : TextConst 'ESP=Algun servicio no han generado la prevision de coste-ingreso.';
      Text022@1100244027 : TextConst 'ESP=%1/%2 Tiene asignado un grupo de facturacion. No puede facturarse directamente';
      cFunAuto@1100244050 : Codeunit 7035326;
      cNoSeriesMgt@1100253023 : Codeunit 396;
      cCalculoPartes@1103355009 : Codeunit 7010407;
      wTipoLinea@1100244011 : 'Base,Suplemento,Maletas,Comentario,Zona,Resumen Zona,Solo Resumen Zona,Extra';
      wAgrupacion@1100244012 : 'Ninguna,CodigoServicio,Referencia,Vuelos';
      Text023@1100244028 : TextConst 'ESP=Desea facturar las prefacturas indicadas';
      Text024@1100244015 : TextConst 'ESP=No se ha encontrado ninguna prefactura con los parametros indicados';
      Text025@1100244030 : TextConst 'ESP=Se han encontrado prefacturas con N§ de contrato distinto';
      Text026@1100244029 : TextConst 'ESP=Se han encontrado prefacturas con Garaje  Distinto';
      Text027@1100244031 : TextConst 'ESP=Desea facturar la prefactura N§ %1.';
      Text028@1100244032 : TextConst 'ESP=No se puede facturar una prefactura ya facturada.';
      wNoLin@1100253001 : Integer;
      wActual@1100253010 : Integer;
      wTotal@1100253011 : Integer;
      ventana@1100244033 : Dialog;
      Text033@1100244038 : TextConst 'ESP=LINEA ZONA';
      Text034@1100244039 : TextConst 'ESP=SUPLEMENTO';
      Text035@1100244040 : TextConst 'ESP=EXTRA';
      Text036@1100244042 : TextConst 'ESP=IMPORTE DE LAS MALETAS INCLUIDAS';
      Text037@1100244041 : TextConst 'ESP=MALETAS';
      Text038@1100244043 : TextConst 'ESP=BASE';
      wNoParteAnt@1100244044 : Code[10];
      Text039@1100244045 : TextConst 'ESP=No se pueden facturar prefacturas con %1 distintos';
      Text040@1100244046 : TextConst 'ESP=No se ha marcado ninguna prefactura';
      Text041@1100244047 : TextConst 'ESP=Ha marcado una sola prefactura ¨Desea seguir?';
      Text042@1100244048 : TextConst 'ESP=¨Desea agrupar y facturar las prefacturas marcadas?';
      Text043@1100244049 : TextConst 'ESP=Tabla no vacia';
      Text044@1100244052 : TextConst 'ESP=Abono Factura %1';
      wFacturaraCero@1103350000 : Boolean;
      Text045@1100253000 : TextConst 'ESP=Servicios de %1-%2 de dia %3 a dia %4.';
      wPrecision@1100253002 : Decimal;
      Text046@1100253004 : TextConst 'ESP=Prefacturando servicios\Garaje         #1########\Cliente        #2##################\Touroperador   #3##################\Periodo fechas #4###### -#5######\';
      Text047@1100253005 : TextConst 'ESP=Proceso #6############################\@7@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Text048@1100253006 : TextConst 'ESP=Comprobando datos a facturar';
      Text049@1100253007 : TextConst 'ESP=Creando cabecera de prefactura';
      Text050@1100253008 : TextConst 'ESP=Copiando de tablas temporales';
      Text051@1100253009 : TextConst 'ESP=Creando lineas de prefactura';
      Text052@1100253012 : TextConst 'ESP=Generando factura de la prefactura\Prefactura     #1##################\Cliente        #2##################\Touroperador   #3##################\';
      Text053@1100253017 : TextConst 'ESP=Comprobando configuracion';
      Text054@1100253018 : TextConst 'ESP=Creando cabecera de factura';
      Text055@1100253019 : TextConst 'ESP=Creando lineas de factura';
      Text056@1100253020 : TextConst 'ESP=Rellenando N§ factura en linea de ingreso';
      Text057@1100253021 : TextConst 'ESP=Facturado 0';
      Text058@1100253022 : TextConst 'ESP=Moviendo lineas de ingreso a la prefactura definitiva @1@@@@@@@@@@@@@';
      Text059@1100253024 : TextConst 'ESP=No est  permitido hacer abonos con este numero de serie';
      Text060@1103355000 : TextConst 'ESP=El total a facturar es 0. No se va a generar prefactura\¨Desea marcar las lineas de ingreso como Facturadas?';
      wFactRapida@1103355005 : Boolean;
      Text061@1103355010 : TextConst 'ESP=\Cliente %1 - Touroperador %2 - Fechas %3 - %4';

    PROCEDURE FacturarIngresos@1100253000(VAR prPI@1100253000 : Record 7035392);
    VAR
      lrCond@1100253002 : Record 7010420;
      lwOpcion@1100253001 : Integer;
    BEGIN
      // FacturarIngresos
      //

      // Comprobar si el usuario esta autorizado para facturar

      IF cFunBas.TestRestriccion(Text001) THEN
        ERROR(Text002);

      IF prPI."N§ Prefactura" = '' THEN
        lwOpcion := 1
      ELSE
        lwOpcion := 2;

      lwOpcion := STRMENU(Text003, lwOpcion);
      IF lwOpcion = 0 THEN
        EXIT;

      CASE lwOpcion OF
        1: CrearPrefactura(prPI, lrCond, FALSE);
        2: CrearFactura(prPI   , lrCond, FALSE, FALSE);
      END;
    END;

    PROCEDURE CrearPrefactura@1100253006(VAR prPI@1100253000 : Record 7035392;VAR prCond@1100253002 : Record 7010420;pwAutomatica@1100253001 : Boolean) : Boolean;
    VAR
      lrCondFra@1100253003 : Record 7010416;
      lrCon@1100253004 : Record 7010403;
      lrPI2@1100253006 : Record 7035392;
      lrCabTEMP@1100253005 : TEMPORARY Record 7010415;
      lrLinTEMP@1100253008 : TEMPORARY Record 7010417;
      lrCab@1100253011 : Record 7010415;
      lrTOParte@1100253012 : Record 7010365;
      lrTOParte2@1100253013 : Record 7010365;
      lrPie@1103355001 : Record 7035398;
      lfFormPref@1103355000 : Form 7035253;
    BEGIN
      // CrearPrefactura
      //

      // Comprobar si el usuario esta autorizado para facturar

      IF cFunBas.TestRestriccion(Text001) THEN
        ERROR(Text002);

      // Comprobar si se pueden hacer facturas a cero

      rPar.FINDFIRST;
      rParAux.FINDFIRST;
      rConfVta.FINDFIRST;
      wFacturaraCero := NOT rPar."No permitir Facturar a 0";

      // Se borra las lineas de pie de factura por si acaso hubiese alguna linea perdida

      lrPie.BorraUser;

      // Si no es automatica hay que pedir datos al usuario, en caso contrario las condiciones vendran de la facturacion
      // automatica

      IF NOT pwAutomatica THEN BEGIN

        // AJF 07/01/09
        // Evito borrar el registro, ya que ahora tiene datos permanentes.
        IF prCond.GET(USERID) THEN
          prCond.LimpiaRegistro
        ELSE BEGIN
          prCond.INIT;
          prCond.Usuario := USERID;
          prCond.INSERT;
        END;

        prCond.Cliente           := prPI."Cliente Operativo";
        prCond.Facturando        := TRUE;
        prCond.Touroperador      := prPI.Touroperador;
        prCond.Garaje            := prPI.Garaje;
        prCond."Fecha desde"     := prPI.Fecha;
        prCond."Fecha hasta"     := prPI.Fecha;
        prCond."Tipos servicio"  := prPI."Tipo servicio";
        prCond.Referencia        := prPI.Referencia;
        prCond."Tipos Vehiculo"  := prPI."Tipo Vehiculo";
        prCond."Fecha Factura"   := cFunAuto.BuscaFechaFactura; // Esta funcion devuelve la ultima fecha de registro utilizada

        // Buscamos las condiciones de facturacion por Cliente - Touroperador - Tipo Servicio

        IF NOT lrCondFra.GET(prPI."Cliente Operativo", prPI.Touroperador, prPI."Tipo Servicio Fijo") THEN
          lrCondFra.INIT;

        prCond."Tipo prefactura" := lrCondFra."Tipo prefactura";
        prCond."Tipo factura"    := lrCondFra."Tipo factura";
        prCond.Imprimir          := TRUE;
        prCond.GetCondiciones(FALSE, TRUE); // Busca condiciones de Serie y Grupo Reg IVA Producto
        prCond.VALIDATE("Informacion Pie de Pagina", FALSE);
        prCond.MODIFY;

        // Abrimos formulario para que el usuario introduzca las condiciones definitivas de prefacturacion

        prCond.FILTERGROUP(2);
        prCond.SETRANGE(Usuario, USERID);
        prCond.FILTERGROUP(0);
        lfFormPref.SETTABLEVIEW(prCond);
        lfFormPref.LOOKUPMODE:= TRUE;
        COMMIT;
        IF lfFormPref.RUNMODAL <> ACTION::OK THEN
          EXIT;

        // JPT 04/12/06 Recupera la tabla temporal de texto alternativo
        lfFormPref.GetLinTextoAlternativo(rTempTextAltr);

        prCond.GET(USERID);
      END
      ELSE BEGIN
        // Buscamos las condiciones de facturacion por Cliente - Touroperador - Tipo Servicio

        IF prCond."Tipo Servicio Fijo" = prCond."Tipo Servicio Fijo"::Todos THEN BEGIN
          lrCondFra.RESET;
          lrCondFra.SETRANGE(Cliente, prCond.Cliente);
          lrCondFra.SETRANGE(TTOO   , prCond.Touroperador);
          IF NOT lrCondFra.FINDFIRST THEN
            lrCondFra.INIT;
        END
        ELSE BEGIN
          IF NOT lrCondFra.GET(prCond.Cliente, prCond.Touroperador, prCond."Tipo Servicio Fijo") THEN
            lrCondFra.INIT;
        END;
      END;

      // Mostrar la ventana de informacion para el usuario

      IF NOT pwAutomatica THEN BEGIN
        ventana.OPEN(Text046 + Text047);
        ventana.UPDATE(1, prCond.Garaje);
        ventana.UPDATE(2, prCond.Cliente);
        ventana.UPDATE(3, prCond.Touroperador);
        ventana.UPDATE(4, prCond."Fecha desde");
        ventana.UPDATE(5, prCond."Fecha hasta");

        ventana.UPDATE(6, Text048);
      END;


      // Llamar a la rutina de comprobacion de errores previos, aprovechamos para filtrar sobre
      // la variable de Produccion ingreso

      IF ErroresPrevios(prCond, prPI, lrCondFra, lrCon) THEN BEGIN
        IF NOT pwAutomatica THEN
          ventana.CLOSE;
        EXIT(FALSE);
      END;

      // Cambiamos el tipo de IVA si as¡ se ha pedido

      CambiaIva(prPI, prCond."Grupo registro IVA producto");

      // Pasamos la produccion ingreso a remporal

      PasarPITemp(prPI);

      // En aquellos clientes que no permiten facturas a cero, cuando las lineas a prefacturar suman cero, se preguntar 
      // al usuario si desea marcar las lineas como facturadas

      IF NOT ComprobarImporteCero(prPI) THEN BEGIN
        IF NOT pwAutomatica THEN
          ventana.CLOSE;
        EXIT(FALSE);
      END;

      // Crear la prefactura de ingreso, lo haremos sobre una variable TEMPORARY

      IF NOT pwAutomatica THEN
        ventana.UPDATE(6, Text049);

      CLEAR(lrCabTEMP);
      // JPT 14/11/06 A¤adimos los datos del cliente facturacion
      IF prCond."Cambiar Datos Cliente" THEN
        lfFormPref.PasaDatosCliente(lrCabTEMP)
      ELSE
        lrCabTEMP.GetDatosCliente(rComp."Cliente facturacion");

      lrCabTEMP."N§ Prefactura"      := USERID;
      lrCabTEMP.Cliente              := prCond.Cliente;
      lrCabTEMP."Cliente Facturacion":= rComp."Cliente facturacion";
      lrCabTEMP.Touroperador         := prCond.Touroperador;
      lrCabTEMP."Fecha desde"        := prCond."Fecha desde";
      lrCabTEMP."Fecha hasta"        := prCond."Fecha hasta";
      lrCabTEMP."Texto Registro"     := prCond."Texto Registro";

      IF (lrCabTEMP."Texto Registro" = '') AND (NOT (rPar."Empresa Real" IN [rPar."Empresa Real"::IBZ, rPar."Empresa Real"::SJO])) THEN
        lrCabTEMP."Texto Registro" := STRSUBSTNO(Text045, prCond.Cliente, prCond.Touroperador, prCond."Fecha desde",
                                                 prCond."Fecha hasta");

      lrCabTEMP."% Dto"              := prCond."% Dto";
      lrCabTEMP."Mostrar Descuentos" := prCond."Imprimir Descuentos";

      IF NOT prCond."Facturar sobre marca" THEN BEGIN
        lrCabTEMP."Codigos Servicio"   := prCond."Codigos Servicio";
        lrCabTEMP."Zonas de Precio"    := prCond."Zonas Precio";
        lrCabTEMP."Tipos Vehiculo"     := prCond."Tipos Vehiculo";
        lrCabTEMP."Referencia cliente" := prCond.Referencia;
        lrCabTEMP."Tipos Servicio"     := '';
      END;

      // Marcamos si la prefactura contiene mas de un touroperador, para mostrarlo en la impresion

      rTPI.SETFILTER(Touroperador, '<>%1', prPI.Touroperador);
      IF rTPI.FINDFIRST THEN
        lrCabTEMP."Multiples touroperadores" := TRUE;
      rTPI.RESET;

      lrCabTEMP."Facturar sobre marca" := prCond."Facturar sobre marca";
      lrCabTEMP."Tipo prefactura"      := prCond."Tipo prefactura";
      lrCabTEMP."Tipo factura"         := prCond."Tipo factura";
      IF prCond."Fecha Factura" <> 0D THEN
        lrCabTEMP."Fecha Registro factura" := prCond."Fecha Factura"
      ELSE
        lrCabTEMP."Fecha Registro factura" := TODAY;

      lrCabTEMP."Propiedad vehiculos"         := prCond."Propiedad vehiculos";
      lrCabTEMP."Texto alternativo"           := prCond."Texto alternativo";
      lrCabTEMP.Garaje                        := lrCon.Garaje;
      lrCabTEMP."N§ Contrato"                 := lrCon."N§ Contrato";
      lrCabTEMP."Cod. Divisa"                 := lrCon."Cod. Divisa";
      lrCabTEMP."Impuesto Incluidos"          := lrCon."Impuestos incluidos";
      lrCabTEMP."Mostrar TTOO linea"          := lrCondFra."Mostrar TTOO en linea factura";
      lrCabTEMP."Modo Desglose Transportados" := prCond."Modo Desglose Transportados";
      lrCabTEMP."Agrupar lineas x vuelo"      := prCond."Agrupar lineas x vuelo";
      lrCabTEMP."N§ factura agencia"          := prCond."N§ factura agencia";
      lrCabTEMP."Servicio Regular"            := prCond."Servicio Repetitivo";
      lrCabTEMP."Zona Trabajo"                := rTPI."Zona facturacion";
      // JPT 30/04/07 No es serie alternativa si coincide con la del estandard
      lrCabTEMP."No Serie Alternativa"        := prCond."Tipo Facturacion"=prCond."Tipo Facturacion"::Proforma;
      lrCabTEMP."Grupo Registro IVA Producto" := prCond."Grupo registro IVA producto";
      lrCabTEMP.Imprimir                      := lrCabTEMP.Imprimir::Prefactura;
      lrCabTEMP.INSERT;



      // Llamar al proceso de creacion de las lineas de prefactura en funcion del tipo de prefactura

      rTPI.SETCURRENTKEY("Cliente Operativo",Touroperador,Fecha,Facturable,"N§ Prefactura");

      CASE lrCabTEMP."Tipo prefactura" OF
        lrCabTEMP."Tipo prefactura"::"Sin resumen",
        lrCabTEMP."Tipo prefactura"::"Texto alternativo":
        BEGIN
          wAgrupacion := wAgrupacion::Ninguna;

          CrearLineasPrefactura(lrCabTEMP, rTPI, lrCondFra, lrLinTEMP, pwAutomatica);
        END;

        lrCabTEMP."Tipo prefactura"::"Resumen x Codigo":
        BEGIN
          wAgrupacion := wAgrupacion::CodigoServicio;

          CrearLineasPrefactura(lrCabTEMP, rTPI, lrCondFra, lrLinTEMP, pwAutomatica);
        END;

        lrCabTEMP."Tipo prefactura"::"Resumen x Vuelo":
        BEGIN
          IF lrCabTEMP."Agrupar lineas x vuelo" THEN
            wAgrupacion := wAgrupacion::Vuelos
          ELSE
            wAgrupacion := wAgrupacion::Ninguna;

          CrearLineasPrefactura(lrCabTEMP, rTPI, lrCondFra, lrLinTEMP, pwAutomatica);
        END;

        lrCabTEMP."Tipo prefactura"::"Resumen x Referencia":
        BEGIN
          wAgrupacion := wAgrupacion::Referencia;

          CrearLineasPrefactura(lrCabTEMP, rTPI, lrCondFra, lrLinTEMP, pwAutomatica);
        END;
      END;

      // Al terminar el proceso de facturacion hay que pasar los datos desde las variables TEMPORARY a las tablas reales

      IF NOT pwAutomatica THEN
        ventana.UPDATE(6, Text050);

      // JPT 05/10/06 Se agrupan las lineas de prefactura Adultos/Ni¤os
      IF lrCondFra."Agrupr Ads/Nis mismo precio" THEN
        AgrupaAdultNi¤os(lrLinTEMP);

      PasarPrefacturaTemporal(lrCabTEMP, lrLinTEMP, lrCab, rLinPre, FALSE);

      // Si es una facturacion de prueba tenemos que desactivar la prefactura y no marcar las lineas de coste-ingreso

      IF prCond."Prefactura Prueba" THEN
        lrCab.Desactiva
      ELSE BEGIN
        prPI.LOCKTABLE;
        IF prPI.FINDFIRST THEN BEGIN
          prPI.MODIFYALL("N§ Prefactura", lrCab."N§ Prefactura");

          // AJS 29.03.2007
          // Filtramos por numero de prefactura para quitar la marca

          prPI.SETRANGE("N§ Prefactura", lrCab."N§ Prefactura");
          IF prPI.FINDSET(TRUE) THEN
            prPI.MODIFYALL(Marca, '');

          rTPI.LimpiaTemp;
          rTPI.FINDSET;
          rTPI.RESET; // ponemos la clave primaria
          REPEAT  // Validamos a posteriori el campo prefactura para que se marque en TTOO x Parte
            rTPI.VALIDATE("N§ Prefactura", lrCab."N§ Prefactura");
          UNTIL rTPI.NEXT = 0;
        END;


        // Desmarcamos tambien los registros de Touroperador x parte

        // AJS 14.07.2006
        // Solo hay que ejecutar este codigo si es facturacion sobre marca

        IF prCond."Facturar sobre marca" THEN BEGIN
          lrTOParte.RESET;
          lrTOParte.SETCURRENTKEY(Marca);
          lrTOParte.SETRANGE(Marca, UPPERCASE(USERID));
          IF lrTOParte.FINDSET(TRUE, TRUE) THEN BEGIN
            REPEAT
              lrTOParte.Marca := '';
              lrTOParte.MODIFY;
            UNTIL lrTOParte.NEXT = 0;
          END;
        END;
      END;

      // Si es una facturacion automatica guardamos el numero de prefactura a facturar

      IF pwAutomatica THEN BEGIN
        prCond."N§ Prefactura" := lrCab."N§ Prefactura";
        // prCond.MODIFY; // JPT 20/12/05 en facturacion automatica no hace falta que se grabe
      END;

      // Si se ha marcado la opcion de imprimir lanzamos el informe de Prefactura que corresponda al cliente

      COMMIT;

      IF NOT pwAutomatica THEN
        ventana.CLOSE;

      IF prCond.Imprimir THEN BEGIN
        ImprimirRegistroPrefactura(lrCab);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE ErroresPrevios@1100253017(prCond@1100253000 : Record 7010420;VAR prPI@1100253001 : Record 7035392;prCondFra@1100253002 : Record 7010416;VAR prCon@1100253003 : Record 7010403) : Boolean;
    VAR
      lwEncontrado@1100253005 : Boolean;
      lwContratoEncontrado@1103355000 : Boolean;
      lwFiltroTTOO@1100253006 : Text[1000];
      lwMensajeError@1100253007 : Text[250];
    BEGIN
      // ErroresPrevios
      //

      // Comprobar los campos que no se pueden dejar en blanco

      prCond.TESTFIELD(Cliente);
      prCond.TESTFIELD(Touroperador);
      prCond.TESTFIELD("Fecha desde");
      prCond.TESTFIELD("Fecha hasta");

      IF NOT rComp.GET(prCond.Cliente, prCond.Touroperador) THEN
        ERROR(Text006, prCond.Cliente, prCond.Touroperador);
      rComp.TESTFIELD("Cliente facturacion");

      // Filtramos sobre Coste-Ingreso

      CLEAR(prPI);
      prPI.SETCURRENTKEY("Cliente Operativo",Touroperador,Fecha,Facturable,"N§ Prefactura");

      IF (prCond.Garaje <> '') AND (prCond.Garaje <> rPar."Todos los garajes") THEN
        prPI.SETRANGE(Garaje, prCond.Garaje);

      prPI.SETRANGE ("Cliente Operativo"        , prCond.Cliente);

      lwFiltroTTOO := FiltroTTOO(rComp);
      prPI.SETFILTER(Touroperador   , lwFiltroTTOO);
      prPI.SETRANGE ("N§ Prefactura", '');
      prPI.SETRANGE ("N§ Factura"   , '');
      prPI.SETRANGE (Facturable   , TRUE);
      prPI.SETRANGE (Fecha          , prCond."Fecha desde", prCond."Fecha hasta");

      // Si no facturamos sobre marca hay que establecer mas filtros sobre coste-ingreso

      IF NOT prCond."Facturar sobre marca" THEN BEGIN

        // Comprobar si se pueden juntar Tipos de servicio en una misma factura

        IF NOT rPar."Juntar Tipos en facturacion" THEN BEGIN
          IF (STRPOS(prCond."Tipos servicio", '|') <> 0) OR
             (STRPOS(prCond."Tipos servicio", '..') <> 0) OR
             (STRPOS(prCond."Tipos servicio", '&') <> 0) OR
             (STRPOS(prCond."Tipos servicio", '*') <> 0) THEN
            ERROR(Text009);

          // Obligamos al usuario a seleccionar un tipo de servicio

          IF (prCond."Tipos servicio" = '') AND NOT (prCond."Facturacion Automatica") THEN
            ERROR(Text010);
        END;

        IF prCond."N§ Parte" <> '' THEN
          prPI.SETRANGE("N§ Parte", prCond."N§ Parte");
        IF prCond."Tipos servicio" <> '' THEN
          prPI.SETFILTER("Tipo servicio", prCond."Tipos servicio");
        IF prCond."Codigos Servicio" <> '' THEN
          prPI.SETFILTER("Codigo servicio", prCond."Codigos Servicio");
        IF prCond."Tipos Vehiculo" <> '' THEN
          prPI.SETFILTER("Tipo Vehiculo", prCond."Tipos Vehiculo");
        IF prCond."Zonas Precio" <> '' THEN
          prPI.SETFILTER("Zona Precios", prCond."Zonas Precio");

        CASE prCond."Propiedad vehiculos" OF
          prCond."Propiedad vehiculos"::Propios: prPI.SETRANGE("Servicio propio", TRUE);
          prCond."Propiedad vehiculos"::Externos: prPI.SETRANGE("Servicio propio", FALSE);
        END;

        IF prCond."Zona trabajo" <> '' THEN
          prPI.SETRANGE("Zona facturacion", prCond."Zona trabajo");
        IF prCond."Tipo Servicio Fijo" <> prCond."Tipo Servicio Fijo"::Todos THEN
          prPI.SETRANGE("Tipo Servicio Fijo", prCond."Tipo Servicio Fijo");
        IF (prCond."Rango Plazas Desde" <> 0) AND (prCond."Rango Plazas Hasta" <> 0) THEN
          prPI.SETRANGE("Paxes Servicio", prCond."Rango Plazas Desde", prCond."Rango Plazas Hasta");
        IF prCond."Punto recogida" <> '' THEN
          prPI.SETRANGE("Origen/Destino", prCond."Punto recogida");
        IF prCond.Referencia <> '' THEN
          prPI.SETRANGE(Referencia, prCond.Referencia);
        IF prCond."Codigo Suplemento" <> '' THEN
          prPI.SETRANGE("Tipo elemento", prCond."Codigo Suplemento");
      END
      ELSE
        prPI.SETRANGE(Marca, UPPERCASE(USERID));

      // Filtramos por el codigo de grupo, al facturar desde grupos solo facturaremos el grupo y desde facturacion
      // normal solo los que no pertenezcan a ningun grupo

      prPI.SETRANGE("Cod Grupo", prCond."Cod. Grupo");

      // Mismo procedimiento con los servicios repetitivos

      prPI.SETRANGE("Servicio Regular", prCond."Servicio Repetitivo");

      lwEncontrado := prPI.FINDFIRST;

      // Si no encontramos registros y es facturacion automatica salimos sin dar mensaje de error

      IF NOT lwEncontrado THEN
        EXIT(TRUE);

      // En caso de facturacion manual, generamos errores manuales

      IF NOT lwEncontrado THEN BEGIN
        IF prCond."Facturar sobre marca" THEN
          ERROR(Text011, prCond.Garaje, prCond.Cliente, lwFiltroTTOO, USERID);

        lwMensajeError := Text012;
        lwMensajeError += STRSUBSTNO(Text013, prCond.Garaje) + '\';
        lwMensajeError += STRSUBSTNO(Text014, prCond.Cliente) + '\';
        lwMensajeError += STRSUBSTNO(Text015, lwFiltroTTOO) + '\';
        lwMensajeError += STRSUBSTNO(Text016, prCond."Fecha desde", prCond."Fecha hasta") + '\';
        IF prCond."Tipos servicio" <> '' THEN
          lwMensajeError += STRSUBSTNO(Text017, prCond."Tipos servicio") + '\';
        IF prCond."Codigos Servicio" <> '' THEN
          lwMensajeError += STRSUBSTNO(Text018, prCond."Codigos Servicio") + '\';
        IF prCond."Tipos Vehiculo" <> '' THEN
          lwMensajeError += STRSUBSTNO(Text019, prCond."Tipos Vehiculo") + '\';
        IF prCond."Zonas Precio" <> '' THEN
          lwMensajeError += STRSUBSTNO(Text020, prCond."Zonas Precio") + '\';
        ERROR(lwMensajeError);
      END;

      // Comprobamos si es obligatorio generar la prevision antes de facturar

      IF rPar."Crear prevision antes facturar" THEN BEGIN
        prPI.SETRANGE("Generada prevision", FALSE);
        IF prPI.FINDFIRST THEN
          ERROR(Text021);
        prPI.SETRANGE("Generada prevision");
      END;

      // Buscamos el contrato que puede ir contrato el garaje del parte o contra el garaje TODOS

      // AJS 20.03.2007
      // Para buscar el contrato hay que buscar la primera linea que tenga importe

      lwContratoEncontrado := FALSE;
      REPEAT
        IF prPI."Importe sin impuesto" <> 0 THEN BEGIN
          prCon.RESET;
          prCon.SETFILTER(Garaje       , '%1|%2', prPI.Garaje, rPar."Todos los garajes");
          prCon.SETRANGE ("N§ Contrato", prPI."N§ Contrato");
          prCon.FINDFIRST;

          lwContratoEncontrado := TRUE;
        END;
      UNTIL (prPI.NEXT = 0) OR (lwContratoEncontrado);

      EXIT(FALSE);
    END;

    PROCEDURE FiltroTTOO@1100253027(prCliTo@1100253002 : Record 7010313) : Text[1000];
    VAR
      lrCliTo@1100253000 : Record 7010313;
      lwFiltro@1100253001 : Text[1000];
    BEGIN
      // FiltroTTOO
      //

      // Buscamos la concatenacion de touroperador que pertenecen al mismo grupo de facturacion

      CLEAR(lwFiltro);
      IF prCliTo."Grupo Facturacion" = '' THEN
        lwFiltro := prCliTo.TTOO
      ELSE BEGIN

        // Solo si estamos tratando el maestro de grupo

        IF prCliTo.TTOO = prCliTo."Grupo Facturacion" THEN BEGIN
          lrCliTo.RESET;
          lrCliTo.SETCURRENTKEY("Grupo Facturacion");
          lrCliTo.SETRANGE(Cliente            , prCliTo.Cliente);
          lrCliTo.SETRANGE("Grupo Facturacion", prCliTo.TTOO);
          IF lrCliTo.FINDSET THEN BEGIN
            REPEAT
              IF lwFiltro <> '' THEN
                lwFiltro += '|';
              lwFiltro += lrCliTo.TTOO;
            UNTIL lrCliTo.NEXT = 0;
          END;
        END
        ELSE
          ERROR(Text022, prCliTo.Cliente, prCliTo.TTOO);
      END;

      EXIT(lwFiltro);
    END;

    PROCEDURE CrearLineasPrefactura@1100253011(VAR prCabTEMP@1100253000 : Record 7010415;VAR prPI@1100253001 : Record 7035392;prCondFra@1100253005 : Record 7010416;VAR prLinTEMP@1100253006 : Record 7010417;pwAutomatica@1100253004 : Boolean);
    VAR
      lrParte@1100253003 : Record 7010360;
      lwCantidadMaletas@1100253007 : Decimal;
      lwImporteMaletas@1100253008 : Decimal;
      lwImporteMaletasSin@1100253009 : Decimal;
      lwTipoServicioText@1100253002 : Code[10];
    BEGIN
      // CrearLineasPrefactura
      //
      IF NOT pwAutomatica THEN
        ventana.UPDATE(6, Text051);

      IF prPI.FINDSET THEN BEGIN
        wNoLin              := 0;
        lwCantidadMaletas   := 0;
        lwImporteMaletas    := 0;
        lwImporteMaletasSin := 0;

        IF NOT pwAutomatica THEN BEGIN
          wActual := 0;
          wTotal  := prPI.COUNT;
        END;
        REPEAT
          IF NOT pwAutomatica THEN BEGIN
            wActual += 1;
            ventana.UPDATE(7, ROUND(wActual / wTotal * 10000, 1));
          END;

          IF NOT lrParte.GET(prPI."N§ Parte") THEN
            CLEAR(lrParte);

          CASE prPI."Tipo linea" OF

            prPI."Tipo linea"::Base:
            BEGIN
              wTipoLinea := wTipoLinea::Base;
              InsertarLineaPrefactura(prCabTEMP, prLinTEMP, prPI, lrParte, 0, 0, 0, prCondFra);

              // AJS 16.01.2008
              // Si la linea de produccion es de un parte de Origen = Shuttle hay que generar el desglose
              // de los localizadores

              IF lrParte."Origen creacion" = lrParte."Origen creacion"::Shuttle THEN
                DesgloseLocalizadores(prCabTEMP, prLinTEMP, prPI);
            END;

            prPI."Tipo linea"::Suplemento:
            BEGIN

              // Las lineas de maletas se acumulan por prefactura, el resto de suplementos se muestran junto al parte

              IF prPI."Tipo elemento" = rPar."Codigo Maletas" THEN BEGIN
                lwCantidadMaletas   += prPI."Pax Facturados";
                lwImporteMaletas    += prPI."Importe con impuesto";
                lwImporteMaletasSin += prPI."Importe sin impuesto";
              END
              ELSE BEGIN
                wTipoLinea := wTipoLinea::Suplemento;
                InsertarLineaPrefactura(prCabTEMP, prLinTEMP, prPI, lrParte, 0, 0, 0, prCondFra);
              END
            END;

            prPI."Tipo linea"::Extra:
            BEGIN
              wTipoLinea := wTipoLinea::Extra;
              InsertarLineaPrefactura(prCabTEMP, prLinTEMP, prPI, lrParte, 0, 0, 0, prCondFra);
            END;

          END;

          // Almacenamos los tipos de servicio fijo en la cabecera de prefactura

          lwTipoServicioText := FORMAT(prPI."Tipo Servicio Fijo");
          IF STRPOS(prCabTEMP."Tipos Servicio", lwTipoServicioText) = 0 THEN BEGIN
            IF prCabTEMP."Tipos Servicio" <> '' THEN
              prCabTEMP."Tipos Servicio" := prCabTEMP."Tipos Servicio" + '|';

            prCabTEMP."Tipos Servicio" := prCabTEMP."Tipos Servicio" + lwTipoServicioText;
          END;
        UNTIL prPI.NEXT = 0;

        IF lwImporteMaletas <> 0 THEN BEGIN
          wTipoLinea := wTipoLinea::Maletas;
          InsertarLineaPrefactura(prCabTEMP, prLinTEMP, prPI, lrParte, lwImporteMaletas, lwImporteMaletasSin,
                                  lwCantidadMaletas, prCondFra);
        END;
      END;
    END;

    PROCEDURE InsertarLineaPrefactura@1100253004(VAR prCabTEMP@1100253000 : Record 7010415;VAR prLinTEMP@1100253007 : TEMPORARY Record 7010417;prPI@1100253001 : Record 7035392;prParte@1100253002 : Record 7010360;pwImporteLinea@1100253003 : Decimal;pwImporteLineaSin@1100253004 : Decimal;pwCantidadLinea@1100253005 : Decimal;prCondFact@1100253006 : Record 7010416);
    VAR
      lrCon@1100253010 : Record 7010403;
      lwOk@1100253008 : Boolean;
      lwPrecioSin@1100253009 : Decimal;
    BEGIN
      // InsertarLineaPrefactura
      //
      // La variable prLinTEMP tiene 2 dimensiones y es TEMPORARY, la dimension 1 nos sirve para hacer las inserciones
      // mientras que la dimension 2 la utilizamos para hacer busquedas cuando hay que agrupar las lineas

      // Permitimos la linea a cero si el parte es gratuito y no es la linea de maletas

      IF NOT (wFacturaraCero AND prParte.Gratuito) AND (wTipoLinea <> wTipoLinea::Maletas) THEN
        IF prPI.Importe = 0 THEN
          EXIT;

      wNoLin += 10000;

      // Tratamos los distintos tipos de agrupacion de lineas de factura

      CASE wAgrupacion OF

        wAgrupacion::CodigoServicio:
        BEGIN

          // Determinamos el nivel de agrupacion/detalle en funcion del parametro de condiciones de facturacion

          lwOk := (prCondFact."Agrupacion por Detalle" = prCondFact."Agrupacion por Detalle"::Ambos) OR
                  ( (prCondFact."Agrupacion por Detalle" = prCondFact."Agrupacion por Detalle"::"Precio x Vehiculo") AND
                    (prPI."Tipo elemento" = Text50000) ) OR
                  ( (prCondFact."Agrupacion por Detalle" = prCondFact."Agrupacion por Detalle"::"Precio x Pax") AND
                    (prPI."Tipo elemento" <> Text50000) );

          IF lwOk THEN BEGIN
            CLEAR(prLinTEMP);
            prLinTEMP.SETCURRENTKEY("N§ Prefactura",
                                    Fecha,
                                    "Codigo Servicio");
            prLinTEMP.SETRANGE("N§ Prefactura"  , prCabTEMP."N§ Prefactura");
            prLinTEMP.SETRANGE(Fecha            , prPI.Fecha);
            prLinTEMP.SETRANGE("Codigo Servicio", prPI."Codigo servicio");

            IF wTipoLinea <> wTipoLinea::Maletas THEN
              prLinTEMP.SETRANGE("Cod Suplemento", prPI."Tipo elemento")
            ELSE
              prLinTEMP.SETRANGE("Cod Suplemento", rPar."Codigo Maletas");

            // Solo agrupamos aquellos servicios que tengan el mismo precio

            IF prPI."Tipo elemento" = Text50000 THEN
              lwPrecioSin := prPI."Precio Vehiculo sin impuestos"
            ELSE
              lwPrecioSin := prPI."Precio Pax sin impuestos";
            prLinTEMP.SETRANGE("Precio sin impuestos", lwPrecioSin);

            // Si se selecciona ver el touroperador en las lineas de factura no podemos agrupar lineas de distintos TTOO's

            IF prCabTEMP."Mostrar TTOO linea" THEN
              prLinTEMP.SETRANGE(Touroperador, prPI.Touroperador);
            IF NOT prLinTEMP.FINDFIRST THEN BEGIN
              CLEAR(prLinTEMP);
              prLinTEMP."N§ Prefactura" := prCabTEMP."N§ Prefactura";
              prLinTEMP."N§ Linea"      := wNoLin;
              prLinTEMP.INSERT;
            END;
          END
          ELSE BEGIN
            CLEAR(prLinTEMP);
            prLinTEMP."N§ Prefactura" := prCabTEMP."N§ Prefactura";
            prLinTEMP."N§ Linea"      := wNoLin;
            prLinTEMP.INSERT;
          END;
        END;

        wAgrupacion::Referencia:
        BEGIN
          CLEAR(prLinTEMP);
          prLinTEMP.SETCURRENTKEY("N§ Prefactura",
                                  Fecha,
                                  "Codigo Servicio");
          prLinTEMP.SETRANGE("N§ Prefactura", prCabTEMP."N§ Prefactura");
          prLinTEMP.SETRANGE(Fecha          , prPI.Fecha);
          prLinTEMP.SETRANGE(Referencia     , prPI.Referencia);
          prLinTEMP.SETRANGE(Touroperador   , prPI.Touroperador);

          // JPT 07/08/06 Filtramos tambien por precio, para que no se pudedan mezclar lineas con precio distinto
          IF lrCon."Impuestos incluidos" THEN BEGIN
            IF prPI."Precio Pax" <> 0 THEN
              prLinTEMP.SETRANGE("Precio con impuestos", prPI."Precio Pax")
            ELSE
              prLinTEMP.SETRANGE("Precio con impuestos", prPI."Precio Vehiculo");
          END
          ELSE BEGIN
            IF prPI."Precio Pax" <> 0 THEN
              prLinTEMP.SETRANGE("Precio sin impuestos", prPI."Precio Pax sin impuestos")
            ELSE
              prLinTEMP.SETRANGE("Precio sin impuestos", prPI."Precio Vehiculo sin impuestos");
          END;

          IF wTipoLinea <> wTipoLinea::Maletas THEN
            prLinTEMP.SETRANGE("Cod Suplemento", prPI."Tipo elemento")
          ELSE
            prLinTEMP.SETRANGE("Cod Suplemento", rPar."Codigo Maletas");

          IF NOT prLinTEMP.FINDFIRST OR (prPI.Referencia = '') THEN BEGIN
            CLEAR(prLinTEMP);
            prLinTEMP."N§ Prefactura" := prCabTEMP."N§ Prefactura";
            prLinTEMP."N§ Linea"      := wNoLin;
            prLinTEMP.INSERT;
          END;
        END;

        wAgrupacion::Vuelos:
        BEGIN
          CLEAR(prLinTEMP);
          prLinTEMP.SETCURRENTKEY("N§ Prefactura",
                                  Fecha,
                                  "Codigo Servicio");
          prLinTEMP.SETRANGE("N§ Prefactura"  , prCabTEMP."N§ Prefactura");
          prLinTEMP.SETRANGE(Fecha            , prPI.Fecha);
          prLinTEMP.SETRANGE("Codigo Servicio", prPI."Codigo servicio");
          prLinTEMP.SETRANGE(Vuelo            , prPI.Vuelos);

          IF wTipoLinea <> wTipoLinea::Maletas THEN
            prLinTEMP.SETRANGE("Cod Suplemento", prPI."Tipo elemento")
          ELSE
            prLinTEMP.SETRANGE("Cod Suplemento", rPar."Codigo Maletas");

          // Solo agrupamos aquellos servicios que tengan el mismo precio

          IF prPI."Tipo elemento" = Text50000 THEN
            lwPrecioSin := prPI."Precio Vehiculo sin impuestos"
          ELSE
            lwPrecioSin := prPI."Precio Pax sin impuestos";
          prLinTEMP.SETRANGE("Precio sin impuestos", lwPrecioSin);

          // Si se selecciona ver el touroperador en las lineas de factura no podemos agrupar lineas de distintos TTOO's

          IF prCabTEMP."Mostrar TTOO linea" THEN
            prLinTEMP.SETRANGE(Touroperador, prPI.Touroperador);
          IF NOT prLinTEMP.FINDFIRST THEN BEGIN
            CLEAR(prLinTEMP);
            prLinTEMP."N§ Prefactura" := prCabTEMP."N§ Prefactura";
            prLinTEMP."N§ Linea"      := wNoLin;
            prLinTEMP.INSERT;
          END;
        END;

        wAgrupacion::Ninguna:
        BEGIN
          CLEAR(prLinTEMP);
          prLinTEMP."N§ Prefactura" := prCabTEMP."N§ Prefactura";
          prLinTEMP."N§ Linea"      := wNoLin;
          prLinTEMP.INSERT;
        END;
      END;

      // Rellenamos el resto de campos

      prLinTEMP.Tipo                   := wTipoLinea;
      // JPT 16/05/06 En UEX le interesa que aparezca la fecha del parte no la fecha facturaci¢n
      IF rPar."Empresa Real" IN [rPar."Empresa Real"::UEX] THEN
        prLinTEMP.Fecha                  := prParte.Fecha
      ELSE
        prLinTEMP.Fecha                  := prPI.Fecha;
      prLinTEMP."Codigo Servicio"      := prPI."Codigo servicio";
      prLinTEMP.Zona                   := prPI."Zona Precios";
      prLinTEMP.Touroperador           := prPI.Touroperador;
      prLinTEMP."Zona Trabajo"         := prPI."Zona facturacion";
      prLinTEMP."Tipo Servicio Fijo"   := prPI."Tipo Servicio Fijo";
      prLinTEMP.Referencia             := prPI.Referencia;
      prLinTEMP."Concepto facturacion" := prPI."Concepto facturacion";
      prLinTEMP.Vuelo                  := prPI.Vuelos;
      prLinTEMP.Letra                  := prParte.Letra;
      prLinTEMP.Bus                    := prParte."N§ Vehiculo";
      prLinTEMP.Parte                  := prParte."N§ Parte";
      prLinTEMP.Hora                   := prPI."Hora vuelo";
      prLinTEMP.Garaje                 := prParte.Garaje;

      IF prPI."Tipo Servicio Fijo" = prPI."Tipo Servicio Fijo"::Traslado THEN BEGIN
        IF prPI."Codigo servicio" = rPar."Codigo Salidas" THEN BEGIN
          prLinTEMP.Origen  := prPI."Zona Precios";
          prLinTEMP.Destino := prParte."Origen/Destino";
        END
        ELSE BEGIN
          prLinTEMP.Origen  := prParte."Origen/Destino";
          prLinTEMP.Destino := prPI."Zona Precios";
        END;
      END;

      IF prLinTEMP.Tipo <> prLinTEMP.Tipo::Maletas THEN BEGIN
        IF prParte."Origen creacion" <> prParte."Origen creacion"::"Recogida Automatica" THEN BEGIN
          prLinTEMP.Pax    += prPI."Pax Transportados";
          prLinTEMP.Plazas += prPI."Pax Facturados";
          IF rPar."Codigo Ni¤o" = prPI."Tipo elemento" THEN // Necesitamos indicar los ni¤os facturados para UEX
            prLinTEMP."Ni¤os Facturados" += prPI."Pax Facturados";
        END;
      END
      ELSE BEGIN
        IF prParte."Origen creacion" <> prParte."Origen creacion"::"Recogida Automatica" THEN BEGIN
          prLinTEMP.Pax    := pwCantidadLinea;
          prLinTEMP.Plazas := pwCantidadLinea;
        END;
      END;

      // Tomamos el contrato que hay que aplicar

      lrCon.RESET;
      lrCon.GET(prCabTEMP.Garaje, prCabTEMP."N§ Contrato");

      prLinTEMP."Grupo registro IVA producto" := prPI."Grupo registro IVA Producto";
      prLinTEMP."Cod. Divisa"                 := prPI."Cod. Divisa";

      // Buscamos que tipo de precio se ha aplicado

      IF prPI."Precio Pax" <> 0 THEN
        prLinTEMP."Tipo aplicacion" := prLinTEMP."Tipo aplicacion"::Pax
      ELSE
        prLinTEMP."Tipo aplicacion" := prLinTEMP."Tipo aplicacion"::Vehiculo;

      // Buscar la precision de redondeo

      PrecisionOperaciones(prCabTEMP, prLinTEMP);

      // Rellenamos los campos de precio e importe

      IF lrCon."Impuestos incluidos" THEN BEGIN
        IF prLinTEMP."Tipo aplicacion" = prLinTEMP."Tipo aplicacion"::Pax THEN
          prLinTEMP."Precio con impuestos" := prPI."Precio Pax"
        ELSE
          prLinTEMP."Precio con impuestos" := prPI."Precio Vehiculo";
        prLinTEMP."Precio sin impuestos" := ROUND(prLinTEMP."Precio con impuestos" / (1 + (rConfIVA."VAT+EC %" / 100)),
                                                  wPrecision);

        IF prLinTEMP.Tipo = prLinTEMP.Tipo::Maletas THEN
          prLinTEMP."Importe con impuestos" := pwImporteLinea
        ELSE
          prLinTEMP."Importe con impuestos" += prPI."Importe con impuesto";
        prLinTEMP."Importe sin impuestos" := ROUND(prLinTEMP."Importe con impuestos" / (1 + (rConfIVA."VAT+EC %" / 100)),
                                                   wPrecision);
      END
      ELSE BEGIN
        IF prLinTEMP."Tipo aplicacion" = prLinTEMP."Tipo aplicacion"::Pax THEN
          prLinTEMP."Precio sin impuestos" := prPI."Precio Pax sin impuestos"
        ELSE
          prLinTEMP."Precio sin impuestos" := prPI."Precio Vehiculo sin impuestos";
        prLinTEMP."Precio con impuestos" := ROUND(prLinTEMP."Precio sin impuestos" * (1 + (rConfIVA."VAT+EC %" / 100)),
                                                  wPrecision);

        IF prLinTEMP.Tipo = prLinTEMP.Tipo::Maletas THEN
          prLinTEMP."Importe sin impuestos" := pwImporteLineaSin
        ELSE
          prLinTEMP."Importe sin impuestos" += prPI."Importe sin impuesto";
        prLinTEMP."Importe con impuestos" := ROUND(prLinTEMP."Importe sin impuestos" * (1 + (rConfIVA."VAT+EC %" / 100)),
                                                   wPrecision);
      END;

      // Las lineas gratuitas tienen que salir sin precio

      IF prPI.Gratuito THEN BEGIN
        prLinTEMP."Precio con impuestos"  := 0;
        prLinTEMP."Precio sin impuestos"  := 0;
        prLinTEMP."Importe con impuestos" := 0;
        prLinTEMP."Importe sin impuestos" := 0;
      END;

      prLinTEMP."Importe Sin IVA Sin Dto" := prLinTEMP."Importe sin impuestos";
      prLinTEMP."Importe Con IVA Sin Dto" := prLinTEMP."Importe con impuestos";

      prLinTEMP."Precio manual"  := prPI."Precio manual";
      prLinTEMP."Cod Suplemento" := prPI."Tipo elemento";

      IF (wNoParteAnt <> prPI."N§ Parte") OR (prLinTEMP."N§ de Servicios" = 0) THEN
        prLinTEMP."N§ de Servicios" += 1;

      prLinTEMP.MODIFY;

      wNoParteAnt := prPI."N§ Parte";
    END;

    PROCEDURE AgrupaAdultNi¤os@1103355000(VAR prLinTmp@1103355000 : TEMPORARY Record 7010417);
    VAR
      lrTmp2@1103355001 : TEMPORARY Record 7010417;
      lwEnc@1103355002 : Boolean;
      lwTxt@1103355003 : Text[30];
    BEGIN
      // AgrupaAdultNi¤os
      // Esta funci¢n se encarga de agrupar lineas de Adultos y Ni¤os

      CLEAR(prLinTmp);
      CLEAR(lrTmp2);
      IF prLinTmp.FINDSET(TRUE) THEN BEGIN
        REPEAT
          IF prLinTmp."Cod Suplemento" = rPar."Codigo Adulto" THEN BEGIN
            lrTmp2.COPY(prLinTmp);
            prLinTmp.SETRANGE(Tipo                  , prLinTmp.Tipo);
            prLinTmp.SETFILTER("N§ Linea"           ,'<>%1', prLinTmp."N§ Linea");
            prLinTmp.SETRANGE(Fecha                 , prLinTmp.Fecha);
            prLinTmp.SETRANGE("Codigo Servicio"     , prLinTmp."Codigo Servicio");
            prLinTmp.SETRANGE("Precio con impuestos", prLinTmp."Precio con impuestos");

            // AJF 07/08/08
            // si la agrupaci¢n es por referencia o vuelo no debemos filtrar por el n£mero de parte.
            CASE wAgrupacion OF
              wAgrupacion::Referencia: prLinTmp.SETRANGE(Referencia          , prLinTmp.Referencia);
              wAgrupacion::Vuelos:     prLinTmp.SETRANGE(Vuelo               , prLinTmp.Vuelo);
              ELSE
                prLinTmp.SETRANGE(Parte               , prLinTmp.Parte);
            END;

            prLinTmp.SETRANGE(Zona                  , prLinTmp.Zona);
            prLinTmp.SETRANGE("Cod Suplemento"      , rPar."Codigo Ni¤o");
            // JPT 10/08/07 No mezclar ingresos con abonos
            IF lrTmp2."Importe con impuestos" >= 0 THEN
              lwTxt := '>=0'
            ELSE
              lwTxt := '<0';
            prLinTmp.SETFILTER("Importe con impuestos", lwTxt);

            lwEnc := prLinTmp.FINDFIRST;
            IF lwEnc THEN BEGIN
              lrTmp2."Importe con impuestos"   += prLinTmp."Importe con impuestos";
              lrTmp2.Pax                       += prLinTmp.Pax;
              lrTmp2.Plazas                    += prLinTmp.Plazas;
              lrTmp2."Importe sin impuestos"   += prLinTmp."Importe sin impuestos";
              lrTmp2."Ni¤os Facturados"        :=0;
              lrTmp2."Importe Sin IVA Sin Dto" += prLinTmp."Importe Sin IVA Sin Dto";
              lrTmp2."Importe Con IVA Sin Dto" += prLinTmp."Importe Con IVA Sin Dto";
              prLinTmp.DELETE; // Borramos la linea
            END;
            prLinTmp.COPY(lrTmp2); // Volvemos al registro de adultos con la informaci¢n ya modificada
            IF lwEnc THEN
              prLinTmp.MODIFY;
          END;
        UNTIL prLinTmp.NEXT=0;
      END;
      CLEAR(prLinTmp);
    END;

    PROCEDURE PrecisionOperaciones@2(prPref@1100253000 : TEMPORARY Record 7010415;prLinPref@1100253001 : TEMPORARY Record 7010417);
    VAR
      lrCon@1100244000 : Record 7010403;
      lrDiv@1100244001 : Record 4;
      lrConf@1100244002 : Record 98;
      lrCli@1100253003 : Record 18;
    BEGIN
      // PrecisionOperaciones
      //

      lrCli.RESET;
      lrCli.GET(prPref."Cliente Facturacion");

      rConfIVA.GET (lrCli."VAT Bus. Posting Group", prLinPref."Grupo registro IVA producto");

      // ----  AJS 5.10.2001  Sacar la precision de redondeo del contrato en funcion de si se  ----
      // ----  trata de importes en divisa o en DL                                             ----

      lrCon.RESET;
      lrCon.GET(prPref.Garaje, prPref."N§ Contrato");

      IF lrCon."Cod. Divisa" <> '' THEN BEGIN
        lrDiv.GET(lrCon."Cod. Divisa");
        wPrecision := lrDiv."Amount Rounding Precision";
      END
      ELSE BEGIN
        lrConf.FINDFIRST;
        wPrecision := lrConf."Amount Rounding Precision";
      END;
    END;

    PROCEDURE PasarPrefacturaTemporal@1100253001(VAR prCabTEMP@1100253000 : Record 7010415;VAR prLinTEMP@1100253004 : TEMPORARY Record 7010417;VAR prCab@1100253003 : Record 7010415;VAR prLin@1100253002 : Record 7010417;pwSoloLineas@1100253001 : Boolean);
    VAR
      lrLinTex@1103355000 : Record 7035394;
      lrPie@1103355002 : Record 7035398;
      lwNo@1103355001 : Code[10];
    BEGIN
      // PasarPrefacturaTemporal
      //
      IF NOT pwSoloLineas THEN BEGIN
        //prCab.LOCKTABLE;
        prCab := prCabTEMP;
        prCab."N§ Prefactura" := '';
        prCab.INSERT(TRUE);

        // Traspasamos el pie de pagina a la prefactura
        lrPie.CopiaPrefactura(prCab);
      END;

      CLEAR(prLinTEMP);
      IF prLinTEMP.FINDSET THEN BEGIN
        REPEAT
          prLin := prLinTEMP;
          prLin."N§ Prefactura" := prCab."N§ Prefactura";
          prLin.INSERT;
        UNTIL prLinTEMP.NEXT = 0;
      END;

      // JPT 04/12/06 Lineas texto alternativo
      IF (prCab."Tipo prefactura" = prCab."Tipo prefactura"::"Texto alternativo") OR
         (prCab."Tipo factura"    = prCab."Tipo factura"::"Texto alternativo") THEN BEGIN
         IF rTempTextAltr.FINDSET THEN BEGIN
           CLEAR(lrLinTex);
           REPEAT
             lrLinTex := rTempTextAltr;
             lrLinTex.Tipo  := lrLinTex.Tipo::Prefactura;
             lrLinTex.Codigo:= prCab."N§ Prefactura";
             lrLinTex.INSERT;
           UNTIL rTempTextAltr.NEXT=0;
         END;
      END;
      CLEAR(rTempTextAltr);   // Borramos todo lo del temporal por si acaso
      rTempTextAltr.DELETEALL;
    END;

    PROCEDURE ImprimirPrefactura@1100253014(VAR prPrefact@1100253000 : Record 7010415);
    VAR
      lrLista@1000000000 : Record 2000000001;
      lwNoPrefact@1100253001 : Integer;
      lwOK@1100253002 : Boolean;
    BEGIN
      // ImprimirPrefactura
      //

      // JPT 29/12/05 Algunos Reports imprimen igualmente Factura y Prefactura distinguiendo solo por este campo
      prPrefact.MODIFYALL(Imprimir, prPrefact.Imprimir::Prefactura);
      COMMIT;

      // Determinamos si es una impresion por Mail para adjudicar la impresora de sistema o no
      lwOK := NOT prPrefact."Imprime Mail";

      rPar.FINDFIRST;
      CLEAR(lwNoPrefact);

      CASE prPrefact."Tipo prefactura" OF
        prPrefact."Tipo prefactura"::"Sin resumen",prPrefact."Tipo prefactura"::"Resumen x Referencia": BEGIN
          rPar.TESTFIELD("Prefactura Sin resumen");
          lwNoPrefact:= rPar."Prefactura Sin resumen";
        END;

        prPrefact."Tipo prefactura"::"Resumen x Codigo": BEGIN
          rPar.TESTFIELD("Prefactura Resumen-Codigo");
          lwNoPrefact:= rPar."Prefactura Resumen-Codigo";
        END;

        prPrefact."Tipo prefactura"::"Resumen x Zona": BEGIN
          rPar.TESTFIELD("Prefactura Resumen-Zona");
          lwNoPrefact:= rPar."Prefactura Resumen-Zona";
        END;

        prPrefact."Tipo prefactura"::"Resumen x Vuelo": BEGIN
          rPar.TESTFIELD("Prefactura Resumen-Vuelo");
          lwNoPrefact:= rPar."Prefactura Resumen-Vuelo";
        END;

        prPrefact."Tipo prefactura"::"Resumen x Dia-Codigo": BEGIN
          rPar.TESTFIELD("Prefactura Resumen Dia-Codigo");
          lwNoPrefact:= rPar."Prefactura Resumen Dia-Codigo";
        END;

        prPrefact."Tipo prefactura"::"Resumen x Zona-Detalle": BEGIN
          rPar.TESTFIELD("Prefactura Zona-Detalle");
          lwNoPrefact:= rPar."Prefactura Zona-Detalle";
        END;

        prPrefact."Tipo prefactura"::"Resumen x Zona Dia-Codigo": BEGIN
          rPar.TESTFIELD("Prefactura Zona-Dia-Codigo");
          lwNoPrefact:= rPar."Prefactura Zona-Dia-Codigo";
        END;

        prPrefact."Tipo prefactura"::"Texto alternativo": BEGIN
          rPar.TESTFIELD("Prefactura Texto alternativo");
          lwNoPrefact:= rPar."Prefactura Texto alternativo";
        END;
      END;

      CLEAR(lrLista);
      IF lwNoPrefact <> 0 THEN BEGIN
        IF lrLista.GET(lrLista.Type::Report, '', lwNoPrefact) THEN BEGIN
          REPORT.RUNMODAL(lrLista.ID, lwOK, lwOK, prPrefact);
        END;
      END;
    END;

    PROCEDURE ImprimirRegistroPrefactura@1100253008(VAR prCab@1100253000 : Record 7010415);
    VAR
      lrCab@1100253001 : Record 7010415;
    BEGIN
      // ImprimirRegistroPrefactura
      // Esta funci¢n debe llamararse cuando solo se desea imprimir el registro en el que se encuentra el puntero

      lrCab := prCab;
      lrCab.SETRECFILTER;
      ImprimirPrefactura(lrCab);
    END;

    PROCEDURE CrearFactura@1100253007(prPI@1100253000 : Record 7035392;VAR prCond@1100253001 : Record 7010420;pwAutomatica@1100253002 : Boolean;pwFacturaRappel@1100253009 : Boolean) : Boolean;
    VAR
      lrCab@1100253006 : Record 36;
      lrPrefact@1100253003 : Record 7010415;
      lrPI@1100253005 : Record 7035392;
      lrPI2@1100253008 : Record 7035392;
      lrCon@1100253007 : Record 7010403;
      lrPie@1103355001 : Record 7035398;
      lcRelease@1000000000 : Codeunit 414;
      lwVariasPrefacturas@1100253004 : Boolean;
      lwAbono@1103355000 : Boolean;
    BEGIN
      // CrearFactura
      //

      // Comprobar si el usuario esta autorizado para facturar

      IF cFunBas.TestRestriccion(Text001) THEN
        ERROR(Text002);

      rPar.FINDFIRST;
      wFacturaraCero := NOT rPar."No permitir Facturar a 0";
      // JPT 14/02/07 En principio se decide no utilizar la facturaci¢n rapida
      // para utilizar la logica de negocio del estandard. Se deja el codigo por si acaso
      // wFactRapida := rPar."Empresa Real" IN [rPar."Empresa Real"::TRN];

      // Si no es automatica hay que pedirle al usuario que prefacturas va a facturar

      IF NOT pwAutomatica THEN BEGIN

        // AJF 07/01/09
        // Evito borrar el registro, ya que ahora tiene datos permanentes.
        IF prCond.GET(USERID) THEN
          prCond.LimpiaRegistro
        ELSE BEGIN
          prCond.INIT;
          prCond.Usuario := USERID;
          prCond.INSERT;
        END;

        prCond."N§ Prefactura" := prPI."N§ Prefactura";
        IF lrPrefact.GET(prPI."N§ Prefactura") THEN BEGIN
          prCond.Facturando           := TRUE;
          prCond.Cliente              := lrPrefact.Cliente;
          prCond.Touroperador         := lrPrefact.Touroperador;
          prCond."Fecha desde"        := lrPrefact."Fecha desde";
          prCond."Fecha hasta"        := lrPrefact."Fecha hasta";
          prCond."Tipo factura"       := lrPrefact."Tipo factura";
          prCond."N§ factura agencia" := lrPrefact."N§ factura agencia";
          prCond."Cod. Serie Abono"         := GetNoSerie(prPI,FALSE,FALSE); // JPT 12/02/07 A¤adimos el numero de serie
        END;
        prCond.MODIFY;
        COMMIT;
        prCond.FILTERGROUP(2);
        prCond.SETRANGE(Usuario, USERID);
        prCond.FILTERGROUP(0);
        IF FORM.RUNMODAL(7035252, prCond) <> ACTION::OK THEN
          EXIT;
        prCond.GET(USERID);

        lwVariasPrefacturas := prCond."N§ Prefactura" = '';
      END
      ELSE
        lwVariasPrefacturas := FALSE;

      // Si no se indica el n§ de prefactura en Condiciones temporales, buscala seleccion y crear una
      // prefactura con todas ellas

      IF lwVariasPrefacturas THEN BEGIN

        // Vamos a marcar las prefacturas y lanzaremos el proceso de Agrupar y Facturar

        lrPrefact.RESET;
        lrPrefact.SETCURRENTKEY(Fecha,
                                Cliente,
                                Touroperador,
                                Facturada);
        lrPrefact.SETRANGE (Cliente       , prCond.Cliente);
        lrPrefact.SETRANGE (Touroperador  , prCond.Touroperador);
        lrPrefact.SETRANGE (Facturada     , FALSE);
        lrPrefact.SETFILTER("Fecha desde" , '>=%1', prCond."Fecha desde");
        lrPrefact.SETFILTER("Fecha hasta", '<=%1', prCond."Fecha hasta");
        IF lrPrefact.FINDSET THEN BEGIN
          IF NOT CONFIRM(Text023) THEN
            EXIT;
          REPEAT
            lrPrefact.MARK(TRUE);
          UNTIL lrPrefact.NEXT = 0;

          // Llamamos a la funcion que agrupar todas las prefacturas en una y la factura

          AgruparyFacturar(lrPrefact);
          EXIT;
        END
        ELSE
          ERROR(Text024);
      END;

      IF NOT pwAutomatica THEN
        IF NOT CONFIRM(Text027, TRUE, prCond."N§ Prefactura") THEN
          EXIT;
      lrPrefact.GET(prCond."N§ Prefactura");
      IF lrPrefact.Facturada THEN
        ERROR(Text028);

      // Si se ha variado el tipo de factura hay que almacenarlo en el registro de prefactura

      IF prCond."Tipo factura" <> lrPrefact."Tipo factura" THEN BEGIN
        lrPrefact."Tipo factura" := prCond."Tipo factura";
        lrPrefact.MODIFY;
      END;

      // Creamos los registros para reflejar el descuento en factura

      IF lrPrefact."% Dto" <> 0 THEN
        lrPrefact.CreaRegDto;

      // Filtramos las lineas de coste-ingreso

      lrPI.RESET;
      lrPI.SETCURRENTKEY("Cliente Operativo",Touroperador,Fecha,Facturable,"N§ Prefactura");
      lrPI.SETRANGE("N§ Prefactura", prCond."N§ Prefactura");
      IF lrPI.FINDFIRST THEN BEGIN
        PasarPITemp(lrPI);
        IF NOT pwAutomatica THEN BEGIN
          ventana.OPEN(Text052 + Text047);
          ventana.UPDATE(1, lrPrefact."N§ Prefactura");
          ventana.UPDATE(2, lrPrefact.Cliente);
          ventana.UPDATE(3, lrPrefact.Touroperador);
        END;

        // Comprobar que exista el contrato, la configuracion de ventas y cobros y el cliente facturacion

        IF NOT pwAutomatica THEN
          ventana.UPDATE(6, Text053);

        ComprobarDatosFactura(rTPI, lrPrefact, lrCon);

        // Creamos la cabecera de factura, comprobar si tiene que ser un abono o una factura, se conserva el numero
        // de factura agencia para convertirlo en el numero de factura Navision

        IF NOT pwAutomatica THEN
          ventana.UPDATE(6, Text054);

        rTPI.CALCSUMS("Importe sin impuesto");
        IF NOT wFacturaraCero THEN
          IF rTPI."Importe sin impuesto" = 0 THEN
            EXIT(FALSE);

        lwAbono := rTPI."Importe sin impuesto" < 0;
        lrPrefact.LOCKTABLE;
        IF wFactRapida THEN
          CrearCabeceraFactura2(lrCab, lrCon, lrPrefact, lwAbono, prCond."N§ factura agencia", prCond."Facturar sobre marca")
        ELSE
          CrearCabeceraFactura(lrCab, lrCon, lrPrefact, lwAbono, prCond."N§ factura agencia", prCond."Facturar sobre marca");

        // Llamamos al proceso de crear lineas de factura

        IF NOT pwAutomatica THEN
          ventana.UPDATE(6, Text055);

        CASE lrPrefact."Tipo factura" OF
          lrPrefact."Tipo factura"::"Sin resumen",
          lrPrefact."Tipo factura"::"Texto alternativo":
          BEGIN
            wAgrupacion := wAgrupacion::Ninguna;
            CrearLineasFactura(lrCab, rTPI, lrCon, lrPrefact, pwAutomatica);
          END;
          lrPrefact."Tipo factura"::"Resumen x Referencia":
          BEGIN
            wAgrupacion := wAgrupacion::Referencia;

            CrearLineasFactura(lrCab, rTPI, lrCon, lrPrefact, pwAutomatica);
          END;
          lrPrefact."Tipo factura"::"Resumen x Codigo":
          BEGIN
            wAgrupacion := wAgrupacion::CodigoServicio;

            CrearLineasFactura(lrCab, rTPI, lrCon, lrPrefact, pwAutomatica);
          END;
          lrPrefact."Tipo factura"::"Resumen x Vuelo":
          BEGIN
            IF lrPrefact."Agrupar lineas x vuelo" THEN
              wAgrupacion := wAgrupacion::Vuelos
            ELSE
              wAgrupacion := wAgrupacion::Ninguna;

            CrearLineasFactura(lrCab, rTPI, lrCon, lrPrefact, pwAutomatica);
          END;
        END;

        // Marcamos las lineas de Ingreso con el numero de factura

        IF NOT pwAutomatica THEN
          ventana.UPDATE(6, Text056);

        // JPT 23/12/05 Renumeramos la factura a su numero definitivo, antes de marcar las lineas CI y Prefactura
        IF NOT wFactRapida THEN
          RenumeraFact(lrCab);

        IF rTPI.FINDSET(TRUE,TRUE) THEN BEGIN
          rTPI.LimpiaTemp;
          REPEAT
            // Esta funci¢n pasa la producci¢n a coste-ingreso
            rTPI.MarcaFactura(lrCab."No.", lrPrefact."Fecha Registro factura", TRUE);
          UNTIL rTPI.NEXT = 0;
          // Es mejor hacer un deleteall para evitar bloqueos
          lrPI.DELETEALL;
        END;

        // Rellenamos la informacion de factura en el registro de prefactura

        lrPrefact.Facturada            := TRUE;
        lrPrefact."N§ Factura"         := lrCab."No.";
        lrPrefact."Tipo Documento"     := lrCab."Document Type";
        lrPrefact.Imprimir             := lrPrefact.Imprimir::Factura;
        lrPrefact."N§ factura agencia" := prCond."N§ factura agencia";
        lrPrefact.MODIFY;

        // Marcamos la informaic¢n de pie de factura con el numero de factura definitido
        lrPie.MarcaFacturado(lrPrefact);

        //. Recuperamos la cabecera de factura para ejecutar el proceso Lanzar factura
        //+$001 <
        lrCab.GET(lrCab."Document Type", lrCab."No.");
        lcRelease.RUN(lrCab);
        //+$001 >

        IF NOT pwAutomatica THEN
          ventana.CLOSE;

        COMMIT;

        IF prCond.Imprimir THEN
          ImprimeRegistroFactura(lrPrefact);

        // Generacion del rappel automatico

        IF NOT pwFacturaRappel THEN BEGIN
          lrPrefact.SETRECFILTER;
          ProcesarRappelCliente(lrPrefact, prCond, lrPrefact."Fecha Registro factura", pwAutomatica,
                                lrPI."Tipo Servicio Fijo", 0);
        END;

      END;
    END;

    PROCEDURE ComprobarDatosFactura@1100253026(prPI@1100253000 : Record 7035392;VAR prPrefact@1100253001 : Record 7010415;VAR prCon@1100253002 : Record 7010403);
    BEGIN
      // ComprobarDatosFactura

      rConfVta.FINDFIRST;
      rConfVta.TESTFIELD("Invoice Nos.");
      rConfVta.TESTFIELD("Posted Invoice Nos.");
      rConfVta.TESTFIELD("Credit Memo Nos.");
      rConfVta.TESTFIELD("Posted Credit Memo Nos.");

      prCon.SETFILTER(Garaje       , '%1|%2', prPI.Garaje, rPar."Todos los garajes");
      prCon.SETRANGE ("N§ Contrato", prPrefact."N§ Contrato");
      prCon.FINDFIRST;

      prPrefact.TESTFIELD("Cliente Facturacion");
      prPrefact.TESTFIELD("CIF/NIF");

      rCli.GET(prPrefact."Cliente Facturacion");
      rCli.TESTFIELD("Customer Posting Group");

      rGrupContCli.GET(rCli."Customer Posting Group");
      rGrupContCli.TESTFIELD("Service Charge Acc.");
      rGrupContCli.TESTFIELD("Receivables Account");

      rConfIVA.GET(rCli."VAT Bus. Posting Group", prPI."Grupo registro IVA Producto");
      rConfIVA.TESTFIELD("Sales VAT Account");
    END;

    PROCEDURE CrearCabeceraFactura@1100253032(VAR prCab@1100253000 : Record 36;prCon@1100253001 : Record 7010403;VAR prPrefact@1100253002 : Record 7010415;pwAbono@1100253003 : Boolean;pwFraAgencia@1100253004 : Code[20];pwNoExportar@1100253005 : Boolean);
    BEGIN
      // CrearCabeceraFactura
      //

      // JPT 30.05.05
      // Las facturas de serie alternativa no se tienen que traspasar DRF 05004

      IF prPrefact."No Serie Alternativa" THEN
        pwNoExportar := TRUE;

      CLEAR(prCab);

      IF pwAbono THEN BEGIN
        prCab.VALIDATE("Document Type", prCab."Document Type"::"Credit Memo");

        // Si se ha indicado un numero de factura agencia hay que conservarlo como numero Navision (AUTOFACTURAS)
        // Estas facturas no se exportan a contabilidad

        IF pwFraAgencia <> '' THEN BEGIN
          prCab.VALIDATE("No.", pwFraAgencia);
          pwNoExportar := TRUE;
          prCab.VALIDATE("No. Series"        , '');
          prCab.VALIDATE("Posting No. Series", '');
        END
        ELSE BEGIN
          { JPT 17/05/07 Ahora tenemos un parametro de Serie Alternativa y un campo tambien
          IF prCon."Cod. Serie" <> '' THEN BEGIN
            prCab.VALIDATE("No. Series"        , prCon."Cod. Serie");
            prCab.VALIDATE("Posting No. Series", prCon."Cod. Serie");
          END
          }
          IF prPrefact."No Serie Alternativa" THEN BEGIN
            rParAux.FINDFIRST;
            rParAux.TESTFIELD("Serie Alternativa");
            prCab.VALIDATE("No. Series"        , rParAux."Serie Alternativa");
            prCab.VALIDATE("Posting No. Series", rParAux."Serie Alternativa");
          END
          ELSE BEGIN
            prCab.VALIDATE("No. Series"        , rConfVta."Credit Memo Nos.");
            prCab.VALIDATE("Posting No. Series", rConfVta."Credit Memo Nos.");
          END;

          // No se permite abonos con No de serie alternativa
          IF  prCab."No. Series" <> rConfVta."Credit Memo Nos." THEN
            ERROR(Text059);
        END;

      END
      ELSE BEGIN
        prCab.VALIDATE("Document Type", prCab."Document Type"::Invoice);

        // Si se ha indicado un numero de factura agencia hay que conservarlo como numero Navision (AUTOFACTURAS)
        // Estas facturas no se exportan a contabilidad

        IF pwFraAgencia <> '' THEN BEGIN
          prCab.VALIDATE("No.", pwFraAgencia);
          pwNoExportar := TRUE;
          prCab.VALIDATE("No. Series"        , '');
          prCab.VALIDATE("Posting No. Series", '');
        END
        ELSE BEGIN
          { JPT 17/05/07 Ahora tenemos un parametro de Serie Alternativa y un campo tambien
          IF prCon."Cod. Serie" <> '' THEN BEGIN
            prCab.VALIDATE("No. Series"        , prCon."Cod. Serie");
            prCab.VALIDATE("Posting No. Series", prCon."Cod. Serie");
          END
          }
          IF prPrefact."No Serie Alternativa" THEN BEGIN
            rParAux.FINDFIRST;
            rParAux.TESTFIELD("Serie Alternativa");
            prCab.VALIDATE("No. Series"        , rParAux."Serie Alternativa");
            prCab.VALIDATE("Posting No. Series", rParAux."Serie Alternativa");
          END
          ELSE BEGIN
            prCab.VALIDATE("No. Series"        , rConfVta."Invoice Nos.");
            prCab.VALIDATE("Posting No. Series", rConfVta."Invoice Nos.");
          END;
        END;

      END;
      prCab.VALIDATE("Posting Date", prPrefact."Fecha Registro factura");

      prCab."No." := NumTempFact; // JPT 23/12/05 Le ponemos un numero provisional de factura
      prCab.INSERT(TRUE);

      // Hay que marcar las facturas que no queremos que entren en el proceso de exportacion a contabilidad

      prCab.Traspasado := pwNoExportar;

      prCab.VALIDATE("Sell-to Customer No.", prPrefact."Cliente Facturacion");
      prPrefact.PasaDatosClienteCabVta(prCab); // JPT 14/06/05 Le pasamos los datos del cliente venta

      // Si los datos de facturacion del contrato estan rellenados utilizaremos esos datos en la factura

      IF (prCon."Cod. Terminos Pago" <> '') AND (prCon."Cod. Terminos Pago" <> rCli."Payment Terms Code") THEN
        prCab.VALIDATE("Payment Terms Code", prCon."Cod. Terminos Pago");

      IF (prCon."Cod. Formas Pago" <> '') AND (prCon."Cod. Formas Pago" <> rCli."Payment Method Code") THEN
        prCab.VALIDATE("Payment Method Code", prCon."Cod. Terminos Pago");

      prCab."Posting Description" := COPYSTR(prPrefact."Texto Registro", 1, MAXSTRLEN(prCab."Posting Description"));

      prCab.VALIDATE("Prices Including VAT", prCon."Impuestos incluidos");
      prCab.VALIDATE("Currency Code"       , prCon."Cod. Divisa");

      // Dimensiones
      prCab.VALIDATE("Shortcut Dimension 1 Code", prPrefact.Garaje);
      prCab.VALIDATE("Shortcut Dimension 2 Code", prPrefact.Touroperador);

      // JPT 21.06.05
      // Si tiene descuento le ponemos como codigo de decuento el numero de prefactura que es la manera
      // de ligarlo con la tabla descuento factura

      IF prPrefact."% Dto" <> 0 THEN
        prCab.VALIDATE("Invoice Disc. Code", prPrefact."N§ Prefactura");

      prCab.MODIFY(TRUE);
    END;

    PROCEDURE CrearCabeceraFactura2@1103355002(VAR prCab@1100253000 : Record 36;prCon@1100253001 : Record 7010403;VAR prPrefact@1100253002 : Record 7010415;pwAbono@1100253003 : Boolean;pwFraAgencia@1100253004 : Code[20];pwNoExportar@1100253005 : Boolean);
    VAR
      lwCodSerie@1103355000 : Code[10];
    BEGIN
      // CrearCabeceraFactura2
      // Eliminamos la mayoria de validates

      // JPT 30.05.05
      // Las facturas de serie alternativa no se tienen que traspasar DRF 05004

      // Vaciamos el temporal de lineas
      CLEAR(rTempLinVta);
      rTempLinVta.DELETEALL;

      IF prPrefact."No Serie Alternativa" THEN
        pwNoExportar := TRUE;

      CLEAR(prCab);

      IF prPrefact."No Serie Alternativa" THEN BEGIN
        rParAux.FINDFIRST;
        rParAux.TESTFIELD("Serie Alternativa");
        lwCodSerie := rParAux."Serie Alternativa";
      END;

      IF pwAbono THEN BEGIN
        prCab."Document Type" := prCab."Document Type"::"Credit Memo";
        IF lwCodSerie = '' THEN
          lwCodSerie  := rConfVta."Credit Memo Nos.";

        // No se permite abonos con No de serie alternativa
        IF  lwCodSerie <> rConfVta."Credit Memo Nos." THEN
          ERROR(Text059);
      END
      ELSE BEGIN
        prCab."Document Type" :=  prCab."Document Type"::Invoice;
        IF lwCodSerie = '' THEN
          lwCodSerie  := rConfVta."Invoice Nos.";
      END;

      // Si se ha indicado un numero de factura agencia hay que conservarlo como numero Navision (AUTOFACTURAS)
      // Estas facturas no se exportan a contabilidad

      IF pwFraAgencia <> '' THEN BEGIN
        pwNoExportar               := TRUE;
        lwCodSerie                 := '';
      END;


      prCab."No. Series"         := lwCodSerie;
      prCab."Posting No. Series" := lwCodSerie;
      prCab."Posting Date"       := prPrefact."Fecha Registro factura";
      prCab."Document Date"      := prCab."Posting Date";

      IF pwFraAgencia = '' THEN
        //pwFraAgencia := NumTempFact; // JPT 23/12/05 Le ponemos un numero provisional de factura
        pwFraAgencia := cNoSeriesMgt.GetNextNo(prCab."No. Series", prCab."Posting Date", TRUE);
      prCab."No."                := pwFraAgencia;

      prCab.INSERT;

      // Hay que marcar las facturas que no queremos que entren en el proceso de exportacion a contabilidad

      prCab.Traspasado := pwNoExportar;
      prCab."Sell-to Customer No."           := prPrefact."Cliente Facturacion";
      prCab."Sell-to Customer Template Code" := '';

      prCab."Sell-to Customer Name 2"        := rCli."Name 2";
      prCab."Gen. Bus. Posting Group"        := rCli."Gen. Bus. Posting Group";
      prCab."VAT Bus. Posting Group"         := rCli."VAT Bus. Posting Group";
      prCab."Tax Area Code"                  := rCli."Tax Area Code";
      prCab."Tax Liable"                     := rCli."Tax Liable";
      prCab."VAT Registration No."           := rCli."VAT Registration No.";
      prCab."Shipping Advice"                := rCli."Shipping Advice";

      prCab."Ship-to Name"                   := rCli.Name;
      prCab."Ship-to Name 2"                 := rCli."Name 2";
      prCab."Ship-to Address"                := rCli.Address;
      prCab."Ship-to Address 2"              := rCli."Address 2";
      prCab."Ship-to City"                   := rCli.City;
      prCab."Ship-to Post Code"              := rCli."Post Code";
      prCab."Ship-to County"                 := rCli.County;
      prCab."Ship-to Country/Region Code"           := rCli."Country/Region Code";
      prCab."Ship-to Contact"                := rCli.Contact;
      prCab."Shipment Method Code"           := rCli."Shipment Method Code";
      prCab."Tax Area Code"                  := rCli."Tax Area Code";
      prCab."Tax Liable"                     := rCli."Tax Liable";
      prCab."Shipping Agent Code"            := rCli."Shipping Agent Code";
      prCab."Shipping Agent Service Code"    := rCli."Shipping Agent Service Code";

      IF (rCli."Bill-to Customer No." <> '') AND (rCli."Bill-to Customer No." <> rCli."No.") THEN
        rCli.GET(rCli."Bill-to Customer No.");
      prCab."Bill-to Customer No."           := rCli."No.";
      prCab."Bill-to Customer Template Code" := '';
      prCab."Bill-to Name"                   := rCli.Name;
      prCab."Bill-to Name 2"                 := rCli."Name 2";
      prCab."Bill-to Address"                := rCli.Address;
      prCab."Bill-to Address 2"              := rCli."Address 2";
      prCab."Bill-to City"                   := rCli.City;
      prCab."Bill-to Post Code"              := rCli."Post Code";
      prCab."Bill-to County"                 := rCli.County;
      prCab."Bill-to Country/Region Code"           := rCli."Country/Region Code";

      rCli.TESTFIELD("Payment Terms Code");
      prCab.VALIDATE("Payment Terms Code"    , rCli."Payment Terms Code");
      prCab."Payment Method Code"            := rCli."Payment Method Code";
      prCab."Gen. Bus. Posting Group"        := rCli."Gen. Bus. Posting Group";
      prCab."Customer Posting Group"         := rCli."Customer Posting Group";
      prCab."Currency Code"                  := rCli."Currency Code";
      prCab."Customer Price Group"           := rCli."Customer Price Group";
      prCab."Prices Including VAT"           := rCli."Prices Including VAT";
      prCab."Allow Line Disc."               := rCli."Allow Line Disc.";
      prCab."Invoice Disc. Code"             := rCli."Invoice Disc. Code";
      prCab."Customer Disc. Group"           := rCli."Customer Disc. Group";
      prCab."Language Code"                  := rCli."Language Code";
      prCab."Salesperson Code"               := rCli."Salesperson Code";
      prCab."Combine Shipments"              := rCli."Combine Shipments";
      prCab.Reserve                          := rCli.Reserve;
      prCab."VAT Registration No."           := rCli."VAT Registration No.";
      prCab."Cust. Bank Acc. Code"           := rCli."Default Bank Acc. Code";

      prPrefact.PasaDatosClienteCabVta(prCab); // JPT 14/06/05 Le pasamos los datos del cliente venta

      // Si los datos de facturacion del contrato estan rellenados utilizaremos esos datos en la factura

      IF (prCon."Cod. Terminos Pago" <> '') AND (prCon."Cod. Terminos Pago" <> rCli."Payment Terms Code") THEN
        prCab.VALIDATE("Payment Terms Code", prCon."Cod. Terminos Pago");

      IF (prCon."Cod. Formas Pago" <> '') AND (prCon."Cod. Formas Pago" <> rCli."Payment Method Code") THEN
        prCab.VALIDATE("Payment Method Code", prCon."Cod. Terminos Pago");

      prCab."Posting Description" := COPYSTR(prPrefact."Texto Registro", 1, MAXSTRLEN(prCab."Posting Description"));

      prCab."Prices Including VAT" := prCon."Impuestos incluidos";
      prCab."Currency Code"        := prCon."Cod. Divisa";
      IF prCab."Currency Code" <> '' THEN BEGIN
        prCab."Currency Factor"   := rTipoCambDiv.ExchangeRate(prCab."Posting Date",prCab."Currency Code");
      END;

      // Dimensiones
      prCab.VALIDATE("Shortcut Dimension 1 Code", prPrefact.Garaje);
      prCab.VALIDATE("Shortcut Dimension 2 Code", prPrefact.Touroperador);

      // JPT 21.06.05
      // Si tiene descuento le ponemos como codigo de decuento el numero de prefactura que es la manera
      // de ligarlo con la tabla descuento factura

      IF prPrefact."% Dto" <> 0 THEN
        prCab."Invoice Disc. Code" := prPrefact."N§ Prefactura";

      prCab.MODIFY;
    END;

    PROCEDURE CrearLineasFactura@1100253028(VAR prCab@1100253000 : Record 36;VAR prPI@1100253001 : Record 7035392;prCon@1100253002 : Record 7010403;prPrefact@1100253003 : Record 7010415;pwAutomatica@1100253008 : Boolean);
    VAR
      lrLinTEMP@1100253006 : TEMPORARY Record 7010417;
      lrCondFra@1100253005 : Record 7010416;
      lrLinFra@1100253007 : Record 37;
    BEGIN
      // CrearLineasFactura
      //

      // Si el tipo de factura no coincide con el tipo de prefactura hay que rehacer las lineas de prefactura para
      // que la impresion sea correcta

      IF prPrefact."Tipo factura" <> prPrefact."Tipo prefactura" THEN BEGIN

        // Borramos las lineas de prefactura

        rLinPre.RESET;
        rLinPre.SETRANGE("N§ Prefactura", prPrefact."N§ Prefactura");
        IF rLinPre.FINDSET(TRUE) THEN
          rLinPre.DELETEALL;

        // Buscamos las condiciones de facturacion por Cliente - Touroperador - Tipo Servicio

        IF NOT lrCondFra.GET(prPI."Cliente estadistico", prPI.Touroperador, prPI."Tipo Servicio Fijo") THEN
          lrCondFra.INIT;


        prPI.SETCURRENTKEY("Cliente Operativo",Touroperador,Fecha,Facturable,"N§ Prefactura");
        CrearLineasPrefactura(prPrefact, prPI, lrCondFra, lrLinTEMP, pwAutomatica);

        IF NOT pwAutomatica THEN
          ventana.UPDATE(6, Text050);

        PasarPrefacturaTemporal(prPrefact, lrLinTEMP, prPrefact, rLinPre, TRUE);

        IF NOT pwAutomatica THEN
          ventana.UPDATE(6, Text055);

      END;

      rLinPre.RESET;
      rLinPre.SETRANGE("N§ Prefactura", prPrefact."N§ Prefactura");

      // AJS 16.06.2008
      // Excluimos las lineas de tipo localizador

      rLinPre.SETFILTER(Tipo, '<>%1', rLinPre.Tipo::Localizador);

      IF rLinPre.FINDSET THEN BEGIN
        IF NOT pwAutomatica THEN BEGIN
          wActual := 0;
          wTotal  := rLinPre.COUNT;
        END;

        wNoLin  := 0;
        REPEAT
          IF NOT pwAutomatica THEN BEGIN
            wActual += 1;
            ventana.UPDATE(7, ROUND(wActual / wTotal * 10000, 1));
          END;
          IF wFactRapida THEN
            InsertarLineaFactura2(prCab, rLinPre)
          ELSE
            InsertarLineaFactura(prCab, rLinPre);
        UNTIL rLinPre.NEXT = 0;
      END;

      IF wFactRapida THEN BEGIN
        // Pasamos una funci¢n a las lineas para calcular todos los importes
        // Al haber una agrupaci¢n de lineas decidimos hacerlo una sola vez por linea para optimizar
        IF rTempLinVta.FINDSET THEN BEGIN
          REPEAT
           lrLinFra := rTempLinVta;
           lrLinFra.VALIDATE("Line Discount %"); // valida los campos de importes
           lrLinFra.INSERT;
          UNTIL rTempLinVta.NEXT=0;
        END;
      END;

      // Si la factura tiene descuento hay que lanzar la funcion para calcularlos

      IF prPrefact."% Dto" <> 0 THEN BEGIN
        CLEAR(lrLinFra);
        lrLinFra.SETRANGE("Document Type", prCab."Document Type");
        lrLinFra.SETRANGE("Document No." , prCab."No.");
        IF lrLinFra.FINDSET(TRUE) THEN
          CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Discount", lrLinFra);
      END;
    END;

    PROCEDURE InsertarLineaFactura@1100253010(prCab@1100253000 : Record 36;prLinPref@1100253001 : Record 7010417);
    VAR
      lwSigno@1100253002 : Integer;
      lrLin@1100253003 : Record 37;
      lwTipoServicio@1100253004 : Code[10];
    BEGIN
      // InsertarLineaFactura
      //

      IF prCab."Document Type" = prCab."Document Type"::Invoice THEN
        lwSigno := 1
      ELSE
        lwSigno := -1;

      // Acumulamos las lineas de factura por Garaje, Touroperador y Tipo servicio

      lrLin.RESET;

      // AJS 25.07.2006
      // Utilizamos una nueva clave para mejorar el rendimiento

      //lrLin.SETCURRENTKEY("Document No.",
      //                    "Document Type",
      //                    "Shortcut Dimension 1 Code",
      //                    "Shortcut Dimension 2 Code",
      //                    Servicio);

      lrLin.SETRANGE("Document Type"            , prCab."Document Type");
      lrLin.SETRANGE("Document No."             , prCab."No.");
      lrLin.SETRANGE("Shortcut Dimension 1 Code", prLinPref.Garaje);
      lrLin.SETRANGE("Shortcut Dimension 2 Code", prLinPref.Touroperador);
      lrLin.SETRANGE(Servicio                   , FORMAT(prLinPref."Tipo Servicio Fijo"));
      // IF NOT lrLin.FINDFIRST THEN BEGIN
      IF NOT lrLin.FINDSET(TRUE) THEN BEGIN

        wNoLin += 10000;

        CLEAR(lrLin);
        lrLin.VALIDATE("Document Type"            , prCab."Document Type");
        lrLin.VALIDATE("Document No."             , prCab."No.");
        lrLin.VALIDATE("Line No."                 , wNoLin);
        lrLin.VALIDATE("Sell-to Customer No."     , prCab."Sell-to Customer No.");
        lrLin.INSERT(TRUE);
        lrLin.VALIDATE(Type                       , lrLin.Type::"G/L Account");
        lrLin.VALIDATE("No."                      , rGrupContCli."Service Charge Acc.");
        lrLin.VALIDATE(Quantity                   , 1);
        lrLin.VALIDATE("VAT Prod. Posting Group"  , prLinPref."Grupo registro IVA producto");
        lrLin.VALIDATE("Shortcut Dimension 1 Code", prLinPref.Garaje);
        lrLin.VALIDATE("Shortcut Dimension 2 Code", prLinPref.Touroperador);

        // La dimension de tipo de servicio se puede traspasar a contabilidad en funcion de un parametro

        IF rPar."Tipo Servicio Como Dimension" THEN BEGIN
          lwTipoServicio := BuscaTipoServicio(prLinPref);
          IF lwTipoServicio <> '' THEN BEGIN
            rPar.TESTFIELD("Dimensi¢n Tipo Servicio");
            InsertaDimLinea(lrLin, rPar."Dimensi¢n Tipo Servicio", lwTipoServicio);
          END;
        END;

        lrLin.Servicio := FORMAT(prLinPref."Tipo Servicio Fijo");
        lrLin.MODIFY(TRUE);
      END;

      IF prCab."Prices Including VAT" THEN
        lrLin."Unit Price" += (prLinPref."Importe con impuestos" * lwSigno)
      ELSE
        lrLin."Unit Price" += (prLinPref."Importe sin impuestos" * lwSigno);
      lrLin.VALIDATE("Unit Price");
      lrLin.MODIFY;
    END;

    PROCEDURE InsertarLineaFactura2@1103355014(prCab@1100253000 : Record 36;prLinPref@1100253001 : Record 7010417);
    VAR
      lwSigno@1100253002 : Integer;
      lwTipoServicio@1100253004 : Code[10];
    BEGIN
      // InsertarLineaFactura2
      // Eliminando la mayoria de validates

      IF prCab."Document Type" = prCab."Document Type"::Invoice THEN
        lwSigno := 1
      ELSE
        lwSigno := -1;

      // Acumulamos las lineas de factura por Garaje, Touroperador y Tipo servicio

      rTempLinVta.RESET;

      // AJS 25.07.2006
      // Utilizamos una nueva clave para mejorar el rendimiento
      // JPT 31/01/07 Atacando a una temporal aumentamos a£n m s el rendimiento

      //rTempLinVta.SETCURRENTKEY("Document No.",
      //                    "Document Type",
      //                    "Shortcut Dimension 1 Code",
      //                    "Shortcut Dimension 2 Code",
      //                    Servicio);

      rTempLinVta.SETRANGE("Document Type"            , prCab."Document Type");
      rTempLinVta.SETRANGE("Document No."             , prCab."No.");
      rTempLinVta.SETRANGE("Shortcut Dimension 1 Code", prLinPref.Garaje);
      rTempLinVta.SETRANGE("Shortcut Dimension 2 Code", prLinPref.Touroperador);
      rTempLinVta.SETRANGE(Servicio                   , FORMAT(prLinPref."Tipo Servicio Fijo"));
      IF NOT rTempLinVta.FINDFIRST THEN BEGIN

        wNoLin += 10000;

        CLEAR(rTempLinVta);
        rTempLinVta."Document Type"                     := prCab."Document Type";
        rTempLinVta."Document No."                      := prCab."No.";
        rTempLinVta."Line No."                          := wNoLin;
        rTempLinVta."Sell-to Customer No."              := prCab."Sell-to Customer No.";
        rTempLinVta."Currency Code"                     := prCab."Currency Code";
        // AJF 18/09/08 - Migracion 5.01
        // No existe campo en 5.01
        //rTempLinVta."Job No."                           := prCab."Job No.";
        rTempLinVta."Location Code"                     := prCab."Location Code";
        rTempLinVta."Customer Price Group"              := prCab."Customer Price Group";
        rTempLinVta."Customer Disc. Group"              := prCab."Customer Disc. Group";
        rTempLinVta."Allow Line Disc."                  := prCab."Allow Line Disc.";
        rTempLinVta."Transaction Type"                  := prCab."Transaction Type";
        rTempLinVta."Transport Method"                  := prCab."Transport Method";
        rTempLinVta."Bill-to Customer No."              := prCab."Bill-to Customer No.";
        rTempLinVta."Gen. Bus. Posting Group"           := prCab."Gen. Bus. Posting Group";
        rTempLinVta."VAT Bus. Posting Group"            := prCab."VAT Bus. Posting Group";
        rTempLinVta."Exit Point"                        := prCab."Exit Point";
        rTempLinVta.Area                                := prCab.Area;
        rTempLinVta."Transaction Specification"         := prCab."Transaction Specification";
        rTempLinVta."Tax Area Code"                     := prCab."Tax Area Code";
        rTempLinVta."Tax Liable"                        := prCab."Tax Liable";
        rTempLinVta."Responsibility Center"             := prCab."Responsibility Center";
        rTempLinVta."Shipping Agent Code"               := prCab."Shipping Agent Code";
        rTempLinVta."Shipping Agent Service Code"       := prCab."Shipping Agent Service Code";
        rTempLinVta."Outbound Whse. Handling Time"      := prCab."Outbound Whse. Handling Time";
        rTempLinVta."Shipping Time"                     := prCab."Shipping Time";

        rTempLinVta.INSERT;
        rTempLinVta.Type                                := rTempLinVta.Type::"G/L Account";
        rTempLinVta."No."                               := rGrupContCli."Service Charge Acc.";
        CLEAR(rCta);
        rCta.GET(rTempLinVta."No.");
        rCta.CheckGLAcc;
        rTempLinVta.Description                         := rCta.Name;
        rTempLinVta."Gen. Prod. Posting Group"          := rCta."Gen. Prod. Posting Group";
        rTempLinVta."VAT Prod. Posting Group"           := rCta."VAT Prod. Posting Group";
        rTempLinVta."Tax Group Code"                    := rCta."Tax Group Code";
        rTempLinVta."Allow Invoice Disc."               := NOT rCta.InvoiceDiscountAllowed(rTempLinVta."No.");
        rTempLinVta."Allow Item Charge Assignment"      := FALSE;

        rTempLinVta.VALIDATE(Quantity                   , 1);
        rTempLinVta.VALIDATE("VAT Prod. Posting Group"  , prLinPref."Grupo registro IVA producto");
        rTempLinVta.VALIDATE("Shortcut Dimension 1 Code", prLinPref.Garaje);
        rTempLinVta.VALIDATE("Shortcut Dimension 2 Code", prLinPref.Touroperador);

        // La dimension de tipo de servicio se puede traspasar a contabilidad en funcion de un parametro

        IF rPar."Tipo Servicio Como Dimension" THEN BEGIN
          lwTipoServicio := BuscaTipoServicio(prLinPref);
          IF lwTipoServicio <> '' THEN BEGIN
            rPar.TESTFIELD("Dimensi¢n Tipo Servicio");
            InsertaDimLinea(rTempLinVta, rPar."Dimensi¢n Tipo Servicio", lwTipoServicio);
          END;
        END;

        rTempLinVta.Servicio := FORMAT(prLinPref."Tipo Servicio Fijo");
        rTempLinVta.MODIFY;

      END;

      IF prCab."Prices Including VAT" THEN
        rTempLinVta."Unit Price" += (prLinPref."Importe con impuestos" * lwSigno)
      ELSE
        rTempLinVta."Unit Price" += (prLinPref."Importe sin impuestos" * lwSigno);
      rTempLinVta.MODIFY;
    END;

    PROCEDURE ImprimirFactura@1100253009(VAR prPrefact@1100253000 : Record 7010415);
    VAR
      lrLista@1100253002 : Record 2000000001;
      lrCom@1100253003 : Record 44;
      lrCab@1100253004 : Record 36;
      lwNumInforme@1100253001 : Integer;
      lwOK@1100253005 : Boolean;
    BEGIN
      // ImprimirFactura
      //

      rPar.FINDFIRST;

      // JPT 29/12/05 Algunos Reports imprimen igualmente Factura y Prefactura distinguiendo solo por este campo
      prPrefact.MODIFYALL(Imprimir, prPrefact.Imprimir::Factura);
      COMMIT;

      // Determinamos si es una impresion por Mail para adjudicar la impresora de sistema o no
      lwOK := NOT prPrefact."Imprime Mail";

      CASE prPrefact."Tipo factura" OF
        prPrefact."Tipo factura"::"Sin resumen": BEGIN
          rPar.TESTFIELD("Factura sin resumen");
          lwNumInforme := rPar."Factura sin resumen";
        END;

        prPrefact."Tipo factura"::"Texto alternativo": BEGIN
          rPar.TESTFIELD("Factura Texto alternativo");
          lwNumInforme := rPar."Factura Texto alternativo";
        END;

        prPrefact."Tipo factura"::"Resumen x Codigo",
        prPrefact."Tipo factura"::"Resumen x Referencia": BEGIN
          rPar.TESTFIELD("Factura Resumen-Codigo");
          lwNumInforme := rPar."Factura Resumen-Codigo";
        END;

        prPrefact."Tipo factura"::"Resumen x Zona": BEGIN
          rPar.TESTFIELD("Factura Resumen-Zona");
          lwNumInforme := rPar."Factura Resumen-Zona";
        END;

        prPrefact."Tipo factura"::"Resumen x Vuelo":BEGIN
          rPar.TESTFIELD("Factura Resumen-Vuelo");
          lwNumInforme := rPar."Factura Resumen-Vuelo";
        END;

        prPrefact."Tipo factura"::"Resumen x Zona Dia-Codigo":BEGIN
          rPar.TESTFIELD(rPar."Factura Zona-Dia-Codigo");
          lwNumInforme := rPar."Factura Zona-Dia-Codigo";
        END;

        prPrefact."Tipo factura"::"Resumen x Dia-Codigo": BEGIN
          rPar.TESTFIELD("Factura Resumen Dia-Codigo");
          lwNumInforme := rPar."Factura Resumen Dia-Codigo";
        END;

        prPrefact."Tipo factura"::"Resumen x Zona-Detalle"   : BEGIN
          rPar.TESTFIELD("Factura Zona-Detalle");
          lwNumInforme := rPar."Factura Zona-Detalle";
        END;

      END;

      // La impresion depende de la empresa real en la que estemos

      IF lwNumInforme = 0 THEN
        EXIT;

      CASE rPar."Empresa Real" OF
        rPar."Empresa Real"::TRN, rPar."Empresa Real"::SJO, rPar."Empresa Real"::UEX,
        rPar."Empresa Real"::TER, rPar."Empresa Real"::CNT:
        BEGIN
          // JPT 13/12/05 No podemos filtrar por un solo registro
          // prPrefact.SETRECFILTER;

          lrLista.RESET;
          lrLista.GET(lrLista.Type::Report, '', lwNumInforme);
          REPORT.RUNMODAL(lrLista.ID, lwOK, lwOK, prPrefact);
        END;
        rPar."Empresa Real"::IBZ:
        BEGIN

          // Filtramos en factura de venta a partir de los filtros de prefactura

          CLEAR(lrCab);
          IF prPrefact.GETFILTER("Tipo Documento") <> '' THEN
            lrCab.SETFILTER("Document Type", prPrefact.GETFILTER("Tipo Documento"));

          IF prPrefact.GETFILTER("N§ Factura") <> '' THEN
            lrCab.SETFILTER("No.", prPrefact.GETFILTER("N§ Factura"))
          ELSE
            lrCab.SETRANGE("No.", prPrefact."N§ Factura");

          IF ( lrCab.FINDSET ) AND ( lrCab.COUNT = 1 ) THEN
          BEGIN
            lrCom.RESET;
            lrCom.SETRANGE("Document Type", lrCab."Document Type");
            lrCom.SETRANGE("No."          , lrCab."No.");
            FORM.RUNMODAL(67, lrCom);
          END;

          lrLista.RESET;
          lrLista.GET(lrLista.Type::Report, '', lwNumInforme);
          lrCab.SETRANGE("Imprime Logo", prPrefact."Imprime Mail");
          REPORT.RUNMODAL(lrLista.ID, lwOK, lwOK, lrCab);
        END;
      END;
    END;

    PROCEDURE ImprimeRegistroFactura@1100253013(prPrefact@1100253000 : Record 7010415);
    VAR
      lrPrefact2@1100253001 : Record 7010415;
    BEGIN
      // ImprimeRegistroFactura
      // Esta funci¢n se utliza cuando solo se desea imprimir el registro en el que se situa el puntero.

      // Filtrareos por numero de factura en vez de prefactura.

      CLEAR(lrPrefact2);
      lrPrefact2.SETRANGE("N§ Factura"     , prPrefact."N§ Factura");
      lrPrefact2.SETRANGE("Tipo Documento" , prPrefact."Tipo Documento");
      lrPrefact2.FINDFIRST;
      lrPrefact2."Imprime Mail" := prPrefact."Imprime Mail";
      ImprimirFactura(lrPrefact2);
    END;

    PROCEDURE AgruparyFacturar@1100253021(VAR prPrefact@1100253000 : Record 7010415);
    VAR
      lrPrefact@1100253001 : Record 7010415;
      lrPrefact2@1100253002 : Record 7010415;
      lrPrefact3@1100253008 : Record 7010415;
      lrPI@1100253003 : Record 7035392;
      lrPI2@1100253004 : Record 7035392;
      lrLin@1100253005 : Record 7010417;
      lrLin2@1100253006 : Record 7010417;
      lrLin3@1100253009 : Record 7010417;
      lrCond@1100253007 : Record 7010420;
    BEGIN
      // AgruparyFacturar
      //

      // Esta funcion agrupa varias prefacturas para incluirlas en una sola factura

      rPar.FINDFIRST;

      lrPrefact.COPY(prPrefact);
      lrPrefact.MARKEDONLY(TRUE);

      // Comprobamos que las prefacturas sean coherentes

      IF lrPrefact.FINDSET THEN BEGIN
        lrPrefact2 := lrPrefact;
        REPEAT
          IF (lrPrefact.Cliente <> lrPrefact2.Cliente) THEN
            ERROR(Text039, lrPrefact.FIELDCAPTION(lrPrefact.Cliente));

          IF (lrPrefact.Touroperador <> lrPrefact2.Touroperador) THEN
            ERROR(Text039, lrPrefact.FIELDCAPTION(lrPrefact.Touroperador));

          IF (lrPrefact."Tipo prefactura" <> lrPrefact2."Tipo prefactura") THEN
            ERROR(Text039, lrPrefact.FIELDCAPTION(lrPrefact."Tipo prefactura"));

          IF (lrPrefact."Tipo factura" <> lrPrefact2."Tipo factura") THEN
            ERROR(Text039, lrPrefact.FIELDCAPTION(lrPrefact."Tipo factura"));

          IF lrPrefact.Facturada THEN
            ERROR(Text028);
        UNTIL lrPrefact.NEXT = 0;
      END
      ELSE
        ERROR(Text040);

      IF NOT CONFIRM(Text042) THEN
        EXIT;

      // Iniciamos el proceso de fusion de lineas de prefactura, tambien hay que marcar las lineas de coste-ingreso
      // con la prefactura que quedar  como definitiva

      lrPI.RESET;
      lrPI.SETCURRENTKEY("Cliente Operativo",Touroperador,Fecha,Facturable,"N§ Prefactura");

      lrPrefact.FINDSET;
      lrPrefact2.COPY(lrPrefact);
      lrPrefact2.MARK(FALSE); // Desmarcamos la primera que ser  la que quedar  como definitiva
      IF lrPrefact2.FINDSET THEN BEGIN
        REPEAT

          // Movemos las lineas de prefactura a la prefactura que debe quedar como definitiva

          lrLin.RESET;
          lrLin.SETRANGE("N§ Prefactura", lrPrefact2."N§ Prefactura");
          IF lrLin.FINDSET(TRUE,TRUE) THEN BEGIN
            REPEAT
              lrLin."N§ Prefactura" := lrPrefact."N§ Prefactura";
              lrLin.INSERT(TRUE);
            UNTIL lrLin.NEXT = 0;
          END;

          // Modifica las lineas de coste-ingreso

          lrPI.SETRANGE("N§ Prefactura", lrPrefact2."N§ Prefactura");
          IF lrPI.FINDSET(TRUE, TRUE) THEN BEGIN
            ventana.OPEN(Text058);
            wActual := 0;
            wTotal  := lrPI.COUNT;
            lrPI.LOCKTABLE;
            REPEAT
              wActual += 1;
              ventana.UPDATE(1, ROUND( wActual / wTotal * 10000, 1));

              lrPI."N§ Prefactura" := lrPrefact."N§ Prefactura";
              lrPI.MODIFY;
            UNTIL lrPI.NEXT = 0;
            ventana.CLOSE;
          END;

          // Desactivamos las prefacturas

          lrPrefact3 := lrPrefact2;
          lrPrefact3.Desactiva;
        UNTIL lrPrefact2.NEXT = 0;
      END;

      // Si la prefactura tiene la marca de "Facturar sobre marca" la eliminamos

      IF lrPrefact."Facturar sobre marca" THEN BEGIN
        lrPrefact."Facturar sobre marca" := FALSE;
        lrPrefact.MODIFY;
      END;

      // Agrupamos las lineas de las maletas

      lrLin.RESET;
      lrLin.SETRANGE("N§ Prefactura", lrPrefact."N§ Prefactura");
      lrLin.SETRANGE(Tipo           , lrLin.Tipo::Maletas);
      IF lrLin.FINDSET(TRUE) THEN BEGIN
        lrLin2.COPY(lrLin);
        lrLin2.SETFILTER("N§ Linea", '<>%1', lrLin."N§ Linea");
        IF lrLin2.FINDSET(TRUE) THEN BEGIN
          REPEAT
            lrLin."Importe con impuestos"   += lrLin2."Importe con impuestos";
            lrLin."Importe sin impuestos"   += lrLin2."Importe sin impuestos";
            lrLin."Importe Sin IVA Sin Dto" += lrLin2."Importe Sin IVA Sin Dto";
            lrLin."Importe Con IVA Sin Dto" += lrLin2."Importe Con IVA Sin Dto";
            lrLin.Pax                       += lrLin2.Pax;
            lrLin.Plazas                    += lrLin2.Plazas;
          UNTIL lrLin2.NEXT = 0;
          lrLin.VALIDATE("Importe sin impuestos");
          lrLin.MODIFY;

          lrLin2.DELETEALL;
        END;
      END;

      lrPI.SETRANGE("N§ Prefactura", lrPrefact."N§ Prefactura");
      lrPI.FINDSET;

      CLEAR(lrCond);

      CrearFactura(lrPI, lrCond, FALSE, FALSE);
    END;

    PROCEDURE ComprobarImporteCero@1103350007(VAR prPI@1103350001 : Record 7035392) : Boolean;
    VAR
      lrPI@1103350000 : Record 7035392;
      lrPI2@1100253000 : Record 7035392;
      lwTotal@1103350002 : Decimal;
      lwTextoAdicional@1103355000 : Text[250];
    BEGIN
      // ComprobarImporteCero
      // Se comprueba que el importe es distinto a 0
      // En caso de que lo sea, se pedir  si se quiere marcar las l¡neas C/I como facturadas y se
      // abandonar  el proceso de prefacturacion

      // JPT 25/05/05 A peticion de IBZ

      IF NOT rPar."No permitir Facturar a 0" THEN
        EXIT(TRUE);

      CLEAR(lwTotal);
      lrPI.COPY(prPI);
      IF lrPI.FINDSET THEN BEGIN
        REPEAT
          lwTotal += lrPI."Importe con impuesto";
        UNTIL lrPI.NEXT=0;
      END;

      IF lwTotal = 0 THEN BEGIN
        lwTextoAdicional := STRSUBSTNO(Text061, lrPI."Cliente Operativo", lrPI.Touroperador, lrPI.GETRANGEMIN(Fecha),
                                                lrPI.GETRANGEMAX(Fecha));
        IF CONFIRM(Text060 + lwTextoAdicional) THEN BEGIN
          IF lrPI.FINDSET(TRUE,TRUE) THEN BEGIN
            lrPI.LimpiaTemp;
            lrPI.LOCKTABLE;
            REPEAT
              // Esta funci¢n pasa de producci¢n a facturado
              lrPI.MarcaFactura(Text057, 0D, TRUE);
            UNTIL lrPI.NEXT = 0;
          END;
        END;
        EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ProcesarRappelCliente@1100253002(VAR prPrefac@1100244000 : Record 7010415;VAR prCond@1100244016 : Record 7010420;pwFecha@1100253010 : Date;pwAutomatica@1100244002 : Boolean;pwTipoServFijo@1100253000 : 'Excursion,Traslado';pwTipoAplicacion@1100253003 : 'Por Factura,Mensual');
    VAR
      lrServ@1100244010 : Record 7010358;
      lrPrefac@1100244003 : Record 7010415;
      lrTempPrefac@1100253005 : TEMPORARY Record 7010415;
      lrLinPref@1100244004 : Record 7010417;
      lrCondRpl@1100244005 : Record 7010375;
      lrCodSer@1100253007 : Record 7010320;
      lrTipoSer@1100253008 : Record 7010319;
      lwTotal@1100244007 : Decimal;
      lwTotalRap@1100253002 : Decimal;
      lrPI@1100244014 : Record 7035392;
      lrCond@1100244015 : Record 7010420;
      lwTextReg@1100244006 : Text[250];
      lwOk@1100253004 : Boolean;
      lwNoLin@1100253001 : ARRAY [2] OF Integer;
      lwFechasServ@1100253006 : ARRAY [2] OF Date;
      lwFechaReg@1100253009 : ARRAY [2] OF Date;
      cFunPar@1000000000 : Codeunit 7010318;
    BEGIN
      // ProcesarRappelCliente
      //
      // La variable de prefactura tiene que venir ya filtrada

      // Si no encuentra condiciones de Rappel sale, tiene que tener rellenado el porcentaje

      lrCondRpl.RESET;
      lrCondRpl.SETCURRENTKEY(Cliente,
                              TTOO,
                              "Tipo Servicio Fijo",
                              "Tipo Aplicacion",
                              "Fecha Desde",
                              "Fecha Hasta");
      lrCondRpl.SETRANGE(Cliente             , prCond.Cliente);
      lrCondRpl.SETRANGE(TTOO                , prCond.Touroperador);
      lrCondRpl.SETRANGE("Tipo Servicio Fijo", pwTipoServFijo);
      lrCondRpl.SETRANGE("Tipo Aplicacion"   , pwTipoAplicacion);
      lrCondRpl.SETFILTER("Fecha Desde"      , '<=%1', prCond."Fecha hasta");
      lrCondRpl.SETFILTER("Fecha Hasta"      , '>=%1', prCond."Fecha desde");
      lrCondRpl.SETFILTER(Porcentaje         , '<>%1', 0);
      IF NOT lrCondRpl.FINDFIRST THEN
        EXIT;

      lrCondRpl.TESTFIELD("Texto Registro");

      rPar.FINDFIRST;
      rPar.TESTFIELD("Codigo Servicio Rappel");

      CLEAR(lwTotalRap);
      CLEAR(lrPI);
      CLEAR(lwNoLin);
      CLEAR(lwFechasServ);
      CLEAR(lwFechaReg);

      lrPrefac.COPY(prPrefac);
      lrPrefac.SETRANGE(Facturada           , TRUE);
      lrPrefac.SETFILTER("Prefactura Rappel", '=%1',''); //No dejamos que se realice un rappel 2 veces sobre una factura
      IF lrPrefac.FINDSET THEN BEGIN
        REPEAT
          CLEAR(lrLinPref);

          // De momento no hay ninguna comprobacion previa de la coherencia de las prefacturas pasadas
          // El rappel se facturara al cliente/TTO0 indicado en los parametros

          lrLinPref.RESET;
          CLEAR(lwTotal);
          lwOk := FALSE;

          // Establecemos la primera y ultima fecha de registro de factura

          IF (lwFechaReg[1] = 0D) OR (lrPrefac."Fecha Registro factura" < lwFechaReg[1]) THEN
            lwFechaReg[1] := lrPrefac."Fecha Registro factura";
          IF lrPrefac."Fecha Registro factura" > lwFechaReg[2] THEN
            lwFechaReg[2] := lrPrefac."Fecha Registro factura";

          lrLinPref.SETRANGE("N§ Prefactura", lrPrefac."N§ Prefactura");
          IF NOT lrCondRpl."Incluir Maletas" THEN
            lrLinPref.SETFILTER(Tipo,'<>%1', lrLinPref.Tipo::Maletas);

          IF lrLinPref.FINDSET THEN BEGIN
            IF lwFechasServ[1] = 0D THEN         // Buscamos la primera y ultima fecha servicio
              lwFechasServ[1] := lrLinPref.Fecha;
            IF lwFechasServ[2] = 0D THEN
              lwFechasServ[2] := lrLinPref.Fecha;
            REPEAT
              lwTotal += lrLinPref."Importe sin impuestos";
              lwOk := lwOk OR (lrLinPref."Tipo Servicio Fijo"= pwTipoServFijo);

              IF lrLinPref.Fecha < lwFechasServ[1] THEN
                lwFechasServ[1] := lrLinPref.Fecha;
              IF lrLinPref.Fecha > lwFechasServ[2] THEN
                lwFechasServ[2] := lrLinPref.Fecha;

            UNTIL lrLinPref.NEXT=0;
          END;

          // JPT 10/10/05 Comprobamos que el tipo de servicio fijo concuerde con alguna linea de la prefactura
          // Si no borramos el total para que no se tenga en consideracion.

          IF NOT lwOk THEN
            CLEAR(lwTotal);

          // No se hacen Rappels de abonos. Lo cual tambien evita bucles infinitos

          IF lwTotal > 0 THEN BEGIN

            // Este es el total del rappel para esa linea de prefactura
            lwTotal := lwTotal * lrCondRpl.Porcentaje / 100 * -1;

            // Marcamos el no parte como usuario para poder filtrar luego por la clave primaria
            // Creamos una linea de factura
            lrPI.LOCKTABLE;
            lrPI.INIT;
            lrPI."N§ Parte"    := COPYSTR(USERID, 1, MAXSTRLEN(lrPI."N§ Parte"));
            lrPI.INSERT(TRUE);
            lrPI.LOCKTABLE;
            IF lwNoLin[1] = 0 THEN // Guardamos el primer y ultimo numero de linea para poder filtrar
              lwNoLin[1] := lrPI."N§ Linea";
            lwNoLin[2] := lrPI."N§ Linea";

            // AJS 20.10.2005
            // Adjudicamos la linea de ingreso a la primera fecha de las lineas implicadas en la prefactura
            //lrPI.Fecha                         := pwFecha;
            // JPT 02/06/06 Quieren (T.Carvajal) que la fecha sea la fecha de registro de la factura.
            //lrPI.Fecha                         := pwFecha;
            lrPI.Fecha                         := lrPrefac."Fecha Registro factura";
            IF lrPI.Fecha=0D THEN
              lrPI.Fecha                       := pwFecha;

            lrPI.Garaje                        := lrPrefac.Garaje;
            lrPI."Cod. Divisa"                 := lrPrefac."Cod. Divisa";
            lrPI."N§ Contrato"                 := lrPrefac."N§ Contrato";
            // AJF 23/08/10
            lrPI."Cliente estadistico"         := cFunPar.GetClienteEstadistico(prCond.Cliente, prCond.Touroperador);
            lrPI."Cliente Operativo"           := prCond.Cliente;
            lrPI.Touroperador                  := prCond.Touroperador;
            lrPI."N§ Contrato"                 := lrPrefac."N§ Contrato";
            lrPI."Codigo servicio"             := rPar."Codigo Servicio Rappel";
            lrPI."Concepto facturacion"        := STRSUBSTNO(Text044, lrPrefac."N§ Factura");
            lrPI."Grupo registro IVA Producto" := lrLinPref."Grupo registro IVA producto";
            lrPI."Precio manual"               := TRUE;

            // AJS 20.10.2005
            // Incluyo mas campos para que las lineas de coste ingreso sean mas utiles a la hora de estadisticas

            lrCodSer.GET(lrPI."Codigo servicio");
            lrTipoSer.GET(lrCodSer."Tipo servicio");

            lrPI."Tipo servicio"      := lrTipoSer.Codigo;
            lrPI."Tipo Servicio Fijo" := lrTipoSer."Tipo fijo";
            lrPI."Zona facturacion"       := lrPrefac."Zona Trabajo";
            lrPI.Facturable           := TRUE;

            lrPI.VALIDATE(Importe, lwTotal);
            lrPI.VALIDATE("Importe sin impuesto", lwTotal);
            lrPI."Cod. Divisa" := lrPrefac."Cod. Divisa";
            lrPI.divisa_ingreso(pwFecha);
            lrPI.MODIFY;

            lwTotalRap += lwTotal;

            // Guardamos un temporal con todos las prefacturas afectadas

            lrTempPrefac := lrPrefac;
            lrTempPrefac.INSERT;
          END;
        UNTIL lrPrefac.NEXT = 0;
      END;

      IF lwTotalRap = 0 THEN  // No hacemos rappels a 0
        EXIT;

      // lrCond.RESET;
      // IF lrCond.GET(USERID) THEN
      //   lrCond.DELETE;

      CLEAR(lrCond);
      lrCond.Usuario                  := USERID;
      lrCond.Cliente                  := prCond.Cliente;
      lrCond.Touroperador             := prCond.Touroperador;
      lrCond."Texto Registro"         := lrCondRpl."Texto Registro";
      lrCond.Garaje                   := prPrefac.Garaje;
      lrCond."Fecha Factura"          := pwFecha;
      lrCond."Fecha desde"            := lwFechaReg[1];
      lrCond."Fecha hasta"            := lwFechaReg[2];
      lrCond."Codigos Servicio"       := rPar."Codigo Servicio Rappel";
      lrCond."Facturacion Automatica" := pwAutomatica;
      lrCond.Imprimir                 := FALSE;
      // lrCond.INSERT;

      lrPI.SETRANGE("N§ Parte", COPYSTR(USERID,1,MAXSTRLEN(lrPI."N§ Parte")));
      lrPI.SETRANGE("N§ Linea", lwNoLin[1], lwNoLin[2]);

      IF CrearPrefactura(lrPI, lrCond, TRUE) THEN BEGIN
        lrCond.Imprimir := NOT pwAutomatica; // Solo lo imprimiremos cuando sea facturacion manual
        CrearFactura(lrPI, lrCond, TRUE, TRUE);

        // Marcamos todas las prefacturas afectadas

        IF lrTempPrefac.FINDSET THEN BEGIN
          lrPrefac.RESET;
          REPEAT
            lrPrefac := lrTempPrefac;
            lrPrefac."Prefactura Rappel" := lrCond."N§ Prefactura";
            lrPrefac.MODIFY;
          UNTIL lrTempPrefac.NEXT=0;
        END;

        // Marcamos el mismo rappel

        lrPrefac.RESET;
        IF lrPrefac.GET(lrCond."N§ Prefactura") THEN BEGIN
          lrPrefac."Prefactura Rappel" := lrCond."N§ Prefactura";
          lrPrefac.MODIFY;
        END;
      END;

      // Esto es para la facturaci¢n automatica. Para que incluya la factura en la lista de impresion

      prCond."N§ Prefactura":= lrCond."N§ Prefactura";

      // prCond.MODIFY;
    END;

    PROCEDURE BuscaTipoServicio@1103350003(prLInPref@1103350000 : Record 7010417) : Code[10];
    VAR
      lrCodSer@1103350001 : Record 7010320;
    BEGIN
      // BuscaTipoServ
      //
      CLEAR(lrCodSer);
      IF lrCodSer.GET(prLInPref."Codigo Servicio") THEN
        EXIT(lrCodSer."Tipo servicio");
    END;

    PROCEDURE InsertaDimLinea@1103350005(VAR prLin@1103350000 : Record 37;pwDimension@1103350001 : Code[20];pwValor@1103350002 : Code[20]);
    VAR
      lrDocDim@1103350003 : Record 357;
      lrDocDim2@1103350004 : Record 357;
    BEGIN
      // InsertaDimLin
      // Inserta dimension a la linea de factura

      IF pwValor='' THEN
        EXIT;

      CLEAR(lrDocDim);
      lrDocDim.VALIDATE("Table ID"            , DATABASE::"Sales Line");
      lrDocDim.VALIDATE("Document Type"       , prLin."Document Type");
      lrDocDim.VALIDATE("Document No."        , prLin."Document No.");
      lrDocDim.VALIDATE("Line No."            , prLin."Line No.");
      lrDocDim.VALIDATE("Dimension Code"      , pwDimension);
      lrDocDim.VALIDATE("Dimension Value Code", pwValor);

      lrDocDim2 := lrDocDim;
      IF lrDocDim.FIND THEN BEGIN
        IF lrDocDim2."Dimension Value Code" <> lrDocDim."Dimension Value Code" THEN
          lrDocDim.MODIFY(TRUE)
      END
      ELSE
        lrDocDim.INSERT(TRUE);
    END;

    PROCEDURE ParametrosGlobales@1100253003();
    BEGIN
      // ParametrosGlobales
      //

      // Funcion pensada para llamarse desde fuera de esta codeunit

      rPar.FINDFIRST;

      ventana.OPEN(Text046 + Text047);
    END;

    PROCEDURE CierraVentana@1100253005();
    BEGIN
      // CierraVentana
      //

      // Funcion pensada para llamarse desde fuera de esta codeunit

      ventana.CLOSE;
    END;

    PROCEDURE RenumeraFact@1100253015(VAR prCab@1100253015 : Record 36);
    VAR
      lrLinVta@1100253003 : Record 37;
      lrLinVta2@1103355001 : Record 37;
      lrDim@1100253005 : Record 357;
      lrDim2@1103355000 : Record 357;
      lwNumAnt@1100253001 : Code[20];
      lwNuevoNum@1100253002 : Code[20];
    BEGIN
      // RenumeraFact
      // Renumeramos el numero de Factura
      // Para todos aquellos casos en que afecte a la clave primaria, se borrar  el registro y se crear  de nuevo
      // Ojo que no modificamos lineaa de Coste-ingreso ni TTOOxParte, eso se tendr  que hacera posteriori
      lwNumAnt   := prCab."No.";
      lwNuevoNum := cNoSeriesMgt.GetNextNo(prCab."No. Series", prCab."Posting Date", TRUE);

      // Lin Venta.
      CLEAR(lrLinVta);
      lrLinVta.SETRANGE("Document Type" , prCab."Document Type");
      lrLinVta.SETRANGE("Document No."  , lwNumAnt);
      IF lrLinVta.FINDSET(TRUE,TRUE) THEN BEGIN
        REPEAT
          lrLinVta2 := lrLinVta;
          lrLinVta2.DELETE;
          lrLinVta2."Document No." := lwNuevoNum;
          lrLinVta2.INSERT;
        UNTIL lrLinVta.NEXT=0;
      END;

      // Dimensiones
      CLEAR(lrDim);
      lrDim.LOCKTABLE;
      lrDim.SETRANGE("Table ID" ,  DATABASE::"Sales Header", DATABASE::"Sales Line");
      lrDim.SETRANGE("Document Type" , prCab."Document Type");
      lrDim.SETRANGE("Document No."  , lwNumAnt);
      IF lrDim.FINDSET(TRUE,TRUE) THEN BEGIN
        REPEAT
          lrDim2:=lrDim;
          lrDim2.DELETE;
          lrDim2."Document No." := lwNuevoNum;
          lrDim2.INSERT;
        UNTIL lrDim.NEXT=0;
      END;

      // Cabecera Venta.
      prCab.DELETE;
      prCab."No." := lwNuevoNum;
      prCab.INSERT;
    END;

    PROCEDURE NumTempFact@1100253012() : Code[20];
    VAR
      lwCod@1100253000 : Code[20];
    BEGIN
      // NumTempFact
      // Devuelve un numero de Factura temporal

      // En este caso proponemos los 14 primeros digitos del usuario + el numero de segundos del d¡a
      // Ha tener en cuenta que un d¡a tiene 86400 segundos
      // Le pongo el signo $ al principio para evitar codigos de usuario numericos

      CLEAR(lwCod);
      lwCod := STRSUBSTNO('$%1%2', COPYSTR(USERID,1,14) , FORMAT(ABS((000000T-TIME) DIV 1000),0,Text50001));
      EXIT(lwCod)
    END;

    PROCEDURE SetTextAlternativo@1103355001(VAR prTemp@1103355000 : TEMPORARY Record 7035394);
    BEGIN
      // SetTemp
      // Inserta el temporal (temporari de factura de texto alternativo)

      CLEAR(rTempTextAltr);
      rTempTextAltr.DELETEALL;

      IF prTemp.FINDSET THEN BEGIN
        REPEAT
          rTempTextAltr := prTemp;
          rTempTextAltr.INSERT;
        UNTIL prTemp.NEXT=0;
      END;
    END;

    PROCEDURE PasarPITemp@1103355003(VAR prPI@1103355000 : Record 7035392);
    BEGIN
      // PasarPITemp
      // Pasamos las lineas filtradas a temporal

      CLEAR(rTPI);
      rTPI.DELETEALL;

      IF prPI.FINDSET THEN BEGIN
        REPEAT
          rTPI := prPI;
          rTPI.INSERT;
        UNTIL prPI.NEXT=0;

        rTPI.FINDFIRST;
      END;
    END;

    PROCEDURE GetNoSerie@1103355004(prPI@1103355003 : Record 7035392;pwAbono@1103355002 : Boolean;pwAlternativa@1103355004 : Boolean) : Code[10];
    VAR
      lwCodSerie@1103355000 : Code[10];
      lrCon@1103355001 : Record 7010403;
    BEGIN
      // GetNoSerie
      // Devuelve el No de Serie que le toca seg£n los parametros introucidos
      // Sirve para la previsualizaci¢n previa a la facturaci¢n

      IF pwAlternativa THEN BEGIN
        rParAux.FINDFIRST;
        rParAux.TESTFIELD("Serie Alternativa");
        lwCodSerie := rParAux."Serie Alternativa";
      END
      ELSE BEGIN
        rPar.FINDFIRST;;
        // Buscamos el contrato
        CLEAR(lrCon);
        lrCon.SETFILTER(Garaje       , '%1|%2', prPI.Garaje, rPar."Todos los garajes");
        lrCon.SETRANGE ("N§ Contrato", prPI."N§ Contrato");
        IF lrCon.FINDFIRST THEN
          lwCodSerie := lrCon."Cod. Serie";
        IF lwCodSerie = '' THEN BEGIN
          rConfVta.FIND('-');
          IF pwAbono THEN
           lwCodSerie  := rConfVta."Credit Memo Nos."
          ELSE
            lwCodSerie  := rConfVta."Invoice Nos.";
        END;
      END;

      EXIT(lwCodSerie);
    END;

    PROCEDURE CambiaIva@1103355005(VAR prPI@1103355000 : Record 7035392;pwCodRegIVAProd@1103355001 : Code[10]);
    BEGIN
      // CambiaIva
      // Cambiamos el tipo del IVA de las lineas pasadas como parametro

      // Si no se ha establecido ning£n Codigo Registro IVA Producto salimos
      IF pwCodRegIVAProd='' THEN
        EXIT;

      IF prPI.FINDSET THEN BEGIN
        REPEAT
          prPI.VALIDATE("Grupo registro IVA Producto", pwCodRegIVAProd);
          prPI.MODIFY;
        UNTIL prPI.NEXT=0;
      END;
    END;

    PROCEDURE DesgloseLocalizadores@1103355007(VAR prCabTEMP@1103355001 : Record 7010415;VAR prLinTEMP@1103355004 : Record 7010417;prPI@1103355000 : Record 7035392);
    VAR
      lrSerPar@1103355002 : Record 7010359;
      lrZonas@1103355003 : Record 7010404;
      lrParte@1103355005 : Record 7010360;
      lrCon@1103355006 : Record 7010403;
    BEGIN
      // DesgloseLocalizadores

      // Vamos a buscar las lineas de recogida del parte, touroperador y zona de precios

      lrSerPar.RESET;
      lrSerPar.SETCURRENTKEY("N§ Parte");
      lrSerPar.SETRANGE("N§ Parte"  , prPI."N§ Parte");
      lrSerPar.SETRANGE(Touroperador, prPI.Touroperador);

      // AJS 12.06.2008
      // Eliminamos el filtro por zona venta
      //lrSerPar.SETRANGE("Zona Venta", prPI."Zona Precios");

      IF lrSerPar.FINDSET THEN BEGIN
        REPEAT

          // AJS 12.06.2008
          // Convertimos la zona fisica en zona venta para ver si aplica

          // AJS 02.07.2008
          // Para buscar la zona hay que tener en cuenta que un contrato puede estar basado en otro

          lrCon.RESET;
          lrCon.SETRANGE ("N§ Contrato", prPI."N§ Contrato");
          lrCon.FINDFIRST;

          lrZonas.SETRANGE("N§ Contrato"  , cCalculoPartes.NumeroContratoVentFacturacion(lrCon));
          lrZonas.SETRANGE("Tipo contrato", lrZonas."Tipo contrato"::Venta);
          lrZonas.SETRANGE("Codigo Origen", lrSerPar."Zona fisica");

          // AJS 28.06.2008
          // Filtramos en las zonas de precio por el tipo de servicio fijo

          lrZonas.SETRANGE("Tipo Servicio fijo", prPI."Tipo Servicio Fijo");

          lrZonas.FINDFIRST;

          // AJS 12.06.2008
          // Si en el parte se indica que se calcule como zona mas alejada no hay que
          // mirar la zona de precios ya que todas las zonas fisicas del parte se calculan
          // en una sola zona de precios

          lrParte.GET(prPI."N§ Parte");
          IF lrParte."Tipo Calculo Ingresos" = lrParte."Tipo Calculo Ingresos" THEN
            lrZonas."Zona Precio" := prPI."Zona Precios";

          IF lrZonas."Zona Precio" = prPI."Zona Precios" THEN BEGIN

            // AJS 12.06.2008
            // Solo podemos tener una linea por localizador/dia, se podrian duplicar
            // en aquellos casos que tengamos una reserva con adultos y ni¤os

            prLinTEMP.RESET;
            prLinTEMP.SETRANGE("N§ Prefactura", prCabTEMP."N§ Prefactura");
            prLinTEMP.SETRANGE(Parte          , prPI."N§ Parte");
            prLinTEMP.SETRANGE(Fecha          , prPI.Fecha);
            prLinTEMP.SETRANGE(Referencia     , lrSerPar.Reserva);

            IF prLinTEMP.ISEMPTY THEN BEGIN
              wNoLin += 10000;

              CLEAR(prLinTEMP);
              prLinTEMP."N§ Prefactura"        := prCabTEMP."N§ Prefactura";
              prLinTEMP."N§ Linea"             := wNoLin;
              prLinTEMP.Tipo                   := prLinTEMP.Tipo::Localizador;
              prLinTEMP.Garaje                 := prPI.Garaje;
              prLinTEMP.Parte                  := prPI."N§ Parte";
              prLinTEMP.Fecha                  := prPI.Fecha;
              prLinTEMP."Codigo Servicio"      := prPI."Codigo servicio";
              prLinTEMP.Vuelo                  := prPI.Vuelos;
              prLinTEMP.Zona                   := prPI."Zona Precios";
              prLinTEMP."Zona Trabajo"         := prPI."Zona facturacion";
              prLinTEMP."Tipo Servicio Fijo"   := prPI."Tipo Servicio Fijo";
              prLinTEMP.Touroperador           := prPI.Touroperador;

              // AJS 12.06.2008
              // Guardamos el tipo de persona para no repetir lineas de localizador en la impresion

              prLinTEMP."Cod Suplemento" := prPI."Tipo elemento";

              // AJS 12.06.2008
              // El concepto de facturacion es mas corto que el nombre de cliente
              // almacenamos en los pax la suma de adultos y ni¤os transportados

              prLinTEMP.Referencia             := lrSerPar.Reserva;
              prLinTEMP."Concepto facturacion" := COPYSTR(lrSerPar."Nombre Cliente", 1, MAXSTRLEN(prLinTEMP."Concepto facturacion"));
              prLinTEMP.Pax                    := lrSerPar."Adultos transportados";
              prLinTEMP."Ni¤os Facturados"     := lrSerPar."Ni¤os transportados";
              prLinTEMP.INSERT;
            END;
          END;
        UNTIL lrSerPar.NEXT = 0;
      END;
    END;

    BEGIN
    {
      $001 AJS 20012015 Ejecutar el proceso estandar de Lanzar factura

      $002 AJS 18022015 Ibizatours quiere que dejemos de pedir los comentarios de factura

      $003 AJS 03032015 Ibizatours vuelve a necesitar los comentarios al imprimir la factura
    }
    END.
  }
}
