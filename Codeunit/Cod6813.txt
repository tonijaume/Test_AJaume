OBJECT Codeunit 6813 EP Decode XML
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      XMLDOMMgt@1000000000 : Codeunit 6812;
      SupportFunctions@1000000002 : Codeunit 6815;
      FormatFunctions@1000000003 : Codeunit 6817;
      Text001@1000 : TextConst 'ENU=CU6813.FilterRecord - FilterString:\%1.;ESP=CU6813.FilterRecord - FilterString:\%1.';

    PROCEDURE GetXMLDocuments@1000000000(VAR XMLDocIn@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocFilters@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocData@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocStatic@1000000006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument") ReturnValue : Integer;
    VAR
      XMLNode@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // Splits the complete document into parts
      XMLNode := XMLDocIn.documentElement;

      // Create XML Documents For each Area in XMLDocIn
      // Static
      XMLDOMMgt.FindNode(XMLNode,'DOCUMENTINFO',XMLNodeFound);
      XMLDocStatic.documentElement(XMLNodeFound);

      // Filters
      XMLDOMMgt.FindNode(XMLNode,'FILTERS',XMLNodeFound);
      XMLDocFilters.documentElement(XMLNodeFound);

      // Data
      XMLDOMMgt.FindNode(XMLNode,'DATA',XMLNodeFound);
      XMLDocData.documentElement(XMLNodeFound);

      ReturnValue := 0;
    END;

    PROCEDURE FilterRecord@1000000001(VAR XMLDocFilters@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";TableNo@1000000000 : Integer;VAR MyRecordReference@1000000001 : RecordRef);
    VAR
      XMLNode@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeBkp@1000000012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeList@1000000013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNodeList";
      FilterString@1000000002 : Text[1024];
      FilterType@1000000006 : ' ,Sorting,Order,Const,Filter,AddEnd';
      FieldNoXML@1000000007 : Integer;
      ValueForFieldNoXML@1000000008 : Text[70];
      FieldName@1000000009 : Text[80];
      KeyField@1000000010 : Integer;
      KeyString@1000000011 : Text[1024];
    BEGIN
      // Set an Record Reference to an table, get the filters from filter part of the document and applys the filter to the Record Ref.
      // Options for FilterType: " ,Sorting,Order,Const,Filter,AddEnd"
      FilterString := '';
      XMLNode := XMLDocFilters.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNode,'FILTERGROUP',XMLNodeFound) THEN BEGIN
          XMLNode := XMLNodeFound;
          // Build the Key
          IF FindNodes(XMLNode,'KEYS/Key',XMLNodeList) THEN BEGIN
            XMLNodeBkp := XMLNode;
            XMLNodeList.reset;
            XMLNode := XMLNodeList.nextNode;
            WHILE NOT ISCLEAR(XMLNode) DO BEGIN
              KeyField := 0;
              FieldName := '';
              IF STRLEN(XMLNode.text) > 0 THEN
                KeyField := FormatFunctions.TextToInteger(XMLNode.text);
              SupportFunctions.GetFieldCaption(TableNo,KeyField,FieldName);
              KeyString := KeyString + FieldName + ',';
              XMLNode := XMLNodeList.nextNode;
            END;

            IF COPYSTR(KeyString,STRLEN(KeyString),1) = ',' THEN
              KeyString := COPYSTR(KeyString,1,(STRLEN(KeyString) - 1)); // Remove last character if equal to ","

            IF KeyString <> '' THEN
              SupportFunctions.BuildFilterString(FilterString,FilterType::Sorting,'',KeyString); // Generate the Key String
            XMLNode := XMLNodeBkp;
          END;

          // Set Sort Order
          IF FindNode(XMLNode,'SORTING',XMLNodeFound) THEN
            IF STRLEN(XMLNodeFound.text) > 0 THEN
              SupportFunctions.BuildFilterString(FilterString,FilterType::Order,'',XMLNodeFound.text);

          // Get Filter Fields and Values. Build WHERE Clause
          IF FindNodes(XMLNode,'FILTER',XMLNodeList) THEN BEGIN
            XMLNodeList.reset;
            XMLNode := XMLNodeList.nextNode;
            WHILE NOT ISCLEAR(XMLNode) DO BEGIN
              FieldNoXML := 0;
              ValueForFieldNoXML := '';
              IF FindNode(XMLNode,'FIELD',XMLNodeFound) THEN
                IF STRLEN(XMLNodeFound.text) > 0 THEN
                  FieldNoXML := FormatFunctions.TextToInteger(XMLNodeFound.text);
              IF FindNode(XMLNode,'VALUE',XMLNodeFound) THEN
                IF STRLEN(XMLNodeFound.text) > 0 THEN
                  ValueForFieldNoXML := XMLNodeFound.text;
              IF FieldNoXML <> 0 THEN BEGIN
                SupportFunctions.GetFieldCaption(TableNo,FieldNoXML,FieldName);
                IF NOT SupportFunctions.CheckStringForFilter(ValueForFieldNoXML) THEN
                  SupportFunctions.BuildFilterString(FilterString,FilterType::Const,FieldName,ValueForFieldNoXML)
                ELSE
                  SupportFunctions.BuildFilterString(FilterString,FilterType::Filter,FieldName,ValueForFieldNoXML);
              END;
              XMLNode := XMLNodeList.nextNode;
            END;
          END;
          // Add the correct String to the End of the Filter
          SupportFunctions.BuildFilterString(FilterString,FilterType::AddEnd,'','');
        END;
      END;

      IF SupportFunctions.CheckIfDebug THEN BEGIN
        MESSAGE(Text001,FilterString);
      END;

      // Open the Record to Filter and apply the Filter
      MyRecordReference.OPEN(TableNo,FALSE);
      MyRecordReference.SETVIEW(FilterString);
      IF MyRecordReference.FIND('-') THEN;
    END;

    PROCEDURE FilterRecordWithStandard@1000000019(VAR XMLDocFilters@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";TableNo@1000000000 : Integer;GroupCode@1000000016 : Code[20];ReqType@1000000017 : Code[20];VAR MyRecordReference@1000000001 : RecordRef);
    VAR
      EPGrpRTFilterKeys@1001 : Record 6833;
      EPGrpRTFilterFields@1000 : Record 6832;
      XMLNode@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeBkp@1000000012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeList@1000000013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNodeList";
      FilterString@1000000002 : Text[1024];
      FilterType@1000000006 : ' ,Sorting,Order,Const,Filter,AddEnd';
      FieldNoXML@1000000007 : Integer;
      ValueForFieldNoXML@1000000008 : Text[70];
      FieldName@1000000009 : Text[80];
      KeyField@1000000010 : Integer;
      KeyString@1000000011 : Text[1024];
      UseStandardSortOrder@1000000018 : Boolean;
      StandardSortOrder@1000000019 : Code[10];
    BEGIN
      // Set an Record Reference to an table, get the filters from standard filter for the Group/Request Type Combination and
      // filter part of the document and applys the filter to the Record Ref.
      // Options for FilterType: " ,Sorting,Order,Const,Filter,AddEnd"
      FilterString := '';
      UseStandardSortOrder := FALSE;

      // Get the Standard Filter for Group/Request Type
      SupportFunctions.GetStandGrpReqTypeFilterKeys(EPGrpRTFilterKeys,GroupCode,ReqType,TableNo);
      SupportFunctions.GetStandGrpReqTypeFilterFields(EPGrpRTFilterFields,GroupCode,ReqType,TableNo);

      XMLNode := XMLDocFilters.documentElement;
      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNode,'FILTERGROUP',XMLNodeFound) THEN BEGIN
          XMLNode := XMLNodeFound;
          IF FindNodes(XMLNode,'KEYS/Key',XMLNodeList) THEN BEGIN
            IF (XMLNodeList.length > 0) AND FindNode(XMLNode,'KEYS/KEY',XMLNodeFound) THEN BEGIN
              // Build the Key (From XML Part)
              XMLNodeBkp := XMLNode;
              XMLNodeList.reset;
              XMLNode := XMLNodeList.nextNode;
              WHILE NOT ISCLEAR(XMLNode) DO BEGIN
                KeyField := 0;
                FieldName := '';
                IF STRLEN(XMLNode.text) > 0 THEN
                  KeyField := FormatFunctions.TextToInteger(XMLNode.text);
                SupportFunctions.GetFieldCaption(TableNo,KeyField,FieldName);

                IF STRPOS(KeyString,FieldName) <= 0 THEN
                  KeyString := KeyString + FieldName + ',';

                XMLNode := XMLNodeList.nextNode;
              END;
              XMLNode := XMLNodeBkp;
            END ELSE BEGIN
              // Build the Key (Standard Filter)
              IF EPGrpRTFilterKeys.COUNT > 0 THEN BEGIN
                REPEAT
                  EPGrpRTFilterKeys.CALCFIELDS("Key Field Name");
                  KeyString := KeyString + EPGrpRTFilterKeys."Key Field Name" + ',';
                UNTIL EPGrpRTFilterKeys.NEXT = 0;
              END;
            END;
          END ELSE BEGIN
            // Build the Key (Standard Filter)
            IF EPGrpRTFilterKeys.COUNT > 0 THEN BEGIN
              REPEAT
                EPGrpRTFilterKeys.CALCFIELDS("Key Field Name");
                KeyString := KeyString + EPGrpRTFilterKeys."Key Field Name" + ',';
              UNTIL EPGrpRTFilterKeys.NEXT = 0;
            END;
          END;

          // Correct the KeyString
          IF KeyString <> '' THEN BEGIN
            IF COPYSTR(KeyString,STRLEN(KeyString),1) = ',' THEN
              KeyString := COPYSTR(KeyString,1,(STRLEN(KeyString) - 1)); // Remove last character if equal to ","
            SupportFunctions.BuildFilterString(FilterString,FilterType::Sorting,'',KeyString); // Generate the Key String
          END;

          // Set Sort Order (comes only from XML)
          IF FindNode(XMLNode,'SORTING',XMLNodeFound) THEN BEGIN
            IF STRLEN(XMLNodeFound.text) > 0 THEN BEGIN
              SupportFunctions.BuildFilterString(FilterString,FilterType::Order,'',XMLNodeFound.text);
            END ELSE BEGIN
              UseStandardSortOrder := TRUE;
            END;
          END ELSE BEGIN
            UseStandardSortOrder := TRUE;
          END;

          // If there was no Sort Order in the XML than use Standard Sort Order
          IF UseStandardSortOrder THEN BEGIN
            StandardSortOrder := SupportFunctions.GetSortOrderFromConfig(GroupCode,ReqType,TableNo);
            IF StandardSortOrder <> '' THEN
              SupportFunctions.BuildFilterString(FilterString,FilterType::Order,'',StandardSortOrder);
          END;

          IF FindNodes(XMLNode,'FILTER',XMLNodeList) THEN BEGIN
            IF (XMLNodeList.length > 0) AND FindNode(XMLNode,'FILTER/FIELD',XMLNodeFound) THEN BEGIN
              // Get Filter Fields and Values from XML. Build WHERE Clause
              XMLNodeList.reset;
              XMLNode := XMLNodeList.nextNode;
              WHILE NOT ISCLEAR(XMLNode) DO BEGIN
                FieldNoXML := 0;
                ValueForFieldNoXML := '';
                IF FindNode(XMLNode,'FIELD',XMLNodeFound) THEN
                  IF STRLEN(XMLNodeFound.text) > 0 THEN
                    FieldNoXML := FormatFunctions.TextToInteger(XMLNodeFound.text);
                IF FindNode(XMLNode,'VALUE',XMLNodeFound) THEN
                  IF STRLEN(XMLNodeFound.text) > 0 THEN
                    ValueForFieldNoXML := XMLNodeFound.text;
                IF FieldNoXML <> 0 THEN BEGIN
                  SupportFunctions.GetFieldCaption(TableNo,FieldNoXML,FieldName);
                  IF NOT SupportFunctions.CheckStringForFilter(ValueForFieldNoXML) THEN
                    SupportFunctions.BuildFilterString(FilterString,FilterType::Const,FieldName,ValueForFieldNoXML)
                  ELSE
                    SupportFunctions.BuildFilterString(FilterString,FilterType::Filter,FieldName,ValueForFieldNoXML);
                END;
                XMLNode := XMLNodeList.nextNode;
              END;
            END ELSE BEGIN
              // Get Filter Fields and Values (Standard). Build WHERE Clause
              IF EPGrpRTFilterFields.COUNT > 0 THEN BEGIN
                REPEAT
                  EPGrpRTFilterFields.CALCFIELDS("Filter Field Name");
                  IF NOT SupportFunctions.CheckStringForFilter(EPGrpRTFilterFields."Filter Field Value") THEN
                    SupportFunctions.BuildFilterString(FilterString,FilterType::Const,EPGrpRTFilterFields."Filter Field Name",
                      EPGrpRTFilterFields."Filter Field Value")
                  ELSE
                    SupportFunctions.BuildFilterString(FilterString,FilterType::Filter,EPGrpRTFilterFields."Filter Field Name",
                      EPGrpRTFilterFields."Filter Field Value")
                UNTIL EPGrpRTFilterFields.NEXT = 0;
              END;
            END;
          END ELSE BEGIN
            // Get Filter Fields and Values (Standard). Build WHERE Clause
            IF EPGrpRTFilterFields.COUNT > 0 THEN BEGIN
              REPEAT
                EPGrpRTFilterFields.CALCFIELDS("Filter Field Name");
                IF NOT SupportFunctions.CheckStringForFilter(EPGrpRTFilterFields."Filter Field Value") THEN
                  SupportFunctions.BuildFilterString(FilterString,FilterType::Const,EPGrpRTFilterFields."Filter Field Name",
                    EPGrpRTFilterFields."Filter Field Value")
                ELSE
                  SupportFunctions.BuildFilterString(FilterString,FilterType::Filter,EPGrpRTFilterFields."Filter Field Name",
                    EPGrpRTFilterFields."Filter Field Value")
              UNTIL EPGrpRTFilterFields.NEXT = 0;
            END;
          END;

          // Add the correct String to the End of the Filter
          SupportFunctions.BuildFilterString(FilterString,FilterType::AddEnd,'','');
        END ELSE BEGIN
          // No Filters defined in XML -> Use Standard Filter

          // Build the Key (Standard Filter)
          IF EPGrpRTFilterKeys.COUNT > 0 THEN BEGIN
            REPEAT
              EPGrpRTFilterKeys.CALCFIELDS("Key Field Name");
              KeyString := KeyString + EPGrpRTFilterKeys."Key Field Name" + ',';
            UNTIL EPGrpRTFilterKeys.NEXT = 0;
          END;

          // Correct the KeyString
          IF KeyString <> '' THEN BEGIN
            IF COPYSTR(KeyString,STRLEN(KeyString),1) = ',' THEN
              KeyString := COPYSTR(KeyString,1,(STRLEN(KeyString) - 1)); // Remove last character if equal to ","
            SupportFunctions.BuildFilterString(FilterString,FilterType::Sorting,'',KeyString); // Generate the Key String
          END;

          // Get Filter Fields and Values (Standard). Build WHERE Clause
          IF EPGrpRTFilterFields.COUNT > 0 THEN BEGIN
            REPEAT
              EPGrpRTFilterFields.CALCFIELDS("Filter Field Name");
              IF NOT SupportFunctions.CheckStringForFilter(EPGrpRTFilterFields."Filter Field Value") THEN
                SupportFunctions.BuildFilterString(FilterString,FilterType::Const,EPGrpRTFilterFields."Filter Field Name",
                  EPGrpRTFilterFields."Filter Field Value")
              ELSE
                SupportFunctions.BuildFilterString(FilterString,FilterType::Filter,EPGrpRTFilterFields."Filter Field Name",
                  EPGrpRTFilterFields."Filter Field Value")
            UNTIL EPGrpRTFilterFields.NEXT = 0;
          END;

          // Add the correct String to the End of the Filter
          SupportFunctions.BuildFilterString(FilterString,FilterType::AddEnd,'','');

        END;
      END;

      IF SupportFunctions.CheckIfDebug THEN BEGIN
        MESSAGE(Text001,FilterString);
      END;

      // Open the Record to Filter and apply the Filter
      MyRecordReference.OPEN(TableNo,FALSE);
      MyRecordReference.SETVIEW(FilterString);
      IF MyRecordReference.FIND('-') THEN;
    END;

    PROCEDURE ModifyRecord@1000000003(VAR XMLDocData@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR MyRecordReference@1000000001 : RecordRef;VAR XMLDocValiField@1000000016 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";TableNo@1000000009 : Integer;Head@1000000002 : Boolean;Line@1000000000 : Boolean;GroupCode@1000000013 : Code[20];RequestType@1000000014 : Code[20]);
    VAR
      MyFieldRef@1000 : FieldRef;
      XMLNode@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNode2@1000000010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound2@1000000012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeList@1000000015 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNodeList";
      XMLNodeList2@1000000011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNodeList";
      FieldNoXML@1000000007 : Integer;
      ValueForFieldNoXML@1000000006 : Text[1024];
    BEGIN
      // Get the Data from data part of the inbound XML document and modify the data of the Record Ref with the Data in the data part of
      // the XML document
      IF MyRecordReference.FIND('-') THEN;

      XMLNode := XMLDocData.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF Head THEN BEGIN
          IF FindNode(XMLNode,'FIELDS_HEADDATA',XMLNodeFound) THEN BEGIN
            XMLNode := XMLNodeFound;
            IF FindNodes(XMLNode,'FIELD_HEADDATA',XMLNodeList) THEN BEGIN
              XMLNodeList.reset;
              XMLNode := XMLNodeList.nextNode;
              WHILE NOT ISCLEAR(XMLNode) DO BEGIN
                FieldNoXML := 0;
                ValueForFieldNoXML := '';
                IF FindNode(XMLNode,'ID',XMLNodeFound) THEN
                  IF STRLEN(XMLNodeFound.text) > 0 THEN
                    FieldNoXML := FormatFunctions.TextToInteger(XMLNodeFound.text);
                IF FindNode(XMLNode,'VALUE',XMLNodeFound) THEN
                  IF STRLEN(XMLNodeFound.text) > 0 THEN
                    ValueForFieldNoXML := XMLNodeFound.text;
                MyFieldRef := MyRecordReference.FIELD(FieldNoXML);
                IF CheckFieldValReq(XMLDocValiField,FieldNoXML) THEN
                  SupportFunctions.ModifylFieldRef(TableNo,FieldNoXML,ValueForFieldNoXML,GroupCode,RequestType,MyFieldRef)
                ELSE
                  SupportFunctions.ModifylFieldRefWithoutValidate(TableNo,FieldNoXML,ValueForFieldNoXML,GroupCode,RequestType,
                    MyFieldRef);
                XMLNode := XMLNodeList.nextNode;
              END;
            END;
            MyRecordReference.MODIFY;
          END;
        END;
        IF Line THEN BEGIN
          IF FindNode(XMLNode,'FIELDS_LINEDATA',XMLNodeFound) THEN BEGIN
            XMLNode2 := XMLNodeFound;
            IF FindNodes(XMLNode2,'FIELD_LINEDATA',XMLNodeList2) THEN BEGIN
              XMLNodeList2.reset;
              XMLNode2 := XMLNodeList2.nextNode;
              WHILE NOT ISCLEAR(XMLNode2) DO BEGIN
                FieldNoXML := 0;
                ValueForFieldNoXML := '';
                IF FindNode(XMLNode2,'ID',XMLNodeFound2) THEN
                  IF STRLEN(XMLNodeFound2.text) > 0 THEN
                    FieldNoXML := FormatFunctions.TextToInteger(XMLNodeFound2.text);
                IF FindNode(XMLNode2,'VALUE',XMLNodeFound2) THEN
                  IF STRLEN(XMLNodeFound2.text) > 0 THEN
                    ValueForFieldNoXML := XMLNodeFound2.text;
                MyFieldRef := MyRecordReference.FIELD(FieldNoXML);
                IF CheckFieldValReq(XMLDocValiField,FieldNoXML) THEN
                  SupportFunctions.ModifylFieldRef(TableNo,FieldNoXML,ValueForFieldNoXML,GroupCode,RequestType,MyFieldRef)
                ELSE
                  SupportFunctions.ModifylFieldRefWithoutValidate(TableNo,FieldNoXML,ValueForFieldNoXML,GroupCode,RequestType,
                    MyFieldRef);
                XMLNode2 := XMLNodeList2.nextNode;
              END;
            END;
            MyRecordReference.MODIFY(TRUE);
          END;

        END;
      END;
    END;

    PROCEDURE GetUserID@1000000002(VAR XMLDocStatic@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR UserID@1000000001 : Code[50]);
    VAR
      XMLNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // Get the UserID from static Value Part of the document
      XMLNode := XMLDocStatic.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNode,'USERID',XMLNodeFound) THEN
          IF STRLEN(XMLNodeFound.text) > 0 THEN
            UserID := XMLNodeFound.text;
      END;
    END;

    PROCEDURE GetUserIDFromIn@1000000004(VAR XMLDocIn@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR UserID@1000000001 : Code[50]);
    VAR
      XMLNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // Get the UserID from static Value Part of the document
      XMLNode := XMLDocIn.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNode,'DOCUMENTINFO',XMLNodeFound) THEN BEGIN
          XMLNode := XMLNodeFound;
          IF FindNode(XMLNode,'USERID',XMLNodeFound) THEN
            IF STRLEN(XMLNodeFound.text) > 0 THEN
              UserID := XMLNodeFound.text;
        END;
      END;
    END;

    PROCEDURE GetGroup@2(VAR XMLDocInStatic@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR Group@1000000001 : Code[20]);
    VAR
      XMLNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // Get the GroupID from static Value Part of the document
      XMLNode := XMLDocInStatic.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNode,'GROUP',XMLNodeFound) THEN
          IF STRLEN(XMLNodeFound.text) > 0 THEN
            Group := XMLNodeFound.text;
      END;
    END;

    PROCEDURE GetGroupFromIn@1(VAR XMLDocIn@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR Group@1000000001 : Code[20]);
    VAR
      XMLNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // Get the GroupID from static Value Part of the document
      XMLNode := XMLDocIn.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNode,'DOCUMENTINFO',XMLNodeFound) THEN BEGIN
          XMLNode := XMLNodeFound;
          IF FindNode(XMLNode,'GROUP',XMLNodeFound) THEN
            IF STRLEN(XMLNodeFound.text) > 0 THEN
              Group := XMLNodeFound.text;
        END;
      END;
    END;

    PROCEDURE GetRequestTypeStatic@1000000016(VAR XMLDocStatic@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR RequestType@1000000001 : Code[50]);
    VAR
      XMLNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // Get Request Type from static Value Part of the document
      XMLNode := XMLDocStatic.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNode,'REQUESTTYPE',XMLNodeFound) THEN
          IF STRLEN(XMLNodeFound.text) > 0 THEN
            RequestType := XMLNodeFound.text;
      END;
    END;

    PROCEDURE GetReportIDFromStatic@1000000020(VAR XMLDocStatic@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR ReportID@1000000001 : Integer);
    VAR
      XMLNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // Get ReportID from static Value Part of the document
      XMLNode := XMLDocStatic.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNode,'REPORT_NO',XMLNodeFound) THEN
          IF STRLEN(XMLNodeFound.text) > 0 THEN
            ReportID := FormatFunctions.TextToInteger(XMLNodeFound.text);
      END;
    END;

    PROCEDURE GetRequestTypeFromIn@1000000017(VAR XMLDocIn@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR RequestType@1000000001 : Code[20]);
    VAR
      XMLNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // Get Request Type from complete document
      XMLNode := XMLDocIn.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNode,'DOCUMENTINFO/REQUESTTYPE',XMLNodeFound) THEN
          IF STRLEN(XMLNodeFound.text) > 0 THEN
            RequestType := XMLNodeFound.text;
      END;
    END;

    PROCEDURE GetGUIDFromIn@1000000005(VAR XMLDocIn@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR GUID@1000000001 : Text[50]);
    VAR
      XMLNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // Get the GUID of the Message from complete document
      XMLNode := XMLDocIn.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNode,'GUID',XMLNodeFound) THEN
          IF STRLEN(XMLNodeFound.text) > 0 THEN
            GUID := XMLNodeFound.text;
      END;
    END;

    PROCEDURE GetPagingOptionsFromStatic@1000000034(VAR XMLDocStatic@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR StartRecord@1000000001 : Integer;VAR RecordsToShow@1000000002 : Integer);
    VAR
      XMLNode@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // Get the Number of the Start-Record and the Count of Records to show from Static XML Part
      XMLNode := XMLDocStatic.documentElement;

      RecordsToShow := 0;
      StartRecord := 0;

      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNode,'ROWCOUNT',XMLNodeFound) THEN
          IF STRLEN(XMLNodeFound.text) > 0 THEN
            RecordsToShow := FormatFunctions.TextToInteger(XMLNodeFound.text);
        IF FindNode(XMLNode,'INITCOUNT',XMLNodeFound) THEN
          IF STRLEN(XMLNodeFound.text) > 0 THEN
            StartRecord := FormatFunctions.TextToInteger(XMLNodeFound.text);
      END;
    END;

    PROCEDURE GetTableNoFromStatic@1000000006(VAR TableNo@1000000003 : Integer;VAR XMLDocStatic@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      XMLNode@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // Get the Table-Number from Static Part
      XMLNode := XMLDocStatic.documentElement;

      TableNo := 0;

      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNode,'TABLE_NO',XMLNodeFound) THEN
          IF STRLEN(XMLNodeFound.text) > 0 THEN
            TableNo := FormatFunctions.TextToInteger(XMLNodeFound.text);
      END;
    END;

    PROCEDURE GetFieldNoDocInfo@3(VAR XMLDocInfo@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR FieldNo@1000000003 : Integer);
    VAR
      XMLNode@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      XMLNode := XMLDocInfo.documentElement;

      FieldNo := 0;
      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNode,'FIELD_NO',XMLNodeFound) THEN
          IF STRLEN(XMLNodeFound.text) > 0 THEN
            FieldNo := FormatFunctions.TextToInteger(XMLNodeFound.text);
      END;
    END;

    PROCEDURE GetOrgRequestTypeFromStatic@1000000009(VAR OrgRequestType@1000000003 : Code[20];VAR XMLDocStatic@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      XMLNode@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // Get the Origin RequestType from Static Part
      XMLNode := XMLDocStatic.documentElement;

      OrgRequestType := '';

      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNode,'ORG_REQUESTTYPE',XMLNodeFound) THEN
          IF STRLEN(XMLNodeFound.text) > 0 THEN
            OrgRequestType := XMLNodeFound.text;
      END;
    END;

    PROCEDURE GetNewHeadStandardFields@1000000007(VAR XMLDocNewHead@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocStatic@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      XMLNode@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // Get the Table-Number from Static Part
      XMLNode := XMLDocStatic.documentElement;

      XMLDOMMgt.FindNode(XMLNode,'NEW_HEAD_STANDARD_FIELDS',XMLNodeFound);
      XMLDocNewHead.documentElement(XMLNodeFound);
    END;

    PROCEDURE BuildTempNewHeadFieldTable@1000000008(VAR XMLDocNewHead@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000001 : Text[50];VAR EPTempNewHeadFields@1000000002 : Record 6825);
    VAR
      XMLNode@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeList@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNodeList";
      NextEntryNo@1000000006 : Integer;
    BEGIN
      // Get the Fields for a new Head Record from XML and put them into a table
      XMLNode := XMLDocNewHead.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF FindNodes(XMLNode,'NEW_HEAD_STANDARD_FIELD',XMLNodeList) THEN BEGIN
          XMLNodeList.reset;
          XMLNode := XMLNodeList.nextNode;
          WHILE NOT ISCLEAR(XMLNode) DO BEGIN
            EPTempNewHeadFields.RESET;
            EPTempNewHeadFields.SETRANGE("Apply-to XML Element",EPTempNewHeadFields."Apply-to XML Element"::NewHead);
            EPTempNewHeadFields.SETRANGE(GUID,GUID);
            IF EPTempNewHeadFields.FIND('+') THEN
              NextEntryNo := EPTempNewHeadFields."Entry No." + 1
            ELSE
              NextEntryNo := 1;

            EPTempNewHeadFields.INIT;
            EPTempNewHeadFields."Entry No." := NextEntryNo;
            EPTempNewHeadFields."Apply-to XML Element" := EPTempNewHeadFields."Apply-to XML Element"::NewHead;
            EPTempNewHeadFields.GUID := GUID;
            IF FindNode(XMLNode,'FIELD_ID',XMLNodeFound) THEN
              IF STRLEN(XMLNodeFound.text) > 0 THEN
                EPTempNewHeadFields."Field No." := FormatFunctions.TextToInteger(XMLNodeFound.text);
            IF FindNode(XMLNode,'FIELD_VALUE',XMLNodeFound) THEN
              IF STRLEN(XMLNodeFound.text) > 0 THEN
                EPTempNewHeadFields.Value := XMLNodeFound.text;
            EPTempNewHeadFields.INSERT;
            XMLNode := XMLNodeList.nextNode;
          END;
        END;
      END;
    END;

    PROCEDURE GetHeadDataFromData@1000000010(XMLDocInData@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocInHeadData@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      XMLNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // Extract the HEADDATA Information from Data
      XMLNode := XMLDocInData.documentElement;

      XMLDOMMgt.FindNode(XMLNode,'HEADDATA',XMLNodeFound);
      XMLDocInHeadData.documentElement(XMLNodeFound);
    END;

    PROCEDURE GetSingleLineDataFromData@1000000012(VAR XMLDocInData@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocInLineData@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";FieldNo@1000000005 : Integer;Value@1000000007 : Text[200];OnlyFirstLine@1000000009 : Boolean) : Boolean;
    VAR
      XMLNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeListLine@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNodeList";
      XMLNodeListFields@1000000006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNodeList";
      XMLNodeCurrDataLine@1000000008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // Extract an single Line defined by LineNumber
      XMLNode := XMLDocInData.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNode,'LINEDATA',XMLNodeFound) THEN BEGIN
          XMLNode := XMLNodeFound;
          IF FindNode(XMLNode,'DATALINES',XMLNodeFound) THEN BEGIN
            XMLNode := XMLNodeFound;
            IF FindNodes(XMLNode,'DATALINE',XMLNodeListLine) THEN BEGIN
              XMLNodeListLine.reset;
              XMLNode := XMLNodeListLine.nextNode;
              IF NOT OnlyFirstLine THEN BEGIN
                WHILE NOT ISCLEAR(XMLNode) DO BEGIN
                  XMLNodeCurrDataLine := XMLNode;
                  IF FindNode(XMLNode,'FIELDS_LINEDATA',XMLNodeFound) THEN BEGIN
                    XMLNode := XMLNodeFound;
                    IF FindNodes(XMLNode,'FIELD_LINEDATA',XMLNodeListFields) THEN BEGIN
                      XMLNodeListFields.reset;
                      XMLNode := XMLNodeListFields.nextNode;
                      WHILE NOT ISCLEAR(XMLNode) DO BEGIN
                        IF FindNode(XMLNode,'ID',XMLNodeFound) THEN
                          IF FormatFunctions.TextToInteger(XMLNodeFound.text) = FieldNo THEN
                            IF FindNode(XMLNode,'VALUE',XMLNodeFound) THEN
                              IF XMLNodeFound.text = Value THEN
                                XMLDocInLineData.documentElement(XMLNodeCurrDataLine);
                        XMLNode := XMLNodeListFields.nextNode;
                      END;
                    END;
                  END;
                  XMLNode := XMLNodeListLine.nextNode;
                END;
              END ELSE BEGIN
                // Get the First DATALINE Item
                XMLDocInLineData.documentElement(XMLNode);
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE GetValueByFieldIDFromHeadData@1000000011(VAR XMLDocInHead@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";FieldNo@1000000004 : Integer) : Text[1024];
    VAR
      XMLNode@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeList@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNodeList";
    BEGIN
      XMLNode := XMLDocInHead.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNode,'FIELDS_HEADDATA',XMLNodeFound) THEN BEGIN
          XMLNode := XMLNodeFound;
          IF FindNodes(XMLNode,'FIELD_HEADDATA',XMLNodeList) THEN BEGIN
            XMLNodeList.reset;
            XMLNode := XMLNodeList.nextNode;
            WHILE NOT ISCLEAR(XMLNode) DO BEGIN
              IF FindNode(XMLNode,'ID',XMLNodeFound) THEN
                IF STRLEN(XMLNodeFound.text) > 0 THEN
                  IF FormatFunctions.TextToInteger(XMLNodeFound.text) = FieldNo THEN BEGIN
                    IF FindNode(XMLNode,'VALUE',XMLNodeFound) THEN
                      EXIT(XMLNodeFound.text);
                  END;
              XMLNode := XMLNodeList.nextNode;
            END;
          END;
        END;
      END;

      EXIT('ERROR');
    END;

    PROCEDURE GetValueByFieldIDFromLineData@1000000013(VAR XMLDocInLine@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";FieldNo@1000000004 : Integer) : Text[1024];
    VAR
      XMLNode@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeList@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNodeList";
    BEGIN
      XMLNode := XMLDocInLine.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNode,'FIELDS_LINEDATA',XMLNodeFound) THEN BEGIN
          XMLNode := XMLNodeFound;
          IF FindNodes(XMLNode,'FIELD_LINEDATA',XMLNodeList) THEN BEGIN
            XMLNodeList.reset;
            XMLNode := XMLNodeList.nextNode;
            WHILE NOT ISCLEAR(XMLNode) DO BEGIN
              IF FindNode(XMLNode,'ID',XMLNodeFound) THEN
                IF STRLEN(XMLNodeFound.text) > 0 THEN
                  IF FormatFunctions.TextToInteger(XMLNodeFound.text) = FieldNo THEN BEGIN
                    IF FindNode(XMLNode,'VALUE',XMLNodeFound) THEN
                      EXIT(XMLNodeFound.text);
                  END;
              XMLNode := XMLNodeList.nextNode;
            END;
          END;
        END;
      END;

      EXIT('ERROR');
    END;

    PROCEDURE GetStaticXML@1000000015(VAR XMLDocIn@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocStatic@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument") ReturnValue : Integer;
    VAR
      XmlNode@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XmlNodeFound@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // extract static xml fragment from xml document
      XmlNode := XMLDocIn.documentElement;

      // Create XML Document For Static Area in XMLDocIn
      XMLDOMMgt.FindNode(XmlNode,'DOCUMENTINFO',XmlNodeFound);
      XMLDocStatic.documentElement(XmlNodeFound);

      ReturnValue := 0;
    END;

    PROCEDURE GetRTLType@1000000018(VAR XMLDocInStatic@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR RTLType@1000000001 : Integer);
    VAR
      XmlNode@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XmlNodeFound@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // Get the Request Type List-Type from static Value Part of the document
      XmlNode := XMLDocInStatic.documentElement;
      RTLType := 1; // init value (for head)
      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XmlNode,'TYPE',XmlNodeFound) THEN
          IF STRLEN(XmlNodeFound.text) > 0 THEN
            RTLType := FormatFunctions.TextToInteger(XmlNodeFound.text);
      END;
    END;

    PROCEDURE CheckFieldValReq@1000000022(VAR XMLDocValiField@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";SearchForField@1000000004 : Integer) : Boolean;
    VAR
      XmlNode@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeList@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNodeList";
    BEGIN
      XmlNode := XMLDocValiField.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF FindNodes(XmlNode,'FIELD',XMLNodeList) THEN BEGIN
          XMLNodeList.reset;
          XmlNode := XMLNodeList.nextNode;
          WHILE NOT ISCLEAR(XmlNode) DO BEGIN
            IF STRLEN(XmlNode.text) > 0 THEN
              IF FormatFunctions.TextToInteger(XmlNode.text) = SearchForField THEN
                EXIT(TRUE);
            XmlNode := XMLNodeList.nextNode;
          END;
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE GetSearchValue@4(VAR XMLDocInfo@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument") SearchValue : Text[80];
    VAR
      XmlNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XmlNodeFound@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      XmlNode := XMLDocInfo.documentElement;
      SearchValue := '';
      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XmlNode,'SEARCHVALUE',XmlNodeFound) THEN
          IF STRLEN(XmlNodeFound.text) > 0 THEN
            SearchValue := XmlNodeFound.text;
      END;
    END;

    PROCEDURE GetSearchTable@5(VAR XMLDocInfo@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument") TableNo : Integer;
    VAR
      XmlNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XmlNodeFound@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      XmlNode := XMLDocInfo.documentElement;
      TableNo := -1;
      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XmlNode,'TABLE_NO',XmlNodeFound) THEN
          IF STRLEN(XmlNodeFound.text) > 0 THEN
            TableNo := FormatFunctions.TextToInteger(XmlNodeFound.text);
      END;
    END;

    PROCEDURE GetSearchLines@6(VAR XMLDocInfo@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument") Lines : Integer;
    VAR
      XmlNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XmlNodeFound@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      XmlNode := XMLDocInfo.documentElement;
      Lines := -1;
      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XmlNode,'ALL_LINES',XmlNodeFound) THEN
          IF STRLEN(XmlNodeFound.text) > 0 THEN
            Lines := FormatFunctions.TextToInteger(XmlNodeFound.text);
      END;
    END;

    PROCEDURE GetHashValue@7(VAR XMLDoc@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument") HashValue : Integer;
    VAR
      XmlNode@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XmlNodeFound@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      XmlNode := XMLDoc.documentElement;
      IF XMLDOMMgt.FindNode(XmlNode,'//HASHVALUE',XmlNodeFound) THEN
        IF STRLEN(XmlNodeFound.text) > 0 THEN
          HashValue := FormatFunctions.TextToInteger(XmlNodeFound.text);
    END;

    PROCEDURE GetMsgPart@1000000023(VAR XMLDocIn@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocMsg@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument") : Boolean;
    VAR
      XMLNode@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      XMLNode := XMLDocIn.documentElement;

      XMLDOMMgt.FindNode(XMLNode,'MSG',XMLNodeFound);
      IF ISCLEAR(XMLNodeFound) THEN
        EXIT(FALSE);

      XMLDocMsg.documentElement(XMLNodeFound);

      EXIT(TRUE);
    END;

    PROCEDURE GetSignPart@1000000024(VAR XMLDocIn@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocSign@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument") : Boolean;
    VAR
      XMLNode@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      XMLNode := XMLDocIn.documentElement;

      XMLDOMMgt.FindNode(XMLNode,'SIGN',XMLNodeFound);
      IF ISCLEAR(XMLNodeFound) THEN
        EXIT(FALSE);

      XMLDocSign.documentElement(XMLNodeFound);

      EXIT(TRUE);
    END;

    PROCEDURE GetSymKeyPart@1000000025(VAR XMLDocIn@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocSymKey@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocInitVector@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";XMLKeyPath@1001 : Text[10];XMLInitVectorPath@1002 : Text[20]) : Boolean;
    VAR
      XMLNode@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      XMLNode := XMLDocIn.documentElement;

      XMLDOMMgt.FindNode(XMLNode,XMLKeyPath,XMLNodeFound);
      IF ISCLEAR(XMLNodeFound) THEN
        EXIT(FALSE);

      XMLDocSymKey.documentElement(XMLNodeFound);

      XMLDOMMgt.FindNode(XMLNode,XMLInitVectorPath,XMLNodeFound);
      IF ISCLEAR(XMLNodeFound) THEN
        EXIT(FALSE);

      XMLDocInitVector.documentElement(XMLNodeFound);

      EXIT(TRUE);
    END;

    PROCEDURE GetPartnerID@1000000026(VAR XMLDocIn@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR PartnerID@1000000001 : Text[50]);
    VAR
      XMLNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      PartnerID := '';
      XMLNode := XMLDocIn.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNode,'PARTNERID',XMLNodeFound) THEN
          IF STRLEN(XMLNodeFound.text) > 0 THEN
            PartnerID := XMLNodeFound.text;
      END;
    END;

    BEGIN
    END.
  }
}
