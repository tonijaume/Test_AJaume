OBJECT Codeunit 7010072 Cotizacion extras ingreso
{
  OBJECT-PROPERTIES
  {
    Date=02/10/12;
    Time=12:00:00;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      cVarias@1103355000 : Codeunit 7009720;
      cCotCom@1103355001 : Codeunit 7009913;
      cCalRes@1103355002 : Codeunit 7009707;
      Text001@1103355003 : TextConst 'ENU=EXTRAFIXEDS;ESP=EXTRAFIJOV';
      Text002@1103355004 : TextConst 'ENU=EXTRAVARIV;ESP=EXTRAVARIV';

    PROCEDURE CacularExtras@1103355014(VAR prCabCot@1103355007 : Record 7009871;VAR prCabCal@1103355001 : TEMPORARY Record 7009735;VAR prHoteles@1103355010 : TEMPORARY Record 7009873;VAR prContratos@1103355012 : TEMPORARY Record 7009873;VAR prHabitaciones@1103355013 : TEMPORARY Record 7009873;VAR prPersonas@1103355011 : TEMPORARY Record 7009873;VAR prExtras@1103355014 : TEMPORARY Record 7009873);
    VAR
      lrPersoAux@1103355006 : TEMPORARY Record 7009873;
    BEGIN
      // CalcularExtras

      cCotCom.CopiarListaPersonas(prPersonas, lrPersoAux);

      CalcularExtrasFijos(prCabCal, prHabitaciones, prPersonas, lrPersoAux, DT2DATE(prCabCot."Fecha creacion"));
      CalcularExtrasVariables(prCabCal, prHabitaciones, prExtras, lrPersoAux, DT2DATE(prCabCot."Fecha creacion"));
    END;

    LOCAL PROCEDURE CalcularExtrasVariables@1103355006(VAR prCabCal@1103355006 : TEMPORARY Record 7009735;VAR prHabs@1103355000 : TEMPORARY Record 7009873;VAR prExtrasVar@1103355007 : TEMPORARY Record 7009873;VAR prPersosAux@1103355002 : Record 7009873;pwFechaVenta@1103355003 : Date);
    VAR
      lrPrevTMP@1103355004 : TEMPORARY Record 7009732;
      lrPersHab@1103355005 : TEMPORARY Record 2000000007;
    BEGIN
      // CalcularExtrasVariables

      prHabs.RESET;

      IF prHabs.FINDSET THEN BEGIN

        REPEAT

          IF prHabs."Aplicacion ingreso manual" IN [0,3] THEN BEGIN

            BuscarPrecios(prHabs, lrPrevTMP, pwFechaVenta, prHabs."Fecha fin", FALSE);
            cVarias.IniciarPeriodo(lrPersHab, prHabs."Fecha inicio", prHabs."Fecha fin");

            prExtrasVar.RESET;
            prExtrasVar.SETRANGE(Habitacion, prHabs.Habitacion);
            prExtrasVar.SETRANGE(Contrato  , prHabs.Contrato);

            IF prExtrasVar.FINDSET THEN BEGIN
              REPEAT

                BuscarExtraVariable(prCabCal, lrPrevTMP, prExtrasVar, lrPersHab, prPersosAux, pwFechaVenta);

              UNTIL prExtrasVar.NEXT = 0;
            END;
          END;

        UNTIL prHabs.NEXT = 0;

      END;
    END;

    LOCAL PROCEDURE CalcularExtrasFijos@1103355007(VAR prCab@1103355007 : TEMPORARY Record 7009735;VAR prHabs@1103355003 : TEMPORARY Record 7009873;VAR prPersos@1103355002 : TEMPORARY Record 7009873;VAR prPersosAux@1103355001 : Record 7009873;pwFechaVenta@1103355000 : Date);
    VAR
      lrPrevTMP@1103355005 : TEMPORARY Record 7009732;
      lrPersHab@1103355004 : TEMPORARY Record 2000000007;
      lrPersRes@1103355006 : TEMPORARY Record 2000000007;
    BEGIN
      // CalcularExtrasFijos

      prHabs.RESET;

      IF prHabs.FINDSET THEN BEGIN
        REPEAT

          IF prHabs."Aplicacion ingreso manual" IN [0,3] THEN BEGIN

            BuscarPrecios(prHabs, lrPrevTMP, pwFechaVenta, prHabs."Fecha fin", TRUE);
            cVarias.IniciarPeriodo(lrPersHab,prHabs."Fecha inicio", prHabs."Fecha fin");

            prPersos.RESET;
            prPersos.SETRANGE(Habitacion, prHabs.Habitacion);
            prPersos.SETRANGE(Contrato  , prHabs.Contrato);
            IF prPersos.FINDSET THEN BEGIN
              REPEAT

                FiltrarPrecios(lrPrevTMP, prPersos.Habitacion, prPersos.Regimen,
                               prPersos.Responsable, prPersos."N§ Persona", '');

                IF lrPrevTMP.FINDSET THEN BEGIN
                  REPEAT

                    IF ComprobarCriteriosAplicacion(prPersos, prPersosAux, lrPrevTMP, lrPersHab, lrPersRes, pwFechaVenta) THEN
                      AplicarExtra(prCab, prPersos, lrPrevTMP, lrPersHab, lrPersRes, Text001);

                  UNTIL lrPrevTMP.NEXT = 0;
                END;

              UNTIL prPersos.NEXT = 0;
            END;

          END;
        UNTIL prHabs.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE BuscarPrecios@1103355011(VAR prHabitacion@1103355004 : Record 7009873;VAR prPreV@1103355000 : TEMPORARY Record 7009732;pwFechaIni@1103355002 : Date;pwFechaFin@1103355003 : Date;pwAplicacionFija@1103355005 : Boolean);
    VAR
      lrPreV@1103355001 : Record 7009732;
    BEGIN
      // BuscarPrecios

      prPreV.RESET;
      prPreV.DELETEALL;

      lrPreV.RESET;
      lrPreV.SETCURRENTKEY(Delegacion   , "N§ Contrato", "Codigo Precio", Codigo,
                           "Fecha desde", "Fecha hasta", "Edad desde"   , "Edad hasta");

      lrPreV.SETRANGE ("N§ Contrato"    , prHabitacion.Contrato);
      lrPreV.SETRANGE ("Codigo Precio"  , lrPreV."Codigo Precio"::Extras);
      lrPreV.SETFILTER("Fecha desde"    , '<=%1', pwFechaFin);
      lrPreV.SETFILTER("Fecha hasta"    , '>=%1', pwFechaIni);
      lrPreV.SETRANGE ("Aplicacion fija", pwAplicacionFija);
      lrPreV.SETRANGE (Activo           , TRUE);
      IF lrPreV.FINDSET THEN BEGIN
        REPEAT
          prPreV := lrPreV;
          prPreV.INSERT;
        UNTIL lrPreV.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FiltrarPrecios@1103355013(VAR prPreV@1103355001 : TEMPORARY Record 7009732;pwHabitacion@1103355000 : Code[10];pwRegimen@1103355002 : Code[10];pwResponsable@1103355006 : Boolean;pwNumPers@1103355003 : Integer;pwExtra@1103355004 : Code[10]);
    VAR
      lwResponsable@1103355005 : Integer;
    BEGIN
      // FiltrarPrecios

      prPreV.RESET;
      prPreV.SETCURRENTKEY(Delegacion   , "N§ Contrato", "Codigo Precio", Codigo,
                           "Fecha desde", "Fecha hasta", "Edad desde"   , "Edad hasta");

      prPreV.SETFILTER("Tipo Habitacion", '%1|%2', pwHabitacion                     , '');
      prPreV.SETFILTER("Tipo Regimen"   , '%1|%2', pwRegimen                        , '');
      prPreV.SETFILTER("Tipo Persona"   , '%1|%2', cCotCom.GetTipoPersona(pwNumPers), '');

      // los precios que no son por pax solo se aplican al responsable.
      IF NOT pwResponsable THEN
        prPreV.SETRANGE("Tipo Precio", prPreV."Tipo Precio"::Pax);

      IF pwExtra <> '' THEN
        prPreV.SETRANGE(Codigo, pwExtra);
    END;

    PROCEDURE BuscarExtraVariable@1103355015(VAR prCabCal@1103355000 : TEMPORARY Record 7009735;VAR prPreV@1103355001 : TEMPORARY Record 7009732;VAR prExtras@1103355002 : TEMPORARY Record 7009873;VAR prPerHab@1103355004 : TEMPORARY Record 2000000007;VAR prPersoAux@1103355003 : TEMPORARY Record 7009873;pwFechaVenta@1103355007 : Date);
    VAR
      lwCont@1103355006 : Integer;
      lrPerRes@1103355005 : TEMPORARY Record 2000000007;
      lrPerExtra@1103355008 : TEMPORARY Record 2000000007;
      lwDias@1103355009 : Integer;
    BEGIN
      // BuscarExtraVariable

      FiltrarPrecios(prPreV, prExtras.Habitacion, prExtras.Regimen,
                     prExtras.Responsable, prExtras."N§ Persona", prExtras.Extra);

      IF prPreV.FINDSET THEN BEGIN
        REPEAT

          cVarias.PeriodoVacio(lrPerRes);
          IF ComprobarCriteriosAplicacion(prExtras, prPersoAux, prPreV, prPerHab, lrPerRes, pwFechaVenta) THEN BEGIN
            cVarias.IniciarPeriodo(lrPerExtra,prExtras."Fecha inicio", prExtras."Fecha fin");
            AplicarExtra(prCabCal, prExtras, prPreV, lrPerExtra, lrPerRes, Text002);
          END;

        UNTIL prPreV.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE AplicarExtra@1103355012(VAR prCab@1103355010 : TEMPORARY Record 7009735;VAR prPerso@1103355000 : TEMPORARY Record 7009873;VAR prPreV@1103355001 : TEMPORARY Record 7009732;VAR prPeriodo@1103355002 : TEMPORARY Record 2000000007;VAR prPerRes@1103355003 : TEMPORARY Record 2000000007;pwCodLin@1103355012 : Code[10]);
    VAR
      lrLinCal@1103355011 : Record 7009736;
      lrPerAux@1103355004 : TEMPORARY Record 2000000007;
      lwDiasEstancia@1103355005 : Integer;
      lwCantidad@1103355006 : Decimal;
      lwImporte@1103355007 : Decimal;
      lwDia@1103355008 : Date;
      lwFiltroFecha@1103355009 : Text[1024];
    BEGIN
      // AplicarExtra

      IF prPreV.Porcentaje THEN BEGIN

        // Generamos el filtro de fechas que vamos a usar para calcular el porcentaje.
        CASE prPreV.Frecuencia OF

          // aplicacion £nica.
          0: lwFiltroFecha := FORMAT(prPeriodo."Period Start");

          // aplicacion diaria.
          1: lwFiltroFecha := STRSUBSTNO('%1..%2', prPeriodo."Period Start", prPeriodo."Period End");

          // aplicacion cada x dias.
          ELSE BEGIN
            lwDia := prPeriodo."Period Start";

            // podria fallar para estancias muy largas. (m s de 200 d¡as)
            WHILE (lwDia <= prPeriodo."Period End") DO BEGIN
              lwFiltroFecha := FORMAT(lwDia) + '|';
              lwDia := lwDia + prPreV.Frecuencia;
            END;

            lwFiltroFecha := DELCHR(lwFiltroFecha, '>', '|');

          END;
        END;

        IF lwFiltroFecha <> '' THEN
          lwImporte := cCotCom.CalcularPorcentajeIngreso(prCab,prPreV, prPerso, lwFiltroFecha);

        lwCantidad := 1;

      END
      ELSE BEGIN

        // Aplicacion £nica.
        IF prPreV.Frecuencia = 0 THEN
          lwCantidad := 1
        // Aplicacion diaria / cada x d¡as
        ELSE BEGIN
          // Calculamos los dias de estancia.
          prPerRes.RESET;
          prPerRes.FINDFIRST;
          cVarias.InterPer(prPeriodo, prPerRes, lrPerAux);
          lwCantidad := ROUND(cVarias.GetDiasPeriodo(lrPerAux) / prPreV.Frecuencia, 0.01);
        END;

        IF prPreV."Tipo Precio" = prPreV."Tipo Precio"::Habitaci¢n THEN
          lwCantidad := lwCantidad * prPerso."N§ Habitaciones";

        lwImporte := prPreV.Importe;

      END;

      cCalRes.inserta_linea_calculo(lrLinCal, prCab.Usuario, pwCodLin, prPerso.Contrato,
                                    ROUND(lwCantidad * lwImporte), prPerso."N§ Persona", prPerso."Fecha inicio", prPreV.Codigo,
                                    ROUND(lwCantidad, 1), lwImporte, prPreV.Garantizable, prPreV."Importe HP");

      cCalRes.fijos_linea_calculo  (lrLinCal, lrLinCal."Coste/Ingreso"::Ingreso, '', prPerso."N§ Persona",
                                    prPerso.Hotel, 0, prPerso.Hotel, prPreV.Delegacion,
                                    FALSE);
    END;

    LOCAL PROCEDURE ComprobarCriteriosAplicacion@1103355061(VAR prPersona@1103355000 : TEMPORARY Record 7009873;VAR prPersonas@1103355001 : TEMPORARY Record 7009873;VAR prPreV@1103355003 : TEMPORARY Record 7009732;VAR prPeriodos@1103355006 : TEMPORARY Record 2000000007;VAR prPerRes@1103355002 : TEMPORARY Record 2000000007;pwFechaVenta@1103355008 : Date) rvAplic : Boolean;
    VAR
      lwAcaba@1103355004 : Boolean;
      lwNumCrit@1103355005 : Integer;
    BEGIN
      // ComprobarCriteriosAplicacion

      rvAplic   := TRUE;
      lwAcaba   := FALSE;
      lwNumCrit := 0;

      WHILE rvAplic AND NOT lwAcaba DO BEGIN
        lwNumCrit += 1;
        CASE lwNumCrit OF

          1: rvAplic := ComprobarEdades    (prPersona, prPreV);
          2: rvAplic := ComprobarFechas    (prPreV, prPersona, pwFechaVenta, prPeriodos);
          3: rvAplic := ComprobarNumPersona(prPersona, prPreV, prPersonas);
          ELSE
            lwAcaba := TRUE;
        END;
      END;

      cVarias.CopiaPeriodos(prPeriodos,prPerRes);
    END;

    LOCAL PROCEDURE ComprobarEdades@1103355000(VAR prPersona@1103355000 : TEMPORARY Record 7009873;VAR prPreV@1103355001 : TEMPORARY Record 7009732) : Boolean;
    VAR
      lwEdadHasta@1103355002 : Integer;
    BEGIN
      // ComprobarEdades
      // comprobamos si el pax entra dentro del rango de edades.

      IF prPreV."Edad hasta" = 0 THEN
        lwEdadHasta := 999
      ELSE
        lwEdadHasta := prPreV."Edad hasta";

      EXIT((prPersona.Edad >= prPreV."Edad desde") AND (prPersona.Edad <= lwEdadHasta));
    END;

    LOCAL PROCEDURE ComprobarNumPersona@1103355001(VAR prPersona@1103355000 : TEMPORARY Record 7009873;VAR prPreV@1103355001 : TEMPORARY Record 7009732;VAR prPersonas@1103355002 : TEMPORARY Record 7009873) : Boolean;
    BEGIN
      // ComprobarNumPersona
      //: Comprobamos que la posicion en la habitacion coincida con la indicada en el suplemento.
      //: En caso de que el precio tenga un rango de edades, la posicion es dentro de ese rango de edades.

      IF prPreV."Edad hasta" = 0 THEN
        EXIT((prPreV."N§ Persona" = 0) OR (prPersona.Posicion = prPreV."N§ Persona"))
      ELSE
        EXIT((prPreV."N§ Persona" = 0) OR
             (GetNumPersonaxEdad(prPersona, prPersonas, prPreV."Edad desde", prPreV."Edad hasta") = prPreV."N§ Persona"));
    END;

    LOCAL PROCEDURE GetNumPersonaxEdad@1103355025(VAR prPersona@1103355000 : TEMPORARY Record 7009873;VAR prPersonas@1103355001 : TEMPORARY Record 7009873;pwEdadDesde@1103355003 : Integer;pwEdadHasta@1103355004 : Integer) rvNum : Integer;
    VAR
      lwAcaba@1103355002 : Boolean;
    BEGIN
      // GetNumPersonaxEdad

      prPersonas.RESET;
      prPersonas.SETCURRENTKEY("Id cotizacion", Edad);

      lwAcaba := FALSE;
      rvNum   := 0;

      IF prPersonas.FINDLAST THEN BEGIN
        REPEAT
          IF (prPersonas.Edad >= pwEdadDesde) AND (prPersonas.Edad <= pwEdadHasta) THEN
            rvNum += 1;
          lwAcaba :=  (prPersona."N§ Persona" = prPersonas."N§ Persona") OR (prPersonas.NEXT(-1) = 0);
        UNTIL lwAcaba;
      END;

      IF prPersona."N§ Habitaciones" <> 0 THEN
        rvNum := ROUND(rvNum / prPersona."N§ Habitaciones", 1);

      IF rvNum = 0 THEN
        rvNum := 1;
    END;

    LOCAL PROCEDURE ComprobarFechas@1103355002(VAR prPreV@1103355001 : TEMPORARY Record 7009732;VAR prPersona@1103355000 : TEMPORARY Record 7009873;pwFechaVenta@1103355002 : Date;VAR prPeriodos@1103355003 : TEMPORARY Record 2000000007) rvRes : Boolean;
    VAR
      lrPerPrecio@1103355005 : TEMPORARY Record 2000000007;
    BEGIN
      // ComprobarFechas

      CASE prPreV."Tipo Fechas" OF

        prPreV."Tipo Fechas"::"Fecha venta"          :
          EXIT(((pwFechaVenta >= prPreV."Fecha desde") AND (pwFechaVenta <= prPreV."Fecha hasta")));

        prPreV."Tipo Fechas"::"Fecha entrada"        :
          EXIT(((prPeriodos."Period Start" >= prPreV."Fecha desde") AND (prPeriodos."Period End" <= prPreV."Fecha hasta")));

        prPreV."Tipo Fechas"::"Fecha estancia"       :
          EXIT(((prPeriodos."Period Start" >= prPreV."Fecha desde") AND (prPeriodos."Period End" <= prPreV."Fecha hasta")));

        prPreV."Tipo Fechas"::"Fecha venta+entrada"  :
          EXIT(((pwFechaVenta >= prPreV."Fecha desde") AND (pwFechaVenta <= prPreV."Fecha hasta")) AND
               ((prPeriodos."Period Start" >= prPreV."2¦ Fecha desde") AND (prPeriodos."Period Start" <= prPreV."2¦ Fecha hasta")));

        prPreV."Tipo Fechas"::"Fecha venta+estancia" :
          EXIT(((pwFechaVenta >= prPreV."Fecha desde") AND (pwFechaVenta <= prPreV."Fecha hasta")) AND
               ((prPeriodos."Period Start" >= prPreV."2¦ Fecha desde") AND (prPeriodos."Period Start" <= prPreV."2¦ Fecha hasta")));

        prPreV."Tipo Fechas"::"Fecha salida"         :
          EXIT(((prPeriodos."Period Start" >= prPreV."Fecha desde") AND (prPeriodos."Period Start" <= prPreV."Fecha hasta")));

        prPreV."Tipo Fechas"::"Fecha venta+salida"   :
          EXIT(((pwFechaVenta >= prPreV."Fecha desde") AND (pwFechaVenta <= prPreV."Fecha hasta")) AND
               ((prPeriodos."Period Start" >= prPreV."2¦ Fecha desde") AND (prPeriodos."Period Start" <= prPreV."2¦ Fecha hasta")));

        prPreV."Tipo Fechas"::"Fecha entrada+salida" :
          EXIT(((prPeriodos."Period Start" >= prPreV."Fecha desde") AND (prPeriodos."Period Start" <= prPreV."Fecha hasta")) AND
               ((prPeriodos."Period Start" >= prPreV."2¦ Fecha desde") AND (prPeriodos."Period Start" <= prPreV."2¦ Fecha hasta")));

      END;
    END;

    BEGIN
    END.
  }
}
