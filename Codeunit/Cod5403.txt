OBJECT Codeunit 5403 AddOnIntegrManagement
{
  OBJECT-PROPERTIES
  {
    Date=21/05/03;
    Time=12:00:00;
    Version List=NAVW13.70;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GLSetup@1002 : Record 98;
      Currency@1003 : Record 4;
      ACYMgt@1006 : Codeunit 5837;
      CostCalcMgt@1007 : Codeunit 5836;
      RndgSetupRead@1009 : Boolean;

    PROCEDURE CheckReceiptOrderStatus@7(VAR SalesLine@1000 : Record 37);
    VAR
      CheckReceiptOrderStatus@1001 : Codeunit 99000777;
    BEGIN
      IF SalesLine."Document Type" <> SalesLine."Document Type"::Order THEN
        EXIT;

      IF SalesLine.Type <> SalesLine.Type::Item THEN
        EXIT;

      CheckReceiptOrderStatus.SalesLineCheck(SalesLine);
    END;

    PROCEDURE ValidateProdOrderOnPurchLine@9(VAR PurchLine@1000 : Record 39);
    VAR
      Item@1001 : Record 27;
      ProdOrder@1002 : Record 5405;
      ProdOrderLine@1003 : Record 5406;
    BEGIN
      WITH PurchLine DO BEGIN
        TESTFIELD(Type,Type::Item);

        IF ProdOrder.GET(ProdOrder.Status::Released,"Prod. Order No.") THEN BEGIN
          ProdOrder.TESTFIELD(Blocked,FALSE);
          ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Released);
          ProdOrderLine.SETRANGE("Prod. Order No.","Prod. Order No.");
          ProdOrderLine.SETRANGE("Item No.","No.");
          IF ProdOrderLine.FIND('-') THEN
            "Routing No." := ProdOrderLine."Routing No.";
          Item.GET("No.");
          VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
        END;
      END;
    END;

    PROCEDURE ResetReqLineFields@5(VAR ReqLine@1000 : Record 246);
    BEGIN
      WITH ReqLine DO BEGIN
        "Prod. Order Line No." := 0;
        "Routing No." := '';
        "Routing Reference No." := 0;
        "Operation No." := '';
        "Work Center No." := '';
      END;
    END;

    PROCEDURE ValidateProdOrderOnReqLine@6(VAR ReqLine@1000 : Record 246);
    VAR
      Item@1001 : Record 27;
      ProdOrder@1002 : Record 5405;
      ProdOrderLine@1003 : Record 5406;
    BEGIN
      WITH ReqLine DO BEGIN
        TESTFIELD(Type,Type::Item);

        IF ProdOrder.GET(ProdOrder.Status::Released,"Prod. Order No.") THEN BEGIN
          ProdOrder.TESTFIELD(Blocked,FALSE);
          ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Released);
          ProdOrderLine.SETRANGE("Prod. Order No.","Prod. Order No.");
          ProdOrderLine.SETRANGE("Item No.","No.");
          IF ProdOrderLine.FIND('-') THEN BEGIN
            "Routing No." := ProdOrderLine."Routing No.";
            ReqLine."Routing Reference No." := ProdOrderLine."Line No.";
            ReqLine."Prod. Order Line No." := ProdOrderLine."Line No.";
            ReqLine."Requester ID" := USERID;
          END;
          Item.GET("No.");
          VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
        END;
      END;
    END;

    PROCEDURE InitMfgSetup@1();
    VAR
      MfgSetup@1000 : Record 99000765;
    BEGIN
      WITH MfgSetup DO
        IF NOT FIND('-') THEN BEGIN
          INIT;
          INSERT;
        END;
    END;

    PROCEDURE TransferFromReqLineToPurchLine@4(VAR PurchOrderLine@1000 : Record 39;ReqLine@1001 : Record 246);
    VAR
      MfgSetup@1002 : Record 99000765;
      WorkCenter@1003 : Record 99000754;
      ProdOrderRtngLine@1004 : Record 5409;
    BEGIN
      WITH ReqLine DO BEGIN
        PurchOrderLine."Routing No." := "Routing No.";
        PurchOrderLine."Routing Reference No." := "Routing Reference No.";
        PurchOrderLine."Operation No." := "Operation No.";
        PurchOrderLine.VALIDATE("Work Center No.","Work Center No.");
        IF ReqLine."Prod. Order No." <> '' THEN BEGIN
          IF "Work Center No." <> '' THEN BEGIN
            WorkCenter.GET(PurchOrderLine."Work Center No.");
            IF WorkCenter."Unit Cost Calculation" = WorkCenter."Unit Cost Calculation"::Time THEN BEGIN
              ProdOrderRtngLine.GET(
                ProdOrderRtngLine.Status::Released,"Prod. Order No.","Routing Reference No.","Routing No.","Operation No.");
              MfgSetup.GET;
              CostCalcMgt.GetRndgSetup(GLSetup,Currency,RndgSetupRead);
              IF MfgSetup."Cost Incl. Setup" AND (ReqLine.Quantity <> 0) THEN BEGIN
                PurchOrderLine."Overhead Rate" :=
                  ROUND(
                    WorkCenter."Overhead Rate" *
                    (ProdOrderRtngLine."Setup Time" /
                     ReqLine.Quantity +
                     ProdOrderRtngLine."Run Time"),
                    GLSetup."Unit-Amount Rounding Precision");
              END ELSE
                PurchOrderLine."Overhead Rate" :=
                  ROUND(
                    WorkCenter."Overhead Rate" * ProdOrderRtngLine."Run Time",
                    GLSetup."Unit-Amount Rounding Precision");
            END ELSE
              PurchOrderLine."Overhead Rate" := WorkCenter."Overhead Rate";
            PurchOrderLine."Indirect Cost %" := WorkCenter."Indirect Cost %";
            PurchOrderLine."Gen. Prod. Posting Group" := WorkCenter."Gen. Prod. Posting Group";
            PurchOrderLine.VALIDATE("Direct Unit Cost",ReqLine."Direct Unit Cost");
          END;
        END;
      END;
    END;

    BEGIN
    END.
  }
}
