OBJECT Codeunit 7010413 Funciones recogidas
{
  OBJECT-PROPERTIES
  {
    Date=06/10/10;
    Time=12:12:24;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text0001@1103355000 : TextConst 'ESP=El parte %1 es de recogida por lo que No puede confirmarse directamente.\Confirme el parte de Excursi¢n.';
      Text0002@1103355001 : TextConst 'ESP=El parte %1 Tiene Parte de Recogida asociado, Sin embargo %2 No es una excursi¢n.';
      Text0003@1103355002 : TextConst 'ESP=El parte de Recogida %1 relacionado con el parte %2 Ya est  confirmado.';
      rHist@1103355003 : Record 7010361;
      Text0004@1103355004 : TextConst 'ESP=Confirmacion';
      Text0005@1103355005 : TextConst 'ESP="Se han repartido los importes con el parte de recogida %1 "';
      Text0006@1103355006 : TextConst 'ESP="Se han repartido los importes con el parte %1 "';
      cFunPar@1103355007 : Codeunit 7010318;
      Text0007@1103355008 : TextConst 'ESP=El parte de Recogida %1 relacionado con el parte %2 No est  confirmado.';
      Text0009@1103355009 : TextConst 'ESP=El parte %1 es de recogida por lo que No puede desconfirmarse directamente.\Desconfirme el parte de Excursi¢n.';

    PROCEDURE ConfirmarParteRecogida@1103355001(VAR prParte@1103355000 : Record 7010360);
    VAR
      lrTipoServicio@1103355001 : Record 7010319;
      lrParteR@1103355002 : Record 7010360;
      lrPI@1103355003 : Record 7035392;
      lrPI2@1103355004 : Record 7035392;
      lrPC@1103355005 : Record 7035393;
      lrPC2@1103355007 : Record 7035393;
      lwNoLin@1103355006 : Integer;
    BEGIN
      // ConfirmarParteRecogida
      // JPT 22/06/09
      // Debe de lanzarse DESPUES de pasar a real los registros C/I

      CompConf(prParte);

      IF prParte."Recogida Generada" ='' THEN
        EXIT;

      CLEAR(lrTipoServicio);
      lrTipoServicio.GET(prParte."Tipo Servicio");
      IF lrTipoServicio."Tipo fijo" <> lrTipoServicio."Tipo fijo"::Excursion THEN
        ERROR(Text0002, prParte."N§ Parte" ,prParte."Tipo Servicio");

      CLEAR(lrParteR);
      lrParteR.GET(prParte."Recogida Generada");
      {
      IF lrParteR.Confirmado THEN
        ERROR(Text0003, lrParteR."N§ Parte", prParte."N§ Parte");
      }

      // Vuelve a comprobar los TTOO x Parte JPT 24/08/09
      cFunPar.RecalculaTTOOParte(lrParteR);

      // Buscamos el ultimo No Linea CI del parte de recogida
      CLEAR(lwNoLin);
      CLEAR(lrPI2);
      lrPI2.ASCENDING(FALSE);
      lrPI2.SETRANGE ("N§ Parte", lrParteR."N§ Parte");
      lrPI2.SETFILTER("N§ Linea", '<=%1', 99000000);
      IF lrPI2.FINDFIRST THEN
        lwNoLin := lrPI2."N§ Linea";

      // Produccion ingreso
      CLEAR(lrPI);
      lrPI.SETRANGE("N§ Parte", prParte."N§ Parte");
      lrPI.SETRANGE("Linea abono", FALSE);
      IF lrPI.FINDSET THEN BEGIN
        REPEAT
          lrPI2 := lrPI;
          lrPI2.Importe                         := lrPI2.Importe/2;
          lrPI2."Importe DL"                    := lrPI2."Importe DL"/2;
          lrPI2."Importe sin impuesto"          := lrPI2."Importe sin impuesto"/2;
          lrPI2."Importe sin impuesto DL"       := lrPI2."Importe sin impuesto DL"/2;
          lrPI2."Importe con impuesto"          := lrPI2."Importe con impuesto"/2;
          lrPI2."Importe con impuesto DL"       := lrPI2."Importe con impuesto DL"/2;
          lrPI2."Importe sin original"          := lrPI2."Importe sin original"/2;
          lrPI2."Importe con original"          := lrPI2."Importe con original"/2;
          lrPI2."Precio Pax"                    := lrPI2."Precio Pax"/2;
          lrPI2."Precio Pax DL"                 := lrPI2."Precio Pax DL"/2;
          lrPI2."Precio Vehiculo"               := lrPI2."Precio Vehiculo"/2;
          lrPI2."Precio Vehiculo DL"            := lrPI2."Precio Vehiculo DL"/2;
          lrPI2."Precio Pax sin impuestos"      := lrPI2."Precio Pax sin impuestos"/2;
          lrPI2."Precio Pax DL sin impuestos"   := lrPI2."Precio Pax DL sin impuestos"/2;
          lrPI2."Precio Vehiculo sin impuestos" := lrPI2."Precio Vehiculo sin impuestos"/2;
          lrPI2."Precio Vehiculo DL sin imp"    := lrPI2."Precio Vehiculo DL sin imp"/2;
          lrPI2.MODIFY;

          // La otra mitat se va al parte de recogida
          lrPI2."N§ Parte" := lrParteR."N§ Parte";
          lwNoLin += 100;
          lrPI2."N§ Linea" := lwNoLin;
          lrPI2.Garaje             := lrParteR.Garaje;
          lrPI2."Codigo servicio"  := lrParteR."Codigo Servicio";
          lrPI2.Vehiculo           := lrParteR.Vehiculo;
          lrPI2."Tipo Vehiculo"    := lrParteR."Tipo Vehiculo facturacion";
          lrPI2."Servicio propio"  := lrParteR.Proveedor ='';
          // AJF 26/08/10
          // Se eliminan los paxes de la l¡nea de coste-ingreso para que no salgan duplicados en las
          // estad¡sticas.
          lrPI2."Pax Facturados"                := 0;
          lrPI2."Pax Transportados"             := 0;

          lrPI2.INSERT;

        UNTIL lrPI.NEXT=0;
      END;

      // Produccion Coste
      CLEAR(lrPC);
      lrPC.SETRANGE("N§ Parte", prParte."N§ Parte");
      lrPC.SETRANGE("N§ Factura" , '');
      lrPC.SETRANGE("Linea abono", FALSE);
      IF lrPC.FINDSET THEN BEGIN
        REPEAT
          lrPC2 := lrPC;
          lrPC2.Importe                         := lrPC2.Importe/2;
          lrPC2."Importe DL"                    := lrPC2."Importe DL"/2;
          lrPC2."Importe sin impuesto"          := lrPC2."Importe sin impuesto"/2;
          lrPC2."Importe sin impuesto DL"       := lrPC2."Importe sin impuesto DL"/2;
          lrPC2."Importe con impuesto"          := lrPC2."Importe con impuesto"/2;
          lrPC2."Importe con impuesto DL"       := lrPC2."Importe con impuesto DL"/2;
          lrPC2."Importe sin original"          := lrPC2."Importe sin original"/2;
          lrPC2."Importe con original"          := lrPC2."Importe con original"/2;
          lrPC2."Precio Pax"                    := lrPC2."Precio Pax"/2;
          lrPC2."Precio Pax DL"                 := lrPC2."Precio Pax DL"/2;
          lrPC2."Precio Vehiculo"               := lrPC2."Precio Vehiculo"/2;
          lrPC2."Precio Vehiculo DL"            := lrPC2."Precio Vehiculo DL"/2;
          lrPC2."Precio Pax sin impuestos"      := lrPC2."Precio Pax sin impuestos"/2;
          lrPC2."Precio Pax DL sin impuestos"   := lrPC2."Precio Pax DL sin impuestos"/2;
          lrPC2."Precio Vehiculo sin impuestos" := lrPC2."Precio Vehiculo sin impuestos"/2;
          lrPC2."Precio Vehiculo DL sin imp"    := lrPC2."Precio Vehiculo DL sin imp"/2;
          lrPC2.MODIFY;

          // La otra mitat se va al parte de recogida
          lrPC2."N§ Parte" := lrParteR."N§ Parte";
          lwNoLin += 100;
          lrPC2."N§ Linea" := lwNoLin;
          lrPC2.Garaje             := lrParteR.Garaje;
          lrPC2."Codigo servicio"  := lrParteR."Codigo Servicio";
          lrPC2.Proveedor          := lrParteR.Proveedor;
          lrPC2.Vehiculo           := lrParteR.Vehiculo;
          lrPC2."Tipo Vehiculo"    := lrParteR."Tipo Vehiculo facturacion";
          lrPC2."Servicio propio"  := lrParteR.Proveedor ='';
          // AJF 26/08/10
          // Se eliminan los paxes de la l¡nea de coste-ingreso para que no salgan duplicados en las
          // estad¡sticas.
          lrPC2."Pax Facturados"                := 0;
          lrPC2."Pax Transportados"             := 0;

          lrPC2.INSERT;

        UNTIL lrPC.NEXT=0;
      END;


      // Se confirma el parte de Recogida
      lrParteR.VALIDATE(Confirmado , TRUE);

      // AJF 11/08/09
      // Copio la fecha de confirmaci¢n del parte padre, ya que al desconfirmar,
      // para abonar las l¡neas comprueba que la fecha de confirmaci¢n sea la misma que
      // en las l¡neas de CI.
      lrParteR."Fecha Confirmacion" := prParte."Fecha Confirmacion";

      lrParteR.MODIFY;
      // Marcamos tambien los registros asociados en Touroperador x Parte.
      cFunPar.Tratar_TTOOxParte(lrParteR."N§ Parte",TRUE);

      // Se informa en el historico
      rHist.inserta_registro(rHist."Tipo Fichero"::Parte, prParte."N§ Parte", 0, Text0004, '', STRSUBSTNO(Text0005, lrParteR."N§ Parte"));
      rHist.inserta_registro(rHist."Tipo Fichero"::Parte, lrParteR."N§ Parte", 0, Text0004, '', STRSUBSTNO(Text0006, prParte."N§ Parte"));
    END;

    PROCEDURE DesconfirmarParteRecogida@1103355000(VAR prParte@1103355001 : Record 7010360;pwRecalcular@1103355003 : 'Desconfirmar,Todo,Solo Coste,Solo Ingreso');
    VAR
      lrTipoServicio@1103355000 : Record 7010319;
      lrParteR@1103355002 : Record 7010360;
    BEGIN
      // DesconfirmarParteRecogida

      CompDesc(prParte);

      IF prParte."Recogida Generada" ='' THEN
        EXIT;

      CLEAR(lrParteR);
      lrParteR.GET(prParte."Recogida Generada");
      IF NOT lrParteR.Confirmado THEN
        EXIT;

      // Los partes de grupo se desconfirman todos juntos
      IF (prParte."Cod Grupo" = lrParteR."Cod Grupo") AND (prParte."Cod Grupo"<>'') THEN
        EXIT;

      CLEAR(lrTipoServicio);
      lrTipoServicio.GET(prParte."Tipo Servicio");
      IF lrTipoServicio."Tipo fijo" <> lrTipoServicio."Tipo fijo"::Excursion THEN
        ERROR(Text0002, prParte."N§ Parte" ,prParte."Tipo Servicio");

      lrParteR."Origen creacion" := -1; // Para evitar que entre en bucle y origine el error
      IF NOT cFunPar.desconfirmar_partes(lrParteR, FALSE, '', pwRecalcular) THEN
        ERROR(''); // Producimos un rollback
    END;

    PROCEDURE CompConf@1103355002(prParte@1103355000 : Record 7010360);
    BEGIN
      // CompConf

      IF prParte."Origen creacion"=prParte."Origen creacion"::"Recogida Automatica" THEN
        ERROR(Text0001, prParte."N§ Parte");
    END;

    PROCEDURE CompDesc@1103355003(prParte@1103355000 : Record 7010360);
    BEGIN
      // CompDesc

      IF prParte."Origen creacion"=prParte."Origen creacion"::"Recogida Automatica" THEN
        ERROR(Text0009, prParte."N§ Parte");
    END;

    BEGIN
    {
      JPT 22/06/09 DRF IBZ 09001 Valoraci¢n de partes de recogida
      Al confirmar una excursi¢n con parte de recojida, se confirma tambin este y las lineas de
      calculo de la excursi¢n se dividen en dos.
    }
    END.
  }
}
