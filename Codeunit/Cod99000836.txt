OBJECT Codeunit 99000836 Transfer Line-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 337=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Codeunit is not initialized correctly.;ESP=Codeunit no iniciada correctamente.';
      Text001@1001 : TextConst 'ENU=Reserved quantity cannot be greater than %1;ESP=La cantidad reservada no puede ser mayor que %1';
      Text002@1002 : TextConst 'ENU=must be filled in when a quantity is reserved;ESP=se debe rellenar cuando se ha reservado una cantidad';
      Text003@1003 : TextConst 'ENU=must not be changed when a quantity is reserved;ESP=no se debe modificar cuando se ha reservado una cantidad';
      Location@1022 : Record 14;
      ReservMgt@1005 : Codeunit 99000845;
      CreateReservEntry@1006 : Codeunit 99000830;
      ReservEngineMgt@1007 : Codeunit 99000831;
      CreatePick@1021 : Codeunit 7312;
      Blocked@1008 : Boolean;
      SetFromType@1009 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry';
      SetFromSubtype@1010 : Integer;
      SetFromID@1011 : Code[20];
      SetFromBatchName@1012 : Code[10];
      SetFromProdOrderLine@1013 : Integer;
      SetFromRefNo@1014 : Integer;
      SetFromVariantCode@1015 : Code[10];
      SetFromLocationCode@1016 : Code[10];
      SetFromSerialNo@1018 : Code[20];
      SetFromLotNo@1019 : Code[20];
      SetFromQtyPerUOM@1020 : Decimal;
      DeleteItemTracking@1004 : Boolean;

    PROCEDURE CreateReservation@4(VAR TransLine@1000 : Record 5741;Description@1001 : Text[50];ExpectedReceiptDate@1002 : Date;Quantity@1003 : Decimal;ForSerialNo@1005 : Code[20];ForLotNo@1004 : Code[20];Direction@1007 : 'Outbound,Inbound');
    VAR
      ShipmentDate@1008 : Date;
      OutBoundQty@1009 : Decimal;
    BEGIN
      IF SetFromType = 0 THEN
        ERROR(Text000);

      TransLine.TESTFIELD("Item No.");
      TransLine.TESTFIELD("Variant Code",SetFromVariantCode);

      CASE Direction OF
        Direction::Outbound:
          BEGIN
            TransLine.TESTFIELD("Shipment Date");
            TransLine.TESTFIELD("Transfer-from Code",SetFromLocationCode);
            TransLine.CALCFIELDS("Reserved Qty. Outbnd. (Base)");
            IF ABS(TransLine."Outstanding Qty. (Base)") <
               ABS(TransLine."Reserved Qty. Outbnd. (Base)") + Quantity
            THEN
              ERROR(
                Text001,
                ABS(TransLine."Outstanding Qty. (Base)") - ABS(TransLine."Reserved Qty. Outbnd. (Base)"));
            ShipmentDate := TransLine."Shipment Date";
          END;
        Direction::Inbound:
          BEGIN
            TransLine.TESTFIELD("Receipt Date");
            TransLine.TESTFIELD("Transfer-to Code",SetFromLocationCode);
            TransLine.CALCFIELDS("Reserved Qty. Inbnd. (Base)");
            IF ABS(TransLine."Outstanding Qty. (Base)") <
               ABS(TransLine."Reserved Qty. Inbnd. (Base)") + Quantity
            THEN
              ERROR(
                Text001,
                ABS(TransLine."Outstanding Qty. (Base)") - ABS(TransLine."Reserved Qty. Inbnd. (Base)"));
            ExpectedReceiptDate := TransLine."Receipt Date";
          END;
      END;
      CreateReservEntry.CreateReservEntryFor(
        DATABASE::"Transfer Line",
        Direction,TransLine."Document No.",'',
        TransLine."Derived From Line No.",TransLine."Line No.",TransLine."Qty. per Unit of Measure",
        Quantity,ForSerialNo,ForLotNo);
      CreateReservEntry.CreateReservEntryFrom(
        SetFromType,SetFromSubtype,SetFromID,SetFromBatchName,SetFromProdOrderLine,SetFromRefNo,
        SetFromQtyPerUOM,SetFromSerialNo,SetFromLotNo);
      CreateReservEntry.CreateReservEntry(
        TransLine."Item No.",TransLine."Variant Code",SetFromLocationCode,
        Description,ExpectedReceiptDate,ShipmentDate,0);

      IF (Direction = Direction::Outbound) AND
         Location.GET(TransLine."Transfer-from Code") AND
         (Location."Bin Mandatory" OR Location."Require Pick")
      THEN BEGIN
        OutBoundQty :=
          CreatePick.CheckOutBound(
            DATABASE::"Transfer Line",Direction,TransLine."Document No.",
            TransLine."Line No.",0);
        IF (OutBoundQty <> 0) AND (OutBoundQty >= (TransLine."Reserved Qty. Outbnd. (Base)" + Quantity)) THEN
          CreatePick.AdjustReservation(
            OutBoundQty,DATABASE::"Transfer Line",Direction,TransLine."Document No.",
            TransLine."Line No.",0,0);
      END;

      SetFromType := 0;
    END;

    PROCEDURE CreateReservationSetFrom@7(FromType@1000 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry';FromSubtype@1001 : Integer;FromID@1002 : Code[20];FromBatchName@1003 : Code[10];FromProdOrderLine@1004 : Integer;FromRefNo@1005 : Integer;FromVariantCode@1006 : Code[10];FromLocationCode@1007 : Code[10];FromSerialNo@1009 : Code[20];FromLotNo@1010 : Code[20];FromQtyPerUOM@1011 : Decimal);
    BEGIN
      SetFromType := FromType;
      SetFromSubtype := FromSubtype;
      SetFromID := FromID;
      SetFromBatchName := FromBatchName;
      SetFromProdOrderLine := FromProdOrderLine;
      SetFromRefNo := FromRefNo;
      SetFromVariantCode := FromVariantCode;
      SetFromLocationCode := FromLocationCode;
      SetFromSerialNo := FromSerialNo;
      SetFromLotNo := FromLotNo;
      SetFromQtyPerUOM := FromQtyPerUOM;
    END;

    PROCEDURE FilterReservFor@9(VAR FilterReservEntry@1000 : Record 337;TransLine@1001 : Record 5741;Direction@1002 : 'Outbound,Inbound');
    BEGIN
      FilterReservEntry.SETRANGE("Source Type",DATABASE::"Transfer Line");
      FilterReservEntry.SETRANGE("Source Subtype",Direction);
      FilterReservEntry.SETRANGE("Source ID",TransLine."Document No.");
      FilterReservEntry.SETRANGE("Source Batch Name",'');
      FilterReservEntry.SETRANGE("Source Prod. Order Line",TransLine."Derived From Line No.");
      FilterReservEntry.SETRANGE("Source Ref. No.",TransLine."Line No.");
    END;

    PROCEDURE Caption@27(TransLine@1001 : Record 5741) CaptionText@1000 : Text[80];
    BEGIN
      CaptionText :=
        STRSUBSTNO(
          '%1 %2 %3',TransLine."Document No.",TransLine."Line No.",
          TransLine."Item No.");
    END;

    PROCEDURE FindReservEntry@1(TransLine@1000 : Record 5741;VAR ReservEntry@1001 : Record 337;Direction@1002 : 'Outbound,Inbound') : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,TransLine,Direction);
      EXIT(ReservEntry.FINDLAST);
    END;

    PROCEDURE ReservEntryExist@13(TransLine@1000 : Record 5741) : Boolean;
    VAR
      ReservEntry@1001 : Record 337;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,TransLine,0);
      ReservEntry.SETRANGE("Source Subtype"); // Ignore direction
      EXIT(NOT ReservEntry.ISEMPTY);
    END;

    PROCEDURE VerifyChange@62(VAR NewTransLine@1000 : Record 5741;VAR OldTransLine@1001 : Record 5741);
    VAR
      TransLine@1007 : Record 5741;
      TempReservEntry@1002 : Record 337;
      ShowErrorInbnd@1003 : Boolean;
      ShowErrorOutbnd@1004 : Boolean;
      HasErrorInbnd@1005 : Boolean;
      HasErrorOutbnd@1006 : Boolean;
    BEGIN
      IF Blocked THEN
        EXIT;
      IF NewTransLine."Line No." = 0 THEN
        IF NOT TransLine.GET(NewTransLine."Document No.",NewTransLine."Line No.") THEN
          EXIT;

      NewTransLine.CALCFIELDS("Reserved Qty. Inbnd. (Base)");
      NewTransLine.CALCFIELDS("Reserved Qty. Outbnd. (Base)");

      ShowErrorInbnd := (NewTransLine."Reserved Qty. Inbnd. (Base)" <> 0);
      ShowErrorOutbnd := (NewTransLine."Reserved Qty. Outbnd. (Base)" <> 0);

      IF NewTransLine."Shipment Date" = 0D THEN
        IF ShowErrorOutbnd THEN
          NewTransLine.FIELDERROR("Shipment Date",Text002)
        ELSE
          HasErrorOutbnd := TRUE;

      IF NewTransLine."Receipt Date" = 0D THEN
        IF ShowErrorInbnd THEN
          NewTransLine.FIELDERROR("Receipt Date",Text002)
        ELSE
          HasErrorInbnd := TRUE;

      IF NewTransLine."Item No." <> OldTransLine."Item No." THEN
        IF ShowErrorInbnd OR ShowErrorOutbnd THEN
          NewTransLine.FIELDERROR("Item No.",Text003)
        ELSE BEGIN
          HasErrorInbnd := TRUE;
          HasErrorOutbnd := TRUE;
        END;

      IF NewTransLine."Transfer-from Code" <> OldTransLine."Transfer-from Code" THEN
        IF ShowErrorOutbnd THEN
          NewTransLine.FIELDERROR("Transfer-from Code",Text003)
        ELSE
          HasErrorOutbnd := TRUE;

      IF NewTransLine."Transfer-to Code" <> OldTransLine."Transfer-to Code" THEN
        IF ShowErrorInbnd THEN
          NewTransLine.FIELDERROR("Transfer-to Code",Text003)
        ELSE
          HasErrorInbnd := TRUE;

      IF NewTransLine."Transfer-from Bin Code" <> OldTransLine."Transfer-from Bin Code" THEN
        IF ShowErrorOutbnd THEN
          NewTransLine.FIELDERROR("Transfer-from Bin Code",Text003)
        ELSE
          HasErrorOutbnd := TRUE;

      IF NewTransLine."Transfer-To Bin Code" <> OldTransLine."Transfer-To Bin Code" THEN
        IF ShowErrorInbnd THEN
          NewTransLine.FIELDERROR("Transfer-To Bin Code",Text003)
        ELSE
          HasErrorInbnd := TRUE;

      IF NewTransLine."Variant Code" <> OldTransLine."Variant Code" THEN
        IF ShowErrorInbnd OR ShowErrorOutbnd THEN
          NewTransLine.FIELDERROR("Variant Code",Text003)
        ELSE BEGIN
          HasErrorInbnd := TRUE;
          HasErrorOutbnd := TRUE;
        END;

      IF NewTransLine."Line No." <> OldTransLine."Line No." THEN BEGIN
        HasErrorInbnd := TRUE;
        HasErrorOutbnd := TRUE;
      END;

      IF HasErrorOutbnd THEN BEGIN
        IF (NewTransLine."Item No." <> OldTransLine."Item No.") OR
           FindReservEntry(NewTransLine,TempReservEntry,0)
        THEN BEGIN
          IF NewTransLine."Item No." <> OldTransLine."Item No." THEN BEGIN
            ReservMgt.SetTransferLine(OldTransLine,0);
            ReservMgt.DeleteReservEntries(TRUE,0);
            ReservMgt.SetTransferLine(NewTransLine,0);
          END ELSE BEGIN
            ReservMgt.SetTransferLine(NewTransLine,0);
            ReservMgt.DeleteReservEntries(TRUE,0);
          END;
          ReservMgt.AutoTrack(NewTransLine."Outstanding Qty. (Base)");
        END;
        AssignForPlanning(NewTransLine,0);
        IF (NewTransLine."Item No." <> OldTransLine."Item No.") OR
           (NewTransLine."Variant Code" <> OldTransLine."Variant Code") OR
           (NewTransLine."Transfer-to Code" <> OldTransLine."Transfer-to Code")
        THEN
          AssignForPlanning(OldTransLine,0);
      END;

      IF HasErrorInbnd THEN BEGIN
        IF (NewTransLine."Item No." <> OldTransLine."Item No.") OR
           FindReservEntry(NewTransLine,TempReservEntry,1)
        THEN BEGIN
          IF NewTransLine."Item No." <> OldTransLine."Item No." THEN BEGIN
            ReservMgt.SetTransferLine(OldTransLine,1);
            ReservMgt.DeleteReservEntries(TRUE,0);
            ReservMgt.SetTransferLine(NewTransLine,1);
          END ELSE BEGIN
            ReservMgt.SetTransferLine(NewTransLine,1);
            ReservMgt.DeleteReservEntries(TRUE,0);
          END;
          ReservMgt.AutoTrack(NewTransLine."Outstanding Qty. (Base)");
        END;
        AssignForPlanning(NewTransLine,1);
        IF (NewTransLine."Item No." <> OldTransLine."Item No.") OR
           (NewTransLine."Variant Code" <> OldTransLine."Variant Code") OR
           (NewTransLine."Transfer-from Code" <> OldTransLine."Transfer-from Code")
        THEN
          AssignForPlanning(OldTransLine,1);
      END;
    END;

    PROCEDURE VerifyQuantity@3(VAR NewTransLine@1000 : Record 5741;VAR OldTransLine@1001 : Record 5741);
    VAR
      TransLine@1003 : Record 5741;
      Direction@1002 : 'Outbound,Inbound';
    BEGIN
      IF Blocked THEN
        EXIT;

      WITH NewTransLine DO BEGIN
        IF "Line No." = OldTransLine."Line No." THEN
          IF "Quantity (Base)" = OldTransLine."Quantity (Base)" THEN
            EXIT;
        IF "Line No." = 0 THEN
          IF NOT TransLine.GET("Document No.","Line No.") THEN
            EXIT;
        FOR Direction := Direction::Outbound TO Direction::Inbound DO BEGIN
          ReservMgt.SetTransferLine(NewTransLine,Direction);
          IF "Qty. per Unit of Measure" <> OldTransLine."Qty. per Unit of Measure" THEN
            ReservMgt.ModifyUnitOfMeasure;
          ReservMgt.DeleteReservEntries(FALSE,"Outstanding Qty. (Base)");
          ReservMgt.ClearSurplus;
          ReservMgt.AutoTrack("Outstanding Qty. (Base)");
          AssignForPlanning(NewTransLine,Direction);
        END;
      END;
    END;

    PROCEDURE UpdatePlanningFlexibility@23(VAR TransLine@1000 : Record 5741);
    VAR
      ReservEntry@1001 : Record 337;
    BEGIN
      IF FindReservEntry(TransLine,ReservEntry,0) THEN
        ReservEntry.MODIFYALL("Planning Flexibility",TransLine."Planning Flexibility");
      IF FindReservEntry(TransLine,ReservEntry,1) THEN
        ReservEntry.MODIFYALL("Planning Flexibility",TransLine."Planning Flexibility");
    END;

    PROCEDURE TransferTransferToItemJnlLine@35(VAR TransLine@1000 : Record 5741;VAR ItemJnlLine@1001 : Record 83;TransferQty@1002 : Decimal;Direction@1003 : 'Outbound,Inbound');
    VAR
      OldReservEntry@1004 : Record 337;
      TransferLocation@1006 : Code[10];
    BEGIN
      IF NOT FindReservEntry(TransLine,OldReservEntry,Direction) THEN
        EXIT;

      OldReservEntry.Lock;

      CASE Direction OF
        Direction::Outbound:
          BEGIN
            TransferLocation := TransLine."Transfer-from Code";
            ItemJnlLine.TESTFIELD("Location Code",TransferLocation);
          END;
        Direction::Inbound:
          BEGIN
            TransferLocation := TransLine."Transfer-to Code";
            ItemJnlLine.TESTFIELD("New Location Code",TransferLocation);
          END;
      END;

      ItemJnlLine.TESTFIELD("Item No.",TransLine."Item No.");
      ItemJnlLine.TESTFIELD("Variant Code",TransLine."Variant Code");

      IF TransferQty = 0 THEN
        EXIT;
      IF ReservEngineMgt.InitRecordSet(OldReservEntry) THEN
        REPEAT
          OldReservEntry.TESTFIELD("Item No.",TransLine."Item No.");
          OldReservEntry.TESTFIELD("Variant Code",TransLine."Variant Code");
          OldReservEntry.TESTFIELD("Location Code",TransferLocation);
          OldReservEntry."New Serial No." := OldReservEntry."Serial No.";
          OldReservEntry."New Lot No." := OldReservEntry."Lot No.";

          TransferQty :=
            CreateReservEntry.TransferReservEntry(DATABASE::"Item Journal Line",
              ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",
              ItemJnlLine."Journal Batch Name",0,ItemJnlLine."Line No.",
              ItemJnlLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

        UNTIL (ReservEngineMgt.NEXTRecord(OldReservEntry) = 0) OR (TransferQty = 0);
    END;

    PROCEDURE TransferTransferToTransfer@31(VAR OldTransLine@1000 : Record 5741;VAR NewTransLine@1001 : Record 5741;TransferQty@1002 : Decimal;Direction@1003 : 'Outbound,Inbound';VAR TrackingSpecification@1007 : Record 336);
    VAR
      OldReservEntry@1004 : Record 337;
      Status@1005 : 'Reservation,Tracking,Surplus,Prospect';
      TransferLocation@1006 : Code[10];
    BEGIN
      // Used when derived Transfer Lines are created during posting of shipment.
      IF NOT FindReservEntry(OldTransLine,OldReservEntry,Direction) THEN
        EXIT;

      OldReservEntry.SETRANGE("Serial No.",TrackingSpecification."Serial No.");
      OldReservEntry.SETRANGE("Lot No.",TrackingSpecification."Lot No.");
      IF OldReservEntry.ISEMPTY THEN
        EXIT;

      OldReservEntry.Lock;

      CASE Direction OF
        Direction::Outbound:
          BEGIN
            TransferLocation := OldTransLine."Transfer-from Code";
            NewTransLine.TESTFIELD("Transfer-from Code",TransferLocation);
          END;
        Direction::Inbound:
          BEGIN
            TransferLocation := OldTransLine."Transfer-to Code";
            NewTransLine.TESTFIELD("Transfer-to Code",TransferLocation);
          END;
      END;

      NewTransLine.TESTFIELD("Item No.",OldTransLine."Item No.");
      NewTransLine.TESTFIELD("Variant Code",OldTransLine."Variant Code");

      FOR Status := Status::Reservation TO Status::Prospect DO BEGIN
        IF TransferQty = 0 THEN
          EXIT;
        OldReservEntry.SETRANGE("Reservation Status",Status);
        IF OldReservEntry.FINDSET THEN
          REPEAT
            OldReservEntry.TESTFIELD("Item No.",OldTransLine."Item No.");
            OldReservEntry.TESTFIELD("Variant Code",OldTransLine."Variant Code");
            OldReservEntry.TESTFIELD("Location Code",TransferLocation);

            TransferQty :=
              CreateReservEntry.TransferReservEntry(DATABASE::"Transfer Line",
                Direction,NewTransLine."Document No.",'',NewTransLine."Derived From Line No.",
                NewTransLine."Line No.",NewTransLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

          UNTIL (OldReservEntry.NEXT = 0) OR (TransferQty = 0);
      END;
    END;

    PROCEDURE RenameLine@12(VAR NewTransLine@1001 : Record 5741;VAR OldTransLine@1000 : Record 5741);
    BEGIN
      ReservEngineMgt.RenamePointer(DATABASE::"Transfer Line",
        0,
        OldTransLine."Document No.",
        '',
        OldTransLine."Derived From Line No.",
        OldTransLine."Line No.",
        0,
        NewTransLine."Document No.",
        '',
        NewTransLine."Derived From Line No.",
        NewTransLine."Line No.");
    END;

    PROCEDURE DeleteLineConfirm@20(VAR TransLine@1000 : Record 5741) : Boolean;
    BEGIN
      WITH TransLine DO BEGIN
        IF NOT ReservEntryExist(TransLine) THEN
          EXIT(TRUE);

        ReservMgt.SetTransferLine(TransLine,0);
        IF ReservMgt.DeleteItemTrackingConfirm THEN
          DeleteItemTracking := TRUE;
      END;

      EXIT(DeleteItemTracking);
    END;

    PROCEDURE DeleteLine@2(VAR TransLine@1000 : Record 5741);
    BEGIN
      IF Blocked THEN
        EXIT;

      WITH TransLine DO BEGIN
        ReservMgt.SetTransferLine(TransLine,0);
        IF DeleteItemTracking THEN
          ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
        ReservMgt.DeleteReservEntries(TRUE,0);
        CALCFIELDS("Reserved Qty. Outbnd. (Base)");

        ReservMgt.SetTransferLine(TransLine,1);
        IF DeleteItemTracking THEN
          ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
        ReservMgt.DeleteReservEntries(TRUE,0);
        CALCFIELDS("Reserved Qty. Inbnd. (Base)");
      END;
    END;

    PROCEDURE AssignForPlanning@5(VAR TransLine@1000 : Record 5741;Direction@1001 : 'Outbound,Inbound');
    VAR
      PlanningAssignment@1002 : Record 99000850;
    BEGIN
      IF TransLine."Item No." <> '' THEN
        WITH TransLine DO BEGIN
          CASE Direction OF
            Direction::Outbound:
              PlanningAssignment.ChkAssignOne("Item No.","Variant Code","Transfer-to Code","Shipment Date");
            Direction::Inbound:
              PlanningAssignment.ChkAssignOne("Item No.","Variant Code","Transfer-from Code","Receipt Date");
          END;
        END;
    END;

    PROCEDURE Block@14(SetBlocked@1000 : Boolean);
    BEGIN
      Blocked := SetBlocked;
    END;

    PROCEDURE CallItemTracking@6(VAR TransLine@1000 : Record 5741;Direction@1003 : 'Outbound,Inbound');
    VAR
      TrackingSpecification@1001 : Record 336;
      ItemTrackingForm@1002 : Form 6510;
      AvalabilityDate@1005 : Date;
    BEGIN
      InitTrackingSpecification(TransLine,TrackingSpecification,AvalabilityDate,Direction);
      ItemTrackingForm.SetSource(TrackingSpecification,AvalabilityDate);
      ItemTrackingForm.RUNMODAL;
    END;

    PROCEDURE CallItemTracking2@15(VAR TransLine@1000 : Record 5741;Direction@1004 : 'Outbound,Inbound';VAR SecondSourceQuantityArray@1001 : ARRAY [3] OF Decimal);
    VAR
      TrackingSpecification@1002 : Record 336;
      ItemTrackingForm@1003 : Form 6510;
      AvailabilityDate@1005 : Date;
    BEGIN
      InitTrackingSpecification(TransLine,TrackingSpecification,AvailabilityDate,Direction);
      ItemTrackingForm.SetSource(TrackingSpecification,AvailabilityDate);
      ItemTrackingForm.SetSecondSourceQuantity(SecondSourceQuantityArray);
      ItemTrackingForm.RUNMODAL;
    END;

    PROCEDURE InitTrackingSpecification@8(VAR TransLine@1000 : Record 5741;VAR TrackingSpecification@1001 : Record 336;VAR AvalabilityDate@1002 : Date;Direction@1003 : 'Outbound,Inbound');
    BEGIN
      TrackingSpecification."Source Type" := DATABASE::"Transfer Line";
      WITH TransLine DO BEGIN
        TrackingSpecification."Item No." := "Item No.";
        TrackingSpecification.Description := Description;
        TrackingSpecification."Variant Code" := "Variant Code";
        TrackingSpecification."Source Subtype" := Direction;
        TrackingSpecification."Source ID" := "Document No.";
        TrackingSpecification."Source Batch Name" := '';
        TrackingSpecification."Source Prod. Order Line" := "Derived From Line No.";
        TrackingSpecification."Source Ref. No." := "Line No.";
        TrackingSpecification."Quantity (Base)" := "Quantity (Base)";
        TrackingSpecification."Qty. to Invoice (Base)" := "Quantity (Base)";
        TrackingSpecification."Qty. to Invoice" := Quantity;
        TrackingSpecification."Quantity Invoiced (Base)" := 0;
        TrackingSpecification."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        TrackingSpecification."Location Code" := '';
        CASE Direction OF
          Direction::Outbound:
            BEGIN
              TrackingSpecification."Location Code" := "Transfer-from Code";
              TrackingSpecification."Bin Code" := "Transfer-from Bin Code";
              TrackingSpecification."Qty. to Handle (Base)" := "Qty. to Ship (Base)";
              TrackingSpecification."Qty. to Handle" := "Qty. to Ship";
              TrackingSpecification."Quantity Handled (Base)" := "Qty. Shipped (Base)";
              AvalabilityDate := "Shipment Date";
            END;
          Direction::Inbound:
            BEGIN
              TrackingSpecification."Location Code" := "Transfer-to Code";
              TrackingSpecification."Bin Code" := "Transfer-To Bin Code";
              TrackingSpecification."Qty. to Handle (Base)" := "Qty. to Receive (Base)";
              TrackingSpecification."Qty. to Handle" := "Qty. to Receive";
              TrackingSpecification."Quantity Handled (Base)" := "Qty. Received (Base)";
              AvalabilityDate := "Receipt Date";
            END;
        END;
      END;
    END;

    PROCEDURE UpdateItemTrackingAfterPosting@11(TransHeader@1001 : Record 5740;Direction@1000 : 'Outbound,Inbound');
    VAR
      ReservEntry@1003 : Record 337;
      ReservEntry2@1002 : Record 337;
      CreateReservEntry@1004 : Codeunit 99000830;
    BEGIN
      // Used for updating Quantity to Handle after posting;
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      ReservEntry.SETRANGE("Source Type",DATABASE::"Transfer Line");
      ReservEntry.SETRANGE("Source Subtype",Direction);
      ReservEntry.SETRANGE("Source ID",TransHeader."No.");
      ReservEntry.SETRANGE("Source Batch Name",'');
      IF Direction = Direction::Outbound THEN
        ReservEntry.SETRANGE("Source Prod. Order Line",0)
      ELSE
        ReservEntry.SETFILTER("Source Prod. Order Line",'<>%1',0);
      CreateReservEntry.UpdateItemTrackingAfterPosting(ReservEntry);
      IF (Direction = Direction::Outbound) THEN BEGIN
        ReservEntry2.COPY(ReservEntry);
        ReservEntry2.SETRANGE("Source Subtype",Direction::Inbound);
        ReservEntry2.SETRANGE("Lot No.",ReservEntry."Lot No.");
        ReservEntry2.SETRANGE("Serial No.",ReservEntry."Serial No.");
        CreateReservEntry.UpdateItemTrackingAfterPosting(ReservEntry2);
      END;
    END;

    PROCEDURE RegisterBinContentItemTracking@1203(VAR TransferLine@1003 : Record 5741;VAR TempTrackingSpecification@1200 : TEMPORARY Record 336);
    VAR
      SourceTrackingSpecification@1202 : Record 336;
      ItemTrackingForm@1004 : Form 6510;
      FormRunMode@1201 : ',Reclass,Combined Ship/Rcpt,Drop Shipment,Transfer';
      Direction@1203 : 'Outbound,Inbound';
    BEGIN
      IF NOT TempTrackingSpecification.FINDSET THEN
        EXIT;
      InitTrackingSpecification(TransferLine,SourceTrackingSpecification,TransferLine."Shipment Date",Direction::Outbound);

      CLEAR(ItemTrackingForm);
      ItemTrackingForm.SetFormRunMode(FormRunMode::Transfer);
      ItemTrackingForm.SetSource(SourceTrackingSpecification,TransferLine."Shipment Date");
      ItemTrackingForm.RegisterItemTrackingLines(
        SourceTrackingSpecification,TransferLine."Shipment Date",TempTrackingSpecification);
    END;

    BEGIN
    END.
  }
}
