OBJECT Codeunit 439 Approvals Management
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 454=imd,
                TableData 455=imd,
                TableData 456=imd,
                TableData 457=imd,
                TableData 458=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=%1 %2 requires further approval.\\Approval request entries have been created.;ESP=El documento de %1 %2 requiere una aprobaci¢n superior.\\Se han creado movs. solic. aprobaci¢n.';
      Text002@1001 : TextConst 'ENU=%1 %2 approval request cancelled.;ESP=Se cancel¢ la solicitud de aprobaci¢n del documento de %1 %2.';
      Text003@1002 : TextConst 'ENU=%1 %2 has been automatically approved and released.;ESP=El documento de %1 %2 se ha aprobado y publicado autom ticamente.';
      Text004@1003 : TextConst 'ENU=Approval Setup not found.;ESP=No se encontr¢ la configuraci¢n de la aprobaci¢n';
      Text005@1005 : TextConst 'ENU=User ID %1 does not exist in the User Setup table.;ESP=El id. usuario %1 no existe en la tabla Configuraci¢n usuarios.';
      Text006@1006 : TextConst 'ENU=Approver ID %1 does not exist in the User Setup table.;ESP=El id. aprobador %1 no existe en la tabla Configuraci¢n usuarios.';
      Text007@1007 : TextConst 'ENU=%1 for %2  does not exist in the User Setup table.;ESP=La %1 para %2 no existe en la tabla Configuraci¢n usuarios.';
      Text008@1008 : TextConst 'ENU=User ID %1 does not exist in the User Setup table for %2 %3.;ESP=El id. usuario %1 no existe en la tabla Configuraci¢n usuarios para el documento de %2 %3.';
      Text013@1009 : TextConst 'ENU=Document %1 must be approved and released before you can perform this action.;ESP=El documento %1 debe estar aprobado y publicado antes de realizar esta acci¢n.';
      Text010@1011 : TextConst 'ENU=Approver not found.;ESP=No se encontr¢ el aprobador.';
      Text014@1013 : TextConst 'ENU=The %1 approval entries have now been cancelled.;ESP=Los movimientos de aprobaci¢n del documento de %1 ya se han cancelado.';
      Text015@1014 : TextConst 'ENU=The %1 %2 does not have any Lines.;ESP=%1 %2 no tiene ninguna l¡nea.';
      Text022@1016 : TextConst 'ENU=There has to be a %1 on %2 %3.;ESP=Debe haber un %1 en el documento de %2 %3.';
      AddApproversTemp@1020 : TEMPORARY Record 465;
      Text023@1019 : TextConst 'ENU="A template with a blank Approval Type or with Limit Type ""Credit Limit"", must have additional approvers. ";ESP="Una plantilla con un tipo aprobaci¢n vac¡o o con un tipo l¡mite ""L¡mite cr‚dito"" debe tener aprobadores adicionales. "';
      Text024@1021 : TextConst 'ENU=%1 are only for purchase request orders.;ESP=Los %1 s¢lo se utilizan para pedidos de solicitud de compra.';
      Text025@1022 : TextConst 'ENU=%1 is not a valid limit type for %2 %3.;ESP=%1 no es un tipo l¡mite v lido para el documento de %2 %3.';
      Text026@1023 : TextConst 'ENU=%1 is only a valid limit type for %2.;ESP=%1 s¢lo es un tipo l¡mite v lido para %2.';
      Text027@1024 : TextConst 'ENU=When Approval Type is blank, additional approvers must be added to the template.;ESP=Cuando Tipo aprobaci¢n est  vac¡o, deben agregarse aprobadores adicionales a la plantilla.';
      Text028@1012 : TextConst 'ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;ESP=Oferta,Pedido,Factura,Abono,Pedido abierto,Devoluci¢n';
      Text100@1048 : TextConst 'ENU=S-QUOTE;ESP=OFERTA-V';
      Text101@1047 : TextConst 'ENU=Sales Quote Approval;ESP=Aprobaci¢n oferta venta';
      Text102@1046 : TextConst 'ENU=S-ORDER;ESP=PEDIDO-V';
      Text103@1045 : TextConst 'ENU=Sales Order Approval;ESP=Aprobaci¢n pedido venta';
      Text104@1044 : TextConst 'ENU=S-INVOICE;ESP=FACTURA-V';
      Text105@1043 : TextConst 'ENU=Sales Invoice Approval;ESP=Aprobaci¢n factura venta';
      Text106@1042 : TextConst 'ENU=S-CREDIT MEMO;ESP=ABONO-V';
      Text107@1041 : TextConst 'ENU=Sales Credit Memo Approval;ESP=Aprobaci¢n abono venta';
      Text108@1040 : TextConst 'ENU=S-RETURN ORDER;ESP=PEDIDO DEVOLUCIàN-V';
      Text109@1039 : TextConst 'ENU=Sales Return Order Approval;ESP=Aprobaci¢n pedido dev. venta';
      Text110@1038 : TextConst 'ENU=S-BLANKET ORDER;ESP=PEDIDO ABIERTO-V';
      Text111@1037 : TextConst 'ENU=Sales Blanket Order Approval;ESP=Aprobaci¢n pedido abierto venta';
      Text112@1036 : TextConst 'ENU=P-QUOTE;ESP=OFERTA-C';
      Text113@1035 : TextConst 'ENU=Purchase Quote Approval;ESP=Aprobaci¢n oferta compra';
      Text114@1034 : TextConst 'ENU=P-ORDER;ESP=PEDIDO-C';
      Text115@1033 : TextConst 'ENU=Purchase Order Approval;ESP=Aprobaci¢n pedido compra';
      Text116@1032 : TextConst 'ENU=P-INVOICE;ESP=FACTURA-C';
      Text117@1031 : TextConst 'ENU=Purchase Invoice Approval;ESP=Aprobaci¢n factura compra';
      Text118@1030 : TextConst 'ENU=P-CREDIT MEMO;ESP=ABONO-C';
      Text119@1029 : TextConst 'ENU=Purchase Credit Memo Approval;ESP=Aprobaci¢n abono compra';
      Text120@1028 : TextConst 'ENU=P-RETURN ORDER;ESP=PEDIDO DEVOLUCIàN-C';
      Text121@1027 : TextConst 'ENU=Purchase Return Order Approval;ESP=Aprobaci¢n pedido dev. compra';
      Text122@1026 : TextConst 'ENU=P-BLANKET ORDER;ESP=PEDIDO ABIERTO-C';
      Text123@1025 : TextConst 'ENU=Purchase Blanket Order Approval;ESP=Aprobaci¢n pedido abierto compra';
      Text124@1051 : TextConst 'ENU=S-O-CREDITLIMIT;ESP=LIMITECREDITO-P-V';
      Text125@1052 : TextConst 'ENU=Sales Order Credit Limit Apporval;ESP=Aprobaci¢n l¡mite cr‚dito pedido venta';
      Text126@1053 : TextConst 'ENU=S-I-CREDITLIMIT;ESP=LIMITECREDITO-F-V';
      Text127@1054 : TextConst 'ENU=Sales Invoice Credit Limit Apporval;ESP=Aprobaci¢n l¡mite cr‚dito factura venta';
      Text128@1055 : TextConst 'ENU=%1 %2 has been automatically approved. Status changed to Pending Prepayment.;ESP=El documento de %1 %2 se ha aprobado autom ticamente. El estado cambi¢ a Prepago pendiente.';
      Text129@1004 : TextConst 'ENU=No Approval Templates are enabled for document type %1.;ESP=No hay ninguna plantilla de aprobaci¢n activada para tipo documento %1.';
      IsOpenStatusSet@1017 : Boolean;
      Text130@1010 : TextConst 'ENU=The approval request cannot be canceled because the order has already been released. To  modify this order, you must reopen it.;ESP=No se puede cancelar la solicitud de aprobaci¢n porque el pedido ya se ha emitido. Para modificarlo, debe volver a abrirlo.';

    PROCEDURE SendSalesApprovalRequest@1(VAR SalesHeader@1000 : Record 36) : Boolean;
    VAR
      Cust@1007 : Record 18;
      TemplateRec@1005 : Record 464;
      ApprovalSetup@1001 : Record 452;
      MessageType@1003 : ' ,AutomaticPrePayment,AutomaticRelease,RequiresApproval';
    BEGIN
      TestSetup;
      WITH SalesHeader DO BEGIN
        IF Status <> Status::Open THEN
          EXIT(FALSE);

        IF NOT ApprovalSetup.GET THEN
          ERROR(Text004);

        IF NOT SalesLinesExist THEN
          ERROR(Text015,FORMAT("Document Type"),"No.");

        TemplateRec.SETCURRENTKEY("Table ID","Document Type",Enabled);
        TemplateRec.SETRANGE("Table ID",DATABASE::"Sales Header");
        TemplateRec.SETRANGE("Document Type","Document Type");
        TemplateRec.SETRANGE(Enabled,TRUE);
        IF TemplateRec.FIND('-') THEN BEGIN
          REPEAT
            IF NOT FindApproverSales(SalesHeader,ApprovalSetup,TemplateRec) THEN
              ERROR(Text010);
          UNTIL TemplateRec.NEXT = 0;
          FinishApprovalEntrySales(SalesHeader,ApprovalSetup,MessageType);
          CASE MessageType OF
            MessageType::AutomaticPrePayment:MESSAGE(Text128,SalesHeader."Document Type",SalesHeader."No.");
            MessageType::AutomaticRelease:MESSAGE(Text003,SalesHeader."Document Type",SalesHeader."No.");
            MessageType::RequiresApproval: MESSAGE(Text001,"Document Type","No.");
          END;
        END ELSE
          ERROR(STRSUBSTNO(Text129,SalesHeader."Document Type"));
      END;
    END;

    PROCEDURE CancelSalesApprovalRequest@2(VAR SalesHeader@1000 : Record 36;ShowMessage@1003 : Boolean;ManualCancel@1004 : Boolean) : Boolean;
    VAR
      ApprovalEntry@1002 : Record 454;
      ApprovalSetup@1006 : Record 452;
      AppManagement@1001 : Codeunit 440;
      SendMail@1007 : Boolean;
      MailCreated@1005 : Boolean;
    BEGIN
      TestSetup;

      IF ((SalesHeader.Status = SalesHeader.Status::"Pending Approval") OR
                (SalesHeader.Status = SalesHeader.Status::"Pending Prepayment"))
      THEN BEGIN

        IF NOT ApprovalSetup.GET THEN
          ERROR(Text004);

        WITH SalesHeader DO BEGIN
          ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
          ApprovalEntry.SETRANGE("Table ID",DATABASE::"Sales Header");
          ApprovalEntry.SETRANGE("Document Type","Document Type");
          ApprovalEntry.SETRANGE("Document No.","No.");
          ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Rejected,ApprovalEntry.Status::Canceled);
          SendMail := FALSE;
          IF ApprovalEntry.FIND('-') THEN BEGIN
            REPEAT
              IF (ApprovalEntry.Status = ApprovalEntry.Status::Open) OR
                 (ApprovalEntry.Status = ApprovalEntry.Status::Approved) THEN
                SendMail := TRUE;
              ApprovalEntry.Status := ApprovalEntry.Status::Canceled;
              ApprovalEntry."Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
              ApprovalEntry."Last Modified By ID" := USERID;
              ApprovalEntry.MODIFY;
              IF ApprovalSetup.Cancellations AND ShowMessage AND SendMail THEN BEGIN
                AppManagement.SendSalesCancellationsMail(SalesHeader,ApprovalEntry);
                MailCreated := TRUE;
                SendMail := FALSE;
              END;
            UNTIL ApprovalEntry.NEXT = 0;
            IF MailCreated THEN BEGIN
              AppManagement.SendMail;
              MailCreated := FALSE;
            END;
          END;

          IF ManualCancel OR (NOT ManualCancel AND NOT (Status = Status::Released)) THEN
            Status := Status::Open;
          MODIFY(TRUE);
        END;
        IF ShowMessage THEN
          MESSAGE(Text002,SalesHeader."Document Type",SalesHeader."No.");
      END
      ELSE
        MESSAGE(Text130);
    END;

    PROCEDURE SendPurchaseApprovalRequest@3(VAR PurchaseHeader@1000 : Record 38) : Boolean;
    VAR
      TemplateRec@1004 : Record 464;
      ApprovalSetup@1001 : Record 452;
      MessageType@1002 : ' ,AutomaticPrePayment,AutomaticRelease,RequiresApproval';
    BEGIN
      TestSetup;
      WITH PurchaseHeader DO BEGIN
        IF Status <> Status::Open THEN
          EXIT(FALSE);

        IF NOT ApprovalSetup.GET THEN
          ERROR(Text004);

        IF NOT PurchLinesExist THEN
          ERROR(Text015,FORMAT("Document Type"),"No.");

        TemplateRec.SETCURRENTKEY("Table ID","Document Type",Enabled);
        TemplateRec.SETRANGE("Table ID",DATABASE::"Purchase Header");
        TemplateRec.SETRANGE("Document Type","Document Type");
        TemplateRec.SETRANGE(Enabled,TRUE);
        IF TemplateRec.FIND('-') THEN BEGIN
          REPEAT
            IF TemplateRec."Limit Type" = TemplateRec."Limit Type"::"Credit Limits" THEN BEGIN
              ERROR(STRSUBSTNO(Text025,FORMAT(TemplateRec."Limit Type"),FORMAT("Document Type"),
                  "No."));
            END ELSE BEGIN
              IF NOT FindApproverPurchase(PurchaseHeader,ApprovalSetup,TemplateRec) THEN
                ERROR(Text010);
            END;
          UNTIL TemplateRec.NEXT = 0;
          FinishApprovalEntryPurchase(PurchaseHeader,ApprovalSetup,MessageType);
          CASE MessageType OF
            MessageType::AutomaticPrePayment:MESSAGE(Text128,PurchaseHeader."Document Type",PurchaseHeader."No.");
            MessageType::AutomaticRelease:MESSAGE(Text003,PurchaseHeader."Document Type",PurchaseHeader."No.");
            MessageType::RequiresApproval: MESSAGE(Text001,"Document Type","No.");
          END;
        END ELSE
          ERROR(STRSUBSTNO(Text129,PurchaseHeader."Document Type"));
      END;
    END;

    PROCEDURE CancelPurchaseApprovalRequest@4(VAR PurchaseHeader@1000 : Record 38;ShowMessage@1003 : Boolean;ManualCancel@1005 : Boolean) : Boolean;
    VAR
      ApprovalEntry@1002 : Record 454;
      ApprovalSetup@1007 : Record 452;
      AppManagement@1001 : Codeunit 440;
      SendMail@1004 : Boolean;
      MailCreated@1006 : Boolean;
    BEGIN
      TestSetup;
      IF ((PurchaseHeader.Status = PurchaseHeader.Status::"Pending Approval") OR
         (PurchaseHeader.Status = PurchaseHeader.Status::"Pending Prepayment"))
      THEN BEGIN

        IF NOT ApprovalSetup.GET THEN
          ERROR(Text004);

        WITH PurchaseHeader DO BEGIN
          ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
          ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
          ApprovalEntry.SETRANGE("Document Type","Document Type");
          ApprovalEntry.SETRANGE("Document No.","No.");
          ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Rejected,ApprovalEntry.Status::Canceled);
          SendMail := FALSE;
          IF ApprovalEntry.FIND('-') THEN BEGIN
            REPEAT
              IF (ApprovalEntry.Status = ApprovalEntry.Status::Open) OR
                 (ApprovalEntry.Status = ApprovalEntry.Status::Approved) THEN
                 SendMail := TRUE;
              ApprovalEntry.Status := ApprovalEntry.Status::Canceled;
              ApprovalEntry."Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
              ApprovalEntry."Last Modified By ID" := USERID;
              ApprovalEntry.MODIFY;
              IF ApprovalSetup.Cancellations AND ShowMessage AND SendMail THEN BEGIN
                AppManagement.SendPurchaseCancellationsMail(PurchaseHeader,ApprovalEntry);
                MailCreated := TRUE;
                SendMail := FALSE;
              END;
            UNTIL ApprovalEntry.NEXT = 0;
            IF MailCreated THEN BEGIN
              AppManagement.SendMail;
              MailCreated := FALSE;
            END;
          END;

          IF ManualCancel OR (NOT ManualCancel AND NOT (Status = Status::Released)) THEN
            Status := Status::Open;
          MODIFY(TRUE);
        END;
        IF ShowMessage THEN
          MESSAGE(Text002,PurchaseHeader."Document Type",PurchaseHeader."No.");
      END
      ELSE
        MESSAGE(Text130)
    END;

    PROCEDURE CheckApprSalesDocument@24(SalesHeader@1001 : Record 36) : Boolean;
    VAR
      ApprovalTemplate@1000 : Record 464;
    BEGIN
      ApprovalTemplate.SETCURRENTKEY("Table ID","Document Type",Enabled);
      ApprovalTemplate.SETRANGE("Table ID",DATABASE::"Sales Header");
      ApprovalTemplate.SETRANGE("Document Type",SalesHeader."Document Type");
      ApprovalTemplate.SETRANGE(Enabled,TRUE);
      IF ApprovalTemplate.FIND('-') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CheckApprPurchaseDocument@29(PurchaseHeader@1000 : Record 38) : Boolean;
    VAR
      ApprovalTemplate@1001 : Record 464;
    BEGIN
      ApprovalTemplate.SETCURRENTKEY("Table ID","Document Type",Enabled);
      ApprovalTemplate.SETRANGE("Table ID",DATABASE::"Purchase Header");
      ApprovalTemplate.SETRANGE("Document Type",PurchaseHeader."Document Type");
      ApprovalTemplate.SETRANGE(Enabled,TRUE);
      IF ApprovalTemplate.FIND('-') THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE SalesLines@23(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesLines@1001 : Record 37;
    BEGIN
      SalesLines.SETCURRENTKEY("Document Type","Document No.");
      SalesLines.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLines.SETRANGE("Document No.",SalesHeader."No.");
      IF SalesLines.FINDSET THEN BEGIN
        REPEAT
          IF (SalesLines.Quantity <> 0) AND (SalesLines."Line Amount" <> 0) THEN
            EXIT(TRUE);
        UNTIL SalesLines.NEXT = 0;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE FindApproverSales@13(SalesHeader@1002 : Record 36;ApprovalSetup@1003 : Record 452;AppTemplate@1000 : Record 464) : Boolean;
    VAR
      Cust@1014 : Record 18;
      UserSetup@1004 : Record 91;
      ApproverId@1006 : Code[20];
      ApprovalAmount@1011 : Decimal;
      ApprovalAmountLCY@1012 : Decimal;
      AboveCreditLimitAmountLCY@1015 : Decimal;
      InsertEntries@1016 : Boolean;
    BEGIN
      AddApproversTemp.RESET;
      AddApproversTemp.DELETEALL;

      CalcSalesDocAmount(SalesHeader,ApprovalAmount,ApprovalAmountLCY);

      CASE AppTemplate."Approval Type" OF
        AppTemplate."Approval Type"::"Sales Pers./Purchaser": BEGIN
            IF SalesHeader."Salesperson Code" = '' THEN
              ERROR(STRSUBSTNO(Text022,SalesHeader.FIELDCAPTION("Salesperson Code"),
                  FORMAT(SalesHeader."Document Type"),SalesHeader."No."))
            ELSE BEGIN
              CASE AppTemplate."Limit Type" OF
                AppTemplate."Limit Type"::"Approval Limits": BEGIN
                    AboveCreditLimitAmountLCY := CheckCreditLimit(SalesHeader);
                    UserSetup.SETCURRENTKEY("Salespers./Purch. Code");
                    UserSetup.SETRANGE("Salespers./Purch. Code",SalesHeader."Salesperson Code");
                    IF NOT UserSetup.FIND('-') THEN
                      ERROR(Text008,UserSetup."User ID",UserSetup.FIELDCAPTION("Salespers./Purch. Code"),
                        UserSetup."Salespers./Purch. Code")
                    ELSE BEGIN
                      ApproverId := UserSetup."User ID";
                      MakeApprovalEntry(
                        DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",SalesHeader."Salesperson Code",
                        ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                        SalesHeader."Currency Code",AppTemplate,AboveCreditLimitAmountLCY);
                      ApproverId := UserSetup."Approver ID";

                      IF NOT UserSetup."Unlimited Sales Approval" AND
                         ((ApprovalAmountLCY > UserSetup."Sales Amount Approval Limit") OR
                         (UserSetup."Sales Amount Approval Limit" = 0))
                      THEN BEGIN
                        UserSetup.RESET;
                        UserSetup.SETCURRENTKEY("User ID");
                        UserSetup.SETRANGE("User ID",ApproverId);
                        REPEAT
                          IF NOT UserSetup.FIND('-') THEN
                            ERROR(Text006,ApproverId);
                          ApproverId := UserSetup."User ID";
                          MakeApprovalEntry(
                            DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",'',
                            ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                            SalesHeader."Currency Code",AppTemplate,AboveCreditLimitAmountLCY);
                          UserSetup.SETRANGE("User ID",UserSetup."Approver ID");
                        UNTIL UserSetup."Unlimited Sales Approval" OR
                              ((ApprovalAmountLCY <= UserSetup."Sales Amount Approval Limit") AND
                              (UserSetup."Sales Amount Approval Limit" <> 0)) OR
                              (UserSetup."User ID" = UserSetup."Approver ID")
                      END;

                      CheckAddApprovers(AppTemplate);
                      AddApproversTemp.SETCURRENTKEY("Sequence No.");
                      IF AddApproversTemp.FIND('-') THEN REPEAT
                          ApproverId := AddApproversTemp."Approver ID";
                          MakeApprovalEntry(
                            DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",'',
                            ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                            SalesHeader."Currency Code",AppTemplate,AboveCreditLimitAmountLCY);
                        UNTIL AddApproversTemp.NEXT = 0;
                    END;
                  END;

                AppTemplate."Limit Type"::"Credit Limits": BEGIN
                    AboveCreditLimitAmountLCY := CheckCreditLimit(SalesHeader);
                    Cust.GET(SalesHeader."Bill-to Customer No.");
                    AppTemplate.CALCFIELDS("Additional Approvers");
                    IF NOT AppTemplate."Additional Approvers" THEN
                      ERROR(Text023)
                    ELSE
                      InsertAddApprovers(AppTemplate);
                    IF (AboveCreditLimitAmountLCY > 0) OR (Cust."Credit Limit (LCY)" = 0) THEN BEGIN
                        ApproverId := USERID;
                        MakeApprovalEntry(
                          DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",SalesHeader."Salesperson Code",
                          ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                          SalesHeader."Currency Code",AppTemplate,AboveCreditLimitAmountLCY);
                    END ELSE BEGIN
                      UserSetup.SETCURRENTKEY("Salespers./Purch. Code");
                      UserSetup.SETRANGE("Salespers./Purch. Code",SalesHeader."Salesperson Code");
                      IF NOT UserSetup.FIND('-') THEN
                        ERROR(Text008,UserSetup."User ID",UserSetup.FIELDCAPTION("Salespers./Purch. Code"),
                          UserSetup."Salespers./Purch. Code")
                      ELSE BEGIN
                        ApproverId := UserSetup."User ID";
                        MakeApprovalEntry(
                          DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",SalesHeader."Salesperson Code",
                          ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                          SalesHeader."Currency Code",AppTemplate,AboveCreditLimitAmountLCY);

                        AddApproversTemp.SETCURRENTKEY("Sequence No.");
                        IF AddApproversTemp.FIND('-') THEN BEGIN
                          REPEAT
                            ApproverId := AddApproversTemp."Approver ID";
                            MakeApprovalEntry(
                              DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",SalesHeader."Salesperson Code",
                              ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                              SalesHeader."Currency Code",AppTemplate,AboveCreditLimitAmountLCY);
                          UNTIL AddApproversTemp.NEXT = 0;
                        END;
                      END;
                    END;
                  END;

                AppTemplate."Limit Type"::"Request Limits":
                  ERROR(STRSUBSTNO(Text024,FORMAT(AppTemplate."Limit Type")));

                AppTemplate."Limit Type"::"No Limits": BEGIN
                    AboveCreditLimitAmountLCY := CheckCreditLimit(SalesHeader);
                    UserSetup.SETCURRENTKEY("Salespers./Purch. Code");
                    UserSetup.SETRANGE("Salespers./Purch. Code",SalesHeader."Salesperson Code");
                    IF NOT UserSetup.FIND('-') THEN
                      ERROR(Text008,UserSetup."User ID",UserSetup.FIELDCAPTION("Salespers./Purch. Code"),
                        UserSetup."Salespers./Purch. Code")
                    ELSE BEGIN
                      ApproverId := UserSetup."User ID";
                      MakeApprovalEntry(
                        DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",SalesHeader."Salesperson Code",
                        ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                        SalesHeader."Currency Code",AppTemplate,AboveCreditLimitAmountLCY);

                      CheckAddApprovers(AppTemplate);
                      AddApproversTemp.SETCURRENTKEY("Sequence No.");
                      IF AddApproversTemp.FIND('-') THEN REPEAT
                          ApproverId := AddApproversTemp."Approver ID";
                          MakeApprovalEntry(
                            DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",'',
                            ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                            SalesHeader."Currency Code",AppTemplate,AboveCreditLimitAmountLCY);
                        UNTIL AddApproversTemp.NEXT = 0;
                    END;
                  END;
              END;
            END;
          END;

        AppTemplate."Approval Type"::Approver: BEGIN
            CASE AppTemplate."Limit Type" OF
              AppTemplate."Limit Type"::"Approval Limits": BEGIN
                  AboveCreditLimitAmountLCY := CheckCreditLimit(SalesHeader);
                  UserSetup.SETRANGE("User ID",USERID);
                  IF NOT UserSetup.FIND('-') THEN
                    ERROR(Text005,USERID);
                  ApproverId := UserSetup."User ID";
                  MakeApprovalEntry(
                    DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",'',
                    ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                    SalesHeader."Currency Code",AppTemplate,AboveCreditLimitAmountLCY);
                  IF NOT UserSetup."Unlimited Sales Approval" AND
                     ((ApprovalAmountLCY > UserSetup."Sales Amount Approval Limit") OR
                     (UserSetup."Sales Amount Approval Limit" = 0))
                  THEN
                    REPEAT
                      UserSetup.SETRANGE("User ID",UserSetup."Approver ID");
                      IF NOT UserSetup.FIND('-') THEN
                        ERROR(Text005,USERID);
                      ApproverId := UserSetup."User ID";
                      MakeApprovalEntry(
                        DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",'',
                        ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                        SalesHeader."Currency Code",AppTemplate,AboveCreditLimitAmountLCY);
                    UNTIL UserSetup."Unlimited Sales Approval" OR
                          ((ApprovalAmountLCY <= UserSetup."Sales Amount Approval Limit") AND
                          (UserSetup."Sales Amount Approval Limit" <> 0)) OR
                          (UserSetup."User ID" = UserSetup."Approver ID");

                  CheckAddApprovers(AppTemplate);
                  AddApproversTemp.SETCURRENTKEY("Sequence No.");
                  IF AddApproversTemp.FIND('-') THEN REPEAT
                      ApproverId := AddApproversTemp."Approver ID";
                      MakeApprovalEntry(
                        DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",'',
                        ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                        SalesHeader."Currency Code",AppTemplate,AboveCreditLimitAmountLCY);
                    UNTIL AddApproversTemp.NEXT = 0;
                END;

              AppTemplate."Limit Type"::"Credit Limits": BEGIN
                  AboveCreditLimitAmountLCY := CheckCreditLimit(SalesHeader);
                  Cust.GET(SalesHeader."Bill-to Customer No.");

                  AppTemplate.CALCFIELDS("Additional Approvers");
                  IF NOT AppTemplate."Additional Approvers" THEN
                    ERROR(Text023)
                  ELSE
                    InsertAddApprovers(AppTemplate);
                  IF (AboveCreditLimitAmountLCY > 0) OR (Cust."Credit Limit (LCY)" = 0) THEN BEGIN
                    ApproverId := USERID;
                    MakeApprovalEntry(
                      DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",SalesHeader."Salesperson Code",
                      ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                      SalesHeader."Currency Code",AppTemplate,AboveCreditLimitAmountLCY);
                  END ELSE BEGIN
                    UserSetup.SETRANGE("User ID",USERID);
                    IF NOT UserSetup.FIND('-') THEN
                      ERROR(Text005,USERID);
                    ApproverId := UserSetup."Approver ID";
                    IF ApproverId = '' THEN
                      ApproverId := UserSetup."User ID";
                    MakeApprovalEntry(
                      DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",SalesHeader."Salesperson Code",
                      ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                      SalesHeader."Currency Code",AppTemplate,AboveCreditLimitAmountLCY);

                    AddApproversTemp.SETCURRENTKEY("Sequence No.");
                    IF AddApproversTemp.FIND('-') THEN BEGIN
                      REPEAT
                        ApproverId := AddApproversTemp."Approver ID";
                        MakeApprovalEntry(
                          DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",SalesHeader."Salesperson Code",
                          ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                          SalesHeader."Currency Code",AppTemplate,AboveCreditLimitAmountLCY);
                      UNTIL AddApproversTemp.NEXT = 0;
                    END;
                  END;
                END;

              AppTemplate."Limit Type"::"Request Limits":
                ERROR(STRSUBSTNO(Text024,FORMAT(AppTemplate."Limit Type")));

              AppTemplate."Limit Type"::"No Limits": BEGIN
                  AboveCreditLimitAmountLCY := CheckCreditLimit(SalesHeader);
                  UserSetup.SETRANGE("User ID",USERID);
                  IF NOT UserSetup.FIND('-') THEN
                    ERROR(Text005,USERID);
                  ApproverId := UserSetup."Approver ID";
                  IF ApproverId = '' THEN
                    ApproverId := UserSetup."User ID";
                  MakeApprovalEntry(
                    DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",'',
                    ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                    SalesHeader."Currency Code",AppTemplate,AboveCreditLimitAmountLCY);
                END;
            END;
          END;

        AppTemplate."Approval Type"::" ": BEGIN
            AboveCreditLimitAmountLCY := CheckCreditLimit(SalesHeader);
            InsertEntries := FALSE;
            Cust.GET(SalesHeader."Bill-to Customer No.");
            IF AppTemplate."Limit Type" = AppTemplate."Limit Type"::"Credit Limits" THEN BEGIN
              IF (AboveCreditLimitAmountLCY > 0) OR (Cust."Credit Limit (LCY)" = 0) THEN BEGIN
                ApproverId := USERID;
                MakeApprovalEntry(
                  DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",'',
                  ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                  SalesHeader."Currency Code",AppTemplate,AboveCreditLimitAmountLCY);
              END ELSE
                InsertEntries := TRUE;
            END;
            IF NOT (AppTemplate."Limit Type" = AppTemplate."Limit Type"::"Credit Limits") OR InsertEntries THEN BEGIN
              CheckAddApprovers(AppTemplate);
              AddApproversTemp.SETCURRENTKEY("Sequence No.");
              IF AddApproversTemp.FIND('-') THEN
                REPEAT
                  ApproverId := AddApproversTemp."Approver ID";
                  MakeApprovalEntry(
                    DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",'',
                    ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                    SalesHeader."Currency Code",AppTemplate,AboveCreditLimitAmountLCY);
                UNTIL AddApproversTemp.NEXT = 0
              ELSE
                ERROR(Text027);
            END;
          END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE PurchaseLines@22(PurchaseHeader@1000 : Record 38) : Boolean;
    VAR
      PurchaseLines@1001 : Record 39;
    BEGIN
      PurchaseLines.SETCURRENTKEY("Document Type","Document No.");
      PurchaseLines.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLines.SETRANGE("Document No.",PurchaseHeader."No.");
      IF PurchaseLines.FINDSET THEN BEGIN
        REPEAT
          IF (PurchaseLines.Quantity <> 0) AND (PurchaseLines."Line Amount" <> 0) THEN
            EXIT(TRUE);
        UNTIL PurchaseLines.NEXT = 0;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE FindApproverPurchase@12(PurchaseHeader@1001 : Record 38;ApprovalSetup@1000 : Record 452;AppTemplate@1006 : Record 464) : Boolean;
    VAR
      UserSetup@1002 : Record 91;
      ApproverId@1003 : Code[20];
      ApprovalAmount@1013 : Decimal;
      ApprovalAmountLCY@1012 : Decimal;
    BEGIN
      AddApproversTemp.RESET;
      AddApproversTemp.DELETEALL;

      CalcPurchaseDocAmount(PurchaseHeader,ApprovalAmount,ApprovalAmountLCY);

      CASE AppTemplate."Approval Type" OF
        AppTemplate."Approval Type"::"Sales Pers./Purchaser": BEGIN
            IF PurchaseHeader."Purchaser Code" <> '' THEN BEGIN
              CASE AppTemplate."Limit Type" OF
                AppTemplate."Limit Type"::"Approval Limits": BEGIN
                    UserSetup.SETCURRENTKEY("Salespers./Purch. Code");
                    UserSetup.SETRANGE("Salespers./Purch. Code",PurchaseHeader."Purchaser Code");
                    IF NOT UserSetup.FIND('-') THEN
                      ERROR(Text008,UserSetup."User ID",UserSetup.FIELDCAPTION("Salespers./Purch. Code"),
                        UserSetup."Salespers./Purch. Code")
                    ELSE BEGIN
                      ApproverId := UserSetup."User ID";
                      MakeApprovalEntry(
                        DATABASE::"Purchase Header",PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseHeader."Purchaser Code",
                        ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                        PurchaseHeader."Currency Code",AppTemplate,0);
                      ApproverId := UserSetup."Approver ID";
                      IF NOT UserSetup."Unlimited Purchase Approval" AND
                         ((ApprovalAmountLCY > UserSetup."Purchase Amount Approval Limit") OR
                         (UserSetup."Purchase Amount Approval Limit" = 0))
                      THEN BEGIN
                        UserSetup.RESET;
                        UserSetup.SETCURRENTKEY("User ID");
                        UserSetup.SETRANGE("User ID",ApproverId);
                        REPEAT
                          IF NOT UserSetup.FIND('-') THEN
                            ERROR(Text006,ApproverId);
                          ApproverId := UserSetup."User ID";
                          MakeApprovalEntry(
                            DATABASE::"Purchase Header",PurchaseHeader."Document Type",PurchaseHeader."No.",'',
                            ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                            PurchaseHeader."Currency Code",AppTemplate,0);
                          UserSetup.SETRANGE("User ID",UserSetup."Approver ID");
                        UNTIL UserSetup."Unlimited Purchase Approval" OR
                              ((ApprovalAmountLCY <= UserSetup."Purchase Amount Approval Limit") AND
                              (UserSetup."Purchase Amount Approval Limit" <> 0))OR
                              (UserSetup."User ID" = UserSetup."Approver ID")
                      END;
                    END;

                    CheckAddApprovers(AppTemplate);
                    AddApproversTemp.SETCURRENTKEY("Sequence No.");
                    IF AddApproversTemp.FIND('-') THEN REPEAT
                        ApproverId := AddApproversTemp."Approver ID";
                        MakeApprovalEntry(
                          DATABASE::"Purchase Header",PurchaseHeader."Document Type",PurchaseHeader."No.",'',
                          ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                          PurchaseHeader."Currency Code",AppTemplate,0);
                      UNTIL AddApproversTemp.NEXT = 0;
                  END;

                AppTemplate."Limit Type"::"Request Limits": BEGIN
                    IF PurchaseHeader."Document Type" <> PurchaseHeader."Document Type"::Quote THEN
                      ERROR(STRSUBSTNO(Text026,FORMAT(AppTemplate."Limit Type"),FORMAT(PurchaseHeader."Document Type"::Quote)))
                    ELSE BEGIN
                      UserSetup.SETCURRENTKEY("Salespers./Purch. Code");
                      UserSetup.SETRANGE("Salespers./Purch. Code",PurchaseHeader."Purchaser Code");
                      IF NOT UserSetup.FIND('-') THEN
                        ERROR(Text008,UserSetup."User ID",UserSetup.FIELDCAPTION("Salespers./Purch. Code"),
                          UserSetup."Salespers./Purch. Code");
                      UserSetup.RESET;
                      UserSetup.SETRANGE("User ID",USERID);
                      IF NOT UserSetup.FIND('-') THEN
                        ERROR(Text005,USERID);
                      ApproverId := UserSetup."User ID";
                      MakeApprovalEntry(
                        DATABASE::"Purchase Header",PurchaseHeader."Document Type",PurchaseHeader."No.",'',
                        ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                        PurchaseHeader."Currency Code",AppTemplate,0);

                      IF NOT UserSetup."Unlimited Request Approval" AND
                         ((ApprovalAmountLCY > UserSetup."Request Amount Approval Limit") OR
                          (UserSetup."Request Amount Approval Limit" = 0))
                      THEN
                        REPEAT
                          UserSetup.SETRANGE("User ID",UserSetup."Approver ID");
                          IF NOT UserSetup.FIND('-') THEN
                            ERROR(Text005,USERID);
                          ApproverId := UserSetup."User ID";
                          MakeApprovalEntry(
                            DATABASE::"Purchase Header",PurchaseHeader."Document Type",PurchaseHeader."No.",'',
                            ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                            PurchaseHeader."Currency Code",AppTemplate,0);
                        UNTIL UserSetup."Unlimited Request Approval" OR
                              ((ApprovalAmountLCY <= UserSetup."Request Amount Approval Limit") AND
                               (UserSetup."Request Amount Approval Limit" <> 0)) OR
                              (UserSetup."User ID" = UserSetup."Approver ID");

                      CheckAddApprovers(AppTemplate);
                      AddApproversTemp.SETCURRENTKEY("Sequence No.");
                      IF AddApproversTemp.FIND('-') THEN REPEAT
                          ApproverId := AddApproversTemp."Approver ID";
                          MakeApprovalEntry(
                            DATABASE::"Purchase Header",PurchaseHeader."Document Type",PurchaseHeader."No.",'',
                            ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                            PurchaseHeader."Currency Code",AppTemplate,0);
                        UNTIL AddApproversTemp.NEXT = 0;
                    END;
                  END;

                AppTemplate."Limit Type"::"No Limits": BEGIN
                    UserSetup.SETCURRENTKEY("Salespers./Purch. Code");
                    UserSetup.SETRANGE("Salespers./Purch. Code",PurchaseHeader."Purchaser Code");
                    IF NOT UserSetup.FIND('-') THEN
                      ERROR(Text008,UserSetup."User ID",UserSetup.FIELDCAPTION("Salespers./Purch. Code"),
                        UserSetup."Salespers./Purch. Code")
                    ELSE BEGIN
                      ApproverId := UserSetup."User ID";
                      MakeApprovalEntry(
                        DATABASE::"Purchase Header",PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseHeader."Purchaser Code",
                        ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                        PurchaseHeader."Currency Code",AppTemplate,0);

                      CheckAddApprovers(AppTemplate);
                      AddApproversTemp.SETCURRENTKEY("Sequence No.");
                      IF AddApproversTemp.FIND('-') THEN REPEAT
                          ApproverId := AddApproversTemp."Approver ID";
                          MakeApprovalEntry(
                            DATABASE::"Purchase Header",PurchaseHeader."Document Type",PurchaseHeader."No.",'',
                            ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                            PurchaseHeader."Currency Code",AppTemplate,0);
                        UNTIL AddApproversTemp.NEXT = 0;
                    END;
                  END;
              END;
            END;
          END;

        AppTemplate."Approval Type"::Approver: BEGIN
            UserSetup.SETRANGE("User ID",USERID);
            IF NOT UserSetup.FIND('-') THEN
              ERROR(Text005,USERID);

            CASE AppTemplate."Limit Type" OF
              AppTemplate."Limit Type"::"Approval Limits": BEGIN
                  ApproverId := UserSetup."User ID";
                  MakeApprovalEntry(
                    DATABASE::"Purchase Header",PurchaseHeader."Document Type",PurchaseHeader."No.",'',
                    ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                    PurchaseHeader."Currency Code",AppTemplate,0);
                  IF NOT UserSetup."Unlimited Purchase Approval" AND
                     ((ApprovalAmountLCY > UserSetup."Purchase Amount Approval Limit") OR
                     (UserSetup."Purchase Amount Approval Limit" = 0))
                  THEN
                    REPEAT
                      UserSetup.SETRANGE("User ID",UserSetup."Approver ID");
                      IF NOT UserSetup.FIND('-') THEN
                        ERROR(Text005,USERID);
                      ApproverId := UserSetup."User ID";
                      MakeApprovalEntry(
                        DATABASE::"Purchase Header",PurchaseHeader."Document Type",PurchaseHeader."No.",'',
                        ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                        PurchaseHeader."Currency Code",AppTemplate,0);
                    UNTIL UserSetup."Unlimited Purchase Approval" OR
                          ((ApprovalAmountLCY <= UserSetup."Purchase Amount Approval Limit") AND
                          (UserSetup."Purchase Amount Approval Limit" <> 0)) OR
                          (UserSetup."User ID" = UserSetup."Approver ID");

                  CheckAddApprovers(AppTemplate);
                  AddApproversTemp.SETCURRENTKEY("Sequence No.");
                  IF AddApproversTemp.FIND('-') THEN REPEAT
                      ApproverId := AddApproversTemp."Approver ID";
                      MakeApprovalEntry(
                        DATABASE::"Purchase Header",PurchaseHeader."Document Type",PurchaseHeader."No.",'',
                        ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                        PurchaseHeader."Currency Code",AppTemplate,0);
                    UNTIL AddApproversTemp.NEXT = 0;
                END;

              AppTemplate."Limit Type"::"Request Limits": BEGIN
                  IF PurchaseHeader."Document Type" <> PurchaseHeader."Document Type"::Quote THEN
                    ERROR(STRSUBSTNO(Text026,FORMAT(AppTemplate."Limit Type"),FORMAT(PurchaseHeader."Document Type"::Quote)))
                  ELSE BEGIN
                    UserSetup.SETRANGE("User ID",USERID);
                    IF NOT UserSetup.FIND('-') THEN
                      ERROR(Text005,USERID);
                    ApproverId := UserSetup."User ID";
                    MakeApprovalEntry(
                      DATABASE::"Purchase Header",PurchaseHeader."Document Type",PurchaseHeader."No.",'',
                      ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                      PurchaseHeader."Currency Code",AppTemplate,0);
                    IF NOT UserSetup."Unlimited Request Approval" AND
                       ((ApprovalAmountLCY > UserSetup."Request Amount Approval Limit") OR
                        (UserSetup."Request Amount Approval Limit" = 0))
                    THEN
                      REPEAT
                        UserSetup.SETRANGE("User ID",UserSetup."Approver ID");
                        IF NOT UserSetup.FIND('-') THEN
                          ERROR(Text005,USERID);
                        ApproverId := UserSetup."User ID";
                        MakeApprovalEntry(
                          DATABASE::"Purchase Header",PurchaseHeader."Document Type",PurchaseHeader."No.",'',
                          ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                          PurchaseHeader."Currency Code",AppTemplate,0);
                      UNTIL UserSetup."Unlimited Request Approval" OR
                            ((ApprovalAmountLCY <= UserSetup."Request Amount Approval Limit") AND
                             (UserSetup."Request Amount Approval Limit" <> 0)) OR
                            (UserSetup."User ID" = UserSetup."Approver ID");
                  END;

                  CheckAddApprovers(AppTemplate);
                  AddApproversTemp.SETCURRENTKEY("Sequence No.");
                  IF AddApproversTemp.FIND('-') THEN REPEAT
                      ApproverId := AddApproversTemp."Approver ID";
                      MakeApprovalEntry(
                        DATABASE::"Purchase Header",PurchaseHeader."Document Type",PurchaseHeader."No.",'',
                        ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                        PurchaseHeader."Currency Code",AppTemplate,0);
                    UNTIL AddApproversTemp.NEXT = 0;
                END;

              AppTemplate."Limit Type"::"No Limits": BEGIN
                  ApproverId := UserSetup."Approver ID";
                  IF ApproverId = '' THEN
                    ApproverId := UserSetup."User ID";
                  MakeApprovalEntry(
                    DATABASE::"Purchase Header",PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseHeader."Purchaser Code",
                    ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                    PurchaseHeader."Currency Code",AppTemplate,0);

                  CheckAddApprovers(AppTemplate);
                  AddApproversTemp.SETCURRENTKEY("Sequence No.");
                  IF AddApproversTemp.FIND('-') THEN REPEAT
                      ApproverId := AddApproversTemp."Approver ID";
                      MakeApprovalEntry(
                        DATABASE::"Purchase Header",PurchaseHeader."Document Type",PurchaseHeader."No.",'',
                        ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                        PurchaseHeader."Currency Code",AppTemplate,0);
                    UNTIL AddApproversTemp.NEXT = 0;
                END;
            END;
          END;

        AppTemplate."Approval Type"::" ": BEGIN
            CheckAddApprovers(AppTemplate);
            AddApproversTemp.SETCURRENTKEY("Sequence No.");
            IF AddApproversTemp.FIND('-') THEN
              REPEAT
                ApproverId := AddApproversTemp."Approver ID";
                MakeApprovalEntry(
                  DATABASE::"Purchase Header",PurchaseHeader."Document Type",PurchaseHeader."No.",'',
                  ApprovalSetup,ApproverId,AppTemplate."Approval Code",UserSetup,ApprovalAmount,ApprovalAmountLCY,
                  PurchaseHeader."Currency Code",AppTemplate,0);
              UNTIL AddApproversTemp.NEXT = 0
            ELSE
              ERROR(Text027);
          END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE MakeApprovalEntry@10(TableID@1011 : Integer;DocType@1000 : Integer;DocNo@1004 : Code[20];SalespersonPurchaser@1010 : Code[10];ApprovalSetup@1006 : Record 452;ApproverId@1003 : Code[20];ApprovalCode@1001 : Code[20];UserSetup@1007 : Record 91;ApprovalAmount@1008 : Decimal;ApprovalAmountLCY@1009 : Decimal;CurrencyCode@1012 : Code[10];AppTemplate@1013 : Record 464;ExeedAmountLCY@1014 : Decimal);
    VAR
      ApprovalEntry@1002 : Record 454;
      NewSequenceNo@1005 : Integer;
    BEGIN
      WITH ApprovalEntry DO BEGIN
        SETRANGE("Table ID",TableID);
        SETRANGE("Document Type",DocType);
        SETRANGE("Document No.",DocNo);
        IF FIND('+') THEN
          NewSequenceNo := "Sequence No." + 1
        ELSE
          NewSequenceNo := 1;
        "Table ID" := TableID;
        "Document Type" := DocType;
        "Document No." := DocNo;
        "Salespers./Purch. Code" := SalespersonPurchaser;
        "Sequence No." := NewSequenceNo;
        "Approval Code" := ApprovalCode;
        "Sender ID" := USERID;
        Amount := ApprovalAmount;
        "Amount (LCY)" := ApprovalAmountLCY;
        "Currency Code" := CurrencyCode;
        "Approver ID" := ApproverId;
        IF ApproverId = USERID THEN
          Status := Status::Approved
        ELSE
          Status := Status::Created;
        "Date-Time Sent for Approval" := CREATEDATETIME(TODAY,TIME);
        "Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
        "Last Modified By ID" := USERID;
        "Due Date" := CALCDATE(ApprovalSetup."Due Date Formula",TODAY);
        "Approval Type" := AppTemplate."Approval Type";
        "Limit Type" := AppTemplate."Limit Type";
        "Available Credit Limit (LCY)" := ExeedAmountLCY;
        INSERT;
      END;
    END;

    PROCEDURE ApproveApprovalRequest@5(ApprovalEntry@1000 : Record 454) : Boolean;
    VAR
      SalesHeader@1003 : Record 36;
      PurchaseHeader@1004 : Record 38;
      ApprovalSetup@1006 : Record 452;
      NextApprovalEntry@1005 : Record 454;
      ReleaseSalesDoc@1001 : Codeunit 414;
      ReleasePurchaseDoc@1002 : Codeunit 415;
      ApprovalMgtNotification@1007 : Codeunit 440;
    BEGIN
      IF ApprovalEntry."Table ID" <> 0 THEN BEGIN
        ApprovalEntry.Status := ApprovalEntry.Status::Approved;
        ApprovalEntry."Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
        ApprovalEntry."Last Modified By ID" := USERID;
        ApprovalEntry.MODIFY;
        NextApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.");
        NextApprovalEntry.SETRANGE("Table ID",ApprovalEntry."Table ID");
        NextApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type");
        NextApprovalEntry.SETRANGE("Document No.",ApprovalEntry."Document No.");
        NextApprovalEntry.SETFILTER(Status,'%1|%2',NextApprovalEntry.Status::Created,NextApprovalEntry.Status::Open);
        IF NextApprovalEntry.FIND('-') THEN BEGIN
          IF NextApprovalEntry.Status = NextApprovalEntry.Status::Open THEN
            EXIT(FALSE)
          ELSE BEGIN
            NextApprovalEntry.Status := NextApprovalEntry.Status::Open;
            NextApprovalEntry."Date-Time Sent for Approval" := CREATEDATETIME(TODAY,TIME);
            NextApprovalEntry."Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
            NextApprovalEntry."Last Modified By ID" := USERID;
            NextApprovalEntry.MODIFY;
            IF ApprovalSetup.GET THEN
              IF ApprovalSetup.Approvals THEN BEGIN
                IF ApprovalEntry."Table ID" = DATABASE::"Sales Header" THEN BEGIN
                  IF SalesHeader.GET(NextApprovalEntry."Document Type",NextApprovalEntry."Document No.") THEN
                    ApprovalMgtNotification.SendSalesApprovalsMail(SalesHeader,NextApprovalEntry);
                END ELSE
                  IF PurchaseHeader.GET(NextApprovalEntry."Document Type",NextApprovalEntry."Document No.") THEN
                    ApprovalMgtNotification.SendPurchaseApprovalsMail(PurchaseHeader,NextApprovalEntry);
                END;
            EXIT(FALSE);
          END;
        END ELSE BEGIN
          IF ApprovalEntry."Table ID" = DATABASE::"Sales Header" THEN BEGIN
            IF SalesHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.") THEN
              ReleaseSalesDoc.RUN(SalesHeader);
          END ELSE
            IF PurchaseHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.") THEN
              ReleasePurchaseDoc.RUN(PurchaseHeader);
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE RejectApprovalRequest@8(ApprovalEntry@1000 : Record 454);
    VAR
      ApprovalSetup@1008 : Record 452;
      SalesHeader2@1007 : Record 36;
      PurchaseHeader2@1003 : Record 38;
      SalesHeader@1006 : Record 36;
      PurchaseHeader@1005 : Record 38;
      ReleaseSalesDoc@1004 : Codeunit 414;
      ReleasePurchaseDoc@1001 : Codeunit 415;
      AppManagement@1009 : Codeunit 440;
      SendMail@1002 : Boolean;
    BEGIN
      IF ApprovalEntry."Table ID" <> 0 THEN BEGIN
        ApprovalSetup.GET;
        ApprovalEntry.Status := ApprovalEntry.Status::Rejected;
        ApprovalEntry."Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
        ApprovalEntry."Last Modified By ID" := USERID;
        ApprovalEntry.MODIFY;
        IF ApprovalSetup.Rejections THEN
          SendRejectionMail(ApprovalEntry,AppManagement);
        ApprovalEntry.SETCURRENTKEY("Table ID","Document Type","Document No.","Sequence No.");
        ApprovalEntry.SETRANGE("Table ID",ApprovalEntry."Table ID");
        ApprovalEntry.SETRANGE("Document Type",ApprovalEntry."Document Type");
        ApprovalEntry.SETRANGE("Document No.",ApprovalEntry."Document No.");
        ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Canceled,ApprovalEntry.Status::Rejected);
        IF ApprovalEntry.FIND('-') THEN
          REPEAT
            SendMail := FALSE;
            IF (ApprovalEntry.Status = ApprovalEntry.Status::Open) OR
               (ApprovalEntry.Status = ApprovalEntry.Status::Approved) THEN
              SendMail := TRUE;

            ApprovalEntry.Status := ApprovalEntry.Status::Rejected;
            ApprovalEntry."Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
            ApprovalEntry."Last Modified By ID" := USERID;
            ApprovalEntry.MODIFY;
            IF ApprovalSetup.Rejections AND SendMail THEN
              SendRejectionMail(ApprovalEntry,AppManagement);
          UNTIL ApprovalEntry.NEXT = 0;
        IF ApprovalSetup.Rejections THEN
          AppManagement.SendMail;
        IF ApprovalEntry."Table ID" = DATABASE::"Sales Header" THEN BEGIN
          SalesHeader.SETCURRENTKEY("Document Type","No.");
          SalesHeader.SETRANGE("Document Type",ApprovalEntry."Document Type");
          SalesHeader.SETRANGE("No.",ApprovalEntry."Document No.");
          IF SalesHeader.FIND('-') THEN
            ReleaseSalesDoc.Reopen(SalesHeader);
        END ELSE BEGIN
          PurchaseHeader.SETCURRENTKEY("Document Type","No.");
          PurchaseHeader.SETRANGE("Document Type",ApprovalEntry."Document Type");
          PurchaseHeader.SETRANGE("No.",ApprovalEntry."Document No.");
          IF PurchaseHeader.FIND('-') THEN
            ReleasePurchaseDoc.Reopen(PurchaseHeader);
        END;
      END;
    END;

    PROCEDURE DelegateApprovalRequest@20(ApprovalEntry@1000 : Record 454);
    VAR
      UserSetup@1001 : Record 91;
      ApprovalSetup@1002 : Record 452;
      SalesHeader@1005 : Record 36;
      PurchaseHeader@1004 : Record 38;
      AppManagement@1003 : Codeunit 440;
    BEGIN
      UserSetup.SETRANGE("User ID",ApprovalEntry."Approver ID");
      IF NOT UserSetup.FIND('-') THEN
        ERROR(Text005,ApprovalEntry."Approver ID");
      IF NOT ApprovalSetup.GET THEN
        ERROR(Text004);

      IF UserSetup.Substitute <> '' THEN BEGIN
        UserSetup.SETRANGE("User ID",UserSetup.Substitute);
        IF UserSetup.FIND('-') THEN BEGIN
          ApprovalEntry."Last Modified By ID" := USERID;
          ApprovalEntry."Last Date-Time Modified" := CREATEDATETIME(TODAY,TIME);
          ApprovalEntry."Approver ID" := UserSetup."User ID";
          ApprovalEntry.MODIFY;

          CASE ApprovalEntry."Table ID" OF
            36:
              BEGIN
                IF ApprovalSetup.Delegations THEN
                  IF SalesHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.") THEN
                    AppManagement.SendSalesDelegationsMail(SalesHeader,ApprovalEntry);
              END;
            38:
              BEGIN
                IF ApprovalSetup.Delegations THEN
                  IF PurchaseHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.") THEN
                    AppManagement.SendPurchaseDelegationsMail(PurchaseHeader,ApprovalEntry);
              END;
          END;
        END;
      END ELSE
        ERROR(Text007,UserSetup.FIELDCAPTION(Substitute),UserSetup."User ID");
    END;

    PROCEDURE PrePostApprovalCheck@6(SalesHeader@1000 : Record 36;PurchaseHeader@1001 : Record 38) : Boolean;
    VAR
      UserSetup@1004 : Record 91;
      AppAmountLCY@1002 : Decimal;
      AppAmount@1003 : Decimal;
    BEGIN
      IF SalesHeader."No." <> '' THEN BEGIN
        IF SalesHeader.Status = SalesHeader.Status::"Pending Approval" THEN BEGIN
          ERROR(Text013,SalesHeader."No.");
        END ELSE BEGIN
          IF NOT CheckApprSalesDocument(SalesHeader) THEN
            EXIT(TRUE)
          ELSE BEGIN
            IF (NOT (SalesHeader.Status = SalesHeader.Status::Released) AND
              NOT (SalesHeader.Status = SalesHeader.Status::"Pending Prepayment"))
            THEN
              ERROR(Text013,SalesHeader."No.")
            ELSE
              EXIT(TRUE);
          END;
        END;
      END ELSE BEGIN
        IF PurchaseHeader.Status = PurchaseHeader.Status::"Pending Approval" THEN BEGIN
          ERROR(Text013,PurchaseHeader."No.");
        END ELSE BEGIN
          IF NOT CheckApprPurchaseDocument(PurchaseHeader) THEN
            EXIT(TRUE)
          ELSE BEGIN
            IF (NOT (PurchaseHeader.Status = PurchaseHeader.Status::Released) AND
              NOT (PurchaseHeader.Status = PurchaseHeader.Status::"Pending Prepayment"))
            THEN
              ERROR(Text013,PurchaseHeader."No.")
            ELSE
              EXIT(TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE MoveApprvalEntryToPosted@14(VAR ApprovalEntry@1001 : Record 454;ToTableId@1002 : Integer;ToNo@1003 : Code[20]);
    VAR
      PostedApprvlEntry@1000 : Record 456;
      ApprovalCommentLine@1004 : Record 455;
      PostedApprovalCommentLine@1005 : Record 457;
    BEGIN
      WITH ApprovalEntry DO BEGIN
        IF FIND('-') THEN
          REPEAT
            PostedApprvlEntry.INIT;
            PostedApprvlEntry.TRANSFERFIELDS(ApprovalEntry);
            PostedApprvlEntry."Table ID" := ToTableId;
            PostedApprvlEntry."Document No." := ToNo;
            PostedApprvlEntry.INSERT;
          UNTIL NEXT = 0;
        ApprovalCommentLine.SETRANGE("Table ID","Table ID");
        ApprovalCommentLine.SETRANGE("Document Type","Document Type");
        ApprovalCommentLine.SETRANGE("Document No.","Document No.");
        IF ApprovalCommentLine.FIND('-') THEN
          REPEAT
            PostedApprovalCommentLine.INIT;
            PostedApprovalCommentLine.TRANSFERFIELDS(ApprovalCommentLine);
            PostedApprovalCommentLine."Entry No." := 0;
            PostedApprovalCommentLine."Table ID" := ToTableId;
            PostedApprovalCommentLine."Document No." := ToNo;
            PostedApprovalCommentLine.INSERT(TRUE);
          UNTIL ApprovalCommentLine.NEXT = 0;
      END;
    END;

    PROCEDURE DeleteApprovalEntry@9(TableId@1000 : Integer;DocumentType@1001 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocumentNo@1002 : Code[20]);
    VAR
      ApprovalEntry@1003 : Record 454;
    BEGIN
      ApprovalEntry.SETRANGE("Table ID",TableId);
      ApprovalEntry.SETRANGE("Document Type",DocumentType);
      ApprovalEntry.SETRANGE("Document No.",DocumentNo);
      DeleteApprovalCommentLine(TableId,DocumentType,DocumentNo);
      IF ApprovalEntry.FIND('-') THEN
        ApprovalEntry.DELETEALL;
    END;

    PROCEDURE DeleteApprovalCommentLine@15(TableId@1002 : Integer;DocumentType@1001 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocumentNo@1000 : Code[20]);
    VAR
      ApprovalCommentLine@1003 : Record 455;
    BEGIN
      ApprovalCommentLine.SETRANGE("Table ID",TableId);
      ApprovalCommentLine.SETRANGE("Document Type",DocumentType);
      ApprovalCommentLine.SETRANGE("Document No.",DocumentNo);
      IF ApprovalCommentLine.FIND('-') THEN
        ApprovalCommentLine.DELETEALL;
    END;

    PROCEDURE DeletePostedApprovalEntry@17(TableId@1000 : Integer;DocumentNo@1002 : Code[20]);
    VAR
      PostedApprovalEntry@1003 : Record 456;
    BEGIN
      PostedApprovalEntry.SETRANGE("Table ID",TableId);
      PostedApprovalEntry.SETRANGE("Document No.",DocumentNo);
      DeletePostedApprvlCommentLine(TableId,DocumentNo);
      IF PostedApprovalEntry.FIND('-') THEN
        PostedApprovalEntry.DELETEALL;
    END;

    PROCEDURE DeletePostedApprvlCommentLine@18(TableId@1002 : Integer;DocumentNo@1000 : Code[20]);
    VAR
      PostedApprovalCommentLine@1003 : Record 457;
    BEGIN
      PostedApprovalCommentLine.SETRANGE("Entry No.",TableId);
      PostedApprovalCommentLine.SETRANGE("Document No.",DocumentNo);
      IF PostedApprovalCommentLine.FIND('-') THEN
        PostedApprovalCommentLine.DELETEALL;
    END;

    PROCEDURE DisableSalesApproval@16(DocType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order');
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      SalesHeader.RESET;
      WITH SalesHeader DO BEGIN
        IF FIND('-') THEN
          REPEAT
            CancelSalesApprovalRequest(SalesHeader,FALSE,FALSE);
          UNTIL NEXT = 0;
      END;
      MESSAGE(Text014,SELECTSTR(1 + DocType,Text028));
    END;

    PROCEDURE DisablePurchaseApproval@11(DocType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order');
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      PurchaseHeader.RESET;
      WITH PurchaseHeader DO BEGIN
        SETRANGE("Document Type",DocType);
        REPEAT
          CancelPurchaseApprovalRequest(PurchaseHeader,FALSE,FALSE);
        UNTIL NEXT = 0;
      END;
      MESSAGE(Text014,SELECTSTR(1 + DocType,Text028));
    END;

    PROCEDURE CalcSalesDocAmount@21(SalesHeader@1000 : Record 36;VAR ApprovalAmount@1001 : Decimal;VAR ApprovalAmountLCY@1002 : Decimal);
    VAR
      TempSalesLine@1009 : TEMPORARY Record 37;
      TotalSalesLine@1008 : Record 37;
      TotalSalesLineLCY@1007 : Record 37;
      SalesPost@1006 : Codeunit 80;
      TempAmount@1005 : ARRAY [5] OF Decimal;
      VAtText@1004 : Text[30];
    BEGIN
      SalesPost.GetSalesLines(SalesHeader,TempSalesLine,0);
      CLEAR(SalesPost);
      SalesPost.SumSalesLinesTemp(
        SalesHeader,TempSalesLine,0,TotalSalesLine,TotalSalesLineLCY,
        TempAmount[1],VAtText,TempAmount[2],TempAmount[3],TempAmount[4]);
      ApprovalAmount := TotalSalesLine.Amount;
      ApprovalAmountLCY := TotalSalesLineLCY.Amount;
    END;

    PROCEDURE CalcPurchaseDocAmount@19(PurchaseHeader@1002 : Record 38;VAR ApprovalAmount@1001 : Decimal;VAR ApprovalAmountLCY@1000 : Decimal);
    VAR
      TempPurchaseLine@1009 : TEMPORARY Record 39;
      TotalPurchaseLine@1008 : Record 39;
      TotalPurchaseLineLCY@1007 : Record 39;
      PurchasePost@1006 : Codeunit 90;
      TempAmount@1005 : Decimal;
      VAtText@1004 : Text[30];
    BEGIN
      PurchasePost.GetPurchLines(PurchaseHeader,TempPurchaseLine,0);
      CLEAR(PurchasePost);
      PurchasePost.SumPurchLinesTemp(
        PurchaseHeader,TempPurchaseLine,0,TotalPurchaseLine,TotalPurchaseLineLCY,
        TempAmount,VAtText);
      ApprovalAmount := TotalPurchaseLine.Amount;
      ApprovalAmountLCY := TotalPurchaseLineLCY.Amount;
    END;

    PROCEDURE InsertAddApprovers@7(AppTemplate@1000 : Record 464);
    VAR
      AddApprovers@1001 : Record 465;
    BEGIN
      CLEAR(AddApproversTemp);
      AddApprovers.SETCURRENTKEY("Sequence No.");
      AddApprovers.SETRANGE("Approval Code",AppTemplate."Approval Code");
      AddApprovers.SETRANGE("Approval Type",AppTemplate."Approval Type");
      AddApprovers.SETRANGE("Document Type",AppTemplate."Document Type");
      AddApprovers.SETRANGE("Limit Type",AppTemplate."Limit Type");
      IF AddApprovers.FIND('-') THEN REPEAT
          AddApproversTemp := AddApprovers;
          AddApproversTemp.INSERT;
        UNTIL AddApprovers.NEXT = 0;
    END;

    PROCEDURE CheckCreditLimit@25(SalesHeader@1000 : Record 36) : Decimal;
    VAR
      SalesInfoPaneMgt@1002 : Codeunit 7171;
    BEGIN
      EXIT(SalesInfoPaneMgt.CalcAvailableCredit(SalesHeader."Bill-to Customer No."));
    END;

    PROCEDURE CheckAddApprovers@33(AppTemplate@1000 : Record 464);
    BEGIN
      AppTemplate.CALCFIELDS("Additional Approvers");
      IF AppTemplate."Additional Approvers" THEN
        InsertAddApprovers(AppTemplate);
    END;

    PROCEDURE SetupDefualtApprovals@26();
    VAR
      ApprovalCode@1000 : Record 453;
      ApprovalTemplate@1001 : Record 464;
      Object@1002 : Record 2000000001;
    BEGIN
      IF NOT ApprovalCode.FINDFIRST THEN BEGIN
        Object.SETRANGE(Type,Object.Type::Table);
        Object.SETRANGE(ID,DATABASE::"Sales Header");
        IF Object.FINDFIRST THEN;
        InsertDefaultApprovalCode(ApprovalCode,Text100,Text101,Object.ID,Object.Name);
        InsertDefaultApprovalCode(ApprovalCode,Text102,Text103,Object.ID,Object.Name);
        InsertDefaultApprovalCode(ApprovalCode,Text104,Text105,Object.ID,Object.Name);
        InsertDefaultApprovalCode(ApprovalCode,Text106,Text107,Object.ID,Object.Name);
        InsertDefaultApprovalCode(ApprovalCode,Text108,Text109,Object.ID,Object.Name);
        InsertDefaultApprovalCode(ApprovalCode,Text110,Text111,Object.ID,Object.Name);
        InsertDefaultApprovalCode(ApprovalCode,Text124,Text125,Object.ID,Object.Name);
        InsertDefaultApprovalCode(ApprovalCode,Text126,Text127,Object.ID,Object.Name);

        Object.SETRANGE(ID,DATABASE::"Purchase Header");
        IF Object.FINDFIRST THEN;
        InsertDefaultApprovalCode(ApprovalCode,Text112,Text113,Object.ID,Object.Name);
        InsertDefaultApprovalCode(ApprovalCode,Text114,Text115,Object.ID,Object.Name);
        InsertDefaultApprovalCode(ApprovalCode,Text116,Text117,Object.ID,Object.Name);
        InsertDefaultApprovalCode(ApprovalCode,Text118,Text119,Object.ID,Object.Name);
        InsertDefaultApprovalCode(ApprovalCode,Text120,Text121,Object.ID,Object.Name);
        InsertDefaultApprovalCode(ApprovalCode,Text122,Text123,Object.ID,Object.Name);
      END;

      IF NOT ApprovalTemplate.FINDFIRST AND ApprovalCode.FINDFIRST THEN
        REPEAT
          InsertDefaultApprovalTemplate(ApprovalTemplate,ApprovalCode);
        UNTIL ApprovalCode.NEXT = 0;
    END;

    PROCEDURE InsertDefaultApprovalCode@27(VAR ApprovalCodeRec@1000 : Record 453;ApprovalCode@1001 : Code[20];ApprovalName@1002 : Text[100];TableId@1003 : Integer;Tablename@1005 : Text[50]);
    BEGIN
      ApprovalCodeRec.INIT;
      ApprovalCodeRec.Code := ApprovalCode;
      ApprovalCodeRec.Description := ApprovalName;
      ApprovalCodeRec."Linked To Table Name" := Tablename;
      ApprovalCodeRec."Linked To Table No." := TableId;
      ApprovalCodeRec.INSERT;
    END;

    PROCEDURE InsertDefaultApprovalTemplate@28(VAR ApprovalTemplate@1000 : Record 464;ApprovalCode@1001 : Record 453);
    BEGIN
      CASE TRUE OF
        ApprovalCode.Code = Text100:
          BEGIN
            ApprovalTemplate.INIT;
            ApprovalTemplate."Approval Code" := ApprovalCode.Code;
            ApprovalTemplate."Approval Type" := ApprovalTemplate."Approval Type"::"Sales Pers./Purchaser";
            ApprovalTemplate."Document Type" := ApprovalTemplate."Document Type"::Quote;
            ApprovalTemplate."Limit Type" := ApprovalTemplate."Limit Type"::"No Limits";
            ApprovalTemplate."Table ID" := ApprovalCode."Linked To Table No.";
            ApprovalTemplate.INSERT;
          END;
        ApprovalCode.Code = Text102:
          BEGIN
            ApprovalTemplate.INIT;
            ApprovalTemplate."Approval Code" := ApprovalCode.Code;
            ApprovalTemplate."Approval Type" := ApprovalTemplate."Approval Type"::"Sales Pers./Purchaser";
            ApprovalTemplate."Document Type" := ApprovalTemplate."Document Type"::Order;
            ApprovalTemplate."Limit Type" := ApprovalTemplate."Limit Type"::"Approval Limits";
            ApprovalTemplate."Table ID" := ApprovalCode."Linked To Table No.";
            ApprovalTemplate.INSERT;
          END;
        ApprovalCode.Code = Text104:
          BEGIN
            ApprovalTemplate.INIT;
            ApprovalTemplate."Approval Code" := ApprovalCode.Code;
            ApprovalTemplate."Approval Type" := ApprovalTemplate."Approval Type"::"Sales Pers./Purchaser";
            ApprovalTemplate."Document Type" := ApprovalTemplate."Document Type"::Invoice;
            ApprovalTemplate."Limit Type" := ApprovalTemplate."Limit Type"::"No Limits";
            ApprovalTemplate."Table ID" := ApprovalCode."Linked To Table No.";
            ApprovalTemplate.INSERT;
          END;
        ApprovalCode.Code = Text106:
          BEGIN
            ApprovalTemplate.INIT;
            ApprovalTemplate."Approval Code" := ApprovalCode.Code;
            ApprovalTemplate."Approval Type" := ApprovalTemplate."Approval Type"::"Sales Pers./Purchaser";
            ApprovalTemplate."Document Type" := ApprovalTemplate."Document Type"::"Credit Memo";
            ApprovalTemplate."Limit Type" := ApprovalTemplate."Limit Type"::"No Limits";
            ApprovalTemplate."Table ID" := ApprovalCode."Linked To Table No.";
            ApprovalTemplate.INSERT;
          END;
        ApprovalCode.Code = Text108:
          BEGIN
            ApprovalTemplate.INIT;
            ApprovalTemplate."Approval Code" := ApprovalCode.Code;
            ApprovalTemplate."Approval Type" := ApprovalTemplate."Approval Type"::"Sales Pers./Purchaser";
            ApprovalTemplate."Document Type" := ApprovalTemplate."Document Type"::"Return Order";
            ApprovalTemplate."Limit Type" := ApprovalTemplate."Limit Type"::"No Limits";
            ApprovalTemplate."Table ID" := ApprovalCode."Linked To Table No.";
            ApprovalTemplate.INSERT;
          END;
        ApprovalCode.Code = Text110:
          BEGIN
            ApprovalTemplate.INIT;
            ApprovalTemplate."Approval Code" := ApprovalCode.Code;
            ApprovalTemplate."Approval Type" := ApprovalTemplate."Approval Type"::" ";
            ApprovalTemplate."Document Type" := ApprovalTemplate."Document Type"::"Blanket Order";
            ApprovalTemplate."Limit Type" := ApprovalTemplate."Limit Type"::"No Limits";
            ApprovalTemplate."Table ID" := ApprovalCode."Linked To Table No.";
            ApprovalTemplate.INSERT;
          END;
        ApprovalCode.Code = Text112:
          BEGIN
            ApprovalTemplate.INIT;
            ApprovalTemplate."Approval Code" := ApprovalCode.Code;
            ApprovalTemplate."Approval Type" := ApprovalTemplate."Approval Type"::Approver;
            ApprovalTemplate."Document Type" := ApprovalTemplate."Document Type"::Quote;
            ApprovalTemplate."Limit Type" := ApprovalTemplate."Limit Type"::"Request Limits";
            ApprovalTemplate."Table ID" := ApprovalCode."Linked To Table No.";
            ApprovalTemplate.INSERT;
          END;
        ApprovalCode.Code = Text114:
          BEGIN
            ApprovalTemplate.INIT;
            ApprovalTemplate."Approval Code" := ApprovalCode.Code;
            ApprovalTemplate."Approval Type" := ApprovalTemplate."Approval Type"::"Sales Pers./Purchaser";
            ApprovalTemplate."Document Type" := ApprovalTemplate."Document Type"::Order;
            ApprovalTemplate."Limit Type" := ApprovalTemplate."Limit Type"::"Approval Limits";
            ApprovalTemplate."Table ID" := ApprovalCode."Linked To Table No.";
            ApprovalTemplate.INSERT;
          END;
        ApprovalCode.Code = Text116:
          BEGIN
            ApprovalTemplate.INIT;
            ApprovalTemplate."Approval Code" := ApprovalCode.Code;
            ApprovalTemplate."Approval Type" := ApprovalTemplate."Approval Type"::"Sales Pers./Purchaser";
            ApprovalTemplate."Document Type" := ApprovalTemplate."Document Type"::Invoice;
            ApprovalTemplate."Limit Type" := ApprovalTemplate."Limit Type"::"No Limits";
            ApprovalTemplate."Table ID" := ApprovalCode."Linked To Table No.";
            ApprovalTemplate.INSERT;
          END;
        ApprovalCode.Code = Text118:
          BEGIN
            ApprovalTemplate.INIT;
            ApprovalTemplate."Approval Code" := ApprovalCode.Code;
            ApprovalTemplate."Approval Type" := ApprovalTemplate."Approval Type"::"Sales Pers./Purchaser";
            ApprovalTemplate."Document Type" := ApprovalTemplate."Document Type"::"Credit Memo";
            ApprovalTemplate."Limit Type" := ApprovalTemplate."Limit Type"::"No Limits";
            ApprovalTemplate."Table ID" := ApprovalCode."Linked To Table No.";
            ApprovalTemplate.INSERT;
          END;
        ApprovalCode.Code = Text120:
          BEGIN
            ApprovalTemplate.INIT;
            ApprovalTemplate."Approval Code" := ApprovalCode.Code;
            ApprovalTemplate."Approval Type" := ApprovalTemplate."Approval Type"::"Sales Pers./Purchaser";
            ApprovalTemplate."Document Type" := ApprovalTemplate."Document Type"::"Return Order";
            ApprovalTemplate."Limit Type" := ApprovalTemplate."Limit Type"::"No Limits";
            ApprovalTemplate."Table ID" := ApprovalCode."Linked To Table No.";
            ApprovalTemplate.INSERT;
          END;
        ApprovalCode.Code = Text122:
          BEGIN
            ApprovalTemplate.INIT;
            ApprovalTemplate."Approval Code" := ApprovalCode.Code;
            ApprovalTemplate."Approval Type" := ApprovalTemplate."Approval Type"::" ";
            ApprovalTemplate."Document Type" := ApprovalTemplate."Document Type"::"Blanket Order";
            ApprovalTemplate."Limit Type" := ApprovalTemplate."Limit Type"::"No Limits";
            ApprovalTemplate."Table ID" := ApprovalCode."Linked To Table No.";
            ApprovalTemplate.INSERT;
          END;
        ApprovalCode.Code = Text124:
          BEGIN
            ApprovalTemplate.INIT;
            ApprovalTemplate."Approval Code" := ApprovalCode.Code;
            ApprovalTemplate."Approval Type" := ApprovalTemplate."Approval Type"::" ";
            ApprovalTemplate."Document Type" := ApprovalTemplate."Document Type"::Order;
            ApprovalTemplate."Limit Type" := ApprovalTemplate."Limit Type"::"Credit Limits";
            ApprovalTemplate."Table ID" := ApprovalCode."Linked To Table No.";
            ApprovalTemplate.INSERT;
          END;
        ApprovalCode.Code = Text126:
          BEGIN
            ApprovalTemplate.INIT;
            ApprovalTemplate."Approval Code" := ApprovalCode.Code;
            ApprovalTemplate."Approval Type" := ApprovalTemplate."Approval Type"::" ";
            ApprovalTemplate."Document Type" := ApprovalTemplate."Document Type"::Invoice;
            ApprovalTemplate."Limit Type" := ApprovalTemplate."Limit Type"::"Credit Limits";
            ApprovalTemplate."Table ID" := ApprovalCode."Linked To Table No.";
            ApprovalTemplate.INSERT;
          END;
      END;
    END;

    PROCEDURE TestSalesPrepayment@31(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesLines@1001 : Record 37;
    BEGIN
      SalesLines.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLines.SETRANGE("Document No.",SalesHeader."No.");
      SalesLines.SETFILTER("Prepmt. Line Amount",'<>%1',0);
      IF SalesLines.FIND('-') THEN BEGIN
        REPEAT
          IF SalesLines."Prepmt. Amt. Inv." <> SalesLines."Prepmt. Line Amount" THEN
            EXIT(TRUE);
        UNTIL SalesLines.NEXT = 0;
      END;
    END;

    PROCEDURE TestPurchasePrepayment@30(PurchaseHeader@1000 : Record 38) : Boolean;
    VAR
      PurchaseLines@1001 : Record 39;
    BEGIN
      PurchaseLines.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLines.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLines.SETFILTER("Prepmt. Line Amount",'<>%1',0);
      IF PurchaseLines.FIND('-') THEN BEGIN
        REPEAT
          IF PurchaseLines."Prepmt. Amt. Inv." <> PurchaseLines."Prepmt. Line Amount" THEN
            EXIT(TRUE);
        UNTIL PurchaseLines.NEXT = 0;
      END;
    END;

    PROCEDURE TestSetup@32();
    VAR
      ApprovalSetup@1000 : Record 452;
    BEGIN
      IF NOT ApprovalSetup.GET THEN
        ERROR(Text004);
    END;

    PROCEDURE TestSalesPayment@34(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesSetup@1002 : Record 311;
      CustLedgerEntry@1004 : Record 21;
      SalesInvHeader@1005 : Record 112;
      EntryFound@1006 : Boolean;
    BEGIN
      EntryFound := FALSE;
      SalesSetup.GET;
      IF SalesSetup."Check Prepmt. when Posting" THEN BEGIN
        SalesInvHeader.SETCURRENTKEY("Prepayment Order No.","Prepayment Invoice");
        SalesInvHeader.SETRANGE("Prepayment Order No.",SalesHeader."No.");
        SalesInvHeader.SETRANGE("Prepayment Invoice",TRUE);
        IF SalesInvHeader.FIND('-') THEN BEGIN
          REPEAT
            CustLedgerEntry.SETCURRENTKEY("Document No.");
            CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
            CustLedgerEntry.SETRANGE("Document No.",SalesInvHeader."No.");
            CustLedgerEntry.SETFILTER("Remaining Amt. (LCY)",'<>%1',0);
            IF CustLedgerEntry.FIND('-') THEN
              EntryFound := TRUE;
          UNTIL (SalesInvHeader.NEXT = 0) OR (EntryFound);
        END;
      END;
      IF EntryFound THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE TestPurchasePayment@35(PurchaseHeader@1004 : Record 38) : Boolean;
    VAR
      PurchaseSetup@1003 : Record 312;
      VendLedgerEntry@1002 : Record 25;
      PurchaseInvHeader@1001 : Record 122;
      EntryFound@1000 : Boolean;
    BEGIN
      EntryFound := FALSE;
      PurchaseSetup.GET;
      IF PurchaseSetup."Check Prepmt. when Posting" THEN BEGIN
        PurchaseInvHeader.SETCURRENTKEY("Prepayment Order No.","Prepayment Invoice");
        PurchaseInvHeader.SETRANGE("Prepayment Order No.",PurchaseHeader."No.");
        PurchaseInvHeader.SETRANGE("Prepayment Invoice",TRUE);
        IF PurchaseInvHeader.FIND('-') THEN BEGIN
          REPEAT
            VendLedgerEntry.SETCURRENTKEY("Document No.");
            VendLedgerEntry.SETRANGE("Document Type",VendLedgerEntry."Document Type"::Invoice);
            VendLedgerEntry.SETRANGE("Document No.",PurchaseInvHeader."No.");
            VendLedgerEntry.SETFILTER("Remaining Amt. (LCY)",'<>%1',0);
            IF VendLedgerEntry.FIND('-') THEN
              EntryFound := TRUE;
          UNTIL (PurchaseInvHeader.NEXT = 0) OR (EntryFound);
        END;
      END;
      IF EntryFound THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE SendRejectionMail@36(ApprovalEntry@1000 : Record 454;AppManagement@1003 : Codeunit 440);
    VAR
      SalesHeader@1001 : Record 36;
      PurchaseHeader@1002 : Record 38;
    BEGIN
      CASE ApprovalEntry."Table ID" OF
        36:
          BEGIN
            IF SalesHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.") THEN
              AppManagement.SendSalesRejectionsMail(SalesHeader,ApprovalEntry);
          END;
        38:
          BEGIN
            IF PurchaseHeader.GET(ApprovalEntry."Document Type",ApprovalEntry."Document No.") THEN
              AppManagement.SendPurchaseRejectionsMail(PurchaseHeader,ApprovalEntry);
          END;
      END;
    END;

    PROCEDURE FinishApprovalEntrySales@40(SalesHeader@1000 : Record 36;ApprovalSetup@1001 : Record 452;VAR MessageID@1002 : ' ,AutomaticPrePayment,AutomaticRelease,RequiresApproval');
    VAR
      DocReleased@1010 : Boolean;
      ApprovalEntry@1011 : Record 454;
      ApprovalsMgtNotification@1012 : Codeunit 440;
    BEGIN
      DocReleased := FALSE;
      WITH ApprovalEntry DO BEGIN
        INIT;
        SETRANGE("Table ID",DATABASE::"Sales Header");
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        SETRANGE(Status,Status::Created);
        IF FINDSET(TRUE,FALSE) THEN
          REPEAT
            IF "Sender ID" = "Approver ID" THEN BEGIN
              Status := Status::Approved;
              MODIFY;
            END ELSE
              IF NOT IsOpenStatusSet THEN BEGIN
                Status := Status::Open;
                MODIFY;
                IsOpenStatusSet := TRUE;
                IF ApprovalSetup.Approvals THEN
                  ApprovalsMgtNotification.SendSalesApprovalsMail(SalesHeader,ApprovalEntry);
              END;
          UNTIL NEXT = 0;

        IF NOT IsOpenStatusSet THEN BEGIN
          SETRANGE(Status);
          FINDLAST;
          DocReleased := ApproveApprovalRequest(ApprovalEntry);
        END;

        IF DocReleased THEN BEGIN
          IF TestSalesPrepayment(SalesHeader) AND
             (SalesHeader."Document Type" = SalesHeader."Document Type"::Order) THEN
            MessageID := MessageID::AutomaticPrePayment
          ELSE
            MessageID := MessageID::AutomaticRelease;
        END ELSE BEGIN
          SalesHeader.Status := SalesHeader.Status::"Pending Approval";
          SalesHeader.MODIFY(TRUE);
          MessageID := MessageID::RequiresApproval;
        END;
      END;
    END;

    PROCEDURE FinishApprovalEntryPurchase@37(PurchHeader@1000 : Record 38;ApprovalSetup@1001 : Record 452;VAR MessageID@1002 : ' ,AutomaticPrePayment,AutomaticRelease,RequiresApproval');
    VAR
      DocReleased@1010 : Boolean;
      ApprovalEntry@1011 : Record 454;
      ApprovalsMgtNotification@1012 : Codeunit 440;
    BEGIN
      DocReleased := FALSE;
      WITH ApprovalEntry DO BEGIN
        INIT;
        SETRANGE("Table ID",DATABASE::"Purchase Header");
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        SETRANGE(Status,Status::Created);
        IF FINDSET(TRUE,FALSE) THEN
          REPEAT
            IF "Sender ID" = "Approver ID" THEN BEGIN
              Status := Status::Approved;
              MODIFY;
            END ELSE
              IF NOT IsOpenStatusSet THEN BEGIN
                Status := Status::Open;
                MODIFY;
                IsOpenStatusSet := TRUE;
                IF ApprovalSetup.Approvals THEN
                  ApprovalsMgtNotification.SendPurchaseApprovalsMail(PurchHeader,ApprovalEntry);
              END;
          UNTIL NEXT = 0;

        IF NOT IsOpenStatusSet THEN BEGIN
          SETRANGE(Status);
          FINDLAST;
          DocReleased := ApproveApprovalRequest(ApprovalEntry);
        END;

        IF DocReleased THEN BEGIN
          IF TestPurchasePrepayment(PurchHeader) AND
             (PurchHeader."Document Type" = PurchHeader."Document Type"::Order) THEN
            MessageID := MessageID::AutomaticPrePayment
          ELSE
            MessageID := MessageID::AutomaticRelease;
        END ELSE BEGIN
          PurchHeader.Status := PurchHeader.Status::"Pending Approval";
          PurchHeader.MODIFY(TRUE);
          MessageID := MessageID::RequiresApproval;
        END;
      END;
    END;

    BEGIN
    END.
  }
}
