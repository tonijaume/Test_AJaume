OBJECT Codeunit 7009732 Funciones Transfers
{
  OBJECT-PROPERTIES
  {
    Date=27/07/15;
    Time=14:51:09;
    Modified=Yes;
    Version List=AIC2009,CNT-OC-14035;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            Crear_Passagierliste;
          END;

  }
  CODE
  {
    VAR
      Text000@1103355004 : TextConst 'ENU=There is no booking for the\;ESP=No hay ninguna reserva para las\';
      Text001@1103355005 : TextConst 'ENU=Companys   #1######, #2######\;ESP=Compa¤¡as   #1######, #2######\';
      Text002@1103355006 : TextConst 'ENU=Flights      #3######, #4######\;ESP=Vuelos      #3######, #4######\';
      Text010@1103355014 : TextConst 'ENU=ENTER for exit'';ESP=INTRO para salir...';
      Text011@1103355015 : TextConst 'ENU=BOOKINGS COUNT \;ESP=" CUENTA DE RESERVAS \"';
      Text012@1103355016 : TextConst 'ENU="  Adults..: #1###  \";ESP="  Adultos..: #1###  \"';
      Text013@1103355017 : TextConst 'ENU="  Childs....: #2###  \";ESP="  Ni¤os....: #2###  \"';
      Text014@1103355018 : TextConst 'ENU="  Infants..: #3###  \";ESP="  Infants..: #3###  \"';
      Text015@1103355019 : TextConst 'ENU="  Elements: #4###  \";ESP="  Elementos: #4###  \"';
      Text016@1103355020 : TextConst 'ENU=TOTALIZING AMOUNTS \;ESP=TOTALIZACION DE IMPORTES \';
      Text017@1103355021 : TextConst 'ENU=Amount with taxes #1###########\;ESP=Importe con impuesto #1###########\';
      Text018@1103355022 : TextConst 'ENU=Amount without taxes #2###########\;ESP=Importe sin impuesto #2###########\';
      Text019@1103355023 : TextConst 'ENU=LINES MARKED BY #4########\;ESP=LINEAS MARCADAS POR  #4########\';
      Text020@1103355024 : TextConst 'ENU=Amount with taxes #5###########\;ESP=Importe con impuesto #5###########\';
      Text021@1103355025 : TextConst 'ENU=Amount without taxes #6###########\;ESP=Importe sin impuesto #6###########\';
      Text022@1103355026 : TextConst 'ENU=TRNC;ESP=TRNC';
      Text023@1103355027 : TextConst 'ENU=TRNI;ESP=TRNI';
      Text024@1103355028 : TextConst 'ENU=Arrival service,Departure service;ESP=Agrupacion Entrada,Agrupacion Salida';
      Text025@1103355029 : TextConst 'ENU=Unable to mark bookings with different service no.;ESP=No puede marcar reservas con distinto n§ de agrupacion';
      Text026@1103355030 : TextConst 'ENU=Service no. %1 for marked bookings will be changed, continue?;ESP=Se cambiar  el n§ de agrupacion %1 de las reservas con marca, ¨proceder?';
      Text027@1103355031 : TextConst 'ENU=Service %1;ESP=Agrupacion %1';
      Text028@1103355032 : TextConst 'ENU=There is nothing to change'';ESP=No hay nada para cambiar...';
      Text029@1103355033 : TextConst 'ENU=Not enough data to create the service.;ESP=Datos insuficientes para crear la agrupacion.';
      Text030@1103355034 : TextConst 'ENU=CREATING SERVICE\;ESP=CREANDO AGRUPACION\';
      Text031@1103355035 : TextConst 'ENU=Date         #1######\;ESP=Fecha         #1######\';
      Text032@1103355036 : TextConst 'ENU=Carrier #2########\;ESP=Transportista #2########\';
      Text033@1103355037 : TextConst 'ENU=Vehicle type #3########\;ESP=Tipo Vehiculo #3########\';
      Text034@1103355038 : TextConst 'ENU=Vehicles No.  #4\;ESP=N§ Vehiculos  #4\';
      Text035@1103355039 : TextConst 'ENU=Transfer Type #5#####;ESP=Tipo Transfer #5#####';
      Text036@1103355040 : TextConst 'ENU=Carrier %1 does not exist;ESP=No existe el transportista %1.';
      Text037@1103355041 : TextConst 'ENU=You must confirm the reservation before doing this change;ESP="Debe generar la reserva antes de hacer este cambio "';
      Text038@1103355042 : TextConst 'ENU=Intro to continue'';ESP=Intro para continuar...';
      Text039@1103355043 : TextConst 'ENU=ACCUMULATED PAXES\;ESP=PAXES ACUMULADOS\';
      Text040@1103355044 : TextConst 'ENU=PEOPLE ARRIVING #1#####\;ESP=PERSONAS ENTRADA #1#####\';
      Text041@1103355045 : TextConst 'ENU=BOOKING ARRIVING #2#####\;ESP=RESERVAS ENTRADA #2#####\';
      Text042@1103355046 : TextConst 'ENU=PEOPLE DEPARTING #3#####\;ESP=PERSONAS SALIDA  #3#####\';
      Text043@1103355047 : TextConst 'ENU=BOOKING DEPARTING #2#####\;ESP=RESERVAS SALIDA  #4#####\';
      Text044@1103355048 : TextConst 'ENU=Bkg. &Current,Bkg. &Marked,&All;ESP=Rsv. &Actual,Rsv. &Marcadas,&Todas';
      Text045@1103355049 : TextConst 'ENU=Arrival Hotel,Departure Hotel,&Both;ESP=Hotel &Entrada,Hotel &Salida,&Ambos';
      Text046@1103355050 : TextConst 'ENU=MODIFYING HOTEL IN TRANSFER RESERVATION\;ESP=MODIFICANDO HOTEL EN RESERVA TRANSFER\';
      Text047@1103355051 : TextConst 'ENU=Voucher #1########;ESP=Bono #1########';
      cCalTra@1103355002 : Codeunit 7009734;
      cFunCuad@1103355052 : Codeunit 7009733;
      cFunRes@1100217001 : Codeunit 7009703;
      rVerMargen@1103355003 : Record 7009814;
      Text048@1100217000 : TextConst 'ENU=Do you want to let the selected reservations without service.;ESP=Desea sacar a las reservas marcadas de la agrupacion.';
      cFunSeg@1000000000 : Codeunit 7009751;
      Text050@1000000006 : TextConst 'ENU=Ticket has already been refund.;ESP=Este ticket ya ha sido Reembolsado.';
      Text051@1000000005 : TextConst 'ENU=Ticket has been partial refunded.;ESP=Este ticket ya ha sido Reembolsado parcialmente.';
      Text052@1000000002 : TextConst 'ENU=Unable to refund a booking which has not been settled to sale guide;ESP=No se puede reembolsar una reserva que no ha sido liquidada al guia de venta.';
      Text053@1000000001 : TextConst 'ENU=Would you like to refund the ticket %1;ESP=Desea reembolsar el bono %1.';
      Text054@1000000007 : TextConst 'ENU=You have not indicated any refund amount.;ESP=No ha indicado ning£n importe a reembolsar.';
      Text055@1000000004 : TextConst 'ENU=The amount entered does not match the amount calculated per pax.;ESP=El importe introducido no coincide con el importe de las personas indicadas.';
      Text056@1000000003 : TextConst 'ENU=The total amount of the refunds exceeds the amount of the reservation.;ESP=El total de reembolsos supera al importe de la reserva.';
      Text057@1000000008 : TextConst 'ENU=You have selected reservations with different dates.;ESP=Se han seleccionado reserva de distintas fechas.';
      Text058@1000000009 : TextConst 'ENU=You have selected reservations with different flights.;ESP=Se han seleccionado reserva de distintos vuelos.';
      Text059@1000000010 : TextConst 'ENU=You have selected reservations with service assigned.;ESP=Se han seleccionado reservas ya agrupadas.';
      Text060@1000000011 : TextConst 'ENU=Do you want to assign the date %1 as the %2 date for the marked reservations?;ESP=¨Desea asignar la fecha %1 como fecha de %2 de las reservas marcadas?';
      Text061@1000000012 : TextConst 'ENU=Do you want to assign the hotel %1 as the %2 hotel of the marked reservations?;ESP=¨Desea asignar el hotel %1 como hotel de %2 de las reservas marcadas?';
      Text062@1000000013 : TextConst 'ENU=arrival;ESP=entrada';
      Text063@1000000014 : TextConst 'ENU=departure;ESP=salida';
      Text064@1000000015 : TextConst 'ENU=MODIFYING DATE IN TRANSFER RESERVATION\;ESP=MODIFICANDO FECHA EN RESERVA TRANSFER\';
      Text065@1000000016 : TextConst 'ENU=Do you want select a new flight?;ESP=¨Desea seleccionar un nuevo vuelo?';
      Text066@1000000017 : TextConst 'ENU=INSERT NEW DATE #1########;ESP=INTRODUZCA NUEVA FECHA #1########';
      Text067@1000000018 : TextConst 'ENU=Arrival date cannot later than departure date;ESP=La fecha de entrada no puede ser posterior a la fecha de salida';

    PROCEDURE Crear_Passagierliste@1();
    VAR
      rTO@1103355000 : Record 7009717;
      FechaSalDesde@1103355001 : Date;
      FechaSalHasta@1103355002 : Date;
      FechaEntDesde@1103355003 : Date;
      FechaEntHasta@1103355004 : Date;
      Compania@1103355005 : Code[10];
      NumVuelo@1103355006 : Code[10];
      rReservaTransf@1103355007 : Record 7009744;
      Filtro@1103355008 : Text[60];
      iPos@1103355009 : Integer;
      i@1103355010 : Integer;
      rCondiciones@1103355011 : Record 7010085;
    BEGIN
      // Crear_Passagierliste

      IF NOT rCondiciones.GET(USERID) THEN
      BEGIN
        CLEAR(rCondiciones);
        rCondiciones.Usuario := USERID;
        rCondiciones.INSERT;
      END;

      rCondiciones.INIT;
      rCondiciones.Usuario               := USERID();
      rCondiciones.Correcto              := FALSE;
      rCondiciones.TourOperador          := '';
      rCondiciones."Compa¤ia Entrada"    := '';
      rCondiciones."Compa¤ia Salida"     := '';
      rCondiciones."Vuelo Entrada"       := '';
      rCondiciones."Vuelo Salida"        := '';
      rCondiciones."Fecha llegada desde" := 0D;
      rCondiciones."Fecha llegada hasta" := 0D;
      rCondiciones."Fecha salida desde"  := 0D;
      rCondiciones."Fecha salida hasta"  := 0D;
      rCondiciones.MODIFY;
      COMMIT;

      rCondiciones.FILTERGROUP(0);
      rCondiciones.SETRANGE(Usuario, USERID);
      rCondiciones.FILTERGROUP(2);
      FORM.RUNMODAL(7010116, rCondiciones);
      IF rCondiciones.GET(USERID()) THEN
        IF NOT rCondiciones.Correcto THEN
          EXIT;

      IF (rCondiciones."Fecha llegada hasta" = 0D) AND
         (rCondiciones."Fecha llegada desde" <> 0D) THEN
        rCondiciones."Fecha llegada hasta" := rCondiciones."Fecha llegada desde";
      IF (rCondiciones."Fecha salida hasta" = 0D) AND
         (rCondiciones."Fecha salida desde" <> 0D) THEN
        rCondiciones."Fecha salida hasta" := rCondiciones."Fecha salida desde";

      IF rCondiciones."Compa¤ia Entrada" <> '' THEN BEGIN
        Filtro := rCondiciones."Compa¤ia Entrada";
        i := 1;
        rReservaTransf.SETFILTER("Compa¤ia entrada", Filtro);
      END;
      IF rCondiciones."Compa¤ia Salida" <> '' THEN BEGIN
        Filtro := rCondiciones."Compa¤ia Salida";
        i := 2;
        rReservaTransf.SETFILTER("Compa¤ia salida", Filtro);
      END;
      IF rCondiciones."Vuelo Entrada" <> '' THEN BEGIN
        Filtro := rCondiciones."Vuelo Entrada";
        i := 1;
        rReservaTransf.SETFILTER("Vuelo entrada", Filtro);
      END;
      IF rCondiciones."Vuelo Salida" <> '' THEN BEGIN
        Filtro := rCondiciones."Vuelo Salida";
        i := 2;
        rReservaTransf.SETFILTER("Vuelo salida", Filtro);
      END;
      IF rCondiciones."Fecha llegada desde" <> 0D THEN BEGIN
        i := 1;
        rReservaTransf.SETFILTER("Fecha entrada", '%1..%2'
                                 , rCondiciones."Fecha llegada desde"
                                 , rCondiciones."Fecha llegada hasta");
      END;

      IF rCondiciones."Fecha salida desde" <> 0D THEN BEGIN
        i := 2;
        rReservaTransf.SETFILTER("Fecha salida", '%1..%2'
                                 , rCondiciones."Fecha salida desde"
                                 , rCondiciones."Fecha salida hasta");
      END;


      IF i = 1 THEN // 1 -> entrada
                    // 2 -> salida
        rReservaTransf.SETCURRENTKEY("Fecha entrada",
                                    TourOperador,
                                    "Compa¤ia entrada",
                                    "Vuelo entrada",
                                    "IATA origen entrada")
      ELSE
        rReservaTransf.SETCURRENTKEY("Fecha salida",
                                    TourOperador,
                                    "Compa¤ia salida",
                                    "Vuelo salida",
                                    "IATA destino salida");

      IF rCondiciones.TourOperador <> '' THEN
        rReservaTransf.SETRANGE(TourOperador, rCondiciones.TourOperador);

      IF rReservaTransf.FINDFIRST THEN
        FORM.RUN(7009915, rReservaTransf) // formulario para mostrar datos
      ELSE
        MESSAGE(Text000 +
                Text001 +
                Text002,
                rCondiciones."Compa¤ia Entrada", rCondiciones."Compa¤ia Salida",
                rCondiciones."Vuelo Entrada", rCondiciones."Vuelo Salida");
      rReservaTransf.RESET;
    END;

    PROCEDURE ver_margenes@7(VAR agrupacion@1103355000 : Record 7009796);
    VAR
      rAgr@1103355001 : Record 7009796;
      rMar@1103355002 : Record 7009808;
    BEGIN
      // ver_margenes

      IF rVerMargen.FINDSET(TRUE) THEN
        rVerMargen.DELETEALL;

      rAgr.RESET;
      rAgr.COPYFILTERS(agrupacion);
      IF rAgr.FINDSET(TRUE) THEN BEGIN
        REPEAT
          rAgr."Tipo Calculo" := rAgr."Tipo Calculo"::Margenes;
          rAgr.MODIFY;

          rMar.RESET;
          rMar.SETRANGE(Agrupacion, rAgr."N§ Agrupacion");
          IF rMar.FINDSET(TRUE) THEN
            rMar.DELETEALL;
          COMMIT;
          cCalTra.calcular_agrupacion(rAgr, FALSE);

          rAgr.GET(rAgr."N§ Agrupacion");
          rellenar_margenes(rAgr);

          rAgr."Tipo Calculo" := rAgr."Tipo Calculo"::"Coste/Ingreso";
          rAgr.MODIFY;
        UNTIL rAgr.NEXT = 0;
      END;
      COMMIT;
      FORM.RUNMODAL(FORM::"Tabla Ver Margenes");
    END;

    PROCEDURE rellenar_margenes@15(rAgr@1103355000 : Record 7009796);
    VAR
      rLinMargen@1103355001 : Record 7009808;
    BEGIN
      // rellenar_margenes

      CLEAR(rVerMargen);
      rVerMargen."N§ Agrupacion" := rAgr."N§ Agrupacion";
      rVerMargen.Fecha           := rAgr.Fecha;
      rVerMargen.Zona            := rAgr.Zona;

      rLinMargen.RESET;
      rLinMargen.SETCURRENTKEY(Agrupacion,
                               Concepto);
      rLinMargen.SETRANGE(Agrupacion, rAgr."N§ Agrupacion");
      rLinMargen.SETRANGE(Concepto  , Text022);
      IF rLinMargen.FINDSET THEN
      BEGIN
        rLinMargen.CALCSUMS("Importe con impuesto");
        rVerMargen.Coste := (rLinMargen."Importe con impuesto") * (-1);
      END;
      rLinMargen.SETRANGE(Concepto  , Text023);
      IF rLinMargen.FINDSET THEN
      BEGIN
        rLinMargen.CALCSUMS("Importe con impuesto");
        rVerMargen.Ingreso := rLinMargen."Importe con impuesto";
      END;

      IF (rVerMargen.Ingreso <> 0) OR (rVerMargen.Coste <> 0) THEN
        rVerMargen.Margen := rVerMargen.Ingreso - rVerMargen.Coste;

      IF rAgr."Tipo transfer" = rAgr."Tipo transfer"::Entrada THEN
      BEGIN
        rAgr.CALCFIELDS("Personas entrada");
        rVerMargen.Pax := rAgr."Personas entrada";
      END
      ELSE
      BEGIN
        rAgr.CALCFIELDS("Personas salida");
        rVerMargen.Pax := rAgr."Personas salida";
      END;

      rVerMargen.Vehiculo        := rAgr."Tipo vehiculo";
      rVerMargen.Transportista   := rAgr.Transportista;
      rVerMargen.Vuelos          := rAgr.Vuelos;
      rVerMargen."N§ Vuelos"     := rAgr."N§ vuelos";
      rVerMargen.Zonas           := rAgr.Zonas;
      rVerMargen.TourOperadores  := rAgr.TourOperadores;
      rVerMargen."Tipo Transfer" := rAgr."Tipo transfer";
      rVerMargen.INSERT;
    END;

    PROCEDURE Cambio_Masivo_Agrupacion@8(Rec@1103355000 : Record 7009744);
    VAR
      Opcion@1103355001 : Integer;
      TipoAgrupacion@1103355002 : 'Entrada,Salida';
    BEGIN
      // Cambio_Masivo_Agrupacion

      Opcion := STRMENU(Text024);

      CASE Opcion OF
        1: Cambiar_Agrupacion(Rec, TipoAgrupacion::Entrada, FALSE);
        2: Cambiar_Agrupacion(Rec, TipoAgrupacion::Salida, FALSE);
        ELSE
          EXIT;
      END;
    END;

    PROCEDURE Cambiar_Agrupacion@11(Rec@1103355000 : Record 7009744;TipoAgrupacion@1103355001 : 'Entrada,Salida';pwDesdeCuadrante@1100217000 : Boolean);
    VAR
      lrRes@1103355003 : Record 7009744;
      lrAgrup@1103355004 : Record 7009796;
      lrRes2@1103355006 : Record 7009744;
      lfListaAgr@1100217002 : Form 7009796;
    BEGIN
      // Cambiar_Agrupacion

      lrRes.RESET;
      lrRes.SETCURRENTKEY("Marca cambios", "Agrupacion entrada", "Agrupacion salida");

      IF NOT pwDesdeCuadrante THEN
        lrRes.SETRANGE("Marca cambios", USERID)
      ELSE
        lrRes.SETRANGE("Marca Cuadrante", USERID);

      CASE TipoAgrupacion OF
        TipoAgrupacion::Entrada: BEGIN
          lrRes.SETFILTER("Agrupacion entrada", '<>%1', Rec."Agrupacion entrada");
        END;
        TipoAgrupacion::Salida: BEGIN
          lrRes.SETFILTER("Agrupacion salida" , '<>%1', Rec."Agrupacion salida");
        END;
      END;

      IF lrRes.FINDFIRST THEN
        ERROR(Text025);

      CLEAR(lrRes);
      IF CONFIRM(Text026, FALSE, TipoAgrupacion) THEN
      BEGIN
        lrRes.SETCURRENTKEY("Marca cambios");

        IF NOT pwDesdeCuadrante THEN
          lrRes.SETRANGE("Marca cambios", USERID)
        ELSE
          lrRes.SETRANGE("Marca Cuadrante", USERID);

        IF lrRes.FINDSET THEN
        BEGIN
          lrAgrup.RESET;
          lrAgrup.FILTERGROUP(0);
          IF TipoAgrupacion = TipoAgrupacion::Entrada THEN
            lrAgrup.SETRANGE(Fecha, lrRes."Fecha entrada")
          ELSE
            lrAgrup.SETRANGE(Fecha, lrRes."Fecha salida");
          lrAgrup.SETFILTER(Estado         , '%1|%2', lrAgrup.Estado::Pendiente, lrAgrup.Estado::Generado);
          lrAgrup.SETRANGE ("Tipo transfer", TipoAgrupacion);
          lrAgrup.FILTERGROUP(2);

          //: Abrimos la lista de agrupaciones para que el usuario seleccione
          CLEAR(lfListaAgr);
          lfListaAgr.SETTABLEVIEW(lrAgrup);
          lfListaAgr.LOOKUPMODE(TRUE);
          IF lfListaAgr.RUNMODAL <> ACTION::LookupOK THEN
            EXIT;
          lfListaAgr.GETRECORD(lrAgrup);

          REPEAT
            lrRes2 := lrRes;
            cFunCuad.ComparaTransferPrivado(Rec, lrRes2, lrAgrup); //+$007
            CASE TipoAgrupacion OF
              TipoAgrupacion::Entrada: lrRes2.VALIDATE("Agrupacion entrada", lrAgrup."N§ Agrupacion");
              TipoAgrupacion::Salida : lrRes2.VALIDATE("Agrupacion salida" , lrAgrup."N§ Agrupacion");
            END;

            IF NOT pwDesdeCuadrante THEN
              lrRes2."Marca cambios" := ''
            ELSE
              lrRes2."Marca Cuadrante" := '';

            lrRes2.MODIFY;
          UNTIL lrRes.NEXT = 0;

        END
        ELSE
          ERROR(Text028);
      END;
    END;

    PROCEDURE crear_transfer@9(par_estado@1103355000 : 'Pendiente,Generado');
    VAR
      rCond@1103355001 : Record 7010087;
      rAgr@1103355002 : Record 7009796;
      rTrans@1103355003 : Record 7009801;
      rTipoVeh@1103355004 : Record 7009802;
      w_ult_agr@1103355005 : Integer;
      w_num_vehiculo@1103355006 : Integer;
      w_fecha@1103355007 : Date;
      w_tipo_transfer@1103355008 : 'Entrada,Salida';
    BEGIN
      // crear_transfer

      IF rCond.GET(USERID) THEN
        rCond.DELETE;
      rCond.INIT;
      rCond.Usuario := USERID;
      rCond.INSERT;
      COMMIT;
      rCond.SETRECFILTER;
      FORM.RUNMODAL(7010122, rCond, rCond.Fecha);
      IF NOT rCond.GET(USERID) THEN
        EXIT;

      IF NOT rCond.Correcto THEN
        EXIT;

      IF (rCond.Fecha = 0D) OR (rCond.Transportista = '') OR (rCond."Tipo Vehiculo" = '') THEN
        ERROR(Text029);

      w_ult_agr := 0;

      rAgr.RESET;
      IF rAgr.FINDLAST THEN
        w_ult_agr := rAgr."N§ Agrupacion";

      rAgr.INIT;
      rAgr."N§ Agrupacion"               := w_ult_agr + 1;
      rAgr.Fecha                         := rCond.Fecha;
      rAgr."Tipo transfer"               := rCond."Tipo Transfer";
      rAgr.Transportista                 := rCond.Transportista;
      rAgr."Tipo servicio transportista" := rCond."Tipo servicio"; //$002
      rAgr."Tipo vehiculo"               := rCond."Tipo Vehiculo";
      rAgr."Origen/Destino transfer"     := rCond.Origen;
      rAgr."Tipo precio ingreso"         := rCond."Tipo precio ingreso";
      rAgr."Numero Bus"                  := rCond."Numero Bus";
      rAgr."Capacidad Vehiculo"          := rCond."Capacidad Vehiculo";
      rAgr.Estado                        := par_estado;
      rAgr."Hora presentacion"           := rCond.Hora; //$003
      rAgr."Traslado en destino"         := rCond."Servicio cambio de zona"; //$001
      rAgr.VALIDATE(rAgr."Tipo Servicio venta", rCond."Tipo Servicio Venta");  // +$009
      //rAgr."Transfer Privado"        := rCond."Servicio privado"; //+$008  // - $009

      rAgr.INSERT(TRUE);
    END;

    PROCEDURE cambia_vuelo_entrada@12(par_fecha@1103355000 : Date;par_responsable@1103355001 : Boolean;par_delegacion@1103355002 : Code[10];par_interno@1103355003 : Integer;par_periodo@1103355004 : Integer;par_acompa¤ante@1103355005 : Integer);
    VAR
      lrPlan@1103355006 : Record 7009754;
    BEGIN
      // cambia_vuelo_entrada

      lrPlan.RESET;
      lrPlan.FILTERGROUP(2);
      lrPlan.SETRANGE(Fecha           , par_fecha);
      lrPlan.SETRANGE("Entrada/Salida", lrPlan."Entrada/Salida"::Entrada);
      lrPlan.FILTERGROUP(0);

      IF FORM.RUNMODAL(7009799, lrPlan) = ACTION::LookupOK THEN
        cambia_datos_entrada(lrPlan, par_responsable, par_delegacion, par_interno, par_periodo, par_acompa¤ante);
    END;

    PROCEDURE cambia_vuelo_salida@13(par_fecha@1103355000 : Date;par_responsable@1103355001 : Boolean;par_delegacion@1103355002 : Code[10];par_interno@1103355003 : Integer;par_periodo@1103355004 : Integer;par_acompa¤ante@1103355005 : Integer);
    VAR
      lrPlan@1103355006 : Record 7009754;
    BEGIN
      // cambia_vuelo_salida

      lrPlan.RESET;
      lrPlan.FILTERGROUP(2);
      lrPlan.SETRANGE(Fecha           , par_fecha);
      lrPlan.SETRANGE("Entrada/Salida", lrPlan."Entrada/Salida"::Salida);
      lrPlan.FILTERGROUP(0);

      IF FORM.RUNMODAL(7009799, lrPlan) = ACTION::LookupOK THEN
        cambia_datos_salida(lrPlan, par_responsable, par_delegacion, par_interno, par_periodo, par_acompa¤ante);
    END;

    PROCEDURE cambia_datos_entrada@14(par_plan@1103355000 : Record 7009754;par_responsable@1103355001 : Boolean;par_delegacion@1103355002 : Code[10];par_interno@1103355003 : Integer;par_periodo@1103355004 : Integer;par_acompa¤ante@1103355005 : Integer);
    VAR
      rAco@1103355006 : Record 7009748;
      rPer@1103355007 : Record 7009742;
      lrRsvTra@1100253000 : Record 7009744;
    BEGIN
      // cambia_datos_entrada

      CLEAR(rAco);
      rAco.SETRANGE(Delegacion  , par_delegacion);
      rAco.SETRANGE("N§ Interno", par_interno);
      IF par_acompa¤ante <> 0 THEN
        rAco.SETRANGE("N§ Acompa¤ante", par_acompa¤ante);
      rAco.Pasar_Periodo(par_periodo);
      IF rAco.FINDSET(TRUE) THEN
      BEGIN

        //+$001
        lrRsvTra.RESET;
        lrRsvTra.SETCURRENTKEY(Delegacion,
                               "N§ Interno",
                               "N§ Periodo");
        lrRsvTra.SETRANGE(Delegacion  , par_delegacion);
        lrRsvTra.SETRANGE("N§ Interno", par_interno);
        lrRsvTra.SETRANGE("N§ Periodo", par_periodo);
        IF lrRsvTra.ISEMPTY THEN
          ERROR(Text037);
        //-$001

        REPEAT
          rAco.VALIDATE("Modificacion importacion", FALSE);
          rAco.VALIDATE("Compa¤ia entrada"        , par_plan.Compa¤ia);
          rAco.VALIDATE("Vuelo entrada"           , par_plan.Vuelo);
          rAco.VALIDATE("Terminal entrada"        , par_plan.Terminal);
          rAco.VALIDATE("Hora entrada"            , par_plan."Hora Entrada");
          rAco.VALIDATE("IATA origen entrada"     , par_plan.Origen);
          rAco.VALIDATE("IATA destino entrada"    , par_plan.Destino);
          rAco.MODIFY(TRUE); //+$006
        UNTIL rAco.NEXT = 0;
      END;
      CLEAR(rAco);
    END;

    PROCEDURE cambia_datos_salida@16(par_plan@1103355000 : Record 7009754;par_responsable@1103355001 : Boolean;par_delegacion@1103355002 : Code[10];par_interno@1103355003 : Integer;par_periodo@1103355004 : Integer;par_acompa¤ante@1103355005 : Integer);
    VAR
      rAco@1103355006 : Record 7009748;
      rPer@1103355007 : Record 7009742;
      lrRsvTra@1100253000 : Record 7009744;
    BEGIN
      // cambia_datos_salida

      CLEAR(rAco);
      rAco.RESET;
      rAco.SETRANGE(Delegacion, par_delegacion);
      rAco.SETRANGE("N§ Interno", par_interno);
      IF par_acompa¤ante <> 0 THEN
        rAco.SETRANGE("N§ Acompa¤ante", par_acompa¤ante);
      rAco.Pasar_Periodo(par_periodo);
      IF rAco.FINDSET(TRUE) THEN
      BEGIN

        //+$001
        lrRsvTra.RESET;
        lrRsvTra.SETCURRENTKEY(Delegacion,
                               "N§ Interno",
                               "N§ Periodo");
        lrRsvTra.SETRANGE(Delegacion  , par_delegacion);
        lrRsvTra.SETRANGE("N§ Interno", par_interno);
        lrRsvTra.SETRANGE("N§ Periodo", par_periodo);
        IF lrRsvTra.ISEMPTY THEN
          ERROR(Text037);
        //-$001

        REPEAT
          rAco.VALIDATE("Modificacion importacion", FALSE);
          rAco.VALIDATE("Compa¤ia salida"         , par_plan.Compa¤ia);
          rAco.VALIDATE("Vuelo salida"            , par_plan.Vuelo);
          rAco.VALIDATE("Terminal salida"         , par_plan.Terminal);
          rAco.VALIDATE("Hora salida"             , par_plan."Hora Salida");
          rAco.VALIDATE("IATA origen salida"      , par_plan.Origen);
          rAco.VALIDATE("IATA destino salida"     , par_plan.Destino);
          rAco.MODIFY(TRUE); //+$006
        UNTIL rAco.NEXT = 0;
      END;
      CLEAR(rAco);
    END;

    PROCEDURE mismas_fechas@17(VAR par_resTrans@1103355000 : Record 7009744;par_EntradaSalida@1103355001 : 'Entrada,Salida') : Boolean;
    VAR
      aux_Fecha@1103355002 : Date;
    BEGIN
      // mismas_fechas

      IF par_EntradaSalida = par_EntradaSalida::Entrada THEN
        par_resTrans.SETCURRENTKEY("Fecha entrada",
                                   TourOperador,
                                   "Compa¤ia entrada",
                                   "Vuelo entrada",
                                   "IATA origen entrada")
      ELSE
        par_resTrans.SETCURRENTKEY("Fecha salida",
                                    TourOperador,
                                    "Compa¤ia salida",
                                    "Vuelo salida",
                                    "IATA destino salida");

      IF par_resTrans.FINDFIRST THEN
      BEGIN
        IF par_EntradaSalida = par_EntradaSalida::Entrada THEN
          aux_Fecha := par_resTrans."Fecha entrada"
        ELSE
          aux_Fecha := par_resTrans."Fecha salida";
        IF par_resTrans.FINDLAST THEN
        BEGIN
          IF par_EntradaSalida = par_EntradaSalida::Entrada THEN
          BEGIN
            IF aux_Fecha <> par_resTrans."Fecha entrada" THEN
              EXIT(FALSE);
          END
          ELSE
          BEGIN
            IF aux_Fecha <> par_resTrans."Fecha salida" THEN
              EXIT(FALSE);
          END;
        END;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE cambia_hotel@18(VAR par_rsv@1103355000 : Record 7009744);
    VAR
      opcion@1103355001 : Integer;
      opcion1@1103355002 : Integer;
      lrRsv@1103355003 : Record 7009744;
      lrRsv2@1103355004 : Record 7009744;
      rCond@1103355007 : Record 7010085;
      ventana@1103355008 : Dialog;
    BEGIN
      // cambia_hotel

      IF par_rsv."Traslado en destino" THEN
        EXIT;

      opcion1 := STRMENU(Text044, 1);
      CASE opcion1 OF
        1:
        BEGIN
          lrRsv.COPY(par_rsv);
          lrRsv.SETRECFILTER;
        END;
        2:
        BEGIN
          lrRsv.SETCURRENTKEY("Marca cambios");
          lrRsv.SETRANGE("Marca cambios", USERID);
        END;
        3:
        BEGIN
          lrRsv.COPY(par_rsv);
        END;
        0:
        BEGIN
          EXIT;
        END;
      END;
      opcion := STRMENU(Text045, 1);
      IF opcion = 0 THEN
        EXIT;
      IF rCond.GET(USERID) THEN
        rCond.DELETE;
      CLEAR(rCond);
      rCond.Usuario := USERID;
      rCond.INSERT;
      COMMIT;

      rCond.FILTERGROUP(2);
      rCond.SETRANGE(Usuario, USERID);
      rCond.FILTERGROUP(0);
      IF FORM.RUNMODAL(7010123, rCond) <> ACTION::LookupOK THEN
        EXIT;
      rCond.GET(USERID);

      IF lrRsv.FINDSET THEN
      BEGIN
        ventana.OPEN(Text046 +
                     '\' +
                     Text047);
        REPEAT
          lrRsv2 := lrRsv;
          ventana.UPDATE(1, lrRsv.Bono);

          IF (opcion = 1) OR (opcion = 3) THEN
            lrRsv2.VALIDATE("Hotel entrada", rCond.Hotel);

          IF (opcion = 2) OR (opcion = 3) THEN
            lrRsv2.VALIDATE("Hotel salida", rCond.Hotel);

          IF opcion1 = 2 THEN
            lrRsv2."Marca cambios" := '';

          lrRsv2.MODIFY(TRUE);
        UNTIL lrRsv.NEXT = 0;
        ventana.CLOSE;
      END;
    END;

    PROCEDURE MarcarReservaAgrupar@1100217000(VAR prRsv@1100217000 : Record 7009744);
    VAR
      lrRsv@1100217001 : Record 7009744;
    BEGIN
      // MarcarReservaAgrupar

      lrRsv.COPY(prRsv);
      lrRsv.FINDSET(TRUE);
      REPEAT
        IF lrRsv."Marca Cuadrante" = UPPERCASE(USERID) THEN
          lrRsv."Marca Cuadrante" := ''
        ELSE
          lrRsv."Marca Cuadrante" := USERID;
        lrRsv.MODIFY;
      UNTIL lrRsv.NEXT = 0;
    END;

    PROCEDURE MarcarReservaCambio@1100217001(VAR prRsv@1100217000 : Record 7009744);
    VAR
      lrRsv@1100217001 : Record 7009744;
    BEGIN
      // MarcarReservaCambio

      lrRsv.COPY(prRsv);
      lrRsv.FINDSET(TRUE);
      REPEAT
        IF lrRsv."Marca cambios" = UPPERCASE(USERID) THEN
          lrRsv."Marca cambios" := ''
        ELSE
          lrRsv."Marca cambios" := USERID;
        lrRsv.MODIFY;
      UNTIL lrRsv.NEXT = 0;
    END;

    PROCEDURE CambiarAgrupacionCuadrante@1100217002(prAcuZon@1100217000 : Record 7009793;pwFiltZona@1100217001 : Text[250];pwFiltTO@1100217003 : Text[250]);
    VAR
      lrRsv@1100217002 : Record 7009744;
    BEGIN
      // CambiarAgrupacionCuadrante

      lrRsv.RESET;
      IF prAcuZon."Tipo Transfer" = prAcuZon."Tipo Transfer"::Entrada THEN
      BEGIN
        lrRsv.SETCURRENTKEY("Fecha entrada",
                            "Zona servicio entrada",
                            "Hora entrada",
                            "Compa¤ia entrada",
                            "Vuelo entrada",
                            "IATA origen entrada",
                            "Hotel entrada",
                            TourOperador,
                            Entrada);
        lrRsv.SETRANGE ("Fecha entrada"        , prAcuZon.Fecha);
        lrRsv.SETFILTER("Zona servicio entrada", pwFiltZona);
        lrRsv.SETRANGE (Entrada                , 1);
      END
      ELSE
      BEGIN
        lrRsv.SETCURRENTKEY("Fecha salida",
                            "Zona servicio salida",
                            "Hora salida",
                            TourOperador,
                            "Compa¤ia salida",
                            "Vuelo salida",
                            "IATA destino salida",
                            Salida);
        lrRsv.SETRANGE ("Fecha salida"        , prAcuZon.Fecha);
        lrRsv.SETFILTER("Zona servicio salida", pwFiltZona);
        lrRsv.SETRANGE (Salida                , 1);
      END;
      lrRsv.SETFILTER(TourOperador    , pwFiltTO);
      lrRsv.SETRANGE("Marca Cuadrante", USERID);
      IF lrRsv.FINDSET THEN
        Cambiar_Agrupacion(lrRsv, prAcuZon."Tipo Transfer", TRUE);
    END;

    PROCEDURE MarcarReservaNoShow@1100217003(prRsv@1100217000 : Record 7009744);
    VAR
      lrAco@1100217001 : Record 7009748;
      lcRes@1100217002 : Codeunit 7009703;
    BEGIN
      // MarcarReservaNoShow

      IF prRsv."Traslado en destino" THEN
        EXIT;

      IF NOT lrAco.GET(prRsv.Delegacion, prRsv."N§ Interno", prRsv."N§ Acompa¤ante") THEN
        EXIT;

      lcRes.MarcarReservaNoShow(lrAco);
    END;

    PROCEDURE SacarAgrupacionCuadrante@1100217004(prAcuZon@1100217004 : Record 7009793;pwFiltZona@1100217003 : Text[250];pwFiltTO@1100217002 : Text[250]);
    VAR
      lrRsv@1100217000 : Record 7009744;
      lrRsv2@1100217001 : Record 7009744;
    BEGIN
      // SacarAgrupacionCuadrante

      lrRsv.RESET;
      IF prAcuZon."Tipo Transfer" = prAcuZon."Tipo Transfer"::Entrada THEN
      BEGIN
        lrRsv.SETCURRENTKEY("Fecha entrada",
                            "Zona servicio entrada",
                            "Hora entrada",
                            "Compa¤ia entrada",
                            "Vuelo entrada",
                            "IATA origen entrada",
                            "Hotel entrada",
                            TourOperador,
                            Entrada);
        lrRsv.SETRANGE ("Fecha entrada"        , prAcuZon.Fecha);
        lrRsv.SETFILTER("Zona servicio entrada", pwFiltZona);
        lrRsv.SETRANGE (Entrada                , 1);
      END
      ELSE
      BEGIN
        lrRsv.SETCURRENTKEY("Fecha salida",
                            "Zona servicio salida",
                            "Hora salida",
                            TourOperador,
                            "Compa¤ia salida",
                            "Vuelo salida",
                            "IATA destino salida",
                            Salida);
        lrRsv.SETRANGE ("Fecha salida"        , prAcuZon.Fecha);
        lrRsv.SETFILTER("Zona servicio salida", pwFiltZona);
        lrRsv.SETRANGE (Salida                , 1);
      END;
      lrRsv.SETFILTER(TourOperador    , pwFiltTO);
      lrRsv.SETRANGE("Marca Cuadrante", UPPERCASE(USERID));
      IF prAcuZon."Tipo Transfer" = prAcuZon."Tipo Transfer"::Entrada THEN
        lrRsv.SETFILTER("Agrupacion entrada", '<>%1', 0)
      ELSE
        lrRsv.SETFILTER("Agrupacion salida", '<>%1', 0);
      IF lrRsv.FINDSET THEN
      BEGIN
        IF NOT CONFIRM(Text048) THEN
          EXIT;
        REPEAT
          lrRsv2 := lrRsv;
          IF prAcuZon."Tipo Transfer" = prAcuZon."Tipo Transfer"::Entrada THEN
            lrRsv2.VALIDATE("Agrupacion entrada", 0)
          ELSE
            lrRsv2.VALIDATE("Agrupacion salida" , 0);
          lrRsv2."Marca Cuadrante" := '';
          lrRsv2.MODIFY;
        UNTIL lrRsv.NEXT = 0;
      END;
    END;

    PROCEDURE BorrarVueloSalida@1100217005(prRsv@1100217000 : Record 7009744);
    VAR
      lrCab@1100217002 : Record 7009741;
      lrPer@1100217003 : Record 7009742;
      lrAco@1100217001 : Record 7009748;
    BEGIN
      IF prRsv."Traslado en destino" THEN
        EXIT;

      lrCab.GET(prRsv.Delegacion, prRsv."N§ Interno");

      lrPer.GET(prRsv.Delegacion, prRsv."N§ Interno", prRsv."N§ Periodo");

      IF NOT lrAco.GET(prRsv.Delegacion, prRsv."N§ Interno", prRsv."N§ Acompa¤ante") THEN
        EXIT;

      cFunRes.cambios_acompa¤antes(lrCab, lrAco, lrPer, 4);
    END;

    PROCEDURE BorrarVueloLlegada@1100217006(prRsv@1100217000 : Record 7009744);
    VAR
      lrCab@1100217003 : Record 7009741;
      lrPer@1100217002 : Record 7009742;
      lrAco@1100217001 : Record 7009748;
    BEGIN
      IF prRsv."Traslado en destino" THEN
        EXIT;

      lrCab.GET(prRsv.Delegacion, prRsv."N§ Interno");

      lrPer.GET(prRsv.Delegacion, prRsv."N§ Interno", prRsv."N§ Periodo");

      IF NOT lrAco.GET(prRsv.Delegacion, prRsv."N§ Interno", prRsv."N§ Acompa¤ante") THEN
        EXIT;

      cFunRes.cambios_acompa¤antes(lrCab, lrAco, lrPer, 3);
    END;

    PROCEDURE ReembolsarBono@1000000000(VAR prRsv@1100253000 : Record 7009744;pTipo@1000000002 : 'Total,Parcial importe,Parcial personas');
    VAR
      rPar@1000000008 : Record 7009700;
      lrCond@1100253001 : Record 7010085;
      lrCobro@1100253004 : Record 7009927;
      lrRsv@1100217001 : Record 7009744;
      lrCurrExc@1100217002 : Record 330;
      lrExcursion@1100217004 : Record 7009710;
      lrICD@1100217005 : Record 7010264;
      lrReemb@1000000000 : Record 7009928;
      lrCobroTMP@1000000001 : TEMPORARY Record 7009929;
      lrExc@1000000006 : Record 7009710;
      lfFicha@1100253002 : Form 7010301;
      lfCobro@1100253003 : Form 7010243;
      lwImporteReembolso@1100253006 : Decimal;
      lwImpCobro@1000000003 : Decimal;
      lwImpReembTotal@1000000004 : Decimal;
      lwImpReemb@1000000005 : Decimal;
      lwImpReemb_Div@1000000007 : Decimal;
    BEGIN
      // ReembolsarBono

      //. Creada por: ARM
      //. Creada dia: 03.10.2014
      //. $010

      rPar.FINDFIRST;

      // JPT 19/04/12 CNT-CAR-12004-03 Permision to refund excursion
      cFunSeg.TienePermiso('TRF-RSV-REM', TRUE);
      IF prRsv."Reserva online" THEN
        cFunSeg.TienePermiso('TRF-ONL-MAN', TRUE);

      IF (pTipo = pTipo::Total) OR (prRsv.Reembolsada) THEN
        ERROR(Text050);

      IF (pTipo = pTipo::Total) THEN
      BEGIN
        lrReemb.RESET;
        lrReemb.SETRANGE(Delegacion   , prRsv.Delegacion);
        lrReemb.SETRANGE("Num Reserva", prRsv."N§ Reserva");
        IF lrReemb.FINDFIRST THEN
          ERROR(Text051);
      END;

      IF NOT prRsv."Liquidado GV" THEN
        ERROR(Text052);

      IF prRsv."Tipo pago reserva" = prRsv."Tipo pago reserva"::Credito THEN
      BEGIN
        lrCobroTMP.INIT;
        lrCobroTMP.Delegacion := prRsv.Delegacion;
        lrCobroTMP."Num Reserva" := prRsv."N§ Reserva";
        lrCobroTMP."Cod. Divisa" := prRsv."C¢d. divisa";
        lrCobroTMP."Importe total cobro" := prRsv."Ingreso reserva";
        lrCobroTMP."Importe reembolsado ant" := lrCobro."Importe Reembolsado";
        IF pTipo = pTipo::Total THEN
          lrCobroTMP."Importe a reembolsar" := prRsv."Ingreso reserva";
        lrCobroTMP."Reserva Credito" := TRUE;
        lrCobroTMP.INSERT;
      END
      ELSE
      BEGIN
        //. Buscamos el registro de cobro
        lrCobro.RESET;
        lrCobro.SETRANGE(Delegacion   , prRsv.Delegacion);
        lrCobro.SETRANGE("Num Reserva", prRsv."N§ Reserva");
        lrCobro.FINDFIRST;

        CLEAR(lrCobroTMP);
        lrCobroTMP.DELETEALL;

        lrCobro.RESET;
        lrCobro.SETRANGE(Delegacion   , prRsv.Delegacion);
        lrCobro.SETRANGE("Num Reserva", prRsv."N§ Reserva");
        IF lrCobro.FINDSET THEN
        BEGIN
          REPEAT
            lrCobroTMP.INIT;
            lrCobroTMP.Delegacion                := lrCobro.Delegacion;
            lrCobroTMP."Num Reserva"             := lrCobro."Num Reserva";
            lrCobroTMP."ID Cobro"                := lrCobro."ID Cobro";
            lrCobroTMP."Forma de Pago"           := lrCobro."Forma de Pago";
            lrCobroTMP."Cod. Divisa"             := lrCobro."Cod. Divisa";
            lrCobroTMP."Importe total cobro"     := lrCobro."Importe Recibido";
            lrCobroTMP."Importe reembolsado ant" := lrCobro."Importe Reembolsado";
            IF pTipo = pTipo::Total THEN
              lrCobroTMP."Importe a reembolsar"  := lrCobro."Importe Recibido";
            lrCobroTMP.INSERT;
          UNTIL lrCobro.NEXT = 0;
        END;
      END;

      //. Pedir al usuario un comentario del reembolso
      IF lrCond.GET(USERID) THEN
        lrCond.DELETE;

      lrCond.INIT;
      lrCond.Usuario                   := USERID;
      lrCond.Delegacion                := prRsv.Delegacion;
      lrCond."N§ Reserva"              := prRsv."N§ Reserva";
      lrCond."N§ Factura proveedor"    := prRsv.Bono;
      lrCond.TourOperador              := prRsv.TourOperador;
      lrCond.Fecha                     := TODAY;
      lrCond."Fecha emision proveedor" := 0D;
      lrCond."Adultos Reembolso"       := 0;
      lrCond."Ni¤os Reembolso"         := 0;
      lrCond."Vehiculos Reembolso"     := 0;
      lrCond."Adultos Reserva"         := prRsv."Adultos Bono";
      lrCond."Ni¤os Reserva"           := prRsv."Ni¤os Bono";
      lrCond.INSERT;
      COMMIT;

      CLEAR(lfFicha);
      lfFicha.SETRECORD(lrCond);
      lfFicha.SETTABLEVIEW(lrCond);
      lfFicha.PasaParametros(0); // 0 = Anular
      lfFicha.PasaTipo(pTipo);
      lfFicha.RUNMODAL;

      lrCond.GET(USERID);
      IF lrCond.Texto = '' THEN
        lrCond.Texto := 'VOID';

      lrRsv := prRsv;
      lrRsv."Comentarios Reembolso"     := lrCond.Texto;

      IF pTipo <> pTipo::Total THEN
        IF NOT (FORM.RUNMODAL(7010243,lrCobroTMP) = ACTION::LookupOK) THEN
          EXIT;

      // Si no hay importe a reembolsar damos error
      lwImpCobro      := 0;
      lwImpReemb      := 0;
      lwImpReembTotal := 0;
      lwImpReemb_Div  := 0;

      lrCobroTMP.RESET;
      lrCobroTMP.SETRANGE(Delegacion   , lrRsv.Delegacion);
      lrCobroTMP.SETRANGE("Num Reserva", lrRsv."N§ Reserva");
      IF lrCobroTMP.FINDSET THEN
      BEGIN
        REPEAT
          lwImpCobro      += lrCobroTMP."Importe total cobro";
          lwImpReemb      += lrCobroTMP."Importe a reembolsar";
          lwImpReembTotal += (lrCobroTMP."Importe reembolsado ant" + lrCobroTMP."Importe a reembolsar");
          IF lrCobroTMP."Cod. Divisa" <> prRsv."C¢d. divisa" THEN
            lwImpReemb_Div += CambioDivisa(lrCobroTMP."Cod. Divisa", prRsv."C¢d. divisa",
                                           lrCobroTMP."Importe a reembolsar", prRsv."Fecha cambio")
          ELSE
            lwImpReemb_Div += lrCobroTMP."Importe a reembolsar";
        UNTIL lrCobroTMP.NEXT = 0;

        IF lwImpReemb = 0 THEN
          ERROR(Text054);
      END;

      IF lwImpReembTotal > lwImpCobro THEN
        ERROR(Text056);

      // Comprobamos si el importe indicado en cobros corresponde con el importe de adultos y ni¤os
      IF pTipo = pTipo::"Parcial personas" THEN
      BEGIN
        lwImporteReembolso := (lrCond."Adultos Reembolso" * lrRsv."Precio entrada adulto") +
                              (lrCond."Adultos Reembolso" * lrRsv."Precio salida adulto") +
                              (lrCond."Ni¤os Reembolso" * lrRsv."Precio entrada ni¤o") +
                              (lrCond."Ni¤os Reembolso" * lrRsv."Precio salida ni¤o");
        IF lwImporteReembolso <> lwImpReemb_Div THEN
          ERROR(Text055);
      END;

      //. Creamos el reembolso
      lrReemb.RESET;
      CASE pTipo OF
        pTipo::Total:
           CrearRegReembolso(lrRsv, lrReemb, pTipo, lrRsv."Adultos Bono", lrRsv."Ni¤os Bono");
        pTipo::"Parcial importe":
           CrearRegReembolso(lrRsv, lrReemb, pTipo, 0, 0);
        pTipo::"Parcial personas":
           CrearRegReembolso(lrRsv, lrReemb, pTipo, lrCond."Adultos Reembolso", lrCond."Ni¤os Reembolso");
      END;

      //. Recuperamos el registro de cobro para ver si el usuario ha indicado importe reembolsado
      lrCobroTMP.RESET;
      lrCobroTMP.SETRANGE(Delegacion   , lrRsv.Delegacion);
      lrCobroTMP.SETRANGE("Num Reserva", lrRsv."N§ Reserva");
      IF lrCobroTMP.FINDSET THEN
      BEGIN
        REPEAT
          IF lrCobroTMP."Importe a reembolsar" <> 0 THEN
          BEGIN
            CrearCobroReembolso(lrRsv, lrCobroTMP,lrReemb);

            lrCobro.RESET;
            IF lrCobro.GET(lrCobroTMP.Delegacion,lrCobroTMP."Num Reserva",lrCobroTMP."ID Cobro") THEN
            BEGIN
              lrCobro."Importe Reembolsado" := lrCobro."Importe Reembolsado" + lrCobroTMP."Importe a reembolsar";
              lrCobro.Reembolsado           := TRUE;
              lrCobro."Fecha reembolso"     := WORKDATE;
              lrCobro.MODIFY;
            END;
          END;
        UNTIL lrCobroTMP.NEXT = 0;
      END;

      //. Modificamos la reserva

      lrRsv.VALIDATE(Reembolsada, TRUE);
      lrRsv."Fecha Reembolso" := WORKDATE;
      //lrRsv."Usuario Modificacion"      := USERID;
      lrRsv."Liquidado GV"              := FALSE;
      lrRsv."Comentarios Reembolso"     := lrCond.Texto;

      CASE pTipo OF
        pTipo::Total:
        BEGIN
          lrRsv."Adultos Reembolsados" := lrRsv."Adultos Reembolsados" + lrRsv."Adultos Bono";
          lrRsv."Ni¤os Reembolsados" := lrRsv."Ni¤os Reembolsados" + lrRsv."Ni¤os Bono";
          lrRsv."Personas Reembolsadas" := lrRsv."Personas Reembolsadas" + lrRsv."Adultos Bono" + lrRsv."Ni¤os Bono";
        END;
        pTipo::"Parcial personas":
        BEGIN
          lrRsv."Adultos Reembolsados" := lrRsv."Adultos Reembolsados" + lrCond."Adultos Reembolso";
          lrRsv."Ni¤os Reembolsados" := lrRsv."Ni¤os Reembolsados" + lrCond."Ni¤os Reembolso";
          lrRsv."Personas Reembolsadas" := lrRsv."Personas Reembolsadas" + lrCond."Adultos Reembolso" + lrCond."Ni¤os Reembolso";
        END;
      END;

      lrRsv."Importe Reembolsado" := lrRsv."Importe Reembolsado" + lwImpReemb_Div;
      lrRsv.CalcReembNeto;
      lrRsv.MODIFY;
      COMMIT;
    END;

    PROCEDURE CrearRegReembolso@1000000001(VAR prRsv@1000000000 : Record 7009744;VAR prReemb@1000000003 : Record 7009928;pTipo@1000000002 : 'Total,Parcial importe,Parcial Persona';pAd@1000000001 : Decimal;pNi@1000000004 : Decimal);
    BEGIN
      // CrearReembolso
      // $010

      prReemb.RESET;
      prReemb.INIT;
      prReemb.Delegacion := prRsv.Delegacion;
      prReemb."Num Reserva" := prRsv."N§ Reserva";
      prReemb."Tipo Reembolso" := pTipo;
      prReemb."Adultos Reembolsados" := pAd;
      prReemb."Ni¤os Reembolsados" := pNi;
      prReemb."Fecha Reembolso" := TODAY;
      prReemb."Hora Reembolso" := TIME;
      prReemb."Usuario Reembolso":= USERID;
      prReemb.Comentario := prRsv."Comentarios Reembolso";
      prReemb."Importe Adulto divisa reserva" := (prReemb."Adultos Reembolsados" * prRsv."Precio entrada adulto") +
                                                 (prReemb."Adultos Reembolsados" * prRsv."Precio salida adulto");
      prReemb."Importe ni¤os divisa reserva" := (prReemb."Ni¤os Reembolsados" * prRsv."Precio entrada ni¤o") +
                                                (prReemb."Ni¤os Reembolsados" * prRsv."Precio salida ni¤o");
      prReemb."Guia Venta" := prRsv."Guia Venta";
      prReemb.CalcNeto;
      prReemb.INSERT(TRUE);
    END;

    PROCEDURE CrearCobroReembolso@1000000002(VAR prRsv@1000000000 : Record 7009744;VAR prCobRsvTmp@1000000001 : TEMPORARY Record 7009929;VAR prReembolso@1000000002 : Record 7009928);
    VAR
      rCobReemb@1000000003 : Record 7009929;
    BEGIN
      // CrearCobroReembolso
      // $010

      rCobReemb.RESET;
      rCobReemb.INIT;
      rCobReemb.Delegacion := prReembolso.Delegacion;
      rCobReemb."Num Reserva" := prReembolso."Num Reserva";
      rCobReemb."Id Reembolso" := prReembolso."ID Reembolso";
      rCobReemb."Forma de Pago" := prCobRsvTmp."Forma de Pago";
      rCobReemb.Importe := prCobRsvTmp."Importe a reembolsar";
      rCobReemb."Cod. Divisa" := prCobRsvTmp."Cod. Divisa";
      rCobReemb."Importe Divisa Reserva" := CambioDivisa(rCobReemb."Cod. Divisa", prRsv."C¢d. divisa", rCobReemb.Importe,
                                                         prRsv."Fecha cambio");
      rCobReemb."Reserva Credito" := prCobRsvTmp."Reserva Credito";
      rCobReemb."Fecha reembolso" := prCobRsvTmp."Fecha reembolso";
      rCobReemb."Guia Venta" := prRsv."Guia Venta";
      rCobReemb.INSERT(TRUE);
    END;

    PROCEDURE CambioDivisa@1000000003(pwDivOrigen@1100217000 : Code[10];pwDivDestino@1100217001 : Code[10];pwImporte@1100217003 : Decimal;pwFecha@1000000000 : Date) : Decimal;
    VAR
      lwImporte@1100217002 : Decimal;
      lrDivisa@1100217004 : Record 4;
      rCamb@1000000001 : Record 330;
    BEGIN
      // CambioDivisa

      IF pwDivOrigen = pwDivDestino THEN
        EXIT(pwImporte);

      CLEAR(lrDivisa);
      IF pwDivDestino <> '' THEN
        lrDivisa.GET(pwDivDestino);

      lwImporte  := ROUND(rCamb.ExchangeAmtFCYToFCY(pwFecha, pwDivOrigen, pwDivDestino, pwImporte),
                       lrDivisa."Amount Rounding Precision");

      EXIT(lwImporte);
    END;

    PROCEDURE MarcarProblemaCobros@1000000004(VAR prRsv@1100217000 : Record 7009744);
    BEGIN
      // MarcarProblemaCobros
      // $011

      prRsv.VALIDATE("Cobros con problemas", NOT prRsv."Cobros con problemas");
      prRsv.MODIFY;
    END;

    PROCEDURE Cambio_Fecha_Hotel@1000000005(VAR par_rsv@1103355000 : Record 7009744;pTipoCambio@1000000000 : 'Fecha llegada,Fecha salida,Hotel llegada,Hotel salida');
    VAR
      rRsv@1103355003 : Record 7009744;
      rRsv2@1103355004 : Record 7009744;
      rHotel@1000000009 : Record 7009724;
      rVuelo@1000000010 : Record 7009754;
      ventana@1103355008 : Dialog;
      vFecLle@1000000001 : Date;
      vFecSal@1000000002 : Date;
      vCiaLle@1000000003 : Code[10];
      vVueLle@1000000004 : Code[10];
      vCiaSal@1000000005 : Code[10];
      vVueSal@1000000006 : Code[10];
      vNewFec@1000000007 : Date;
      vNewHot@1000000008 : Code[10];
    BEGIN
      // Cambio_Fecha_Hotel
      // +$013

      // pTipoCambio 0 = Fecha llegada
      //             1 = Fecha salida
      //             2 = Hotel llegada
      //             3 = Hotel salida

      // Hacemos comprobaciones
      rRsv.RESET;
      rRsv.SETCURRENTKEY("Marca cambios");
      rRsv.SETRANGE("Marca cambios", USERID);

      IF rRsv.FINDSET THEN
      BEGIN
        vFecLle := rRsv."Fecha entrada";
        vFecSal := rRsv."Fecha salida";
        vCiaLle := rRsv."Compa¤ia entrada";
        vVueLle := rRsv."Vuelo entrada";
        vCiaSal := rRsv."Compa¤ia salida";
        vVueSal := rRsv."Vuelo salida";
        REPEAT
          rRsv.TESTFIELD("No Show", FALSE);

          CASE pTipoCambio OF
            // Fecha entrada
            0: BEGIN
                IF rRsv."Fecha entrada" <> vFecLle THEN
                  ERROR(Text057);

                IF (rRsv."Compa¤ia entrada" <> vCiaLle) OR (rRsv."Vuelo entrada" <> vVueLle) THEN
                  ERROR(Text058);

                IF rRsv."Agrupacion entrada" <> 0 THEN
                  ERROR(Text059);
               END;
            // Fecha salida
            1: BEGIN
                IF rRsv."Fecha salida" <> vFecSal THEN
                  ERROR(Text057);

                IF (rRsv."Compa¤ia salida" <> vCiaSal) OR (rRsv."Vuelo salida" <> vVueSal) THEN
                  ERROR(Text058);

                IF rRsv."Agrupacion salida" <> 0 THEN
                 ERROR(Text059);
               END;
            // Hotel llegada
            2: BEGIN
                IF rRsv."Fecha entrada" <> vFecLle THEN
                  ERROR(Text057);

                IF rRsv."Agrupacion entrada" <> 0 THEN
                  ERROR(Text059);
               END;
            // Hotel salida
            3: BEGIN
                IF rRsv."Fecha salida" <> vFecSal THEN
                  ERROR(Text057);

                IF rRsv."Agrupacion salida" <> 0 THEN
                 ERROR(Text059);
               END;
          END;

        UNTIL rRsv.NEXT = 0;
      END;

      //. Cambios de fecha
      IF (pTipoCambio = 0) OR (pTipoCambio = 1) THEN
      BEGIN
        vNewFec := 0D;
        ventana.OPEN(Text066);
        ventana.INPUT(1,vNewFec);
        ventana.CLOSE;
        IF vNewFec = 0D THEN
          EXIT;

        IF pTipoCambio = 0 THEN
          IF NOT CONFIRM(Text060, FALSE, vNewFec, Text062) THEN
            EXIT;
        IF pTipoCambio = 1 THEN
          IF NOT CONFIRM(Text060, FALSE, vNewFec, Text063) THEN
            EXIT;

        CLEAR(rVuelo);
        IF CONFIRM(Text065, FALSE) THEN
        BEGIN
          rVuelo.RESET;
          rVuelo.FILTERGROUP(2);
          rVuelo.SETRANGE(Fecha           , vNewFec);
          rVuelo.SETRANGE("Entrada/Salida", pTipoCambio);
          rVuelo.FILTERGROUP(0);
          IF NOT (FORM.RUNMODAL(0, rVuelo) = ACTION::LookupOK) THEN BEGIN
            CLEAR(rVuelo);
          END;
        END;
      END;

      IF (pTipoCambio = 2) OR (pTipoCambio = 3) THEN
      BEGIN
        vNewHot := '';
        rHotel.RESET;
        rHotel.FILTERGROUP(2);
        rHotel.SETRANGE(NoName          , FALSE);
        rHotel.SETRANGE("Hotel Ficticio", FALSE);
        rHotel.FILTERGROUP(0);
        rHotel.SETRANGE(Catalogo        , TRUE);
        IF rHotel.FINDFIRST THEN
          IF FORM.RUNMODAL(0, rHotel) = ACTION::LookupOK THEN
            vNewHot := rHotel.Hotel;
        IF vNewHot = '' THEN
          EXIT;

        IF pTipoCambio = 2 THEN
          IF NOT CONFIRM(Text061, FALSE, vNewHot, Text062) THEN
            EXIT;
        IF pTipoCambio = 3 THEN
          IF NOT CONFIRM(Text061, FALSE, vNewHot, Text063) THEN
            EXIT;
      END;

      IF rRsv.FINDSET THEN
      BEGIN
        IF (pTipoCambio = 0) OR (pTipoCambio = 1) THEN
          ventana.OPEN(Text064 +
                       '\' +
                       Text047)
        ELSE
          ventana.OPEN(Text046 +
                       '\' +
                       Text047);

        REPEAT
          rRsv2 := rRsv;
          ventana.UPDATE(1, rRsv.Bono);

          CASE pTipoCambio OF
            // Fecha entrada
            0: BEGIN
                IF vNewFec > rRsv2."Fecha salida" THEN
                  ERROR(Text067);
                rRsv2.VALIDATE("Fecha entrada"       , vNewFec);
                rRsv2.VALIDATE("Compa¤ia entrada"    , rVuelo.Compa¤ia);
                rRsv2.VALIDATE("Vuelo entrada"       , rVuelo.Vuelo);
                rRsv2.VALIDATE("IATA origen entrada" , rVuelo.Origen);
                rRsv2.VALIDATE("IATA destino entrada", rVuelo.Destino);
                rRsv2.VALIDATE("Terminal entrada"    , rVuelo.Terminal);
               END;
            // Fecha salida
            1: BEGIN
                IF vNewFec < rRsv2."Fecha entrada" THEN
                  ERROR(Text067);
                rRsv2.VALIDATE("Fecha salida"       , vNewFec);
                rRsv2.VALIDATE("Compa¤ia salida"    , rVuelo.Compa¤ia);
                rRsv2.VALIDATE("Vuelo salida"       , rVuelo.Vuelo);
                rRsv2.VALIDATE("IATA origen salida" , rVuelo.Origen);
                rRsv2.VALIDATE("IATA destino salida", rVuelo.Destino);
                rRsv2.VALIDATE("Terminal salida"    , rVuelo.Terminal);
               END;
            // Hotel llegada
            2: BEGIN
                rRsv2.VALIDATE("Hotel entrada", vNewHot);
               END;
            // Hotel salida
            3: BEGIN
                rRsv2.VALIDATE("Hotel salida", vNewHot);
               END;
          END;

          rRsv2."Marca cambios" := '';
          rRsv2.MODIFY(TRUE);
        UNTIL rRsv.NEXT = 0;
        ventana.CLOSE;
      END;
    END;

    BEGIN
    {
      $001 AJS 21012011 En la funciones cambia_datos_entrada y cambia_datos_salida pongo un control para que no se puedan
                        ejecutar si no hay reserva de transfer

      $002 AJS 08102012 Modificar la funcion crear_transfer para trabajar con el nuevo campo "Tipo precio coste"

      $003 AJS 15102012 Modificar la funcion crear_transfer para trabajar con el nuevo campo "Hora inicio"

      $004 AJS 22102012 Modificar la funcion crear_transfer para trabajar con el nuevo campo "Servicio cambio de zona"

      $005 AJS 01032013 Nueva funcion SacarAgrupacionCuadrante

      $006 AJS 18032014 Modificar los MODIFY de acompa¤ante para que sean TRUE

      $007 AJS 01072014 Modifico la funcion Cambiar_Agrupacion para a¤adir nuevo parametro en la funcion comparar
                        transfer privado

      $008 AJS 29092014 Modifico la funcion crear_transfer para que se pueda crear un transfer privado

      $009 ARM 30092014 CNT-CAR-14063 Nuevo campo Tipo servicio

      $010 ARM 03102014 CNT-CAR-14063 Nueva funcionalidad de reembolsar

      $011 ARM 15102014 CNT-CAR-14063 Liquidaci¢n guia venta

      $012 AJS 08052015 Correccion del texto de la TextConstant Text037

      $013 ARM 28052015 CNT-OC-14094 Cambio masivos de fechas/hotel por cancelaci¢n vuelo

      $014 AJS 01062015 Eliminar funciones ListarxZona_Entrada y ListarxZona_Salida son obsoletas

      $015 AJS 27072015 Elimino las funciones totalizar_importes y sumar_paxes, porque son obsoletas
    }
    END.
  }
}
