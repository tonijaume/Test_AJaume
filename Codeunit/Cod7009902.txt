OBJECT Codeunit 7009902 Gestion proformas Incoming
{
  OBJECT-PROPERTIES
  {
    Date=13/03/15;
    Time=10:44:38;
    Modified=Yes;
    Version List=AIC2009,COM;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1103355000 : TextConst 'ENU=Would you like to start the process of creating proforma invoices;ESP=Desea iniciar el proceso de creacion de proformas.';
      rPar@1103355001 : Record 7009700;
      rParPer@1103355002 : Record 7009701;
      Text002@1103355003 : TextConst 'ENU=Would you like to cancel proforma invoice %1;ESP=Desea anular la proforma %1.';
      Text003@1103355004 : TextConst 'ENU=Only remaining proformas can be generated.;ESP=Solo se pueden generar las proformas pendientes.';
      Text004@1103355005 : TextConst 'ENU=Would you like to mark proforma %1 as generated;ESP=Desea marcar la proforma %1 como generada.';
      Text005@1103355006 : TextConst 'ENU=Product %1 does not have an indicated amount;ESP=El producto %1 no tiene indicado importe.';
      Text006@1103355007 : TextConst 'ENU=This payment in advance has already been registered;ESP=Este prepago ya esta registrado.';
      Text007@1103355008 : TextConst 'ENU=Generated diary lines in %1 - %2, pending to be registered;ESP=Lineas de diario generadas en %1 - %2, pendientes de registrar.';
      wVentana@1103355009 : Dialog;
      Text008@1103355010 : TextConst 'ENU=PROFORMA GENERATING PROCESS \#1###################################\#2### OF #3###\@4@@@@@@@@@@@@@@@@@@@@@@@@@@;ESP=PROCESO DE GENERACION DE PROFORMAS \#1###################################\#2### DE #3###\@4@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Text009@1103355011 : TextConst 'ENU=Posting diary: %1;ESP=Diario contabilizaciones : %1';
      Text010@1103355012 : TextConst 'ENU=No current Hotel Sale contract for TTOO: %1 and currency %2 was found;ESP=No se puede encontrar un Contrato de Venta Hotel vigente para el TTOO: %1 y divisa %2.';
      Text020@1103355013 : TextConst 'ENU=No reservation has been marked;ESP=No se ha marcado ninguna reserva';
      Text021@1103355014 : TextConst 'ENU=All reservations must have same %1;ESP=Todas las reservas deben de tener igual %1';
      Text022@1103355015 : TextConst 'ENU="Reservation %1 is already included in\Proforma = %2";ESP="La reserva %1 ya est  incluida en\Proforma = %2"';
      Text023@1103355016 : TextConst 'ENU=Proforma %1 created;ESP=Creada Proforma %1';
      Text024@1103355017 : TextConst 'ENU=Regenerated proforma;ESP=Proforma Regenerada';
      Text025@1103355018 : TextConst 'ENU=Would you like to regenerate proforma %1?;ESP=¨Desea realmente regenerar la proforma %1?';
      cCalcCir@1103355019 : Codeunit 7010150;
      Text026@1103355020 : TextConst 'ENU=Would you like to print the vouchers with proforma %1?;ESP=¨Desea imprimir los Vouchers conjuntamente con la proforma?';
      Text027@1103355021 : TextConst 'ENU=Print all,Print selected lines;ESP=Imprimir todos,Imprimir linea seleccionada';
      Text028@1103355022 : TextConst 'ENU=Proforma must be settled in order to print the vouchers;ESP=La proforma ha de estar saldada para poder imprimir los vouchers.';
      Text029@1103355023 : TextConst 'ENU=Unable to add lines to one proforma which is not remaining;ESP=No se pueden agregar l¡neas a una proforma que no este pendiente.';
      Text030@1103355024 : TextConst 'ENU=Must fill up all the fields of requirements card;ESP=Debe rellenar todos los campos de la ficha de condiciones.';
      Text031@1103355025 : TextConst 'ENU=Excursion has already been included into a proforma;ESP=Est  excursi¢n ya ha sido incluida previamente en una proforma.';
      Text032@1103355026 : TextConst 'ENU=Client does not have set department dimension;ESP=El cliente no tiene dimension de departamento configurada.';
      Text033@1103355027 : TextConst 'ENU=Move all,Move current;ESP=Mover todas,Mover actual';
      cCotCom@1103355028 : Codeunit 7009913;
      wTipoTra@1103355029 : 'Entrada,Salida,Ambos';
      Text034@1103355030 : TextConst 'ENU=Any current sale contract fot Touroperator %1 and currency %2 was found;ESP=No existe contrato de venta vigente para el Touroperador %1 y divisa %2.';
      Text035@1103355031 : TextConst 'ENU=Proforma info has been printed correctly?;ESP=¨Se ha impreso correctamente la documentaci¢n de la proforma?';
      Text036@1103355032 : TextConst 'ENU=Unable to print. There is a line of Hotel or Transfer without voucher number or a line of excursion without booking No.;ESP=No se puede imprimir. Hay alguna l¡nea de Hotel o Transfer s¡n n£mero de bono o un l¡nea de excursi¢n sin n§ de reserva.';
      wTipoImpVoucher@1103355033 : 'Agencia,TourOperador,Adjunto';
      cVarias@1103355034 : Codeunit 7009720;
      Text037@1103355035 : TextConst 'ENU=In case you continue arrival date will be used as expiration date. Continue?;ESP=Si continua se usar  la fecha de llegada como fecha de vencimiento.¨Desea continuar?';
      Text038@1100217000 : TextConst 'ENU=The product %1 has no amount indicated. Do you want to continue.;ESP=El producto %1 no tiene indicado importe. Desea continuar.';
      wDiarioGeneral@1100217001 : Code[10];

    PROCEDURE ProcesoProformas@1103355000();
    VAR
      lrTTOO@1103355000 : Record 7009717;
      lrCont@1103355001 : Record 7009727;
      lrTermPago@1103355002 : Record 3;
      lrContTra@1103355010 : Record 7009788;
      lwFechaDesde@1103355003 : Date;
      lwFechaHasta@1103355005 : Date;
      lwFecha@1103355007 : Date;
      lwTexto@1103355004 : Text[30];
      lwFormula@1103355006 : DateFormula;
      lwActual@1103355008 : Integer;
      lwTotal@1103355009 : Integer;
    BEGIN
      // ProcesoProformas

      rPar.FINDFIRST;

      IF NOT CONFIRM(Text001) THEN
        EXIT;

      // 1. Recorremos todos los touroperadores para buscar un contrato de venta hotel
      //    activo en la fecha de trabajo

      lrTTOO.RESET;
      IF lrTTOO.FINDSET THEN BEGIN
        wVentana.OPEN(Text008);

        lwActual := 0;
        lwTotal  := lrTTOO.COUNT;
        REPEAT
          lwActual += 1;

          wVentana.UPDATE(1, lrTTOO.TourOperador + ' - ' + lrTTOO.Nombre);
          wVentana.UPDATE(2, lwActual);
          wVentana.UPDATE(3, lwTotal);

          IF BuscaContrato(lrCont, rPar.Delegacion, lrTTOO.TourOperador, '') THEN BEGIN

            lrCont.TESTFIELD("Cod. Terminos pago");

            // 2. Hay que tomar los terminos de pago para ver si la formula de fecha es en negativo

            lrTermPago.GET(lrCont."Cod. Terminos pago");
            lwTexto := FORMAT(lrTermPago."Due Date Calculation");
            IF COPYSTR(lwTexto, 1, 1) = '-' THEN BEGIN

              // Para ver de que fechas hay que generar las proformas hay que tener cuenta lo siguiente
              // [fecha desde] --> HOY + los terminos de pago (en positivo) mas un dia
              // [fecha hasta] --> HOY + Dias prepago de la ficha de tourperador

              lwTexto   := COPYSTR(lwTexto, 2, MAXSTRLEN(lwTexto));
              EVALUATE(lwFormula, lwTexto + '+1D');

              lwFechaDesde := CALCDATE(lwFormula, TODAY);

              lrTTOO.TESTFIELD("Dias prepago");
              lwTexto := '+' + FORMAT(lrTTOO."Dias prepago") + 'D';
              EVALUATE(lwFormula, lwTexto);

              lwFechaHasta := CALCDATE(lwFormula, TODAY);
              FOR lwFecha := lwFechaDesde TO lwFechaHasta DO
                IF lrTTOO."Proforma x bono" THEN
                  CrearProformaxBono(lrTTOO.TourOperador, lwFecha, lrCont.Cliente, lrTermPago."Due Date Calculation", FALSE)
                ELSE
                  CrearProforma(lrTTOO.TourOperador, lwFecha, lrCont.Cliente, lrTermPago."Due Date Calculation", '', 0, TRUE, '');

            END;

          END;

          // AJF 30/01/09
          // A¤ado un bucle que busca por contrato de transfer ya que puede haber reservas solo
          // transfer en las que el TTOO no tenga contrato de venta hotel.

          IF BuscaContratoTransfer(lrContTra, lrTTOO) THEN BEGIN
            lrContTra.TESTFIELD("Cod. Terminos Pago");

            // 2. Hay que tomar los terminos de pago para ver si la formula de fecha es en negativo

            lrTermPago.GET(lrContTra."Cod. Terminos Pago");
            lwTexto := FORMAT(lrTermPago."Due Date Calculation");
            IF COPYSTR(lwTexto, 1, 1) = '-' THEN BEGIN

              // Para ver de que fechas hay que generar las proformas hay que tener cuenta lo siguiente
              // [fecha desde] --> HOY + los terminos de pago (en positivo) mas un dia
              // [fecha hasta] --> HOY + Dias prepago de la ficha de tourperador

              lwTexto   := COPYSTR(lwTexto, 2, MAXSTRLEN(lwTexto));
              EVALUATE(lwFormula, lwTexto + '+1D');

              lwFechaDesde := CALCDATE(lwFormula, TODAY);

              lrTTOO.TESTFIELD("Dias prepago");
              lwTexto := '+' + FORMAT(lrTTOO."Dias prepago") + 'D';
              EVALUATE(lwFormula, lwTexto);

              lwFechaHasta := CALCDATE(lwFormula, TODAY);
              FOR lwFecha := lwFechaDesde TO lwFechaHasta DO
                IF lrTTOO."Proforma x bono" THEN
                  CrearProformaxBono(lrTTOO.TourOperador, lwFecha, lrContTra.Cliente, lrTermPago."Due Date Calculation", FALSE)
                ELSE
                  CrearProforma(lrTTOO.TourOperador, lwFecha, lrContTra.Cliente, lrTermPago."Due Date Calculation", '', 0, TRUE, '');

            END;

          END;

        UNTIL lrTTOO.NEXT = 0;
        wVentana.CLOSE;
      END;
    END;

    PROCEDURE BuscaContrato@1103355001(VAR prCont@1103355000 : Record 7009727;pwDelegacion@1103355002 : Code[10];pwTouroperador@1103355001 : Code[10];pwDivisa@1103355003 : Code[10]) : Boolean;
    VAR
      lrCli@1103355004 : Record 18;
      lrContTrf@1100217000 : Record 7009788;
    BEGIN
      // BuscaContrato

      prCont.RESET;
      prCont.SETCURRENTKEY(Delegacion,
                           TourOperador,
                           Hotel,
                           "Fecha inicio contrato",
                           "Fecha final contrato");
      prCont.SETRANGE (Delegacion             , pwDelegacion);

      IF pwTouroperador <> '' THEN
        prCont.SETRANGE (TourOperador         , pwTouroperador);

      prCont.SETFILTER("Fecha inicio contrato", '<=%1', TODAY);
      prCont.SETFILTER("Fecha final contrato" , '>=%1', TODAY);
      prCont.SETRANGE (Confirmado             , TRUE);
      IF prCont.FINDSET THEN BEGIN
        REPEAT

          // Si no hay divisa indicada el primer contrato va bien.
          IF pwDivisa = '' THEN
            EXIT(TRUE);

          IF lrCli.GET(prCont.Cliente) THEN
            IF pwDivisa = lrCli."Currency Code" THEN
              EXIT(TRUE);

        UNTIL prCont.NEXT = 0;
      END;

      //lrContTrf.RESET;
      //lrContTrf.SETRANGE (Delegacion             , pwDelegacion);
      //lrContTrf.SETRANGE (TourOperador           , pwTouroperador);
      //lrContTrf.SETFILTER("Fecha inicio contrato", '<=%1', TODAY);
      //lrContTrf.SETFILTER("Fecha final contrato" , '>=%1', TODAY);
      //IF lrContTrf.FINDFIRST THEN
      //BEGIN
        // Si no hay divisa indicada el primer contrato va bien.
      //  IF pwDivisa = '' THEN
      //    EXIT(TRUE);

      //  IF lrCli.GET(lrContTrf.Cliente) THEN
      //    IF pwDivisa = lrCli."Currency Code" THEN
      //      EXIT(TRUE);
      //END;

      EXIT(FALSE);
    END;

    PROCEDURE CrearProforma@1103355003(pwTTOO@1103355000 : Code[10];pwFecha@1103355001 : Date;pwCliente@1103355004 : Code[20];pwVencimiento@1103355006 : DateFormula;pwBono@1103355005 : Code[10];pwCotizacion@1103355011 : Integer;pwVentanaProgreso@1103355012 : Boolean;pwDivisa@1103355013 : Code[10]) : Code[20];
    VAR
      lrPer@1103355002 : Record 7009742;
      lrProf@1103355003 : Record 7009866;
      lwActual@1103355007 : Integer;
      lwTotal@1103355008 : Integer;
      lrResCirTMP@1103355009 : TEMPORARY Record 2000000026;
      lwFechaSalida@1103355010 : Date;
    BEGIN
      // CrearProforma

      // Filtramos en los periodos para ver si el touroperador tiene reservas
      // con llegada en esa fecha
      // Devuelve el codigo de la proforma creada

      lrPer.RESET;

      // AJF 07/05/09
      // mejoro la clave para cotizaciones
      IF pwCotizacion <> 0 THEN
        lrPer.SETCURRENTKEY("TourOperador Venta", Bono)
      ELSE
        lrPer.SETCURRENTKEY("TourOperador Venta","Fecha entrada");

      lrPer.SETRANGE("TourOperador Venta"       , pwTTOO);

      // AJF 07/05/09
      // Si es una proforma de una cotizaci¢n no filtramos por fecha de entrada
      // para que pueda coger todas las reservas contenidas en la cotizaci¢n.
      //lrPer.SETRANGE("Fecha entrada"    , pwFecha);
      IF pwCotizacion = 0 THEN
        lrPer.SETRANGE("Fecha entrada"    , pwFecha);

      lrPer.SETRANGE("Proforma Generada", FALSE);

      IF pwBono <> '' THEN
        lrPer.SETRANGE(Bono, pwBono);

      IF lrPer.FINDSET THEN BEGIN

        IF pwVentanaProgreso THEN BEGIN
          lwActual := 0;
          lwTotal  := lrPer.COUNT;
        END;

        // AJF 04/03/09
        // Mantenemos la fecha de salida para ponerla en la cabecera de la proforma.
        IF (lwFechaSalida < lrPer."Fecha salida") OR (lwFechaSalida = 0D) THEN
          lwFechaSalida := lrPer."Fecha salida";

        CabeceraProforma(lrProf, lrResCirTMP, pwTTOO, pwFecha, pwCliente, pwVencimiento, pwBono, pwCotizacion, pwDivisa);
        REPEAT

          IF pwVentanaProgreso THEN BEGIN
            lwActual += 1;
            wVentana.UPDATE(4, ROUND(lwActual / lwTotal * 10000, 1));
          END;

          CuerpoProforma(lrPer, lrProf, lrResCirTMP, pwCotizacion);
        UNTIL lrPer.NEXT = 0;

        lrProf."Fecha salida" := lwFechaSalida;
        lrProf.MODIFY;

      END;

      EXIT(lrProf."Num. Proforma");
    END;

    PROCEDURE CrearProformaManual@1103355012(VAR prResH@1103355000 : Record 7009743);
    VAR
      lrResvH@1103355001 : Record 7009743;
      lrResvH2@1103355003 : Record 7009743;
      lrProf@1103355002 : Record 7009866;
      lrPer@1103355004 : Record 7009742;
      lrCont@1103355005 : Record 7009727;
      lrTermPago@1103355006 : Record 3;
      lrResCirTMP@1103355007 : TEMPORARY Record 2000000026;
    BEGIN
      // CrearProformaManual

      // Creamos una proforma de las reservas marcadas
      lrResvH.COPY(prResH);

      lrResvH.SETCURRENTKEY(Delegacion,"N§ Reserva");
      lrResvH.MARKEDONLY(TRUE);
      // Comprobaciones previas
      IF lrResvH.FINDSET THEN BEGIN
        // Comprobamos que tengan la misma fecha de llegada y que no est ya proformada
        // Que sea del mismo cliente y ttoo
        lrResvH2 := lrResvH;
        REPEAT
          IF  lrResvH2."Fecha entrada" <> lrResvH."Fecha entrada" THEN
            ERROR(Text021, lrResvH2.FIELDCAPTION("Fecha entrada"));
          IF  lrResvH2.TourOperador <> lrResvH.TourOperador THEN
            ERROR(Text021, lrResvH2.FIELDCAPTION(TourOperador));
          ReservaProformada(lrResvH, TRUE);
        UNTIL lrResvH.NEXT=0;
      END
      ELSE
        ERROR(Text020);

      // Buscamos el cliente a traves del contrato
      lrCont.GET(lrResvH2.Delegacion, lrResvH2."Contrato venta");
      lrCont.TESTFIELD("Cod. Terminos pago");
      lrTermPago.GET(lrCont."Cod. Terminos pago");

      // Se crea la proforma
      CLEAR(lrProf);
      lrProf.Touroperador        := lrResvH2.TourOperador;
      lrProf."Fecha llegada"     := lrResvH2."Fecha entrada";
      lrProf.Cliente             := lrCont.Cliente;
      lrProf."Fecha vencimiento" := CALCDATE(lrTermPago."Due Date Calculation", lrProf."Fecha llegada");
      lrProf.Manual              := TRUE;
      lrProf.INSERT(TRUE);

      // AJF 02/12/08
      // Guardo las reservas de circuito en este temporary
      lrResCirTMP.RESET;
      lrResCirTMP.DELETEALL;

      lrResvH.FINDSET;
      REPEAT // Lineas
        IF lrPer.GET(prResH.Delegacion, prResH."N§ Interno", prResH."N§ Periodo") THEN BEGIN
          LineasProforma(lrPer, lrProf."Num. Proforma", lrResvH."N§ Reserva", lrResCirTMP, 0);
          lrPer."Proforma Generada" := TRUE; // Marcamos el periodo
          lrPer."Num. Proforma"     := lrProf."Num. Proforma";
          lrPer.MODIFY;
          lrProf."Reservas incluidas" += 1;
        END;
      UNTIL lrResvH.NEXT=0;

      prResH.CLEARMARKS;
      lrProf.MODIFY;
      MESSAGE(Text023, lrProf."Num. Proforma");
    END;

    PROCEDURE CrearProformaCotizacion@1103355032(VAR prCab@1103355000 : Record 7009871) : Code[20];
    VAR
      lrContV@1103355001 : Record 7009727;
      lrParAgencia@1103355002 : Record 7009700;
      lrTermPago@1103355003 : Record 3;
    BEGIN
      // CrearProformaCotizacion

      lrParAgencia.FINDFIRST;

      // AJF 07/04/10.
      // Se a¤ade la divisa a la busqueda de contrato.
      IF NOT BuscaContrato(lrContV, lrParAgencia.Delegacion, prCab."Touroperador Venta", prCab.Divisa) THEN
        ERROR(Text034, prCab."Touroperador Venta", prCab.Divisa);

      lrTermPago.GET(lrContV."Cod. Terminos pago");

      prCab.Proforma := CrearProforma(prCab."Touroperador Venta", prCab."Fecha entrada", lrContV.Cliente,
                                      lrTermPago."Due Date Calculation", prCab.Bono, prCab.Id, FALSE, prCab.Divisa);
      prCab.MODIFY;
    END;

    PROCEDURE LineasProforma@1103355002(prPer@1103355000 : Record 7009742;pwProforma@1103355005 : Code[20];pwNoResHot@1103355006 : Integer;VAR prResCirTMP@1103355007 : TEMPORARY Record 2000000026;pwCotizacion@1103355013 : Integer);
    VAR
      lrRsvHot@1103355001 : Record 7009743;
      lrRsvTra@1103355002 : Record 7009744;
      lrRsvExc@1103355003 : Record 7010162;
      lrRsvCir@1103355011 : Record 7010186;
      lrPaxTOCir@1103355012 : Record 7010188;
      lrLinProf@1103355004 : Record 7009867;
      lwImporte@1103355008 : Decimal;
      lwAdultos@1103355009 : Integer;
      lwNi¤os@1103355010 : Integer;
      lrVinculos@1103355014 : Record 7009884;
      lrLinCalCot@1103355015 : Record 7009872;
      lwImpCot@1103355016 : Decimal;
    BEGIN
      // LineasProforma

      // pwNoResHot puede venir a 0, entonces no filtrar  por ese campo

      // AJF 02/12/08
      // A¤adimos las lineas de circuito.
      IF prPer.Circuito THEN BEGIN

        IF prResCirTMP.GET(prPer."N§ Interno") THEN
          EXIT;

        prResCirTMP.Number := prPer."N§ Interno";
        prResCirTMP.INSERT;

        lrRsvCir.SETCURRENTKEY(Delegacion, "N§ Interno");
        lrRsvCir.SETRANGE(Delegacion  , prPer.Delegacion);
        lrRsvCir.SETRANGE("N§ Interno", prPer."N§ Interno");

        IF lrRsvCir.FINDSET THEN BEGIN
          lrPaxTOCir.SETRANGE(Delegacion, lrRsvCir.Delegacion);
          lrPaxTOCir.SETRANGE(Circuito  , lrRsvCir.Circuito);
          lrPaxTOCir.SETRANGE(Orden     , lrRsvCir.Orden);
          lrPaxTOCir.SETRANGE("N§ Linea", lrRsvCir."N§ linea");
          IF lrPaxTOCir.FINDFIRST THEN BEGIN

            CalculoCircuito(lrPaxTOCir, lwAdultos, lwNi¤os);
            lrPaxTOCir.CALCFIELDS(Importe);

            CLEAR(lrLinProf);
            lrLinProf."Num. Proforma"        := pwProforma;
            lrLinProf."Tipo producto"        := lrLinProf."Tipo producto"::Circuito;
            lrLinProf.VALIDATE(Producto, lrPaxTOCir.Circuito);
            lrLinProf.Bono                   := lrRsvCir.Bono;
            lrLinProf."Num. Reserva"         := lrRsvCir."N§ Reserva";
            lrLinProf."Cod. Hotel"           := '';
            lrLinProf."Zona Hotel"           := '';
            lrLinProf.Fecha                  := lrPaxTOCir.Fecha;
            lrLinProf.Habitacion             := lrPaxTOCir."Tipo Habitacion";
            lrLinProf.Regimen                := '';
            lrLinProf.Estancia               := 0;
            lrLinProf.Importe                := ROUND(lrPaxTOCir.Importe); //+$002
            lrLinProf.Adultos                := lwAdultos;
            lrLinProf.Ni¤os                  := lwNi¤os;
            lrLinProf.INSERT(TRUE);

          END;
        END;
        EXIT;
      END;

      // ------------------------
      // LINEAS DE RESERVA HOTEL
      // ------------------------

      lrRsvHot.RESET;
      lrRsvHot.SETCURRENTKEY(Delegacion,
                             "N§ Interno",
                             "N§ Periodo");
      lrRsvHot.SETRANGE(Delegacion  , prPer.Delegacion);
      lrRsvHot.SETRANGE("N§ Interno", prPer."N§ Interno");
      lrRsvHot.SETRANGE("N§ Periodo", prPer."N§ Periodo");
      lrRsvHot.SETRANGE(Responsable , TRUE);
      IF pwNoResHot <> 0 THEN
        lrRsvHot.SETRANGE("N§ Reserva", pwNoResHot);
      IF lrRsvHot.FINDSET THEN BEGIN
        REPEAT
          lwAdultos := 0;
          lwNi¤os   := 0;

          lwImporte := CalculoHotel(lrRsvHot, lwAdultos, lwNi¤os, pwCotizacion);

          CLEAR(lrLinProf);
          lrLinProf."Num. Proforma"        := pwProforma;
          lrLinProf."Tipo producto"        := lrLinProf."Tipo producto"::Hotel;
          lrLinProf.VALIDATE(Producto, lrRsvHot.Producto);
          lrLinProf.Bono                   := lrRsvHot.Bono;
          lrLinProf."Num. Reserva"         := lrRsvHot."N§ Reserva";
          lrLinProf."Cod. Hotel"           := lrRsvHot."Hotel reservado";
          lrLinProf."Zona Hotel"           := lrRsvHot."Zona hotel";
          lrLinProf.Fecha                  := lrRsvHot."Fecha entrada";
          lrLinProf.Habitacion             := lrRsvHot.Habitacion;
          lrLinProf.Regimen                := lrRsvHot.Regimen;
          lrLinProf.Estancia               := lrRsvHot.Estancia;
          lrLinProf.Importe                := ROUND(lwImporte); //+$002
          lrLinProf.Adultos                := lwAdultos;
          lrLinProf.Ni¤os                  := lwNi¤os;
          lrLinProf."N§ Interno"           := lrRsvHot."N§ Interno";
          lrLinProf."N§ Periodo"           := lrRsvHot."N§ Periodo";
          lrLinProf."N§ Habitaciones"      := lrRsvHot."N§ Habitaciones";

          lrLinProf.INSERT(TRUE);

        UNTIL lrRsvHot.NEXT = 0;
      END;

      // ---------------------------
      // LINEAS DE RESERVA TRANSFER
      // ---------------------------

      lrRsvTra.RESET;
      lrRsvTra.SETCURRENTKEY(Delegacion,
                             "N§ Interno",
                             "N§ Periodo");
      lrRsvTra.SETRANGE(Delegacion  , prPer.Delegacion);
      lrRsvTra.SETRANGE("N§ Interno", prPer."N§ Interno");
      lrRsvTra.SETRANGE("N§ Periodo", prPer."N§ Periodo");
      IF lrRsvTra.FINDSET THEN BEGIN
        REPEAT

          IF lrRsvTra."N§ Reserva" = lrRsvTra."N§ Responsable" THEN BEGIN
            // Calculamos el ingreso de transfer, en principio a precio x pax

            lwAdultos := 0;
            lwNi¤os   := 0;

            lwImporte := CalculoTransfer(lrRsvTra, lwAdultos, lwNi¤os, pwCotizacion);

            CLEAR(lrLinProf);
            lrLinProf."Num. Proforma"        := pwProforma;
            lrLinProf."Tipo producto"        := lrLinProf."Tipo producto"::Transfer;
            lrLinProf.VALIDATE(Producto, lrRsvTra.Producto);
            lrLinProf.Bono                   := lrRsvTra.Bono;
            lrLinProf."Num. Reserva"         := lrRsvTra."N§ Reserva";
            lrLinProf.Fecha                  := lrRsvTra."Fecha entrada";
            lrLinProf."Cod. Hotel"           := lrRsvTra."Hotel entrada";
            lrLinProf."Zona Hotel"           := lrRsvTra."Zona entrada";
            lrLinProf.Habitacion             := '';
            lrLinProf.Regimen                := '';
            lrLinProf.Estancia               := 0;
            lrLinProf.Importe                := ROUND(lwImporte); //+$002
            lrLinProf.Adultos                := lwAdultos;
            lrLinProf.Ni¤os                  := lwNi¤os;
            lrLinProf."N§ Interno"           := lrRsvTra."N§ Interno";
            lrLinProf."N§ Periodo"           := lrRsvTra."N§ Periodo";

            lrLinProf.INSERT(TRUE);

          END;

        UNTIL lrRsvTra.NEXT = 0;
      END;

      // ------------------------------
      // LINEAS DE RESERVA EXCURSIONES
      // ------------------------------
      // AJF 07/05/09
      // En el caso de las reservas de excursion, la cotizaci¢n las genera sin pasar por la
      // cabecera de reserva as¡ que usamos el vinculo con la cotizaci¢n para recuperar las excursiones.

      IF pwCotizacion = 0 THEN BEGIN
        lrRsvExc.RESET;
        lrRsvExc.SETCURRENTKEY(Delegacion,
                               "N§ Interno",
                               "N§ Periodo");
        lrRsvExc.SETRANGE(Delegacion  , prPer.Delegacion);
        lrRsvExc.SETRANGE("N§ Interno", prPer."N§ Interno");
        lrRsvExc.SETRANGE("N§ Periodo", prPer."N§ Periodo");
        IF lrRsvExc.FINDSET THEN BEGIN
          REPEAT
            LineaExcursion(pwProforma, lrRsvExc, 0, 0);
          UNTIL lrRsvExc.NEXT = 0;
        END;
      END
      ELSE BEGIN
        lrVinculos.RESET;
        lrVinculos.SETCURRENTKEY("Id Cotizacion", Delegacion, "N§ Interno", "N§ Periodo", Tipo);
        lrVinculos.SETRANGE ("Id Cotizacion", pwCotizacion);
        lrVinculos.SETRANGE (Tipo           , lrVinculos.Tipo::"Reserva excursion");

        IF lrVinculos.FINDSET THEN BEGIN
          REPEAT

            // AJF 09/06/09
            // Recupero la l¡nea de c lculo de la cotizaci¢n.
            lwImpCot := 0;
            lrLinCalCot.SETCURRENTKEY("Id Cotizacion", "Id Producto", Hotel);
            lrLinCalCot.SETRANGE ("Id Cotizacion", pwCotizacion);
            lrLinCalCot.SETRANGE ("Id Producto"  , lrVinculos."Id Excursion");
            lrLinCalCot.SETRANGE (Tipo           , lrLinCalCot.Tipo::Excursion);
            IF lrLinCalCot.FINDFIRST THEN
              lwImpCot := lrLinCalCot."Total Ingreso";

            lrRsvExc.RESET;
            lrRsvExc.SETRANGE(Delegacion  , lrVinculos.Delegacion);
            lrRsvExc.SETRANGE("N§ Reserva", lrVinculos."N§ Interno");
            lrRsvExc.FINDFIRST;

            // AJF 23/06/09
            // ya que las reservas de excursi¢n no est n vinculadas a un periodo hay que comprobar si
            // no se han incluido ya en la proforma.
            IF lrRsvExc."N§ Proforma" <> '' THEN
              LineaExcursion(pwProforma, lrRsvExc, pwCotizacion, lwImpCot);

          UNTIL lrVinculos.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CalculoCircuito@1103355014(VAR prPaxTOCir@1103355000 : Record 7010188;VAR pwNi¤os@1103355001 : Integer;VAR pwAdultos@1103355002 : Integer);
    VAR
      lrCircuito@1103355003 : Record 7010187;
      lrRsvCir@1103355004 : Record 7010186;
    BEGIN
      // CalculoCircuito

      pwAdultos := 0;
      pwNi¤os   := 0;

      rParPer.FINDFIRST;

      //lrCircuito.SETRANGE(Delegacion, prPaxTOCir.Delegacion);
      //lrCircuito.SETRANGE(Circuito  , prPaxTOCir.Circuito);
      //lrCircuito.SETRANGE(Orden     , prPaxTOCir.Orden);
      //lrCircuito.FINDFIRST;

      //cCalcCir.Calcular_Circuito(lrCircuito);

      lrRsvCir.SETCURRENTKEY(Delegacion, Circuito, Orden, "N§ linea");
      lrRsvCir.SETRANGE(Delegacion, prPaxTOCir.Delegacion);
      lrRsvCir.SETRANGE(Circuito  , prPaxTOCir.Circuito);
      lrRsvCir.SETRANGE(Orden     , prPaxTOCir.Orden);
      lrRsvCir.SETRANGE("N§ linea", prPaxTOCir."N§ Linea");

      IF lrRsvCir.FINDSET THEN BEGIN
        REPEAT
          IF lrRsvCir."Tipo Persona" = rParPer."Codigo Adulto" THEN
            pwAdultos += 1;
          IF lrRsvCir."Tipo Persona" = rParPer."Codigo Ni¤o" THEN
            pwNi¤os += 1;
        UNTIL lrRsvCir.NEXT = 0;
      END;
    END;

    PROCEDURE CalculoHotel@1103355007(prRsv@1103355000 : Record 7009743;VAR pwAdultos@1103355001 : Integer;VAR pwNi¤os@1103355002 : Integer;pwCotizacion@1103355007 : Integer) : Decimal;
    VAR
      lrRsv@1103355005 : Record 7009743;
      lrCab@1103355004 : Record 7009735;
      lcCal@1103355003 : Codeunit 7009707;
      lwImporte@1103355006 : Decimal;
    BEGIN
      // CalculoHotel
      //: Devuelve el importe de la reserva de hotel indicada y la cantidad de adultos y ni¤os de esta.
      //: @prRsv: Reserva hotel a calcular.
      //: @pwAdultos: Devuelve el N§ de Adultos de la reserva.
      //: @pwNi¤os: Devuelve el N§ de Ni¤os de la reserva.
      //: @pwCotizacion: Indica si la reserva de hotel pertenece a una cotizaci¢n.
      //: @pwDivisa: Divisa que se indica en la cotizaci¢n.

      // Obtenemos la tabla de parametros persona

      rParPer.FINDFIRST;

      // Buscamos los adultos y ni¤os de la reserva

      lrRsv.RESET;
      lrRsv.SETCURRENTKEY(Delegacion,
                          "N§ Responsable");
      lrRsv.SETRANGE(Delegacion      , prRsv.Delegacion);
      lrRsv.SETRANGE("N§ Responsable", prRsv."N§ Reserva");
      IF lrRsv.FINDSET THEN BEGIN
        REPEAT
          IF lrRsv."Tipo Persona" = rParPer."Codigo Adulto" THEN
            pwAdultos += 1;
          IF lrRsv."Tipo Persona" = rParPer."Codigo Ni¤o" THEN
            pwNi¤os += 1;
        UNTIL lrRsv.NEXT = 0;
      END;

      lwImporte := 0;

      // Si la reserva est  vinculada a una cotizaci¢n, rescatamos el importe del c lculo de la
      // cotizaci¢n.

      IF pwCotizacion = 0 THEN BEGIN
        lcCal.calculo_reserva(prRsv, FALSE);

        IF lrCab.GET(USERID) THEN BEGIN
          lrCab.CALCFIELDS("Total Ingreso");

          lwImporte := lrCab."Total Ingreso";
        END;
      END
      ELSE BEGIN
        lwImporte := CalculoHotelCotizacion(pwCotizacion, prRsv, pwAdultos, pwNi¤os);
      END;

      EXIT(lwImporte);
    END;

    PROCEDURE CalculoTransfer@1103355006(prRsv@1103355000 : Record 7009744;VAR pwAdultos@1103355008 : Integer;VAR pwNi¤os@1103355009 : Integer;pwCotizacion@1103355004 : Integer) : Decimal;
    VAR
      lrRsv@1103355006 : Record 7009744;
      lrCont@1103355001 : Record 7009788;
      lrZonaPre@1103355002 : Record 7009791;
      lrPre@1103355003 : Record 7009790;
      lrAeropuerto@1100217002 : Record 7009704;
      lwImporte@1103355007 : Decimal;
      lwZonaDesde@1100217000 : Code[10];
      lwZonaHasta@1100217001 : Code[10];
    BEGIN
      // CalculoTransfer
      //: Devuelve el importe de la reserva transfer indicada y la cantidad de adultos y ni¤os.
      //: @prRsv: Reserva transfer a c lcular.
      //: @pwAdultos: Devuelve el n§ de adultos.
      //: @pwNi¤os: Devuelve el N§ de ni¤os.
      //: @pwCotizacion: N§ de cotizaci¢n al que pertenece la reserva. devuelve 0 si no pertenece a ninguna.

      // Obtenemos la tabla de parametros persona

      rParPer.FINDFIRST;

      pwAdultos := 0;
      pwNi¤os   := 0;
      lwImporte := 0;

      // Buscamos los adultos y ni¤os de la reserva

      lrRsv.RESET;
      lrRsv.SETCURRENTKEY(Delegacion,
                          "N§ Responsable");
      lrRsv.SETRANGE(Delegacion      , prRsv.Delegacion);
      lrRsv.SETRANGE("N§ Responsable", prRsv."N§ Reserva");
      IF lrRsv.FINDSET THEN BEGIN
        REPEAT
          IF lrRsv."Tipo Persona" = rParPer."Codigo Adulto" THEN
            pwAdultos += 1;
          IF lrRsv."Tipo Persona" = rParPer."Codigo Ni¤o" THEN
            pwNi¤os += 1;
        UNTIL lrRsv.NEXT = 0;
      END;


      IF pwCotizacion <> 0 THEN BEGIN
        EXIT(CalculoTransferCotizacion(pwCotizacion, prRsv, pwAdultos, pwNi¤os));
      END
      ELSE BEGIN

        // Buscamos el contrato

        lrCont.RESET;
        lrCont.SETRANGE (Delegacion             , prRsv.Delegacion);

        // AJF 28/01/09
        // deberiamos usar el TTOO de venta para filtrar el contrato.
        //lrCont.SETRANGE (TourOperador           , prRsv.TourOperador);
        lrCont.SETRANGE (TourOperador           , prRsv."TourOperador facturacion");
        lrCont.SETFILTER("Fecha inicio contrato", '<=%1', prRsv."Fecha entrada");
        lrCont.SETFILTER("Fecha final contrato" , '>=%1', prRsv."Fecha entrada");
        lrCont.SETRANGE (Confirmado             , TRUE);
        IF NOT lrCont.FINDFIRST THEN
          EXIT(0);

        //. Traducimos la zona del aeropuerto de entrada
        //+$005 <
        lrAeropuerto.GET(lrRsv."IATA destino entrada");
        lrZonaPre.RESET;
        lrZonaPre.SETRANGE(Contrato       , lrCont."N§ Contrato Venta");
        lrZonaPre.SETRANGE("Tipo contrato", lrZonaPre."Tipo contrato"::Venta);
        lrZonaPre.SETRANGE("Zona fisica"  , lrAeropuerto."Zona fisica");
        IF NOT lrZonaPre.FINDFIRST THEN
          EXIT(0);
        lwZonaDesde := lrZonaPre.Zona;
        //+$005 >

        //. Traducimos la zona de entrada en zona precio
        lrZonaPre.RESET;
        lrZonaPre.SETRANGE(Contrato       , lrCont."N§ Contrato Venta");
        lrZonaPre.SETRANGE("Tipo contrato", lrZonaPre."Tipo contrato"::Venta);
        lrZonaPre.SETRANGE("Zona fisica"  , prRsv."Zona entrada");
        IF NOT lrZonaPre.FINDFIRST THEN
          EXIT(0);
        lwZonaHasta := lrZonaPre.Zona;

        // Buscamos el precio por pax en la zona

        lrPre.RESET;
        lrPre.SETRANGE (Delegacion       , lrCont.Delegacion);
        lrPre.SETRANGE ("N§ Contrato"    , lrCont."N§ Contrato Venta");
        lrPre.SETRANGE ("Codigo precio"  , lrPre."Codigo precio"::"Precio Base");
        lrPre.SETRANGE (Origen     , lwZonaDesde); //+$005
        lrPre.SETRANGE (Destino     , lwZonaHasta); //+$005
        lrPre.SETFILTER("Fecha desde"    , '<=%1', prRsv."Fecha entrada");
        lrPre.SETFILTER("Fecha hasta"    , '>=%1', prRsv."Fecha entrada");

        IF lrRsv."Transfer Privado Llegada" THEN
          lrPre.SETRANGE("Tipo Traslado", lrPre."Tipo Traslado"::Privado)
        ELSE
          lrPre.SETRANGE("Tipo Traslado", lrPre."Tipo Traslado"::Compartido);

        lrPre.SETRANGE ("Tipo Aplicacion", lrPre."Tipo Aplicacion"::Pax);
        IF NOT lrPre.FINDFIRST THEN
          EXIT(0);

        // Aplicamos el precio del adulto

        lwImporte := pwAdultos * lrPre."Precio Adulto";

        // Aplicamos el precio del ni¤o

        lwImporte += pwNi¤os * lrPre."Precio Ni¤o";

        EXIT(lwImporte);
      END;
    END;

    PROCEDURE AnularProforma@1103355004(VAR prProforma@1103355000 : Record 7009866);
    VAR
      lrPeriodos@1103355001 : Record 7009742;
      lrLinProf@1103355002 : Record 7009867;
      lrResExc@1103355003 : Record 7010162;
    BEGIN
      // AnularProforma

      IF prProforma.Estado = prProforma.Estado::Anulada THEN
        EXIT;

      IF NOT CONFIRM(Text002, FALSE, prProforma."Num. Proforma") THEN
        EXIT;

      lrPeriodos.SETCURRENTKEY("TourOperador Venta",
                        "Fecha entrada");
      lrPeriodos.SETRANGE("TourOperador Venta"        , prProforma.Touroperador);
      lrPeriodos.SETRANGE("Fecha entrada"     , prProforma."Fecha llegada");
      lrPeriodos.SETRANGE("Proforma Generada" , TRUE);
      lrPeriodos.SETRANGE("Num. Proforma"     , prProforma."Num. Proforma");

      // AJF 31/12/08
      // Si la proforma se realiz¢ por bono filtramos solo los periodos para este bono.
      IF prProforma.Bono <> '' THEN
        lrPeriodos.SETRANGE(Bono, prProforma.Bono);

      lrPeriodos.MODIFYALL("Proforma Generada", FALSE);
      lrPeriodos.MODIFYALL("Num. Proforma"    , '');

      // AJF 19/02/09
      // Hay que desmarcar las excursiones.
      lrLinProf.SETCURRENTKEY("Tipo producto", "Num. Reserva");
      lrLinProf.SETRANGE("Tipo producto", lrLinProf."Tipo producto"::Excursiones);
      lrLinProf.SETRANGE("Num. Proforma", prProforma."Num. Proforma");

      IF lrLinProf.FINDSET THEN BEGIN
        REPEAT
          lrResExc.RESET;
          lrResExc.SETRANGE("N§ Reserva", lrLinProf."Num. Reserva");
          IF lrResExc.FINDFIRST THEN BEGIN
            lrResExc."N§ Proforma" := '';
            lrResExc.MODIFY;
          END;
        UNTIL lrLinProf.NEXT = 0;
      END;


      COMMIT;

      // AJF 22/05/09
      // Si se anula la proforma de una cotizaci¢n se eliminan sus reservas.
      IF prProforma."Num. cotizacion" <> 0 THEN
        EliminarCabecerasCotizacion(prProforma."Num. cotizacion");

      COMMIT;

      prProforma.VALIDATE(Estado, prProforma.Estado::Anulada);
      prProforma."Fecha anulacion"   := CURRENTDATETIME;
      prProforma."Usuario anulacion" := USERID;
      prProforma.MODIFY;
    END;

    PROCEDURE MarcarGenerada@1103355005(prProforma@1103355000 : Record 7009866);
    VAR
      lrLinProf@1103355001 : Record 7009867;
    BEGIN
      // MarcarGenerada

      IF NOT (prProforma.Estado IN [prProforma.Estado::Pendiente,prProforma.Estado::Regenerar]) THEN
        ERROR(Text003);

      IF NOT CONFIRM(Text004, FALSE, prProforma."Num. Proforma") THEN
        EXIT;

      // Comprobamos que todas las lineas tengan Importe

      lrLinProf.RESET;
      lrLinProf.SETRANGE("Num. Proforma", prProforma."Num. Proforma");
      lrLinProf.SETRANGE(Importe        , 0);
      IF lrLinProf.FINDFIRST THEN
      BEGIN
        IF NOT CONFIRM(Text038, FALSE, lrLinProf.Producto) THEN
          ERROR(Text005, lrLinProf.Producto);
      END;

      prProforma.VALIDATE(Estado, prProforma.Estado::Generada);
      prProforma.MODIFY;
    END;

    PROCEDURE RegistrarPrepago@1103355008(VAR prPrepag@1103355000 : Record 7009868);
    VAR
      lrLinDir@1103355001 : Record 81;
      lrLinDir2@1103355002 : Record 81;
      lrCab@1103355005 : Record 7009866;
      lwUltLinea@1103355003 : Integer;
      lwNumAsiento@1103355004 : Integer;
      lwDescripcion@1103355006 : Text[80];
    BEGIN
      // RegistrarPrepago

      IF prPrepag.Estado = prPrepag.Estado::Registrado THEN
        ERROR(Text006);

      // Comprobar los campos obligatorios

      IF (prPrepag."Fecha registro" = 0D) OR
         (prPrepag.Importe = 0) OR
         (prPrepag.Banco = '') THEN
        EXIT;

      lrCab.GET(prPrepag."Num. Proforma");

      rPar.FINDFIRST;
      wDiarioGeneral := rPar.GetLibroDiarioGeneral;
      rPar.CreaSeccionUsuario;

      // Buscamos la ultima linea del diario

      lrLinDir2.RESET;
      lrLinDir2.SETRANGE("Journal Template Name", wDiarioGeneral);
      lrLinDir2.SETRANGE("Journal Batch Name"   , USERID);
      IF lrLinDir2.FINDLAST THEN
        lwUltLinea := lrLinDir2."Line No."
      ELSE
        lwUltLinea := 0;

      // Buscamos el ultimo asiento en el diario

      //-$004lrLinDir2.SETCURRENTKEY("Journal Template Name", "Journal Batch Name", "Posting Date", "Transaction No.");
      lrLinDir2.SETCURRENTKEY("Journal Template Name", "Journal Batch Name", "Transaction No."); //+$004
      lrLinDir2.SETRANGE("Posting Date", prPrepag."Fecha registro");
      IF lrLinDir2.FINDLAST THEN
        lwNumAsiento := lrLinDir2."Transaction No." + 1
      ELSE
        lwNumAsiento := 1;

      lwDescripcion := STRSUBSTNO('Prepago de la proforma %1', lrCab."Num. Proforma");

      // --------------
      // Linea de DEBE
      // --------------

      lwUltLinea += 10000;

      CLEAR(lrLinDir);
      lrLinDir.VALIDATE("Journal Template Name"    , wDiarioGeneral);
      lrLinDir.VALIDATE("Journal Batch Name"       , USERID);
      lrLinDir.VALIDATE("Line No."                 , lwUltLinea);
      lrLinDir.VALIDATE("Posting Date"             , prPrepag."Fecha registro");
      lrLinDir.VALIDATE("Currency Code"            , lrCab."Cod. Divisa");
      lrLinDir.VALIDATE("Account Type"             , lrLinDir."Account Type"::"Bank Account");
      lrLinDir.VALIDATE("Account No."              , prPrepag.Banco);
      lrLinDir.VALIDATE("Document Type"            , 0);
      lrLinDir.VALIDATE("Document No."             , prPrepag."Num. Proforma");
      lrLinDir.VALIDATE(Description                , lwDescripcion);

      // AJF 26/01/09
      // El asiento del prepago tiene que coger la divisa que hay en la cabecera de la proforma.
      //lrLinDir.VALIDATE("Currency Code"            , '');

      lrLinDir.VALIDATE("Debit Amount"             , prPrepag.Importe);

      lrLinDir.VALIDATE("Shortcut Dimension 1 Code", GetDimensionDepartamento(lrCab.Cliente));

      lrLinDir.VALIDATE("Shortcut Dimension 2 Code", lrCab.Touroperador);
      lrLinDir.VALIDATE("Transaction No."          , lwNumAsiento);

      // Vaciamos los campos de IVA

      lrLinDir.VALIDATE("Gen. Posting Type"      , 0);
      lrLinDir.VALIDATE("VAT Bus. Posting Group" , '');
      lrLinDir.VALIDATE("VAT Prod. Posting Group", '');
      lrLinDir."Source Code"   := rPar.GetSourceCode(lrLinDir."Journal Template Name"); //+$006
      lrLinDir.INSERT;

      // ---------------
      // Linea de HABER
      // ---------------

      lwUltLinea += 10000;

      CLEAR(lrLinDir);
      lrLinDir.VALIDATE("Journal Template Name"    , wDiarioGeneral);
      lrLinDir.VALIDATE("Journal Batch Name"       , USERID);
      lrLinDir.VALIDATE("Line No."                 , lwUltLinea);
      lrLinDir.VALIDATE("Posting Date"             , prPrepag."Fecha registro");
      lrLinDir.VALIDATE("Currency Code"            , lrCab."Cod. Divisa");
      lrLinDir.VALIDATE("Account Type"             , lrLinDir."Account Type"::Customer);
      lrLinDir.VALIDATE("Account No."              , lrCab.Cliente);
      lrLinDir.VALIDATE("Document Type"            , 0);
      lrLinDir.VALIDATE("Document No."             , prPrepag."Num. Proforma");
      lrLinDir.VALIDATE(Description                , lwDescripcion);

      // AJF 26/01/09
      // El asiento del prepago tiene que coger la divisa que hay en la cabecera de la proforma.
      // lrLinDir.VALIDATE("Currency Code"            , '');

      lrLinDir.VALIDATE("Credit Amount"            , prPrepag.Importe);
      lrLinDir.VALIDATE("Shortcut Dimension 1 Code", GetDimensionDepartamento(lrCab.Cliente));
      lrLinDir.VALIDATE("Shortcut Dimension 2 Code", lrCab.Touroperador);
      lrLinDir.VALIDATE("Transaction No."          , lwNumAsiento);

      // Vaciamos los campos de IVA

      lrLinDir.VALIDATE("Gen. Posting Type"      , 0);
      lrLinDir.VALIDATE("VAT Bus. Posting Group" , '');
      lrLinDir.VALIDATE("VAT Prod. Posting Group", '');
      lrLinDir."System-Created Entry"  := TRUE; //+$003
      lrLinDir."Source Code"   := rPar.GetSourceCode(lrLinDir."Journal Template Name"); //+$006
      lrLinDir.INSERT;

      // Marcamos el prepago como registrado y le cambiamos el estado

      prPrepag."Fecha registrado"   := CURRENTDATETIME;
      prPrepag."Usuario registrado" := USERID;
      prPrepag.Estado               := prPrepag.Estado::Registrado;
      prPrepag.MODIFY;

      // Informamos al usuario

      MESSAGE(Text007, wDiarioGeneral, USERID);
    END;

    PROCEDURE MoverPrepagos@1103355028(pwProfOrigen@1103355000 : Code[20];pwProfDestino@1103355001 : Code[20]);
    VAR
      lrPrepOri@1103355002 : Record 7009868;
      lrPrepDes@1103355003 : Record 7009868;
    BEGIN
      // MoverPrepagos
      // movemos los prepagos de una proforma a otra.

      lrPrepOri.SETRANGE("Num. Proforma", pwProfOrigen);
      IF lrPrepOri.FINDSET THEN BEGIN
        REPEAT
          lrPrepDes := lrPrepOri;
          lrPrepDes."Num. Proforma" := pwProfDestino;
          lrPrepDes.INSERT;
        UNTIL lrPrepOri.NEXT=0;
      END;
      lrPrepOri.DELETEALL;
    END;

    PROCEDURE ControlProformaConfirmada@1103355009(pwNumProforma@1103355000 : Code[20]);
    VAR
      lrPrepag@1103355001 : Record 7009868;
      lrProform@1103355002 : Record 7009866;
    BEGIN
      // ControlProformaConfirmada

      lrProform.GET(pwNumProforma);
      lrProform.CALCFIELDS(Importe);

      IF (lrProform.Estado <> lrProform.Estado::Generada) THEN
        EXIT;

      // Comprobar si la proforma tiene los prepagos por el importe total

      lrPrepag.RESET;
      lrPrepag.SETCURRENTKEY(Estado);
      lrPrepag.SETRANGE ("Num. Proforma", pwNumProforma);
      lrPrepag.SETRANGE (Estado         , lrPrepag.Estado::Registrado);
      IF lrPrepag.FINDFIRST THEN BEGIN
        lrPrepag.CALCSUMS(Importe);
        IF lrPrepag.Importe = lrProform.Importe THEN BEGIN
          lrProform.Estado := lrProform.Estado::Confirmada;
          lrProform.MODIFY;
        END;
      END;
    END;

    PROCEDURE MarcarRegenerarProforma@1103355010(pwDelegacion@1103355000 : Code[10];pwNumInterno@1103355001 : Integer;pwPeriodo@1103355002 : Integer);
    VAR
      lrPeriodo@1103355003 : Record 7009742;
      lrProforma@1103355004 : Record 7009866;
    BEGIN
      // MarcarRegenerarProforma
      // Dado delegacion/N§ interno/ N§ Periodo buscamos el periodo de una reserva,
      // miramos si tiene proforma generada y marcamos regenar si la proforma est  en estado Generada/Confirmada.

      lrPeriodo.SETRANGE(Delegacion  , pwDelegacion);
      lrPeriodo.SETRANGE("N§ Interno", pwNumInterno);
      lrPeriodo.SETRANGE("N§ Periodo", pwPeriodo);

      IF NOT lrPeriodo.FINDFIRST THEN
        EXIT;

      IF NOT lrPeriodo."Proforma Generada" THEN
        EXIT;

      lrProforma.SETRANGE("Num. Proforma", lrPeriodo."Num. Proforma");

      IF NOT lrProforma.FINDFIRST THEN
        EXIT;

      IF (lrProforma.Estado = lrProforma.Estado::Generada) OR (lrProforma.Estado = lrProforma.Estado::Confirmada) THEN BEGIN
        lrProforma.VALIDATE(Estado, lrProforma.Estado::Regenerar);
        lrProforma.MODIFY(TRUE);
      END;
    END;

    PROCEDURE RegenerarProforma@1103355011(VAR prProforma@1103355000 : Record 7009866) : Code[20];
    VAR
      lrCont@1103355001 : Record 7009727;
      lrTermPago@1103355002 : Record 3;
      lrPeriodos@1103355003 : Record 7009742;
      lrin@1103355004 : Record 7009867;
      lrin2@1103355005 : Record 7009867;
      lrResH@1103355007 : Record 7009743;
      lrResT@1103355009 : Record 7009744;
      lrResE@1103355008 : Record 7010162;
      lrPrep@1103355012 : Record 7009868;
      lrPrep2@1103355013 : Record 7009868;
      lwOk@1103355006 : Boolean;
      lwCodProf1@1103355010 : Code[20];
      lwCodProf2@1103355011 : Code[20];
    BEGIN
      // RegenerarProforma
      // Anulamos la profoma marcada como Regenerar y creamos una nueva en estado pendiente.
      // Devuelve el nuevo numero de preforma generada

      rPar.FINDFIRST;

      lwOk := prProforma.Estado = prProforma.Estado::Regenerar;
      IF (NOT lwOk) AND (prProforma."Fecha vencimiento" > TODAY) AND (prProforma.Estado <> prProforma.Estado::Anulada) THEN
        lwOk := CONFIRM(Text025, FALSE, prProforma."Num. Proforma");

      IF NOT lwOk THEN
        EXIT;

      // JPT Las proformas manuales se tratan de otra forma
      // Unicamente se comprueba que las reservas que que contienen siguen vigentes
      IF prProforma.Manual THEN BEGIN
        CLEAR(lrin);
        lrin.SETRANGE("Num. Proforma", prProforma."Num. Proforma");
        prProforma."Reservas incluidas" := 0;
        IF lrin.FINDSET THEN BEGIN
          REPEAT
            CASE lrin."Tipo producto" OF
              lrin."Tipo producto"::Hotel : BEGIN
                CLEAR(lrResH);
                lrResH.SETRANGE("N§ Reserva", lrin."Num. Reserva");
                lwOk := lrResH.FINDFIRST;
                IF lwOk THEN
                  prProforma."Reservas incluidas" += 1
              END;
              lrin."Tipo producto"::Transfer : BEGIN
                CLEAR(lrResT);
                lrResT.SETRANGE("N§ Reserva", lrin."Num. Reserva");
                lwOk := lrResT.FINDFIRST;
              END;
              lrin."Tipo producto"::Excursiones : BEGIN
                CLEAR(lrResE);
                lrResE.SETRANGE("N§ Reserva", lrin."Num. Reserva");
                lwOk := lrResE.FINDFIRST;
              END;
            END;
            // Si no existe ya la reserva se borra la linea
            IF NOT lwOk THEN BEGIN
              lrin2 := lrin;
              lrin2.DELETE;
            END;
          UNTIL lrin.NEXT=0;
        END;
        prProforma.MODIFY;
        MESSAGE(Text024);
        lwCodProf2 := prProforma."Num. Proforma";
      END
      ELSE BEGIN
        lwCodProf1 := prProforma."Num. Proforma";

        CLEAR(lrTermPago);
        // AJF 10/06/10
        // En lugar de dar un error aviso de que se usar  la fecha de llegada como la de vencimiento.
        IF NOT BuscaContrato(lrCont, rPar.Delegacion, prProforma.Touroperador, prProforma."Cod. Divisa") THEN BEGIN
         //ERROR(Text010, prProforma.Touroperador);
         IF NOT CONFIRM(STRSUBSTNO(Text010, prProforma.Touroperador) + '\' + Text037) THEN
           ERROR('');

        END
        ELSE BEGIN
          lrCont.TESTFIELD("Cod. Terminos pago");
          lrTermPago.GET(lrCont."Cod. Terminos pago");
        END;
        AnularProforma(prProforma);

        wVentana.OPEN(Text008);
        wVentana.UPDATE(1, prProforma.Touroperador);
        wVentana.UPDATE(2, 1);
        wVentana.UPDATE(3, 1);

        lwCodProf2 := CrearProforma(prProforma.Touroperador, prProforma."Fecha llegada",
                      prProforma.Cliente, lrTermPago."Due Date Calculation", prProforma.Bono, prProforma."Num. cotizacion", TRUE, '');

        // Modificamos los prepagos a la nueva proforma

        IF (lwCodProf1 <> '') AND (lwCodProf2 <> '') THEN
          MoverPrepagos(lwCodProf1, lwCodProf2);

        wVentana.CLOSE;
      END;

      EXIT(lwCodProf2);
    END;

    PROCEDURE ReservaProformada@1103355013(prResH@1103355000 : Record 7009743;pwError@1103355003 : Boolean) : Boolean;
    VAR
      lwEsta@1103355001 : Boolean;
      lrLin@1103355002 : Record 7009867;
      lrProf@1103355004 : Record 7009866;
    BEGIN
      // ReservaProformada
      // devuelve true si la reserva pasada como parametro ya est  proformada
      // Si pwError = true se generara un error si se encuentra

      CLEAR(lwEsta);
      CLEAR(lrLin);
      lrLin.SETCURRENTKEY("Tipo producto","Num. Reserva");
      lrLin.SETRANGE("Tipo producto", lrLin."Tipo producto"::Hotel);
      lrLin.SETRANGE("Num. Reserva" , prResH."N§ Reserva");
      lwEsta := lrLin.FINDSET;
      IF lwEsta THEN BEGIN
        lwEsta := FALSE;
        REPEAT
          lwEsta :=  lrProf.GET(lrLin."Num. Proforma") AND (lrProf.Estado <> lrProf.Estado::Anulada);
        UNTIL (lrLin.NEXT=0) OR lwEsta;
      END;

      IF lwEsta AND pwError THEN
        ERROR(Text022, prResH."N§ Reserva", lrLin."Num. Proforma");

      EXIT(lwEsta);
    END;

    PROCEDURE CabeceraProforma@1103355015(VAR prProf@1103355004 : Record 7009866;VAR prResCirTMP@1103355005 : TEMPORARY Record 2000000026;pwTTOO@1103355003 : Code[10];pwFecha@1103355002 : Date;pwCliente@1103355001 : Code[20];pwVencimiento@1103355000 : DateFormula;pwBono@1103355006 : Code[10];pwCotizacion@1103355008 : Integer;pwDivisa@1103355009 : Code[10]);
    VAR
      lrCli@1103355007 : Record 18;
    BEGIN
      // CabeceraProforma

      // AJF 02/12/08
      // Guardo los numeros de reserva de los circuitos ya procesados en este temporary
      // ya que el importe es £nico por reserva de circuito.
      prResCirTMP.RESET;
      prResCirTMP.DELETEALL;

      // Creamos la cabecera de proforma
      CLEAR(prProf);
      prProf.Touroperador        := pwTTOO;
      prProf."Fecha llegada"     := pwFecha;
      prProf.Cliente             := pwCliente;
      prProf."Fecha vencimiento" := CALCDATE(pwVencimiento, pwFecha);

      // AJF 31/12/08
      // cogemos la divisa del cliente.
      lrCli.GET(pwCliente);

      // AJF 07/05/09
      // Si se indica una divisa se usa esta, en caso contrario se usa la del cliente.
      IF pwDivisa = '' THEN
        prProf."Cod. Divisa"     := lrCli."Currency Code"
      ELSE
        prProf."Cod. Divisa"     := pwDivisa;

      prProf.LanguageID          := lrCli."Language Code";

      // Si la proforma es para un solo bono se pone el n£mero de bono.
      // En caso contrario se pasa el par metro en blanco.
      prProf.Bono                := pwBono;

      // AJF 05/05/09
      // Si el bono est  calculado en un cotizaci¢n se indica el N§ de cotizaci¢n aqu¡.
      prProf.VALIDATE("Num. cotizacion", pwCotizacion);

      prProf.INSERT(TRUE);
    END;

    PROCEDURE CuerpoProforma@1103355017(VAR prPer@1103355000 : Record 7009742;VAR prProf@1103355001 : Record 7009866;VAR prResCirTMP@1103355002 : TEMPORARY Record 2000000026;pwCotizacion@1103355004 : Integer);
    VAR
      lrPer2@1103355003 : Record 7009742;
    BEGIN
      // CuerpoProforma

      // Acumulamos el numero de reservas incluidas

      prProf."Reservas incluidas" += 1;

      // Creamos las lineas de proforma para los productos de cada periodo
      LineasProforma(prPer, prProf."Num. Proforma",0, prResCirTMP, pwCotizacion);

      // Marcamos el periodo como Proforma generada
      lrPer2 := prPer;
      lrPer2."Proforma Generada" := TRUE;
      lrPer2."Num. Proforma"     := prProf."Num. Proforma";
      lrPer2.MODIFY;
    END;

    PROCEDURE CrearProformaxBono@1103355016(pwTTOO@1103355003 : Code[10];pwFecha@1103355002 : Date;pwCliente@1103355001 : Code[20];pwVencimiento@1103355000 : DateFormula;pwGenerarProfCotizacion@1103355009 : Boolean);
    VAR
      lrPer@1103355004 : Record 7009742;
      lrProf@1103355005 : Record 7009866;
      lrBonoTMP@1103355006 : TEMPORARY Record 10;
      lrCabCot@1103355007 : Record 7009871;
      lrCotsTMP@1103355008 : TEMPORARY Record 5944;
    BEGIN
      // CrearProformaxBono

      lrPer.SETCURRENTKEY("TourOperador Venta", "Fecha entrada");
      lrPer.SETRANGE("TourOperador Venta"   , pwTTOO);
      lrPer.SETRANGE("Fecha entrada", pwFecha);
      lrPer.SETRANGE("Proforma Generada", FALSE);

      // Acumulo todos los bono distintos en un temporary.
      IF lrPer.FINDSET THEN BEGIN
        REPEAT
          IF NOT lrBonoTMP.GET(lrPer.Bono) THEN BEGIN
            lrBonoTMP.INIT;
            lrBonoTMP.Code := lrPer.Bono;
            lrBonoTMP.INSERT;

            // AJF 05/05/09
            // Comprobamos si el bono coincide con alguna cotizaci¢n.
            // Guardo estas cotizaciones en un Temporary para usar el c lculo de la cotizaci¢n para
            // las l¡neas de cotizaci¢n.
            lrCabCot.RESET;
            lrCabCot.SETCURRENTKEY(Bono);
            lrCabCot.SETRANGE (Bono, lrPer.Bono);
            IF lrCabCot.FINDSET THEN BEGIN
              REPEAT
                IF NOT lrCotsTMP.GET(lrPer.Bono, lrCabCot.Id) THEN BEGIN
                  lrCotsTMP.INIT;
                  lrCotsTMP."No."      := lrPer.Bono;
                  lrCotsTMP."Line No." := lrCabCot.Id;
                  lrCotsTMP.INSERT;
                END;
              UNTIL lrCabCot.NEXT = 0;
            END;

          END;
        UNTIL lrPer.NEXT = 0;
      END;

      lrBonoTMP.RESET;

      // Creamos una proforma por cada bono distinto.
      // Si pwGenerarProfCotizacion est  a FALSE se ignoran las proformas v¡nculadas a una cotizaci¢n.
      IF lrBonoTMP.FINDSET THEN BEGIN
        CLEAR(lrCabCot);
        REPEAT
          lrCotsTMP.RESET;
          lrCotsTMP.SETRANGE("No.", lrBonoTMP.Code);
          IF lrCotsTMP.FINDSET THEN BEGIN
            IF pwGenerarProfCotizacion THEN BEGIN
              REPEAT
                // Hago una proforma por cotizaci¢n, en principio no deberia
                // haber dos cotizaciones con el mismo N§ de bono.
                CrearProforma(pwTTOO, pwFecha, pwCliente, pwVencimiento, lrBonoTMP.Code, lrCotsTMP."Line No.", TRUE, '');
              UNTIL lrCotsTMP.NEXT = 0;
            END;
          END
          ELSE BEGIN
            CrearProforma(pwTTOO, pwFecha, pwCliente, pwVencimiento, lrBonoTMP.Code, 0, TRUE, '');
          END;
        UNTIL lrBonoTMP.NEXT = 0;
      END;
    END;

    PROCEDURE ImprimirProforma@1103355018(VAR prProforma@1103355000 : Record 7009866);
    VAR
      lrProforma@1103355001 : Record 7009866;
      lwImpVouchers@1103355002 : Boolean;
      lwActivarOpVouchers@1103355003 : Boolean;
      lrepProforma@1103355004 : Report 7009900;
      lrLinsProf@1103355006 : Record 7009867;
    BEGIN
      // ImprimirProforma

      lrProforma := prProforma;
      lrProforma.SETRECFILTER;
      lrProforma.FIND;
      lrProforma.CALCFIELDS("Prepagos Registrados", Importe);

      IF NOT ControlLineasImpresion(lrProforma) THEN
        ERROR(Text036);

      lwActivarOpVouchers := FALSE;

      IF lrProforma.Importe <= lrProforma."Prepagos Registrados" THEN BEGIN
        lwActivarOpVouchers := TRUE;
        lwImpVouchers := TRUE{CONFIRM (Text026)};
      END;

      lrepProforma.SetParametros(lwImpVouchers, lwActivarOpVouchers);
      lrepProforma.SETTABLEVIEW(lrProforma);
      lrepProforma.RUNMODAL;

      IF lwImpVouchers THEN BEGIN
        lrProforma.CALCFIELDS("Prepagos Registrados", Importe);

        IF lrProforma.Importe > lrProforma."Prepagos Registrados" THEN
          EXIT;

        // AJF 05/10/09
        // Imprimo los Vouchers por linea en lugar de todos juntos.
        lrLinsProf.RESET;
        lrLinsProf.SETRANGE ("Num. Proforma", lrProforma."Num. Proforma");
        IF lrLinsProf.FINDSET THEN BEGIN
          REPEAT
            ImprimirVoucherLinea(lrProforma, lrLinsProf);
          UNTIL lrLinsProf.NEXT = 0;
        END;

        // AJF 03/06/09
        // Marcamos la impresi¢n como correcta para que pueda aparecer en contabilidad.

        // AJS 03.06.2009
        // Tenemos que volver a coger el registro de proforma porque en el informe de
        // proforma se modifica el registro

        lrProforma.GET(lrProforma."Num. Proforma");

        lrProforma.Impresa := lrProforma.Impresa OR CONFIRM(Text035,TRUE);
        lrProforma.MODIFY;

      END;
    END;

    PROCEDURE ImprimirVouchers@1103355019(VAR prProforma@1103355002 : Record 7009866;VAR prLinProf@1103355003 : Record 7009867);
    VAR
      lrProforma@1103355000 : Record 7009866;
      lwNumLin@1103355004 : Integer;
      lrLinsProf@1103355001 : Record 7009867;
    BEGIN
      // ImprimirVouchers

      lrProforma := prProforma;
      lrProforma.SETRECFILTER;
      lrProforma.FIND;
      lrProforma.CALCFIELDS("Prepagos Registrados", Importe);

      IF NOT ControlLineasImpresion(lrProforma) THEN
        ERROR(Text036);

      IF lrProforma.Importe > lrProforma."Prepagos Registrados" THEN BEGIN
        ERROR(Text028);
      END;

      CASE STRMENU(Text027) OF

        0 : EXIT;
        2 : lwNumLin := prLinProf."Num. Linea";

      END;

      // AJF 05/10/09
      // Dependiendo de los parametros de la l¡nea se imprime uno u otro Voucher.
      lrLinsProf.RESET;
      lrLinsProf.SETRANGE ("Num. Proforma", lrProforma."Num. Proforma");

      IF lwNumLin <> 0 THEN
        lrLinsProf.SETRANGE ("Num. Linea", lwNumLin);

      IF lrLinsProf.FINDSET THEN BEGIN
        REPEAT
          ImprimirVoucherLinea(lrProforma, lrLinsProf);
        UNTIL lrLinsProf.NEXT = 0;
      END;

      // AJF 03/06/09
      // Marcamos la impresi¢n como correcta para que pueda aparecer en contabilidad.

      // AJS 03.06.2009
      // Tenemos que volver a coger el registro de proforma porque en el informe de
      // proforma se modifica el registro

      lrProforma.GET(lrProforma."Num. Proforma");

      lrProforma.Impresa := lrProforma.Impresa OR CONFIRM(Text035,TRUE);
      lrProforma.MODIFY;
    END;

    PROCEDURE AgregarReservaHotel@1103355025(VAR prProforma@1103355000 : Record 7009866);
    VAR
      lrResHotel@1103355001 : Record 7009743;
      lfResHotel@1103355002 : Form 7009876;
      lrPer@1103355003 : Record 7009742;
      lrResCirTMP@1103355004 : TEMPORARY Record 2000000026;
    BEGIN
      // AgregarReservaHotel
      // Seleccionamos una reserva de hotel y agregamos a la proforma las reservas que forman
      // parte del periodo de esa reserva de hotel. El funcionamiento es parecido a la creaci¢n de
      // proformas manuales.

      IF prProforma.Estado <> prProforma.Estado::Pendiente THEN
        ERROR(Text029);

      // sacamos el dialogo para seleccionar la reserva a agregar.
      lrResHotel.SETCURRENTKEY(TourOperador, "Confirmacion hotel", Responsable,
                               "Hotel booking", "Fecha entrada", "N§ Responsable");

      lrResHotel.SETRANGE (TourOperador   , prProforma.Touroperador);
      lrResHotel.SETRANGE (Responsable    , TRUE);
      lrResHotel.SETFILTER("Fecha entrada", '%1..', prProforma."Fecha llegada");

      lfResHotel.SETTABLEVIEW(lrResHotel);
      lfResHotel.EDITABLE   := FALSE;
      lfResHotel.LOOKUPMODE := TRUE;
      IF NOT(lfResHotel.RUNMODAL IN [ACTION::OK, ACTION::LookupOK]) THEN
        EXIT;

      lrResHotel.RESET;
      lfResHotel.GETRECORD(lrResHotel);

      lrResHotel.SETRECFILTER;

      ReservaProformada(lrResHotel, TRUE);

      IF lrPer.GET(lrResHotel.Delegacion, lrResHotel."N§ Interno", lrResHotel."N§ Periodo") THEN BEGIN
        LineasProforma(lrPer, prProforma."Num. Proforma", lrResHotel."N§ Reserva", lrResCirTMP, 0);
        lrPer."Proforma Generada" := TRUE; // Marcamos el periodo
        lrPer."Num. Proforma"     := prProforma."Num. Proforma";
        lrPer.MODIFY;
        prProforma."Reservas incluidas" += 1;
        prProforma.MODIFY;
      END;
    END;

    PROCEDURE AgregaExcursion@1103355020(VAR prProforma@1103355002 : Record 7009866);
    VAR
      lrResExc@1103355000 : Record 7010162;
      lfResExc@1103355001 : Form 7010199;
    BEGIN
      // AgregaExcursion
      // Agregamos una l¡nea de excursi¢n a la proforma seleccionando una reserva de excursion
      // valida.

      IF prProforma.Estado <> prProforma.Estado::Pendiente THEN
        ERROR(Text029);

      lrResExc.SETCURRENTKEY(TourOperador, "Fecha Excursion", Producto, "Zona Servicio");

      lrResExc.SETRANGE (TourOperador     , prProforma.Touroperador);
      lrResExc.SETFILTER("Fecha Excursion", '%1..',prProforma."Fecha llegada");
      lrResExc.SETRANGE ("N§ Proforma"    , '');


      lfResExc.SETTABLEVIEW(lrResExc);
      lfResExc.EDITABLE   := FALSE;
      lfResExc.LOOKUPMODE := TRUE;
      IF NOT(lfResExc.RUNMODAL IN [ACTION::OK, ACTION::LookupOK]) THEN
        EXIT;

      lrResExc.RESET;
      lfResExc.GETRECORD(lrResExc);

      IF lrResExc."N§ Proforma" <> '' THEN
        ERROR(Text031);

      LineaExcursion(prProforma."Num. Proforma", lrResExc, 0, 0);

      //lrResExc."N§ Proforma" := prProforma."Num. Proforma";
      //lrResExc.MODIFY;
    END;

    PROCEDURE LineaExcursion@1103355021(pwProforma@1103355000 : Code[10];VAR prResExc@1103355001 : Record 7010162;pwCotizacion@1103355003 : Integer;pwImpCot@1103355004 : Decimal);
    VAR
      lrLinProf@1103355002 : Record 7009867;
    BEGIN
      // LineaExcursion

      lrLinProf."Num. Proforma" := pwProforma;
      lrLinProf."Tipo producto" := lrLinProf."Tipo producto"::Excursiones;
      lrLinProf.VALIDATE(Producto, prResExc.Producto);
      lrLinProf."Num. Reserva"  := prResExc."N§ Reserva";
      lrLinProf."Cod. Hotel"    := prResExc."Hotel Cliente";
      lrLinProf."Zona Hotel"    := prResExc."Zona Hotel";
      lrLinProf.Fecha           := prResExc."Fecha Excursion";
      lrLinProf.Habitacion      := '';
      lrLinProf.Regimen         := '';
      lrLinProf.Estancia        := 0;

      IF pwCotizacion = 0 THEN
        lrLinProf.Importe         := ROUND(prResExc."Ingreso reserva" - prResExc."Comision Touroperador") //+$002
      ELSE BEGIN
        lrLinProf.Importe         := ROUND(pwImpCot); //+$002
      END;

      lrLinProf.Adultos         := prResExc.Adultos;
      lrLinProf.Ni¤os           := prResExc.Ni¤os;

      lrLinProf."N§ Interno"    := prResExc."N§ Interno";
      lrLinProf."N§ Periodo"    := prResExc."N§ Periodo";

      lrLinProf.INSERT(TRUE);

      // AJF 23/06/09
      prResExc."N§ Proforma" := pwProforma;
      prResExc.MODIFY;
    END;

    PROCEDURE BuscaContratoTransfer@1103355022(VAR prCont@1103355000 : Record 7009788;VAR prTTOO@1103355001 : Record 7009717) : Boolean;
    BEGIN
      // BuscaContratoTransfer

      prCont.RESET;

      prCont.SETCURRENTKEY(TourOperador, "Fecha inicio contrato", "Fecha final contrato");

      prCont.SETRANGE (Delegacion             , rPar.Delegacion);
      prCont.SETRANGE (TourOperador           , prTTOO.TourOperador);
      prCont.SETFILTER("Fecha inicio contrato", '<=%1', TODAY);
      prCont.SETFILTER("Fecha final contrato" , '>=%1', TODAY);
      prCont.SETRANGE (Comercializadora       , FALSE); //+$007
      prCont.SETRANGE (Confirmado             , TRUE);

      EXIT(prCont.FINDFIRST);
    END;

    PROCEDURE CrearProformaVacia@1103355023(VAR prProforma@1103355002 : Record 7009866);
    VAR
      lrCond@1103355000 : Record 7010085;
      lfCondProf@1103355001 : Form 7010007;
      lrResCirTMP@1103355003 : TEMPORARY Record 2000000026;
      lrProf@1103355004 : Record 7009866;
      lwVencimiento@1103355005 : DateFormula;
    BEGIN
      // CrearProformaVacia

      IF NOT lrCond.GET(USERID) THEN BEGIN
        lrCond.Usuario := USERID;
        lrCond.INSERT;
      END;
      lrCond.INIT;
      lrCond.MODIFY;

      COMMIT;

      lrCond.SETRECFILTER;

      lfCondProf.SETTABLEVIEW(lrCond);
      IF lfCondProf.RUNMODAL <> ACTION::OK THEN
        EXIT;

      lrCond.RESET;
      lfCondProf.GETRECORD(lrCond);

      IF (lrCond.TourOperador    = '') OR
         (lrCond.Cliente         = '') OR
         (lrCond."Fecha Entrada" = 0D) THEN
        ERROR(Text030);

      // Uso N§ Factura para guardar el vencimiento.
      EVALUATE(lwVencimiento, lrCond."N§ Factura");

      CabeceraProforma(lrProf, lrResCirTMP, lrCond.TourOperador,
                      lrCond."Fecha Entrada", lrCond.Cliente, lwVencimiento, '', 0, '');

      prProforma := lrProf;
    END;

    PROCEDURE BuscaCondsProforma@1103355024(VAR prConds@1103355000 : Record 7010085);
    VAR
      lrCont@1103355001 : Record 7009727;
      lrTerminos@1103355002 : Record 3;
    BEGIN
      // BuscaCondsProforma
      // Buscamos contrato de venta para el touroperador para la creaci¢n
      // de proformas vac¡as.

      rPar.FINDFIRST;

      IF BuscaContrato(lrCont, rPar.Delegacion, prConds.TourOperador, '') THEN BEGIN
        prConds."Contrato venta" := lrCont."N§ Contrato venta";
        prConds.Cliente          := lrCont.Cliente;
        IF lrTerminos.GET(lrCont."Cod. Terminos pago") THEN
          prConds."N§ Factura"     := FORMAT(lrTerminos."Due Date Calculation");
      END;
    END;

    PROCEDURE GetDimensionDepartamento@1103355026(pwCliente@1103355000 : Code[20]) : Code[20];
    VAR
      lrDefDim@1103355001 : Record 352;
    BEGIN
      // GetDimensionDepartamento

      IF NOT lrDefDim.GET(18, pwCliente, 'DEPARTAMENTO') THEN
        ERROR(Text032);

      EXIT(lrDefDim."Dimension Value Code");
    END;

    PROCEDURE MoverLineasProforma@1103355027(VAR prProforma@1103355000 : Record 7009866;VAR prLinProf@1103355001 : Record 7009867);
    VAR
      lwOpcion@1103355002 : Integer;
      lrLinsSel@1103355003 : Record 7009867;
      lfProformas@1103355004 : Form 7010000;
      lrProformas@1103355005 : Record 7009866;
      lrResExc@1103355009 : Record 7010162;
      lrPer@1103355008 : Record 7009742;
      lwSoloLinea@1103355010 : Boolean;
      lrLineas@1103355011 : Record 7009867;
      lrLineaNueva@1103355012 : Record 7009867;
      lrPrep@1103355006 : Record 7009868;
      lrPrep2@1103355007 : Record 7009868;
    BEGIN
      // MoverLineasProforma
      // Movemos una o todas las l¡neas de un proforma a otra proforma.

      lwOpcion := STRMENU(Text033);

      CASE lwOpcion OF
        0: EXIT;

        1: BEGIN
          lrLinsSel.SETRANGE("Num. Proforma", prProforma."Num. Proforma");
          lwSoloLinea := FALSE;
        END;

        2: BEGIN
          lrLinsSel := prLinProf;
          lrLinsSel.SETRECFILTER;
          lwSoloLinea := TRUE;
        END;

      END;

      // Elegimos la proforma a la que se van a transportar las l¡neas.

      lrProformas.SETCURRENTKEY(Estado);

      lrProformas.FILTERGROUP(2);
      lrProformas.SETFILTER(Estado, '<>%1', lrProformas.Estado::Anulada);
      lrProformas.FILTERGROUP(0);

      lfProformas.SETRECORD   (lrProformas);
      lfProformas.SETTABLEVIEW(lrProformas);
      lfProformas.LOOKUPMODE  := TRUE;
      lfProformas.EDITABLE    := FALSE;

      IF NOT(lfProformas.RUNMODAL IN [ACTION::OK, ACTION::LookupOK]) THEN
        EXIT;

      lrProformas.RESET;
      lfProformas.GETRECORD(lrProformas);

      lrProformas.SETRECFILTER;

      // En caso de seleccionar una sola l¡nea movemos todas las l¡neas que pertenezcan al mismo periodo.
      IF lwSoloLinea THEN BEGIN
        CASE lrLinsSel."Tipo producto" OF

          lrLinsSel."Tipo producto"::Hotel, lrLinsSel."Tipo producto"::Transfer : BEGIN

            IF (lrLinsSel."N§ Interno" <> 0) AND (lrLinsSel."N§ Periodo" <> 0) THEN BEGIN

              lrPer.SETRANGE("N§ Interno", lrLinsSel."N§ Interno");
              lrPer.SETRANGE("N§ Periodo", lrLinsSel."N§ Periodo");
              IF lrPer.FINDFIRST THEN BEGIN
                lrPer."Num. Proforma" := lrProformas."Num. Proforma";
                lrPer.MODIFY;
              END;

              lrLineas.SETCURRENTKEY("N§ Interno", "N§ Periodo");
              lrLineas.SETRANGE("N§ Interno", lrLinsSel."N§ Interno");
              lrLineas.SETRANGE("N§ Periodo", lrLinsSel."N§ Periodo");
              lrLineas.SETRANGE("Num. Proforma", prProforma."Num. Proforma");
              IF lrLineas.FINDSET THEN BEGIN


                REPEAT
                  lrLineaNueva := lrLineas;
                  lrLineaNueva."Num. Proforma" := lrProformas."Num. Proforma";
                  lrLineaNueva."Num. Linea"    := 0;
                  lrLineaNueva.INSERT(TRUE);
                UNTIL lrLineas.NEXT = 0;

                lrLineas.DELETEALL;

              END;

            END;

          END;

          lrLinsSel."Tipo producto"::Excursiones: BEGIN

            lrResExc.SETRANGE("N§ Reserva", lrLinsSel."Num. Reserva");
            IF lrResExc.FINDFIRST THEN BEGIN
              lrResExc."N§ Proforma" := lrProformas."Num. Proforma";
              lrResExc.MODIFY;
            END;

            lrLineaNueva.INIT;
            lrLineaNueva := lrLinsSel;
            lrLineaNueva."Num. Proforma" := lrProformas."Num. Proforma";
            lrLineaNueva."Num. Linea"    := 0;
            lrLineaNueva.INSERT(TRUE);

            lrLinsSel.DELETE;
          END;

        END;
      END
      ELSE BEGIN
        lrLineas.RESET;
        lrLineas.SETCURRENTKEY("N§ Interno", "N§ Periodo");
        lrLineas.SETRANGE("Num. Proforma", prProforma."Num. Proforma");
        IF lrLineas.FINDSET THEN BEGIN
          REPEAT
            CASE lrLinsSel."Tipo producto" OF

              lrLinsSel."Tipo producto"::Hotel, lrLinsSel."Tipo producto"::Transfer : BEGIN

                lrPer.SETRANGE("N§ Interno", lrLinsSel."N§ Interno");
                lrPer.SETRANGE("N§ Periodo", lrLinsSel."N§ Periodo");
                IF lrPer.FINDFIRST THEN BEGIN
                  lrPer."Num. Proforma" := lrProformas."Num. Proforma";
                  lrPer.MODIFY;
                END;

              END;

              lrLinsSel."Tipo producto"::Excursiones: BEGIN

                lrResExc.SETRANGE("N§ Reserva", lrLinsSel."Num. Reserva");
                IF lrResExc.FINDFIRST THEN BEGIN
                  lrResExc."N§ Proforma" := lrProformas."Num. Proforma";
                  lrResExc.MODIFY;
                END;

              END;

            END;

            lrLineaNueva.INIT;
            lrLineaNueva := lrLineas;
            lrLineaNueva."Num. Proforma" := lrProformas."Num. Proforma";
            lrLineaNueva."Num. Linea"    := 0;
            lrLineaNueva.INSERT(TRUE);

          UNTIL lrLineas.NEXT = 0;

          lrLineas.DELETEALL;

        END;
      END;

      // Si ya no quedan m s l¡neas en la proforma hay que mover los prepagos y
      // pedir si se quiere anular la proforma.

      lrLineas.RESET;
      lrLineas.SETRANGE ("Num. Proforma", prProforma."Num. Proforma");
      lrLineas.SETFILTER("Num. Linea"   , '<>%1', lrLinsSel."Num. Linea");

      IF NOT lwSoloLinea OR lrLineas.ISEMPTY THEN BEGIN
        MoverPrepagos(prProforma."Num. Proforma", lrProformas."Num. Proforma");
        AnularProforma(prProforma);
      END;
    END;

    LOCAL PROCEDURE CalculoHotelCotizacion@1103355029(pwCotizacion@1103355001 : Integer;VAR prRsvHot@1103355000 : Record 7009743;pwAdultos@1103355002 : Integer;pwNi¤os@1103355003 : Integer) : Decimal;
    VAR
      lrVinculo@1103355004 : Record 7009884;
      lwAdultos@1103355005 : Integer;
      lwNi¤os@1103355006 : Integer;
      lrLinCot@1103355007 : Record 7009872;
      lwPrecxPax@1103355008 : Decimal;
      lrParAg@1103355009 : Record 7009700;
      lwImporte@1103355011 : Decimal;
      lrCabCot@1103355010 : Record 7009871;
      lrCurrExc@1103355013 : Record 330;
      lwFechaDiv@1103355012 : Date;
    BEGIN
      // CalculoHotelCotizacion

      // recupero el hotel de cotizaci¢n vinculado a la reserva.
      lrVinculo.SETCURRENTKEY("Id Cotizacion", Delegacion, "N§ Interno", "N§ Periodo", Tipo);
      lrVinculo.SETRANGE ("Id Cotizacion", pwCotizacion);
      lrVinculo.SETRANGE (Delegacion     , prRsvHot.Delegacion);
      lrVinculo.SETRANGE ("N§ Interno"   , prRsvHot."N§ Reserva");
      lrVinculo.SETRANGE (Tipo           , lrVinculo.Tipo::"Reserva hotel");

      IF NOT lrVinculo.FINDFIRST THEN
        EXIT(0);

      // Cuento adultos y ni¤os.
      cCotCom.ContarPerHotel(lrVinculo."Id Hotel", lwAdultos, lwNi¤os);

      // Recupero la l¡nea con el c lculo del hotel.
      lrLinCot.SETCURRENTKEY("Id Cotizacion", "Id Producto", Hotel);
      lrLinCot.SETRANGE ("Id Cotizacion", pwCotizacion);
      lrLinCot.SETRANGE ("Id Producto"  , lrVinculo."Id Hotel");

      IF NOT lrLinCot.FINDFIRST THEN
        EXIT(0);

      IF lrLinCot."Total Ingreso" = 0 THEN
        EXIT(0);

      lrParAg.FINDFIRST;
      lrCabCot.GET(pwCotizacion);
      lwFechaDiv := DT2DATE(lrCabCot."Fecha creacion");

      lwImporte := lrLinCot."Total Ingreso";
      IF (lrCabCot.Divisa <> '') AND (lrCabCot.Divisa <> lrParAg."Divisa TOs cotizacion") THEN
        lwImporte := lrCurrExc.ExchangeAmtFCYToFCY(lwFechaDiv, lrParAg."Divisa TOs cotizacion", lrCabCot.Divisa, lwImporte);

      IF (pwAdultos = lwAdultos) AND (pwNi¤os = lwNi¤os) THEN
        EXIT(lwImporte);

      lwPrecxPax := lwImporte / (lwAdultos + lwNi¤os);

      EXIT(ROUND(lwPrecxPax * (pwAdultos + pwNi¤os)));
    END;

    LOCAL PROCEDURE CalculoTransferCotizacion@1103355030(pwCotizacion@1103355003 : Integer;VAR prRsvTra@1103355002 : Record 7009744;pwAdultos@1103355001 : Integer;pwNi¤os@1103355000 : Integer) : Decimal;
    VAR
      lrParAg@1100253000 : Record 7009700;
      lrVinculo@1103355008 : Record 7009884;
      lrLinCot@1100253001 : Record 7009872;
      lrTraCot@1100253002 : Record 7009881;
      lrCabCot@1100253003 : Record 7009871;
      lrCurrExc@1100253005 : Record 330;
      lwAdultos@1103355007 : Integer;
      lwNi¤os@1103355006 : Integer;
      lwPrecxPax@1103355004 : Decimal;
      lwTipoTra@1103355010 : Integer;
      lwImporteEntrada@1103355011 : Decimal;
      lwImporteSalida@1103355012 : Decimal;
      lwFechaDiv@1100253004 : Date;
    BEGIN
      // CalculoTransferCotizacion

      // recupero el hotel de cotizaci¢n vinculado a la reserva.
      lrVinculo.SETCURRENTKEY("Id Cotizacion", Delegacion, "N§ Interno", "N§ Periodo", Tipo);
      lrVinculo.SETRANGE ("Id Cotizacion", pwCotizacion);
      lrVinculo.SETRANGE (Delegacion     , prRsvTra.Delegacion);
      lrVinculo.SETRANGE ("N§ Interno"   , prRsvTra."N§ Reserva");
      lrVinculo.SETRANGE (Tipo           , lrVinculo.Tipo::"Reserva transfer");

      IF NOT lrVinculo.FINDFIRST THEN
        EXIT(0);

      // Cuento adultos y ni¤os.
      IF lrVinculo."Id Transfer entrada" <> 0 THEN
        cCotCom.ContarPerTransfer(lrVinculo."Id Transfer entrada", lwAdultos, lwNi¤os)
      ELSE
        cCotCom.ContarPerTransfer(lrVinculo."Id Transfer salida", lwAdultos, lwNi¤os);

      IF lrVinculo."Id Transfer entrada" <> 0 THEN
        lwTipoTra := wTipoTra::Entrada;

      IF lrVinculo."Id Transfer salida" <> 0 THEN
        lwTipoTra := wTipoTra::Salida;

      IF (lrVinculo."Id Transfer entrada" <> 0) AND (lrVinculo."Id Transfer salida" <> 0) THEN
        lwTipoTra := wTipoTra::Ambos;

      //. Buscamos la cabecera de la cotizacion

      lrParAg.FINDFIRST;
      lrCabCot.GET(pwCotizacion);
      lwFechaDiv := DT2DATE(lrCabCot."Fecha creacion");

      // Recupero la l¡nea de c lculo del transfer de entrada.

      lrLinCot.RESET;
      lrLinCot.SETCURRENTKEY("Id Cotizacion", "Id Producto", Hotel);
      lrLinCot.SETRANGE ("Id Cotizacion", pwCotizacion);
      lrLinCot.SETRANGE ("Id Producto"  , lrVinculo."Id Transfer entrada");

      IF lrLinCot.FINDFIRST THEN BEGIN
        lwImporteEntrada := lrLinCot."Total Ingreso";
        IF (lrCabCot.Divisa <> '') AND (lrCabCot.Divisa <> lrParAg."Divisa TOs cotizacion") THEN
          lwImporteEntrada := lrCurrExc.ExchangeAmtFCYToFCY(lwFechaDiv, lrParAg."Divisa TOs cotizacion",
                                                            lrCabCot.Divisa, lwImporteEntrada);
      END;

      // Recupero la l¡nea de c lculo del transfer de salida.
      lrLinCot.RESET;
      lrLinCot.SETCURRENTKEY("Id Cotizacion", "Id Producto", Hotel);
      lrLinCot.SETRANGE ("Id Cotizacion", pwCotizacion);
      lrLinCot.SETRANGE ("Id Producto"  , lrVinculo."Id Transfer salida");

      IF lrLinCot.FINDFIRST THEN BEGIN
        lwImporteSalida := lrLinCot."Total Ingreso";
        IF (lrCabCot.Divisa <> '') AND (lrCabCot.Divisa <> lrParAg."Divisa TOs cotizacion") THEN
          lwImporteSalida := lrCurrExc.ExchangeAmtFCYToFCY(lwFechaDiv, lrParAg."Divisa TOs cotizacion",
                                                            lrCabCot.Divisa, lwImporteSalida);
      END;

      EXIT(DividirImporteTransfer(pwCotizacion, lrVinculo."Id Transfer entrada", lrVinculo."Id Transfer salida",
                             lwTipoTra, pwAdultos + pwNi¤os, lwAdultos + lwNi¤os,
                             (lrVinculo."Id Transfer entrada" <> lrVinculo."Id Transfer salida"),
                             lwImporteEntrada, lwImporteSalida));
    END;

    LOCAL PROCEDURE DividirImporteTransfer@1103355049(pwIdCot@1103355000 : Integer;pwIdTraEnt@1103355001 : Integer;pwIdTraSal@1103355002 : Integer;pwTipoTra@1103355003 : Integer;pwPaxes@1103355004 : Integer;pwPaxesTot@1103355005 : Integer;pwESDistintos@1103355006 : Boolean;pwImporteEntrada@1103355007 : Decimal;pwImporteSalida@1103355008 : Decimal) : Decimal;
    VAR
      lrTraEnt@1103355009 : Record 7009881;
      lrTraSal@1103355010 : Record 7009881;
      lwImporteEnt@1103355011 : Decimal;
      lwImporteSal@1103355012 : Decimal;
      lwFactorEnt@1103355013 : Decimal;
      lwFactorSal@1103355014 : Decimal;
    BEGIN
      // DividirImporteTransfer

      IF pwIdTraEnt <> 0 THEN BEGIN

        lrTraEnt.GET(pwIdTraEnt);

        lwFactorEnt := 1;
        IF lrTraEnt."Tipo transfer" = lrTraEnt."Tipo transfer"::Ambos THEN
          lwFactorEnt := 0.5;

      END;

      IF pwIdTraSal <> 0 THEN BEGIN

        lrTraSal.GET(pwIdTraSal);
        lwFactorSal := 1;
        IF lrTraSal."Tipo transfer" = lrTraSal."Tipo transfer"::Ambos THEN
          lwFactorSal := 0.5;

      END;

      IF pwPaxes = pwPaxesTot THEN BEGIN
        lwImporteEnt := pwImporteEntrada;
        lwImporteSal := pwImporteSalida;
      END
      ELSE BEGIN
        lwImporteEnt := (pwImporteEntrada / pwPaxesTot) * pwPaxes;
        lwImporteSal := (pwImporteSalida  / pwPaxesTot) * pwPaxes;
      END;


      CASE pwTipoTra OF

        wTipoTra::Entrada: BEGIN
          EXIT(ROUND(lwImporteEnt * lwFactorEnt));
        END;

        wTipoTra::Salida: BEGIN
          EXIT(ROUND(lwImporteSal * lwFactorSal));
        END;

        wTipoTra::Ambos: BEGIN
          IF NOT pwESDistintos THEN BEGIN
            EXIT(ROUND(lwImporteEnt * lwFactorEnt + lwImporteSal * lwFactorSal));
          END
          ELSE BEGIN
            EXIT(lwImporteEnt);
          END;
        END;

      END;
    END;

    PROCEDURE EliminarCabecerasCotizacion@1103355031(pwNumCot@1103355000 : Integer);
    VAR
      lrVinculos@1103355001 : Record 7009884;
      lrCabRes@1103355002 : Record 7009741;
      lrAcoRes@1103355003 : Record 7009748;
      lrPerRes@1103355004 : Record 7009742;
      lrResHot@1103355005 : Record 7009743;
      lrResExc@1103355006 : Record 7010162;
      lrResTra@1103355007 : Record 7009744;
    BEGIN
      // EliminarCabecerasCotizacion
      //:
      //: @pwNumCot: N£mero de la cotizaci¢n de la que se quieren eliminar las cabeceras.

      lrVinculos.SETCURRENTKEY("Id Cotizacion", Delegacion, "N§ Interno", "N§ Periodo", Tipo);
      lrVinculos.SETRANGE("Id Cotizacion", pwNumCot);
      lrVinculos.SETRANGE(Tipo           , lrVinculos.Tipo::Cabecera);

      IF lrVinculos.FINDSET THEN BEGIN
        REPEAT

          lrCabRes.RESET;
          lrCabRes.SETRANGE (Delegacion  , lrVinculos.Delegacion);
          lrCabRes.SETRANGE ("N§ Interno", lrVinculos."N§ Interno");
          IF lrCabRes.FINDFIRST THEN BEGIN

            lrPerRes.RESET;
            lrPerRes.SETRANGE (Delegacion  , lrCabRes.Delegacion);
            lrPerRes.SETRANGE ("N§ Interno", lrCabRes."N§ Interno");
            lrPerRes.DELETEALL;

            lrAcoRes.RESET;
            lrAcoRes.SETRANGE (Delegacion  , lrCabRes.Delegacion);
            lrAcoRes.SETRANGE ("N§ Interno", lrCabRes."N§ Interno");
            lrAcoRes.DELETEALL;

            lrCabRes.DELETE;

          END;
        UNTIL lrVinculos.NEXT = 0;
      END;

      lrVinculos.RESET;
      lrVinculos.SETCURRENTKEY("Id Cotizacion", Delegacion, "N§ Interno", "N§ Periodo", Tipo);
      lrVinculos.SETRANGE ("Id Cotizacion", pwNumCot);
      lrVinculos.SETFILTER(Tipo           , '%1|%2|%3', lrVinculos.Tipo::"Reserva excursion",
                            lrVinculos.Tipo::"Reserva transfer", lrVinculos.Tipo::"Reserva hotel");

      IF lrVinculos.FINDSET THEN BEGIN
        REPEAT
          CASE lrVinculos.Tipo OF

            lrVinculos.Tipo::"Reserva excursion": BEGIN
              lrResExc.RESET;
              lrResExc.SETRANGE (Delegacion  , lrVinculos.Delegacion);
              lrResExc.SETRANGE ("N§ Reserva", lrVinculos."N§ Interno");
              lrResExc.DELETEALL(TRUE);
            END;

            lrVinculos.Tipo::"Reserva transfer" : BEGIN
              lrResTra.RESET;
              lrResTra.SETCURRENTKEY(Delegacion, "N§ Responsable", "Agrupacion entrada", "Agrupacion salida", Bono);
              lrResTra.SETRANGE (Delegacion      , lrVinculos.Delegacion);
              lrResTra.SETRANGE ("N§ Responsable", lrVinculos."N§ Interno");
              lrResTra.DELETEALL(TRUE);
            END;

            lrVinculos.Tipo::"Reserva hotel"    : BEGIN
              lrResHot.RESET;
              lrResHot.SETCURRENTKEY(Delegacion, "N§ Responsable", Edad);
              lrResHot.SETRANGE (Delegacion      , lrVinculos.Delegacion);
              lrResHot.SETRANGE ("N§ Responsable", lrVinculos."N§ Interno");
              lrResHot.DELETEALL(TRUE);
            END;

          END;
        UNTIL lrVinculos.NEXT = 0;
      END;
    END;

    PROCEDURE ControlLineasImpresion@1103355033(VAR prProforma@1103355000 : Record 7009866) : Boolean;
    VAR
      lrLineas@1103355001 : Record 7009867;
    BEGIN
      // ControlLineasImpresion
      //: Controla que las l¡neas de proforma estn bien formadas antes de la impresion.
      //: @prProfoma: Proforma de la que se van a analizar las l¡neas.

      lrLineas.RESET;
      lrLineas.SETRANGE ("Num. Proforma", prProforma."Num. Proforma");
      IF lrLineas.FINDSET THEN BEGIN
        CASE lrLineas."Tipo producto" OF

          lrLineas."Tipo producto"::Hotel, lrLineas."Tipo producto"::Transfer: BEGIN
            IF lrLineas.Bono = '' THEN
              EXIT(FALSE);
          END;

          lrLineas."Tipo producto"::Excursiones: BEGIN
            IF lrLineas."Num. Reserva" = 0 THEN
              EXIT(FALSE);
          END;

        END;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetTipoImpresionVoucher@1103355035(VAR prProforma@1103355004 : Record 7009866;VAR prLinProf@1103355000 : Record 7009867) rvTipo : Integer;
    VAR
      lrPais@1103355001 : Record 9;
      lrTTOO@1103355002 : Record 7009717;
      lrAdjts@1103355003 : Record 7009886;
      lrResHotel@1103355005 : Record 7009743;
    BEGIN
      // GetTipoImpresionVoucher.

      IF prLinProf."Voucher propio" OR (prLinProf."Tipo producto" <> prLinProf."Tipo producto"::Hotel) THEN
        EXIT(wTipoImpVoucher::Agencia);

      lrPais.GET(prProforma.Pais);

      IF NOT lrPais."Imprimir Voucher Touroperador" THEN
        EXIT(wTipoImpVoucher::Agencia);

      lrResHotel.RESET;
      lrResHotel.SETRANGE ("N§ Reserva", prLinProf."Num. Reserva");
      lrResHotel.FINDFIRST;

      // AJF 07/10/09
      lrTTOO.GET(BuscaTTOOBlank(lrResHotel.Delegacion, lrResHotel.Bono, lrResHotel.TourOperador));
      lrTTOO.CALCFIELDS(Logo);
      IF lrTTOO.Logo.HASVALUE THEN BEGIN
        EXIT(wTipoImpVoucher::TourOperador);
      END
      ELSE BEGIN
        lrAdjts.SETCURRENTKEY("Num. Proforma", "Lin. Proforma");
        lrAdjts.SETRANGE ("Num. Proforma", prLinProf."Num. Proforma");
        lrAdjts.SETRANGE ("Lin. Proforma", prLinProf."Num. Linea");
        IF NOT lrAdjts.ISEMPTY THEN
          EXIT(wTipoImpVoucher::Adjunto);

        EXIT(wTipoImpVoucher::Agencia);
      END;
    END;

    LOCAL PROCEDURE ImprimirVoucherLinea@1103355037(VAR prProforma@1103355000 : Record 7009866;VAR prLinProf@1103355001 : Record 7009867);
    VAR
      lrepVoucher@1103355005 : Report 7009901;
      lrepVoucherTTOO@1103355004 : Report 7009906;
      lrAuxLinProf@1103355003 : Record 7009867;
      lrAdjts@1103355002 : Record 7009886;
    BEGIN
      // ImprimirVoucherLinea.

      CASE GetTipoImpresionVoucher(prProforma, prLinProf) OF

        wTipoImpVoucher::Agencia      : BEGIN
          CLEAR(lrepVoucher);
          lrepVoucher.SetParametros(prLinProf."Num. Linea");
          lrepVoucher.SETTABLEVIEW(prProforma);
          lrepVoucher.USEREQUESTFORM := FALSE;
          lrepVoucher.RUNMODAL;
        END;

        wTipoImpVoucher::TourOperador : BEGIN
          CLEAR(lrepVoucherTTOO);
          CLEAR(lrAuxLinProf);
          lrAuxLinProf := prLinProf;
          lrAuxLinProf.FIND;
          lrAuxLinProf.SETRECFILTER;
          lrepVoucherTTOO.SETTABLEVIEW(lrAuxLinProf);
          lrepVoucherTTOO.USEREQUESTFORM := FALSE;
          lrepVoucherTTOO.RUNMODAL;
        END;

        wTipoImpVoucher::Adjunto      : BEGIN
          lrAdjts.RESET;
          lrAdjts.SETCURRENTKEY("Num. Proforma", "Lin. Proforma");
          lrAdjts.SETRANGE ("Num. Proforma", prLinProf."Num. Proforma");
          lrAdjts.SETRANGE ("Lin. Proforma", prLinProf."Num. Linea");
          IF lrAdjts.FINDSET THEN BEGIN
            REPEAT
              IF EXISTS(lrAdjts.Archivo) THEN
                cVarias.ImprimirArchivo(lrAdjts.Archivo);
            UNTIL lrAdjts.NEXT = 0;
          END;
        END;

      END;
    END;

    LOCAL PROCEDURE BuscaTTOOBlank@1103355034(VAR pwDeleg@1103355003 : Code[10];VAR pwBono@1103355001 : Code[10];VAR pwTTOOCompra@1103355000 : Code[10]) : Code[10];
    VAR
      lrParAgencia@1103355002 : Record 7009700;
      lrConvBlank@1103355004 : Record 7009820;
      lwTTOO@1103355005 : Code[10];
    BEGIN
      // BuscaTTOOBlank

      lrParAgencia.FINDFIRST;
      lwTTOO :=lrConvBlank.GetTTOOEmp(pwDeleg,pwBono,pwTTOOCompra,FALSE, lrParAgencia."Empres Hotel Payment");
      EXIT(lwTTOO);
    END;

    BEGIN
    {
      ## AJF 07/05/09

        .- A¤adido funcionalidad para poder hacer proformas a partir de cotizaciones.

      ## AJF 03/06/09

        .- A¤adida confirmaci¢n al acabar de imprimir la documentaci¢n de las proformas, para poder pasar
           la proforma a contabilidad si est  se ha impreso correctamente.

      ## AJF 09/06/09

        .- Recupero el importe calculado de las excursiones que se han definido en cotizaciones.

      ## AJF 23/06/09

        .- (09/00303) Para las proformas de cotizaciones se comprueba que no se hayan proformado ya las excursiones
           ya que estas no est n vinculadas a un periodo.

      ## AJF 05/10/09

        .- (GOC09002) Modificamos la impresi¢n de Vouchers para tener en cuenta los nuevos parametros.

      ## AJF 07/04/10
        .- (INC-48121) Se cambia la llamada a la funci¢n de "BuscaContrato" para que permita incluir una divisa concreta
           para la busqueda del contrato de venta. En caso de que se deje vacio el parametro se busca sin filtrar por la
           divisa.

      ## AJF 10/06/10
        .- (INC-49760) Al regenerar una proforma, en lugar de dar error si no se encuentra contrato de venta se usa
           la fecha de llegada como fecha de vencimiento.

      $001 AJS 29092011 En la creacion de las lineas de transfer hago la conversion de los importes a la divisa de la
                        cotizacion.

      $002 AJS 19042013 He incluido un round en la asignacion de Importe a las lineas de proforma para evitar problemas
                        de redondeo al comparar con los prepagos.

      $003 AJS 10102013 Marco las lineas de diario como Asiento automatico para que el usuario no las pueda borrar

      $004 AJS 19112013 Sustituyo la clave a la hora de buscar el ultimo numero de asiento

      $005 AJS 10062014 Cambio la busqueda de los precios de transfer para que sean por ruta

      $006 AJS 09022015 Rellenar el campo Source code en la linea de diario

      $007 AJS 13032015 CNT-CAR-14096, Esta funcion no trabaja con los contratos de comercializadora
    }
    END.
  }
}
