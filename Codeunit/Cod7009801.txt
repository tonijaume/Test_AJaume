OBJECT Codeunit 7009801 Conciliacion bonos excursiones
{
  OBJECT-PROPERTIES
  {
    Date=23/07/15;
    Time=11:07:48;
    Modified=Yes;
    Version List=AIC2009,COM;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000000000 : TextConst 'ENU=Specify a  correct dates;ESP=Especifique unas fechas correctas';
      Text002@1000000001 : TextConst 'ENU=This register overlaps with another entered;ESP=Este registro se solapa con otro ya introducido.';
      Text003@1000000003 : TextConst 'ENU=Wrong excursion code;ESP=Codigo de excursion erroneo';
      Text004@1000000002 : TextConst 'ENU=Wrong hotel code;ESP=Codigo de hotel erroneo';
      Text005@1000000004 : TextConst 'ENU=Excel file touroperator;ESP=Fichero excel touroperador';
      procImp@1000000005 : TextConst 'ENU=Octopus data processing @1@@@@@@@@@@@@@;ESP=Procesando datos @1@@@@@@@@@@@@@';
      Text006@1000000006 : TextConst 'ENU=You must select touroperator.;ESP=Debe seleccionar el touroperador.';

    PROCEDURE ImportarBonosTo@1100244000();
    VAR
      lwNomFichero@1100244002 : Text[250];
      lwNumFila@1100244003 : Integer;
      rExcelBuffer@1000000005 : TEMPORARY Record 370;
      wVentana@1000000004 : Dialog;
      Selection@1000000003 : Integer;
      vFileXLS@1000000002 : Text[250];
      CommonDialogMgt@1000000001 : Codeunit 412;
      vNameFile@1000000000 : Text[100];
      lrBonoTo@1000000006 : Record 7009944;
      vTmpDate@1000000007 : Date;
      vTmpInt@1000000008 : Integer;
      vTmpDec@1000000009 : Decimal;
      vFilasTot@1000000010 : Integer;
      vFila@1000000011 : Integer;
      vTrozo@1000000014 : Decimal;
      vPorce@1000000013 : Decimal;
      dProc@1000000012 : Dialog;
      lwTouroperador@1000000015 : Code[20];
      lrTouroperador@1000000016 : Record 7009717;
    BEGIN
      // ImportarBonos

      CLEAR(lwTouroperador);
      lrTouroperador.RESET;
      IF FORM.RUNMODAL(0,lrTouroperador) = ACTION::LookupOK THEN
        lwTouroperador := lrTouroperador.TourOperador;

      IF lwTouroperador = '' THEN
        ERROR(Text006);

      CLEAR(vNameFile);
      vNameFile := CommonDialogMgt.OpenFile(Text005,vNameFile,4,'*.xlsx',0);
      IF vNameFile = '' THEN
        EXIT;

      // Proceso de lectura del fichero excel
      rExcelBuffer.RESET;
      rExcelBuffer.DELETEALL;
      rExcelBuffer.OpenBook(vNameFile, 'Sheet1'); //+$001
      rExcelBuffer.ReadSheet;

      // Vemos cuantas filas del fichero excel se han importado
      rExcelBuffer.RESET;
      IF rExcelBuffer.FINDLAST THEN BEGIN
        vFilasTot := rExcelBuffer."Row No.";
      END;

      vFila := 2;
      vPorce := 100 / vFilasTot;
      vTrozo := 0;
      dProc.OPEN(procImp);
      REPEAT
        rExcelBuffer.RESET;
        rExcelBuffer.SETRANGE(rExcelBuffer."Row No.",vFila);
        IF rExcelBuffer.FINDFIRST THEN BEGIN
          REPEAT
            CLEAR(lrBonoTo);
            lrBonoTo.INIT;
            lrBonoTo.TourOperador := lwTouroperador;
            lrBonoTo.INSERT(TRUE);
            CASE rExcelBuffer."Column No." OF
              1: BEGIN
                   IF rExcelBuffer."Cell Value as Text" <> '' THEN BEGIN
                     lrBonoTo.VALIDATE(Destino,rExcelBuffer."Cell Value as Text");
                   END;
                 END;
              2: BEGIN
                   IF rExcelBuffer."Cell Value as Text" <> '' THEN BEGIN
                     lrBonoTo.VALIDATE(lrBonoTo."Booking Touroperador",rExcelBuffer."Cell Value as Text");
                   END;
                 END;
              3: BEGIN
                   IF rExcelBuffer."Cell Value as Text" <> '' THEN BEGIN
                     IF EVALUATE(vTmpDate,rExcelBuffer."Cell Value as Text") THEN BEGIN
                       lrBonoTo.VALIDATE(lrBonoTo."Fecha Venta",vTmpDate);
                     END;
                   END;
                 END;
              4: BEGIN
                   IF rExcelBuffer."Cell Value as Text" <> '' THEN BEGIN
                     lrBonoTo.VALIDATE(lrBonoTo.Excursion,rExcelBuffer."Cell Value as Text");
                   END;
                 END;
              5: BEGIN
                   IF rExcelBuffer."Cell Value as Text" <> '' THEN BEGIN
                     lrBonoTo.VALIDATE(lrBonoTo."Nombre Cliente",rExcelBuffer."Cell Value as Text");
                   END;
                 END;
              7: BEGIN
                   IF rExcelBuffer."Cell Value as Text" <> '' THEN BEGIN
                     IF EVALUATE(vTmpDate,rExcelBuffer."Cell Value as Text") THEN BEGIN
                       lrBonoTo.VALIDATE(lrBonoTo."Fecha Excursion",vTmpDate);
                     END;
                   END;
                 END;
              8: BEGIN
                   IF rExcelBuffer."Cell Value as Text" <> '' THEN BEGIN
                     lrBonoTo.VALIDATE(lrBonoTo."Hotel Cliente",rExcelBuffer."Cell Value as Text");
                   END;
                 END;
              9: BEGIN
                   IF rExcelBuffer."Cell Value as Text" <> '' THEN BEGIN
                     IF EVALUATE(vTmpInt,rExcelBuffer."Cell Value as Text") THEN BEGIN
                       lrBonoTo.Adultos := vTmpInt;
                     END;
                   END;
                 END;
              10: BEGIN
                   IF rExcelBuffer."Cell Value as Text" <> '' THEN BEGIN
                     IF EVALUATE(vTmpInt,rExcelBuffer."Cell Value as Text") THEN BEGIN
                       lrBonoTo.Ni¤os := vTmpInt;
                     END;
                   END;
                 END;
              11: BEGIN
                   IF rExcelBuffer."Cell Value as Text" <> '' THEN BEGIN
                     IF EVALUATE(vTmpDec,rExcelBuffer."Cell Value as Text") THEN BEGIN
                       lrBonoTo.Importe := vTmpDec;
                     END;
                   END;
                 END;
              12: BEGIN
                   IF rExcelBuffer."Cell Value as Text" <> '' THEN BEGIN
                     lrBonoTo.VALIDATE(lrBonoTo.Divisa,rExcelBuffer."Cell Value as Text");
                   END;
                 END;
            END;
          UNTIL (rExcelBuffer.NEXT = 0);
        END;
        dProc.UPDATE(1,ROUND(vPorce * 100,1));
        vPorce := vPorce + vTrozo;
        vFila := vFila + 1;
      UNTIL vFila > vFilasTot;
      dProc.CLOSE;
    END;

    PROCEDURE NuevaConciliacion@1000000001();
    VAR
      lrCabConTMP@1000000000 : TEMPORARY Record 7009945;
      lrCabCon@1000000001 : Record 7009945;
      lrBonConc@1000000003 : Record 7009946;
      fBonCon@1000000002 : Form 7010308;
    BEGIN
      // Conciliaci¢n bonos

      CLEAR(lrCabConTMP);
      lrCabConTMP.RESET;
      lrCabConTMP.INIT;
      lrCabConTMP.INSERT;
      IF FORM.RUNMODAL(7010307,lrCabConTMP) = ACTION::LookupOK THEN BEGIN
        IF (lrCabConTMP."Fecha desde" = 0D) OR (lrCabConTMP."Fecha hasta" = 0D) THEN
          ERROR(Text001);
        //-$004lrCabConTMP.TESTFIELD(lrCabConTMP.Delegacion);
        lrCabConTMP.TESTFIELD(lrCabConTMP.TourOperador);

        // Comprobamos si ya existe o se solapa con otro registro
        //-$002CLEAR(lrCabCon);
        //-$002lrCabCon.RESET;
        //-$002lrCabCon.SETRANGE(lrCabCon.TourOperador, lrCabConTMP.TourOperador);
        //-$002lrCabCon.SETFILTER(lrCabCon."Fecha desde", '<=%1', lrCabConTMP."Fecha hasta");
        //-$002lrCabCon.SETFILTER(lrCabCon."Fecha hasta", '>=%1', lrCabConTMP."Fecha desde");
        //-$002lrCabCon.SETRANGE(lrCabCon.Delegacion, lrCabConTMP.Delegacion);
        //-$002IF lrCabCon.FINDFIRST THEN
        //-$002  ERROR(Text002);
        //-$002lrCabCon.SETRANGE(lrCabCon.Destino, lrCabConTMP.Destino);
        //-$002IF lrCabCon.FINDFIRST THEN
        //-$002  ERROR(Text002);

        CLEAR(lrCabCon);
        lrCabCon.RESET;
        lrCabCon.INIT;
        lrCabCon.Delegacion := lrCabConTMP.Delegacion;
        lrCabCon.Destino := lrCabConTMP.Destino;
        lrCabCon.TourOperador := lrCabConTMP.TourOperador;
        lrCabCon."Fecha desde" := lrCabConTMP."Fecha desde";
        lrCabCon."Fecha hasta" := lrCabConTMP."Fecha hasta";
        lrCabCon."Conciliacion manual" := lrCabConTMP."Conciliacion manual";
        lrCabCon.INSERT(TRUE);

        IF lrCabCon."Conciliacion manual" THEN
          ConcManual(lrCabCon)
        ELSE
          ConcAutomatica(lrCabCon);

        COMMIT;
        // Mostramos el detalle de la conciliacion
        lrBonConc.FILTERGROUP(0);
        lrBonConc.RESET;
        lrBonConc.SETRANGE(lrBonConc."Id conciliacion", lrCabCon."Id registro");
        lrBonConc.FILTERGROUP(0);
        CLEAR(fBonCon);
        fBonCon.SETTABLEVIEW(lrBonConc);
        fBonCon.RUNMODAL;

      END;
    END;

    PROCEDURE ConcAutomatica@1000000002(prCabCon@1000000000 : Record 7009945);
    VAR
      lrResCOM@1000000001 : Record 7009940;
      lrBonTo@1000000002 : Record 7009944;
      lrBonConc@1000000003 : Record 7009946;
      lwExcursion@1000000004 : Code[10];
      lwHotel@1000000005 : Code[20];
    BEGIN

      lrResCOM.RESET;
      lrResCOM.SETCURRENTKEY(Destino, TourOperador, "Fecha Excursion", Calculada, Conciliada);
      //+$004 <
      IF prCabCon.Delegacion <> '' THEN
        lrResCOM.SETRANGE(Destino          , prCabCon.Delegacion);
      //+$004 >
      lrResCOM.SETRANGE(TourOperador     , prCabCon.TourOperador);
      lrResCOM.SETRANGE("Fecha Excursion", prCabCon."Fecha desde", prCabCon."Fecha hasta");
      lrResCOM.SETRANGE(Conciliada       , FALSE);
      IF lrResCOM.FINDSET THEN
      BEGIN
        REPEAT
          lrResCOM.CALCFIELDS(lrResCOM.Adultos, lrResCOM.Ni¤os);

          CLEAR(lrBonConc);
          lrBonConc.INIT;
          lrBonConc."Id conciliacion" := prCabCon."Id registro";
          lrBonConc.Destino := lrResCOM.Destino;
          lrBonConc.TourOperador := lrResCOM.TourOperador;
          lrBonConc."N§ Reserva" := lrResCOM."N§ Reserva";
          lrBonConc."Booking Touroperador" := lrResCOM."Booking Touroperador";
          lrBonConc."Fecha Venta Agencia" := lrResCOM."Fecha Venta";
          lrBonConc."Excursion Agencia" := lrResCOM.Excursion;
          lrBonConc."Nombre Cliente Agencia" := lrResCOM."Nombre Cliente";
          lrBonConc."Fecha Excursion Agencia" := lrResCOM."Fecha Excursion";
          lrBonConc."Hotel Cliente Agencia" := lrResCOM."Hotel Cliente";
          lrBonConc."Adultos Agencia" := lrResCOM.Adultos;
          lrBonConc."Ni¤os Agencia" := lrResCOM.Ni¤os;
          lrBonConc."Importe Agencia" := lrResCOM."Importe a Facturar";
          lrBonConc."Divisa  Agencia" := lrResCOM.Divisa;
          lrBonConc.INSERT(TRUE);

          // Buscamos en los bonos TO
          lrBonTo.RESET;
          lrBonTo.SETRANGE(Destino               , lrResCOM.Destino);
          lrBonTo.SETRANGE(TourOperador          , lrResCOM.TourOperador);
          lrBonTo.SETRANGE("Booking Touroperador", lrResCOM."Booking Touroperador");
          lrBonTo.SETRANGE(Conciliado            , FALSE);
          IF lrBonTo.FINDFIRST THEN
          BEGIN
            lrBonConc."Destino Touroperador"        := lrBonTo.Destino;
            lrBonConc."Nombre cliente TO"           := lrBonTo."Nombre Cliente";
            lrBonConc."Hotel Touroperador"          := lrBonTo."Hotel Cliente";
            lrBonConc."Fecha servicio Touroperador" := lrBonTo."Fecha Excursion";
            lrBonConc."Importe Touroperador"        := lrBonTo.Importe;
            lrBonConc."Divisa Touroperador"         := lrBonTo.Divisa;
            lrBonConc."Adultos Touroperador"        := lrBonTo.Adultos;
            lrBonConc."Ni¤os Touroperador"          := lrBonTo.Ni¤os;

            //Comprobamos que los codigos de excursion y hotel existan
            lwExcursion := _GetConversion(0, lrBonTo.TourOperador, lrBonTo.Excursion);
            lwHotel     := _GetConversion(1, lrBonTo.TourOperador, lrBonTo."Hotel Cliente");
            IF (lwExcursion = lrResCOM.Excursion) AND (lwHotel = lrResCOM."Hotel Cliente") AND
               (lrBonTo."Fecha Excursion" = lrResCOM."Fecha Excursion") AND (lrBonTo.Divisa = lrResCOM.Divisa) AND
               (lrBonTo.Adultos = lrResCOM.Adultos) AND (lrBonTo.Ni¤os = lrResCOM.Ni¤os) THEN
            BEGIN
              IF lrBonTo.Importe = lrResCOM."Importe a Facturar" THEN
              BEGIN
                lrBonConc.Estado := lrBonConc.Estado::Conciliado;
              END
              ELSE
              BEGIN
                IF lrBonTo.Importe < lrResCOM."Importe a Facturar" THEN
                  lrBonConc.Estado := lrBonConc.Estado::"+Agencia"
                ELSE
                  lrBonConc.Estado := lrBonConc.Estado::"+Touroperador"
              END;
            END
            ELSE
            BEGIN
              lrBonConc.Estado := lrBonConc.Estado::Diferencia;
            END;
            lrBonTo.Conciliado := TRUE;
            lrBonTo.MODIFY;
          END
          ELSE
          BEGIN
            lrBonTo.SETRANGE(Conciliado, TRUE);
            IF lrBonTo.FINDFIRST THEN
            BEGIN
              lrBonConc.Estado := lrBonConc.Estado::"Pago Dup";
              lrBonTo.Conciliado := TRUE;
              lrBonTo.MODIFY;
            END
            ELSE
              lrBonConc.Estado := lrBonConc.Estado::"No To";
          END;
          lrBonConc.MODIFY;
        UNTIL lrResCOM.NEXT = 0;
        lrResCOM.MODIFYALL(lrResCOM.Conciliada, TRUE);
      END;

      lrBonTo.RESET;
      lrBonTo.SETCURRENTKEY(Destino,TourOperador,"Fecha Excursion",Conciliado);
      //+$004 <
      IF prCabCon.Delegacion <> '' THEN
        lrBonTo.SETRANGE(Destino, prCabCon.Delegacion);
      //+$004 <
      lrBonTo.SETRANGE(TourOperador     , prCabCon.TourOperador);
      lrBonTo.SETRANGE("Fecha Excursion", prCabCon."Fecha desde", prCabCon."Fecha hasta");
      lrBonTo.SETRANGE(Conciliado       , FALSE);
      IF lrBonTo.FINDSET THEN
      BEGIN
        REPEAT
          CLEAR(lrBonConc);
          lrBonConc.INIT;
          lrBonConc."Id conciliacion" := prCabCon."Id registro";
          lrBonConc.Destino := prCabCon.Delegacion;
          lrBonConc.TourOperador := prCabCon.TourOperador;
          lrBonConc."Destino Touroperador" := lrBonTo.Destino;
          lrBonConc.TourOperador := lrBonTo."Booking Touroperador";
          lrBonConc."Nombre cliente TO" := lrBonTo."Nombre Cliente";
          lrBonConc."Hotel Touroperador" := lrBonTo."Hotel Cliente";
          lrBonConc."Fecha servicio Touroperador" := lrBonTo."Fecha Excursion";
          lrBonConc."Importe Touroperador" := lrBonTo.Importe;
          lrBonConc."Divisa Touroperador" := lrBonTo.Divisa;
          lrBonConc.Estado := lrBonConc.Estado::"No Agencia";
          lrBonConc."Adultos Touroperador" := lrBonTo.Adultos;
          lrBonConc."Ni¤os Touroperador" := lrBonTo.Ni¤os;
          lrBonConc.INSERT(TRUE);
        UNTIL lrBonTo.NEXT = 0;
        lrBonTo.MODIFYALL(Conciliado, TRUE);
      END;

      prCabCon."Fecha/Hora ultima comprobacion" := CURRENTDATETIME;
      prCabCon.MODIFY;
    END;

    PROCEDURE ConcManual@1000000007(prCabCon@1000000000 : Record 7009945);
    VAR
      lrResCOM@1000000001 : Record 7009940;
      lrBonTo@1000000002 : Record 7009944;
      lrBonConc@1000000003 : Record 7009946;
      lwExcursion@1000000004 : Code[10];
      lwHotel@1000000005 : Code[20];
    BEGIN

      lrResCOM.RESET;
      lrResCOM.SETCURRENTKEY(Destino,TourOperador,"Fecha Excursion",Calculada,Conciliada);
      //+$004 <
      IF prCabCon.Delegacion <> '' THEN
        lrResCOM.SETRANGE(Destino, prCabCon.Delegacion);
      //+$004 <
      lrResCOM.SETRANGE(TourOperador     , prCabCon.TourOperador);
      lrResCOM.SETRANGE("Fecha Excursion", prCabCon."Fecha desde", prCabCon."Fecha hasta");
      lrResCOM.SETRANGE(Conciliada       , FALSE);
      IF lrResCOM.FINDSET THEN
      BEGIN
        REPEAT
          lrResCOM.CALCFIELDS(lrResCOM.Adultos, lrResCOM.Ni¤os);

          CLEAR(lrBonConc);
          lrBonConc.INIT;
          lrBonConc."Id conciliacion"         := prCabCon."Id registro";
          lrBonConc.Destino                   := lrResCOM.Destino;
          lrBonConc.TourOperador              := lrResCOM.TourOperador;
          lrBonConc."N§ Reserva"              := lrResCOM."N§ Reserva";
          lrBonConc."Booking Touroperador"    := lrResCOM."Booking Touroperador";
          lrBonConc."Fecha Venta Agencia"     := lrResCOM."Fecha Venta";
          lrBonConc."Excursion Agencia"       := lrResCOM.Excursion;
          lrBonConc."Nombre Cliente Agencia"  := lrResCOM."Nombre Cliente";
          lrBonConc."Fecha Excursion Agencia" := lrResCOM."Fecha Excursion";
          lrBonConc."Hotel Cliente Agencia"   := lrResCOM."Hotel Cliente";
          lrBonConc."Adultos Agencia"         := lrResCOM.Adultos;
          lrBonConc."Ni¤os Agencia"           := lrResCOM.Ni¤os;
          lrBonConc."Importe Agencia"         := lrResCOM."Importe a Facturar";
          lrBonConc."Divisa  Agencia"         := lrResCOM.Divisa;
          lrBonConc.Estado                    := lrBonConc.Estado::"No To";
          lrBonConc.INSERT(TRUE);
        UNTIL lrResCOM.NEXT = 0;
        lrResCOM.MODIFYALL(Conciliada, TRUE);
      END;

      prCabCon."Fecha/Hora ultima comprobacion" := CURRENTDATETIME;
      prCabCon.MODIFY;
    END;

    LOCAL PROCEDURE _GetConversion@1000000004(pwTipoConversion@1000000000 : Integer;pwTouroperador@1000000001 : Code[10];pwCodigo@1000000002 : Code[20]) : Code[20];
    VAR
      lrExcursion@1000000003 : Record 7009710;
      lrHotel@1000000004 : Record 7009724;
      lrConversion@1000000005 : Record 7010271;
    BEGIN
      // _GetConversion

      //. @TipoConversion, 0: Excursion, 1: Hotel

      //. Filtramos sobre la tabla de conversion especial para la API
      lrConversion.RESET;
      lrConversion.SETRANGE("Tipo conversion", pwTipoConversion);
      lrConversion.SETRANGE(Touroperador     , pwTouroperador);
      lrConversion.SETRANGE("Codigo externo" , pwCodigo);

      CASE pwTipoConversion OF
        0:
        BEGIN
          //. Si no lo encontramos en la tabla de conversi¢n vamos a ver si estan utilizando nuestros propios codigos
          IF NOT lrConversion.FINDFIRST THEN
          BEGIN
            IF NOT lrExcursion.GET(pwCodigo) THEN
              ERROR(Text003)
            ELSE
              EXIT(lrExcursion.Codigo);
          END
          ELSE
            EXIT(lrConversion."Codigo Atennea");
        END;
        1:
        BEGIN
          //. Si no lo encontramos en la tabla de conversion, buscaremos en nuestra tabla de hoteles
          IF NOT lrConversion.FINDFIRST THEN
          BEGIN
            IF NOT lrHotel.GET(pwCodigo) THEN
              ERROR(Text004)
            ELSE
              EXIT(lrHotel.Hotel);
          END
          ELSE
            EXIT(lrConversion."Codigo Atennea");
        END;
      END;
    END;

    BEGIN
    {
      $001 AJS 23062015 Modifico la funcion ImportarBonosTO para que busque la hoja Sheet1

      $002 AJS 03072015 Vamos a dejar que se creen periodos de conciliacion que solapen fechas

      $003 AJS 03072015 Vamos a trabajar solo con el concepto Destino, no con Delegacion

      $004 AJS 23072015 El filtro por Destino no ser  obligatorio
    }
    END.
  }
}
