OBJECT Codeunit 99000886 Capable to Promise
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Calculation with date #1######;ESP=C lculo con fecha #1######';
      OrderPromisingSetup@1001 : Record 99000875;
      CompanyInfo@1012 : Record 79;
      OrderPromisingID@1002 : Code[20];
      LastEarlyDate@1003 : Date;
      LastLateDate@1004 : Date;
      OrderPromisingEnd@1005 : Date;
      OrderPromisingStart@1006 : Date;
      GrossRequirement@1007 : Decimal;
      ScheduledReceipt@1008 : Decimal;
      OrderPromisingLineNo@1009 : Integer;
      OrderPromisingLineToSave@1010 : Integer;
      SourceLineNo@1011 : Integer;

    LOCAL PROCEDURE ValidateCapableToPromise@4(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10];NeededDate@1003 : Date;NeededQty@1004 : Decimal;UnitOfMeasure@1005 : Code[10];VAR "Order Promising ID"@1006 : Code[10];PeriodType@1007 : 'Day,Week,Month,Quarter,Year') : Boolean;
    VAR
      ReqLine@1008 : Record 246;
      CumulativeATP@1009 : Decimal;
      ReqQty@1010 : Decimal;
    BEGIN
      CumulativeATP :=
        GetCumulativeATP(ItemNo,VariantCode,LocationCode,NeededDate,UnitOfMeasure,PeriodType);

      IF CumulativeATP < 0 THEN BEGIN
        IF CumulativeATP + NeededQty <= 0 THEN
          ReqQty := NeededQty
        ELSE
          ReqQty := -CumulativeATP;
        CreateReqLine(ItemNo,VariantCode,LocationCode,ReqQty,UnitOfMeasure,NeededDate,1,ReqLine);
        OrderPromisingLineNo := OrderPromisingLineNo + 1;
        IF ReqLine."Starting Date" < OrderPromisingStart THEN
          EXIT(FALSE);
      END;
      EXIT(CheckDerivedDemandCTP(ReqLine,PeriodType));
    END;

    PROCEDURE CalcCapableToPromise@14(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10];NeededDate@1003 : Date;NeededQty@1004 : Decimal;UnitOfMeasure@1005 : Code[10];VAR "Order Promising ID"@1006 : Code[20];"Source Line No."@1007 : Integer;VAR LastValidLine@1008 : Integer;PeriodType@1009 : 'Day,Week,Month,Quarter,Year';PeriodLengthFormula@1010 : DateFormula) : Date;
    VAR
      CalculationStartDate@1011 : Date;
      CapableToPromiseDate@1012 : Date;
      IsValid@1013 : Boolean;
      StopCalculation@1014 : Boolean;
      CalculationDialog@1015 : Dialog;
    BEGIN
      IF NeededQty = 0 THEN
        EXIT(NeededDate);
      RemoveReqLines("Order Promising ID","Source Line No.",LastValidLine,FALSE);
      SetOrderPromisingParameters("Order Promising ID","Source Line No.",PeriodLengthFormula);

      CapableToPromiseDate := 0D;
      CalculationStartDate := NeededDate;
      IF CalculationStartDate = 0D THEN
        CalculationStartDate := OrderPromisingStart;
      OrderPromisingLineToSave := OrderPromisingLineNo;
      IF NOT
         ValidateCapableToPromise(
           ItemNo,VariantCode,LocationCode,CalculationStartDate,
           NeededQty,UnitOfMeasure,"Order Promising ID",PeriodType)
      THEN BEGIN
        StopCalculation := FALSE;
        LastEarlyDate := CalculationStartDate;
        LastLateDate := OrderPromisingEnd;
        CalculationStartDate := OrderPromisingEnd;
        CalculationDialog.OPEN(Text000);
        REPEAT
          CalculationDialog.UPDATE(1,FORMAT(CalculationStartDate));
          RemoveReqLines("Order Promising ID","Source Line No.",OrderPromisingLineToSave,FALSE);
          IsValid := ValidateCapableToPromise(ItemNo,VariantCode,LocationCode,CalculationStartDate,
            NeededQty,UnitOfMeasure, "Order Promising ID",PeriodType);
          IF IsValid THEN BEGIN
            CapableToPromiseDate := CalculationStartDate;
            StopCalculation := GetNextCalcStartDate(CalculationStartDate,0);
          END ELSE
            StopCalculation := GetNextCalcStartDate(CalculationStartDate,1);
        UNTIL StopCalculation;
        IF NOT IsValid AND (CapableToPromiseDate > 0D) THEN BEGIN
          RemoveReqLines("Order Promising ID","Source Line No.",OrderPromisingLineToSave,FALSE);
          ValidateCapableToPromise(ItemNo,VariantCode,LocationCode,CapableToPromiseDate,
            NeededQty,UnitOfMeasure, "Order Promising ID",PeriodType);
        END;
        CalculationDialog.CLOSE;
      END
      ELSE
        CapableToPromiseDate := CalculationStartDate;
      LastValidLine := GetNextOrderPromisingLineNo;
      IF CapableToPromiseDate = 0D THEN
        RemoveReqLines("Order Promising ID","Source Line No.",OrderPromisingLineNo,FALSE);
      EXIT(CapableToPromiseDate);
    END;

    PROCEDURE GetNextCalcStartDate@17(VAR CalculationStartDate@1000 : Date;Direction@1001 : 'Backwards,Forwards') : Boolean;
    VAR
      BestResult@1002 : Boolean;
    BEGIN
      BestResult := FALSE;
      IF Direction = Direction::Backwards THEN BEGIN
        LastLateDate := CalculationStartDate;
        IF LastLateDate - LastEarlyDate > 1 THEN
          CalculationStartDate := CalculationStartDate - ROUND((LastLateDate - LastEarlyDate)/2,1,'>')
        ELSE
          BestResult := TRUE;
      END ELSE BEGIN
        LastEarlyDate := CalculationStartDate;
        IF LastLateDate - LastEarlyDate > 1 THEN
          CalculationStartDate := CalculationStartDate + ROUND((LastLateDate - LastEarlyDate)/2,1,'>')
        ELSE
          BestResult := TRUE;
      END;
      EXIT(BestResult);
    END;

    LOCAL PROCEDURE CreateReqLine@1(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10];Quantity@1003 : Decimal;Unit@1004 : Code[10];DueDate@1005 : Date;Direction@1006 : 'Forward,Backward';VAR ReqLine@1007 : Record 246);
    VAR
      LeadTimeMgt@1008 : Codeunit 5404;
      PlngLnMgt@1009 : Codeunit 99000809;
      GetPlanningParameters@1010 : Codeunit 99000855;
      SKU@1011 : Record 5700;
      SalesLine@1012 : Record 37;
    BEGIN
      ReqLine.INIT;
      ReqLine."Order Promising ID" := OrderPromisingID;
      ReqLine."Order Promising Line ID" := SourceLineNo;
      ReqLine."Order Promising Line No." :=  OrderPromisingLineNo;
      ReqLine."Worksheet Template Name" := OrderPromisingSetup."Order Promising Template";
      ReqLine."Journal Batch Name" := OrderPromisingSetup."Order Promising Worksheet";
      GetNextReqLineNo(ReqLine);
      ReqLine.Type := ReqLine.Type::Item;
      ReqLine."Location Code" := LocationCode;
      ReqLine.VALIDATE("No.",ItemNo);
      ReqLine.VALIDATE("Variant Code",VariantCode);
      ReqLine."Action Message" := ReqLine."Action Message"::New;
      ReqLine."Accept Action Message" := FALSE;
      ReqLine.VALIDATE("Ending Date",
        LeadTimeMgt.PlannedEndingDate(ItemNo,LocationCode,VariantCode,DueDate,ReqLine."Vendor No.",ReqLine."Ref. Order Type"));
      ReqLine."Ending Time" := 235959T;
      ReqLine.VALIDATE(Quantity, Quantity);
      ReqLine.VALIDATE("Unit of Measure Code",Unit);
      IF ReqLine."Starting Date" = 0D THEN
        ReqLine."Starting Date" := WORKDATE;
      ReqLine.INSERT(TRUE);
      PlngLnMgt.Calculate(ReqLine,Direction,TRUE,TRUE,0);
      IF SalesLine.GET(SalesLine."Document Type"::Order,ReqLine."Order Promising ID",ReqLine."Order Promising Line ID") THEN
        IF SalesLine."Drop Shipment" THEN BEGIN
          ReqLine."Sales Order No." := SalesLine."Document No.";
          ReqLine."Sales Order Line No." := SalesLine."Line No.";
          ReqLine."Sell-to Customer No." := SalesLine."Sell-to Customer No.";
          ReqLine."Purchasing Code" := SalesLine."Purchasing Code";
        END;
      ReqLine.MODIFY;
    END;

    PROCEDURE CheckDerivedDemandCTP@5(ReqLine@1001 : Record 246;PeriodType@1000 : 'Day,Week,Month,Quarter,Year') : Boolean;
    BEGIN
      IF ReqLine."Replenishment System" = ReqLine."Replenishment System"::Transfer THEN
        EXIT(CheckTransferShptCTP(ReqLine,PeriodType))
      ELSE
        EXIT(CheckCompsCapableToPromise(ReqLine,PeriodType));
    END;

    LOCAL PROCEDURE CheckCompsCapableToPromise@10(ReqLine@1000 : Record 246;PeriodType@1001 : 'Day,Week,Month,Quarter,Year') : Boolean;
    VAR
      PlanningComponent@1003 : Record 99000829;
      ReqLine2@1004 : Record 246;
      IsValidDate@1005 : Boolean;
    BEGIN
      WITH PlanningComponent DO BEGIN
        SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
        SETRANGE("Worksheet Batch Name",ReqLine."Journal Batch Name");
        SETRANGE("Worksheet Line No.",ReqLine."Line No.");
        IF FINDSET THEN
          REPEAT
            IF ("Supplied-by Line No." = 0) AND Critical THEN BEGIN
              IF NOT
                 ValidateCapableToPromise(
                   "Item No.","Variant Code","Location Code","Due Date",
                   "Expected Quantity","Unit of Measure Code",OrderPromisingID,PeriodType)
              THEN BEGIN
                OrderPromisingLineNo := OrderPromisingLineNo - 1;
                EXIT(FALSE);
              END;
            END ELSE IF "Supplied-by Line No." > 0 THEN
              IF ReqLine2.GET(ReqLine."Worksheet Template Name",ReqLine."Journal Batch Name","Supplied-by Line No.") THEN BEGIN
                IsValidDate := CheckDerivedDemandCTP(ReqLine2,PeriodType);
                IF NOT(IsValidDate) OR (ReqLine2."Starting Date" < OrderPromisingStart) THEN
                  EXIT(FALSE);
              END;
          UNTIL NEXT = 0
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckTransferShptCTP@2(ReqLine@1000 : Record 246;PeriodType@1001 : 'Day,Week,Month,Quarter,Year') : Boolean;
    VAR
      Item@1002 : Record 27;
    BEGIN
      WITH ReqLine DO BEGIN
        TESTFIELD("Replenishment System","Replenishment System"::Transfer);
        Item.GET("No.");
        IF Item.Critical THEN BEGIN
          IF NOT
             ValidateCapableToPromise(
               "No.","Variant Code","Transfer-from Code","Transfer Shipment Date",
               Quantity,"Unit of Measure Code",OrderPromisingID,PeriodType)
          THEN BEGIN
            OrderPromisingLineNo := OrderPromisingLineNo - 1;
            EXIT(FALSE);
          END;
        END;
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetNextReqLineNo@3(VAR ReqLine@1000 : Record 246);
    VAR
      ReqLine2@1001 : Record 246;
    BEGIN
      ReqLine2.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
      ReqLine2.SETRANGE("Journal Batch Name",ReqLine."Journal Batch Name");
      IF ReqLine2.FIND('+') THEN
        ReqLine."Line No." := ReqLine2."Line No." + 10000
      ELSE
        ReqLine."Line No." := 10000;
    END;

    LOCAL PROCEDURE SetOrderPromisingParameters@9(VAR "Order Promising ID"@1000 : Code[10];"Source Line No."@1001 : Integer;PeriodLengthFormula@1002 : DateFormula);
    VAR
      NoSeriesMgt@1003 : Codeunit 396;
    BEGIN
      CompanyInfo.GET;
      OrderPromisingSetup.GET;
      OrderPromisingSetup.TESTFIELD("Order Promising Template");
      OrderPromisingSetup.TESTFIELD("Order Promising Worksheet");
      IF "Order Promising ID" = '' THEN BEGIN
        "Order Promising ID" := NoSeriesMgt.GetNextNo(OrderPromisingSetup."Order Promising Nos.",WORKDATE,TRUE);
        OrderPromisingLineNo := 1;
      END ELSE
        OrderPromisingLineNo := GetNextOrderPromisingLineNo;
      OrderPromisingID := "Order Promising ID";
      SourceLineNo := "Source Line No.";
      OrderPromisingStart := CALCDATE(OrderPromisingSetup."Offset (Time)",WORKDATE);
      OrderPromisingEnd := CALCDATE(PeriodLengthFormula,OrderPromisingStart);
    END;

    PROCEDURE RemoveReqLines@6(OrderPromisingID@1000 : Code[20];SourceLineNo@1001 : Integer;LastGoodLineNo@1002 : Integer;FilterOnNonAccepted@1003 : Boolean);
    VAR
      ReqLine@1004 : Record 246;
    BEGIN
      WITH ReqLine DO BEGIN
        SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
        SETRANGE("Order Promising ID",OrderPromisingID);
        IF SourceLineNo <> 0 THEN
          SETRANGE("Order Promising Line ID",SourceLineNo);
        IF LastGoodLineNo <> 0 THEN
          SETFILTER("Order Promising Line No.",'>=%1',LastGoodLineNo);
        IF FilterOnNonAccepted THEN
          SETRANGE("Accept Action Message",FALSE);
        IF FIND('-') THEN
          REPEAT
            DeleteMultiLevel;
            DELETE(TRUE);
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetCumulativeATP@8(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10];DueDate@1003 : Date;UnitOfMeasureCode@1004 : Code[10];PeriodType@1005 : 'Day,Week,Month,Quarter,Year') : Decimal;
    VAR
      Item@1006 : Record 27;
      ItemUnitOfMeasure@1007 : Record 5404;
      CumulativeATP@1008 : Decimal;
      AvailToPromise@1009 : Codeunit 5790;
    BEGIN
      Item.GET(ItemNo);
      Item.SETRANGE("Variant Filter",VariantCode);
      Item.SETRANGE("Location Filter",LocationCode);
      Item.SETRANGE("Date Filter",0D,DueDate);

      CumulativeATP :=
        AvailToPromise.QtyAvailabletoPromise(
          Item,GrossRequirement,ScheduledReceipt,DueDate,
          PeriodType,CompanyInfo."Check-Avail. Period Calc.");

      IF UnitOfMeasureCode = Item."Base Unit of Measure" THEN
        EXIT(CumulativeATP);

      ItemUnitOfMeasure.GET(ItemNo,UnitOfMeasureCode);
      EXIT(ROUND(CumulativeATP / ItemUnitOfMeasure."Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE GetNextOrderPromisingLineNo@15() : Integer;
    VAR
      ReqLine@1000 : Record 246;
    BEGIN
      ReqLine.SETCURRENTKEY("Order Promising ID");
      ReqLine.SETRANGE("Order Promising ID", OrderPromisingID);
      IF ReqLine.FIND('+') THEN
        EXIT(ReqLine."Order Promising Line No." + 1)
      ELSE
        EXIT(1);
    END;

    BEGIN
    END.
  }
}
