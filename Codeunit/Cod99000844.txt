OBJECT Codeunit 99000844 Job Jnl. Line-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 337=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text002@1001 : TextConst 'ENU=must be filled in when a quantity is reserved.;ESP=se debe rellenar cuando se ha reservado una cantidad';
      Text004@1003 : TextConst 'ENU=must not be changed when a quantity is reserved.;ESP=no se debe modificar cuando se ha reservado una cantidad';
      ReservMgt@1006 : Codeunit 99000845;
      CreateReservEntry@1007 : Codeunit 99000830;
      ReservEngineMgt@1008 : Codeunit 99000831;
      Blocked@1009 : Boolean;
      DeleteItemTracking@1005 : Boolean;

    PROCEDURE FilterReservFor@9(VAR FilterReservEntry@1000 : Record 337;JobJnlLine@1001 : Record 210);
    BEGIN
      FilterReservEntry.SETRANGE("Source Type",DATABASE::"Job Journal Line");
      FilterReservEntry.SETRANGE("Source Subtype",JobJnlLine."Entry Type");
      FilterReservEntry.SETRANGE("Source ID",JobJnlLine."Journal Template Name");
      FilterReservEntry.SETRANGE("Source Batch Name",JobJnlLine."Journal Batch Name");
      FilterReservEntry.SETRANGE("Source Prod. Order Line",0);
      FilterReservEntry.SETRANGE("Source Ref. No.",JobJnlLine."Line No.");
    END;

    PROCEDURE FindReservEntry@1(JobJnlLine@1000 : Record 210;VAR ReservEntry@1001 : Record 337) : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,JobJnlLine);
      EXIT(ReservEntry.FIND('+'));
    END;

    PROCEDURE ReservEntryExist@11(JobJnlLine@1000 : Record 210) : Boolean;
    VAR
      ReservEntry@1001 : Record 337;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,JobJnlLine);
      ReservEntry.SETRANGE("Serial No."); // Ignore Serial No
      ReservEntry.SETRANGE("Lot No."); // Ignore Lot No

      EXIT(NOT ReservEntry.ISEMPTY);
    END;

    PROCEDURE VerifyChange@62(VAR NewJobJnlLine@1000 : Record 210;VAR OldJobJnlLine@1001 : Record 210);
    VAR
      JobJnlLine@1005 : Record 210;
      TempReservEntry@1002 : Record 337;
      ItemTrackManagement@1006 : Codeunit 6500;
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
      SNRequired@1007 : Boolean;
      LNRequired@1008 : Boolean;
      PointerChanged@1009 : Boolean;
    BEGIN
      IF Blocked THEN
        EXIT;
      IF NewJobJnlLine."Line No." = 0 THEN
        IF NOT JobJnlLine.GET(
             NewJobJnlLine."Journal Template Name",
             NewJobJnlLine."Journal Batch Name",
             NewJobJnlLine."Line No.")
        THEN
          EXIT;

      NewJobJnlLine.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewJobJnlLine."Reserved Qty. (Base)" <> 0;
      SNRequired := FALSE;
      LNRequired := FALSE;

      IF NewJobJnlLine."Posting Date" = 0D THEN
        IF NOT ShowError THEN
          HasError := TRUE
        ELSE
          NewJobJnlLine.FIELDERROR("Posting Date",Text002);

      IF NewJobJnlLine."Job No." <> OldJobJnlLine."Job No." THEN
        IF NOT ShowError THEN
          HasError := TRUE
        ELSE
          NewJobJnlLine.FIELDERROR("Job No.",Text004);

      IF NewJobJnlLine."Entry Type" <> OldJobJnlLine."Entry Type" THEN
        IF NOT ShowError THEN
          HasError := TRUE
        ELSE
          NewJobJnlLine.FIELDERROR("Entry Type",Text004);

      IF NewJobJnlLine."Location Code" <> OldJobJnlLine."Location Code" THEN
        IF NOT ShowError THEN
          HasError := TRUE
        ELSE
          NewJobJnlLine.FIELDERROR("Location Code",Text004);

      IF NewJobJnlLine."Bin Code" <> OldJobJnlLine."Bin Code" THEN BEGIN
        ItemTrackManagement.CheckWhseItemTrkgSetup(NewJobJnlLine."No.",SNRequired,LNRequired,FALSE);
        IF SNRequired OR LNRequired THEN
          IF NOT ShowError THEN
            HasError := TRUE
          ELSE
            NewJobJnlLine.FIELDERROR("Bin Code",Text004);
      END;

      IF NewJobJnlLine."Variant Code" <> OldJobJnlLine."Variant Code" THEN
        IF NOT ShowError THEN
          HasError := TRUE
        ELSE
          NewJobJnlLine.FIELDERROR("Variant Code",Text004);

      IF NewJobJnlLine."Line No." <> OldJobJnlLine."Line No." THEN
        HasError := TRUE;

      IF NewJobJnlLine."No." <> OldJobJnlLine."No." THEN
        HasError := TRUE;

      IF HasError THEN BEGIN
        FindReservEntry(NewJobJnlLine,TempReservEntry);
        TempReservEntry.SETRANGE("Serial No.");
        TempReservEntry.SETRANGE("Lot No.");

        PointerChanged := (NewJobJnlLine."Job No." <> OldJobJnlLine."Job No.") OR
          (NewJobJnlLine."Entry Type" <> OldJobJnlLine."Entry Type") OR
          (NewJobJnlLine."No." <> OldJobJnlLine."No.");

        IF PointerChanged OR
           (NOT TempReservEntry.ISEMPTY)
        THEN BEGIN
          IF PointerChanged THEN BEGIN
            ReservMgt.SetJobJnlLine(OldJobJnlLine);
            ReservMgt.DeleteReservEntries(TRUE,0);
            ReservMgt.SetJobJnlLine(NewJobJnlLine);
          END ELSE BEGIN
            ReservMgt.SetJobJnlLine(NewJobJnlLine);
            ReservMgt.DeleteReservEntries(TRUE,0);
          END;
          ReservMgt.AutoTrack(NewJobJnlLine."Quantity (Base)");
        END;
      END;
    END;

    PROCEDURE VerifyQuantity@3(VAR NewJobJnlLine@1001 : Record 210;VAR OldJobJnlLine@1000 : Record 210);
    VAR
      JobJnlLine@1002 : Record 210;
    BEGIN
      IF Blocked THEN
        EXIT;

      WITH NewJobJnlLine DO BEGIN
        IF "Line No." = OldJobJnlLine."Line No." THEN
          IF "Quantity (Base)" = OldJobJnlLine."Quantity (Base)" THEN
            EXIT;
        IF "Line No." = 0 THEN
          IF NOT JobJnlLine.GET("Journal Template Name","Journal Batch Name","Line No.") THEN
            EXIT;
        ReservMgt.SetJobJnlLine(NewJobJnlLine);
        IF "Qty. per Unit of Measure" <> OldJobJnlLine."Qty. per Unit of Measure" THEN
          ReservMgt.ModifyUnitOfMeasure;
        IF "Quantity (Base)" * OldJobJnlLine."Quantity (Base)" < 0 THEN
          ReservMgt.DeleteReservEntries(TRUE,0)
        ELSE
          ReservMgt.DeleteReservEntries(FALSE,"Quantity (Base)");
      END;
    END;

    PROCEDURE RenameLine@10(VAR NewJobJnlLine@1000 : Record 210;VAR OldJobJnlLine@1001 : Record 210);
    BEGIN
      ReservEngineMgt.RenamePointer(DATABASE::"Job Journal Line",
        OldJobJnlLine."Entry Type",
        OldJobJnlLine."Journal Template Name",
        OldJobJnlLine."Journal Batch Name",
        0,
        OldJobJnlLine."Line No.",
        NewJobJnlLine."Entry Type",
        NewJobJnlLine."Journal Template Name",
        NewJobJnlLine."Journal Batch Name",
        0,
        NewJobJnlLine."Line No.");
    END;

    PROCEDURE DeleteLineConfirm@20(VAR JobJnlLine@1000 : Record 210) : Boolean;
    BEGIN
      WITH JobJnlLine DO BEGIN
        IF NOT ReservEntryExist(JobJnlLine) THEN
          EXIT(TRUE);

        ReservMgt.SetJobJnlLine(JobJnlLine);
        IF ReservMgt.DeleteItemTrackingConfirm THEN
          DeleteItemTracking := TRUE;
      END;

      EXIT(DeleteItemTracking);
    END;

    PROCEDURE DeleteLine@2(VAR JobJnlLine@1000 : Record 210);
    BEGIN
      IF Blocked THEN
        EXIT;

      WITH JobJnlLine DO
        IF Type = Type::Item THEN BEGIN
          ReservMgt.SetJobJnlLine(JobJnlLine);
          IF DeleteItemTracking THEN
            ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
          ReservMgt.DeleteReservEntries(TRUE,0);
        END;
    END;

    PROCEDURE AssignForPlanning@5(VAR JobJnlLine@1000 : Record 210);
    VAR
      PlanningAssignment@1001 : Record 99000850;
    BEGIN
      IF JobJnlLine."No." <> '' THEN
        WITH JobJnlLine DO
          PlanningAssignment.ChkAssignOne("No.","Variant Code","Location Code","Posting Date");
    END;

    PROCEDURE Block@6(SetBlocked@1000 : Boolean);
    BEGIN
      Blocked := SetBlocked;
    END;

    PROCEDURE CallItemTracking@14(VAR JobJnlLine@1000 : Record 210;IsReclass@1003 : Boolean);
    VAR
      TrackingSpecification@1001 : Record 336;
      ItemTrackingForm@1002 : Form 6510;
    BEGIN
      InitTrackingSpecification(JobJnlLine,TrackingSpecification);
      IF IsReclass THEN
        ItemTrackingForm.SetFormRunMode(1);
      ItemTrackingForm.SetSource(TrackingSpecification,JobJnlLine."Posting Date");
      ItemTrackingForm.RUNMODAL;
    END;

    PROCEDURE InitTrackingSpecification@13(VAR JobJnlLine@1000 : Record 210;VAR TrackingSpecification@1003 : Record 336);
    BEGIN
      TrackingSpecification.INIT;
      TrackingSpecification."Source Type" := DATABASE::"Job Journal Line";
      WITH JobJnlLine DO BEGIN
        TrackingSpecification."Item No." := "No.";
        TrackingSpecification."Location Code" := "Location Code";
        TrackingSpecification.Description := Description;
        TrackingSpecification."Variant Code" := "Variant Code";
        TrackingSpecification."Source Subtype" := "Entry Type";
        TrackingSpecification."Source ID" := "Journal Template Name";
        TrackingSpecification."Source Batch Name" := "Journal Batch Name";
        TrackingSpecification."Source Prod. Order Line" := 0;
        TrackingSpecification."Source Ref. No." := "Line No.";
        TrackingSpecification."Quantity (Base)" := "Quantity (Base)";
        TrackingSpecification."Qty. to Handle" := Quantity;
        TrackingSpecification."Qty. to Handle (Base)" := "Quantity (Base)";
        TrackingSpecification."Qty. to Invoice" := Quantity;
        TrackingSpecification."Qty. to Invoice (Base)" := "Quantity (Base)";
        TrackingSpecification."Quantity Handled (Base)" := 0;
        TrackingSpecification."Quantity Invoiced (Base)" := 0;
        TrackingSpecification."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        TrackingSpecification."Bin Code" := "Bin Code";
      END;
    END;

    PROCEDURE TransJobJnlLineToItemJnlLine@35(VAR JobJnlLine@1000 : Record 210;VAR ItemJnlLine@1001 : Record 83;TransferQty@1002 : Decimal) : Decimal;
    VAR
      OldReservEntry@1003 : Record 337;
    BEGIN
      IF NOT FindReservEntry(JobJnlLine,OldReservEntry) THEN
        EXIT(TransferQty);
      OldReservEntry.Lock;
      // Handle Item Tracking on drop shipment:
      CLEAR(CreateReservEntry);

      ItemJnlLine.TESTFIELD("Item No.",JobJnlLine."No.");
      ItemJnlLine.TESTFIELD("Variant Code",JobJnlLine."Variant Code");
      ItemJnlLine.TESTFIELD("Location Code",JobJnlLine."Location Code");

      IF TransferQty = 0 THEN
        EXIT;

      IF ReservEngineMgt.InitRecordSet(OldReservEntry) THEN
        REPEAT
          OldReservEntry.TESTFIELD("Item No.",JobJnlLine."No.");
          OldReservEntry.TESTFIELD("Variant Code",JobJnlLine."Variant Code");
          OldReservEntry.TESTFIELD("Location Code",JobJnlLine."Location Code");


          TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Item Journal Line",
              ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",
              ItemJnlLine."Journal Batch Name",0,ItemJnlLine."Line No.",
              ItemJnlLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

        UNTIL (ReservEngineMgt.NEXTRecord(OldReservEntry) = 0) OR (TransferQty = 0);

      EXIT(TransferQty);
    END;

    BEGIN
    END.
  }
}
