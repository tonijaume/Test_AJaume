OBJECT Codeunit 7009712 Calculo ofertas precio
{
  OBJECT-PROPERTIES
  {
    Date=25/06/14;
    Time=16:07:13;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1103355049 : TextConst 'ENU=OFFER;ESP=OFERTA';
      Text002@1103355050 : TextConst 'ENU=Room;ESP=Habitacion';
      Text003@1103355051 : TextConst 'ENU=REG HABITA;ESP=REG HABITA';
      Text004@1103355052 : TextConst 'ENU=Board;ESP=Regimen';
      Text005@1103355053 : TextConst 'ENU=REG REGIME;ESP=REG REGIME';
      Text006@1103355054 : TextConst 'ENU=Supplement;ESP=Suplemento';
      Text007@1103355055 : TextConst 'ENU=REG SUPLEM;ESP=REG SUPLEM';
      Text008@1103355056 : TextConst 'ENU=EXTRAFIJOS|EXTRAVARIA;ESP=EXTRAFIJOS|EXTRAVARIA';
      Text009@1103355057 : TextConst 'ENU=REG EXTRA;ESP=REG EXTRA';
      Text010@1103355058 : TextConst 'ENU=XXXXXXXXXX;ESP=XXXXXXXXXX';
      Text011@1103355059 : TextConst 'ENU=OFERTAV;ESP=OFERTAV';
      Text012@1103355060 : TextConst 'ENU=HABITACIOV;ESP=HABITACIOV';
      Text013@1103355061 : TextConst 'ENU=REG HABITV;ESP=REG HABITV';
      Text014@1103355062 : TextConst 'ENU=REGIMENV;ESP=REGIMENV';
      Text015@1103355063 : TextConst 'ENU=REG REGIMV;ESP=REG REGIMV';
      Text016@1103355064 : TextConst 'ENU=SUPLEMENTV;ESP=SUPLEMENTV';
      Text017@1103355065 : TextConst 'ENU=REG SUPLEV;ESP=REG SUPLEV';
      cCalRes@1103355000 : Codeunit 7009707;
      rConC@1103355001 : Record 7009723;
      rConV@1103355002 : Record 7009723;
      rLin@1103355003 : Record 7009736;
      rPer@1103355004 : Record 7009740;
      rRsv@1103355005 : Record 7009743;
      rRsvDia@1103355006 : Record 7009755;
      rRsvDiaV@1103355007 : Record 7009756;
      rPreC@1103355008 : Record 7009738;
      rPreV@1103355009 : Record 7009732;
      rParPer@1103355010 : Record 7009701;
      w_habitacion@1103355012 : Code[10];
      w_contratos@1103355013 : ARRAY [5] OF Code[10];
      w_dias@1103355014 : ARRAY [5] OF Integer;
      w_indice@1103355015 : Integer;
      w_encontrado@1103355016 : Boolean;
      w_aplicada@1103355017 : Boolean;
      w_excluyente@1103355018 : Boolean;
      w_cantidad@1103355019 : Integer;
      w_precio@1103355020 : Decimal;
      w_habitacion_oferta@1103355021 : Decimal;
      w_regimen_oferta@1103355022 : Decimal;
      w_suplemento_oferta@1103355023 : Decimal;
      w_extra_oferta@1103355024 : Decimal;
      w_oferta_oferta@1103355025 : Decimal;
      w_dia_habitacion@1103355026 : Decimal;
      w_dia_regimen@1103355027 : Decimal;
      w_dia_suplemento@1103355028 : Decimal;
      w_dia_extra@1103355029 : Decimal;
      w_dia_oferta@1103355030 : Decimal;
      w_suma_habitacion@1103355031 : Decimal;
      w_suma_regimen@1103355032 : Decimal;
      w_suma_suplemento@1103355033 : Decimal;
      w_suma_extra@1103355034 : Decimal;
      w_suma_oferta@1103355035 : Decimal;
      w_total_habitacion@1103355036 : Decimal;
      w_total_regimen@1103355037 : Decimal;
      w_total_suplemento@1103355038 : Decimal;
      w_total_extra@1103355039 : Decimal;
      w_total_oferta@1103355040 : Decimal;
      w_dia@1103355041 : Date;
      w_salir_bucle@1103355045 : Boolean;

    PROCEDURE calculo_ofertas_precio@1(reserva@1103355000 : Record 7009743;excluyente@1103355001 : Boolean);
    VAR
      wNumDiaAplicado@1103355003 : Integer;
      w_ocupantes@1103355004 : Integer;
    BEGIN
      rParPer.FINDFIRST;

      w_habitacion := reserva.Habitacion;
      CLEAR(w_contratos);
      CLEAR(w_dias);

      w_excluyente := excluyente;

      buscar_contratos(reserva);

      rRsv.SETCURRENTKEY(Delegacion,
                         "N§ Responsable",
                         "N§ Reserva");
      rRsv.SETRANGE(Delegacion      , reserva.Delegacion);
      rRsv.SETRANGE("N§ Responsable", reserva."N§ Reserva");
      IF rRsv.FIND('-') THEN BEGIN
        REPEAT
          w_aplicada := FALSE;
          w_indice := 1;
          WHILE w_contratos[w_indice] <> '' DO BEGIN
            rPreC.RESET;
            rPreC.SETCURRENTKEY(Delegacion,
                                "N§ Contrato",
                                "Codigo Precio");
            rPreC.ASCENDING(FALSE);
            rPreC.SETRANGE(Delegacion        , reserva.Delegacion);
            rPreC.SETRANGE("N§ Contrato"     , w_contratos[w_indice]);
            rPreC.SETRANGE("Codigo Precio"   , rPreC."Codigo Precio"::Ofertas);
            rPreC.SETRANGE(Activo            , TRUE);

            // AJS 07.10.2008
            // El rendimiento del calculo sera mejor si filtramos por excluyente

            rPreC.SETRANGE("Oferta excluyente", excluyente);

            IF rPreC.FIND('-') THEN BEGIN
              REPEAT
                rLin.INIT;
                //-$001w_ocupantes := buscar_ocupantes_oferta(reserva, rPreC);

                IF comprobar_aplicacion_oferta(rRsv, rPreC, w_excluyente, w_habitacion, w_ocupantes) THEN
                BEGIN
                  // Marcamos la reserva si la oferta es excluyente
                  IF w_excluyente THEN BEGIN
                    w_aplicada := TRUE;
                    IF rPer.GET(USERID(), rRsv.Delegacion, rRsv."N§ Reserva") THEN BEGIN
                      rPer."Oferta excluyente" := TRUE;
                      rPer."Codigo Oferta"     := rPreC.Codigo;
                      rPer."Subtipo Oferta"    := rPreC."Subtipo Oferta";
                      rPer.MODIFY;
                    END;
                  END;

                  // Continuamos el tratamiento normal de la oferta

                  IF rPreC.Porcentaje THEN BEGIN
                    _BuscaBasePorcentajeReserva(rRsv, FALSE, rRsv."Fecha entrada");

                    w_cantidad := 1;
                    w_precio := ROUND(((w_dia_habitacion + w_dia_regimen + w_dia_suplemento + w_dia_extra +
                                        w_dia_oferta) * rPreC.Importe) / 100, 0.01);
                    w_habitacion_oferta := ROUND((w_dia_habitacion * rPreC.Importe) / 100, 0.01);
                    w_regimen_oferta    := ROUND((w_dia_regimen * rPreC.Importe) / 100, 0.01);
                    w_suplemento_oferta := ROUND((w_dia_suplemento * rPreC.Importe) / 100, 0.01);
                    w_extra_oferta      := ROUND((w_dia_extra * rPreC.Importe) / 100, 0.01);
                    w_oferta_oferta     := ROUND((w_dia_oferta * rPreC.Importe) / 100, 0.01);
                  END
                  ELSE BEGIN
                    w_cantidad := 1;
                    w_precio := ROUND(rPreC.Importe);

                    w_habitacion_oferta := 0;
                    w_regimen_oferta    := 0;
                    w_suplemento_oferta := 0;
                    w_extra_oferta      := 0;
                    w_oferta_oferta     := 0;
                  END;

                  IF _comprobar_grabacion(rRsv, rRsv."Fecha entrada", 1) THEN
                  BEGIN
                    // JPT 18/09/08 DRF GOC 08002
                    InsertaOfertaaPersona(rRsv, rPreC);

                    cCalRes.inserta_linea_calculo(rLin, USERID(), Text001, w_contratos[w_indice],
                                                  (w_cantidad * ROUND(w_precio)), rRsv."N§ Reserva" ,
                                                  rRsv."Fecha entrada", rPreC.Codigo, w_cantidad,
                                                  ROUND(w_precio), rPreC.Garantizable, rPreC."Importe HP");
                    rLin."Habitacion en oferta" := w_habitacion_oferta;
                    rLin."Regimen en oferta" := w_regimen_oferta;
                    rLin."Suplementos en oferta" := w_suplemento_oferta;
                    rLin."Extras en oferta"  := w_extra_oferta;
                    rLin."Ofertas en oferta" := w_oferta_oferta;

                    // AJS 30.08.2005
                    // Marcar las lineas de calculo segun el tipo de oferta que se este calculando

                    IF (rPreC."Tipo Fechas" = rPreC."Tipo Fechas"::"Fecha venta+estancia") OR
                       (rPreC."Tipo Fechas" = rPreC."Tipo Fechas"::"Fecha venta+entrada") THEN
                      rLin."Tipo de oferta" := rLin."Tipo de oferta"::EBB
                    ELSE BEGIN
                      IF rPreC."Hotel oferta especial" <> '' THEN
                        rLin."Tipo de oferta" := rLin."Tipo de oferta"::SPO
                      ELSE
                        rLin."Tipo de oferta" := rLin."Tipo de oferta"::"No SPO/EBB"
                    END;

                    cCalRes.fijos_linea_calculo(rLin, rLin."Coste/Ingreso"::Coste, reserva.Bono,
                                                reserva."N§ Responsable", reserva."Hotel reservado",
                                                rConC."Tipo de Contrato", reserva."Hotel Factura", reserva.Delegacion,
                                                rPreC."Validacion HP especial");

                    IF (NOT rPreC."Acumular al total") OR (rPreC."Noches gratis" <> 0) THEN
                    BEGIN
                      rRsvDia.RESET;
                      rRsvDia.SETRANGE(Delegacion  , reserva.Delegacion);
                      rRsvDia.SETRANGE("N§ Reserva", reserva."N§ Reserva");
                      rRsvDia.SETRANGE(Dia         , rRsv."Fecha entrada");
                      IF rRsvDia.FIND('-') THEN
                        cCalRes.borrar_otros_precios_coste(rPreC, rRsv, rRsvDia, rRsvDia.Dia);
                      rRsvDia.RESET;
                    END;
                  END;

                  // Repetimos las lineas diarias en los casos de frecuencia diaria

                  IF rPreC.Frecuencia = 1 THEN BEGIN
                    wNumDiaAplicado := 1;
                    FOR w_dia := (rRsv."Fecha entrada" + 1) TO (rRsv."Fin estancia" - 1) DO BEGIN
                      wNumDiaAplicado += 1;

                      IF _comprobar_grabacion(rRsv, w_dia, wNumDiaAplicado) THEN
                      BEGIN
                        // JPT 18/09/08 DRF GOC 08002
                        InsertaOfertaaPersona(rRsv, rPreC);

                        IF rPreC.Porcentaje THEN BEGIN
                          _BuscaBasePorcentajeReserva(rRsv, TRUE, w_dia);

                          w_cantidad := 1;
                          w_precio := ROUND(((w_dia_habitacion + w_dia_regimen + w_dia_suplemento + w_dia_extra +
                                      w_dia_oferta) * rPreC.Importe) / 100, 0.01);
                          w_habitacion_oferta := ROUND((w_dia_habitacion * rPreC.Importe) / 100, 0.01);
                          w_regimen_oferta    := ROUND((w_dia_regimen * rPreC.Importe) / 100, 0.01);
                          w_suplemento_oferta := ROUND((w_dia_suplemento * rPreC.Importe) / 100, 0.01);
                          w_extra_oferta      := ROUND((w_dia_extra * rPreC.Importe) / 100, 0.01);
                          w_oferta_oferta     := ROUND((w_dia_oferta * rPreC.Importe) / 100, 0.01);
                        END
                        ELSE BEGIN
                          w_cantidad          := 1;
                          w_precio            := ROUND(rPreC.Importe);
                          w_habitacion_oferta := 0;
                          w_regimen_oferta    := 0;
                          w_suplemento_oferta := 0;
                          w_extra_oferta      := 0;
                          w_oferta_oferta     := 0;
                        END;

                        cCalRes.inserta_linea_calculo(rLin, USERID(), Text001, w_contratos[w_indice],
                                                      (w_cantidad * ROUND(w_precio)), rRsv."N§ Reserva" ,
                                                      w_dia, rPreC.Codigo, w_cantidad, ROUND(w_precio),
                                                      rPreC.Garantizable, rPreC."Importe HP");
                        rLin."Habitacion en oferta"  := w_habitacion_oferta;
                        rLin."Regimen en oferta"     := w_regimen_oferta;
                        rLin."Suplementos en oferta" := w_suplemento_oferta;
                        rLin."Extras en oferta"      := w_extra_oferta;
                        rLin."Ofertas en oferta"     := w_oferta_oferta;


                        cCalRes.fijos_linea_calculo(rLin, rLin."Coste/Ingreso"::Coste, reserva.Bono,
                                                    reserva."N§ Responsable", reserva."Hotel reservado",
                                                    rConC."Tipo de Contrato", reserva."Hotel Factura", reserva.Delegacion,
                                                    rPreC."Validacion HP especial");

                        IF (NOT rPreC."Acumular al total") OR (rPreC."Noches gratis" <> 0) THEN
                        BEGIN
                          rRsvDia.RESET;
                          rRsvDia.SETRANGE(Delegacion  , reserva.Delegacion);
                          rRsvDia.SETRANGE("N§ Reserva", reserva."N§ Reserva");
                          rRsvDia.SETRANGE(Dia         , reserva."Fecha entrada");
                          IF rRsvDia.FIND('-') THEN
                            cCalRes.borrar_otros_precios_coste(rPreC, rRsv, rRsvDia, w_dia);
                          rRsvDia.RESET;
                        END;
                      END;
                    END;
                  END;
                END;

              // JPT 07/10/05 Modificamos el repeat para permitir aplicar m s de una oferta excluyente (si tiene el mismo nombre)
              // UNTIL (rPreC.NEXT = 0) OR (w_aplicada);

             UNTIL rPreC.NEXT = 0;
            END;
            rPreC.RESET;
            w_indice := w_indice + 1;
          END;
        UNTIL rRsv.NEXT = 0;
      END;
    END;

    PROCEDURE buscar_contratos@2(reserva@1103355000 : Record 7009743);
    BEGIN
      // buscar_contratos
      //
      rRsvDia.RESET;
      rRsvDia.SETRANGE(Delegacion  , reserva.Delegacion);
      rRsvDia.SETRANGE("N§ Reserva", reserva."N§ Reserva");
      IF rRsvDia.FIND('-') THEN BEGIN
        REPEAT
          busca_contrato_dia(rRsvDia);
        UNTIL rRsvDia.NEXT = 0;
      END;
    END;

    PROCEDURE busca_contrato_dia@3(rRsvDia@1103355000 : Record 7009755);
    BEGIN
      // busca_contrato_dia
      //
      w_indice := 1;
      w_encontrado := FALSE;
      WHILE NOT w_encontrado DO BEGIN
        IF w_contratos[w_indice] = '' THEN BEGIN
          w_contratos[w_indice] := rRsvDia."Contrato compra";
          w_dias[w_indice] := 1;
          w_encontrado := TRUE;
        END
        ELSE BEGIN
          IF w_contratos[w_indice] = rRsvDia."Contrato compra" THEN BEGIN
            w_encontrado := TRUE;
            w_dias[w_indice] := w_dias[w_indice] + 1;
          END
          ELSE
            w_indice := w_indice + 1;
        END;
      END;
    END;

    PROCEDURE comprobar_aplicacion_oferta@4(reserva@1103355000 : Record 7009743;prPreC@1103355002 : Record 7009738;pw_excluyente@1103355001 : Boolean;pwHabitacion@1103355003 : Code[10];pwOcupantes@1103355004 : Decimal) : Boolean;
    VAR
      w_dias_estancia@1103355005 : Integer;
      w_edad_hasta@1103355006 : Integer;
      w_numero_persona_edad@1103355007 : Integer;
      lwOk@1103355008 : Boolean;
    BEGIN
      // comprobar_aplicacion_oferta

      // Comprobamos si es una oferta excluyente en el bucle de no excluyentes

      IF (prPreC."Oferta excluyente") AND (NOT pw_excluyente) THEN
        EXIT(FALSE);

      // Comprobamos si se trata de una oferta no excluyente en el bucle de excluyentes

      IF (NOT prPreC."Oferta excluyente") AND (pw_excluyente) THEN
        EXIT(FALSE);

      // JPT 18/09/08 Consideramos el nuevo campo rRsv."Aplica oferta tipo" DRF GOC08002
      CASE rRsv."Aplica oferta tipo" OF
        rRsv."Aplica oferta tipo"::Todas        : lwOk := TRUE;
        rRsv."Aplica oferta tipo"::EBB          : lwOk := prPreC."Subtipo Oferta" = prPreC."Subtipo Oferta"::EBB;
        rRsv."Aplica oferta tipo"::SPO          : lwOk := prPreC."Subtipo Oferta" = prPreC."Subtipo Oferta"::SPO;
        rRsv."Aplica oferta tipo"::Llegada      : lwOk := prPreC."Subtipo Oferta" = prPreC."Subtipo Oferta"::Llegada;
        rRsv."Aplica oferta tipo"::"Free Night" : lwOk := prPreC."Subtipo Oferta" = prPreC."Subtipo Oferta"::"Free Night";
        rRsv."Aplica oferta tipo"::"DA=DZ"      : lwOk := prPreC."Subtipo Oferta" = prPreC."Subtipo Oferta"::"DA=DZ";
        rRsv."Aplica oferta tipo"::Ninguna      : lwOk := FALSE;
      END;

      IF NOT lwOk THEN
        EXIT(FALSE);

      // Comprobamos si se ha aplicado una oferta excluyente sobre esta reserva

      IF rPer.GET(USERID, reserva.Delegacion, reserva."N§ Reserva") THEN BEGIN
        // JPT 06/10/05 No consideramos excluyente si tienen el mismo codigo
        // AJF 10/12/08
        // Comprobamos la aplicacion de la oferta mediante el subtipo en lugar de por el codigo
        // a partir de ahora

        IF rPer."Oferta excluyente" AND (prPreC."Subtipo Oferta" <> rPer."Subtipo Oferta") THEN
        // IF rPer."Oferta excluyente" AND (prPreC.Codigo <> rPer."Codigo Oferta") THEN
          EXIT(FALSE);
      END;

      // AJS 24.10.2003
      // Comprobacion por hotel oferta especial

      IF (prPreC."Hotel oferta especial" <> '') AND (prPreC."Hotel oferta especial" <> reserva."Hotel TO") THEN
        EXIT(FALSE);

      // AJS 25.04.2005
      // Comprobacion por touroperador aplicacion

      IF (prPreC."Touroperador aplicacion" <> '') AND (prPreC."Touroperador aplicacion" <> reserva."TourOperador Venta") THEN
        EXIT(FALSE);

      // AJS 26.09.2006

      IF NOT comprobar_oferta_compatible(reserva, prPreC) THEN
        EXIT(FALSE);

      // Comprobacion por tipo de fechas

      IF prPreC."Tipo Fechas" = prPreC."Tipo Fechas"::"Fecha venta" THEN BEGIN
        IF (reserva."Fecha venta" < prPreC."Fecha desde") OR
           (reserva."Fecha venta" > prPreC."Fecha hasta") THEN
          EXIT(FALSE);

        // AJS 29.09.2005
        // Las reservas pueden limitar que tipo de ofertas se puede aplicar sobre ellas, si tienen marca de SPO no
        // se pueden aplicar ofertas por fecha de venta y si tiene marcar de EBB no se pueden aplicar ofertas que no
        // sean por fecha de venta
        { JPT 19/09/08 Anulado por DRF GOC08002
        IF reserva."Aplica oferta tipo" = reserva."Aplica oferta tipo"::SPO THEN
          EXIT(FALSE);
        }
      END;

      IF prPreC."Tipo Fechas" = prPreC."Tipo Fechas"::"Fecha entrada" THEN BEGIN
        IF (reserva."Fecha entrada" < prPreC."Fecha desde") OR
           (reserva."Fecha entrada" > prPreC."Fecha hasta") THEN
          EXIT(FALSE);

        // AJS 29.09.2005
        // Las reservas pueden limitar que tipo de ofertas se puede aplicar sobre ellas, si tienen marca de SPO no
        // se pueden aplicar ofertas por fecha de venta y si tiene marcar de EBB no se pueden aplicar ofertas que no
        // sean por fecha de venta
        { JPT 19/09/08 Anulado por DRF GOC08002
        IF reserva."Aplica oferta tipo" = reserva."Aplica oferta tipo"::EBB THEN
          EXIT(FALSE);
        }
      END;

      IF prPreC."Tipo Fechas" = prPreC."Tipo Fechas"::"Fecha estancia" THEN BEGIN
        IF ((reserva."Fin estancia" - 1) < prPreC."Fecha desde") OR
           (reserva."Fecha entrada" > prPreC."Fecha hasta") THEN
          EXIT(FALSE);

        // AJS 29.09.2005
        // Las reservas pueden limitar que tipo de ofertas se puede aplicar sobre ellas, si tienen marca de SPO no
        // se pueden aplicar ofertas por fecha de venta y si tiene marcar de EBB no se pueden aplicar ofertas que no
        // sean por fecha de venta
        { JPT 19/09/08 Anulado por DRF GOC08002
        IF reserva."Aplica oferta tipo" = reserva."Aplica oferta tipo"::EBB THEN
          EXIT(FALSE);
        }
      END;

      IF prPreC."Tipo Fechas" = prPreC."Tipo Fechas"::"Fecha venta+entrada" THEN BEGIN
        IF (reserva."Fecha venta" < prPreC."Fecha desde") OR
           (reserva."Fecha venta" > prPreC."Fecha hasta") THEN
          EXIT(FALSE);

        IF (reserva."Fecha entrada" < prPreC."2¦ Fecha desde") OR
           (reserva."Fecha entrada" > prPreC."2¦ Fecha hasta") THEN
          EXIT(FALSE);

        // AJS 29.09.2005
        // Las reservas pueden limitar que tipo de ofertas se puede aplicar sobre ellas, si tienen marca de SPO no
        // se pueden aplicar ofertas por fecha de venta y si tiene marcar de EBB no se pueden aplicar ofertas que no
        // sean por fecha de venta
        { JPT 19/09/08 Anulado por DRF GOC08002
        IF reserva."Aplica oferta tipo" = reserva."Aplica oferta tipo"::SPO THEN
          EXIT(FALSE);
        }
      END;

      IF prPreC."Tipo Fechas" = prPreC."Tipo Fechas"::"Fecha venta+estancia" THEN BEGIN
        IF (reserva."Fecha venta" < prPreC."Fecha desde") OR
           (reserva."Fecha venta" > prPreC."Fecha hasta") THEN
          EXIT(FALSE);

        IF (reserva."Fecha entrada"      > prPreC."2¦ Fecha hasta") OR
           ((reserva."Fin estancia" - 1) < prPreC."2¦ Fecha desde") THEN
          EXIT(FALSE);

        // AJS 29.09.2005
        // Las reservas pueden limitar que tipo de ofertas se puede aplicar sobre ellas, si tienen marca de SPO no
        // se pueden aplicar ofertas por fecha de venta y si tiene marcar de EBB no se pueden aplicar ofertas que no
        // sean por fecha de venta
        { JPT 19/09/08 Anulado por DRF GOC08002
        IF reserva."Aplica oferta tipo" = reserva."Aplica oferta tipo"::SPO THEN
          EXIT(FALSE);
        }
      END;

      IF prPreC."Tipo Fechas" = prPreC."Tipo Fechas"::"Fecha salida" THEN BEGIN
        IF (reserva."Fin estancia" < prPreC."Fecha desde") OR
           (reserva."Fin estancia" > prPreC."Fecha hasta") THEN
          EXIT(FALSE);

        // AJS 29.09.2005
        // Las reservas pueden limitar que tipo de ofertas se puede aplicar sobre ellas, si tienen marca de SPO no
        // se pueden aplicar ofertas por fecha de venta y si tiene marcar de EBB no se pueden aplicar ofertas que no
        // sean por fecha de venta
        { JPT 19/09/08 Anulado por DRF GOC08002
        IF reserva."Aplica oferta tipo" = reserva."Aplica oferta tipo"::EBB THEN
          EXIT(FALSE);
        }
      END;

      IF prPreC."Tipo Fechas" = prPreC."Tipo Fechas"::"Fecha venta+salida" THEN BEGIN
        IF (reserva."Fecha venta" < prPreC."Fecha desde") OR
           (reserva."Fecha venta" > prPreC."Fecha hasta") THEN
          EXIT(FALSE);

        IF (reserva."Fin estancia" < prPreC."2¦ Fecha desde") OR
           (reserva."Fin estancia" > prPreC."2¦ Fecha hasta") THEN
          EXIT(FALSE);

        // AJS 29.09.2005
        // Las reservas pueden limitar que tipo de ofertas se puede aplicar sobre ellas, si tienen marca de SPO no
        // se pueden aplicar ofertas por fecha de venta y si tiene marcar de EBB no se pueden aplicar ofertas que no
        // sean por fecha de venta
        { JPT 19/09/08 Anulado por DRF GOC08002
        IF reserva."Aplica oferta tipo" = reserva."Aplica oferta tipo"::SPO THEN
          EXIT(FALSE);
        }
      END;

      IF prPreC."Tipo Fechas" = prPreC."Tipo Fechas"::"Fecha entrada+salida" THEN BEGIN
        IF (reserva."Fecha entrada" < prPreC."Fecha desde") OR
           (reserva."Fecha entrada" > prPreC."Fecha hasta") THEN
          EXIT(FALSE);

        IF (reserva."Fin estancia" < prPreC."2¦ Fecha desde") OR
           (reserva."Fin estancia" > prPreC."2¦ Fecha hasta") THEN
          EXIT(FALSE);

        // AJS 29.09.2005
        // Las reservas pueden limitar que tipo de ofertas se puede aplicar sobre ellas, si tienen marca de SPO no
        // se pueden aplicar ofertas por fecha de venta y si tiene marcar de EBB no se pueden aplicar ofertas que no
        // sean por fecha de venta
        { JPT 19/09/08 Anulado por DRF GOC08002
        IF reserva."Aplica oferta tipo" = reserva."Aplica oferta tipo"::EBB THEN
          EXIT(FALSE);
        }
      END;

      // Comprobacion por tipo de habitacion

      IF (prPreC."Tipo Habitacion" <> pwHabitacion) AND
         (prPreC."Tipo Habitacion" <> '') THEN
        EXIT(FALSE);

      // Comprobacion por tipo de regimen

      IF (prPreC."Tipo Regimen" <> reserva.Regimen) AND
         (prPreC."Tipo Regimen" <> '') THEN
        EXIT(FALSE);

      // Comprobacion por tipo de persona

      IF (prPreC."Tipo Persona" <> reserva."Tipo Persona Facturacion") AND
         (prPreC."Tipo Persona" <> '') THEN
        EXIT(FALSE);

      // Comprobacion por numero de ocupantes

      IF reserva.Responsable THEN
        pwOcupantes := ROUND(pwOcupantes / reserva."N§ Habitaciones");
      IF (prPreC."N§ Ocupantes" <> pwOcupantes) AND (prPreC."N§ Ocupantes" <> 0) THEN
        EXIT(FALSE);

      // Comprobacion por dias de estancia

      w_dias_estancia := reserva."Fin estancia" - reserva."Fecha entrada";
      IF (prPreC."N§ estancias" <> w_dias_estancia) AND (prPreC."N§ estancias" <> 0) THEN
        EXIT(FALSE);

      // Comprobacion por dias a partir de

      // AJS 21.02.2007
      // Se ha incluido un campo Hasta para que las estancias sean un rango

      // AJS 20.02.2008
      // He cambiado el AND por OR para cumplir la condicion

      IF ((prPreC."A partir de estancias" > w_dias_estancia) OR (w_dias_estancia > prPreC."Hasta numero estancias") ) AND
         (prPreC."A partir de estancias" <> 0) THEN
        EXIT(FALSE);

      // Comprobacion por usos de oferta

      IF (prPreC."N§ Usos Oferta" >= prPreC."N§ Reservas aplicadas") AND (prPreC."N§ Usos Oferta" <> 0) THEN
        EXIT(FALSE);

      // Comprobacion por rango de edades

      IF prPreC."Edad hasta" = 0 THEN
        w_edad_hasta := 999
      ELSE
        w_edad_hasta := prPreC."Edad hasta";
      IF (reserva.Edad < prPreC."Edad desde") OR (reserva.Edad > w_edad_hasta) THEN
        EXIT(FALSE);

      // Comprobacion por n§ de persona

      IF prPreC."Edad hasta" <> 0 THEN BEGIN
        w_numero_persona_edad := buscar_numero_persona(reserva, prPreC, w_edad_hasta);
        IF (prPreC."N§ Persona" <> w_numero_persona_edad) AND (prPreC."N§ Persona" <> 0) THEN
          EXIT(FALSE);
      END
      ELSE BEGIN
        IF (prPreC."N§ Persona" <> reserva."N§ persona") AND (prPreC."N§ Persona" <> 0) THEN
          EXIT(FALSE);
      END;

      // Comprueba de que esta dentro del rango de la oferta Early Booking
      // Con cuanto tiempo de antelaci¢n se ha comprado la reserva

      IF prPreC."Dias Antes Llegada EBB" <> 0 THEN BEGIN

        // AJS 31.07.2007
        // Las ofertas sobre Dias Antes Llegada EBB dejan de estar ligadas al boolean EBB libre

        //IF reserva."EBB libre" THEN BEGIN
        //  IF reserva."Fecha entrada"- reserva."Fecha venta" < rPreC."Dias Antes Llegada EBB" THEN
        //    ok_oferta := FALSE;
        //END
        //ELSE
        //  ok_oferta := FALSE;

        IF (reserva."Fecha entrada"- reserva."Fecha venta") < prPreC."Dias Antes Llegada EBB" THEN
          EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE comprobar_oferta_compatible@17(prReserva@1103355000 : Record 7009743;prPrecio@1103355001 : Record 7009738) : Boolean;
    VAR
      lrOferIncom@1103355002 : Record 7009829;
      lrLinCalculo@1103355003 : Record 7009736;
      lrOFAP@1103355004 : Record 7009997;
    BEGIN
      // comprobar_oferta_compatible
      //

      // Esta rutina busca si la oferta que estamos comprobando tiene ofertas incompatibles, de manera que si para alguna
      // de las ofertas, que se ha definido como imcompatible, existen lineas de calculo la oferta no se calculara

      lrOferIncom.RESET;
      lrOferIncom.SETRANGE(Delegacion     , prPrecio.Delegacion);
      lrOferIncom.SETRANGE("N§ Contrato"  , prPrecio."N§ Contrato");
      lrOferIncom.SETRANGE("Codigo precio", FORMAT(prPrecio."Codigo Precio"));
      lrOferIncom.SETRANGE("Orden precio" , prPrecio."Orden Precio");
      IF lrOferIncom.FIND('-') THEN BEGIN
        lrLinCalculo.RESET;
        REPEAT
          { JPT 19/09/08 GOC08002
          lrLinCalculo.SETRANGE(Usuario         , USERID);
          lrLinCalculo.SETRANGE("Concepto Coste", Text001);
          lrLinCalculo.SETRANGE(Codigo          , lrOferIncom."Oferta Incompatible");
          lrLinCalculo.SETRANGE("N§ Reserva"    , prReserva."N§ Reserva");
          IF lrLinCalculo.FIND('-') THEN
            EXIT(FALSE);
          }

          CLEAR(lrOFAP);
          lrOFAP.SETCURRENTKEY(Usuario,Delegacion,"Num Reserva","Codigo Oferta");
          lrOFAP.SETRANGE(Usuario         , USERID);
          lrOFAP.SETRANGE(Delegacion      , prReserva.Delegacion);
          lrOFAP.SETRANGE("Num Reserva"   , prReserva."N§ Reserva");
          lrOFAP.SETRANGE("Codigo Oferta" , lrOferIncom."Oferta Incompatible");
          IF lrOFAP.FINDFIRST THEN
            EXIT(FALSE);
        UNTIL lrOferIncom.NEXT = 0;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE _comprobar_grabacion@7(reserva@1103355000 : Record 7009743;dia_aplicado@1103355001 : Date;pwNumDiaAplicado@1103355002 : Integer) : Boolean;
    VAR
      wEstancia@1103355003 : Integer;
      wDiaControl@1103355004 : Date;
    BEGIN
      // _comprobar_grabacion

      IF (rPreC."Tipo Fechas" = rPreC."Tipo Fechas"::"Fecha estancia") THEN
      BEGIN
        IF (dia_aplicado < rPreC."Fecha desde") OR (dia_aplicado > rPreC."Fecha hasta") THEN
          EXIT(FALSE);
      END;

      IF (rPreC."Tipo Fechas" = rPreC."Tipo Fechas"::"Fecha venta+estancia") THEN
      BEGIN
        IF (dia_aplicado < rPreC."2¦ Fecha desde") OR (dia_aplicado > rPreC."2¦ Fecha hasta") THEN
          EXIT(FALSE);
      END;

      IF rConC.GET(reserva.Delegacion, w_contratos[w_indice]) THEN
        IF (dia_aplicado < rConC."Fecha inicio contrato") THEN
          EXIT(FALSE);

      //. Tratamiento de las noches gratis
      IF rPreC."Noches gratis" <> 0 THEN
      BEGIN
        wEstancia := reserva."Fin estancia" - reserva."Fecha entrada";
        CASE rPreC."Aplica noches gratis al" OF
          rPreC."Aplica noches gratis al"::"Final estancia":
          BEGIN
            IF rPreC."Noches gratis" <= (wEstancia - pwNumDiaAplicado) THEN
              EXIT(FALSE);
          END;
          rPreC."Aplica noches gratis al"::"Principio estancia":
          BEGIN
            IF pwNumDiaAplicado > rPreC."Noches gratis" THEN
              EXIT(FALSE);
          END;
        END;
      END;

      // AJS 27.05.2009
      // Comprobamos si se ha activado el control de aplicacion x dia de la semana, en funcion del
      // tipo de fechas del precio comprobaremos sobre fecha de entrada o sobre la fecha de aplicacion

      IF rPreC."Aplicacion x dia" THEN
      BEGIN
        CASE rPreC."Tipo Fechas" OF
          rPreC."Tipo Fechas"::"Fecha estancia",
          rPreC."Tipo Fechas"::"Fecha venta+estancia":
            wDiaControl := dia_aplicado;
          ELSE
            wDiaControl := reserva."Fecha entrada";
        END;

        CASE DATE2DWY(wDiaControl, 1) OF
          1:
            IF NOT rPreC."Aplica Lunes" THEN
              EXIT(FALSE);
          2:
            IF NOT rPreC."Aplica Martes" THEN
              EXIT(FALSE);
          3:
            IF NOT rPreC."Aplica Miercoles" THEN
              EXIT(FALSE);
          4:
            IF NOT rPreC."Aplica Jueves" THEN
              EXIT(FALSE);
          5:
            IF NOT rPreC."Aplica Viernes" THEN
              EXIT(FALSE);
          6:
            IF NOT rPreC."Aplica Sabado" THEN
              EXIT(FALSE);
          7:
            IF NOT rPreC."Aplica Domingo" THEN
              EXIT(FALSE);
        END;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE _BuscaBasePorcentajeReserva@6(reserva@1103355000 : Record 7009743;calcular_dia@1103355001 : Boolean;dia_calcular@1103355002 : Date);
    BEGIN
      // hallar_precios_reserva

      _BuscaBasePorcentaje(rPreC."Aplica a Habitacion", Text002, Text003, w_total_habitacion,
                           w_suma_habitacion, w_dia_habitacion, calcular_dia, dia_calcular, reserva);
      _BuscaBasePorcentaje(rPreC."Aplica a Regimen", Text004, Text005, w_total_regimen,
                           w_suma_regimen, w_dia_regimen, calcular_dia, dia_calcular, reserva);
      _BuscaBasePorcentaje(rPreC."Aplica a Suplementos", Text006, Text007, w_total_suplemento,
                           w_suma_suplemento, w_dia_suplemento, calcular_dia, dia_calcular, reserva);
      _BuscaBasePorcentaje(rPreC."Aplica a Extras", Text008, Text009, w_total_extra,
                           w_suma_extra, w_dia_extra, calcular_dia, dia_calcular, reserva);
      _BuscaBasePorcentaje(rPreC."Aplica a Ofertas", Text001, Text010, w_total_oferta,
                           w_suma_oferta, w_dia_oferta, calcular_dia, dia_calcular, reserva);
    END;

    PROCEDURE buscar_ocupantes_oferta@34(reserva@1103355000 : Record 7009743;prPrecio@1103355002 : Record 7009738) : Integer;
    VAR
      reserva_aux@1103355001 : Record 7009743;
      w_ocupantes@1103355003 : Integer;
    BEGIN
      // buscar_ocupantes_oferta

      w_ocupantes := 0;
      reserva_aux.RESET;
      reserva_aux.SETCURRENTKEY(Delegacion,
                                "N§ Responsable",
                                "N§ Reserva");
      reserva_aux.SETRANGE(Delegacion      , reserva.Delegacion);
      reserva_aux.SETRANGE("N§ Responsable", reserva."N§ Responsable");
      IF reserva_aux.FIND('-') THEN BEGIN
        REPEAT
          IF reserva_aux."Tipo Persona Facturacion" = prPrecio."Tipo Ocupantes" THEN
            w_ocupantes := w_ocupantes + 1;
        UNTIL reserva_aux.NEXT = 0;
      END;
      EXIT(w_ocupantes);
    END;

    PROCEDURE buscar_numero_persona@5(reserva@1103355000 : Record 7009743;prPrecio@1103355004 : Record 7009738;pw_edad_hasta@1103355002 : Integer) : Integer;
    VAR
      rRsv2@1103355001 : Record 7009743;
      w_numero_persona_edad@1103355003 : Integer;
    BEGIN
      // buscar_numero_persona

      w_salir_bucle := FALSE;
      w_numero_persona_edad := 0;

      // AJS 30.08.2004
      // Ponemos la misma clave que se utiliza en calculo 3p
      //
      //rRsv2.SETCURRENTKEY(Delegacion,
      //                    "N§ Responsable",
      //                    "N§ Reserva");

      rRsv2.RESET;
      rRsv2.SETCURRENTKEY(Delegacion,
                          "N§ Responsable",
                          Edad);

      rRsv2.ASCENDING(FALSE);
      rRsv2.SETRANGE(Delegacion      , reserva.Delegacion);
      rRsv2.SETRANGE("N§ Responsable", reserva."N§ Responsable");
      IF rRsv2.FIND('-') THEN BEGIN
        REPEAT
          IF rRsv2."Tipo Persona Facturacion" = prPrecio."Tipo Persona" THEN BEGIN
            IF (rRsv2.Edad >= prPrecio."Edad desde") AND (rRsv2.Edad <= pw_edad_hasta) THEN
              w_numero_persona_edad := w_numero_persona_edad + 1;
          END;
          IF rRsv2."N§ Reserva" = rRsv."N§ Reserva" THEN
            w_salir_bucle := TRUE;
        UNTIL (rRsv2.NEXT = 0) OR (w_salir_bucle);
        IF w_cantidad <> 0 THEN
          w_numero_persona_edad := ROUND(w_numero_persona_edad / w_cantidad, 1);
        IF w_numero_persona_edad = 0 THEN
          w_numero_persona_edad := 1;
      END;

      EXIT(w_numero_persona_edad);
    END;

    LOCAL PROCEDURE _BuscaBasePorcentaje@14(condicion@1103355000 : Boolean;concepto@1103355001 : Text[50];concepto_regularizacion@1103355002 : Code[10];VAR total@1103355003 : Decimal;VAR suma@1103355004 : Decimal;VAR dia@1103355005 : Decimal;calcular_dia@1103355006 : Boolean;dia_calcular@1103355007 : Date;reserva@1103355008 : Record 7009743);
    VAR
      rLin2@1103355009 : Record 7009736;
      rLin3@1103355010 : Record 7009736;
      indice@1103355011 : Integer;
    BEGIN
      // hallar_precios
      //
      dia := 0;
      suma := 0;
      total := 0;
      IF condicion THEN BEGIN
        rLin2.RESET;
        rLin2.SETCURRENTKEY(Usuario,
                            "Concepto Coste",
                            Fecha,
                            "Coste/Ingreso",
                            Delegacion,
                            "N§ Reserva");
        rLin2.SETRANGE(Usuario, USERID());
        IF calcular_dia THEN BEGIN
          rLin2.SETRANGE(Fecha, dia_calcular);
        END;
        rLin2.SETFILTER("Concepto Coste", concepto);
        rLin2.SETRANGE("Coste/Ingreso" , rLin2."Coste/Ingreso"::Coste);
        rLin2.SETRANGE(Delegacion      , reserva.Delegacion);
        rLin2.SETRANGE("N§ Reserva"    , reserva."N§ Reserva");
        indice := 0;
        IF rLin2.FIND('-') THEN BEGIN
          REPEAT
            indice := indice + 1;
            total := total + rLin2.Importe;
            suma := suma + rLin2.Importe;

            // AJS 15.09.2006
            // Para rellenar la variable dia solo nos basamos en indice = 1
            //IF (rPreC.Frecuencia = 1) AND (indice = 1) THEN BEGIN

            IF indice = 1 THEN BEGIN
              rLin3.RESET;
              rLin3.COPYFILTERS(rLin2);
              rLin3.SETRANGE(Fecha, dia_calcular);
              IF rLin3.FIND('-') THEN BEGIN
                REPEAT
                  dia := dia + rLin3.Importe;
                UNTIL rLin3.NEXT = 0;
              END;
            END;
          UNTIL rLin2.NEXT = 0;
        END;


        rLin2.SETRANGE("Concepto Coste", concepto_regularizacion);
        indice := 0;
        IF rLin2.FIND('-') THEN BEGIN
          REPEAT
            indice := indice + 1;
            total := total + rLin2.Importe;
            suma := suma + rLin2.Importe;

            // AJS 15.09.2006
            // Para rellenar la variable dia solo nos basamos en indice = 1
            //IF (rPreC.Frecuencia = 1) AND (indice = 1) THEN BEGIN

            IF indice = 1 THEN BEGIN
              rLin3.RESET;
              rLin3.COPYFILTERS(rLin2);
              rLin3.SETRANGE(Fecha, dia_calcular);
              IF rLin3.FIND('-') THEN BEGIN
                REPEAT
                  dia := dia + rLin3.Importe;
                UNTIL rLin3.NEXT = 0;
              END;
            END;
          UNTIL rLin2.NEXT = 0;
        END;
      END;
      rLin2.RESET;
    END;

    PROCEDURE calculo_ofertas_precio_ingreso@8(reserva@1103355000 : Record 7009743;excluyente@1103355001 : Boolean);
    VAR
      w_ocupantes@1103355003 : Integer;
      lwNumDiaAplicado@1100217000 : Integer;
    BEGIN
      // calculo_ofertas_precio_ingreso

      rParPer.FINDFIRST;

      w_habitacion := reserva.Habitacion;
      CLEAR(w_contratos);
      CLEAR(w_dias);

      w_excluyente := excluyente;

      buscar_contratos_ingreso(reserva);

      rRsv.RESET;
      rRsv.SETCURRENTKEY(Delegacion,
                         "N§ Responsable",
                         "N§ Reserva");
      rRsv.SETRANGE(Delegacion      , reserva.Delegacion);
      rRsv.SETRANGE("N§ Responsable", reserva."N§ Reserva");
      IF rRsv.FINDSET THEN
      BEGIN
        REPEAT
          w_aplicada := FALSE;
          w_indice   := 1;
          WHILE w_contratos[w_indice] <> '' DO
          BEGIN
            rPreV.RESET;
            rPreV.SETCURRENTKEY(Delegacion,
                                "N§ Contrato",
                                "Orden Precio");
            rPreV.ASCENDING(FALSE);
            rPreV.SETRANGE(Delegacion         , reserva.Delegacion);
            rPreV.SETRANGE("N§ Contrato"      , w_contratos[w_indice]);
            rPreV.SETRANGE("Codigo Precio"    , rPreV."Codigo Precio"::Ofertas);
            rPreC.SETRANGE("Oferta excluyente", excluyente);
            rPreV.SETRANGE(Activo             , TRUE);
            IF rPreV.FINDFIRST THEN
            BEGIN
              REPEAT
                rLin.INIT;

                //-$001w_ocupantes := buscar_ocupantes_oferta_ing(reserva);

                IF _comprobar_aplicacion_oferta_i(rRsv, rPreV, w_ocupantes, w_habitacion) THEN
                BEGIN
                  // Marcamos la reserva si la oferta es excluyente
                  IF w_excluyente THEN
                  BEGIN
                    w_aplicada := TRUE;
                    IF rPer.GET(USERID(), rRsv.Delegacion, rRsv."N§ Reserva") THEN
                    BEGIN
                      rPer."Oferta excluyente" := TRUE;
                      rPer."Codigo Oferta"     := rPreV.Codigo;
                      rPer."Subtipo Oferta"    := rPreV."Subtipo Oferta"; //+$002
                      rPer.MODIFY;
                    END;
                  END;

                  // Continuamos el tratamiento normal de la oferta
                  IF rPreV.Porcentaje THEN
                  BEGIN
                    //. Buscamos los importes base del porcentaje
                    _BuscaBasePorcentajeReserv_ing(rRsv, FALSE, rRsv."Fecha entrada");

                    IF rPreV.Frecuencia = 0 THEN
                    BEGIN
                      w_cantidad          := 1;
                      w_precio            := ROUND(((w_suma_habitacion + w_suma_regimen + w_suma_suplemento +
                                                     w_suma_oferta) * rPreV.Importe) / 100, 0.01);
                      w_habitacion_oferta := ROUND((w_suma_habitacion * rPreV.Importe) / 100, 0.01);
                      w_regimen_oferta    := ROUND((w_suma_regimen * rPreV.Importe) / 100, 0.01);
                      w_suplemento_oferta := ROUND((w_suma_suplemento * rPreV.Importe) / 100, 0.01);
                      w_oferta_oferta     := ROUND((w_suma_oferta * rPreV.Importe) / 100, 0.01);
                    END
                    ELSE
                    BEGIN
                      w_cantidad := 1;
                      w_precio            := ROUND(((w_dia_habitacion + w_dia_regimen + w_dia_suplemento +
                                                     w_dia_oferta) * rPreV.Importe) / 100, 0.01);
                      w_habitacion_oferta := ROUND((w_dia_habitacion * rPreV.Importe) / 100, 0.01);
                      w_regimen_oferta    := ROUND((w_dia_regimen * rPreV.Importe) / 100, 0.01);
                      w_suplemento_oferta := ROUND((w_dia_suplemento * rPreV.Importe) / 100, 0.01);
                      w_oferta_oferta     := ROUND((w_dia_oferta * rPreV.Importe) / 100, 0.01);
                    END;
                  END
                  //. Aplicamos ofertas de precio
                  ELSE
                  BEGIN
                    w_cantidad          := 1;
                    w_precio            := ROUND(rPreV.Importe);
                    w_habitacion_oferta := 0;
                    w_regimen_oferta    := 0;
                    w_suplemento_oferta := 0;
                    w_oferta_oferta     := 0;
                  END;

                  //. Verificamos que es correcto para el dia
                  IF _comprobar_grabacion_ingreso(rRsv, rPreV, rRsv."Fecha entrada", 1) THEN
                  BEGIN
                    cCalRes.inserta_linea_calculo(rLin, USERID(), Text011, w_contratos[w_indice],
                                                  (w_cantidad * ROUND(w_precio)), rRsv."N§ Reserva" ,
                                                  rRsv."Fecha entrada", rPreV.Codigo, w_cantidad, ROUND(w_precio),
                                                  rPreV.Garantizable, rPreV."Importe HP");

                    rLin."Habitacion en oferta"  := w_habitacion_oferta;
                    rLin."Regimen en oferta"     := w_regimen_oferta;
                    rLin."Suplementos en oferta" := w_suplemento_oferta;
                    rLin."Ofertas en oferta"     := w_oferta_oferta;

                    cCalRes.fijos_linea_calculo(rLin, rLin."Coste/Ingreso"::Ingreso, reserva.Bono,
                                                reserva."N§ Responsable", reserva."Hotel reservado",
                                                rConC."Tipo de Contrato", reserva."Hotel Factura", reserva.Delegacion,
                                                rPreC."Validacion HP especial");

                    //. Las ofertas que no se acumulan al total estan sustituyendo los precios base
                    //. Lo mismo ocurre con las ofertas de Free Nights
                    //. Por tanto hay que borrar las lineas anteriormente calculadas
                    IF (NOT rPreV."Acumular al total") OR (rPreV."Noches gratis" <> 0) THEN
                    BEGIN
                      IF rPreV.Frecuencia = 0 THEN
                      BEGIN
                        rRsvDiaV.RESET;
                        rRsvDiaV.SETRANGE(Delegacion  , reserva.Delegacion);
                        rRsvDiaV.SETRANGE("N§ Reserva", reserva."N§ Reserva");
                        rRsvDiaV.SETRANGE(Dia         , rRsv."Fecha entrada");
                        IF rRsvDiaV.FINDFIRST THEN
                          cCalRes.borrar_otros_precios_ingreso(rPreV, rRsv, rRsvDiaV, 0D);
                        rRsvDiaV.RESET;
                      END
                      ELSE
                      BEGIN
                        rRsvDiaV.RESET;
                        rRsvDiaV.SETRANGE(Delegacion  , reserva.Delegacion);
                        rRsvDiaV.SETRANGE("N§ Reserva", reserva."N§ Reserva");
                        rRsvDiaV.SETRANGE(Dia         , rRsv."Fecha entrada");
                        IF rRsvDiaV.FINDFIRST THEN
                          cCalRes.borrar_otros_precios_ingreso(rPreV, rRsv, rRsvDiaV, rRsvDiaV.Dia);
                        rRsvDiaV.RESET;
                      END;
                    END;
                  END;

                  //. Repetimos las lineas diarias en los casos de frecuencia diaria
                  IF rPreV.Frecuencia = 1 THEN
                  BEGIN
                    lwNumDiaAplicado := 1; //+$002
                    FOR w_dia := (rRsv."Fecha entrada" + 1) TO (rRsv."Fin estancia" - 1) DO
                    BEGIN
                      lwNumDiaAplicado += 1; //+$002

                      IF _comprobar_grabacion_ingreso(rRsv, rPreV, w_dia, lwNumDiaAplicado) THEN //+$002
                      BEGIN
                        IF rPreV.Porcentaje THEN
                        BEGIN
                          //. Buscamos los importes base del porcentaje
                          _BuscaBasePorcentajeReserv_ing(rRsv, TRUE, w_dia);

                          w_cantidad := 1;
                          w_precio   := ROUND(((w_dia_habitacion + w_dia_regimen + w_dia_suplemento +
                                                w_dia_oferta) * rPreV.Importe) / 100, 0.01);
                          w_habitacion_oferta := ROUND((w_dia_habitacion * rPreV.Importe) / 100, 0.01);
                          w_regimen_oferta    := ROUND((w_dia_regimen * rPreV.Importe) / 100, 0.01);
                          w_suplemento_oferta := ROUND((w_dia_suplemento * rPreV.Importe) / 100, 0.01);
                          w_oferta_oferta     := ROUND((w_dia_oferta * rPreV.Importe) / 100, 0.01);
                        END
                        ELSE
                        BEGIN
                          w_cantidad          := 1;
                          w_precio            := ROUND(rPreV.Importe);
                          w_habitacion_oferta := 0;
                          w_regimen_oferta    := 0;
                          w_suplemento_oferta := 0;
                          w_oferta_oferta     := 0;
                        END;

                        cCalRes.inserta_linea_calculo(rLin, USERID(), Text011, w_contratos[w_indice],
                                                      (w_cantidad * ROUND(w_precio)), rRsv."N§ Reserva" ,
                                                      w_dia, rPreV.Codigo, w_cantidad, ROUND(w_precio),
                                                      rPreV.Garantizable, rPreV."Importe HP");

                        rLin."Habitacion en oferta"  := w_habitacion_oferta;
                        rLin."Regimen en oferta"     := w_regimen_oferta;
                        rLin."Suplementos en oferta" := w_suplemento_oferta;
                        rLin."Ofertas en oferta"     := w_oferta_oferta;

                        cCalRes.fijos_linea_calculo(rLin, rLin."Coste/Ingreso"::Ingreso, reserva.Bono,
                                                    reserva."N§ Responsable", reserva."Hotel reservado",
                                                    rConC."Tipo de Contrato", reserva."Hotel Factura", reserva.Delegacion,
                                                    FALSE);

                        IF (NOT rPreV."Acumular al total") OR (rPreV."Noches gratis" <> 0) THEN
                        BEGIN
                          rRsvDiaV.RESET;
                          rRsvDiaV.SETRANGE(Delegacion  , reserva.Delegacion);
                          rRsvDiaV.SETRANGE("N§ Reserva", reserva."N§ Reserva");
                          rRsvDiaV.SETRANGE(Dia         , rRsv."Fecha entrada");
                          IF rRsvDiaV.FINDFIRST THEN
                            cCalRes.borrar_otros_precios_ingreso(rPreV, rRsv, rRsvDiaV, w_dia);
                          rRsvDiaV.RESET;
                        END;
                      END;
                    END;
                  END;
                END;
              //-$002UNTIL (rPreV.NEXT = 0) OR (w_aplicada);
              UNTIL rPreV.NEXT = 0; //+$002
            END;
            rPreV.RESET;
            w_indice := w_indice + 1;
          END;
        UNTIL rRsv.NEXT = 0;
      END;
    END;

    PROCEDURE buscar_contratos_ingreso@9(reserva@1103355000 : Record 7009743);
    BEGIN
      // buscar_contratos_ingreso
      //
      rRsvDiaV.RESET;
      rRsvDiaV.SETRANGE(Delegacion  , reserva.Delegacion);
      rRsvDiaV.SETRANGE("N§ Reserva", reserva."N§ Reserva");
      IF rRsvDiaV.FINDSET THEN
      BEGIN
        REPEAT
          busca_contrato_dia_ingreso(rRsvDiaV);
        UNTIL rRsvDiaV.NEXT = 0;
      END;
    END;

    PROCEDURE busca_contrato_dia_ingreso@10(rRsvDia@1103355000 : Record 7009756);
    BEGIN
      // busca_contrato_dia_ingreso

      w_indice := 1;
      w_encontrado := FALSE;
      WHILE NOT w_encontrado DO
      BEGIN
        IF w_contratos[w_indice] = '' THEN
        BEGIN
          w_contratos[w_indice] := rRsvDiaV."Contrato venta";
          w_dias[w_indice] := 1;
          w_encontrado := TRUE;
        END
        ELSE
        BEGIN
          IF w_contratos[w_indice] = rRsvDiaV."Contrato venta" THEN
          BEGIN
            w_encontrado := TRUE;
            w_dias[w_indice] := w_dias[w_indice] + 1;
          END
          ELSE
            w_indice := w_indice + 1;
        END;
      END;
    END;

    LOCAL PROCEDURE _comprobar_aplicacion_oferta_i@12(reserva@1103355000 : Record 7009743;prPreV@1100217002 : Record 7009732;pwOcupantes@1103355001 : Integer;pwHabitacion@1100217001 : Code[10]) : Boolean;
    VAR
      lwOk@1100217000 : Boolean;
      w_dias_estancia@1103355002 : Integer;
      w_edad_hasta@1103355003 : Integer;
      w_numero_persona_edad@1103355004 : Integer;
    BEGIN
      // _comprobar_aplicacion_oferta_i

      // Comprobamos si es una oferta excluyente en el bucle de no excluyentes
      IF (prPreV."Oferta excluyente") AND (NOT w_excluyente) THEN
        EXIT(FALSE);

      // Comprobamos si se trata de una oferta no excluyente en el bucle de excluyentes
      IF (NOT prPreV."Oferta excluyente") AND (w_excluyente) THEN
        EXIT(FALSE);

      //+$002 <
      CASE rRsv."Aplica oferta tipo" OF
        rRsv."Aplica oferta tipo"::Todas        : lwOk := TRUE;
        rRsv."Aplica oferta tipo"::EBB          : lwOk := prPreV."Subtipo Oferta" = prPreV."Subtipo Oferta"::EBB;
        rRsv."Aplica oferta tipo"::SPO          : lwOk := prPreV."Subtipo Oferta" = prPreV."Subtipo Oferta"::SPO;
        rRsv."Aplica oferta tipo"::Llegada      : lwOk := prPreV."Subtipo Oferta" = prPreV."Subtipo Oferta"::Llegada;
        rRsv."Aplica oferta tipo"::"Free Night" : lwOk := prPreV."Subtipo Oferta" = prPreV."Subtipo Oferta"::"Free Night";
        rRsv."Aplica oferta tipo"::"DA=DZ"      : lwOk := prPreV."Subtipo Oferta" = prPreV."Subtipo Oferta"::"DA=DZ";
        rRsv."Aplica oferta tipo"::Ninguna      : lwOk := FALSE;
      END;
      IF NOT lwOk THEN
        EXIT(FALSE);
      //+$002 >

      // Comprobamos si se ha aplicado una oferta excluyente sobre esta reserva
      IF rPer.GET(USERID, reserva.Delegacion, reserva."N§ Reserva") THEN
      BEGIN
        //. No consideramos excluyente si tienen el mismo subtipo
        IF rPer."Oferta excluyente" AND (prPreV."Subtipo Oferta" <> rPer."Subtipo Oferta") THEN
          EXIT(FALSE);
      END;

      //. Comprobacion por hotel oferta especial
      IF (prPreV."Hotel oferta especial" <> '') AND
         (prPreV."Hotel oferta especial" <> reserva."Hotel TO") THEN
        EXIT(FALSE);

      //. Comprobacion por tipo de fechas
      IF prPreV."Tipo Fechas" = prPreV."Tipo Fechas"::"Fecha venta" THEN
      BEGIN
        IF (reserva."Fecha venta" < prPreV."Fecha desde") OR
           (reserva."Fecha venta" > prPreV."Fecha hasta") THEN
          EXIT(FALSE);
      END;

      IF prPreV."Tipo Fechas" = prPreV."Tipo Fechas"::"Fecha entrada" THEN
      BEGIN
        IF (reserva."Fecha entrada" < prPreV."Fecha desde") OR
           (reserva."Fecha entrada" > prPreV."Fecha hasta") THEN
          EXIT(FALSE);
      END;

      IF prPreV."Tipo Fechas" = prPreV."Tipo Fechas"::"Fecha estancia" THEN
      BEGIN
        IF ((reserva."Fin estancia" - 1) < prPreV."Fecha desde") OR
           (reserva."Fecha entrada"      > prPreV."Fecha hasta") THEN
          EXIT(FALSE);
      END;

      IF prPreV."Tipo Fechas" = prPreV."Tipo Fechas"::"Fecha venta+entrada" THEN
      BEGIN
        IF (reserva."Fecha venta" < prPreV."Fecha desde") OR
           (reserva."Fecha venta" > prPreV."Fecha hasta") THEN
          EXIT(FALSE);
        IF (reserva."Fecha entrada" < prPreV."2¦ Fecha desde") OR
           (reserva."Fecha entrada" > prPreV."2¦ Fecha hasta") THEN
          EXIT(FALSE);
      END;

      IF prPreV."Tipo Fechas" = prPreV."Tipo Fechas"::"Fecha venta+estancia" THEN
      BEGIN
        IF (reserva."Fecha venta" < prPreV."Fecha desde") OR
           (reserva."Fecha venta" > prPreV."Fecha hasta") THEN
          EXIT(FALSE);
        IF (reserva."Fecha entrada"      > prPreV."2¦ Fecha hasta") OR
           ((reserva."Fin estancia" - 1) < prPreV."2¦ Fecha desde") THEN
          EXIT(FALSE);
      END;

      IF prPreV."Tipo Fechas" = prPreV."Tipo Fechas"::"Fecha salida" THEN
      BEGIN
        IF (reserva."Fin estancia" < prPreV."Fecha desde") OR
           (reserva."Fin estancia" > prPreV."Fecha hasta") THEN
          EXIT(FALSE);
      END;

      IF prPreV."Tipo Fechas" = prPreV."Tipo Fechas"::"Fecha venta+salida" THEN
      BEGIN
        IF (reserva."Fecha venta" < prPreV."Fecha desde") OR
           (reserva."Fecha venta" > prPreV."Fecha hasta") THEN
          EXIT(FALSE);
        IF (reserva."Fin estancia" < prPreV."2¦ Fecha desde") OR
           (reserva."Fin estancia" > prPreV."2¦ Fecha hasta") THEN
          EXIT(FALSE);
      END;

      IF prPreV."Tipo Fechas" = prPreV."Tipo Fechas"::"Fecha entrada+salida" THEN
      BEGIN
        IF (reserva."Fecha entrada" < prPreV."Fecha desde") OR
           (reserva."Fecha entrada" > prPreV."Fecha hasta") THEN
          EXIT(FALSE);
        IF (reserva."Fin estancia" < prPreV."2¦ Fecha desde") OR
           (reserva."Fin estancia" > prPreV."2¦ Fecha hasta") THEN
          EXIT(FALSE);
      END;

      // Comprobacion por tipo de habitacion
      IF (prPreV."Tipo Habitacion" <> pwHabitacion) AND
         (prPreV."Tipo Habitacion" <> '') THEN
        EXIT(FALSE);

      // Comprobacion por tipo de regimen
      IF (prPreV."Tipo Regimen" <> reserva.Regimen) AND
         (prPreV."Tipo Regimen" <> '') THEN
        EXIT(FALSE);

      // Comprobacion por tipo de persona
      IF (prPreV."Tipo Persona" <> reserva."Tipo Persona Facturacion") AND
         (prPreV."Tipo Persona" <> '') THEN
        EXIT(FALSE);

      // Comprobacion por dias de estancia
      w_dias_estancia := reserva."Fin estancia" - reserva."Fecha entrada";
      IF (prPreV."N§ estancias" <> w_dias_estancia) AND
         (prPreV."N§ estancias" <> 0) THEN
        EXIT(FALSE);

      // Comprobacion por dias a partir de
      IF ( (prPreV."A partir de estancias" > w_dias_estancia) OR (w_dias_estancia > prPreV."Hasta numero estancias")) AND
         (prPreV."A partir de estancias" <> 0) THEN
        EXIT(FALSE);

      // Comprobacion por rango de edades
      IF prPreV."Edad hasta" = 0 THEN
        w_edad_hasta := 999
      ELSE
        w_edad_hasta := prPreV."Edad hasta";
      IF (rRsv.Edad < prPreV."Edad desde") OR (rRsv.Edad > w_edad_hasta) THEN
        EXIT(FALSE);

      // Comprobacion por n§ de persona
      IF prPreV."Edad hasta" <> 0 THEN
      BEGIN
        w_numero_persona_edad := _buscar_numero_persona_ing(reserva);
        IF (prPreV."N§ Persona" <> w_numero_persona_edad) AND
           (prPreV."N§ Persona" <> 0) THEN
          EXIT(FALSE);
      END
      ELSE
      BEGIN
        IF (prPreV."N§ Persona" <> rRsv."N§ persona") AND
           (prPreV."N§ Persona" <> 0) THEN
          EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE _comprobar_grabacion_ingreso@15(reserva@1103355000 : Record 7009743;prPreV@1100217001 : Record 7009732;dia_aplicado@1103355001 : Date;pwNumDiaAplicado@1100217000 : Integer) : Boolean;
    VAR
      wEstancia@1100217003 : Integer;
      wDiaControl@1100217002 : Date;
    BEGIN
      // _comprobar_grabacion_ingreso

      IF (rPreV."Tipo Fechas" = rPreV."Tipo Fechas"::"Fecha estancia") THEN
      BEGIN
        IF (dia_aplicado < rPreV."Fecha desde") OR (dia_aplicado > rPreV."Fecha hasta") THEN
          EXIT(FALSE);
      END;

      IF (rPreV."Tipo Fechas" = rPreV."Tipo Fechas"::"Fecha venta+estancia") THEN
      BEGIN
        IF (dia_aplicado < rPreV."2¦ Fecha desde") OR (dia_aplicado > rPreV."2¦ Fecha hasta") THEN
          EXIT(FALSE);
      END;

      IF rConV.GET(reserva.Delegacion, w_contratos[w_indice]) THEN
        IF (dia_aplicado < rConV."Fecha inicio contrato") THEN
          EXIT(FALSE);

      //. Tratamiento de las noches gratis
      IF prPreV."Noches gratis" <> 0 THEN
      BEGIN
        wEstancia := reserva."Fin estancia" - reserva."Fecha entrada";

        CASE prPreV."Aplica noches gratis al" OF
          prPreV."Aplica noches gratis al"::"Final estancia":
          BEGIN
            IF prPreV."Noches gratis" <= (wEstancia - pwNumDiaAplicado) THEN
              EXIT(FALSE);
          END;
          prPreV."Aplica noches gratis al"::"Principio estancia":
          BEGIN
            IF pwNumDiaAplicado > prPreV."Noches gratis" THEN
              EXIT(FALSE);
          END;
        END;
      END;

      //. Comprobamos si es una oferta que tiene activado el control por dia de la semana
      IF prPreV."Aplicacion x dia" THEN
      BEGIN
        CASE prPreV."Tipo Fechas" OF
          prPreV."Tipo Fechas"::"Fecha estancia",
          prPreV."Tipo Fechas"::"Fecha venta+estancia":
            wDiaControl := dia_aplicado;
          ELSE
            wDiaControl := reserva."Fecha entrada";
        END;

        CASE DATE2DWY(wDiaControl, 1) OF
          1:
            IF NOT prPreV."Aplica Lunes" THEN
              EXIT(FALSE);
          2:
            IF NOT prPreV."Aplica Martes" THEN
              EXIT(FALSE);
          3:
            IF NOT prPreV."Aplica Miercoles" THEN
              EXIT(FALSE);
          4:
            IF NOT prPreV."Aplica Jueves" THEN
              EXIT(FALSE);
          5:
            IF NOT prPreV."Aplica Viernes" THEN
              EXIT(FALSE);
          6:
            IF NOT prPreV."Aplica Sabado" THEN
              EXIT(FALSE);
          7:
            IF NOT rPreC."Aplica Domingo" THEN
              EXIT(FALSE);
        END;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE _BuscaBasePorcentajeReserv_ing@13(reserva@1103355000 : Record 7009743;calcular_dia@1103355001 : Boolean;dia_calcular@1103355002 : Date);
    BEGIN
      // hallar_precios_reserva_ing

      _BuscaBasePorcentaje_ing(rPreV."Aplica a Habitacion", Text012, Text013, w_total_habitacion,
                               w_suma_habitacion, w_dia_habitacion, calcular_dia, dia_calcular, reserva);
      _BuscaBasePorcentaje_ing(rPreV."Aplica a Regimen", Text014, Text015, w_total_regimen,
                               w_suma_regimen, w_dia_regimen, calcular_dia, dia_calcular, reserva);
      _BuscaBasePorcentaje_ing(rPreV."Aplica a Suplementos", Text016, Text017, w_total_suplemento,
                               w_suma_suplemento, w_dia_suplemento, calcular_dia, dia_calcular, reserva);
      _BuscaBasePorcentaje_ing(rPreV."Aplica a Ofertas", Text011, Text010, w_total_oferta,
                               w_suma_oferta, w_dia_oferta, calcular_dia, dia_calcular, reserva);
    END;

    PROCEDURE buscar_ocupantes_oferta_ing@11(reserva@1103355000 : Record 7009743) : Integer;
    VAR
      reserva_aux@1103355001 : Record 7009743;
      w_ocupantes@1103355002 : Integer;
    BEGIN
      // buscar_ocupantes_oferta_ing

      w_ocupantes := 0;

      reserva_aux.RESET;
      reserva_aux.SETCURRENTKEY(Delegacion,
                                "N§ Responsable",
                                "N§ Reserva");
      reserva_aux.SETRANGE(Delegacion      , reserva.Delegacion);
      reserva_aux.SETRANGE("N§ Responsable", reserva."N§ Responsable");
      IF reserva_aux.FIND('-') THEN BEGIN
        REPEAT
          IF reserva_aux."Tipo Persona Facturacion" = rPreV."old_Tipo Ocupantes" THEN
            w_ocupantes := w_ocupantes + 1;
        UNTIL reserva_aux.NEXT = 0;
      END;
      EXIT(w_ocupantes);
    END;

    LOCAL PROCEDURE _buscar_numero_persona_ing@16(reserva@1103355000 : Record 7009743) : Integer;
    VAR
      rRsv2@1103355001 : Record 7009743;
      w_edad_hasta@1103355002 : Integer;
      w_numero_persona_edad@1103355003 : Integer;
    BEGIN
      // buscar_numero_persona_ing

      w_salir_bucle := FALSE;
      w_numero_persona_edad := 0;

      rRsv2.RESET;
      rRsv2.SETCURRENTKEY(Delegacion,
                          "N§ Responsable",
                          Edad);
      rRsv2.ASCENDING(FALSE);
      rRsv2.SETRANGE(Delegacion      , reserva.Delegacion);
      rRsv2.SETRANGE("N§ Responsable", reserva."N§ Responsable");
      IF rRsv2.FINDFIRST THEN
      BEGIN
        REPEAT
          IF rRsv2."Tipo Persona Facturacion" = rPreV."Tipo Persona" THEN
          BEGIN
            IF (rRsv2.Edad >= rPreV."Edad desde") AND (rRsv2.Edad <= w_edad_hasta) THEN
              w_numero_persona_edad := w_numero_persona_edad + 1;
          END;

          IF rRsv2."N§ Reserva" = rRsv."N§ Reserva" THEN
            w_salir_bucle := TRUE;
        UNTIL (rRsv2.NEXT = 0) OR (w_salir_bucle);

        IF w_cantidad <> 0 THEN
          w_numero_persona_edad := ROUND(w_numero_persona_edad / w_cantidad, 1);

        IF w_numero_persona_edad = 0 THEN
          w_numero_persona_edad := 1;
      END;

      EXIT(w_numero_persona_edad);
    END;

    LOCAL PROCEDURE _BuscaBasePorcentaje_ing@23(condicion@1103355000 : Boolean;concepto@1103355001 : Text[50];concepto_regularizacion@1103355002 : Code[10];VAR total@1103355003 : Decimal;VAR suma@1103355004 : Decimal;VAR dia@1103355005 : Decimal;calcular_dia@1103355006 : Boolean;dia_calcular@1103355007 : Date;reserva@1103355008 : Record 7009743);
    VAR
      rLin2@1103355009 : Record 7009736;
      rLin3@1103355010 : Record 7009736;
      indice@1103355011 : Integer;
    BEGIN
      // hallar_precios_ingreso

      dia   := 0;
      suma  := 0;
      total := 0;

      IF condicion THEN
      BEGIN
        rLin2.RESET;
        rLin2.SETCURRENTKEY(Usuario,
                            "Concepto Coste",
                            Fecha,
                            "Coste/Ingreso",
                            Delegacion,
                            "N§ Reserva");
        rLin2.SETRANGE(Usuario, USERID);
        IF calcular_dia THEN
          rLin2.SETRANGE(Fecha, dia_calcular);

        rLin2.SETFILTER("Concepto Coste", concepto);
        rLin2.SETRANGE ("Coste/Ingreso" , rLin2."Coste/Ingreso"::Ingreso);
        rLin2.SETRANGE (Delegacion      , reserva.Delegacion);
        rLin2.SETRANGE ("N§ Reserva"    , reserva."N§ Reserva");
        indice := 0;
        IF rLin2.FINDSET THEN
        BEGIN
          REPEAT
            indice := indice + 1;
            total  := total + rLin2.Importe;
            suma   := suma + rLin2.Importe;

            IF indice = 1 THEN
            BEGIN
              rLin3.RESET;
              rLin3.COPYFILTERS(rLin2);
              rLin3.SETRANGE(Fecha, dia_calcular);
              IF rLin3.FINDSET THEN
              BEGIN
                REPEAT
                  dia := dia + rLin3.Importe;
                UNTIL rLin3.NEXT = 0;
              END;
            END;
          UNTIL rLin2.NEXT = 0;
        END;

        indice := 0;

        rLin2.SETRANGE ("Concepto Coste", concepto_regularizacion);
        rLin2.SETFILTER("N§ Linea"      , '>=%1', 2000000);
        IF rLin2.FINDSET THEN
        BEGIN
          REPEAT
            indice := indice + 1;
            total  := total + rLin2.Importe;
            suma   := suma + rLin2.Importe;

            IF indice = 1 THEN
            BEGIN
              rLin3.RESET;
              rLin3.COPYFILTERS(rLin2);
              rLin3.SETRANGE(Fecha, dia_calcular);
              IF rLin3.FINDSET THEN
              BEGIN
                REPEAT
                  dia := dia + rLin3.Importe;
                UNTIL rLin3.NEXT = 0;
              END;
            END;
          UNTIL rLin2.NEXT = 0;
        END;
      END;
      rLin2.RESET;
    END;

    PROCEDURE InsertaOfertaaPersona@1103355001(prRes@1103355001 : Record 7009743;prPreC@1103355002 : Record 7009738);
    VAR
      lrOFAP@1103355000 : Record 7009997;
    BEGIN
      // InsertaOfertaaPersona

      // JPT 18/09/08 DRF GOC08002

      CLEAR(lrOFAP);
      lrOFAP.SETCURRENTKEY(Usuario,Delegacion,"Num Reserva","Codigo Oferta");
      lrOFAP.SETRANGE(Usuario        , USERID);
      lrOFAP.SETRANGE(Delegacion     , prRes.Delegacion);
      lrOFAP.SETRANGE("Num Reserva"  , prRes."N§ Reserva");
      lrOFAP.SETRANGE("Codigo Oferta", prPreC.Codigo);
      IF NOT lrOFAP.FINDFIRST THEN BEGIN
        CLEAR(lrOFAP);
        lrOFAP.Usuario        := USERID;
        lrOFAP.Delegacion     := prRes.Delegacion;
        lrOFAP."Num Reserva"  := prRes."N§ Reserva";
        lrOFAP."Codigo Oferta":= prPreC.Codigo;
        lrOFAP.Nombre         := prRes.Nombre;
        lrOFAP."Tipo Persona" := prRes."Tipo Persona";
        lrOFAP.INSERT(TRUE);
      END;
    END;

    BEGIN
    {
      ## AJS 27.05.2009

        .- Elimino el control de aplicacion por dia de la semana de la funcion
           comprobar_aplicacion_oferta y lo paso a comprobar_grabacion porque
           si la oferta es por Fecha estancia se tiene que hacer el control sobre
           el dia de aplicacion y sino sobre la fecha de entrada.

      $001 AJS Elimino los controles por Tipo ocupantes porque es obsoleto

      $002 AJS QNT-CAR-14001, Igualar la gestion de las ofertas de venta con la de las ofertas de compra
    }
    END.
  }
}
