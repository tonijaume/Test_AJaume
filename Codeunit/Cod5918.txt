OBJECT Codeunit 5918 ServOrder-Check Response Time
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=BEGIN
            ServMgtSetup.GET;
            ServMgtSetup.TESTFIELD("First Warning Within (Hours)");
            RepairStatus.SETRANGE(Initial,TRUE);
            IF NOT RepairStatus.FIND('-') THEN
              ERROR(Text005,RepairStatus.TABLECAPTION,RepairStatus.FIELDCAPTION(Initial));
            CLEAR(ServItemLine);
            CLEAR(ServHeader);
            ServHeader.SETCURRENTKEY(Status,"Response Date","Response Time",Priority);
            ServHeader.SETRANGE(Status,ServHeader.Status::Pending);
            IF ServHeader.FINDSET THEN
              REPEAT
                CheckDate1 := WORKDATE;
                CheckTime1 := TIME;
                CalculateCheckDate(CheckDate1,CheckTime1,ServMgtSetup."First Warning Within (Hours)");
                ServItemLine.SETCURRENTKEY("Document Type","Document No.","Response Date");
                ServItemLine.SETRANGE("Document Type",ServHeader."Document Type");
                ServItemLine.SETRANGE("Document No.",ServHeader."No.");
                ServItemLine.SETFILTER("Response Date",'>%1&<=%2',0D,CheckDate1);
                ServItemLine.SETFILTER("Repair Status Code",RepairStatus.Code);
                IF ServItemLine.FINDSET THEN BEGIN
                  IF ServHeader."Responsibility Center" <> '' THEN
                    RespCenter.GET(ServHeader."Responsibility Center");

                  REPEAT
                    WarningStatus := CheckResponseTime(ServItemLine."Response Date",ServItemLine."Response Time");
                    IF WarningStatus > ServHeader."Warning Status" THEN BEGIN
                      CASE WarningStatus OF
                        1:
                          IF RespCenter."E-Mail" <> '' THEN
                            SendEMail(RespCenter."E-Mail")
                          ELSE
                            SendEMail(ServMgtSetup."Send First Warning To");
                        2:
                          IF RespCenter."E-Mail" <> '' THEN
                            SendEMail(RespCenter."E-Mail")
                          ELSE
                            SendEMail(ServMgtSetup."Send Second Warning To");
                        3:
                          IF RespCenter."E-Mail" <> '' THEN
                            SendEMail(RespCenter."E-Mail")
                          ELSE
                            SendEMail(ServMgtSetup."Send Third Warning To");
                      END;
                    END;
                  UNTIL ServItemLine.NEXT = 0;
                END;
              UNTIL ServHeader.NEXT = 0;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1. Warning Message for Service Order %2;ESP=%1. Mensaje advertencia para Pedido servicio %2';
      Text001@1001 : TextConst 'ENU=Check the response time for service order %1;ESP=Comprueba el tiempo respuesta para ped. servicio %1';
      ServHeader@1002 : Record 5900;
      ServItemLine@1003 : Record 5901;
      ServMgtSetup@1004 : Record 5911;
      RespCenter@1007 : Record 5714;
      ServHour@1008 : Record 5910;
      RepairStatus@1010 : Record 5927;
      WarningStatus@1006 : Integer;
      CheckDate1@1011 : Date;
      CheckDate2@1014 : Date;
      CheckDate3@1015 : Date;
      CheckTime1@1016 : Time;
      CheckTime2@1017 : Time;
      CheckTime3@1018 : Time;
      Text004@1019 : TextConst 'ENU=E-mail address is missing.;ESP=Falta direcci¢n correo electr¢nico.';
      Text005@1020 : TextConst 'ENU=%1 with the field %2 selected cannot be found.;ESP=No se puede encontrar %1 con el campo %2 seleccionado.';

    LOCAL PROCEDURE CheckResponseTime@1(ResponseDate@1000 : Date;ResponseTime@1001 : Time) : Integer;
    BEGIN
      IF ResponseDate = 0D THEN
        EXIT(0);

      IF ServMgtSetup."Third Warning Within (Hours)" <> 0 THEN BEGIN
        CheckDate3 := WORKDATE;
        CheckTime3 := TIME;
        CalculateCheckDate(CheckDate3,CheckTime3,ServMgtSetup."Third Warning Within (Hours)");
        IF ResponseDate < CheckDate3 THEN
          EXIT(3);
        IF ResponseDate = CheckDate3 THEN
          IF ResponseTime < CheckTime3 THEN
            EXIT(3);
      END;

      IF ServMgtSetup."Second Warning Within (Hours)" <> 0 THEN BEGIN
        CheckDate2 := WORKDATE;
        CheckTime2 := TIME;
        CalculateCheckDate(CheckDate2,CheckTime2,ServMgtSetup."Second Warning Within (Hours)");
        IF ResponseDate < CheckDate2 THEN
          EXIT(2);
        IF ResponseDate = CheckDate2 THEN
          IF ResponseTime < CheckTime2 THEN
            EXIT(2);
      END;

      IF ResponseDate < CheckDate1 THEN
        EXIT(1);
      IF ResponseDate = CheckDate1 THEN
        IF ResponseTime < CheckTime1 THEN
          EXIT(1);

      EXIT(0);
    END;

    LOCAL PROCEDURE SendEMail@2(SendtoAddress@1000 : Text[80]) : Boolean;
    VAR
      ServEMailQueue@1001 : Record 5935;
      ServEMailQueue2@1002 : Record 5935;
    BEGIN
      IF SendtoAddress = '' THEN BEGIN
        ERROR(Text004);
      END;

      ServHeader."Warning Status" := WarningStatus;
      ServHeader.MODIFY;

      ServEMailQueue.INIT;
      ServEMailQueue."To Address" := SendtoAddress;
      ServEMailQueue."Copy-to Address" := '';
      ServEMailQueue."Subject Line" := STRSUBSTNO(Text000,FORMAT(WarningStatus),ServHeader."No.");
      ServEMailQueue."Body Line" := STRSUBSTNO(Text001,ServHeader."No.");
      ServEMailQueue."Attachment Filename" := '';
      ServEMailQueue."Document Type" := ServEMailQueue."Document Type"::"Service Order";
      ServEMailQueue."Document No." := ServHeader."No.";
      ServEMailQueue.Status := ServEMailQueue.Status::" ";
      ServEMailQueue2 := ServEMailQueue;
      ServEMailQueue2.INSERT(TRUE);
    END;

    PROCEDURE CalculateCheckDate@3(VAR CheckDate@1000 : Date;VAR CheckTime@1007 : Time;HoursAhead@1001 : Decimal);
    VAR
      CalChange@1012 : Record 7602;
      ServMgtSetup@1011 : Record 5911;
      CalendarMgmt@1013 : Codeunit 7600;
      TotTime@1002 : Decimal;
      LastTotTime@1003 : Decimal;
      HoursLeft@1004 : Decimal;
      HoursOnLastDay@1005 : Decimal;
      Holiday@1006 : Boolean;
      CalendarCustomized@1014 : Boolean;
      TempDate@1008 : Date;
      TempDay@1009 : Integer;
      NewDescription@1010 : Text[50];
    BEGIN
      ServMgtSetup.GET;
      ServMgtSetup.TESTFIELD("Base Calendar Code");
      CalendarCustomized :=
        CalendarMgmt.CustomizedChangesExist(CalChange."Source Type"::Service,'','',ServMgtSetup."Base Calendar Code");
      ServHour.RESET;
      ServHour.SETRANGE("Service Contract No.",'');
      ServHour.SETRANGE("Service Contract Type",ServHour."Service Contract Type"::" ");
      TotTime := 0;
      LastTotTime := 0;
      TempDate := CheckDate;
      HoursLeft := HoursAhead * 3600000;
      REPEAT
        TempDay := DATE2DWY(TempDate,1) - 1;
        HoursOnLastDay := 0;
        ServHour.SETRANGE(Day,TempDay);
        IF ServHour.FIND('-') THEN BEGIN
          IF ServHour."Valid on Holidays" THEN
            Holiday := FALSE
          ELSE BEGIN
            IF CalendarCustomized THEN
              Holiday :=
                CalendarMgmt.CheckCustomizedDateStatus(
                  CalChange."Source Type"::Service,'','',ServMgtSetup."Base Calendar Code",TempDate,NewDescription)
            ELSE
              Holiday := CalendarMgmt.CheckDateStatus(ServMgtSetup."Base Calendar Code",TempDate,NewDescription);
          END;
          IF NOT Holiday THEN BEGIN
            IF TempDate = CheckDate THEN BEGIN
              IF CheckTime < ServHour."Ending Time" THEN
                IF HoursLeft > ServHour."Ending Time" - CheckTime THEN BEGIN
                  TotTime := TotTime + (ServHour."Ending Time" - CheckTime);
                  HoursOnLastDay := ServHour."Ending Time" - CheckTime;
                END ELSE BEGIN
                  TotTime := TotTime + HoursLeft;
                  HoursOnLastDay := HoursLeft;
                END;
            END ELSE BEGIN
              IF HoursLeft > ServHour."Ending Time" - ServHour."Starting Time" THEN BEGIN
                TotTime := TotTime + (ServHour."Ending Time" - ServHour."Starting Time");
                HoursOnLastDay := ServHour."Ending Time" - ServHour."Starting Time";
              END ELSE BEGIN
                TotTime := TotTime + HoursLeft;
                HoursOnLastDay := HoursLeft;
              END;
            END;
            IF LastTotTime < TotTime THEN BEGIN
              HoursLeft := HoursLeft - (TotTime - LastTotTime);
              LastTotTime := TotTime;
            END;
          END;
        END;
        TempDate := TempDate + 1;
      UNTIL HoursLeft <= 0;

      IF TotTime > 0 THEN BEGIN
        IF CheckDate = TempDate - 1 THEN
          CheckTime := CheckTime + HoursOnLastDay
        ELSE
          CheckTime := ServHour."Starting Time" + HoursOnLastDay;
        CheckDate := TempDate - 1;
      END;
    END;

    BEGIN
    END.
  }
}
