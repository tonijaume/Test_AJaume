OBJECT Codeunit 5750 Whse.-Create Source Document
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01,NAVES4.00.02;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      WhseMgt@1002 : Codeunit 5775;

    PROCEDURE FromSalesLine2ShptLine@9(WhseShptHeader@1000 : Record 7320;SalesLine@1001 : Record 37);
    VAR
      WhseShptLine@1002 : Record 7321;
      SalesHeader@1003 : Record 36;
    BEGIN
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");

      WITH WhseShptLine DO BEGIN
        RESET;
        "No." := WhseShptHeader."No.";
        SETRANGE("No.","No.");
        LOCKTABLE;
        IF FIND('+') THEN;

        INIT;
        "Line No." := "Line No." + 10000;
        "Source Type" := DATABASE::"Sales Line";
        "Source Subtype" := SalesLine."Document Type";
        "Source No." := SalesLine."Document No.";
        "Source Line No." := SalesLine."Line No.";
        WhseMgt.GetSourceDocument("Source Document","Source Type","Source Subtype");
        "Location Code" := SalesLine."Location Code";
        "Item No." := SalesLine."No.";
        "Variant Code" := SalesLine."Variant Code";
        SalesLine.TESTFIELD("Unit of Measure Code");
        "Unit of Measure Code" := SalesLine."Unit of Measure Code";
        "Qty. per Unit of Measure" := SalesLine."Qty. per Unit of Measure";
        Description := SalesLine.Description;
        "Description 2" := SalesLine."Description 2";
        VALIDATE(Quantity,ABS(SalesLine."Outstanding Quantity"));
        IF SalesLine."Document Type" = SalesLine."Document Type"::Order THEN
          "Due Date" := SalesLine."Planned Shipment Date";
        IF SalesLine."Document Type" = SalesLine."Document Type"::"Return Order" THEN
          "Due Date" := WORKDATE;
        IF WhseShptHeader."Shipment Date" = 0D THEN
          "Shipment Date" := SalesLine."Shipment Date"
        ELSE
          "Shipment Date" := WhseShptHeader."Shipment Date";
        "Destination Type" := "Destination Type"::Customer;
        "Destination No." := SalesLine."Sell-to Customer No.";
        "Shipping Advice" := SalesHeader."Shipping Advice";
        "Bin Code" := SalesLine."Bin Code";
        UpdateShptLine(WhseShptLine,WhseShptHeader);
        CreateShptLine(WhseShptLine);
      END;
    END;

    PROCEDURE SalesLine2ReceiptLine@2(WhseReceiptHeader@1000 : Record 7316;SalesLine@1001 : Record 37);
    VAR
      WhseReceiptLine@1002 : Record 7317;
    BEGIN
      WITH WhseReceiptLine DO BEGIN
        RESET;
        "No." := WhseReceiptHeader."No.";
        SETRANGE("No.","No.");
        LOCKTABLE;
        IF FIND('+') THEN;

        INIT;
        "Line No." := "Line No." + 10000;
        "Source Type" := DATABASE::"Sales Line";
        "Source Subtype" := SalesLine."Document Type";
        "Source No." := SalesLine."Document No.";
        "Source Line No." := SalesLine."Line No.";
        WhseMgt.GetSourceDocument("Source Document","Source Type","Source Subtype");
        "Location Code" := SalesLine."Location Code";
        "Item No." := SalesLine."No.";
        "Variant Code" := SalesLine."Variant Code";
        SalesLine.TESTFIELD("Unit of Measure Code");
        "Unit of Measure Code" := SalesLine."Unit of Measure Code";
        "Qty. per Unit of Measure" := SalesLine."Qty. per Unit of Measure";
        Description := SalesLine.Description;
        "Description 2" := SalesLine."Description 2";
        CASE SalesLine."Document Type" OF
          SalesLine."Document Type"::Order:
            BEGIN
              VALIDATE("Qty. Received",ABS(SalesLine."Quantity Shipped"));
              "Due Date" := SalesLine."Planned Shipment Date";
            END;
          SalesLine."Document Type"::"Return Order":
            BEGIN
              VALIDATE("Qty. Received",ABS(SalesLine."Return Qty. Received"));
              "Due Date" := WORKDATE;
            END;
        END;
        VALIDATE(Quantity,ABS(SalesLine.Quantity));
        "Starting Date" := SalesLine."Shipment Date";
        "Bin Code" := SalesLine."Bin Code";
        UpdateReceiptLine(WhseReceiptLine,WhseReceiptHeader);
        CreateReceiptLine(WhseReceiptLine);
      END;
    END;

    PROCEDURE FromPurchLine2ShptLine@12(WhseShptHeader@1000 : Record 7320;PurchLine@1001 : Record 39);
    VAR
      WhseShptLine@1002 : Record 7321;
    BEGIN
      WITH WhseShptLine DO BEGIN
        RESET;
        "No." := WhseShptHeader."No.";
        SETRANGE("No.","No.");
        LOCKTABLE;
        IF FIND('+') THEN;

        INIT;
        "Line No." := "Line No." + 10000;
        "Source Type" := DATABASE::"Purchase Line";
        "Source Subtype" := PurchLine."Document Type";
        "Source No." := PurchLine."Document No.";
        "Source Line No." := PurchLine."Line No.";
        WhseMgt.GetSourceDocument("Source Document","Source Type","Source Subtype");
        "Location Code" := PurchLine."Location Code";
        "Item No." := PurchLine."No.";
        "Variant Code" := PurchLine."Variant Code";
        PurchLine.TESTFIELD("Unit of Measure Code");
        "Unit of Measure Code" := PurchLine."Unit of Measure Code";
        "Qty. per Unit of Measure" := PurchLine."Qty. per Unit of Measure";
        Description := PurchLine.Description;
        "Description 2" := PurchLine."Description 2";
        VALIDATE(Quantity,ABS(PurchLine."Outstanding Quantity"));
        IF PurchLine."Document Type" = PurchLine."Document Type"::Order THEN
          "Due Date" := PurchLine."Expected Receipt Date";
        IF PurchLine."Document Type" = PurchLine."Document Type"::"Return Order" THEN
          "Due Date" := WORKDATE;
        IF WhseShptHeader."Shipment Date" = 0D THEN
          "Shipment Date" := PurchLine."Planned Receipt Date"
        ELSE
          "Shipment Date" := WhseShptHeader."Shipment Date";
        "Destination Type" := "Destination Type"::Vendor;
        "Destination No." := PurchLine."Buy-from Vendor No.";
        "Bin Code" := PurchLine."Bin Code";
        UpdateShptLine(WhseShptLine,WhseShptHeader);
        CreateShptLine(WhseShptLine);
      END;
    END;

    PROCEDURE PurchLine2ReceiptLine@4(WhseReceiptHeader@1000 : Record 7316;PurchLine@1001 : Record 39);
    VAR
      WhseReceiptLine@1002 : Record 7317;
    BEGIN
      WITH WhseReceiptLine DO BEGIN
        RESET;
        "No." := WhseReceiptHeader."No.";
        SETRANGE("No.","No.");
        LOCKTABLE;
        IF FIND('+') THEN;

        INIT;
        "Line No." := "Line No." + 10000;
        "Source Type" := DATABASE::"Purchase Line";
        "Source Subtype" := PurchLine."Document Type";
        "Source No." := PurchLine."Document No.";
        "Source Line No." := PurchLine."Line No.";
        WhseMgt.GetSourceDocument("Source Document","Source Type","Source Subtype");
        "Location Code" := PurchLine."Location Code";
        "Item No." := PurchLine."No.";
        "Variant Code" := PurchLine."Variant Code";
        PurchLine.TESTFIELD("Unit of Measure Code");
        "Unit of Measure Code" := PurchLine."Unit of Measure Code";
        "Qty. per Unit of Measure" := PurchLine."Qty. per Unit of Measure";
        Description := PurchLine.Description;
        "Description 2" := PurchLine."Description 2";
        CASE PurchLine."Document Type" OF
          PurchLine."Document Type"::Order:
            BEGIN
              VALIDATE("Qty. Received",ABS(PurchLine."Quantity Received"));
              "Due Date" := PurchLine."Expected Receipt Date";
            END;
          PurchLine."Document Type"::"Return Order":
            BEGIN
              VALIDATE("Qty. Received",ABS(PurchLine."Return Qty. Shipped"));
              "Due Date" := WORKDATE;
            END;
        END;
        VALIDATE(Quantity,ABS(PurchLine.Quantity));
        "Starting Date" := PurchLine."Planned Receipt Date";
        "Bin Code" := PurchLine."Bin Code";
        UpdateReceiptLine(WhseReceiptLine,WhseReceiptHeader);
        CreateReceiptLine(WhseReceiptLine);
      END;
    END;

    PROCEDURE FromTransLine2ShptLine@13(WhseShptHeader@1000 : Record 7320;TransLine@1001 : Record 5741);
    VAR
      WhseShptLine@1003 : Record 7321;
      TransHeader@1004 : Record 5740;
      Location@1005 : Record 14;
    BEGIN
      WITH WhseShptLine DO BEGIN
        RESET;
        "No." := WhseShptHeader."No.";
        SETRANGE("No.","No.");
        LOCKTABLE;
        IF FIND('+') THEN;

        INIT;
        "Line No." := "Line No." + 10000;
        "Source Type" := DATABASE::"Transfer Line";
        "Source No." := TransLine."Document No.";
        "Source Line No." := TransLine."Line No.";
        "Source Subtype" := 0;
        WhseMgt.GetSourceDocument("Source Document","Source Type","Source Subtype");
        "Item No." := TransLine."Item No.";
        "Variant Code" := TransLine."Variant Code";
        TransLine.TESTFIELD("Unit of Measure Code");
        "Unit of Measure Code" := TransLine."Unit of Measure Code";
        "Qty. per Unit of Measure" := TransLine."Qty. per Unit of Measure";
        Description := TransLine.Description;
        "Description 2" := TransLine."Description 2";
        "Location Code" := TransLine."Transfer-from Code";
        VALIDATE(Quantity,TransLine."Outstanding Quantity");
        "Due Date" := TransLine."Shipment Date";
        IF WhseShptHeader."Shipment Date" = 0D THEN
          "Shipment Date" := WORKDATE
        ELSE
          "Shipment Date" := WhseShptHeader."Shipment Date";
        "Destination Type" := "Destination Type"::Location;
        "Destination No." := TransLine."Transfer-to Code";
        IF TransHeader.GET(TransLine."Document No.") THEN
          "Shipping Advice" := TransHeader."Shipping Advice";
        "Bin Code" := TransLine."Transfer-from Bin Code";
        UpdateShptLine(WhseShptLine,WhseShptHeader);
        CreateShptLine(WhseShptLine);
      END;
    END;

    PROCEDURE TransLine2ReceiptLine@5(WhseReceiptHeader@1000 : Record 7316;TransLine@1001 : Record 5741);
    VAR
      WhseReceiptLine@1003 : Record 7317;
      Location@1005 : Record 14;
    BEGIN
      WITH WhseReceiptLine DO BEGIN
        RESET;
        "No." := WhseReceiptHeader."No.";
        SETRANGE("No.","No.");
        LOCKTABLE;
        IF FIND('+') THEN;

        INIT;
        "Line No." := "Line No." + 10000;
        "Source Type" := DATABASE::"Transfer Line";
        "Source No." := TransLine."Document No.";
        "Source Line No." := TransLine."Line No.";
        "Source Subtype" := 1;
        WhseMgt.GetSourceDocument("Source Document","Source Type","Source Subtype");
        "Item No." := TransLine."Item No.";
        "Variant Code" := TransLine."Variant Code";
        TransLine.TESTFIELD("Unit of Measure Code");
        "Unit of Measure Code" := TransLine."Unit of Measure Code";
        "Qty. per Unit of Measure" := TransLine."Qty. per Unit of Measure";
        Description := TransLine.Description;
        "Description 2" := TransLine."Description 2";
        "Location Code" := TransLine."Transfer-to Code";
        VALIDATE("Qty. Received",TransLine."Quantity Received");
        VALIDATE(Quantity,TransLine."Quantity Received" + TransLine."Qty. in Transit");
        "Due Date" := TransLine."Receipt Date";
        "Starting Date" := WORKDATE;
        "Bin Code" := TransLine."Transfer-To Bin Code";
        UpdateReceiptLine(WhseReceiptLine,WhseReceiptHeader);
        CreateReceiptLine(WhseReceiptLine);
      END;
    END;

    LOCAL PROCEDURE CreateShptLine@3(VAR WhseShptLine@1001 : Record 7321);
    VAR
      WhseShptHeader@1003 : Record 7320;
      Item@1002 : Record 27;
      ItemTrackingMgt@1005 : Codeunit 6500;
      WhseSourceType@1004 : ' ,Receipt,Shipment,Internal Put-away,Internal Pick,Production';
      WhseSNRequired@1006 : Boolean;
      WhseLNRequired@1007 : Boolean;
    BEGIN
      WITH WhseShptLine DO BEGIN
        Item."No." := "Item No.";
        Item.ItemSKUGet(Item,"Location Code","Variant Code");
        "Shelf No." := Item."Shelf/Bin No.";
        INSERT;
        IF WhseShptHeader.GET("No.") THEN
          WhseShptHeader.SortWhseDoc;
        ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",WhseSNRequired,WhseLNRequired,FALSE);
        IF WhseSNRequired OR WhseLNRequired THEN
          ItemTrackingMgt.InitItemTrkgForTempWkshLine(
            WhseSourceType::Shipment,"No.",
            "Line No.","Source Type",
            "Source Subtype","Source No.",
            "Source Line No.",0);
      END;
    END;

    LOCAL PROCEDURE CreateReceiptLine@7(VAR WhseReceiptLine@1001 : Record 7317);
    VAR
      WhseReceiptHeader@1003 : Record 7316;
      Item@1002 : Record 27;
    BEGIN
      WITH WhseReceiptLine DO BEGIN
        Item."No." := "Item No.";
        Item.ItemSKUGet(Item,"Location Code","Variant Code");
        "Shelf No." := Item."Shelf/Bin No.";
        Status := GetLineStatus;
        INSERT;
        IF WhseReceiptHeader.GET("No.") THEN
          WhseReceiptHeader.SortWhseDoc;
      END;
    END;

    LOCAL PROCEDURE UpdateShptLine@1(VAR WhseShptLine@1001 : Record 7321;WhseShptHeader@1000 : Record 7320);
    BEGIN
      WITH WhseShptLine DO BEGIN
        IF WhseShptHeader."Zone Code" <> '' THEN
          VALIDATE("Zone Code",WhseShptHeader."Zone Code");
        IF WhseShptHeader."Bin Code" <> '' THEN
          VALIDATE("Bin Code",WhseShptHeader."Bin Code");
      END;
    END;

    LOCAL PROCEDURE UpdateReceiptLine@8(VAR WhseReceiptLine@1001 : Record 7317;WhseReceiptHeader@1000 : Record 7316);
    BEGIN
      WITH WhseReceiptLine DO BEGIN
        IF WhseReceiptHeader."Zone Code" <> '' THEN
          VALIDATE("Zone Code",WhseReceiptHeader."Zone Code");
        IF WhseReceiptHeader."Bin Code" <> '' THEN
          VALIDATE("Bin Code",WhseReceiptHeader."Bin Code");
        IF WhseReceiptHeader."Cross-Dock Zone Code" <> '' THEN
          VALIDATE("Cross-Dock Zone Code",WhseReceiptHeader."Cross-Dock Zone Code");
        IF WhseReceiptHeader."Cross-Dock Bin Code" <> '' THEN
          VALIDATE("Cross-Dock Bin Code",WhseReceiptHeader."Cross-Dock Bin Code");
      END;
    END;

    PROCEDURE CheckIfFromSalesLine2ShptLine@19(SalesLine@1001 : Record 37) : Boolean;
    BEGIN
      SalesLine.CALCFIELDS("Whse. Outstanding Qty. (Base)");
      IF ABS(SalesLine."Outstanding Qty. (Base)") <= ABS(SalesLine."Whse. Outstanding Qty. (Base)") THEN
        EXIT;
      EXIT(TRUE);
    END;

    PROCEDURE CheckIfSalesLine2ReceiptLine@18(SalesLine@1001 : Record 37) : Boolean;
    VAR
      WhseReceiptLine@1002 : Record 7317;
    BEGIN
      WITH WhseReceiptLine DO BEGIN
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source Subtype",SalesLine."Document Type");
        SETRANGE("Source No.",SalesLine."Document No.");
        SETRANGE("Source Line No.",SalesLine."Line No.");
        CALCSUMS("Qty. Outstanding (Base)");
        IF ABS(SalesLine."Outstanding Qty. (Base)") <= ABS("Qty. Outstanding (Base)") THEN
          EXIT;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE CheckIfFromPurchLine2ShptLine@17(PurchLine@1001 : Record 39) : Boolean;
    VAR
      WhseShptLine@1000 : Record 7321;
    BEGIN
      WITH WhseShptLine DO BEGIN
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype",PurchLine."Document Type");
        SETRANGE("Source No.",PurchLine."Document No.");
        SETRANGE("Source Line No.",PurchLine."Line No.");
        CALCSUMS("Qty. Outstanding (Base)");
        IF ABS(PurchLine."Outstanding Qty. (Base)") <= "Qty. Outstanding (Base)" THEN
          EXIT;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE CheckIfPurchLine2ReceiptLine@16(PurchLine@1001 : Record 39) : Boolean;
    BEGIN
      PurchLine.CALCFIELDS("Whse. Outstanding Qty. (Base)");
      IF ABS(PurchLine."Outstanding Qty. (Base)") <= ABS(PurchLine."Whse. Outstanding Qty. (Base)") THEN
        EXIT;
      EXIT(TRUE);
    END;

    PROCEDURE CheckIfFromTransLine2ShptLine@15(TransLine@1001 : Record 5741) : Boolean;
    VAR
      Location@1005 : Record 14;
    BEGIN
      TransLine.CALCFIELDS("Whse Outbnd. Otsdg. Qty (Base)");

      IF Location.GetLocationSetup(TransLine."Transfer-from Code",Location) THEN
        IF Location."Use As In-Transit" THEN
          EXIT;
      IF TransLine."Outstanding Qty. (Base)" <= TransLine."Whse Outbnd. Otsdg. Qty (Base)" THEN
        EXIT;
      EXIT(TRUE);
    END;

    PROCEDURE CheckIfTransLine2ReceiptLine@14(TransLine@1001 : Record 5741) : Boolean;
    VAR
      Location@1005 : Record 14;
    BEGIN
      TransLine.CALCFIELDS("Whse. Inbnd. Otsdg. Qty (Base)");

      IF Location.GetLocationSetup(TransLine."Transfer-to Code",Location) THEN
        IF Location."Use As In-Transit" THEN
          EXIT;
      IF TransLine."Qty. in Transit (Base)" <= TransLine."Whse. Inbnd. Otsdg. Qty (Base)" THEN
        EXIT;

      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}
