OBJECT Codeunit 396 NoSeriesManagement
{
  OBJECT-PROPERTIES
  {
    Date=02/10/12;
    Time=12:00:00;
    Modified=Yes;
    Version List=AIC2009,NAVW15.00;
  }
  PROPERTIES
  {
    Permissions=TableData 309=rimd;
    OnRun=BEGIN
            TryNo := GetNextNo(TryNoSeriesCode,TrySeriesDate,FALSE);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU="You may not enter numbers manually. ";ESP="No puede introducir n£meros de forma manual. "';
      Text001@1001 : TextConst 'ENU=If you want to enter numbers manually, please activate %1 in %2 %3.;ESP=Si desea introducir n£meros manualmente, active %1 en %2 %3.';
      Text002@1002 : TextConst 'ENU="It is not possible to assign numbers automatically. ";ESP="No es posible asignar n£meros de manera autom tica. "';
      Text003@1003 : TextConst 'ENU=If you want the program to assign numbers automatically, please activate %1 in %2 %3.;ESP=Si desea que el programa asigne n£meros de manera autom tica, active %1 en %2 %3';
      Text004@1004 : TextConst 'ENU=You cannot assign new numbers from the number series %1 on %2.;ESP=No puede asignar n£meros nuevos de la serie %1 en la %2.';
      Text005@1005 : TextConst 'ENU=You cannot assign new numbers from the number series %1.;ESP=No puede asignar n£meros nuevos de la serie %1.';
      Text006@1006 : TextConst 'ENU=You cannot assign new numbers from the number series %1 on a date before %2.;ESP=No puede asignar n£meros nuevos de la serie %1 en una fecha anterior a %2.';
      Text007@1007 : TextConst 'ENU=You cannot assign numbers greater than %1 from the number series %2.;ESP=No puede asignar n£meros mayores que %1 de la serie %2.';
      Text008@1008 : TextConst 'ENU=%1 must contain a number.;ESP=%1 debe contener un n£mero.';
      Text009@1009 : TextConst 'ENU=The number format in %1 must be the same as the number format in %2.;ESP=El formato de n£mero en %1 debe ser igual que en %2.';
      Text010@1010 : TextConst 'ENU=The number %1 cannot be extended to more than 20 characters.;ESP=El n£mero %1 no puede superar 20 caracteres.';
      NoSeries@1011 : Record 308;
      LastNoSeriesLine@1012 : Record 309;
      NoSeriesCode@1013 : Code[10];
      WarningNoSeriesCode@1014 : Code[10];
      TryNoSeriesCode@1015 : Code[10];
      TrySeriesDate@1016 : Date;
      TryNo@1017 : Code[20];

    PROCEDURE TestManual@21(DefaultNoSeriesCode@1000 : Code[10]);
    BEGIN
      IF DefaultNoSeriesCode <> '' THEN BEGIN
        NoSeries.GET(DefaultNoSeriesCode);
        IF NOT NoSeries."Manual Nos." THEN
          ERROR(
            Text000 +
            Text001,
            NoSeries.FIELDCAPTION("Manual Nos."),NoSeries.TABLECAPTION,NoSeries.Code);
      END;
    END;

    PROCEDURE InitSeries@3(DefaultNoSeriesCode@1000 : Code[10];OldNoSeriesCode@1001 : Code[10];NewDate@1002 : Date;VAR NewNo@1003 : Code[20];VAR NewNoSeriesCode@1004 : Code[10]);
    BEGIN
      IF NewNo = '' THEN BEGIN
        NoSeries.GET(DefaultNoSeriesCode);
        IF NOT NoSeries."Default Nos." THEN
          ERROR(
            Text002 +
            Text003,
            NoSeries.FIELDCAPTION("Default Nos."),NoSeries.TABLECAPTION,NoSeries.Code);
        IF OldNoSeriesCode <> '' THEN BEGIN
          NoSeriesCode := DefaultNoSeriesCode;
          FilterSeries;
          NoSeries.Code := OldNoSeriesCode;
          IF NOT NoSeries.FIND THEN
            NoSeries.GET(DefaultNoSeriesCode);
        END;
        NewNo := GetNextNo(NoSeries.Code,NewDate,TRUE);
        NewNoSeriesCode := NoSeries.Code;
      END ELSE
        TestManual(DefaultNoSeriesCode);
    END;

    PROCEDURE SetDefaultSeries@5(VAR NewNoSeriesCode@1000 : Code[10];NoSeriesCode@1001 : Code[10]);
    BEGIN
      IF NoSeriesCode <> '' THEN BEGIN
        NoSeries.GET(NoSeriesCode);
        IF NoSeries."Default Nos." THEN
          NewNoSeriesCode := NoSeries.Code;
      END;
    END;

    PROCEDURE SelectSeries@2(DefaultNoSeriesCode@1000 : Code[10];OldNoSeriesCode@1001 : Code[10];VAR NewNoSeriesCode@1002 : Code[10]) : Boolean;
    BEGIN
      NoSeriesCode := DefaultNoSeriesCode;
      FilterSeries;
      IF NewNoSeriesCode = '' THEN BEGIN
        IF OldNoSeriesCode <> '' THEN
          NoSeries.Code := OldNoSeriesCode;
      END ELSE
        NoSeries.Code := NewNoSeriesCode;
      IF FORM.RUNMODAL(0,NoSeries) = ACTION::LookupOK THEN BEGIN
        NewNoSeriesCode := NoSeries.Code;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE LookupSeries@16(DefaultNoSeriesCode@1000 : Code[10];VAR NewNoSeriesCode@1001 : Code[10]) : Boolean;
    BEGIN
      EXIT(SelectSeries(DefaultNoSeriesCode,NewNoSeriesCode,NewNoSeriesCode));
    END;

    PROCEDURE TestSeries@8(DefaultNoSeriesCode@1000 : Code[10];NewNoSeriesCode@1001 : Code[10]);
    BEGIN
      NoSeriesCode := DefaultNoSeriesCode;
      FilterSeries;
      NoSeries.Code := NewNoSeriesCode;
      NoSeries.FIND;
    END;

    PROCEDURE SetSeries@6(VAR NewNo@1000 : Code[20]);
    VAR
      NoSeriesCode2@1001 : Code[10];
    BEGIN
      NoSeriesCode2 := NoSeries.Code;
      FilterSeries;
      NoSeries.Code := NoSeriesCode2;
      NoSeries.FIND;
      NewNo := GetNextNo(NoSeries.Code,0D,TRUE);
    END;

    LOCAL PROCEDURE FilterSeries@1();
    VAR
      NoSeriesRelationship@1000 : Record 310;
    BEGIN
      NoSeries.RESET;
      NoSeriesRelationship.SETRANGE(Code,NoSeriesCode);
      IF NoSeriesRelationship.FINDSET THEN
        REPEAT
          NoSeries.Code := NoSeriesRelationship."Series Code";
          NoSeries.MARK := TRUE;
        UNTIL NoSeriesRelationship.NEXT = 0;
      NoSeries.GET(NoSeriesCode);
      NoSeries.MARK := TRUE;
      NoSeries.MARKEDONLY := TRUE;
    END;

    PROCEDURE GetNextNo@12(NoSeriesCode@1000 : Code[10];SeriesDate@1001 : Date;ModifySeries@1002 : Boolean) : Code[20];
    VAR
      NoSeriesLine@1003 : Record 309;
    BEGIN
      IF SeriesDate = 0D THEN
        SeriesDate := WORKDATE;

      IF ModifySeries OR (LastNoSeriesLine."Series Code" = '') THEN BEGIN
        IF ModifySeries THEN
          NoSeriesLine.LOCKTABLE;
        NoSeries.GET(NoSeriesCode);
        SetNoSeriesLineFilter(NoSeriesLine,NoSeriesCode,SeriesDate);
        IF NOT NoSeriesLine.FINDFIRST THEN BEGIN
          NoSeriesLine.SETRANGE("Starting Date");
          IF NOT NoSeriesLine.ISEMPTY THEN
            ERROR(
              Text004,
              NoSeriesCode,SeriesDate);
          ERROR(
            Text005,
            NoSeriesCode);
        END;
      END ELSE
        NoSeriesLine := LastNoSeriesLine;

      IF NoSeries."Date Order" AND (SeriesDate < NoSeriesLine."Last Date Used") THEN
        ERROR(
          Text006,
          NoSeries.Code,NoSeriesLine."Last Date Used");
      NoSeriesLine."Last Date Used" := SeriesDate;
      IF NoSeriesLine."Last No. Used" = '' THEN BEGIN
        NoSeriesLine.TESTFIELD("Starting No.");
        NoSeriesLine."Last No. Used" := NoSeriesLine."Starting No.";
      END ELSE
        IF NoSeriesLine."Increment-by No." <= 1 THEN
          NoSeriesLine."Last No. Used" := INCSTR(NoSeriesLine."Last No. Used")
        ELSE
          IncrementNoText(NoSeriesLine."Last No. Used",NoSeriesLine."Increment-by No.");
      IF (NoSeriesLine."Ending No." <> '') AND
         (NoSeriesLine."Last No. Used" > NoSeriesLine."Ending No.")
      THEN
        ERROR(
          Text007,
          NoSeriesLine."Ending No.",NoSeriesCode);
      IF (NoSeriesLine."Ending No." <> '') AND
         (NoSeriesLine."Warning No." <> '') AND
         (NoSeriesLine."Last No. Used" >= NoSeriesLine."Warning No.") AND
         (NoSeriesCode <> WarningNoSeriesCode) AND
         (TryNoSeriesCode = '')
      THEN BEGIN
        WarningNoSeriesCode := NoSeriesCode;
        MESSAGE(
          Text007,
          NoSeriesLine."Ending No.",NoSeriesCode);
      END;
      NoSeriesLine.VALIDATE(Open);

      IF ModifySeries THEN
        NoSeriesLine.MODIFY
      ELSE
        LastNoSeriesLine := NoSeriesLine;
      EXIT(NoSeriesLine."Last No. Used");
    END;

    PROCEDURE TryGetNextNo@10(NoSeriesCode@1000 : Code[10];SeriesDate@1001 : Date) : Code[20];
    VAR
      NoSeriesMgt@1002 : Codeunit 396;
    BEGIN
      NoSeriesMgt.GetNextNo1(NoSeriesCode,SeriesDate);
      IF NoSeriesMgt.RUN THEN
        EXIT(NoSeriesMgt.GetNextNo2);
    END;

    PROCEDURE GetNextNo1@19(NoSeriesCode@1000 : Code[10];SeriesDate@1001 : Date) : Code[20];
    BEGIN
      TryNoSeriesCode := NoSeriesCode;
      TrySeriesDate := SeriesDate;
    END;

    PROCEDURE GetNextNo2@17() : Code[20];
    BEGIN
      EXIT(TryNo);
    END;

    PROCEDURE SaveNoSeries@18();
    BEGIN
      IF LastNoSeriesLine."Series Code" <> '' THEN
        LastNoSeriesLine.MODIFY;
    END;

    PROCEDURE SetNoSeriesLineFilter@11(VAR NoSeriesLine@1000 : Record 309;NoSeriesCode@1001 : Code[10];StartDate@1002 : Date);
    BEGIN
      IF StartDate = 0D THEN
        StartDate := WORKDATE;
      NoSeriesLine.RESET;
      NoSeriesLine.SETCURRENTKEY("Series Code","Starting Date");
      NoSeriesLine.SETRANGE("Series Code",NoSeriesCode);
      NoSeriesLine.SETRANGE("Starting Date",0D,StartDate);
      IF NoSeriesLine.FINDLAST THEN BEGIN
        NoSeriesLine.SETRANGE("Starting Date",NoSeriesLine."Starting Date");
        NoSeriesLine.SETRANGE(Open,TRUE);
      END;
    END;

    LOCAL PROCEDURE IncrementNoText@20(VAR No@1000 : Code[20];IncrementByNo@1001 : Decimal);
    VAR
      DecimalNo@1002 : Decimal;
      StartPos@1003 : Integer;
      EndPos@1004 : Integer;
      NewNo@1005 : Text[30];
    BEGIN
      GetIntegerPos(No,StartPos,EndPos);
      EVALUATE(DecimalNo,COPYSTR(No,StartPos,EndPos - StartPos + 1));
      NewNo := FORMAT(DecimalNo + IncrementByNo,0,1);
      ReplaceNoText(No,NewNo,0,StartPos,EndPos);
    END;

    PROCEDURE UpdateNoSeriesLine@15(VAR NoSeriesLine@1000 : Record 309;NewNo@1001 : Code[20];NewFieldName@1002 : Text[100]);
    VAR
      NoSeriesLine2@1003 : Record 309;
      Length@1004 : Integer;
    BEGIN
      IF NewNo <> '' THEN BEGIN
        IF INCSTR(NewNo) = '' THEN
          ERROR(Text008,NewFieldName);
        NoSeriesLine2 := NoSeriesLine;
        IF NewNo = GetNoText(NewNo) THEN
          Length := 0
        ELSE BEGIN
          Length := STRLEN(GetNoText(NewNo));
          UpdateLength(NoSeriesLine."Starting No.",Length);
          UpdateLength(NoSeriesLine."Ending No.",Length);
          UpdateLength(NoSeriesLine."Last No. Used",Length);
          UpdateLength(NoSeriesLine."Warning No.",Length);
        END;
        UpdateNo(NoSeriesLine."Starting No.",NewNo,Length);
        UpdateNo(NoSeriesLine."Ending No.",NewNo,Length);
        UpdateNo(NoSeriesLine."Last No. Used",NewNo,Length);
        UpdateNo(NoSeriesLine."Warning No.",NewNo,Length);
        IF (NewFieldName <> NoSeriesLine.FIELDCAPTION("Last No. Used")) AND
           (NoSeriesLine."Last No. Used" <> NoSeriesLine2."Last No. Used")
        THEN
          ERROR(
            Text009,
            NewFieldName,NoSeriesLine.FIELDCAPTION("Last No. Used"));
      END;
    END;

    LOCAL PROCEDURE UpdateLength@13(No@1000 : Code[20];VAR MaxLength@1001 : Integer);
    VAR
      Length@1002 : Integer;
    BEGIN
      IF No <> '' THEN BEGIN
        Length := STRLEN(DELCHR(GetNoText(No),'<','0'));
        IF Length > MaxLength THEN
          MaxLength := Length;
      END;
    END;

    LOCAL PROCEDURE UpdateNo@14(VAR No@1000 : Code[20];NewNo@1001 : Code[20];Length@1002 : Integer);
    VAR
      StartPos@1003 : Integer;
      EndPos@1004 : Integer;
      TempNo@1005 : Code[20];
    BEGIN
      IF No <> '' THEN BEGIN
        IF Length <> 0 THEN BEGIN
          No := DELCHR(GetNoText(No),'<','0');
          TempNo := No;
          No := NewNo;
          NewNo := TempNo;
          GetIntegerPos(No,StartPos,EndPos);
          ReplaceNoText(No,NewNo,Length,StartPos,EndPos);
        END;
      END;
    END;

    LOCAL PROCEDURE ReplaceNoText@7(VAR No@1000 : Code[20];NewNo@1001 : Code[20];FixedLength@1002 : Integer;StartPos@1003 : Integer;EndPos@1004 : Integer);
    VAR
      StartNo@1005 : Code[20];
      EndNo@1006 : Code[20];
      ZeroNo@1007 : Code[20];
      NewLength@1008 : Integer;
      OldLength@1009 : Integer;
    BEGIN
      IF StartPos > 1 THEN
        StartNo := COPYSTR(No,1,StartPos - 1);
      IF EndPos < STRLEN(No) THEN
        EndNo := COPYSTR(No,EndPos + 1);
      NewLength := STRLEN(NewNo);
      OldLength := EndPos - StartPos + 1;
      IF FixedLength > OldLength THEN
        OldLength := FixedLength;
      IF OldLength > NewLength THEN
        ZeroNo := PADSTR('',OldLength - NewLength,'0');
      IF STRLEN(StartNo) + STRLEN(ZeroNo) + STRLEN(NewNo) + STRLEN(EndNo)  > 20 THEN
        ERROR(
          Text010,
          No);
      No := StartNo + ZeroNo + NewNo + EndNo;
    END;

    LOCAL PROCEDURE GetNoText@9(No@1000 : Code[20]) : Code[20];
    VAR
      StartPos@1001 : Integer;
      EndPos@1002 : Integer;
    BEGIN
      GetIntegerPos(No,StartPos,EndPos);
      IF StartPos <> 0 THEN
        EXIT(COPYSTR(No,StartPos,EndPos - StartPos + 1));
    END;

    LOCAL PROCEDURE GetIntegerPos@4(No@1000 : Code[20];VAR StartPos@1001 : Integer;VAR EndPos@1002 : Integer);
    VAR
      IsDigit@1003 : Boolean;
      i@1004 : Integer;
    BEGIN
      StartPos := 0;
      EndPos := 0;
      IF No <> '' THEN BEGIN
        i := STRLEN(No);
        REPEAT
          IsDigit := No[i] IN ['0'..'9'];
          IF IsDigit THEN BEGIN
            IF EndPos = 0 THEN
              EndPos := i;
            StartPos := i;
          END;
          i := i - 1;
        UNTIL (i = 0) OR (StartPos <> 0) AND NOT IsDigit;
      END;
    END;

    BEGIN
    END.
  }
}
