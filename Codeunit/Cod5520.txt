OBJECT Codeunit 5520 Get Unplanned Demand
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    TableNo=5520;
    OnRun=BEGIN
            DELETEALL;
            SalesLine.SETFILTER(
              "Document Type",'%1|%2',
              SalesLine."Document Type"::Order,
              SalesLine."Document Type"::"Return Order");
            ProdOrderComp.SETFILTER(
              Status,'%1|%2|%3',
              ProdOrderComp.Status::Planned,
              ProdOrderComp.Status::"Firm Planned",
              ProdOrderComp.Status::Released);
            OpenWindow(Text000,SalesLine.COUNT + ProdOrderComp.COUNT);
            GetUnplannedSalesLine(Rec);
            GetUnplannedProdOrderComp(Rec);
            Window.CLOSE;

            RESET;
            SETCURRENTKEY("Demand Date",Level);
            SETRANGE(Level,1);
            OpenWindow(Text000,COUNT);
            CalcNeededDemands(Rec);
            Window.CLOSE;
          END;

  }
  CODE
  {
    VAR
      SalesLine@1000 : Record 37;
      ProdOrderComp@1002 : Record 5407;
      Text000@1004 : TextConst 'ENU=Determining Unplanned Orders @1@@@@@@@;ESP=Determ. pedidos no program.  @1@@@@@@@';
      Window@1009 : Dialog;
      WindowUpdateTime@1008 : Time;
      NoOfRecords@1005 : Integer;
      i@1003 : Integer;
      DemandQtyBase@1001 : Decimal;

    PROCEDURE GetUnplannedSalesLine@5(VAR UnplannedDemand@1000 : Record 5520);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      WITH UnplannedDemand DO
        IF SalesLine.FIND('-') THEN
          REPEAT
            UpdateWindow;

            DemandQtyBase := GetSalesLineNeededQty(SalesLine);
            IF DemandQtyBase > 0 THEN BEGIN
              IF NOT ((SalesLine."Document Type" = "Demand SubType") AND
                      (SalesLine."Document No." = "Demand Order No."))
              THEN BEGIN
                SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");

                INIT;
                "Demand Type" := "Demand Type"::Sales;
                "Demand SubType" := SalesLine."Document Type";
                VALIDATE("Demand Order No.",SalesLine."Document No.");
                Status := SalesHeader.Status;
                Level := 0;
                INSERT;
              END;
              InsertSalesLine(UnplannedDemand);
            END;
          UNTIL SalesLine.NEXT = 0;
    END;

    PROCEDURE GetUnplannedProdOrderComp@6(VAR UnplannedDemand@1000 : Record 5520);
    BEGIN
      WITH UnplannedDemand DO
        IF ProdOrderComp.FIND('-') THEN
          REPEAT
            UpdateWindow;

            DemandQtyBase := GetProdOrderCompNeededQty(ProdOrderComp);
            IF DemandQtyBase > 0 THEN BEGIN
              IF NOT ((ProdOrderComp.Status = "Demand SubType") AND
                      (ProdOrderComp."Prod. Order No." = "Demand Order No."))
              THEN BEGIN
                INIT;
                "Demand Type" := "Demand Type"::Production;
                "Demand SubType" := ProdOrderComp.Status;
                VALIDATE("Demand Order No.",ProdOrderComp."Prod. Order No.");
                Status := ProdOrderComp.Status;
                Level := 0;
                INSERT;
              END;
              InsertProdOrderCompLine(UnplannedDemand);
            END;
          UNTIL ProdOrderComp.NEXT = 0;
    END;

    PROCEDURE GetSalesLineNeededQty@1(SalesLine@1000 : Record 37) : Decimal;
    BEGIN
      WITH SalesLine DO BEGIN
        IF Planned OR ("No." = '') OR (Type <> Type::Item) OR "Drop Shipment" OR "Special Order" THEN
          EXIT(0);

        CALCFIELDS("Reserved Qty. (Base)");
        EXIT(-SignedXX("Outstanding Qty. (Base)" - "Reserved Qty. (Base)"));
      END;
    END;

    PROCEDURE GetProdOrderCompNeededQty@2(ProdOrderComp@1000 : Record 5407) : Decimal;
    BEGIN
      WITH ProdOrderComp DO BEGIN
        IF "Item No." = '' THEN
          EXIT(0);

        CALCFIELDS("Reserved Qty. (Base)");
        EXIT("Remaining Qty. (Base)" - "Reserved Qty. (Base)");
      END;
    END;

    PROCEDURE InsertSalesLine@4(VAR UnplannedDemand@1000 : Record 5520);
    VAR
      UnplannedDemand2@1001 : Record 5520;
    BEGIN
      WITH UnplannedDemand DO BEGIN
        UnplannedDemand2.COPY(UnplannedDemand);

        "Demand Line No." := SalesLine."Line No.";
        "Demand Ref. No." := 0;
        "Item No." := SalesLine."No.";
        Description := SalesLine.Description;
        "Variant Code" := SalesLine."Variant Code";
        "Location Code" := SalesLine."Location Code";
        "Bin Code" := SalesLine."Bin Code";
        "Qty. per Unit of Measure" := SalesLine."Qty. per Unit of Measure";
        "Unit of Measure Code" := SalesLine."Unit of Measure Code";
        Reserve := SalesLine.Reserve = SalesLine.Reserve::Always;
        "Special Order" := SalesLine."Special Order";
        "Purchasing Code" := SalesLine."Purchasing Code";
        Level := 1;

        "Quantity (Base)" := DemandQtyBase;
        "Demand Date" := SalesLine."Shipment Date";
        IF "Demand Date" = 0D THEN
          "Demand Date" := WORKDATE;

        INSERT;

        COPY(UnplannedDemand2);
      END;
    END;

    PROCEDURE InsertProdOrderCompLine@7(VAR UnplannedDemand@1001 : Record 5520);
    VAR
      UnplannedDemand2@1000 : Record 5520;
      Item@1002 : Record 27;
    BEGIN
      WITH UnplannedDemand DO BEGIN
        UnplannedDemand2.COPY(UnplannedDemand);

        "Demand Line No." := ProdOrderComp."Prod. Order Line No.";
        "Demand Ref. No." := ProdOrderComp."Line No.";
        "Item No." := ProdOrderComp."Item No.";
        Description := ProdOrderComp.Description;
        "Variant Code" := ProdOrderComp."Variant Code";
        "Location Code" := ProdOrderComp."Location Code";
        "Bin Code" := ProdOrderComp."Bin Code";
        "Qty. per Unit of Measure" := ProdOrderComp."Qty. per Unit of Measure";
        "Unit of Measure Code" := ProdOrderComp."Unit of Measure Code";
        Item.GET("Item No.");
        Reserve :=
          (Item.Reserve = Item.Reserve::Always) AND
          NOT (("Demand Type" = "Demand Type"::Production) AND
               ("Demand SubType" = ProdOrderComp.Status::Planned));
        Level := 1;

        "Quantity (Base)" := DemandQtyBase;
        "Demand Date" := ProdOrderComp."Due Date";
        IF "Demand Date" = 0D THEN
          "Demand Date" := WORKDATE;

        INSERT;

        COPY(UnplannedDemand2);
      END;
    END;

    PROCEDURE CalcNeededDemands@10(VAR UnplannedDemand@1000 : Record 5520);
    VAR
      TempUnplannedDemand@1004 : TEMPORARY Record 5520;
      OrderPlanningMgt@1002 : Codeunit 5522;
      HeaderExists@1005 : Boolean;
    BEGIN
      WITH TempUnplannedDemand DO BEGIN
        UnplannedDemand.RESET;
        MoveUnplannedDemand(UnplannedDemand,TempUnplannedDemand);

        SETCURRENTKEY("Demand Date",Level);
        SETRANGE(Level,1);
        WHILE FIND('-') DO BEGIN
          HeaderExists := FALSE;
          REPEAT
            UpdateWindow;
            UnplannedDemand := TempUnplannedDemand;
            IF UnplannedDemand."Special Order" THEN
              UnplannedDemand."Needed Qty. (Base)" := "Quantity (Base)"
            ELSE
              UnplannedDemand."Needed Qty. (Base)" :=
                OrderPlanningMgt.CalcNeededQty(
                  OrderPlanningMgt.CalcATPQty("Item No.","Variant Code","Location Code","Demand Date") +
                  CalcUnplannedDemandInSameDay(TempUnplannedDemand) +
                  CalcPlannedDemand(UnplannedDemand),
                  "Quantity (Base)");

            IF UnplannedDemand."Needed Qty. (Base)" > 0 THEN BEGIN
              UnplannedDemand.INSERT;
              IF NOT HeaderExists THEN BEGIN
                InsertUnplannedDemandHeader(TempUnplannedDemand,UnplannedDemand);
                HeaderExists := TRUE;
                SETRANGE("Demand Type","Demand Type");
                SETRANGE("Demand SubType","Demand SubType");
                SETRANGE("Demand Order No.","Demand Order No.");
              END;
            END;
            DELETE;
          UNTIL NEXT = 0;
          SETRANGE("Demand Type");
          SETRANGE("Demand SubType");
          SETRANGE("Demand Order No.");
        END;
      END;
    END;

    PROCEDURE CalcPlannedDemand@9(VAR UnplannedDemand@1000 : Record 5520) DemandQty : Decimal;
    VAR
      UnplannedDemand2@1002 : Record 5520;
    BEGIN
      WITH UnplannedDemand DO BEGIN
        UnplannedDemand2.COPY(UnplannedDemand);
        RESET;
        SETCURRENTKEY("Item No.","Variant Code","Location Code","Demand Date");
        SETRANGE("Item No.","Item No.");
        SETRANGE("Variant Code","Variant Code");
        SETRANGE("Location Code","Location Code");
        SETRANGE("Demand Date",0D,"Demand Date");

        CALCSUMS("Needed Qty. (Base)");
        DemandQty := "Needed Qty. (Base)";
        COPY(UnplannedDemand2);
      END;
    END;

    PROCEDURE CalcUnplannedDemandInSameDay@8(VAR UnplannedDemand@1000 : Record 5520) DemandQty : Decimal;
    VAR
      UnplannedDemand2@1002 : Record 5520;
    BEGIN
      WITH UnplannedDemand DO BEGIN
        UnplannedDemand2.COPY(UnplannedDemand);
        RESET;
        SETCURRENTKEY("Item No.","Variant Code","Location Code","Demand Date");
        SETRANGE("Item No.","Item No.");
        SETRANGE("Variant Code","Variant Code");
        SETRANGE("Location Code","Location Code");
        SETRANGE("Demand Date","Demand Date");

        CALCSUMS("Quantity (Base)");
        DemandQty := "Quantity (Base)";

        COPY(UnplannedDemand2);
      END;
    END;

    PROCEDURE MoveUnplannedDemand@11(VAR FromUnplannedDemand@1000 : Record 5520;VAR ToUnplannedDemand@1001 : Record 5520);
    BEGIN
      WITH FromUnplannedDemand DO BEGIN
        ToUnplannedDemand.DELETEALL;
        IF FIND('-') THEN
          REPEAT
            ToUnplannedDemand := FromUnplannedDemand;
            ToUnplannedDemand.INSERT;
            DELETE;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE InsertUnplannedDemandHeader@18(VAR FromUnplannedDemand@1001 : Record 5520;VAR ToUnplannedDemand@1000 : Record 5520);
    VAR
      UnplannedDemand2@1002 : Record 5520;
    BEGIN
      UnplannedDemand2.COPY(FromUnplannedDemand);

      WITH FromUnplannedDemand DO BEGIN
        RESET;
        SETRANGE("Demand Type","Demand Type");
        SETRANGE("Demand SubType","Demand SubType");
        SETRANGE("Demand Order No.","Demand Order No.");
        SETRANGE(Level,0);
        FIND('-');


        ToUnplannedDemand := FromUnplannedDemand;
        ToUnplannedDemand."Demand Date" := UnplannedDemand2."Demand Date";
        ToUnplannedDemand.INSERT;
      END;

      FromUnplannedDemand.COPY(UnplannedDemand2);
    END;

    PROCEDURE OpenWindow@12(DisplayText@1001 : Text[250];NoOfRecords2@1000 : Integer);
    BEGIN
      i := 0;
      NoOfRecords := NoOfRecords2;
      WindowUpdateTime := TIME;
      Window.OPEN(DisplayText);
    END;

    PROCEDURE UpdateWindow@3();
    BEGIN
      i := i + 1;
      IF TIME - WindowUpdateTime >= 300 THEN BEGIN
        WindowUpdateTime := TIME;
        Window.UPDATE(1,ROUND(i / NoOfRecords * 10000,1));
      END;
    END;

    BEGIN
    END.
  }
}
