OBJECT Codeunit 7308 Replenishment
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=must not be %1.;ESP=no debe ser %1.';
      Bin@1011 : Record 7354;
      BinType@1008 : Record 7303;
      TempWhseWkshLine@1017 : TEMPORARY Record 7326;
      ItemUnitOfMeasure@1009 : Record 5404;
      Location@1003 : Record 14;
      WhseWkshTemplateName@1016 : Code[10];
      WhseWkshName@1015 : Code[10];
      LocationCode@1018 : Code[10];
      RemainQtyToReplenishBase@1001 : Decimal;
      NextLineNo@1002 : Integer;
      HideDialog@1012 : Boolean;
      DoNotFillQtytoHandle@1004 : Boolean;

    PROCEDURE ReplenishBin@13(ToBinContent@1000 : Record 7302;AllowBreakBulk@1002 : Boolean);
    BEGIN
      WITH ToBinContent DO BEGIN
        IF NOT Fixed THEN
          FIELDERROR(Fixed,STRSUBSTNO(Text000,FIELDCAPTION(Fixed)));

        IF BinBlockedInbound("Location Code","Bin Code") THEN
          Bin.FIELDERROR("Block Movement",STRSUBSTNO(Text000,Bin."Block Movement"));

        IF NOT NeedToReplenish(0) THEN
          EXIT;

        RemainQtyToReplenishBase := CalcQtyToReplenish(0);
        IF RemainQtyToReplenishBase <= 0 THEN
          EXIT;

        FindReplenishmtBin(ToBinContent,AllowBreakBulk);
      END;
    END;

    LOCAL PROCEDURE FindReplenishmtBin@15(ToBinContent@1000 : Record 7302;AllowBreakBulk@1001 : Boolean);
    VAR
      FromBinContent@1002 : Record 7302;
      TempWhseWkshLine2@1003 : TEMPORARY Record 7326;
      QtyAvailToPickBase@1004 : Decimal;
      MovementQtyBase@1005 : Decimal;
    BEGIN
      WITH ToBinContent DO BEGIN
        FromBinContent.RESET;
        FromBinContent.SETCURRENTKEY(
          "Location Code","Item No.","Variant Code","Cross-Dock Bin",
          "Qty. per Unit of Measure","Bin Ranking");
        FromBinContent.ASCENDING(FALSE);
        FromBinContent.SETRANGE("Location Code","Location Code");
        FromBinContent.SETRANGE("Item No.","Item No.");
        FromBinContent.SETRANGE("Variant Code","Variant Code");
        FromBinContent.SETRANGE("Cross-Dock Bin",FALSE);
        FromBinContent.SETRANGE("Qty. per Unit of Measure","Qty. per Unit of Measure");
        FromBinContent.SETFILTER("Bin Ranking",'<%1',"Bin Ranking");
        IF FromBinContent.FIND('-') THEN BEGIN
          TempWhseWkshLine2.COPY(TempWhseWkshLine);
          TempWhseWkshLine.SETCURRENTKEY(
            "Item No.","From Bin Code","Location Code","Variant Code","From Unit of Measure Code");
          TempWhseWkshLine.SETRANGE("Item No.",FromBinContent."Item No.");
          TempWhseWkshLine.SETRANGE("Location Code",FromBinContent."Location Code");
          TempWhseWkshLine.SETRANGE("Variant Code",FromBinContent."Variant Code");
          REPEAT
            IF UseForReplenishment(FromBinContent) THEN BEGIN
              QtyAvailToPickBase := FromBinContent.CalcQtyAvailToPick(0);
              TempWhseWkshLine.SETRANGE("From Bin Code",FromBinContent."Bin Code");
              TempWhseWkshLine.SETRANGE("From Unit of Measure Code",FromBinContent."Unit of Measure Code");
              TempWhseWkshLine.CALCSUMS("Qty. (Base)");
              QtyAvailToPickBase := QtyAvailToPickBase - TempWhseWkshLine."Qty. (Base)";

              IF QtyAvailToPickBase > 0 THEN BEGIN
                IF QtyAvailToPickBase < RemainQtyToReplenishBase THEN
                  MovementQtyBase := QtyAvailToPickBase
                ELSE
                  MovementQtyBase := RemainQtyToReplenishBase;
                CreateWhseWkshLine(ToBinContent,FromBinContent,MovementQtyBase);
                RemainQtyToReplenishBase := RemainQtyToReplenishBase - MovementQtyBase;
              END;
            END;
          UNTIL (FromBinContent.NEXT = 0) OR (RemainQtyToReplenishBase = 0);
          TempWhseWkshLine.COPY(TempWhseWkshLine2);
        END;
      END;

      IF AllowBreakBulk THEN
        IF RemainQtyToReplenishBase > 0 THEN
          FindBreakbulkBin(ToBinContent);
    END;

    LOCAL PROCEDURE FindBreakbulkBin@1(ToBinContent@1000 : Record 7302);
    VAR
      FromBinContent@1001 : Record 7302;
      TempWhseWkshLine2@1002 : TEMPORARY Record 7326;
      QtyAvailToPickBase@1004 : Decimal;
      MovementQtyBase@1003 : Decimal;
    BEGIN
      ItemUnitOfMeasure.RESET;
      ItemUnitOfMeasure.SETCURRENTKEY("Item No.","Qty. per Unit of Measure");
      ItemUnitOfMeasure.SETRANGE("Item No.",ToBinContent."Item No.");
      ItemUnitOfMeasure.SETFILTER(
        "Qty. per Unit of Measure",'>%1',ToBinContent."Qty. per Unit of Measure");
      IF ItemUnitOfMeasure.FIND('-') THEN
        REPEAT
          FromBinContent.RESET;
          FromBinContent.SETCURRENTKEY(
            "Location Code","Item No.","Variant Code","Cross-Dock Bin",
            "Qty. per Unit of Measure","Bin Ranking");
          FromBinContent.SETRANGE("Location Code",ToBinContent."Location Code");
          FromBinContent.SETRANGE("Item No.",ToBinContent."Item No.");
          FromBinContent.SETRANGE("Variant Code",ToBinContent."Variant Code");
          FromBinContent.SETRANGE("Cross-Dock Bin",FALSE);
          FromBinContent.SETRANGE(
            "Qty. per Unit of Measure",ItemUnitOfMeasure."Qty. per Unit of Measure");
          FromBinContent.SETFILTER("Bin Ranking",'<%1',ToBinContent."Bin Ranking");
          FromBinContent.ASCENDING(FALSE);
          IF FromBinContent.FIND('-') THEN BEGIN
            TempWhseWkshLine2.COPY(TempWhseWkshLine);
            TempWhseWkshLine.SETCURRENTKEY(
              "Item No.","From Bin Code","Location Code","Variant Code","From Unit of Measure Code");
            TempWhseWkshLine.SETRANGE("Item No.",FromBinContent."Item No.");
            TempWhseWkshLine.SETRANGE("Location Code",FromBinContent."Location Code");
            TempWhseWkshLine.SETRANGE("Variant Code",FromBinContent."Variant Code");
            REPEAT
              IF UseForReplenishment(FromBinContent) THEN BEGIN
                QtyAvailToPickBase := FromBinContent.CalcQtyAvailToPick(0);
                TempWhseWkshLine.SETRANGE("From Bin Code",FromBinContent."Bin Code");
                TempWhseWkshLine.SETRANGE("From Unit of Measure Code",FromBinContent."Unit of Measure Code");
                TempWhseWkshLine.CALCSUMS("Qty. (Base)");
                QtyAvailToPickBase := QtyAvailToPickBase - TempWhseWkshLine."Qty. (Base)";

                IF QtyAvailToPickBase > 0 THEN BEGIN
                  MovementQtyBase := QtyAvailToPickBase;
                  IF RemainQtyToReplenishBase < MovementQtyBase THEN
                    MovementQtyBase := RemainQtyToReplenishBase;
                  CreateWhseWkshLine(ToBinContent,FromBinContent,MovementQtyBase);
                  RemainQtyToReplenishBase := RemainQtyToReplenishBase - MovementQtyBase;
                END;
              END;
            UNTIL (FromBinContent.NEXT = 0) OR (RemainQtyToReplenishBase = 0);
            TempWhseWkshLine.COPY(TempWhseWkshLine2);
          END;
        UNTIL (ItemUnitOfMeasure.NEXT = 0) OR (RemainQtyToReplenishBase = 0);
    END;

    LOCAL PROCEDURE CreateWhseWkshLine@6(ToBinContent@1001 : Record 7302;FromBinContent@1000 : Record 7302;MovementQtyBase@1002 : Decimal);
    BEGIN
      TempWhseWkshLine.INIT;
      TempWhseWkshLine."Worksheet Template Name" := WhseWkshTemplateName;
      TempWhseWkshLine.Name := WhseWkshName;
      TempWhseWkshLine."Location Code" := LocationCode;
      TempWhseWkshLine."Line No." := NextLineNo;
      TempWhseWkshLine."From Bin Code" := FromBinContent."Bin Code";
      TempWhseWkshLine."From Zone Code" := FromBinContent."Zone Code";
      TempWhseWkshLine."From Unit of Measure Code" := FromBinContent."Unit of Measure Code";
      TempWhseWkshLine."Qty. per From Unit of Measure" := FromBinContent."Qty. per Unit of Measure";
      TempWhseWkshLine."To Bin Code" := ToBinContent."Bin Code";
      TempWhseWkshLine."To Zone Code" := ToBinContent."Zone Code";
      TempWhseWkshLine."Unit of Measure Code" := ToBinContent."Unit of Measure Code";
      TempWhseWkshLine."Qty. per Unit of Measure" := ToBinContent."Qty. per Unit of Measure";
      TempWhseWkshLine."Item No." := ToBinContent."Item No.";
      TempWhseWkshLine.VALIDATE("Variant Code",ToBinContent."Variant Code");
      TempWhseWkshLine.VALIDATE(Quantity,ROUND(MovementQtyBase / ToBinContent."Qty. per Unit of Measure",0.00001));

      TempWhseWkshLine."Qty. (Base)" := MovementQtyBase;
      TempWhseWkshLine."Qty. Outstanding (Base)" := MovementQtyBase;
      TempWhseWkshLine."Qty. to Handle (Base)" := MovementQtyBase;
      TempWhseWkshLine."Qty. Handled (Base)" := MovementQtyBase;

      TempWhseWkshLine."Whse. Document Type" := TempWhseWkshLine."Whse. Document Type"::"Whse. Mov.-Worksheet";
      TempWhseWkshLine."Whse. Document No." := WhseWkshName;
      TempWhseWkshLine."Whse. Document Line No." := TempWhseWkshLine."Line No.";
      TempWhseWkshLine.INSERT;

      NextLineNo := NextLineNo + 10000;
    END;

    PROCEDURE InsertWhseWkshLine@8() : Boolean;
    VAR
      WhseWkshLine@1000 : Record 7326;
    BEGIN
      TempWhseWkshLine.RESET;
      TempWhseWkshLine.SETFILTER(Quantity,'>0');
      IF TempWhseWkshLine.FIND ('-') THEN BEGIN
        REPEAT
          WhseWkshLine.INIT;
          WhseWkshLine := TempWhseWkshLine;
          IF DoNotFillQtytoHandle THEN BEGIN
            WhseWkshLine."Qty. to Handle" := 0;
            WhseWkshLine."Qty. to Handle (Base)" := 0;
          END;
          IF PickAccordingToFEFO(TempWhseWkshLine."Item No.",TempWhseWkshLine."Variant Code") THEN BEGIN
            WhseWkshLine."From Zone Code" := '';
            WhseWkshLine."From Bin Code" := '';
          END;
          WhseWkshLine.INSERT;
        UNTIL TempWhseWkshLine.NEXT = 0;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    LOCAL PROCEDURE BinBlockedInbound@3(LocationCode@1002 : Code[10];BinCode@1000 : Code[20]) Blocked@1003 : Boolean;
    BEGIN
      GetBin(LocationCode,BinCode);
      Blocked := Bin."Block Movement" IN
        [Bin."Block Movement"::Inbound,Bin."Block Movement"::All];
      EXIT(Blocked);
    END;

    LOCAL PROCEDURE UseForReplenishment@2(FromBinContent@1000 : Record 7302) : Boolean;
    BEGIN
      IF FromBinContent."Block Movement" IN
          [FromBinContent."Block Movement"::Outbound,
           FromBinContent."Block Movement"::All]
      THEN
        EXIT(FALSE);

      GetBinType(FromBinContent."Bin Type Code");
      EXIT(NOT (BinType.Receive OR BinType.Ship));
    END;

    LOCAL PROCEDURE GetBinType@9(BinTypeCode@1000 : Code[10]);
    BEGIN
      IF BinTypeCode = '' THEN
        BinType.INIT
      ELSE
        IF BinType.Code <> BinTypeCode THEN
          BinType.GET(BinTypeCode);
    END;

    LOCAL PROCEDURE GetBin@4(LocationCode@1000 : Code[10];BinCode@1002 : Code[20]);
    BEGIN
      IF (Bin."Location Code" <> LocationCode) OR
         (Bin.Code <> BinCode)
      THEN
        Bin.GET(LocationCode,BinCode);
    END;

    PROCEDURE SetHideDialog@5(HideDialog2@1000 : Boolean);
    BEGIN
      HideDialog := HideDialog2;
    END;

    PROCEDURE SetWhseWorksheet@7(WhseWkshTemplateName2@1000 : Code[10];WhseWkshName2@1001 : Code[10];LocationCode2@1002 : Code[10];DoNotFillQtytoHandle2@1004 : Boolean);
    VAR
      WhseWkshLine@1003 : Record 7326;
    BEGIN
      TempWhseWkshLine.DELETEALL;
      WhseWkshLine.SETRANGE("Worksheet Template Name",WhseWkshTemplateName2);
      WhseWkshLine.SETRANGE(Name,WhseWkshName2);
      WhseWkshLine.SETRANGE("Location Code",LocationCode2);
      IF WhseWkshLine.FIND('+') THEN
        NextLineNo := WhseWkshLine."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      WhseWkshTemplateName := WhseWkshTemplateName2;
      WhseWkshName := WhseWkshName2;
      LocationCode := LocationCode2;
      Location.GET(LocationCode);
      DoNotFillQtytoHandle := DoNotFillQtytoHandle2;
    END;

    LOCAL PROCEDURE PickAccordingToFEFO@10(ItemNo@1003 : Code[20];VariantCode@1004 : Code[10]) : Boolean;
    VAR
      ItemTrackingMgt@1000 : Codeunit 6500;
      LNRequired@1001 : Boolean;
      SNRequired@1002 : Boolean;
      EntriesExist@1005 : Boolean;
    BEGIN
      IF NOT Location."Pick According to FEFO" THEN
        EXIT(FALSE);

      ItemTrackingMgt.CheckWhseItemTrkgSetup(ItemNo,SNRequired,LNRequired,FALSE);
      IF NOT (SNRequired OR LNRequired) THEN
        EXIT(FALSE);

      IF ItemTrackingMgt.ExistingExpirationDate(ItemNo,VariantCode,'','',FALSE,EntriesExist) <> 0D THEN
        EXIT(TRUE);

      IF ItemTrackingMgt.WhseExistingExpirationDate(ItemNo,VariantCode,Location,'','',EntriesExist) <> 0D THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}
