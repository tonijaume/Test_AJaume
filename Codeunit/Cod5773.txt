OBJECT Codeunit 5773 Whse.-Transfer Release
{
  OBJECT-PROPERTIES
  {
    Date=12/01/06;
    Time=12:00:00;
    Version List=NAVW14.00.02;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Location@1000 : Record 14;
      WhseMgt@1001 : Codeunit 5775;
      CalledFromTransferOrder@1002 : Boolean;

    PROCEDURE Release@1(TransHeader@1000 : Record 5740);
    VAR
      TransLine@1002 : Record 5741;
      WhseRqst@1001 : Record 5765;
    BEGIN
      WITH TransHeader DO BEGIN
        WhseRqst."Source Type" := DATABASE::"Transfer Line";
        WhseRqst."Source No." := "No.";
        WhseRqst."Document Status" := Status::Released;
        WhseRqst."Destination Type" := WhseRqst."Destination Type"::Location;
        WhseRqst."External Document No." := "External Document No.";

        IF Location.RequireReceive("Transfer-to Code") OR
           Location.RequirePutaway("Transfer-to Code")
        THEN BEGIN
          TransLine.SETRANGE("Document No.","No.");
          TransLine.SETRANGE("Unit of Measure Code",'');
          TransLine.SETFILTER("Item No.",'<>%1','');
          IF TransLine.FIND('-') THEN
            TransLine.TESTFIELD("Unit of Measure Code");

          WhseRqst.Type := WhseRqst.Type::Inbound;
          WhseRqst."Source Subtype" := 1;
          WhseMgt.GetSourceDocument(WhseRqst."Source Document",
            WhseRqst."Source Type",
            WhseRqst."Source Subtype");
          WhseRqst."Location Code" := "Transfer-to Code";
          SETRANGE("Location Filter","Transfer-to Code");
          CALCFIELDS("Completely Received");
          WhseRqst."Completely Handled" := "Completely Received";
          WhseRqst."Shipment Method Code" := "Shipment Method Code";
          WhseRqst."Shipping Agent Code" := "Shipping Agent Code";
          WhseRqst."Expected Receipt Date" := "Receipt Date";
          WhseRqst."Destination No." := "Transfer-to Code";
          IF CalledFromTransferOrder THEN BEGIN
            IF WhseRqst.MODIFY THEN;
          END ELSE
            IF NOT WhseRqst.INSERT THEN
              WhseRqst.MODIFY;
        END;
        IF Location.RequireShipment("Transfer-from Code") OR
           Location.RequirePicking("Transfer-from Code")
        THEN BEGIN
          TransLine.SETRANGE("Document No.","No.");
          TransLine.SETRANGE("Unit of Measure Code",'');
          IF TransLine.FIND('-') THEN
            TransLine.TESTFIELD("Unit of Measure Code");

          WhseRqst.Type := WhseRqst.Type::Outbound;
          WhseRqst."Location Code" := "Transfer-from Code";
          WhseRqst."Source Subtype" := 0;
          WhseMgt.GetSourceDocument(WhseRqst."Source Document",
            WhseRqst."Source Type",
            WhseRqst."Source Subtype");
          WhseRqst."Shipping Advice" := "Shipping Advice";
          WhseRqst."Shipment Method Code" := "Shipment Method Code";
          WhseRqst."Shipping Agent Code" := "Shipping Agent Code";
          SETRANGE("Location Filter","Transfer-from Code");
          CALCFIELDS("Completely Shipped");
          WhseRqst."Completely Handled" := "Completely Shipped";
          WhseRqst."Shipment Date" := "Shipment Date";
          WhseRqst."Destination No." := "Transfer-from Code";
          IF NOT WhseRqst.INSERT THEN
            WhseRqst.MODIFY;
        END;

        WhseRqst.RESET;
        WhseRqst.SETCURRENTKEY("Source Type","Source No.");
        WhseRqst.SETRANGE("Source Type",DATABASE::"Transfer Line");
        WhseRqst.SETRANGE("Source No.","No.");
        WhseRqst.SETRANGE("Document Status",Status::Open);
        WhseRqst.DELETEALL(TRUE);
      END;
    END;

    PROCEDURE Reopen@2(TransHeader@1000 : Record 5740);
    VAR
      WhseRqst@1001 : Record 5765;
    BEGIN
      WITH TransHeader DO BEGIN
        IF WhseRqst.GET(WhseRqst.Type::Inbound,"Transfer-to Code",DATABASE::"Transfer Line",1,"No.") THEN BEGIN
          WhseRqst."Document Status" := Status::Open;
          WhseRqst.MODIFY;
        END;
        IF WhseRqst.GET(WhseRqst.Type::Outbound,"Transfer-from Code",DATABASE::"Transfer Line",0,"No.") THEN BEGIN
          WhseRqst."Document Status" := Status::Open;
          WhseRqst.MODIFY;
        END;
      END;
    END;

    PROCEDURE SetCallFromTransferOrder@3(CalledFromTransferOrder2@1000 : Boolean);
    BEGIN
      CalledFromTransferOrder := CalledFromTransferOrder2;
    END;

    BEGIN
    END.
  }
}
