OBJECT Codeunit 7035322 Genera Informes Actividad
{
  OBJECT-PROPERTIES
  {
    Date=16/10/09;
    Time=12:35:37;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text50000@1103355000 : TextConst 'ESP=01/<Month>/<year4>';
      Text50001@1103355001 : TextConst 'ESP=+1M - 1D';
      Text50002@1103355002 : TextConst 'ESP=VEHICULOS';
      Text50003@1103355003 : TextConst 'ESP=C4';
      Text50004@1103355004 : TextConst 'ESP="MES "';
      Text50005@1103355005 : TextConst 'ESP=<Month Text> <year4>';
      Text50006@1103355006 : TextConst 'ESP=Generando informe ........\\';
      Text50007@1103355007 : TextConst 'ESP=Tipo vehiculos       #1#############\';
      Text50008@1103355008 : TextConst 'ESP=Procesando vehiculos @2@@@@@@@@@@@@@';
      Text50009@1103355009 : TextConst 'ESP=NAVISION';
      Text50010@1103355010 : TextConst 'ESP=A1';
      Text50011@1103355011 : TextConst 'ESP=D.T.';
      Text50012@1103355012 : TextConst 'ESP=X';
      Text50013@1103355013 : TextConst 'ESP=+1D';
      Text50014@1103355014 : TextConst 'ESP="=SUMA(%1:%2)"';
      Text50015@1103355015 : TextConst 'ESP="TOTAL="';
      Text50016@1103355016 : TextConst 'ESP=NO PROCESADO';
      Text50017@1103355017 : TextConst 'ESP=B:B';
      Text50018@1103355018 : TextConst 'ESP=<Month Text><year4>';
      Text50019@1103355019 : TextConst 'ESP=.xls';
      Text50020@1103355020 : TextConst 'ESP=+1M-1D';
      Text50021@1103355021 : TextConst 'ESP=L';
      Text50022@1103355022 : TextConst 'ESP=M';
      Text50023@1103355023 : TextConst 'ESP=J';
      Text50024@1103355024 : TextConst 'ESP=V';
      Text50025@1103355025 : TextConst 'ESP=S';
      Text50026@1103355026 : TextConst 'ESP=D';
      Text50027@1103355027 : TextConst 'ESP=CONDUCTORES';
      Text50028@1103355028 : TextConst 'ESP=NAVISION2';
      Text50029@1103355029 : TextConst 'ESP=C3';
      Text50030@1103355030 : TextConst 'ESP=A';
      Text50031@1103355031 : TextConst 'ESP=C5';
      Text50032@1103355032 : TextConst 'ESP=Procesando conductores @1@@@@@@@@@';
      Text50033@1103355033 : TextConst 'ESP=T.D.';
      Text50034@1103355034 : TextConst 'ESP=01/01>/<year4>';
      Text50035@1103355035 : TextConst 'ESP=31/12>/<year4>';
      Text50036@1103355036 : TextConst 'ESP=Calculando kilometros @1@@@@@@@@@';
      Text50037@1103355037 : TextConst 'ESP=KMS. VEHÖC.';
      Text50038@1103355038 : TextConst 'ESP=B3';
      Text50039@1103355039 : TextConst 'ESP="KILOMETROS VEHÖCULOS PROPIOS "';
      Text50040@1103355040 : TextConst 'ESP=<year4>';
      Text50041@1103355041 : TextConst 'ESP=NAVISION3';
      Text50042@1103355042 : TextConst 'ESP=+1M';
      Text50043@1103355043 : TextConst 'ESP=O';
      Text50044@1103355044 : TextConst 'ESP=P';
      Text50045@1103355045 : TextConst 'ESP=Q';
      Text50046@1103355046 : TextConst 'ESP=:Q';
      Text50047@1103355047 : TextConst 'ESP=-1A';
      Text50048@1103355048 : TextConst 'ESP=Servicios Propios,Servicios NO propios,Todos los servicios';
      Text50049@1103355049 : TextConst 'ESP=Procesando Partes..... #1########';
      Text50050@1103355050 : TextConst 'ESP=VEH. UTILIZADOS';
      Text50051@1103355051 : TextConst 'ESP=I4';
      Text50052@1103355052 : TextConst 'ESP=C7';
      Text50053@1103355053 : TextConst 'ESP=<Month Text>';
      Text50054@1103355054 : TextConst 'ESP=Buscando Partes.......\\';
      Text50055@1103355055 : TextConst 'ESP=Procesando mes ##1 de 12';
      Text50056@1103355056 : TextConst 'ESP=SERVICIOS REAL.';
      Text50057@1103355057 : TextConst 'ESP=K3';
      Text50058@1103355058 : TextConst 'ESP="A¥O "';
      Text50059@1103355059 : TextConst 'ESP=H5';
      Text50060@1103355060 : TextConst 'ESP=M5';
      Text50061@1103355061 : TextConst 'ESP=R5';
      Text50062@1103355062 : TextConst 'ESP=W5';
      Text50063@1103355063 : TextConst 'ESP=AB5';
      Text50064@1103355064 : TextConst 'ESP=AI5';
      Text50065@1103355065 : TextConst 'ESP=AN5';
      Text50066@1103355066 : TextConst 'ESP=AS5';
      Text50067@1103355067 : TextConst 'ESP=AX5';
      Text50068@1103355068 : TextConst 'ESP=BC5';
      Text50069@1103355069 : TextConst 'ESP=BH5';
      Text50070@1103355070 : TextConst 'ESP=BO5';
      Text50071@1103355071 : TextConst 'ESP=BT5';
      Text50072@1103355072 : TextConst 'ESP=BY5';
      Text50073@1103355073 : TextConst 'ESP=CD5';
      Text50074@1103355074 : TextConst 'ESP=CI5';
      Text50075@1103355075 : TextConst 'ESP=CN5';
      Text50076@1103355076 : TextConst 'ESP=CU5';
      Text50077@1103355077 : TextConst 'ESP=CZ5';
      Text50078@1103355078 : TextConst 'ESP=DE5';
      Text50079@1103355079 : TextConst 'ESP=DJ5';
      Text50080@1103355080 : TextConst 'ESP=DO5';
      Text50081@1103355081 : TextConst 'ESP=DT5';
      Text50082@1103355082 : TextConst 'ESP=NAVISION5';
      wTotalIncidencias@1100244000 : Integer;
      wDialog@1100244001 : Dialog;
      wFechaEntero@1100244002 : Integer;
      rDiasLibres@1100244003 : Record 7035340;
      wTotalRegs@1100244004 : Integer;
      wNreg@1100244005 : Integer;
      rTiposInci@1100244006 : Record 7035343;
      rTiposInciCond@1100244007 : Record 7035345;
      xlAplic@1100244008 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      xlConjuntoLibros@1100244009 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{000208DB-0000-0000-C000-000000000046}:Unknown Automation Server.Workbooks";
      xlLibro@1100244010 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      xlConjuntoHojas@1100244011 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{000208B1-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheets";
      xlHoja@1100244012 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      xlRango@1100244013 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      xlInterior@1100244014 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020870-0000-0000-C000-000000000046}:Unknown Automation Server.Interior";
      xlSeleccion@1100244015 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020852-0000-0000-C000-000000000046}:Unknown Automation Server.Style";
      xlFont@1100244016 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{0002084D-0000-0000-C000-000000000046}:Unknown Automation Server.Font";
      xlPageSetup@1100244017 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{000208B4-0000-0000-C000-000000000046}:Unknown Automation Server.PageSetup";
      txt001@1100244018 : TextConst 'ESP=El d¡a %1 ya est  abierto , no se puede re-abrir.';
      txt002@1100244019 : TextConst 'ESP=El d¡a %1 ha sido abierto. \\ Total incidencias creadas --> %2.';
      err1@1100244020 : TextConst 'ESP=No existe vehiculo con numero %1';
      err2@1100244021 : TextConst 'ESP=Debe especificar vehiculo y conductor.';
      err3@1100244022 : TextConst 'ESP=Debe especificar vehiculo.';
      err4@1100244023 : TextConst 'ESP=No se puede procesar el d¡a %1 ya que este no ha sido abierto.';
      err5@1100244024 : TextConst 'ESP=El dia %1 ya habia sido procesado anteriormente , se cancelar  el proceso.';
      err6@1100244025 : TextConst 'ESP=El conductor %1 no se ha encontrado en los partes de d¡a %2 .\ Adem s no se han encontrado incid‚ncias para dicho conductor.\ Se encuentra en la ventana cierre diario , pero debe especificar el Estado.';
      err7@1100244026 : TextConst 'ESP=El vehiculo %1 no se ha encontrado en los partes de d¡a %2 .\ Adem s no se han encontrado incid‚ncias para dicho vehiculo.\Se encuentra en la ventana cierre diario , pero debe especificar el tipo de incidencia.';
      err8@1100244027 : TextConst 'ESP=El dia %1 ya habia sido cerrado anteriormente , se cancelar  el proceso.';
      txt003@1100244028 : TextConst 'ESP=El dia %1 ha sido cerrado correctamente.\\ no se podr n modificar los registros de dicho dia.';
      err9@1100244029 : TextConst 'ESP=No ha definido la tabla par metros.\\ Gestion operativa / Ficheros / Parametros .';
      err10@1100244030 : TextConst 'ESP=No ha definido la ruta de la plantilla informes .\\ Gestion operativa / Ficheros / Parametros / Informes.';
      err11@1100244031 : TextConst 'ESP=No se encuentra el archivo %1';
      err12@1100244032 : TextConst 'ESP=Debe especificar la fecha de proceso';
      err13@1100244033 : TextConst 'ESP=La incidencia %1 del vehiculo %2 no tiene asignado un tipo de incidencia.';
      err14@1100244034 : TextConst 'ESP=No existe el tipo de incidencia %1 asociada al parte de incidencia %2';
      err15@1100244035 : TextConst 'ESP=Debe definir un color y codigo abreviado para el tipo de incidencia %1';
      err16@1100244036 : TextConst 'ESP=No existe el tipo de incidencia %1. \\ Cierre diario dia %2 del vehiculo %3';
      err17@1100244037 : TextConst 'ESP=El vehiculo %1 se ha encontrado en cierre diario %2.\\ Sin embargo no tiene Tipo de incidencia asignado.';
      err18@1100244038 : TextConst 'ESP=El vehiculo %1 NO tiene actividad el dia %2 .\\ No se han encontrado ni incidencias ni ha sido asignado a un estado en la ventana cierre diario. \\Se cancelara el proceso.';
      err19@1100244039 : TextConst 'ESP=El dia %1 no ha sido cerrado.';
      err20@1100244040 : TextConst 'ESP=El dia %1 no ha sido abierto.';
      err21@1100244041 : TextConst 'ESP=Debe configurar los colores y codigos abreviados de las incidencias conductor. \\Dirigase a conductor / conf / informe de actividad.';
      err22@1100244042 : TextConst 'ESP=El conductor %1 se ha encontrado en cierre diario %2.\\ Sin embargo no tiene estado asignado.';
      err23@1100244043 : TextConst 'ESP=El conductor %1 NO tiene actividad el dia %2 .\\ No se han encontrado ni incidencias ni ha sido asignado a un estado en la ventana cierre diario. \\Se cancelara el proceso.';
      err24@1100244044 : TextConst 'ESP=No es posible reprocesar %1.\\ Se han encontrado proveedores con vehiculos utilizados.';
      err25@1100244045 : TextConst 'ESP=No se han encontrado partes con proveedor para el dia %1';
      XBordes@1100244046 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020855-0000-0000-C000-000000000046}:Unknown Automation Server.Borders";
      cGesDiaria@1100244047 : Codeunit 7035321;
      wOpcion@1100244048 : Integer;
      txt004@1100244049 : TextConst 'ESP=Informe Completado.';
      err26@1100244050 : TextConst 'ESP=No existe el tipo de servicio %1 asignado en el parte %2';
      wCelda@1100244051 : Code[10];
      text005@1100244052 : TextConst 'ESP=SOLO VEHICULOS PROPIOS';
      text006@1100244053 : TextConst 'ESP=SOLO VEHICULOS NO PROPIOS';
      text007@1100244054 : TextConst 'ESP=TODOS LOS VEHICULOS';
      wMedia@1100244055 : Decimal;
      rparte@1100244056 : Record 7010360;
      rVeh@1100244057 : Record 7010346;
      text008@1100244059 : TextConst 'ESP=TOTAL';
      text009@1100244060 : TextConst 'ESP=MEDIA';
      rPar@1103350000 : Record 7010311;

    PROCEDURE Informe_actividad_vehiculos@24();
    VAR
      wArchivoExcel@1100244000 : Text[250];
      wCelda@1100244001 : Text[30];
      fCalendario@1100244002 : Form 7035363;
      wCode@1100244003 : Code[200];
      wFechaInicio@1100244004 : Date;
      wFechaFin@1100244005 : Date;
      wFechaProceso@1100244006 : Date;
      rVehiculo@1100244007 : Record 7010346;
      wLin@1100244008 : Integer;
      wCol@1100244009 : Integer;
      rVehiculo2@1100244010 : Record 7010346;
      wTrabajado@1100244012 : Boolean;
      wBuscarInci@1100244013 : Boolean;
      wBuscarEnCierre@1100244014 : Boolean;
      rIncidencia@1100244015 : Record 7010348;
      rRegistroCierre@1100244016 : Record 7035344;
      rDiaslibres@1100244017 : Record 7035341;
      wContador@1100244018 : Integer;
      wPrueba@1100244019 : Text[30];
      wArchivoGuarda@1100244020 : Text[250];
      wComprueba31@1100244021 : Code[2];
      wProcesar@1100244022 : Boolean;
      wTotalNP@1100244023 : Integer;
      rTiposVeh@1100244024 : Record 7010345;
      wCode2@1100244025 : Code[12];
      lwTotal@1100244026 : Integer;
      lwTotal2@1100244027 : Integer;
      lwTotal3@1100244028 : Integer;
      lwText@1100244029 : Text[150];
      lwPrimLin@1100244030 : Integer;
    BEGIN
      // AML 191102
      // Informe_actividad_vehiculos

      CLEARALL;
      rPar.FINDFIRST;

      CLEAR(lwTotal3);
      // Pedimos la fecha de proceso.
      fCalendario.RUNMODAL;
      wFechaInicio     := fCalendario.GetChosenDate;
      IF wFechaInicio > 0D THEN
        wCode          := FORMAT(wFechaInicio,0,Text50000)
      ELSE
        ERROR(err12);

      EVALUATE(wFechaInicio,wCode);

      wFechaFin      := CALCDATE(Text50001,wFechaInicio);
      wCode2         := FORMAT(wFechaFin);
      EVALUATE(wComprueba31,COPYSTR(wCode2,1,2));

      // miramos si se ha especificado el archivo de plantilla.
      wArchivoExcel := Comprobar_parametros_informes;

      // ponemos los contadores de incidencias a cero.
      rTiposInci.RESET;
      IF rTiposInci.FINDFIRST THEN
        rTiposInci.MODIFYALL("Contador informe" , 0);

      rTiposInci.RESET;
      wContador := 0;
      wTotalNP  := 0;
      wLin      := 5;

      IF CREATE(xlAplic) THEN BEGIN


        xlLibro := xlAplic.Workbooks._Open(wArchivoExcel);

        // Abrimos la hoja de vehiculos.
        xlHoja := xlLibro.Worksheets.Item(Text50002);
        xlHoja.Activate;

        // Ponemos el titulo en la celda C4
        wCelda := Text50003;
        xlHoja.Range(wCelda).Value := Text50004 + UPPERCASE(FORMAT(wFechaInicio,0,Text50005));

        //Hamos un recorrido por la tabla tipos de vehiculo y agrupamos por tipo.

        rTiposVeh.RESET;
        rTiposVeh.SETCURRENTKEY("Orden Listado");
        IF rTiposVeh.FINDSET THEN BEGIN

          wDialog.OPEN(Text50006     +
                       Text50007 +
                       Text50008);


          REPEAT
          CLEAR(lwTotal2);
          lwPrimLin := wLin+3;
            //Cambiamos el nombre del tipo vehiculo en la barra de progreso.
            wDialog.UPDATE(1,rTiposVeh.Codigo);

            //Filtramos la tabla vehiculo por el tipo actual procesado.
            rVehiculo.RESET;
            rVehiculo.SETCURRENTKEY("Vehiculo propio",
                                    "Tipo vehiculo",
                                    Numero,
                                    "Fecha venta");

            rVehiculo.SETRANGE("Vehiculo propio" , TRUE);
            rVehiculo.SETRANGE("Tipo vehiculo"            , rTiposVeh.Codigo);

            // Filtramos directamente por los no vendidos para que los que ya han sido vendidos
            // antes de la fecha de inicio no se procesen .
            // Posteriormente en el bucle de fechas se comprueba dia a dia por si el vehiculo ha sido
            // Vendido a lo largo de este mes.

            IF NOT rPar."Vehiculos Vendidos en Estadist" THEN
              rVehiculo.SETFILTER("Fecha venta"    , '>%1|%2',wFechaInicio,0D);
            rVehiculo.SETRANGE("No Imprimir estadisticas" , FALSE);
            IF rVehiculo.FINDSET THEN BEGIN

              //Guardamos los datos para la barra de progreso.
              wNreg      := 1;
              wTotalRegs := rVehiculo.COUNTAPPROX;

              // Copiamos la cabecera de tipos de vehiculo.
              wCol := 1;
              xlHoja := xlLibro.Worksheets.Item(Text50009);
              xlHoja.Activate;

              xlRango := xlHoja.Range('4:6');
              xlRango.Copy;

              xlHoja := xlLibro.Worksheets.Item(Text50002);
              xlHoja.Activate;

              xlRango := xlHoja.Range(FORMAT(wLin+1)+':'+FORMAT(wLin+3));
              xlRango.Select;
              xlHoja.Paste;

              xlHoja.Range(Text50010).Offset(wLin+1,34).Borders.Item(1).Weight := 3;
              xlHoja.Range(Text50010).Offset(wLin+1,34).Borders.Item(2).Weight := 3;
              xlHoja.Range(Text50010).Offset(wLin+1,34).Borders.Item(3).Weight := 3;
              xlHoja.Range(Text50010).Offset(wLin+1,34).Borders.Item(4).Weight := 3;
              xlHoja.Range(Text50010).Offset(wLin+1,34).Value := Text50011;


              // ponemos La descripci¢n del tipo veh¡culo.
              xlHoja.Range(Text50010).Offset(wLin,wCol).Value := rTiposVeh.Descripcion;

              // Coloca el dia de la semana
              PonDiaSem(wFechaInicio,wLin+1,2);

              wLin += 3;

              REPEAT
                CLEAR(lwTotal);  //Inicializa total dias trabajados
                // Copiamos el formato de la hoja auxiliar.
                xlHoja := xlLibro.Worksheets.Item(Text50009);
                xlHoja.Activate;

                xlRango := xlHoja.Range('2:2');
                xlRango.Copy;

                xlHoja := xlLibro.Worksheets.Item(Text50002);
                xlHoja.Activate;

                xlRango := xlHoja.Range(FORMAT(wLin+1)+':'+FORMAT(wLin+1));
                xlRango.Select;
                xlHoja.Paste;

                //Ponemos el numero del vehiculo.
                xlHoja.Range(Text50010).Offset(wLin,wCol).Value := rVehiculo.Numero;
                wCol += 1;

                //Bucle de mes.
                wFechaProceso := wFechaInicio;
                WHILE wFechaProceso <= wFechaFin DO BEGIN
                  wProcesar := TRUE;

                  //Ponemos la rallita del Domingo
                  IF DATE2DWY(wFechaProceso,1) =7 THEN BEGIN
                    xlHoja.Range(Text50010).Offset(wLin,wCol).Borders.Item(10).Weight := 3;
                    xlHoja.Range(Text50010).Offset(wLin,wCol).Borders.Item(10).ColorIndex:= 3;
                  END;

                  // ponemos una comprobaci¢n de coche vendido a nivel de dia.
                  wProcesar := wProcesar AND ((rVehiculo."Fecha venta" > wFechaProceso) OR (rVehiculo."Fecha venta" = 0D));

                  wProcesar := wProcesar AND (rVehiculo."Fecha inicio actividad" <= wFechaProceso);


                  //se comprueba tanto que el dia haya sido abierto como cerrado
                  IF wProcesar THEN BEGIN
                    rDiaslibres.RESET;
                    IF rDiaslibres.GET(wFechaProceso) THEN BEGIN
                      IF rDiaslibres.Cerrado = FALSE THEN
                        wProcesar := FALSE;
                    END
                    ELSE
                      wProcesar  := FALSE;
                  END;

                  rVehiculo2.RESET;
                  rVehiculo2.GET(rVehiculo.Matricula);
                  rVehiculo2.SETFILTER("Filtro Fecha",'%1', wFechaProceso);
                  rVehiculo2.CALCFIELDS(Actividad);

                  wTrabajado := (rVehiculo2.Actividad = TRUE) AND wProcesar;
                  IF  (rVehiculo2.Actividad = FALSE) AND wProcesar THEN BEGIN

                    wBuscarInci     := FALSE;
                    wBuscarEnCierre := FALSE;

                    IF wTrabajado = FALSE THEN BEGIN

                      {* AJS 30.05.2003 Anulado para buscar las incidencias teniendo en cuenta la prioridad
                      rVehiculo2.RESET;
                      rVehiculo2.GET(rVehiculo.Matricula);
                      rVehiculo2.SETFILTER("Filtro Fecha Inicio" , '<=%1'      , wFechaProceso);
                      rVehiculo2.SETFILTER("Filtro Fecha Fin"    , '>=%1|%2'   , wFechaProceso,0D);
                      rVehiculo2.CALCFIELDS(rVehiculo2."Incidencias para informe");

                      IF rVehiculo2."Incidencias para informe" <> '' THEN
                      *}

                      rIncidencia.RESET;
                      rIncidencia.SETCURRENTKEY(Matricula,
                                                "Prioridad incidencia",
                                                "Fecha inicio reparacion");
                      rIncidencia.SETRANGE (Matricula                , rVehiculo.Matricula);
                      rIncidencia.SETFILTER("Fecha inicio reparacion", '<=%1', wFechaProceso);
                      rIncidencia.SETFILTER("Fecha final reparacion" , '>=%1|%2', wFechaProceso, 0D);
                      IF rIncidencia.FINDLAST THEN
                        wBuscarInci := TRUE
                      ELSE
                        wBuscarEnCierre := TRUE;

                      //Buscamos incidencia
                      IF wBuscarInci THEN BEGIN

                        IF rIncidencia.GET(rIncidencia."Parte Incidencia") THEN BEGIN
                          wBuscarEnCierre := FALSE;

                          IF rIncidencia."Tipo Incidencia" <> '' THEN BEGIN
                            IF rTiposInci.GET(rIncidencia."Tipo Incidencia") THEN BEGIN
                              IF (rTiposInci."Color plantilla"  <> rTiposInci."Color plantilla"::" ") AND
                                 (rTiposInci."Codigo abreviado" <> '') THEN BEGIN
                                   xlHoja.Range(Text50010).Offset(wLin,wCol).Value := rTiposInci."Codigo abreviado";
                                   xlInterior  := xlHoja.Range(Text50010).Offset(wLin,wCol).Interior;
                                   wBuscarInci := TRUE;
                              END
                              ELSE
                                ERROR(err15,rIncidencia."Tipo Incidencia");
                            END
                            ELSE
                             ERROR(err14,rIncidencia."Tipo Incidencia",rIncidencia."Parte Incidencia");
                          END
                          ELSE
                            ERROR(err13,rIncidencia."Parte Incidencia",rVehiculo2.Numero);
                        END
                        ELSE BEGIN
                          wBuscarInci     := FALSE;
                          wBuscarEnCierre := TRUE;
                        END;
                      END;

                      //Buscamos en la ventana de cierre.
                      IF wBuscarEnCierre THEN BEGIN
                        rRegistroCierre.RESET;
                        rRegistroCierre.SETCURRENTKEY("Fecha cierre"       ,
                                                      "Matricula vehiculo");

                        rRegistroCierre.SETRANGE("Fecha cierre"       , wFechaProceso);
                        rRegistroCierre.SETRANGE("Matricula vehiculo" , rVehiculo.Matricula);
                        IF rRegistroCierre.FINDFIRST THEN BEGIN
                          rTiposInci.RESET;
                          IF rRegistroCierre."Tipo incidencia" <> '' THEN BEGIN
                            rTiposInci.RESET;
                            IF rTiposInci.GET(rRegistroCierre."Tipo incidencia") THEN BEGIN
                              IF (rTiposInci."Color plantilla"  <> rTiposInci."Color plantilla"::" ") AND
                                 (rTiposInci."Codigo abreviado" <> '') THEN BEGIN
                                xlHoja.Range(Text50010).Offset(wLin,wCol).Value := rTiposInci."Codigo abreviado";
                                xlInterior := xlHoja.Range(Text50010).Offset(wLin,wCol).Interior;
                                wBuscarEnCierre := TRUE;
                              END;
                            END
                            ELSE
                               ERROR(err16,rRegistroCierre."Tipo incidencia"
                                          ,rRegistroCierre."Fecha cierre"
                                          ,rRegistroCierre.Recurso);
                          END
                          ELSE
                            ERROR(err17 , rRegistroCierre.Recurso
                                        , rRegistroCierre."Fecha cierre");
                        END
                        ELSE
                          wBuscarEnCierre := FALSE;
                      END;

                      IF (wTrabajado = FALSE) AND (wBuscarEnCierre = FALSE) AND (wBuscarInci = FALSE) THEN
                        ERROR(err18 ,rVehiculo.Numero , wFechaProceso);

                      IF (wBuscarEnCierre OR wBuscarInci) THEN BEGIN
                        //Cambiamos el color.
                        CambiarColor(wLin,wCol);
                        xlInterior.Pattern             := 1;
                        rTiposInci."Contador informe"  += 1;
                        rTiposInci.MODIFY;
                      END;

                    END;
                  END;

                  IF wTrabajado THEN BEGIN
                    lwTotal  +=1;
                    lwTotal2 +=1;
                    lwTotal3 +=1;
                  END;


                  IF wProcesar = FALSE THEN
                    xlHoja.Range(Text50010).Offset(wLin,wCol).Value := Text50012;

                  wFechaProceso := CALCDATE(Text50013,wFechaProceso);
                  wCol += 1;

                END;
                // Rellenamos la columna de totales
                //pp
                // Dibujamos los bordes
                xlHoja.Range(Text50010).Offset(wLin,34).Borders.Item(1).Weight := 3;
                xlHoja.Range(Text50010).Offset(wLin,34).Borders.Item(2).Weight := 3;
                xlHoja.Range(Text50010).Offset(wLin,34).Borders.Item(3).Weight := 3;
                xlHoja.Range(Text50010).Offset(wLin,34).Borders.Item(4).Weight := 3;
                // xlHoja.Range(Text50010).Offset(wLin,34).Borders.Item(1).ColorIndex:= 2;
                xlHoja.Range(Text50010).Offset(wLin,34).Value := lwTotal;


                //Comprobamos el dia 31.
                IF wComprueba31 <> '31' THEN
                  xlHoja.Range(Text50010).Offset(wLin,32).Value := Text50012;

                wLin   += 1;
                wCol   := 1;

                wNreg += 1;
                wDialog.UPDATE(2,ROUND((wNreg / wTotalRegs) * 10000,1));


              UNTIL rVehiculo.NEXT = 0;

              // Ponemos los totales por tipo de vehiculo
              {
              lwText := STRSUBSTNO(Text50014, xlHoja.Range(Text50010).Offset(lwPrimLin ,34).Address,
                                                       xlHoja.Range(Text50010).Offset(wLin-2,34).Address);}



              xlHoja.Range(Text50010).Offset(wLin,34).Borders.Item(1).Weight := 3;
              xlHoja.Range(Text50010).Offset(wLin,34).Borders.Item(2).Weight := 3;
              xlHoja.Range(Text50010).Offset(wLin,34).Borders.Item(3).Weight := 3;
              xlHoja.Range(Text50010).Offset(wLin,34).Borders.Item(4).Weight := 3;
              // xlHoja.Range(Text50010).Offset(wLin,34).Borders.Item(1).ColorIndex:= 5;

              xlHoja.Range(Text50010).Offset(wLin,34).Value := lwTotal2;


              wLin +=1;
              wCol :=2 ;


            END;

          UNTIL rTiposVeh.NEXT = 0;

        END;
        // Total Absoluto
        xlHoja.Range(Text50010).Offset(wLin+2,32).Value := Text50015;
        xlHoja.Range(Text50010).Offset(wLin+2,34).Borders.Item(1).Weight := 3;
        xlHoja.Range(Text50010).Offset(wLin+2,34).Borders.Item(2).Weight := 3;
        xlHoja.Range(Text50010).Offset(wLin+2,34).Borders.Item(3).Weight := 3;
        xlHoja.Range(Text50010).Offset(wLin+2,34).Borders.Item(4).Weight := 3;
        // xlHoja.Range(Text50010).Offset(wLin+2,34).Borders.Item(4).ColorIndex:= 5;
        xlHoja.Range(Text50010).Offset(wLin+2,34).Value := lwTotal3;

        // Final del informe continuamos con la leyenda.

        wLin += 1;

        //metemos la leyenda;
        rTiposInci.RESET;
        IF rTiposInci.FINDSET THEN BEGIN

          wCol      := 2;
          wContador := wLin;
          REPEAT

            xlHoja.Range(Text50010).Offset(wLin,wCol).Value   := rTiposInci."Codigo abreviado";
            xlInterior                                   := xlHoja.Range(Text50010).Offset(wLin,wCol).Interior;
            CambiarColor(wLin,wCol);
            xlHoja.Range(Text50010).Offset(wLin,wCol+1).Value := rTiposInci.Descripcion;
            xlHoja.Range(Text50010).Offset(wLin,wCol+6).Value := rTiposInci."Contador informe";
            xlHoja.Range(Text50010).Offset(wLin,wCol+1).Resize(1, 5).Merge;
            wLin += 1;

          UNTIL rTiposInci.NEXT = 0;

            xlHoja.Range(Text50010).Offset(wLin,wCol).Value   := Text50012;
            xlHoja.Range(Text50010).Offset(wLin,wCol+1).Value := Text50016;
            xlHoja.Range(Text50010).Offset(wLin,wCol+1).Resize(1, 5).Merge;

          // Formateamos la leyenda.
          xlRango :=  xlHoja.Range(Text50010).Offset(wContador,wCol).Resize((wLin-wContador)+1,7);
          xlRango.HorizontalAlignment := 3;
          xlRango._BorderAround        := 1;
          xlFont := xlRango.Font;
          xlFont.Bold(TRUE);

          wDialog.CLOSE;

        END;

        xlRango := xlHoja.Range(Text50017);
        xlRango.EntireColumn.AutoFit;
        xlAplic.Visible(TRUE);

        wArchivoGuarda := COPYSTR(wArchivoExcel,1,STRLEN(wArchivoExcel)-4) + '-'      +
                          UPPERCASE(FORMAT(wFechaInicio,0,Text50018))+'-' +
                          USERID + Text50019;


        IF EXISTS(wArchivoGuarda) THEN
          ERASE(wArchivoGuarda);

        xlLibro.Saved(TRUE);
        xlLibro._SaveAs(wArchivoGuarda);
      END;

      CLEARALL;
    END;

    PROCEDURE PonDiaSem@6(pwFechaIni@1100244000 : Date;pwLin@1100244001 : Integer;pwColIni@1100244002 : Integer);
    VAR
      lwFecha@1100244003 : Date;
      lwDia@1100244004 : Code[1];
      lwCol@1100244005 : Integer;
    BEGIN
      // PonDiaSem

      // Pone el dia de la semana en una fila
      //JPT
      FOR lwFecha := pwFechaIni TO CALCDATE(Text50020,pwFechaIni)  DO BEGIN
        CASE DATE2DWY(lwFecha,1) OF
         1 : lwDia :=Text50021;
         2 : lwDia :=Text50022;
         3 : lwDia :=Text50012;
         4 : lwDia :=Text50023;
         5 : lwDia :=Text50024;
         6 : lwDia :=Text50025;
         7 : lwDia :=Text50026;
        END;
        lwCol := pwColIni + DATE2DMY(lwFecha,1) - 1;

        xlHoja.Range(Text50010).Offset(pwLin + 1, lwCol).Value := lwDia;

        IF DATE2DWY(lwFecha,1) =7 THEN BEGIN
          //xlHoja.Range(Text50010).Offset(pwLin,lwCol).Borders.Item(10).Weight := 3;
          xlHoja.Range(Text50010).Offset(pwLin,lwCol).Borders.Item(10).ColorIndex:= 3;
          xlHoja.Range(Text50010).Offset(pwLin+1,lwCol).Borders.Item(10).ColorIndex:= 3;
        END;
        // ----  Poner el dia de la semana numerico encima del dia de la semana en letra  ----
        xlHoja.Range(Text50010).Offset(pwLin,lwCol).Value := DATE2DMY(lwFecha, 1);
      END;
    END;

    PROCEDURE Informe_actividad_conductores@25();
    VAR
      wArchivoExcel@1100244000 : Text[250];
      wCelda@1100244001 : Text[30];
      fCalendario@1100244002 : Form 7035363;
      wCode@1100244003 : Code[200];
      wFechaInicio@1100244004 : Date;
      wFechaFin@1100244005 : Date;
      wFechaProceso@1100244006 : Date;
      rConductor@1100244007 : Record 7010327;
      wLin@1100244008 : Integer;
      wCol@1100244009 : Integer;
      rConductor2@1100244010 : Record 7010327;
      wTrabajado@1100244012 : Boolean;
      wBuscarInci@1100244013 : Boolean;
      wBuscarEnCierre@1100244014 : Boolean;
      lwTieneContrato@1100244015 : Boolean;
      rIncidencia@1100244016 : Record 7010348;
      lrInciCond@1100244017 : Record 7010333;
      rRegistroCierre@1100244018 : Record 7035344;
      rDiaslibres@1100244019 : Record 7035341;
      wContador@1100244020 : Integer;
      wPrueba@1100244021 : Text[30];
      wArchivoGuarda@1100244022 : Text[250];
      wDiasT@1100244023 : Integer;
      wTotaldiasT@1100244024 : Integer;
      wComprueba31@1100244025 : Code[2];
      wProcesar@1100244026 : Boolean;
      wCode2@1100244027 : Code[12];
      wConductores@1100244028 : Integer;
    BEGIN
      // Informe_actividad_conductores
      // AML 211102

      CLEARALL;

      // Pedimos la fecha de proceso.
      fCalendario.RUNMODAL;
      wFechaInicio     := fCalendario.GetChosenDate;
      IF wFechaInicio > 0D THEN
        wCode          := FORMAT(wFechaInicio,0,Text50000)
      ELSE
        ERROR(err12);

      EVALUATE(wFechaInicio,wCode);

      wFechaFin      := CALCDATE(Text50001,wFechaInicio);

      wCode2         := FORMAT(wFechaFin);
      EVALUATE(wComprueba31,COPYSTR(wCode2,1,2));

      // miramos si se ha especificado el archivo de plantilla.
      wArchivoExcel := Comprobar_parametros_informes;

      // ponemos los contadores de incidencias a cero.
      rTiposInciCond.RESET;
      IF rTiposInciCond.FINDFIRST THEN
        rTiposInciCond.MODIFYALL("Contador inforpmes",0)
      ELSE
        ERROR(err21);

      rTiposInciCond.RESET;
      wContador := 0;

      IF CREATE(xlAplic) THEN BEGIN
        CLEAR(xlLibro);
        CLEAR(xlHoja);
        xlLibro := xlAplic.Workbooks._Open(wArchivoExcel);

        // Abrimos la hoja de conductores.
        xlHoja := xlLibro.Worksheets.Item(Text50027);
        xlHoja.Activate;

        // Ponemos el titulo en la celda C4
        wCelda := Text50003;
        xlHoja.Range(wCelda).Value := Text50004 + UPPERCASE(FORMAT(wFechaInicio,0,Text50005));

        //Rellenamos los nombres de los dias de la semana.
        wFechaProceso      := wFechaInicio;
        wCol               := 2;
        wLin               := 4;
        WHILE wFechaProceso <= wFechaFin  DO BEGIN
          wFechaEntero       := DATE2DWY(wFechaProceso, 1);

          // ----  AJS 10.02.2003  Montar la linea roja detras del domingo  ----

          IF wFechaEntero = 7 THEN BEGIN
            xlHoja := xlLibro.Worksheets.Item(Text50028);
            xlHoja.Activate;

            xlRango := xlHoja.Range(Text50029); // Tiene linea roja a la izquierda
            xlRango.Copy;

            wCelda := Text50030 + DELCHR(FORMAT(wCol), '<>');
      //      xlRango := xlHoja.Range(wCelda);
            xlRango := xlHoja.Range(Text50010).Offset(0,wCol);

            xlRango.Select;
            xlHoja.Paste;
          END
          ELSE BEGIN
            IF wFechaProceso <> wFechaFin THEN BEGIN
              xlHoja := xlLibro.Worksheets.Item(Text50028);
              xlHoja.Activate;

              xlRango := xlHoja.Range(Text50003); // Tiene linea negra a la derecha
              xlRango.Copy;

              wCelda := Text50030 + DELCHR(FORMAT(wCol), '<>');
      //        xlRango := xlHoja.Range(wCelda);
              xlRango := xlHoja.Range(Text50010).Offset(0,wCol);


              xlRango.Select;
              xlHoja.Paste;
            END
            ELSE BEGIN
              xlHoja := xlLibro.Worksheets.Item(Text50028);
              xlHoja.Activate;

              xlRango := xlHoja.Range(Text50031); // Tiene linea negra a la derecha en negrita
              xlRango.Copy;

              wCelda := Text50030 + DELCHR(FORMAT(wCol), '<>');
      //        xlRango := xlHoja.Range(wCelda);
              xlRango := xlHoja.Range(Text50010).Offset(0,wCol);

              xlRango.Select;
              xlHoja.Paste;
            END;
          END;

          xlHoja := xlLibro.Worksheets.Item(Text50027);
          xlHoja.Activate;

          xlRango := xlHoja.Range(Text50010).Offset(wLin,wCol);
          xlRango.Select;
          xlHoja.Paste;

          xlRango := xlHoja.Range(Text50010).Offset(wLin+1,wCol);
          xlRango.Select;
          xlHoja.Paste;
          xlHoja.Range(Text50010).Offset(wLin+1,wCol).Value := DATE2DMY(wFechaProceso, 1);

          CASE wFechaEntero OF
            1: xlHoja.Range(Text50010).Offset(wLin,wCol).Value := Text50021;
            2: xlHoja.Range(Text50010).Offset(wLin,wCol).Value := Text50022;
            3: xlHoja.Range(Text50010).Offset(wLin,wCol).Value := Text50012;
            4: xlHoja.Range(Text50010).Offset(wLin,wCol).Value := Text50023;
            5: xlHoja.Range(Text50010).Offset(wLin,wCol).Value := Text50024;
            6: xlHoja.Range(Text50010).Offset(wLin,wCol).Value := Text50025;
            7:
            BEGIN
              xlHoja.Range(Text50010).Offset(wLin,wCol).Value := Text50026;
            END;
          END;

          wCol += 1;
          wFechaProceso := CALCDATE(Text50013,wFechaProceso);
        END;

        // AML 240103
        // Se eliminan los conductores bloqueados.

        wLin := 6;
        rConductor.RESET;
        rConductor.SETCURRENTKEY(Externo    ,
                                 Bloqueado );

        rConductor.SETRANGE(Externo   , FALSE);
        rConductor.SETRANGE(Bloqueado , FALSE);
        rConductor.SETRANGE("No Imprimir estadisticas" , FALSE);
        IF rConductor.FINDSET THEN BEGIN

         wDialog.OPEN(Text50006 +
                      Text50032);


          wCol         := 1;
          wTotalRegs   := rConductor.COUNTAPPROX;

          // ----  AJS 10.02.2003 Se ha incluido un contador de conductores para ir mostrandolo en la hoja excel  ----

          wConductores := 0;

          REPEAT

            // AML 240103.
            // Comprobamos el contrato del conductor.
            // si no tiene contrato para la fecha de inicio pues no lo saltamos directamente,
            // Se puede dar el caso de que el contrato acabe a mediados de mes por eso hay una
            // Segunda comprobaci¢n a nivel de dia.

            // ----  AJS 15.04.03 Puede darse el caso de que un conductor no tenga contrato para el primer dia del periodo  ----
            // ----  pero si tenga para otros dias del mismo, para este caso hago una comprobacion de que al menos un dia   ----
            // ----  tenga contrato                                                                                         ----

            lwTieneContrato := FALSE;
            wFechaProceso   := wFechaInicio;
            WHILE wFechaProceso <> wFechaFin DO BEGIN
              IF cGesDiaria.Calcula_Fechas_Contrato(rConductor.Conductor, wFechaProceso, FALSE) THEN BEGIN
                lwTieneContrato := TRUE;
                wFechaProceso := wFechaFin;
              END
              ELSE
                wFechaProceso := CALCDATE(Text50013,wFechaProceso);
            END;

            IF lwTieneContrato THEN BEGIN
              wConductores += 1;

              // Copiamos el formato de la hoja auxiliar.
              xlHoja := xlLibro.Worksheets.Item(Text50028);
              xlHoja.Activate;

              xlRango := xlHoja.Range('1:1');
              xlRango.Copy;

              xlHoja := xlLibro.Worksheets.Item(Text50027);
              xlHoja.Activate;

              xlRango := xlHoja.Range(FORMAT(wLin+1)+':'+FORMAT(wLin+1));
              xlRango.Select;
              xlHoja.Paste;

              //Ponemos el nombre abreviado del conductor

              // ----  AJS 10.02.2003  He puesto el contador de conductores junto al nombre corto

              wCol := 1;
              xlHoja.Range(Text50010).Offset(wLin,wCol-1).Value := wConductores;
              xlHoja.Range(Text50010).Offset(wLin,wCol).Value := rConductor."Nombre Abreviado";
              wCol += 1;

              wFechaProceso := wFechaInicio;
              WHILE wFechaProceso <= wFechaFin DO BEGIN

                wProcesar := FALSE;

                //Primero se comprueba tanto que el dia haya sido abierto como cerrado
                // Se ha a¤adido tambien la comprobacion de contrato por dia.

                rDiaslibres.RESET;
                IF rDiaslibres.GET(wFechaProceso) THEN BEGIN
                  IF rDiaslibres.Cerrado AND
                    cGesDiaria.Calcula_Fechas_Contrato(rConductor.Conductor, wFechaProceso, TRUE) THEN
                    wProcesar := TRUE;
                END
                ELSE
                  wProcesar := FALSE;

                rConductor2.RESET;
                rConductor2.GET(rConductor.Conductor);

                rConductor2.SETFILTER("Filtro Fechas",'%1', wFechaProceso);
                rConductor2.CALCFIELDS(Actividad);

                IF (rConductor2.Actividad = FALSE) AND (wProcesar = TRUE) THEN BEGIN
                  wTrabajado := FALSE;

                  wBuscarInci     := FALSE;
                  wBuscarEnCierre := FALSE;

                  IF wTrabajado = FALSE THEN BEGIN

                    { JPT-29/07/03 - Dejamos de utilizar el campo calculado. Lo calculamos nosotros
                                     directamente ya que necesitamos ordenar por el campo "Priodidad"

                    rConductor2.RESET;
                    rConductor2.GET(rConductor.Conductor);
                    rConductor2.SETFILTER("Filtro fecha inicio" , '<=%1'      , wFechaProceso);
                    rConductor2.SETFILTER("Filtro fecha fin"    , '>=%1|%2'   , wFechaProceso,0D);
                    rConductor2.CALCFIELDS("Incidencias para informe");

                    IF rConductor2."Incidencias para informe" <>
                       rConductor2."Incidencias para informe"::"  " THEN
                      wBuscarInci := TRUE
                    ELSE
                      wBuscarEnCierre := TRUE;

                    }

                    lrInciCond.RESET;
                    lrInciCond.SETCURRENTKEY(Conductor,Prioridad,"Fecha Desde","Fecha Hasta");
                    lrInciCond.SETFILTER("Fecha Desde", '<=%1'      , wFechaProceso);
                    lrInciCond.SETFILTER("Fecha Hasta", '>=%1|%2'   , wFechaProceso,0D);
                    lrInciCond.SETRANGE(Conductor     , rConductor.Conductor);
                    IF NOT lrInciCond.FINDLAST THEN
                      CLEAR(lrInciCond);

                    //BRM 17/06/04
                    //IF lrInciCond.Motivo <> lrInciCond.Motivo::"  " THEN
                    IF (lrInciCond."Cod Motivo" <> '') THEN
                      wBuscarInci := TRUE
                    ELSE
                      wBuscarEnCierre := TRUE;

                    //Buscamos incidencia
                    IF wBuscarInci THEN BEGIN

                      //Vamos a mirar la configuracion del motivo de la incidencia a ver si tiene
                      //color y codigo abreviado.

                      rTiposInciCond.RESET;
                      //BRM 17/06/04 Cambio clave
                      //IF rTiposInciCond.GET(lrInciCond.Motivo) THEN BEGIN
                      IF rTiposInciCond.GET(lrInciCond."Cod Motivo") THEN BEGIN
                        IF (rTiposInciCond.Codigo    <> '') AND
                           (rTiposInciCond."Color para informes" <>
                           rTiposInciCond."Color para informes"::" ") THEN BEGIN

                          xlHoja.Range(Text50010).Offset(wLin,wCol).Value := rTiposInciCond.Codigo;
                          xlInterior      := xlHoja.Range(Text50010).Offset(wLin,wCol).Interior;
                          wBuscarInci     := TRUE;
                          wBuscarEnCierre := FALSE;
                        END;
                      END;

                    END;

                    //Buscamos en la ventana de cierre.
                    IF wBuscarEnCierre THEN BEGIN
                      rRegistroCierre.RESET;
                      rRegistroCierre.SETCURRENTKEY("Fecha cierre"       ,
                                                    "Codigo conductor"  );

                      rRegistroCierre.SETRANGE("Fecha cierre"       , wFechaProceso);
                      rRegistroCierre.SETRANGE("Codigo conductor"   , rConductor.Conductor);
                      IF rRegistroCierre.FINDFIRST THEN BEGIN
                        rTiposInciCond.RESET;
                        //BRM 17/06/04
                        //IF rRegistroCierre.Estado <> rRegistroCierre.Estado::"  " THEN BEGIN
                        IF (rRegistroCierre."Cod motivo" <> '') THEN BEGIN
                          rTiposInciCond.RESET;
                          //BRM 17/06/04
                          //IF rTiposInciCond.GET(rRegistroCierre.Estado) THEN BEGIN
                          IF rTiposInciCond.GET(rRegistroCierre."Cod motivo") THEN BEGIN
                            IF (rTiposInciCond."Color para informes"  <>
                                rTiposInciCond."Color para informes"::" ") AND
                               (rTiposInciCond.Codigo <> '') THEN BEGIN

                               xlHoja.Range(Text50010).Offset(wLin,wCol).Value := rTiposInciCond.Codigo;
                               xlInterior := xlHoja.Range(Text50010).Offset(wLin,wCol).Interior;
                               wBuscarEnCierre := TRUE;

                            END
                            ELSE
                              ERROR(err21);
                          END;
                        END
                        ELSE
                          ERROR(err22 , rRegistroCierre.Recurso
                                      , rRegistroCierre."Fecha cierre");
                      END
                      ELSE
                        wBuscarEnCierre := FALSE;
                    END;

                    IF (wTrabajado = FALSE) AND (wBuscarEnCierre = FALSE) AND (wBuscarInci = FALSE) THEN
                      ERROR(err23 , rConductor."Nombre Abreviado" , wFechaProceso);

                    IF (wBuscarEnCierre OR wBuscarInci) THEN BEGIN
                      //Cambiamos el color.
                      CambiarColorCond(wLin,wCol);
                      xlInterior.Pattern                  := 1;
                      rTiposInciCond."Contador inforpmes"  += 1;
                      rTiposInciCond.MODIFY;
                    END;

                  END;
                END
                ELSE BEGIN
                  IF (rConductor2.Actividad) AND (wProcesar = TRUE) THEN BEGIN
                    wDiasT      += 1;
                    wTotaldiasT += 1;
                  END;
                END;

                IF wProcesar = FALSE THEN
                  xlHoja.Range(Text50010).Offset(wLin,wCol).Value := Text50012;

                wFechaProceso := CALCDATE(Text50013,wFechaProceso);
                wCol += 1;

              END;

              //Comprobamos el dia 31.
              IF wComprueba31 <> '31' THEN
                xlHoja.Range(Text50010).Offset(wLin,32).Value := Text50012;

              xlHoja.Range(Text50010).Offset(wLin,34).Value := wDiasT;

              wLin   += 1;

            END;

            wDiasT := 0;
            wCol   := 2;
            wNreg  += 1;

            wDialog.UPDATE(1,ROUND((wNreg / wTotalRegs) * 10000,1));


          UNTIL rConductor.NEXT = 0;

          wDialog.CLOSE;
        END;

        wContador += 1;
        END;
        wLin += 1;

        //metemos la leyenda;
        rTiposInciCond.RESET;
        IF rTiposInciCond.FINDSET THEN BEGIN
          wCol      := 2;
          wContador := wLin;
          REPEAT
            IF wContador = wLin THEN BEGIN
              xlHoja.Range(Text50010).Offset(wLin,34).Value   := Text50033;
              xlHoja.Range(Text50010).Offset(wLin+1,34).Value := wTotaldiasT;
              wTotaldiasT := 0;
              xlRango :=  xlHoja.Range(Text50010).Offset(wLin,34);
              xlRango.HorizontalAlignment := 3;
              xlRango._BorderAround        := 1;
              xlFont := xlRango.Font;
              xlFont.Bold(TRUE);
              xlRango :=  xlHoja.Range(Text50010).Offset(wLin+1,34);
              xlRango.HorizontalAlignment := 3;
              xlRango._BorderAround        := 1;
              xlFont := xlRango.Font;
              xlFont.Bold(TRUE);
            END;

            xlHoja.Range(Text50010).Offset(wLin,wCol).Value   := rTiposInciCond.Codigo;
            xlInterior                                   := xlHoja.Range(Text50010).Offset(wLin,wCol).Interior;
            CambiarColorCond(wLin,wCol);

            //BRM 1706/04
            //xlHoja.Range(Text50010).Offset(wLin,wCol+1).Value := STRSUBSTNO('%1',rTiposInciCond."Motivo incidencia conductor");
            xlHoja.Range(Text50010).Offset(wLin,wCol+1).Value := STRSUBSTNO('%1',rTiposInciCond.Descripcion);
            xlHoja.Range(Text50010).Offset(wLin,wCol+6).Value := rTiposInciCond."Contador inforpmes";
            xlHoja.Range(Text50010).Offset(wLin,wCol+1).Resize(1, 5).Merge;
            wLin += 1;

          UNTIL rTiposInciCond.NEXT = 0;

          xlHoja.Range(Text50010).Offset(wLin,wCol).Value   := Text50012;
          xlHoja.Range(Text50010).Offset(wLin,wCol+1).Value := Text50016;
          xlHoja.Range(Text50010).Offset(wLin,wCol+1).Resize(1, 5).Merge;

        //POnemos la leyenda en negrita y bordeada.
        xlRango :=  xlHoja.Range(Text50010).Offset(wContador,wCol).Resize(1+(wLin-wContador),7);
        xlRango.HorizontalAlignment := 3;
        xlRango._BorderAround        := 1;
        xlFont := xlRango.Font;
        xlFont.Bold(TRUE);

        xlRango := xlHoja.Range(Text50017);
        xlRango.EntireColumn.AutoFit;
        xlAplic.Visible(TRUE);

        wArchivoGuarda := COPYSTR(wArchivoExcel,1,STRLEN(wArchivoExcel)-4) + '-'      +
                          UPPERCASE(FORMAT(wFechaInicio,0,Text50018))+'-' +
                          USERID + Text50019;

        IF EXISTS(wArchivoGuarda) THEN
          ERASE(wArchivoGuarda);

        xlLibro.Saved(TRUE);
        xlLibro._SaveAs(wArchivoGuarda);

      END;
      CLEARALL;
    END;

    PROCEDURE Comprobar_parametros_informes@20() : Text[250];
    VAR
      rParametros@1100244000 : Record 7010311;
      wArchivo@1100244001 : Text[250];
    BEGIN
      // Comprobar_parametros_informes
      //

      rParametros.RESET;
      IF rParametros.FINDFIRST THEN BEGIN
        IF rParametros."Ruta Plantilla Informes" = '' THEN
          ERROR(err10)
        ELSE BEGIN
          IF EXISTS(rParametros."Ruta Plantilla Informes") THEN
            EXIT(rParametros."Ruta Plantilla Informes")
          ELSE
            ERROR(err11,rParametros."Ruta Plantilla Informes");
        END;
      END
      ELSE
        ERROR(err9);
    END;

    PROCEDURE CambiarColor@22(pLin@1100244000 : Integer;pCol@1100244001 : Integer);
    BEGIN
      // CambiarColor
      //

      CASE rTiposInci."Color plantilla" OF
        rTiposInci."Color plantilla"::Amarillo      : xlInterior.ColorIndex :=  6;
        rTiposInci."Color plantilla"::Rojo          : xlInterior.ColorIndex :=  3;

        rTiposInci."Color plantilla"::Negro         : BEGIN
                              xlFont                :=  xlHoja.Range(Text50010).Offset(pLin,pCol).Font;
                              xlFont.ColorIndex     :=  2;
                              xlInterior.ColorIndex :=  1;
        END;

        rTiposInci."Color plantilla"::Rosa          : xlInterior.ColorIndex :=  7;
        rTiposInci."Color plantilla"::Verde         : xlInterior.ColorIndex := 43;
        rTiposInci."Color plantilla"::Lila          : xlInterior.ColorIndex := 13;
        rTiposInci."Color plantilla"::"Azul Claro"  : xlInterior.ColorIndex := 33;
        rTiposInci."Color plantilla"::"Azul Oscuro" : xlInterior.ColorIndex := 11;
        rTiposInci."Color plantilla"::Naranja       : xlInterior.ColorIndex := 45;
        rTiposInci."Color plantilla"::Marron        : xlInterior.ColorIndex := 53;
        rTiposInci."Color plantilla"::Gris          : xlInterior.ColorIndex := 48;
        rTiposInci."Color plantilla"::Lima          : xlInterior.ColorIndex := 4;
        rTiposInci."Color plantilla"::Beig          : xlInterior.ColorIndex := 40;
      END;
    END;

    PROCEDURE CambiarColorCond@17(pLin@1100244000 : Integer;pCol@1100244001 : Integer);
    BEGIN
      // CambiarColorCond
      //

      CASE rTiposInciCond."Color para informes" OF
        rTiposInciCond."Color para informes"::Amarillo      : xlInterior.ColorIndex :=  6;
        rTiposInciCond."Color para informes"::Rojo          : xlInterior.ColorIndex :=  3;

        rTiposInciCond."Color para informes"::Negro         : BEGIN
                              xlFont                :=  xlHoja.Range(Text50010).Offset(pLin,pCol).Font;
                              xlFont.ColorIndex     :=  2;
                              xlInterior.ColorIndex :=  1;
        END;

        rTiposInciCond."Color para informes"::Rosa          : xlInterior.ColorIndex :=  7;
        rTiposInciCond."Color para informes"::Verde         : xlInterior.ColorIndex := 43;
        rTiposInciCond."Color para informes"::Lila          : xlInterior.ColorIndex := 13;
        rTiposInciCond."Color para informes"::"Azul Claro"  : xlInterior.ColorIndex := 33;
        rTiposInciCond."Color para informes"::"Azul Oscuro" : xlInterior.ColorIndex := 11;
        rTiposInciCond."Color para informes"::Naranja       : xlInterior.ColorIndex := 45;
        rTiposInciCond."Color para informes"::Marron        : xlInterior.ColorIndex := 53;
        rTiposInciCond."Color para informes"::Gris          : xlInterior.ColorIndex := 48;
        rTiposInciCond."Color para informes"::Lima          : xlInterior.ColorIndex := 4;
        rTiposInciCond."Color para informes"::Beig          : xlInterior.ColorIndex := 40;

      END;
    END;

    PROCEDURE Informe_kms_vehiculos@23();
    VAR
      wArchivoExcel@1100244000 : Text[250];
      wCelda@1100244001 : Text[30];
      fCalendario@1100244002 : Form 7035363;
      wCode@1100244003 : Code[200];
      wFechaInicio@1100244004 : Date;
      wFechaFin@1100244005 : Date;
      wFechaProceso@1100244006 : Date;
      rVehiculo@1100244007 : Record 7010346;
      wLin@1100244008 : Integer;
      wCol@1100244009 : Integer;
      rIncidencia@1100244010 : Record 7010348;
      rReg@1100244011 : Record 7035342;
      lrTempVeh@1100244012 : Record 7010351;
      wContador@1100244013 : Integer;
      wArchivoGuarda@1100244014 : Text[250];
      wFechaFinProceso@1100244015 : Date;
      wFinMes@1100244016 : Date;
      wKmsIni@1100244017 : Decimal;
      wKmsFin@1100244018 : Decimal;
      rReg2@1100244019 : Record 7035342;
      wProcesa@1100244020 : Boolean;
      wTotalkms@1100244021 : Decimal;
      wMesesRellenados@1100244022 : Integer;
      wDiasMesesRellenados@1100244023 : Integer;
      wDiasEnteros@1100244024 : Integer;
      wGranTotalkms@1100244025 : Decimal;
      wIDIni@1100244026 : Integer;
      wIDfin@1100244027 : Integer;
      wLinIni@1100244028 : Integer;
      ArrayDias@1100244029 : ARRAY [12] OF Integer;
      ArrayKms@1100244030 : ARRAY [12] OF Decimal;
      ArrayVeh@1100244031 : ARRAY [12] OF Decimal;
      GranTotalMMes@1100244032 : Decimal;
      GranTotalMDia@1100244033 : Decimal;
      wGranTotalVeh@1100244034 : Decimal;
      wGranTotalDias@1100244035 : Decimal;
      wEncontrado@1100244036 : Boolean;
      lwValor@1100244037 : Text[30];
    BEGIN
      // informe_kms_vehiculos ;
      //

      CLEARALL;
      rPar.FINDFIRST;

      // Pedimos la fecha de proceso.
      // Solo tendremos en cuenta el a¤o.

      fCalendario.RUNMODAL;
      wFechaInicio     := fCalendario.GetChosenDate;
      IF wFechaInicio > 0D THEN
        wCode          := FORMAT(wFechaInicio,0,Text50034)
      ELSE
        ERROR(err12);

      EVALUATE(wFechaInicio, wCode);
      EVALUATE(wFechaFin , FORMAT(wFechaInicio, 0, Text50035));

      // miramos si se ha especificado el archivo de plantilla.
      wArchivoExcel := Comprobar_parametros_informes;

      wContador := 0;
      IF CREATE(xlAplic) THEN BEGIN

        wDialog.OPEN(Text50006 +
                     Text50036);

        xlLibro := xlAplic.Workbooks._Open(wArchivoExcel);

        // Abrimos la hoja de vehiculos.
        xlHoja := xlLibro.Worksheets.Item(Text50037);
        xlHoja.Activate;

        // Ponemos el titulo en la celda C4
        wCelda := Text50038;
        xlHoja.Range(wCelda).Value := Text50039 + FORMAT(wFechaInicio, 0, Text50040);

        //Filtramos la tabla vehiculos por vehiculos propios.
        rVehiculo.RESET;
        rVehiculo.SETCURRENTKEY("Vehiculo propio",
                                "Tipo vehiculo",
                                Numero,
                                "Fecha venta");

        rVehiculo.SETRANGE("Vehiculo propio",TRUE );


        rVehiculo.SETRANGE("No Imprimir estadisticas", FALSE);

        // ----  AJS 15.04.2003 Pasamos a trabajar con un temporal para evitar los vehiculos vendidos  ----

        lrTempVeh.RESET;
        IF lrTempVeh.FINDFIRST THEN
          lrTempVeh.DELETEALL;

        IF rVehiculo.FINDSET THEN BEGIN
          REPEAT
            // ----  AJS 11.03.2003  Eliminar los coches vendidos de este informe  ----

            IF rPar."Vehiculos Vendidos en Estadist" OR
               (rVehiculo."Fecha venta" = 0D) OR
               ( (rVehiculo."Fecha venta" <> 0D) AND (rVehiculo."Fecha venta" > wFechaFin)) THEN BEGIN

              CLEAR(lrTempVeh);
              lrTempVeh.Usuario := USERID;
              lrTempVeh.Garaje  := rVehiculo.Garaje;
              lrTempVeh.Numero  := rVehiculo.Numero;
              lrTempVeh.INSERT;
            END;
          UNTIL rVehiculo.NEXT = 0;
        END;

        wLin       := 6;
        wCol       := 1;

        lrTempVeh.SETRANGE(Usuario, USERID);
        IF lrTempVeh.FINDSET THEN BEGIN

          wTotalRegs := lrTempVeh.COUNTAPPROX;

          REPEAT

            //Copiamos el formato de la hoja NAVISION3

            xlHoja := xlLibro.Worksheets.Item(Text50041);
            xlHoja.Activate;

            xlRango := xlHoja.Range('2:2');
            xlRango.Copy;

            //Pegamos en la hoja correspondiente.
            xlHoja := xlLibro.Worksheets.Item(Text50037);
            xlHoja.Activate;

            xlRango := xlHoja.Range(FORMAT(wLin+1)+':'+FORMAT(wLin+1));
            xlRango.Select;
            xlHoja.Paste;

            wFechaProceso    := wFechaInicio;
            wFechaFinProceso := wFechaFin;
            xlHoja.Range(Text50010).Offset(wLin,wCol).Value := lrTempVeh.Numero;

            WHILE wFechaProceso <= wFechaFinProceso DO BEGIN

              // Buscamos el ultimo d¡a del mes
              wFinMes := CALCDATE(Text50020, wFechaProceso);

              wKmsIni     := 0;
              wKmsFin     := 0;
              wIDIni      := 0;
              wIDfin      := 0;
              wEncontrado := FALSE;

              rReg.RESET;
              rReg.SETCURRENTKEY(Vehiculo,
                                 Dia,
                                 "Hora repostaje",
                                 Anulado);

              rReg.SETRANGE (Vehiculo            , lrTempVeh.Numero);
              rReg.SETRANGE (Dia                 , wFechaProceso, wFinMes);
              rReg.SETRANGE (Anulado             , FALSE);
              rReg.SETFILTER("Kilometros Reales" , '<>%1',0);
              IF rReg.FINDFIRST THEN BEGIN
                rReg.CALCSUMS("Kms realizados");
                wKmsFin := rReg."Kms realizados";
                wEncontrado := TRUE;
              END;

              {* AJS Utilizar el nuevo campo de kilometros realizados
              // Buscamos justo antes del dia 1 del mes procesando.
              IF rReg.FINDLAST THEN
                wKmsIni := rReg."Kilometros Reales";

              // Buscamos los finales en el correspondiente mes.
              rReg.RESET;
              rReg.SETCURRENTKEY(Vehiculo        , Dia , "Hora repostaje",Anulado);
              rReg.SETRANGE(Vehiculo             , lrTempVeh.Numero);
              rReg.SETRANGE(Anulado              , FALSE);
              rReg.SETRANGE(Dia                  , wFechaProceso,wFinMes);
              rReg.SETFILTER("Kilometros Reales" , '<>%1',0);
              IF rReg.FINDLAST THEN BEGIN
                wKmsFin     := rReg."Kilometros Reales";
                wEncontrado := TRUE;
              END;
              COMENTADO AJS *}

              IF wEncontrado THEN BEGIN
                wTotalkms        += ROUND(wKmsFin - wKmsIni, 0.01);
                wGranTotalkms    += wTotalkms;
                wMesesRellenados += 1;
                wCode            := COPYSTR(STRSUBSTNO('%1', wFinMes), 1, 2);

                xlHoja.Range(Text50010).Offset(wLin,wCol+1).Value        := FORMAT(wTotalkms);
                xlHoja.Range(Text50010).Offset(wLin,wCol+1).NumberFormat := '0,00';

                xlRango := xlHoja.Range(Text50010).Offset(wLin,wCol+1);
                xlRango.EntireColumn.AutoFit;

                EVALUATE(wDiasEnteros,wCode);
                wDiasMesesRellenados += wDiasEnteros;

                ArrayDias[wCol]      := wDiasEnteros;
                ArrayKms [wCol]      += wTotalkms;
                ArrayVeh [wCol]      += 1;
              END;

              // Aumentamos los contadores
              wFechaProceso := CALCDATE(Text50042,wFechaProceso);
              wCol          += 1 ;
              wCode         := '';
              wTotalkms     := 0;
            END;

            IF wGranTotalkms > 0 THEN BEGIN

              wCelda := Text50043 + FORMAT(wLin+1);
              xlHoja.Range(wCelda).Value          := FORMAT(ROUND(wGranTotalkms,0.01));
              xlHoja.Range(wCelda).NumberFormat   := '0,00';

              wCelda := Text50044 + FORMAT(wLin+1);
              GranTotalMMes                       += ROUND(wGranTotalkms/wMesesRellenados,0.01);
              xlHoja.Range(wCelda).Value          := FORMAT(ROUND(wGranTotalkms/wMesesRellenados,0.01));
              xlHoja.Range(wCelda).NumberFormat   := '0,00';

              wCelda := Text50045 + FORMAT(wLin+1);
              GranTotalMDia                       += ROUND(wGranTotalkms/wDiasMesesRellenados,0.01);
              xlHoja.Range(wCelda).Value          := FORMAT(ROUND(wGranTotalkms/wDiasMesesRellenados,0.01));
              xlHoja.Range(wCelda).NumberFormat   := '0,00';

              xlRango := xlHoja.Range(Text50043+FORMAT(wLin+1)+Text50046+FORMAT(wLin+1));
              xlRango.EntireColumn.AutoFit;

            END;

            wCol                 := 1;
            wLin                 += 1;
            wTotalkms            := 0;
            wKmsIni              := 0;
            wKmsFin              := 0;
            wIDIni               := 0;
            wIDfin               := 0;
            wDiasMesesRellenados := 0;
            wMesesRellenados     := 0;
            wDiasEnteros         := 0;
            wGranTotalkms        := 0;

            wNreg += 1;
            wDialog.UPDATE(1,ROUND((wNreg / wTotalRegs) * 10000,1));

          UNTIL lrTempVeh.NEXT = 0 ;

          //Copiamos los datos de total.
          xlHoja := xlLibro.Worksheets.Item(Text50041);
          xlHoja.Activate;

          xlRango := xlHoja.Range('3:5');
          xlRango.Copy;

          //Pegamos en la hoja correspondiente.
          xlHoja := xlLibro.Worksheets.Item(Text50037);
          xlHoja.Activate;

          xlRango := xlHoja.Range(FORMAT(wLin+1)+':'+FORMAT(wLin+1));
          xlRango.Select;
          xlHoja.Paste;

          //Filas de totales.
          WHILE wCol < 13 DO BEGIN

            IF ArrayKms[wCol] > 0 THEN BEGIN

              xlHoja.Range(Text50010).Offset(wLin,wCol+1).NumberFormat   := '0,00';
              xlHoja.Range(Text50010).Offset(wLin,wCol+1).Value          := FORMAT(ROUND(ArrayKms[wCol],0.01));

              lwValor := FORMAT(ROUND(ArrayKms[wCol]/ArrayVeh[wCol],0.01));
              xlHoja.Range(Text50010).Offset(wLin+1,wCol+1).NumberFormat := '0,00';
              xlHoja.Range(Text50010).Offset(wLin+1,wCol+1).Value        := lwValor;

              lwValor := FORMAT(ROUND(ArrayKms[wCol]/ArrayDias[wCol],0.01));
              xlHoja.Range(Text50010).Offset(wLin+2,wCol+1).NumberFormat := '0,00';
              xlHoja.Range(Text50010).Offset(wLin+2,wCol+1).Value        := lwValor;

            END;

            wCol += 1;

          END;

          //Ponemos los totales.

          wGranTotalVeh := ArrayVeh[1]+ArrayVeh[2]+ArrayVeh[3]+
                           ArrayVeh[4]+ArrayVeh[5]+ArrayVeh[6]+
                           ArrayVeh[7]+ArrayVeh[8]+ArrayVeh[9]+
                           ArrayVeh[10]+ArrayVeh[11]+ArrayVeh[12];

          wGranTotalkms := ArrayKms[1]+ArrayKms[2]+ArrayKms[3]+
                           ArrayKms[4]+ArrayKms[5]+ArrayKms[6]+
                           ArrayKms[7]+ArrayKms[8]+ArrayKms[9]+
                           ArrayKms[10]+ArrayKms[11]+ArrayKms[12];

          wGranTotalDias := ArrayDias[1]+ArrayDias[2]+ArrayDias[3]+
                            ArrayDias[4]+ArrayDias[5]+ArrayDias[6]+
                            ArrayDias[7]+ArrayDias[8]+ArrayDias[9]+
                            ArrayDias[10]+ArrayDias[11]+ArrayDias[12];

          IF wGranTotalVeh > 0 THEN BEGIN

            xlHoja.Range(Text50010).Offset(wLin,wCol+1).NumberFormat   := '0,00';
            xlHoja.Range(Text50010).Offset(wLin,wCol+1).Value          := FORMAT(wGranTotalkms);

            xlHoja.Range(Text50010).Offset(wLin,wCol+2).NumberFormat   := '0,00';
            xlHoja.Range(Text50010).Offset(wLin,wCol+2).Value          := FORMAT(GranTotalMMes);

            xlHoja.Range(Text50010).Offset(wLin,wCol+3).NumberFormat   := '0,00';
            xlHoja.Range(Text50010).Offset(wLin,wCol+3).Value          := FORMAT(GranTotalMDia);

            xlHoja.Range(Text50010).Offset(wLin+1,wCol+1).NumberFormat := '0,00';
            lwValor := FORMAT(ROUND(wGranTotalkms/wGranTotalVeh,0.01));
            xlHoja.Range(Text50010).Offset(wLin+1,wCol+1).Value        := lwValor;

            xlHoja.Range(Text50010).Offset(wLin+1,wCol+2).NumberFormat := '0,00';
            lwValor := FORMAT(ROUND(GranTotalMMes/wGranTotalVeh,0.01));
            xlHoja.Range(Text50010).Offset(wLin+1,wCol+2).Value        := lwValor;

            xlHoja.Range(Text50010).Offset(wLin+1,wCol+3).NumberFormat := '0,00';
            lwValor := FORMAT(ROUND(GranTotalMDia/wGranTotalVeh,0.01));
            xlHoja.Range(Text50010).Offset(wLin+1,wCol+3).Value        := lwValor;

            xlHoja.Range(Text50010).Offset(wLin+2,wCol+1).NumberFormat := '0,00';
            lwValor := FORMAT(ROUND((wGranTotalkms/wGranTotalVeh)/30,0.01));
            xlHoja.Range(Text50010).Offset(wLin+2,wCol+1).Value        := lwValor;

            xlHoja.Range(Text50010).Offset(wLin+2,wCol+2).NumberFormat := '0,00';
            lwValor :=FORMAT( ROUND((GranTotalMMes/wGranTotalVeh)/30,0.01));
            xlHoja.Range(Text50010).Offset(wLin+2,wCol+2).Value        := lwValor;

            xlHoja.Range(Text50010).Offset(wLin+2,wCol+3).NumberFormat := '0,00';
            lwValor := FORMAT(ROUND((GranTotalMDia/wGranTotalVeh)/30,0.01));
            xlHoja.Range(Text50010).Offset(wLin+2,wCol+3).Value        := lwValor;

          END;

        END;

        wDialog.CLOSE;

        wArchivoGuarda := COPYSTR(wArchivoExcel,1,STRLEN(wArchivoExcel)-4) + '-'      +
                          UPPERCASE(FORMAT(wFechaInicio,0,Text50018))+'-' +
                          USERID + Text50019;

        IF EXISTS(wArchivoGuarda) THEN
          ERASE(wArchivoGuarda);

        xlLibro.Saved(TRUE);
        xlLibro._SaveAs(wArchivoGuarda);


        xlAplic.Visible(TRUE);
        CLEARALL;

      END;
    END;

    PROCEDURE Informe_vehiculos_utilizados@4();
    VAR
      wArchivoExcel@1100244000 : Text[250];
      wCelda@1100244001 : Text[30];
      fCalendario@1100244002 : Form 7035363;
      wCode@1100244003 : Code[200];
      wFechaInicio@1100244004 : Date;
      wFechaFin@1100244005 : Date;
      wFechaProceso@1100244006 : Date;
      rVehiculo@1100244007 : Record 7010346;
      wLin@1100244008 : Integer;
      wCol@1100244009 : Integer;
      rIncidencia@1100244010 : Record 7010348;
      rReg@1100244011 : Record 7035342;
      wArchivoGuarda@1100244012 : Text[250];
      wA¤oAnt@1100244013 : Date;
      wFinMes@1100244014 : Date;
      rParte@1100244015 : Record 7010360;
      wArrayVeh@1100244017 : ARRAY [500] OF Code[10];
      wVehAnt@1100244018 : Code[10];
      wContaVeh@1100244019 : Integer;
      wContador@1100244020 : Integer;
      wEncontrado@1100244021 : Boolean;
      wFinMesAnt@1100244022 : Date;
      wMesInteger@1100244023 : Integer;
      wNoCopiado@1100244024 : Boolean;
      wArrayVehAnt@1100244025 : ARRAY [500] OF Code[10];
      wVehAntAnt@1100244026 : Code[10];
      wContaVehAnt@1100244027 : Integer;
      wContadorAnt@1100244028 : Integer;
      wEncontradoAnt@1100244029 : Boolean;
      wGranTotalVeh@1100244030 : ARRAY [12] OF Integer;
      wGranTotalVehAnt@1100244031 : ARRAY [12] OF Integer;
      wGranTotaldif@1100244032 : ARRAY [12] OF Integer;
      wComprueba31@1100244033 : Text[30];
      wLin31@1100244034 : Integer;
      wDiasMes@1100244035 : Date;
      wDiasCode@1100244036 : Code[2];
      wDiasInt@1100244037 : Integer;
      wTexto@1100244038 : Text[30];
      wCont@1100244039 : Integer;
      wCont2@1100244040 : Integer;
      wNumVeh@1100244041 : ARRAY [3] OF Integer;
      lwNumDias@1100244042 : Integer;
    BEGIN
      // informe_vehiculos_utilizados;
      //

      CLEARALL;

      // Pedimos la fecha de proceso.
      // Solo tendremos en cuenta el a¤o.

      fCalendario.RUNMODAL;
      wFechaInicio     := fCalendario.GetChosenDate;
      IF wFechaInicio > 0D THEN
        wCode          := FORMAT(wFechaInicio,0,Text50034)
      ELSE
        ERROR(err12);

      EVALUATE(wFechaInicio , wCode);
      EVALUATE(wFechaFin    , FORMAT(wFechaInicio,0,Text50035));
      wA¤oAnt               := CALCDATE(Text50047,wFechaInicio);
      wNoCopiado            := FALSE;

      // miramos si se ha especificado el archivo de plantilla.
      wArchivoExcel := Comprobar_parametros_informes;

      // ----  AJS 13.03.2003  Incluir la seleccion de vehiculos propios, o no propios  ----

      wOpcion := STRMENU(Text50048, 1);

      IF wOpcion = 0 THEN
        EXIT;

      IF CREATE(xlAplic) THEN BEGIN

        wDialog.OPEN(Text50049);
        xlLibro := xlAplic.Workbooks._Open(wArchivoExcel);

        // Abrimos la hoja de vehiculos.
        xlHoja := xlLibro.Worksheets.Item(Text50050);
        xlHoja.Activate;

        // ----  AJS 13.03.2003  Indicar en el informe que opcion de vehiculos se ha seleccionado

        CASE wOpcion OF
          1: wTexto := text005;
          2: wTexto := text006;
          3: wTexto := text007
        END;
        wCelda := Text50051;
        xlHoja.Range(wCelda).Value := FORMAT(wTexto);

        // Ponemos los cuadros
        FOR wCont:=1 TO 33 DO BEGIN
          wLin := wCont + 7;

          xlRango := xlHoja.Range('7:7');
          xlRango.Copy;

          xlRango := xlHoja.Range(FORMAT(wLin)+':'+FORMAT(wLin));
          xlRango.Select;
          xlHoja.Paste;
          xlRango.ClearContents;

          CASE wCont OF
            32 : wTexto := text008;
            33 : wTexto := text009;
            ELSE wTexto := FORMAT(wCont);
          END;
          xlHoja.Range(Text50010).Offset(wLin-1,1).Value  := wTexto;
          xlHoja.Range(Text50010).Offset(wLin-1,21).Value := wTexto;

        END;

        // Ponemos el foramato a las casilla de la Media
        xlRango := xlHoja.Range('40:40');
        xlRango.Select;
        xlRango.NumberFormat := '0,00';

        // Ponemos los a¤os
        FOR wCont:=0 TO 11 DO BEGIN
          wCol := wCont * 3;
          IF wCont > 5 THEN
            wCol +=2;
          xlHoja.Range(Text50052).Offset(0,wCol)  .Value := FORMAT(wA¤oAnt,0,Text50040);
          xlHoja.Range(Text50052).Offset(0,wCol+1).Value := FORMAT(wFechaInicio,0,Text50040);
        END;

        wLin := 6;
        wCol := 2;

        wFechaProceso := wFechaInicio;
        //Buscamos el ultimo d¡a del mes con kms.
        wFinMes    := CALCDATE(Text50020,wFechaProceso);
        wCont :=0;

        WHILE wFinMes <= wFechaFin DO BEGIN
          wLin := 7;
          wCol := (wCont * 3) +2;
          IF wCont > 5 THEN
            wCol +=2;
          wCont +=1;
          lwNumDias :=0;

          wDialog.UPDATE(1,FORMAT(wFechaProceso,0,Text50053));
          WHILE wFechaProceso <= wFinMes DO BEGIN
            lwNumDias +=1;
            // A¤o Actual
            wNumVeh[1] := NumVehUtil2(wFechaProceso , wOpcion);
            // A¤o Anterior
            wNumVeh[2] := NumVehUtil2(CALCDATE(Text50047,wFechaProceso) , wOpcion);

            wNumVeh[3] += wNumVeh[1] + wNumVeh[2];

            IF (wNumVeh[1]<>0) OR (wNumVeh[2]<>0) THEN BEGIN
              xlHoja.Range(Text50010).Offset(wLin,wCol  ).Value := wNumVeh[2];
              xlHoja.Range(Text50010).Offset(wLin,wCol+1).Value := wNumVeh[1];
              wTexto := STRSUBSTNO('=%1-%2', xlHoja.Range(Text50010).Offset(wLin,wCol+1).AddressLocal,
                                             xlHoja.Range(Text50010).Offset(wLin,wCol).AddressLocal);

              xlHoja.Range(Text50010).Offset(wLin,wCol+2).Value := wTexto;
              //xlHoja.Range(Text50010).Offset(wLin,wCol+2).Value := wNumVeh[1]-wNumVeh[2];
              END;

              wFechaProceso :=  CALCDATE(Text50013,wFechaProceso);
              wLin          += 1;
            END;

            // Ponemos los totales y la media
            IF wNumVeh[3] <> 0 THEN BEGIN
              FOR wCont2 := 0 TO 2 DO BEGIN
                wTexto := STRSUBSTNO(Text50014, xlHoja.Range(Text50010).Offset(7 ,wCol+wCont2).Address,
                                                     xlHoja.Range(Text50010).Offset(37,wCol+wCont2).Address);

                xlHoja.Range(Text50010).Offset(38,wCol+wCont2).Value := wTexto;

                wTexto := STRSUBSTNO('=%1/%2', xlHoja.Range(Text50010).Offset(38 ,wCol+wCont2).Address,lwNumDias);

                IF lwNumDias>0 THEN
                  xlHoja.Range(Text50010).Offset(39,wCol+wCont2).Value := wTexto;
              END;
            END;

          wFinMes := CALCDATE(Text50020,wFechaProceso);
          CLEAR(wNumVeh);
        END;


        //Guardamos el archivo.
        wArchivoGuarda := COPYSTR(wArchivoExcel,1,STRLEN(wArchivoExcel)-4)        + '-' +
                          UPPERCASE(FORMAT(wFechaInicio,0,Text50018)) + '-' +
                          USERID + Text50019;


        IF EXISTS(wArchivoGuarda) THEN
          ERASE(wArchivoGuarda);

        xlLibro.Saved(TRUE);
        xlLibro._SaveAs(wArchivoGuarda);

        xlAplic.Visible(TRUE);
        wDialog.CLOSE;
        CLEARALL;

      END;
    END;

    PROCEDURE NumVehUtil@2(pwFecha@1100244000 : Date;pwTipo@1100244001 : ',Propios,No Propios,Todos') : Integer;
    VAR
      lrParte@1100244002 : Record 7010360;
      lrVeh@1100244003 : Record 7010346;
      lwNumServ@1100244005 : ARRAY [2] OF Decimal;
      lwNumVeh@1100244006 : ARRAY [2] OF Decimal;
      lwCont@1100244007 : ARRAY [2] OF Integer;
      lwRatio@1100244008 : Decimal;
      lwTotal@1100244009 : Integer;
    BEGIN
      // NumVehUtil
      // Devuelve el numero de vehiculos utilizados para una fecha concreta

      CLEAR(lwNumVeh);
      CLEAR(lwNumServ);
      CLEAR(lwTotal);
      CLEAR(lwRatio);

      lrParte.RESET;
      lrParte.SETCURRENTKEY(Fecha,Vehiculo,"Hora inicio");
      lrParte.SETRANGE(Fecha   , pwFecha);


      lrVeh.RESET;
      lrVeh.SETCURRENTKEY("Vehiculo propio","No Imprimir estadisticas");
      IF pwTipo = pwTipo::Propios THEN
        lrVeh.SETRANGE("Vehiculo propio",TRUE);
      lrVeh.SETRANGE("No Imprimir estadisticas" , FALSE);
      IF lrVeh.FINDSET THEN BEGIN
        REPEAT
          lrParte.SETRANGE(Vehiculo , lrVeh.Matricula);
          lwCont[1] := lrParte.COUNT;
          IF lrVeh."Vehiculo propio" THEN
            lwNumServ[1] += lwCont[1]
          ELSE
            lwNumServ[2]  += lwCont[1];

         IF lrVeh."Vehiculo propio" AND ((lwCont[1]<>0) OR (lwCont[2]<>0)) THEN
           lwNumVeh[1] +=1;

        UNTIL lrVeh.NEXT=0;
      END;

      IF pwTipo IN [2,3] THEN BEGIN // Si tiene que tenerse en cuenta los no propios
        IF lwNumVeh[1] <> 0 THEN
          lwRatio := lwNumServ[1] / lwNumVeh[1]  * 0.7;
        IF lwRatio <> 0 THEN
          lwNumVeh[2] := ROUND(lwNumServ[1] / lwRatio,1);
      END;

      CASE pwTipo OF
        pwTipo::Propios      : lwTotal := lwNumVeh[1];
        pwTipo::"No Propios" : lwTotal := lwNumVeh[2];
        pwTipo::Todos        : lwTotal := lwNumVeh[1] + lwNumVeh[2];
      END;

      EXIT(lwTotal);
    END;

    PROCEDURE NumVehUtil2@5(pwFecha@1100244000 : Date;pwTipo@1100244001 : ',Propios,No Propios,Todos') : Integer;
    VAR
      lrVeh@1100244002 : Record 7010346;
      lrTempTipVeh@1100244003 : TEMPORARY Record 7035347;
      lrTipServ@1100244005 : Record 7010319;
      lwCont@1100244006 : ARRAY [2] OF Integer;
      lwRatio@1100244007 : Decimal;
      lwTotal@1100244008 : Integer;
      lwVehAnt@1100244009 : Code[10];
      lwOk@1100244010 : Boolean;
      lwOk2@1100244011 : Boolean;
      lwVehiculoNoRepetido@1100244012 : Boolean;
      lTabVeh@1100244013 : ARRAY [250] OF Code[10];
    BEGIN
      // NumVehUtil2
      // Devuelve el numero de vehiculos utilizados para una fecha concreta
      // Explicaci¢n: Si se tienen de calcularse los vehiculos No propios se hace (seg£n peticion cliente):
      // Por cada tipo de Vehiculo se encuentran lo servicios propios(transfers) y los vehiculos utilizados ese dia
      // Se Optiene el ratio de dividir las dos cifras anteriores y aplicarle un 70 %
      // Por cada tipo de vehiculo se encuentran los servios No Propios(transfers) y se dividen por el ratio
      // dando el No de vehiculos No Propios utilizados
      // Se suman Todos los vehiculos No Propios Utilizados de todos los tipos de vehiculo as¡ como las
      // excursiones que las encontramos en el el registro de actividades externas
      //

      // En lrTempTipVeh se acumulan los Nos. de vehiculo propios y servicios propios
      // asi como los servicios no propio (Solo Transfer)
      //

      CLEAR(lwTotal);
      CLEAR(lwRatio);
      rPar.FINDFIRST;
      lrTipServ.RESET;

      rparte.RESET;
      rparte.SETCURRENTKEY(Fecha,
                           "Tipo Vehiculo",
                           Vehiculo);
      rparte.SETRANGE  (Fecha   , pwFecha);
      rparte.SETFILTER (Vehiculo ,'<>%1','');

      lrTempTipVeh.RESET;
      IF lrTempTipVeh.FIND('-') THEN
        lrTempTipVeh.DELETEALL;

      CLEAR(lrVeh);
      CLEAR(lTabVeh);
      IF rparte.FINDSET THEN BEGIN
        CLEAR(lwVehAnt);
        REPEAT     // PARTES
          // lwOk2 = Solo traslados, si hay que contar los No propios
          //lwOk2 := (pwTipo IN [2,3]) AND lrTipServ.GET(rparte."Tipo Servicio") AND (lrTipServ."Tipo fijo" = 1);

          lrTipServ.GET(rparte."Tipo Servicio");

          // ----  Si tratamos los servicios propios se cuentan todos  ----

          IF pwTipo = pwTipo::Propios THEN
            lwOk2 := TRUE

          ELSE BEGIN  // ----  Si tratamos los servicios no propios solo sumamos los traslados  ----

            IF lrTipServ."Tipo fijo" = lrTipServ."Tipo fijo"::Traslado THEN
              lwOk2 := TRUE
            ELSE
              lwOk2 := FALSE;

          END;

          //lwOk2 := (pwTipo IN [pwTipo::"No propios", pwTipo::Todos]) AND lrTipServ.GET(rparte."Tipo Servicio") AND
          //         (lrTipServ."Tipo fijo" = lrTipServ."Tipo fijo"::Traslado);

          IF lwVehAnt <> rparte.Vehiculo THEN BEGIN
            IF NOT lrTempTipVeh.GET(rparte."Tipo Vehiculo") THEN BEGIN
              lrTempTipVeh.INIT;
              lrTempTipVeh."Tipo Vehiculo" := rparte."Tipo Vehiculo";
              lrTempTipVeh.INSERT;
            END;

            lwOk := lrVeh.GET(rparte.Vehiculo) AND (NOT lrVeh."No Imprimir estadisticas");
            lwOk := lwOk AND (rPar."Vehiculos Vendidos en Estadist" OR (lrVeh."Fecha venta"> pwFecha) OR (lrVeh."Fecha venta"= 0D));
            IF lwOk AND lwOk2 THEN BEGIN

              IF lrVeh."Vehiculo propio" THEN BEGIN

                // ----  Rellenamos un array con los vehiculos que vamos encontrando  ----
                lwVehiculoNoRepetido := busca_vehiculo_nuevo(lTabVeh, lrVeh.Numero);
                IF lwVehiculoNoRepetido THEN
                  lrTempTipVeh."NoVehiculos Propios"    += 1;
              END;
            END;

            IF lwOk AND (pwTipo IN [1,3]) AND (lrVeh."Vehiculo propio") THEN BEGIN // Si se han de contar los propios
              IF lwVehiculoNoRepetido THEN
                lwTotal += 1;  //  se a¤ade al total sin importar el tipo de servicio
            END;
            lwVehAnt := rparte.Vehiculo;
          END;

          IF lwOk AND lwOk2 THEN BEGIN
            IF lrVeh."Vehiculo propio" THEN
              lrTempTipVeh."NoServicios Propios"    += 1
            ELSE
              lrTempTipVeh."NoServicios No Propios" += 1;
            lrTempTipVeh.MODIFY;
          END;
        UNTIL rparte.NEXT=0;
      END;

      // Se a¤aden los vehiculo no propios(Transfers)
      IF lrTempTipVeh.FINDSET AND (pwTipo IN [2,3]) THEN BEGIN
        REPEAT
          IF lrTempTipVeh."NoVehiculos Propios" <> 0 THEN
            lwRatio := lrTempTipVeh."NoServicios Propios" / lrTempTipVeh."NoVehiculos Propios"  * 0.7;
          IF lwRatio <> 0 THEN
            lrTempTipVeh."NoVehiculos No Propios" := ROUND(lrTempTipVeh."NoServicios No Propios" / lwRatio,1);
          lwTotal += lrTempTipVeh."NoVehiculos No Propios";
        UNTIL lrTempTipVeh.NEXT =0;
      END;

      EXIT(lwTotal);
    END;

    PROCEDURE Informe_Servicios_realizados@1();
    VAR
      wArchivoExcel@1100244000 : Text[250];
      wCelda@1100244001 : Text[30];
      fCalendario@1100244002 : Form 7035363;
      wCode@1100244003 : Code[200];
      wFechaInicio@1100244004 : Date;
      wFechaFin@1100244005 : Date;
      wFechaProceso@1100244006 : Date;
      wLin@1100244007 : Integer;
      wCol@1100244008 : Integer;
      wArchivoGuarda@1100244009 : Text[250];
      wA¤oAnt@1100244010 : Date;
      wFinMes@1100244011 : Date;
      rParte@1100244012 : Record 7010360;
      wContador@1100244013 : Integer;
      wFinMesAnt@1100244014 : Date;
      wMesInteger@1100244015 : Integer;
      wNoCopiado@1100244016 : Boolean;
      wComprueba31@1100244017 : Text[30];
      wLin31@1100244018 : Integer;
      wDiasMes@1100244019 : Date;
      wDiasCode@1100244020 : Code[2];
      wDiasInt@1100244021 : Integer;
      rTipServicio@1100244022 : Record 7010319;
      wTotalTraslados@1100244023 : Integer;
      wTotalTrasladosAnt@1100244024 : Integer;
      wTotalExcursiones@1100244025 : Integer;
      wTotalExcursionesAnt@1100244026 : Integer;
      wGranTotalTraslados@1100244027 : ARRAY [12] OF Integer;
      wGranTotalTrasladosAnt@1100244028 : ARRAY [12] OF Integer;
      wGranTotalExcursiones@1100244029 : ARRAY [12] OF Integer;
      wGranTotalExcursionesAnt@1100244030 : ARRAY [12] OF Integer;
    BEGIN
      // Informe_servicios_realizados
      // aml 280103

      CLEARALL;

      // Pedimos la fecha de proceso.
      // Solo tendremos en cuenta el a¤o.

      fCalendario.RUNMODAL;
      wFechaInicio     := fCalendario.GetChosenDate;
      IF wFechaInicio > 0D THEN
        wCode          := FORMAT(wFechaInicio,0,Text50034)
      ELSE
        ERROR(err12);

      EVALUATE(wFechaInicio , wCode);
      EVALUATE(wFechaFin    , FORMAT(wFechaInicio,0,Text50035));
      wA¤oAnt               := CALCDATE(Text50047 , wFechaInicio);
      wNoCopiado            := FALSE;

      // miramos si se ha especificado el archivo de plantilla.
      wArchivoExcel := Comprobar_parametros_informes;

      IF CREATE(xlAplic) THEN BEGIN

        wOpcion := STRMENU(Text50048,1);

        wDialog.OPEN(Text50054 +
                     Text50055);

        xlLibro := xlAplic.Workbooks._Open(wArchivoExcel);

        // Abrimos la hoja de vehiculos.
        xlHoja := xlLibro.Worksheets.Item(Text50056);
        xlHoja.Activate;

        // ----  AJS 13.03.2003  Indicar en el informe que opcion de vehiculos se ha seleccionado

        CASE wOpcion OF
          1:
          BEGIN
            wCelda := Text50057;
            xlHoja.Range(wCelda).Value := FORMAT(text005);
          END;
          2:
          BEGIN
            wCelda := Text50057;
            xlHoja.Range(wCelda).Value := FORMAT(text006);
          END;
          3:
          BEGIN
            wCelda := Text50057;
            xlHoja.Range(wCelda).Value := FORMAT(text007);
          END;
        END;

        // Ponemos los a¤os en la cabecera.
        wCelda := Text50031;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wA¤oAnt,0,Text50040);
        wCelda := Text50059;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wFechaInicio,0,Text50040);

        wCelda := Text50060;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wA¤oAnt,0,Text50040);
        wCelda := Text50061;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wFechaInicio,0,Text50040);

        wCelda := Text50062;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wA¤oAnt,0,Text50040);
        wCelda := Text50063;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wFechaInicio,0,Text50040);

        wCelda := Text50064;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wA¤oAnt,0,Text50040);
        wCelda := Text50065;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wFechaInicio,0,Text50040);

        wCelda := Text50066;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wA¤oAnt,0,Text50040);
        wCelda := Text50067;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wFechaInicio,0,Text50040);

        wCelda := Text50068;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wA¤oAnt,0,Text50040);
        wCelda := Text50069;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wFechaInicio,0,Text50040);

        wCelda := Text50070;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wA¤oAnt,0,Text50040);
        wCelda := Text50071;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wFechaInicio,0,Text50040);

        wCelda := Text50072;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wA¤oAnt,0,Text50040);
        wCelda := Text50073;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wFechaInicio,0,Text50040);

        wCelda := Text50074;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wA¤oAnt,0,Text50040);
        wCelda := Text50075;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wFechaInicio,0,Text50040);

        wCelda := Text50076;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wA¤oAnt,0,Text50040);
        wCelda := Text50077;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wFechaInicio,0,Text50040);

        wCelda := Text50078;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wA¤oAnt,0,Text50040);
        wCelda := Text50079;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wFechaInicio,0,Text50040);

        wCelda := Text50080;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wA¤oAnt,0,Text50040);
        wCelda := Text50081;
        xlHoja.Range(wCelda).Value := Text50058 + FORMAT(wFechaInicio,0,Text50040);

        wLin := 5;
        wCol := 2;

        wFechaProceso := wFechaInicio;
        //Buscamos el ultimo d¡a del mes
        wFinMes    := CALCDATE(Text50020,wFechaProceso);
        wNoCopiado := FALSE;

        WHILE wFinMes <= wFechaFin DO BEGIN

          wLin := 5;

          WHILE wFechaProceso <= wFinMes DO BEGIN

            //Obtenemos el numero de me.s
            wMesInteger :=  DATE2DMY(wFechaProceso,2);
            wDialog.UPDATE(1,wMesInteger);

            //ponemos a 0 los arrays de sericios x mes.
            wTotalTraslados   := 0;
            wTotalExcursiones := 0;

            //procesamos los partes del a¤o seleccionado.
            // A¥O ACTUAL
            rParte.RESET;
            rParte.SETCURRENTKEY(Vehiculo    ,
                                 Fecha       ,
                                 Confirmado  ,
                                 Proveedor  );

            //opciones de filtrado.
            rParte.SETRANGE(Fecha      , wFechaProceso);
           // rParte.SETRANGE(Confirmado , TRUE);
            CASE wOpcion OF
              1: rParte.SETFILTER(Proveedor, '%1'   , '');
              2: rParte.SETFILTER(Proveedor, '<>%1' , '');
            END;

            IF rParte.FINDSET THEN BEGIN
              REPEAT

                //Buscamos el tipo de servicio de cada parte para hacer el acumulado.
                rTipServicio.RESET;
                IF rTipServicio.GET(rParte."Tipo Servicio") THEN BEGIN

                   CASE rTipServicio."Tipo fijo" OF

                     rTipServicio."Tipo fijo"::Traslado:  wTotalTraslados   +=1;
                     rTipServicio."Tipo fijo"::Excursion: wTotalExcursiones +=1;

                   END;

                END
                ELSE
                  ERROR(err26,rParte."Tipo Servicio",rParte."N§ Parte");

              UNTIL rParte.NEXT = 0;
            END;

            //procesamos los partes del A-1 del a¤o seleccionado.
            //A¤o anterior

            //ponemos a 0 los arrays de sericios x mes.
            wTotalTrasladosAnt   := 0;
            wTotalExcursionesAnt := 0;

            //procesamos los partes del a¤o seleccionado.
            // A¥O ACTUAL
            rParte.RESET;
            rParte.SETCURRENTKEY(Vehiculo    ,
                                 Fecha       ,
                                 Confirmado  ,
                                 Proveedor  );

            //opciones de filtrado.
            rParte.SETRANGE(Fecha      , CALCDATE(Text50047 , wFechaProceso));
           // rParte.SETRANGE(Confirmado , TRUE);
            CASE wOpcion OF
              1: rParte.SETFILTER(Proveedor, '%1'   , '');
              2: rParte.SETFILTER(Proveedor, '<>%1' , '');
            END;

            IF rParte.FINDSET THEN BEGIN
              REPEAT

                //Buscamos el tipo de servicio de cada parte para hacer el acumulado.
                rTipServicio.RESET;
                IF rTipServicio.GET(rParte."Tipo Servicio") THEN BEGIN

                   CASE rTipServicio."Tipo fijo" OF

                     rTipServicio."Tipo fijo"::Traslado:  wTotalTrasladosAnt   +=1;
                     rTipServicio."Tipo fijo"::Excursion: wTotalExcursionesAnt +=1;

                   END;

                END
                ELSE
                  ERROR(err26,rParte."Tipo Servicio",rParte."N§ Parte");

              UNTIL rParte.NEXT = 0;
            END;

            //Guardamos los datos en el gran total x Mes;
            wGranTotalTraslados     [wMesInteger] += wTotalTraslados;
            wGranTotalExcursiones   [wMesInteger] += wTotalExcursiones;
            wGranTotalTrasladosAnt  [wMesInteger] += wTotalTrasladosAnt;
            wGranTotalExcursionesAnt[wMesInteger] += wTotalExcursionesAnt;

            //Copiamos el formato de la hoja NAVISION5
            IF NOT wNoCopiado THEN BEGIN

              xlHoja := xlLibro.Worksheets.Item(Text50082);
              xlHoja.Activate;

              xlRango := xlHoja.Range('1:1');
              xlRango.Copy;

              //Pegamos en la hoja correspondiente.
              xlHoja := xlLibro.Worksheets.Item(Text50056);
              xlHoja.Activate;

              xlRango := xlHoja.Range(FORMAT(wLin+2)+':'+FORMAT(wLin+2));
              xlRango.Select;
              xlHoja.Paste;

              //POnemos los numeros de dias.
              xlHoja.Range(Text50010).Offset(wLin+1,1).Value  := DATE2DMY(wFechaProceso,1);
              xlHoja.Range(Text50010).Offset(wLin+1,33).Value := DATE2DMY(wFechaProceso,1);
              xlHoja.Range(Text50010).Offset(wLin+1,65).Value := DATE2DMY(wFechaProceso,1);
              xlHoja.Range(Text50010).Offset(wLin+1,97).Value := DATE2DMY(wFechaProceso,1);

              wComprueba31 := xlHoja.Range(Text50010).Offset(wLin+1,1).Text;
              IF wComprueba31 = '31' THEN
                wLin31 := wLin+1;

            END;

            CASE wMesInteger OF

              1:BEGIN

                  //A¤o anterior
                  xlHoja.Range(Text50010).Offset(wLin+1,2).Value := wTotalTrasladosAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,3).Value := wTotalExcursionesAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,5).Value := wTotalTrasladosAnt+wTotalExcursionesAnt;

                  //A¤o actual
                  xlHoja.Range(Text50010).Offset(wLin+1,7).Value  := wTotalTraslados;
                  xlHoja.Range(Text50010).Offset(wLin+1,8).Value  := wTotalExcursiones;
                  xlHoja.Range(Text50010).Offset(wLin+1,10).Value := wTotalTraslados+wTotalExcursiones;

                  //Comparativo
                  xlHoja.Range(Text50010).Offset(wLin+1,11).Value := (wTotalTraslados+wTotalExcursiones) -
                                                                (wTotalTrasladosAnt+wTotalExcursionesAnt);

                END;

              2:BEGIN

                  //A¤o anterior
                  xlHoja.Range(Text50010).Offset(wLin+1,12).Value := wTotalTrasladosAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,13).Value := wTotalExcursionesAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,15).Value := wTotalTrasladosAnt+wTotalExcursionesAnt;

                  //A¤o actual
                  xlHoja.Range(Text50010).Offset(wLin+1,17).Value  := wTotalTraslados;
                  xlHoja.Range(Text50010).Offset(wLin+1,18).Value  := wTotalExcursiones;
                  xlHoja.Range(Text50010).Offset(wLin+1,20).Value := wTotalTraslados+wTotalExcursiones;

                  //Comparativo
                  xlHoja.Range(Text50010).Offset(wLin+1,21).Value := (wTotalTraslados+wTotalExcursiones) -
                                                                (wTotalTrasladosAnt+wTotalExcursionesAnt);

                END;

              3:BEGIN

                  //A¤o anterior
                  xlHoja.Range(Text50010).Offset(wLin+1,22).Value := wTotalTrasladosAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,23).Value := wTotalExcursionesAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,25).Value := wTotalTrasladosAnt+wTotalExcursionesAnt;

                  //A¤o actual
                  xlHoja.Range(Text50010).Offset(wLin+1,27).Value  := wTotalTraslados;
                  xlHoja.Range(Text50010).Offset(wLin+1,28).Value  := wTotalExcursiones;
                  xlHoja.Range(Text50010).Offset(wLin+1,30).Value := wTotalTraslados+wTotalExcursiones;

                  //Comparativo
                  xlHoja.Range(Text50010).Offset(wLin+1,31).Value := (wTotalTraslados+wTotalExcursiones) -
                                                                (wTotalTrasladosAnt+wTotalExcursionesAnt);

                END;


              4:BEGIN
                  //A¤o anterior
                  xlHoja.Range(Text50010).Offset(wLin+1,34).Value := wTotalTrasladosAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,35).Value := wTotalExcursionesAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,37).Value := wTotalTrasladosAnt+wTotalExcursionesAnt;

                  //A¤o actual
                  xlHoja.Range(Text50010).Offset(wLin+1,39).Value  := wTotalTraslados;
                  xlHoja.Range(Text50010).Offset(wLin+1,40).Value  := wTotalExcursiones;
                  xlHoja.Range(Text50010).Offset(wLin+1,42).Value := wTotalTraslados+wTotalExcursiones;

                  //Comparativo
                  xlHoja.Range(Text50010).Offset(wLin+1,43).Value := (wTotalTraslados+wTotalExcursiones) -
                                                                (wTotalTrasladosAnt+wTotalExcursionesAnt);
                END;

              5:BEGIN
                  //A¤o anterior
                  xlHoja.Range(Text50010).Offset(wLin+1,44).Value := wTotalTrasladosAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,45).Value := wTotalExcursionesAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,47).Value := wTotalTrasladosAnt+wTotalExcursionesAnt;

                  //A¤o actual
                  xlHoja.Range(Text50010).Offset(wLin+1,49).Value  := wTotalTraslados;
                  xlHoja.Range(Text50010).Offset(wLin+1,50).Value  := wTotalExcursiones;
                  xlHoja.Range(Text50010).Offset(wLin+1,52).Value := wTotalTraslados+wTotalExcursiones;

                  //Comparativo
                  xlHoja.Range(Text50010).Offset(wLin+1,53).Value := (wTotalTraslados+wTotalExcursiones) -
                                                                (wTotalTrasladosAnt+wTotalExcursionesAnt);

                END;

              6:BEGIN
                  //A¤o anterior
                  xlHoja.Range(Text50010).Offset(wLin+1,54).Value := wTotalTrasladosAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,55).Value := wTotalExcursionesAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,57).Value := wTotalTrasladosAnt+wTotalExcursionesAnt;

                  //A¤o actual
                  xlHoja.Range(Text50010).Offset(wLin+1,59).Value  := wTotalTraslados;
                  xlHoja.Range(Text50010).Offset(wLin+1,60).Value  := wTotalExcursiones;
                  xlHoja.Range(Text50010).Offset(wLin+1,62).Value := wTotalTraslados+wTotalExcursiones;

                  //Comparativo
                  xlHoja.Range(Text50010).Offset(wLin+1,63).Value := (wTotalTraslados+wTotalExcursiones) -
                                                                (wTotalTrasladosAnt+wTotalExcursionesAnt);

                END;

              7:BEGIN
                  //A¤o anterior
                  xlHoja.Range(Text50010).Offset(wLin+1,66).Value := wTotalTrasladosAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,67).Value := wTotalExcursionesAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,69).Value := wTotalTrasladosAnt+wTotalExcursionesAnt;

                  //A¤o actual
                  xlHoja.Range(Text50010).Offset(wLin+1,71).Value  := wTotalTraslados;
                  xlHoja.Range(Text50010).Offset(wLin+1,72).Value  := wTotalExcursiones;
                  xlHoja.Range(Text50010).Offset(wLin+1,74).Value := wTotalTraslados+wTotalExcursiones;

                  //Comparativo
                  xlHoja.Range(Text50010).Offset(wLin+1,75).Value := (wTotalTraslados+wTotalExcursiones) -
                                                                (wTotalTrasladosAnt+wTotalExcursionesAnt);
                END;

              8:BEGIN
                  //A¤o anterior
                  xlHoja.Range(Text50010).Offset(wLin+1,76).Value := wTotalTrasladosAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,77).Value := wTotalExcursionesAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,79).Value := wTotalTrasladosAnt+wTotalExcursionesAnt;

                  //A¤o actual
                  xlHoja.Range(Text50010).Offset(wLin+1,81).Value  := wTotalTraslados;
                  xlHoja.Range(Text50010).Offset(wLin+1,82).Value  := wTotalExcursiones;
                  xlHoja.Range(Text50010).Offset(wLin+1,84).Value := wTotalTraslados+wTotalExcursiones;

                  //Comparativo
                  xlHoja.Range(Text50010).Offset(wLin+1,85).Value := (wTotalTraslados+wTotalExcursiones) -
                                                                (wTotalTrasladosAnt+wTotalExcursionesAnt);
                END;

              9:BEGIN
                  //A¤o anterior
                  xlHoja.Range(Text50010).Offset(wLin+1,86).Value := wTotalTrasladosAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,87).Value := wTotalExcursionesAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,89).Value := wTotalTrasladosAnt+wTotalExcursionesAnt;

                  //A¤o actual
                  xlHoja.Range(Text50010).Offset(wLin+1,91).Value  := wTotalTraslados;
                  xlHoja.Range(Text50010).Offset(wLin+1,92).Value  := wTotalExcursiones;
                  xlHoja.Range(Text50010).Offset(wLin+1,94).Value := wTotalTraslados+wTotalExcursiones;

                  //Comparativo
                  xlHoja.Range(Text50010).Offset(wLin+1,95).Value := (wTotalTraslados+wTotalExcursiones) -
                                                                (wTotalTrasladosAnt+wTotalExcursionesAnt);
                END;

             10:BEGIN
                  //A¤o anterior
                  xlHoja.Range(Text50010).Offset(wLin+1,98).Value := wTotalTrasladosAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,99).Value := wTotalExcursionesAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,101).Value := wTotalTrasladosAnt+wTotalExcursionesAnt;

                  //A¤o actual
                  xlHoja.Range(Text50010).Offset(wLin+1,103).Value  := wTotalTraslados;
                  xlHoja.Range(Text50010).Offset(wLin+1,104).Value  := wTotalExcursiones;
                  xlHoja.Range(Text50010).Offset(wLin+1,106).Value := wTotalTraslados+wTotalExcursiones;

                  //Comparativo
                  xlHoja.Range(Text50010).Offset(wLin+1,107).Value := (wTotalTraslados+wTotalExcursiones) -
                                                                (wTotalTrasladosAnt+wTotalExcursionesAnt);
                END;

             11:BEGIN
                  //A¤o anterior
                  xlHoja.Range(Text50010).Offset(wLin+1,108).Value := wTotalTrasladosAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,109).Value := wTotalExcursionesAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,111).Value := wTotalTrasladosAnt+wTotalExcursionesAnt;

                  //A¤o actual
                  xlHoja.Range(Text50010).Offset(wLin+1,113).Value  := wTotalTraslados;
                  xlHoja.Range(Text50010).Offset(wLin+1,114).Value  := wTotalExcursiones;
                  xlHoja.Range(Text50010).Offset(wLin+1,116).Value := wTotalTraslados+wTotalExcursiones;

                  //Comparativo
                  xlHoja.Range(Text50010).Offset(wLin+1,117).Value := (wTotalTraslados+wTotalExcursiones) -
                                                                (wTotalTrasladosAnt+wTotalExcursionesAnt);
                END;

             12:BEGIN
                  //A¤o anterior
                  xlHoja.Range(Text50010).Offset(wLin+1,118).Value := wTotalTrasladosAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,119).Value := wTotalExcursionesAnt;
                  xlHoja.Range(Text50010).Offset(wLin+1,121).Value := wTotalTrasladosAnt+wTotalExcursionesAnt;

                  //A¤o actual
                  xlHoja.Range(Text50010).Offset(wLin+1,123).Value  := wTotalTraslados;
                  xlHoja.Range(Text50010).Offset(wLin+1,124).Value  := wTotalExcursiones;
                  xlHoja.Range(Text50010).Offset(wLin+1,126).Value := wTotalTraslados+wTotalExcursiones;

                  //Comparativo
                  xlHoja.Range(Text50010).Offset(wLin+1,127).Value := (wTotalTraslados+wTotalExcursiones) -
                                                                (wTotalTrasladosAnt+wTotalExcursionesAnt);
                END;

            END;

            wFechaProceso :=  CALCDATE(Text50013,wFechaProceso);
            wLin          += 1;

          END;

          wFinMes       := CALCDATE(Text50020,wFechaProceso);
          wNoCopiado    := TRUE;

        END;

        //Copiamos el total;
        IF wLin31 > 0 THEN BEGIN

          xlHoja := xlLibro.Worksheets.Item(Text50082);
          xlHoja.Activate;

          xlRango := xlHoja.Range('2:3');
          xlRango.Copy;

          //Pegamos en la hoja correspondiente.
          xlHoja := xlLibro.Worksheets.Item(Text50056);
          xlHoja.Activate;

          xlRango := xlHoja.Range(FORMAT(wLin31+2)+':'+FORMAT(wLin31+3));
          xlRango.Select;
          xlHoja.Paste;

          xlRango := xlHoja.Range(Text50010);
          xlRango.Select;

          //ponemos los totales.
          //Enero
          xlHoja.Range(Text50010).Offset(wLin+1,2).Value  := wGranTotalTrasladosAnt[1];
          xlHoja.Range(Text50010).Offset(wLin+1,3).Value  := wGranTotalExcursionesAnt[1];
          xlHoja.Range(Text50010).Offset(wLin+1,5).Value  := wGranTotalTrasladosAnt[1]+wGranTotalExcursionesAnt[1];
          xlHoja.Range(Text50010).Offset(wLin+1,7).Value  := wGranTotalTraslados[1];
          xlHoja.Range(Text50010).Offset(wLin+1,8).Value  := wGranTotalExcursiones[1];
          xlHoja.Range(Text50010).Offset(wLin+1,10).Value := wGranTotalTraslados[1]+wGranTotalExcursiones[1];
          xlHoja.Range(Text50010).Offset(wLin+1,11).Value := (wGranTotalTraslados[1]+wGranTotalExcursiones[1]) -
                                                        (wGranTotalTrasladosAnt[1]+wGranTotalExcursionesAnt[1]);

          //febrero
          xlHoja.Range(Text50010).Offset(wLin+1,12).Value  := wGranTotalTrasladosAnt[2];
          xlHoja.Range(Text50010).Offset(wLin+1,13).Value  := wGranTotalExcursionesAnt[2];
          xlHoja.Range(Text50010).Offset(wLin+1,15).Value  := wGranTotalTrasladosAnt[2]+wGranTotalExcursionesAnt[2];
          xlHoja.Range(Text50010).Offset(wLin+1,17).Value  := wGranTotalTraslados[2];
          xlHoja.Range(Text50010).Offset(wLin+1,18).Value  := wGranTotalExcursiones[2];
          xlHoja.Range(Text50010).Offset(wLin+1,20).Value := wGranTotalTraslados[2]+wGranTotalExcursiones[2];
          xlHoja.Range(Text50010).Offset(wLin+1,21).Value := (wGranTotalTraslados[2]+wGranTotalExcursiones[2]) -
                                                        (wGranTotalTrasladosAnt[2]+wGranTotalExcursionesAnt[2]);


          //marzo
          xlHoja.Range(Text50010).Offset(wLin+1,22).Value  := wGranTotalTrasladosAnt[3];
          xlHoja.Range(Text50010).Offset(wLin+1,23).Value  := wGranTotalExcursionesAnt[3];
          xlHoja.Range(Text50010).Offset(wLin+1,25).Value  := wGranTotalTrasladosAnt[3]+wGranTotalExcursionesAnt[3];
          xlHoja.Range(Text50010).Offset(wLin+1,27).Value  := wGranTotalTraslados[3];
          xlHoja.Range(Text50010).Offset(wLin+1,28).Value  := wGranTotalExcursiones[3];
          xlHoja.Range(Text50010).Offset(wLin+1,30).Value := wGranTotalTraslados[3]+wGranTotalExcursiones[3];
          xlHoja.Range(Text50010).Offset(wLin+1,31).Value := (wGranTotalTraslados[3]+wGranTotalExcursiones[3]) -
                                                        (wGranTotalTrasladosAnt[3]+wGranTotalExcursionesAnt[3]);


          //abril
          xlHoja.Range(Text50010).Offset(wLin+1,34).Value  := wGranTotalTrasladosAnt[4];
          xlHoja.Range(Text50010).Offset(wLin+1,35).Value  := wGranTotalExcursionesAnt[4];
          xlHoja.Range(Text50010).Offset(wLin+1,37).Value  := wGranTotalTrasladosAnt[4]+wGranTotalExcursionesAnt[4];
          xlHoja.Range(Text50010).Offset(wLin+1,39).Value  := wGranTotalTraslados[4];
          xlHoja.Range(Text50010).Offset(wLin+1,40).Value  := wGranTotalExcursiones[4];
          xlHoja.Range(Text50010).Offset(wLin+1,42).Value := wGranTotalTraslados[4]+wGranTotalExcursiones[4];
          xlHoja.Range(Text50010).Offset(wLin+1,43).Value := (wGranTotalTraslados[4]+wGranTotalExcursiones[4]) -
                                                        (wGranTotalTrasladosAnt[4]+wGranTotalExcursionesAnt[4]);


          //mayo
          xlHoja.Range(Text50010).Offset(wLin+1,44).Value  := wGranTotalTrasladosAnt[5];
          xlHoja.Range(Text50010).Offset(wLin+1,45).Value  := wGranTotalExcursionesAnt[5];
          xlHoja.Range(Text50010).Offset(wLin+1,47).Value  := wGranTotalTrasladosAnt[5]+wGranTotalExcursionesAnt[5];
          xlHoja.Range(Text50010).Offset(wLin+1,49).Value  := wGranTotalTraslados[5];
          xlHoja.Range(Text50010).Offset(wLin+1,50).Value  := wGranTotalExcursiones[5];
          xlHoja.Range(Text50010).Offset(wLin+1,52).Value := wGranTotalTraslados[5]+wGranTotalExcursiones[5];
          xlHoja.Range(Text50010).Offset(wLin+1,53).Value := (wGranTotalTraslados[5]+wGranTotalExcursiones[5]) -
                                                        (wGranTotalTrasladosAnt[5]+wGranTotalExcursionesAnt[5]);

          //junio
          xlHoja.Range(Text50010).Offset(wLin+1,54).Value  := wGranTotalTrasladosAnt[6];
          xlHoja.Range(Text50010).Offset(wLin+1,55).Value  := wGranTotalExcursionesAnt[6];
          xlHoja.Range(Text50010).Offset(wLin+1,57).Value  := wGranTotalTrasladosAnt[6]+wGranTotalExcursionesAnt[6];
          xlHoja.Range(Text50010).Offset(wLin+1,59).Value  := wGranTotalTraslados[6];
          xlHoja.Range(Text50010).Offset(wLin+1,60).Value  := wGranTotalExcursiones[6];
          xlHoja.Range(Text50010).Offset(wLin+1,62).Value := wGranTotalTraslados[6]+wGranTotalExcursiones[6];
          xlHoja.Range(Text50010).Offset(wLin+1,63).Value := (wGranTotalTraslados[6]+wGranTotalExcursiones[6]) -
                                                        (wGranTotalTrasladosAnt[6]+wGranTotalExcursionesAnt[6]);
          //julio
          xlHoja.Range(Text50010).Offset(wLin+1,66).Value  := wGranTotalTrasladosAnt[7];
          xlHoja.Range(Text50010).Offset(wLin+1,67).Value  := wGranTotalExcursionesAnt[7];
          xlHoja.Range(Text50010).Offset(wLin+1,69).Value  := wGranTotalTrasladosAnt[7]+wGranTotalExcursionesAnt[7];
          xlHoja.Range(Text50010).Offset(wLin+1,71).Value  := wGranTotalTraslados[7];
          xlHoja.Range(Text50010).Offset(wLin+1,72).Value  := wGranTotalExcursiones[7];
          xlHoja.Range(Text50010).Offset(wLin+1,74).Value := wGranTotalTraslados[7]+wGranTotalExcursiones[7];
          xlHoja.Range(Text50010).Offset(wLin+1,75).Value := (wGranTotalTraslados[7]+wGranTotalExcursiones[7]) -
                                                        (wGranTotalTrasladosAnt[7]+wGranTotalExcursionesAnt[7]);
          //agosto
          xlHoja.Range(Text50010).Offset(wLin+1,76).Value  := wGranTotalTrasladosAnt[8];
          xlHoja.Range(Text50010).Offset(wLin+1,77).Value  := wGranTotalExcursionesAnt[8];
          xlHoja.Range(Text50010).Offset(wLin+1,79).Value  := wGranTotalTrasladosAnt[8]+wGranTotalExcursionesAnt[8];
          xlHoja.Range(Text50010).Offset(wLin+1,81).Value  := wGranTotalTraslados[8];
          xlHoja.Range(Text50010).Offset(wLin+1,82).Value  := wGranTotalExcursiones[8];
          xlHoja.Range(Text50010).Offset(wLin+1,84).Value  := wGranTotalTraslados[8]+wGranTotalExcursiones[8];
          xlHoja.Range(Text50010).Offset(wLin+1,85).Value  := (wGranTotalTraslados[8]+wGranTotalExcursiones[8]) -
                                                         (wGranTotalTrasladosAnt[8]+wGranTotalExcursionesAnt[8]);

          //septiembre
          xlHoja.Range(Text50010).Offset(wLin+1,86).Value  := wGranTotalTrasladosAnt[9];
          xlHoja.Range(Text50010).Offset(wLin+1,87).Value  := wGranTotalExcursionesAnt[9];
          xlHoja.Range(Text50010).Offset(wLin+1,89).Value  := wGranTotalTrasladosAnt[9]+wGranTotalExcursionesAnt[9];
          xlHoja.Range(Text50010).Offset(wLin+1,91).Value  := wGranTotalTraslados[9];
          xlHoja.Range(Text50010).Offset(wLin+1,92).Value  := wGranTotalExcursiones[9];
          xlHoja.Range(Text50010).Offset(wLin+1,94).Value  := wGranTotalTraslados[9]+wGranTotalExcursiones[9];
          xlHoja.Range(Text50010).Offset(wLin+1,95).Value  := (wGranTotalTraslados[9]+wGranTotalExcursiones[9]) -
                                                         (wGranTotalTrasladosAnt[9]+wGranTotalExcursionesAnt[9]);
          //octubre
          xlHoja.Range(Text50010).Offset(wLin+1,98).Value  := wGranTotalTrasladosAnt[10];
          xlHoja.Range(Text50010).Offset(wLin+1,99).Value  := wGranTotalExcursionesAnt[10];
          xlHoja.Range(Text50010).Offset(wLin+1,101).Value  := wGranTotalTrasladosAnt[10]+wGranTotalExcursionesAnt[10];
          xlHoja.Range(Text50010).Offset(wLin+1,103).Value  := wGranTotalTraslados[10];
          xlHoja.Range(Text50010).Offset(wLin+1,104).Value  := wGranTotalExcursiones[10];
          xlHoja.Range(Text50010).Offset(wLin+1,106).Value  := wGranTotalTraslados[10]+wGranTotalExcursiones[10];
          xlHoja.Range(Text50010).Offset(wLin+1,107).Value  := (wGranTotalTraslados[10]+wGranTotalExcursiones[10]) -
                                                         (wGranTotalTrasladosAnt[10]+wGranTotalExcursionesAnt[10]);

          //noviembre
          xlHoja.Range(Text50010).Offset(wLin+1,108).Value  := wGranTotalTrasladosAnt[11];
          xlHoja.Range(Text50010).Offset(wLin+1,109).Value  := wGranTotalExcursionesAnt[11];
          xlHoja.Range(Text50010).Offset(wLin+1,111).Value  := wGranTotalTrasladosAnt[11]+wGranTotalExcursionesAnt[11];
          xlHoja.Range(Text50010).Offset(wLin+1,113).Value  := wGranTotalTraslados[11];
          xlHoja.Range(Text50010).Offset(wLin+1,114).Value  := wGranTotalExcursiones[11];
          xlHoja.Range(Text50010).Offset(wLin+1,116).Value  := wGranTotalTraslados[11]+wGranTotalExcursiones[11];
          xlHoja.Range(Text50010).Offset(wLin+1,117).Value  := (wGranTotalTraslados[11]+wGranTotalExcursiones[11]) -
                                                         (wGranTotalTrasladosAnt[11]+wGranTotalExcursionesAnt[11]);

          //diciembre
          xlHoja.Range(Text50010).Offset(wLin+1,118).Value  := wGranTotalTrasladosAnt[12];
          xlHoja.Range(Text50010).Offset(wLin+1,119).Value  := wGranTotalExcursionesAnt[12];
          xlHoja.Range(Text50010).Offset(wLin+1,121).Value  := wGranTotalTrasladosAnt[12]+wGranTotalExcursionesAnt[12];
          xlHoja.Range(Text50010).Offset(wLin+1,123).Value  := wGranTotalTraslados[12];
          xlHoja.Range(Text50010).Offset(wLin+1,124).Value  := wGranTotalExcursiones[12];
          xlHoja.Range(Text50010).Offset(wLin+1,126).Value  := wGranTotalTraslados[12]+wGranTotalExcursiones[12];
          xlHoja.Range(Text50010).Offset(wLin+1,127).Value  := (wGranTotalTraslados[12]+wGranTotalExcursiones[12]) -
                                                         (wGranTotalTrasladosAnt[12]+wGranTotalExcursionesAnt[12]);
           END;

        //Guardamos el archivo.
        wArchivoGuarda := COPYSTR(wArchivoExcel,1,STRLEN(wArchivoExcel)-4)        + '-' +
                          UPPERCASE(FORMAT(wFechaInicio,0,Text50018)) + '-' +
                          USERID + Text50019;


        IF EXISTS(wArchivoGuarda) THEN
          ERASE(wArchivoGuarda);

        xlLibro.Saved(TRUE);
        xlLibro._SaveAs(wArchivoGuarda);

        xlAplic.Visible(TRUE);

        wDialog.CLOSE;
        CLEARALL;


      END;
    END;

    PROCEDURE busca_vehiculo_nuevo@7(VAR pTabVeh@1100244000 : ARRAY [250] OF Code[10];pwVeh@1100244001 : Code[10]) : Boolean;
    VAR
      lwIndice@1100244002 : Integer;
      lwNuevo@1100244003 : Boolean;
    BEGIN
      // busca_vehiculo_nuevo
      //
      lwIndice := 0;
      lwNuevo  := FALSE;
      REPEAT
        lwIndice += 1;

        IF pTabVeh[lwIndice] = '' THEN BEGIN
          pTabVeh[lwIndice] := pwVeh;
          lwNuevo           := TRUE;
        END;

      UNTIL pTabVeh[lwIndice] = pwVeh;

      EXIT(lwNuevo);
    END;

    EVENT xlAplic@1100244008::NewWorkbook@1565(Wb@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlAplic@1100244008::SheetSelectionChange@1558(Sh@1100244001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlAplic@1100244008::SheetBeforeDoubleClick@1559(Sh@1100244002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100244001 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1100244000 : Boolean);
    BEGIN
    END;

    EVENT xlAplic@1100244008::SheetBeforeRightClick@1560(Sh@1100244002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100244001 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1100244000 : Boolean);
    BEGIN
    END;

    EVENT xlAplic@1100244008::SheetActivate@1561(Sh@1100244000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlAplic@1100244008::SheetDeactivate@1562(Sh@1100244000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlAplic@1100244008::SheetCalculate@1563(Sh@1100244000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlAplic@1100244008::SheetChange@1564(Sh@1100244001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlAplic@1100244008::WorkbookOpen@1567(Wb@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlAplic@1100244008::WorkbookActivate@1568(Wb@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlAplic@1100244008::WorkbookDeactivate@1569(Wb@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlAplic@1100244008::WorkbookBeforeClose@1570(Wb@1100244001 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1100244000 : Boolean);
    BEGIN
    END;

    EVENT xlAplic@1100244008::WorkbookBeforeSave@1571(Wb@1100244002 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SaveAsUI@1100244001 : Boolean;VAR Cancel@1100244000 : Boolean);
    BEGIN
    END;

    EVENT xlAplic@1100244008::WorkbookBeforePrint@1572(Wb@1100244001 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1100244000 : Boolean);
    BEGIN
    END;

    EVENT xlAplic@1100244008::WorkbookNewSheet@1573(Wb@1100244001 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Sh@1100244000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlAplic@1100244008::WorkbookAddinInstall@1574(Wb@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlAplic@1100244008::WorkbookAddinUninstall@1575(Wb@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlAplic@1100244008::WindowResize@1554(Wb@1100244001 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlAplic@1100244008::WindowActivate@1556(Wb@1100244001 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlAplic@1100244008::WindowDeactivate@1557(Wb@1100244001 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlAplic@1100244008::SheetFollowHyperlink@1854(Sh@1100244001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlAplic@1100244008::SheetPivotTableUpdate@2157(Sh@1100244001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlAplic@1100244008::WorkbookPivotTableCloseConnect@2160(Wb@1100244001 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlAplic@1100244008::WorkbookPivotTableOpenConnecti@2161(Wb@1100244001 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlLibro@1100244010::Open@1923();
    BEGIN
    END;

    EVENT xlLibro@1100244010::Activate@304();
    BEGIN
    END;

    EVENT xlLibro@1100244010::Deactivate@1530();
    BEGIN
    END;

    EVENT xlLibro@1100244010::BeforeClose@1546(VAR Cancel@1100244000 : Boolean);
    BEGIN
    END;

    EVENT xlLibro@1100244010::BeforeSave@1547(SaveAsUI@1100244001 : Boolean;VAR Cancel@1100244000 : Boolean);
    BEGIN
    END;

    EVENT xlLibro@1100244010::BeforePrint@1549(VAR Cancel@1100244000 : Boolean);
    BEGIN
    END;

    EVENT xlLibro@1100244010::NewSheet@1550(Sh@1100244000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlLibro@1100244010::AddinInstall@1552();
    BEGIN
    END;

    EVENT xlLibro@1100244010::AddinUninstall@1553();
    BEGIN
    END;

    EVENT xlLibro@1100244010::WindowResize@1554(Wn@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlLibro@1100244010::WindowActivate@1556(Wn@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlLibro@1100244010::WindowDeactivate@1557(Wn@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlLibro@1100244010::SheetSelectionChange@1558(Sh@1100244001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlLibro@1100244010::SheetBeforeDoubleClick@1559(Sh@1100244002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100244001 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1100244000 : Boolean);
    BEGIN
    END;

    EVENT xlLibro@1100244010::SheetBeforeRightClick@1560(Sh@1100244002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100244001 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1100244000 : Boolean);
    BEGIN
    END;

    EVENT xlLibro@1100244010::SheetActivate@1561(Sh@1100244000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlLibro@1100244010::SheetDeactivate@1562(Sh@1100244000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlLibro@1100244010::SheetCalculate@1563(Sh@1100244000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlLibro@1100244010::SheetChange@1564(Sh@1100244001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlLibro@1100244010::SheetFollowHyperlink@1854(Sh@1100244001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlLibro@1100244010::SheetPivotTableUpdate@2157(Sh@1100244001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlLibro@1100244010::PivotTableCloseConnection@2158(Target@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlLibro@1100244010::PivotTableOpenConnection@2159(Target@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT xlHoja@1100244012::SelectionChange@1543(Target@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlHoja@1100244012::BeforeDoubleClick@1537(Target@1100244001 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1100244000 : Boolean);
    BEGIN
    END;

    EVENT xlHoja@1100244012::BeforeRightClick@1534(Target@1100244001 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1100244000 : Boolean);
    BEGIN
    END;

    EVENT xlHoja@1100244012::Activate@304();
    BEGIN
    END;

    EVENT xlHoja@1100244012::Deactivate@1530();
    BEGIN
    END;

    EVENT xlHoja@1100244012::Calculate@279();
    BEGIN
    END;

    EVENT xlHoja@1100244012::Change@1545(Target@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlHoja@1100244012::FollowHyperlink@1470(Target@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlHoja@1100244012::PivotTableUpdate@2156(Target@1100244000 : Automation "{00020813-0000-0000-C000-000000000046} 1.4:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    BEGIN
    END.
  }
}
