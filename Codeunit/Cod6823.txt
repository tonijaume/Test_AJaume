OBJECT Codeunit 6823 EP Insert Line Data Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=25/05/05;
    Time=12:00:00;
    Version List=NAVW14.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EPDecodeXML@1000000000 : Codeunit 6813;
      EPSupportFunctions@1000000001 : Codeunit 6815;
      EPFormatFunctions@1000000002 : Codeunit 6817;

    PROCEDURE InsertLine@1000000001(VAR XMLDocInHead@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";TableNo@1000000000 : Integer;GUID@1000000002 : Text[50];UserID@1000000005 : Code[20]);
    VAR
      ChangeLogMgt@1000 : Codeunit 423;
      LineRecordRef@1000000003 : RecordRef;
    BEGIN
      CASE TableNo OF
        DATABASE::"Sales Line": InsertSalesLine(XMLDocInHead,GUID,LineRecordRef);
        DATABASE::"Purchase Line": InsertPurchaseLine(XMLDocInHead,GUID,LineRecordRef);
        DATABASE::"Production BOM Line": InsertProdBOMVersionLine(XMLDocInHead,GUID,LineRecordRef);
        DATABASE::"Routing Line": InsertRoutingVersionLine(XMLDocInHead,GUID,LineRecordRef);
      END;

      // Make Changelog Entry
      IF EPSupportFunctions.CheckChangeLogInLic THEN
        IF ChangeLogMgt.GetTableTriggerMask(LineRecordRef.NUMBER) IN [1,5,11,15] THEN BEGIN // All Maskvalues for Insert
          ChangeLogMgt.SetLogEmployeePortalActivity(UserID);
          ChangeLogMgt.LogInsertion(LineRecordRef);
        END;
    END;

    LOCAL PROCEDURE InsertSalesLine@1000000000(VAR XMLDocInHead@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000009 : Text[50];VAR LineRecordRef@1000000001 : RecordRef);
    VAR
      SalesLine@1000 : Record 37;
      LineFieldRef@1000000002 : FieldRef;
      LineRecordRef2@1000000003 : RecordRef;
      LineFieldRef2@1000000007 : FieldRef;
      LineRecordRef2Filter@1000000004 : Text[1024];
      DocumentType@1000000005 : Option;
      DocumentNo@1000000006 : Code[20];
      NextLineNo@1000000008 : Integer;
    BEGIN
      // The folowing Fields need to be configured for the Head Data of inbound XML
      // Field No.  Field Name
      // 1          Document Type
      // 2          Sell to Customer No.
      // 3          Document No.

      LineRecordRef.OPEN(DATABASE::"Sales Line",FALSE);

      // Init the Record
      LineRecordRef.INIT;

      // Set the Primarykey Fields
      LineFieldRef := LineRecordRef.FIELD(SalesLine.FIELDNO("Document Type"));
      EPSupportFunctions.ModifylFieldRefOnInsert(DATABASE::"Sales Line",SalesLine.FIELDNO("Document Type"),
        EPDecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,SalesLine.FIELDNO("Document Type")),
        LineFieldRef);
      DocumentType := LineFieldRef.VALUE;
      EPSupportFunctions.CreateTempHeadFilterTable(SalesLine.FIELDNO("Document Type"),
        EPFormatFunctions.OptionToText(DocumentType),GUID);

      LineFieldRef := LineRecordRef.FIELD(SalesLine.FIELDNO("Sell-to Customer No."));
      EPSupportFunctions.ModifylFieldRefOnInsert(DATABASE::"Sales Line",SalesLine.FIELDNO("Sell-to Customer No."),
        EPDecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,SalesLine.FIELDNO("Sell-to Customer No.")),
        LineFieldRef);

      LineFieldRef := LineRecordRef.FIELD(SalesLine.FIELDNO("Document No."));
      EPSupportFunctions.ModifylFieldRefOnInsert(DATABASE::"Sales Line",SalesLine.FIELDNO("Document No."),
        EPDecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,SalesLine.FIELDNO("Document No.")),
        LineFieldRef);
      DocumentNo := LineFieldRef.VALUE;
      EPSupportFunctions.CreateTempHeadFilterTable(SalesLine.FIELDNO("Document No."),
        DocumentNo,GUID);

      // Get Line Number
      LineRecordRef2.OPEN(DATABASE::"Sales Line",FALSE);
      LineRecordRef2Filter := STRSUBSTNO('WHERE(1=CONST(%1),3=CONST(%2))',DocumentType,DocumentNo);

      LineRecordRef2.SETVIEW(LineRecordRef2Filter);
      IF LineRecordRef2.FIND('+') THEN BEGIN
        LineFieldRef2 := LineRecordRef2.FIELD(SalesLine.FIELDNO("Line No."));
        NextLineNo := LineFieldRef2.VALUE;
        NextLineNo := NextLineNo + 10000;
      END ELSE BEGIN
        NextLineNo := 10000;
      END;
      LineRecordRef2.CLOSE;

      LineFieldRef := LineRecordRef.FIELD(SalesLine.FIELDNO("Line No."));
      LineFieldRef.VALUE(NextLineNo);

      LineRecordRef.INSERT(TRUE);

      // Insert Head Key fields for Answer
      EPSupportFunctions.CreateTempHeadFilterKeys(SalesLine.FIELDNO("Document Type"),GUID);
      EPSupportFunctions.CreateTempHeadFilterKeys(SalesLine.FIELDNO("Document No."),GUID);
    END;

    LOCAL PROCEDURE InsertPurchaseLine@7(VAR XMLDocInHead@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000009 : Text[50];VAR LineRecordRef@1000000001 : RecordRef);
    VAR
      PurchaseLine@1000 : Record 39;
      LineFieldRef@1000000002 : FieldRef;
      LineRecordRef2@1000000003 : RecordRef;
      LineFieldRef2@1000000007 : FieldRef;
      LineRecordRef2Filter@1000000004 : Text[1024];
      DocumentType@1000000005 : Option;
      DocumentNo@1000000006 : Code[20];
      NextLineNo@1000000008 : Integer;
    BEGIN
      // The folowing Fields need to be configured for the Head Data of inbound XML
      // Field No.  Field Name
      // 1          Document Type
      // 2          Buy-from Vendor No.
      // 3          Document No.

      LineRecordRef.OPEN(DATABASE::"Purchase Line",FALSE);

      // Init the Record
      LineRecordRef.INIT;

      // Set the Primarykey Fields
      LineFieldRef := LineRecordRef.FIELD(PurchaseLine.FIELDNO("Document Type"));
      EPSupportFunctions.ModifylFieldRefOnInsert(DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Document Type"),
        EPDecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,PurchaseLine.FIELDNO("Document Type")),
        LineFieldRef);
      DocumentType := LineFieldRef.VALUE;
      EPSupportFunctions.CreateTempHeadFilterTable(PurchaseLine.FIELDNO("Document Type"),
        EPFormatFunctions.OptionToText(DocumentType),GUID);

      LineFieldRef := LineRecordRef.FIELD(PurchaseLine.FIELDNO("Buy-from Vendor No."));
      EPSupportFunctions.ModifylFieldRefOnInsert(DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Buy-from Vendor No."),
        EPDecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,PurchaseLine.FIELDNO("Buy-from Vendor No.")),
        LineFieldRef);

      LineFieldRef := LineRecordRef.FIELD(PurchaseLine.FIELDNO("Document No."));
      EPSupportFunctions.ModifylFieldRefOnInsert(DATABASE::"Purchase Line",PurchaseLine.FIELDNO("Document No."),
        EPDecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,PurchaseLine.FIELDNO("Document No.")),
        LineFieldRef);
      DocumentNo := LineFieldRef.VALUE;
      EPSupportFunctions.CreateTempHeadFilterTable(PurchaseLine.FIELDNO("Document No."),
        DocumentNo,GUID);

      // Get Line Number
      LineRecordRef2.OPEN(DATABASE::"Purchase Line",FALSE);
      LineRecordRef2Filter := STRSUBSTNO('WHERE(1=CONST(%1),3=CONST(%2))',DocumentType,DocumentNo);

      LineRecordRef2.SETVIEW(LineRecordRef2Filter);
      IF LineRecordRef2.FIND('+') THEN BEGIN
        LineFieldRef2 := LineRecordRef2.FIELD(PurchaseLine.FIELDNO("Line No."));
        NextLineNo := LineFieldRef2.VALUE;
        NextLineNo := NextLineNo + 10000;
      END ELSE BEGIN
        NextLineNo := 10000;
      END;
      LineRecordRef2.CLOSE;

      LineFieldRef := LineRecordRef.FIELD(PurchaseLine.FIELDNO("Line No."));
      LineFieldRef.VALUE(NextLineNo);

      LineRecordRef.INSERT(TRUE);

      // Insert Head Key fields for Answer
      EPSupportFunctions.CreateTempHeadFilterKeys(PurchaseLine.FIELDNO("Document Type"),GUID);
      EPSupportFunctions.CreateTempHeadFilterKeys(PurchaseLine.FIELDNO("Document No."),GUID);
    END;

    LOCAL PROCEDURE InsertProdBOMVersionLine@1(VAR XMLDocInHead@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000009 : Text[50];VAR LineRecordRef@1000000001 : RecordRef);
    VAR
      ProdBOMVersion@1002 : Record 99000779;
      ProdBOMVersionLine@1000 : Record 99000772;
      LineFieldRef@1000000002 : FieldRef;
      LineRecordRef2@1000000003 : RecordRef;
      LineFieldRef2@1000000007 : FieldRef;
      LineRecordRef2Filter@1000000004 : Text[1024];
      DocumentNo@1000000006 : Code[20];
      VersionCode@1001 : Code[10];
      NextLineNo@1000000008 : Integer;
    BEGIN
      // The folowing Fields need to be configured for the Head Data of inbound XML
      // Field No.  Field Name
      // 1          Production BOM No.
      // 2          Line No.
      // 3          Version Code

      LineRecordRef.OPEN(DATABASE::"Production BOM Line",FALSE);

      // Init the Record
      LineRecordRef.INIT;

      // Set the Primarykey Fields
      LineFieldRef := LineRecordRef.FIELD(ProdBOMVersionLine.FIELDNO("Production BOM No."));
      EPSupportFunctions.ModifylFieldRefOnInsert(DATABASE::"Production BOM Line",ProdBOMVersionLine.FIELDNO("Production BOM No."),
        EPDecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,ProdBOMVersion.FIELDNO("Production BOM No.")),
        LineFieldRef);
      DocumentNo := LineFieldRef.VALUE;
      EPSupportFunctions.CreateTempHeadFilterTable(ProdBOMVersion.FIELDNO("Production BOM No."),
        DocumentNo,GUID);

      LineFieldRef := LineRecordRef.FIELD(ProdBOMVersionLine.FIELDNO("Version Code"));
      EPSupportFunctions.ModifylFieldRefOnInsert(DATABASE::"Production BOM Line",ProdBOMVersionLine.FIELDNO("Version Code"),
        EPDecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,ProdBOMVersion.FIELDNO("Version Code")),
        LineFieldRef);
      VersionCode := LineFieldRef.VALUE;
      EPSupportFunctions.CreateTempHeadFilterTable(ProdBOMVersion.FIELDNO("Version Code"),
        VersionCode,GUID);


      // Get Line Number
      LineRecordRef2.OPEN(DATABASE::"Production BOM Line",FALSE);
      LineRecordRef2Filter := STRSUBSTNO('WHERE(1=CONST(%1),3=CONST(%2))',DocumentNo,VersionCode);

      LineRecordRef2.SETVIEW(LineRecordRef2Filter);
      IF LineRecordRef2.FIND('+') THEN BEGIN
        LineFieldRef2 := LineRecordRef2.FIELD(ProdBOMVersionLine.FIELDNO("Line No."));
        NextLineNo := LineFieldRef2.VALUE;
        NextLineNo := NextLineNo + 10000;
      END ELSE BEGIN
        NextLineNo := 10000;
      END;
      LineRecordRef2.CLOSE;

      LineFieldRef := LineRecordRef.FIELD(ProdBOMVersionLine.FIELDNO("Line No."));
      LineFieldRef.VALUE(NextLineNo);

      LineRecordRef.INSERT(TRUE);

      // Insert Head Key fields for Answer
      EPSupportFunctions.CreateTempHeadFilterKeys(ProdBOMVersion.FIELDNO("Production BOM No."),GUID);
      EPSupportFunctions.CreateTempHeadFilterKeys(ProdBOMVersion.FIELDNO("Version Code"),GUID);
    END;

    LOCAL PROCEDURE InsertRoutingVersionLine@8(VAR XMLDocInHead@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000009 : Text[50];VAR LineRecordRef@1000000001 : RecordRef);
    VAR
      RoutingVersion@1002 : Record 99000786;
      RoutingVersionLine@1000 : Record 99000764;
      LineFieldRef@1000000002 : FieldRef;
      LineRecordRef2@1000000003 : RecordRef;
      LineFieldRef2@1000000007 : FieldRef;
      LineRecordRef2Filter@1000000004 : Text[1024];
      DocumentNo@1000000006 : Code[20];
      VersionCode@1001 : Code[10];
      NextOpNo@1000000008 : Integer;
    BEGIN
      // The folowing Fields need to be configured for the Head Data of inbound XML
      // Field No.  Field Name
      // 1          Routing No.
      // 2          Line No.
      // 3          Version Code

      LineRecordRef.OPEN(DATABASE::"Routing Line",FALSE);

      // Init the Record
      LineRecordRef.INIT;

      // Set the Primarykey Fields
      LineFieldRef := LineRecordRef.FIELD(RoutingVersionLine.FIELDNO("Routing No."));
      EPSupportFunctions.ModifylFieldRefOnInsert(DATABASE::"Routing Line",RoutingVersionLine.FIELDNO("Routing No."),
        EPDecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,RoutingVersion.FIELDNO("Routing No.")),
        LineFieldRef);
      DocumentNo := LineFieldRef.VALUE;
      EPSupportFunctions.CreateTempHeadFilterTable(RoutingVersion.FIELDNO("Routing No."),
        DocumentNo,GUID);

      LineFieldRef := LineRecordRef.FIELD(RoutingVersionLine.FIELDNO("Version Code"));
      EPSupportFunctions.ModifylFieldRefOnInsert(DATABASE::"Routing Line",RoutingVersionLine.FIELDNO("Version Code"),
        EPDecodeXML.GetValueByFieldIDFromHeadData(XMLDocInHead,RoutingVersion.FIELDNO("Version Code")),
        LineFieldRef);
      VersionCode := LineFieldRef.VALUE;
      EPSupportFunctions.CreateTempHeadFilterTable(RoutingVersion.FIELDNO("Version Code"),
        VersionCode,GUID);


      // Get Line Number
      LineRecordRef2.OPEN(DATABASE::"Routing Line",FALSE);
      LineRecordRef2Filter := STRSUBSTNO('WHERE(1=CONST(%1),2=CONST(%2))',DocumentNo,VersionCode);

      LineRecordRef2.SETVIEW(LineRecordRef2Filter);
      IF LineRecordRef2.FIND('+') THEN BEGIN
        LineFieldRef2 := LineRecordRef2.FIELD(RoutingVersionLine.FIELDNO("Operation No."));
        NextOpNo := LineFieldRef2.VALUE;
        NextOpNo := NextOpNo + 10;
      END ELSE BEGIN
        NextOpNo := 10;
      END;
      LineRecordRef2.CLOSE;

      LineFieldRef := LineRecordRef.FIELD(RoutingVersionLine.FIELDNO("Operation No."));
      LineFieldRef.VALUE(NextOpNo);

      LineRecordRef.INSERT(TRUE);

      // Insert Head Key fields for Answer
      EPSupportFunctions.CreateTempHeadFilterKeys(RoutingVersion.FIELDNO("Routing No."),GUID);
      EPSupportFunctions.CreateTempHeadFilterKeys(RoutingVersion.FIELDNO("Version Code"),GUID);
    END;

    BEGIN
    END.
  }
}
