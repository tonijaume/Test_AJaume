OBJECT Codeunit 420 XBRL Management
{
  OBJECT-PROPERTIES
  {
    Date=13/02/07;
    Time=12:00:00;
    Version List=NAVW15.00,NAVES4.00.02;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CompanyInformation@1013 : Record 79;
      XBRLInstanceDocument@1010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F5078F32-C551-11D3-89B9-0000F81FE221}:'Microsoft XML, v3.0'.DOMDocument30";
      RootNode@1012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      PeriodStartDate@1001 : Date;
      PeriodEndDate@1002 : Date;
      PeriodOption@1003 : 'Accounting Period,Fiscal Year';
      PeriodOptionText@1009 : Text[30];
      NoOfPeriods@1004 : Integer;
      FullPathName@1005 : Text[250];
      ScaleFactor@1006 : Integer;
      ShowZeroLines@1007 : Boolean;
      OptionsInitialized@1008 : Boolean;
      CurrencyCode@1011 : Code[10];
      Text001@1000 : TextConst 'ENU=Accounting Period;ESP=Periodo contable';
      Text002@1014 : TextConst 'ENU=Fiscal Year;ESP=Ejercicio';
      Text003@1015 : TextConst 'ENU=%1 is not a period start date.;ESP=%1 no es una fecha inicio periodo.';

    PROCEDURE AddElement@1(Name@1020002 : Text[250];Value@1020003 : Text[250]) Status@1020000 : Integer;
    VAR
      TempElement@1020006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      TempElement := XBRLInstanceDocument.createElement(Name);
      IF Value <> '' THEN
        TempElement.text := Value;
      RootNode.appendChild(TempElement);
      CLEAR(TempElement);
      Status := 0;
    END;

    PROCEDURE AddAttribute@2(VAR DOMNode@1020001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";Name@1020002 : Text[250];Value@1020003 : Text[250]);
    VAR
      TempAttribute@1020004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      TempAttribute := DOMNode.ownerDocument.createAttribute(Name);
      IF Value <> '' THEN
        TempAttribute.nodeValue := Value;
      DOMNode.attributes.setNamedItem(TempAttribute);
      CLEAR(TempAttribute);
    END;

    PROCEDURE CalcConstant@5(VAR XBRLTaxonomyLine@1000 : Record 395) : Decimal;
    VAR
      XBRLLineConst@1001 : Record 408;
    BEGIN
      WITH XBRLLineConst DO BEGIN
        RESET;
        SETRANGE("XBRL Taxonomy Name",XBRLTaxonomyLine."XBRL Taxonomy Name");
        SETRANGE("XBRL Taxonomy Line No.",XBRLTaxonomyLine."Line No.");
        SETRANGE("Starting Date",0D,PeriodEndDate);
        IF FINDLAST THEN
          EXIT(XBRLLineConst."Constant Amount")
        ELSE
          EXIT(XBRLTaxonomyLine."Constant Amount");
      END;
    END;

    PROCEDURE CalcAmount@9(VAR XBRLTaxonomyLine@1000 : Record 395) : Decimal;
    VAR
      GLEntry@1001 : Record 17;
      GLAcc@1004 : Record 15;
      XBRLGLMapLine@1002 : Record 397;
      Amount@1003 : Decimal;
    BEGIN
      Amount := 0;
      WITH XBRLGLMapLine DO BEGIN
        RESET;
        SETRANGE("XBRL Taxonomy Name",XBRLTaxonomyLine."XBRL Taxonomy Name");
        SETRANGE("XBRL Taxonomy Line No.",XBRLTaxonomyLine."Line No.");
        IF FIND('-') THEN
          REPEAT
            GLEntry.RESET;
            GLEntry.SETCURRENTKEY("G/L Account No.","Posting Date");
            GLEntry.SETFILTER("G/L Account No.","G/L Account Filter");
            IF ((XBRLTaxonomyLine.GETFILTER("Business Unit Filter") <> '') OR
                (XBRLTaxonomyLine.GETFILTER("Global Dimension 1 Filter") <> '') OR
                (XBRLTaxonomyLine.GETFILTER("Global Dimension 2 Filter") <> ''))
            THEN BEGIN
              GLEntry.SETCURRENTKEY(
                "G/L Account No.","Business Unit Code","Global Dimension 1 Code","Global Dimension 2 Code");
              XBRLTaxonomyLine.COPYFILTER("Business Unit Filter",GLEntry."Business Unit Code");
              XBRLTaxonomyLine.COPYFILTER("Global Dimension 1 Filter",GLEntry."Global Dimension 1 Code");
              XBRLTaxonomyLine.COPYFILTER("Global Dimension 2 Filter",GLEntry."Global Dimension 2 Code");
            END;
            GLEntry.FILTERGROUP(2);
            IF XBRLGLMapLine."Business Unit Filter" <> '' THEN BEGIN
              GLEntry.SETCURRENTKEY(
                "G/L Account No.","Business Unit Code","Global Dimension 1 Code","Global Dimension 2 Code");
              GLEntry.SETFILTER("Business Unit Code","Business Unit Filter");
            END;
            IF XBRLGLMapLine."Global Dimension 1 Filter" <> '' THEN BEGIN
              GLEntry.SETCURRENTKEY(
                "G/L Account No.","Business Unit Code","Global Dimension 1 Code","Global Dimension 2 Code");
              GLEntry.SETFILTER("Global Dimension 1 Code","Global Dimension 1 Filter");
            END;
            IF XBRLGLMapLine."Global Dimension 2 Filter" <> '' THEN BEGIN
              GLEntry.SETCURRENTKEY(
                "G/L Account No.","Business Unit Code","Global Dimension 1 Code","Global Dimension 2 Code");
              GLEntry.SETFILTER("Global Dimension 2 Code","Global Dimension 2 Filter");
            END;
            GLEntry.FILTERGROUP(0);
            CASE "Timeframe Type" OF
              "Timeframe Type"::"Net Change":
                GLEntry.SETRANGE("Posting Date",PeriodStartDate,PeriodEndDate);
              "Timeframe Type"::"Beginning Balance":
                GLEntry.SETRANGE("Posting Date",0D,CLOSINGDATE(PeriodStartDate - 1));
              "Timeframe Type"::"Ending Balance":
                GLEntry.SETRANGE("Posting Date",0D,PeriodEndDate);
            END;
            CASE "Amount Type" OF
              "Amount Type"::"Net Amount":
                BEGIN
                  GLEntry.CALCSUMS(Amount);
                  IF (("Normal Balance" = "Normal Balance"::"Debit (positive)") AND (GLEntry.Amount < 0) OR
                      ("Normal Balance" = "Normal Balance"::"Credit (negative)") AND (GLEntry.Amount > 0)) THEN
                    Amount := Amount - ABS(GLEntry.Amount)
                  ELSE
                    Amount := Amount + ABS(GLEntry.Amount);
                END;
              "Amount Type"::"Debits Only":
                BEGIN
                  GLEntry.CALCSUMS("Debit Amount");
                  Amount := Amount + GLEntry."Debit Amount";
                END;
              "Amount Type"::"Credits Only":
                BEGIN
                  GLEntry.CALCSUMS("Credit Amount");
                  Amount := Amount + GLEntry."Credit Amount";
                END;
            END;
            WITH GLAcc DO BEGIN
              SETFILTER("No.",XBRLGLMapLine."G/L Account Filter");
              SETFILTER("Account Type",'%1|%2',"Account Type"::"4","Account Type"::"2");
              GLEntry.COPYFILTER("Posting Date",GLAcc."Date Filter");
              GLEntry.COPYFILTER("Global Dimension 1 Code","Global Dimension 1 Filter");
              GLEntry.COPYFILTER("Global Dimension 2 Code","Global Dimension 2 Filter");
              GLEntry.COPYFILTER("Business Unit Code","Business Unit Filter");
              IF FIND('-') THEN
                REPEAT
                  CASE "Amount Type" OF
                    "Amount Type"::"Net Amount":
                      BEGIN
                        CALCFIELDS("Net Change");
                        IF (("Normal Balance" = "Normal Balance" :: "Debit (positive)") AND ("Net Change" < 0) OR
                            ("Normal Balance" = "Normal Balance" :: "Credit (negative)") AND ("Net Change" > 0))
                        THEN
                          Amount := Amount - ABS("Net Change")
                        ELSE
                          Amount := Amount + ABS("Net Change");
                      END;
                    "Amount Type"::"Debits Only":
                      BEGIN
                        CALCFIELDS("Debit Amount");
                        Amount := Amount + "Debit Amount";
                      END;
                    "Amount Type"::"Credits Only":
                      BEGIN
                        CALCFIELDS("Credit Amount");
                        Amount := Amount + "Credit Amount";
                      END;
                  END;
                UNTIL NEXT = 0;
            END;
          UNTIL NEXT = 0;
      END;
      EXIT(Amount);
    END;

    PROCEDURE CalcRollup@4(VAR XBRLTaxonomyLine@1000 : Record 395) : Decimal;
    VAR
      XBRLTaxonomyLine2@1003 : Record 395;
      XBRLRollupLine@1001 : Record 398;
      TotalAmount@1002 : Decimal;
    BEGIN
      TotalAmount := 0;
      XBRLRollupLine.SETRANGE("XBRL Taxonomy Name",XBRLTaxonomyLine."XBRL Taxonomy Name");
      XBRLRollupLine.SETRANGE("XBRL Taxonomy Line No.",XBRLTaxonomyLine."Line No.");
      WITH XBRLRollupLine DO
        IF FIND('-') THEN
          REPEAT
            XBRLTaxonomyLine2.GET("XBRL Taxonomy Name","From XBRL Taxonomy Line No.");
            XBRLTaxonomyLine2.COPYFILTERS(XBRLTaxonomyLine);
            CASE XBRLTaxonomyLine2."Source Type" OF
              XBRLTaxonomyLine2."Source Type"::Constant:
                TotalAmount := TotalAmount + Weight * XBRLTaxonomyLine2."Constant Amount";
              XBRLTaxonomyLine2."Source Type"::"General Ledger":
                TotalAmount := TotalAmount + Weight * CalcAmount(XBRLTaxonomyLine2);
              XBRLTaxonomyLine2."Source Type"::Rollup:
                TotalAmount := TotalAmount + Weight * CalcRollup(XBRLTaxonomyLine2);
            END;
          UNTIL XBRLRollupLine.NEXT = 0;
      EXIT(TotalAmount);
    END;

    PROCEDURE CalcPeriodEndDate@14(StartDate@1000 : Date) : Date;
    VAR
      AccountingPeriodRec@1001 : Record 50;
      EndDate@1002 : Date;
    BEGIN
      CLEAR(AccountingPeriodRec);
      IF PeriodOption = PeriodOption::"Fiscal Year" THEN
        AccountingPeriodRec.SETRANGE("New Fiscal Year",TRUE);
      IF NOT AccountingPeriodRec.GET(StartDate) THEN
        ERROR(Text003,StartDate);
      AccountingPeriodRec.NEXT;
      EndDate := CALCDATE('<-1D>',AccountingPeriodRec."Starting Date");
      EXIT(EndDate);
    END;

    PROCEDURE CalcPeriodStartDate@7(EndDate@1000 : Date) : Date;
    VAR
      AccountingPeriodRec@1001 : Record 50;
    BEGIN
      CLEAR(AccountingPeriodRec);
      AccountingPeriodRec.SETRANGE("Starting Date",0D,EndDate);
      IF PeriodOption = PeriodOption::"Fiscal Year" THEN
        AccountingPeriodRec.SETRANGE("New Fiscal Year",TRUE);
      AccountingPeriodRec.FIND('+');
      EXIT(AccountingPeriodRec."Starting Date");
    END;

    PROCEDURE ExpandString@19(Description@1001 : Text[200]) : Text[250];
    VAR
      Parameters@1002 : ARRAY [25] OF Text[30];
      Result@1006 : Text[250];
      I@1003 : Integer;
      Param@1004 : Integer;
      Digits@1005 : Integer;
    BEGIN
      //Setup all the parameters
      IF CompanyInformation.Name ='' THEN
        CompanyInformation.GET;
      CLEAR(Parameters);
      Parameters[1] := FORMAT(PeriodEndDate,0,'<Day>');
      Parameters[2] := FORMAT(PeriodEndDate,0,'<Day,2>');
      Parameters[3] := FORMAT(PeriodEndDate,0,'<Month,2>');
      Parameters[4] := FORMAT(PeriodEndDate,0,'<Month Text>');
      Parameters[5] := FORMAT(PeriodEndDate,0,'<Year>');
      Parameters[6] := FORMAT(PeriodEndDate,0,'<Year4>');
      Parameters[7] := FORMAT(PeriodStartDate,0,'<Day>');
      Parameters[8] := FORMAT(PeriodStartDate,0,'<Day,2>');
      Parameters[9] := FORMAT(PeriodStartDate,0,'<Month,2>');
      Parameters[10] := FORMAT(PeriodStartDate,0,'<Month Text>');
      Parameters[11] := FORMAT(PeriodStartDate,0,'<Year>');
      Parameters[12] := FORMAT(PeriodStartDate,0,'<Year4>');
      Parameters[13] := FORMAT(NoOfPeriods);
      Parameters[14] := PeriodOptionText;
      Parameters[15] := CompanyInformation.Name;

      //Replace all substitution parameters (%1..%25 allowed)
      I := 1;
      WHILE I <= STRLEN(Description) DO BEGIN
        Digits := 0;
        IF Description[I] = '%' THEN
          CASE TRUE OF
            (Description[I+1] IN ['1','2']) AND (Description[I+2] IN ['0'..'9']):  //Two digits
              Digits := 2;
            (Description[I+1] IN ['0'..'9']):                                      //One digit
              Digits := 1;
          END;
        IF Digits = 0 THEN BEGIN
          IF STRLEN(Result) < 250 THEN
            Result := Result + COPYSTR(Description,I,1)
          ELSE
            I := 251;
        END ELSE BEGIN
          EVALUATE(Param,COPYSTR(Description,I+1,Digits));
          IF STRLEN(Result) + STRLEN(Parameters[Param]) < 250 THEN
            Result := Result + Parameters[Param]
          ELSE
            I := 251;
        END;
        I := I + 1 + Digits;
      END;
      EXIT(Result);
    END;

    PROCEDURE FormatAmount@16(Amount@1000 : Decimal) : Decimal;
    BEGIN
      CASE ScaleFactor OF
        0 : Amount := ROUND(Amount,0.01);

        3 : Amount := ROUND((Amount/1000),0.00001);

        6 : Amount := ROUND((Amount/1000000),0.00000001);
      ELSE
        Amount := ROUND(Amount,0.01);  //Format in dollars
      END;
      EXIT(Amount);
    END;

    PROCEDURE FormatAmount2@3(Amount@1000 : Decimal) : Text[30];
    BEGIN
      EXIT(CONVERTSTR(FORMAT(Amount,0,1),',','.'));
    END;

    PROCEDURE InitializeOptions@6(NumOfPeriods@1001 : Integer;Scale@1002 : Integer;PerOption@1003 : 'Accounting Period,Fiscal Year';PathName@1004 : Text[250];ShowZero@1005 : Boolean;NewCurrencyCode@1006 : Code[10]);
    BEGIN
      PeriodOption := PerOption;
      IF PerOption = PerOption::"Accounting Period" THEN
        PeriodOptionText := Text001
      ELSE
        PeriodOptionText := Text002;
      NoOfPeriods := NumOfPeriods;
      FullPathName := PathName;
      ScaleFactor := Scale;
      ShowZeroLines := ShowZero;
      OptionsInitialized := TRUE;
      CurrencyCode := NewCurrencyCode;
    END;

    PROCEDURE SetPeriodDates@15(StartingDate@1000 : Date;EndDate@1002 : Date;VAR XBRLTaxonomyLine@1001 : Record 395);
    BEGIN
      IF EndDate = 0D THEN
        PeriodEndDate := CalcPeriodEndDate(StartingDate)
      ELSE
        PeriodEndDate := EndDate;
      IF EndDate = 0D THEN
        PeriodStartDate := CalcPeriodStartDate(PeriodEndDate)
      ELSE
        PeriodStartDate := StartingDate;
      XBRLTaxonomyLine.SETRANGE("Date Filter",PeriodStartDate,PeriodEndDate);
    END;

    EVENT XBRLInstanceDocument@1010::ondataavailable@198();
    BEGIN
    END;

    EVENT XBRLInstanceDocument@1010::onreadystatechange@-609();
    BEGIN
    END;

    BEGIN
    END.
  }
}
