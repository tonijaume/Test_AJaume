OBJECT Codeunit 7700 ADCS NAS Startup
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
            CREATE(SocketBAIn);
            CREATE(ComComIn);
            CREATE(SaferStream);

            IF NOT (EVALUATE(PortNumber, NASID)) THEN
              PortNumber := 11322;

            MESSAGE(Text000,COMPANYNAME);
            MESSAGE(Text002,PortNumber);

            ComComIn.AddBusAdapter(SocketBAIn,0);
            SocketBAIn.OpenSocket(PortNumber, '');
          END;

  }
  CODE
  {
    VAR
      SocketBAIn@1014 : Automation "{CF450AFF-91CE-4DF0-92DE-AFE4C28AAFC7} 1.0:{4CBE9566-34EA-429D-963A-911E270CBE4F}:Unknown Automation Server.Unknown Class";
      ComComIn@1000 : Automation "{F9A57667-8AC5-45C5-9416-99D3955BCAC0} 1.0:{01018FA5-E4B4-413C-A47C-AD34B0CC2647}:Unknown Automation Server.Unknown Class" WITHEVENTS;
      Text000@1004 : TextConst 'ENU=Application Server has been started for ADCS. Company is %1;ESP=Application Server se ha iniciado para ADCS. La empresa es %1';
      TempXMLQueue@1006 : TEMPORARY Record 7709;
      NASID@1012 : Text[30];
      CompName@1011 : Text[100];
      Text001@1002 : TextConst 'ENU=OutMessage is not set in SendXMLReply;ESP=OutMessage no est  configurado en SendXMLReply';
      Text002@1007 : TextConst 'ENU=Socket Port : %1;ESP=Socket Port: %1';
      MsgCount@1013 : Integer;
      FileNumber@1016 : Integer;
      OutMessage@1017 : Automation "{F9A57667-8AC5-45C5-9416-99D3955BCAC0} 1.0:{6CB9762C-E61C-4F96-BA34-8B20D3A5B46E}:Unknown Automation Server.Unknown Class";
      Globalxmlin@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      PortNumber@1003 : Integer;
      SaferStream@1102051000 : Automation "{F68B5E32-1F57-4604-89C6-65B2B74D2311} 5.0:{005C64FE-F817-4C64-83E4-BAA323164956}:Unknown Automation Server.Unknown Class";

    PROCEDURE SetNASID@2(NASID2@1000 : Text[30]);
    BEGIN
      NASID := NASID2;
    END;

    PROCEDURE SendXMLReply@3(xmlout@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      InMessage@1003 : Automation "{F9A57667-8AC5-45C5-9416-99D3955BCAC0} 1.0:{D184D0AC-61C9-4AC1-B537-0D28C277FEDE}:Unknown Automation Server.Unknown Class";
      InStrm@1004 : InStream;
      ReceivedStatus@1005 : Char;
      SentCorrectly@1006 : Boolean;
      ID@1007 : Text[30];
      xmlNode@1008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      tempFile@1009 : File;
      FileInStrm@1010 : InStream;
      tempFileName@1011 : Text[150];
      dummyInMsg@1001 : Automation "{F9A57667-8AC5-45C5-9416-99D3955BCAC0} 1.0:{D184D0AC-61C9-4AC1-B537-0D28C277FEDE}:Unknown Automation Server.Unknown Class";
      dummyInS@1012 : InStream;
      dummyChar@1013 : Char;
      dummyString@1014 : Text[750];
      SafeStream@1102051000 : OutStream;
    BEGIN
      IF ISCLEAR(OutMessage) THEN
        ERROR(Text001);

      SaferStream.PrepareEncryptionLayer();
      SafeStream := SaferStream.DataStream();
      xmlout.async := FALSE;
      xmlout.save(SafeStream);

      SaferStream.SendEncryptedData(OutMessage.GetStream);

      xmlNode := xmlout.firstChild.firstChild.attributes.getNamedItem('ID');
      ID := xmlNode.nodeValue();
      dummyInMsg := OutMessage.SendWaitForReply(35000);
      dummyInS := dummyInMsg.GetStream();

      dummyInS.READ(dummyChar);
      dummyInMsg.CommitMessage();
    END;

    PROCEDURE SendError@1(ErrorString@1000 : Text[250]);
    VAR
      xmlout@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      RootNode@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      Child@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      ReturnedNode@1005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      XMLDOMMgmt@1006 : Codeunit 99008516;
    BEGIN
      CREATE(xmlout);

      // Receive xml-document;
      xmlout := Globalxmlin;

      // Error text
      CLEAR(XMLDOMMgmt);
      RootNode := xmlout.documentElement;
      IF XMLDOMMgmt.FindNode(RootNode,'Header',ReturnedNode) THEN BEGIN
        IF XMLDOMMgmt.FindNode(RootNode,'Header/Input',Child) THEN
          ReturnedNode.removeChild(Child);
        IF XMLDOMMgmt.FindNode(RootNode,'Header/Comment',Child) THEN
          ReturnedNode.removeChild(Child);
        XMLDOMMgmt.AddElement(ReturnedNode,'Comment',ErrorString,'',ReturnedNode);
      END;

      // Send reply XML-document
      SendXMLReply(xmlout);

      CLEAR(xmlout);
      CLEAR(RootNode);
      CLEAR(Child);
      CLEAR(Globalxmlin);
    END;

    PROCEDURE VerifyXMLDocument@4(VAR QueueJob@1000 : Record 7709;VAR IsPlugin@1005 : Boolean;VAR ID@1006 : Text[30]) DocumentOK : Boolean;
    VAR
      InStrm@1001 : InStream;
      xmlin@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      xmlNode@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      CREATE(xmlin);

      QueueJob.CALCFIELDS(Job);

      IF (NOT TempXMLQueue.Job.HASVALUE) THEN BEGIN
        DocumentOK := FALSE;
        EXIT;
      END;

      QueueJob.Job.CREATEINSTREAM(InStrm);

      xmlin.async := FALSE;
      DocumentOK := xmlin.load(InStrm);

      IF (DocumentOK) THEN BEGIN
        xmlNode := xmlin.firstChild.firstChild.attributes.getNamedItem('ID');
        ID := xmlNode.nodeValue();
      END;

      CLEAR(xmlin);
    END;

    EVENT ComComIn@1000::MessageReceived@1(VAR InMessage@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    VAR
      InMessage1@1010 : Automation "{F9A57667-8AC5-45C5-9416-99D3955BCAC0} 1.0:{D184D0AC-61C9-4AC1-B537-0D28C277FEDE}:Unknown Automation Server.Unknown Class";
      OutStrm@1001 : OutStream;
      InStrm@1002 : InStream;
      DocumentOK@1004 : Boolean;
      StartLoop@1005 : Integer;
      IsPlugin@1006 : Boolean;
      MiniFormMgmt@1008 : Codeunit 7702;
      xmlMessage@1007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      replyStream@1003 : OutStream;
      HiByte@1009 : Char;
      LowByte@1011 : Char;
      ID@1012 : Text[30];
      MaxLoops@1013 : Integer;
      SymetricKeyRequest@1014 : Char;
    BEGIN
      InMessage1 := InMessage;
      SocketBAIn.ReceivingTimeout(15000);

      // Step 1- Get the local variables (including reply)
      InStrm := InMessage1.GetStream;
      OutMessage := InMessage1.CreateReply();
      replyStream := OutMessage.GetStream();

      // Step 2- Read the version number of the ADCS components (Ignored for now)
      InStrm.READ(HiByte);
      InStrm.READ(LowByte);

      // Step 3- Send my version number
      HiByte := 5;
      LowByte := 0;
      replyStream.WRITE(HiByte);
      replyStream.WRITE(LowByte);

      // Encryption part
      InStrm.READ(SymetricKeyRequest);
      IF (NOT SaferStream.HasSymetricKey) OR (SymetricKeyRequest = 'N') THEN
      BEGIN
        SymetricKeyRequest := 'Y';
        replyStream.WRITE(SymetricKeyRequest);
        SaferStream.ReceiveSymetricKey(InStrm, replyStream);
      END
      ELSE
      BEGIN
        SymetricKeyRequest := 'N';
        replyStream.WRITE(SymetricKeyRequest);
      END;

      SaferStream.ReceiveEncryptedData(InStrm, replyStream);
      InStrm := SaferStream.DataStream();

      // Step 4- Receive the XML document
      IF TempXMLQueue.FIND('+') THEN
        TempXMLQueue.Integer := TempXMLQueue.Integer + 1
      ELSE
        TempXMLQueue.Integer := 1;

      CLEAR(TempXMLQueue.Job);
      TempXMLQueue.Job.CREATEOUTSTREAM(OutStrm);

      StartLoop := 1;
      MaxLoops := 16;

      WHILE StartLoop < MaxLoops DO BEGIN
        COPYSTREAM(OutStrm, InStrm);
        DocumentOK := VerifyXMLDocument(TempXMLQueue, IsPlugin, ID);
        IF (DocumentOK) THEN BEGIN
          TempXMLQueue.INSERT;
          StartLoop := MaxLoops;
        END ELSE BEGIN
          SLEEP(120 + StartLoop * 70);
          StartLoop := StartLoop + 1;
        END;
      END;

      // Step 5- Process the document (and inform ADCS components of result)
      IF (DocumentOK) THEN BEGIN
        HiByte := 'O';  // O from OK
        replyStream.WRITE(HiByte);
        TempXMLQueue.CALCFIELDS(Job);
        TempXMLQueue.Job.CREATEINSTREAM(InStrm);

        CREATE(xmlMessage);
        xmlMessage.async := FALSE;
        xmlMessage.load(InStrm);
        SLEEP(10);
        Globalxmlin := xmlMessage;
        MiniFormMgmt.ReceiveXML(xmlMessage);
        TempXMLQueue.DELETE;
      END ELSE BEGIN
        HiByte := 'N';  // N from "Not OK"
        replyStream.WRITE(HiByte);
      END;


      CLEAR(OutMessage);
      CLEAR(Globalxmlin);
      InMessage1.CommitMessage();
    END;

    EVENT Globalxmlin@1001::ondataavailable@198();
    BEGIN
    END;

    EVENT Globalxmlin@1001::onreadystatechange@-609();
    BEGIN
    END;

    EVENT SaferStream@1102051000::ReceiveEncryptedData@4(readStream@1102051001 : Variant;writeStream@1102051000 : Variant);
    BEGIN
    END;

    EVENT SaferStream@1102051000::SendEncryptedData@5(readStream@1102051001 : Variant;writeStream@1102051000 : Variant);
    BEGIN
    END;

    BEGIN
    END.
  }
}
