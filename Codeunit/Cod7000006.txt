OBJECT Codeunit 7000006 Document-Post
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVES6.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 21=imd,
                TableData 25=imd,
                TableData 379=imd,
                TableData 380=imd,
                TableData 7000002=imd,
                TableData 7000003=imd,
                TableData 7000004=imd,
                TableData 7000006=imd,
                TableData 7000007=imd,
                TableData 7000021=imd,
                TableData 7000022=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text1100000@1000 : TextConst 'ENU=must be of a type that creates bills;ESP=debe ser de un tipo que cree efectos';
      Text1100001@1001 : TextConst 'ENU=A customer or vendor must be specified when a bill is created.;ESP=Cuando se crea un efecto se debe indicar un cliente o proveedor.';
      Text1100002@1002 : TextConst 'ENU=A grouped document cannot be settled from a journal.\;ESP=Un documento remesado no se puede liquidar desde el diario.\';
      Text1100003@1003 : TextConst 'ENU=Remove Document %1/%2 from Group/Pmt. Order %3 and try again.\;ESP=Elimine documento %1/%2 de la remesa/orden pago %3 e int‚ntelo de nuevo.\';
      Text1100004@1004 : TextConst 'ENU=Sales Bill %1/%2 already exists.;ESP=Ya existe efecto %1/%2';
      Text1100005@1005 : TextConst 'ENU=Purchase Document %1/%2 already exists.;ESP=Ya existe documento %1/%2';
      Text1100006@1006 : TextConst 'ENU=Receivable %1 %2/%3 cannot be applied to, because it is included in a posted Bill Group.;ESP=No se puede liquidar el cobro %1 %2/%3 ya que est  incluido en una remesa registrada.';
      Text1100007@1007 : TextConst 'ENU=Payable %1 %2/%3 cannot be applied to, because it is included in a posted Payment Order.;ESP=No se puede liquidar el pago %1 %2/%3 ya que est  incluido en una remesa registrada.';
      Text1100008@1008 : TextConst 'ENU=Date %1 is not within your range of allowed posting dates;ESP=La fecha %1 no est  comprendida en el periodo de fechas de registro permitidas.';
      Text1100009@1009 : TextConst 'ENU=%1 must be entered.;ESP=Se debe indicar %1.';
      Text1100010@1010 : TextConst 'ENU=%1 must be of a type that creates bills.;ESP=%1 debe ser de un tipo que cree efectos.';
      Text1100011@1011 : TextConst 'ENU=A grouped document cannot be settled from a journal. Remove it from its group or payment order and try again.;ESP=Un documento remesado no se puede liquidar desde el diario. Elim¡nelo de la orden de pago e int‚ntelo de nuevo.';
      Text1100012@1012 : TextConst 'ENU=cannot be filtered when posting recurring journals;ESP=no puede contener un filtro cuando se registra un diario peri¢dico';
      Text1100013@1013 : TextConst 'ENU=Do you want to post the journal lines and print the posting report?;ESP=¨Confirma que desea registrar las l¡ns. de diario e imprimir el informe de reg.?';
      Text1100014@1014 : TextConst 'ENU=Do you want to post the journal lines?;ESP=¨Confirma que desea registrar las l¡neas del diario?';
      Text1100015@1015 : TextConst 'ENU=There is nothing to post.;ESP=No hay nada que registrar.';
      Text1100016@1016 : TextConst 'ENU=The journal lines were successfully posted.;ESP=Se han registrado correctamente las l¡neas del diario.';
      Text1100017@1017 : TextConst 'ENU=The journal lines were successfully posted. You are now in the %1 journal.;ESP=Se registraron correctamente las l¡neas diario. Se encuentra en el diario %1.';

    PROCEDURE CheckGenJnlLine@1(VAR GenJnlLine@1100000 : Record 81);
    VAR
      Doc@1100001 : Record 7000002;
      PaymentMethod@1100002 : Record 289;
      SystemCreated@1100003 : Boolean;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF ("Document Type" = "Document Type"::Invoice) AND
           ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) AND
           (Amount <> 0)
        THEN BEGIN
          TESTFIELD("Payment Method Code");
          TESTFIELD("Payment Terms Code");
        END;
        IF ("Document Type" = "Document Type"::Bill) AND
           (Amount <> 0)
        THEN BEGIN
          TESTFIELD("Bill No.");
          TESTFIELD("Due Date");
          TESTFIELD("Payment Method Code");
          PaymentMethod.GET("Payment Method Code");
          IF NOT PaymentMethod."Create Bills" THEN
            FIELDERROR("Payment Method Code",Text1100000);
          IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) THEN
            ERROR(Text1100001)
        END;
        IF "Document Type" = "Document Type"::"Credit Memo" THEN
          SystemCreated := FALSE
        ELSE
          SystemCreated := "System-Created Entry";
        IF ("Account Type" = "Account Type"::Customer) AND
           (("Applies-to Doc. Type" = "Applies-to Doc. Type"::Bill) OR ("Applies-to Doc. Type" = "Applies-to Doc. Type"::
      Invoice)) AND
           NOT SystemCreated THEN
        BEGIN
          CLEAR(Doc);
          Doc.SETCURRENTKEY(Type,"Document No.");
          Doc.SETRANGE(Type,Doc.Type::Receivable);
          Doc.SETRANGE("Document No.","Applies-to Doc. No.");
          IF ("Applies-to Doc. Type" = "Applies-to Doc. Type"::Bill) THEN
            Doc.SETRANGE("No.","Applies-to Bill No.")
          ELSE
            Doc.SETRANGE("Document Type",Doc."Document Type"::Invoice);
          IF Doc.FIND('-') AND (Doc."Bill Gr./Pmt. Order No." <> '') THEN
            ERROR(
              Text1100002 +
              Text1100003,
              Doc."Document No.",Doc."No.",Doc."Bill Gr./Pmt. Order No.");
        END;
        IF ("Account Type" = "Account Type"::Vendor) AND
           (("Applies-to Doc. Type" = "Applies-to Doc. Type"::Bill) OR ("Applies-to Doc. Type" = "Applies-to Doc. Type"::
      Invoice)) AND
           NOT SystemCreated THEN
        BEGIN
          CLEAR(Doc);
          Doc.SETCURRENTKEY(Type,"Document No.");
          Doc.SETRANGE(Type,Doc.Type::Payable);
          Doc.SETRANGE("Document No.","Applies-to Doc. No.");
          IF "Applies-to Doc. Type" = "Applies-to Doc. Type"::Bill THEN
            Doc.SETRANGE("No.","Applies-to Bill No.")
          ELSE
            Doc.SETRANGE("Document Type",Doc."Document Type"::Invoice);
          IF Doc.FIND('-') AND (Doc."Bill Gr./Pmt. Order No." <> '') THEN
            ERROR(
              Text1100002 +
              Text1100003,
              Doc."Document No.",Doc."No.",Doc."Bill Gr./Pmt. Order No.");
        END;
      END;
    END;

    PROCEDURE CreateReceivableDoc@28(GenJnlLine@1100000 : Record 81;VAR CVLedgEntryBuf@1100001 : Record 382;IsFromJournal@1100102 : Boolean);
    VAR
      Doc@1100002 : Record 7000002;
      CompanyInfo@1100003 : Record 79;
      OldCustLedgEntry@1100004 : Record 21;
      CustBankAccCode@1100005 : Record 287;
    BEGIN
      Doc.INIT;
      GJLInfoToDoc(GenJnlLine,Doc);
      WITH CVLedgEntryBuf DO BEGIN
        Doc.Type := Doc.Type::Receivable;
        Doc."Entry No." := "Entry No.";
        Doc."Remaining Amount" := "Remaining Amount";
        Doc."Remaining Amt. (LCY)" := "Remaining Amt. (LCY)";
        Doc."Original Amount" := "Remaining Amount";
        Doc."Original Amount (LCY)" := "Remaining Amt. (LCY)";
        IF CompanyInfo.GET AND CustBankAccCode.GET("CV No.",GenJnlLine."Cust./Vendor Bank Acc. Code") THEN
          Doc.Place := COPYSTR(CompanyInfo."Post Code",1,2) = COPYSTR(CustBankAccCode."Post Code",1,2);
        //Check the Doc no.
        OldCustLedgEntry.RESET;
        OldCustLedgEntry.SETCURRENTKEY("Document No.","Document Type","Customer No.");
        OldCustLedgEntry.SETRANGE("Document No.","Document No.");
        IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Bill THEN
          OldCustLedgEntry.SETRANGE("Document Type",OldCustLedgEntry."Document Type"::Bill)
        ELSE IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Invoice THEN
          OldCustLedgEntry.SETRANGE("Document Type",OldCustLedgEntry."Document Type"::Invoice);
        OldCustLedgEntry.SETRANGE("Bill No.","Bill No.");
        IF OldCustLedgEntry.FIND('-') THEN
          ERROR(
            Text1100004,
            "Document No.","Bill No.");
      END;

      IF IsFromJournal THEN
        Doc."From Journal" := TRUE;

      Doc.INSERT;
      CVLedgEntryBuf."Document Situation" := CVLedgEntryBuf."Document Situation"::Cartera;
      CVLedgEntryBuf."Document Status" := CVLedgEntryBuf."Document Status"::Open;
    END;

    PROCEDURE CreatePayableDoc@13(GenJnlLine@1100000 : Record 81;VAR CVLedgEntryBuf@1100001 : Record 382;IsFromJournal@1100101 : Boolean);
    VAR
      Doc@1100002 : Record 7000002;
      OldVendLedgEntry@1100003 : Record 25;
      ElectPmtMgmt@1100004 : Codeunit 10701;
    BEGIN
      Doc.INIT;
      GJLInfoToDoc(GenJnlLine,Doc);
      WITH CVLedgEntryBuf DO BEGIN
        Doc.Type := Doc.Type::Payable;
        Doc."Entry No." := "Entry No.";
        Doc."Remaining Amount" := -"Remaining Amount";
        Doc."Remaining Amt. (LCY)" := -"Remaining Amt. (LCY)";
        Doc."Original Amount" := -"Remaining Amount";
        Doc."Original Amount (LCY)" := -"Remaining Amt. (LCY)";
        //Check the Doc no.
        OldVendLedgEntry.RESET;
        OldVendLedgEntry.SETCURRENTKEY("Document No.","Document Type","Vendor No.");
        OldVendLedgEntry.SETRANGE("Document No.","Document No.");
        IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Bill THEN
          OldVendLedgEntry.SETRANGE("Document Type",OldVendLedgEntry."Document Type"::Bill)
        ELSE IF GenJnlLine."Document Type" = GenJnlLine."Document Type"::Invoice THEN
          OldVendLedgEntry.SETRANGE("Document Type",OldVendLedgEntry."Document Type"::Invoice);
        OldVendLedgEntry.SETRANGE("Bill No.","Bill No.");
        IF OldVendLedgEntry.FIND('-') THEN
          ERROR(
            Text1100005,
            "Document No.","Bill No.");
      END;

      IF IsFromJournal THEN
        Doc."From Journal" := TRUE;

      ElectPmtMgmt.GetTransferType(Doc."Account No.",Doc."Remaining Amount",Doc."Transfer Type",TRUE);

      Doc.INSERT;
      CVLedgEntryBuf."Document Situation" := CVLedgEntryBuf."Document Situation"::Cartera;
      CVLedgEntryBuf."Document Status" := CVLedgEntryBuf."Document Status"::Open;
    END;

    PROCEDURE GJLInfoToDoc@14(VAR GenJnlLine@1100000 : Record 81;VAR Doc@1100001 : Record 7000002);
    VAR
      PaymentMethod@1100002 : Record 289;
      CompanyInfo@1100003 : Record 79;
      CustBankAcc@1100004 : Record 287;
      CustPmtAddress@1100005 : Record 7000014;
      Cust@1100006 : Record 18;
    BEGIN
      WITH GenJnlLine DO BEGIN
        Doc."No." := "Bill No.";
        Doc."Posting Date" := "Posting Date";
        Doc."Document No." := "Document No.";
        Doc.Description := Description;
        Doc."Due Date" := "Due Date";
        Doc."Payment Method Code" := "Payment Method Code";
        PaymentMethod.GET(GenJnlLine."Payment Method Code");
        IF PaymentMethod."Submit for Acceptance" THEN
          Doc.Accepted := Doc.Accepted::No
        ELSE
          Doc.Accepted := Doc.Accepted::"Not Required";
        Doc."Collection Agent" := PaymentMethod."Collection Agent";
        Doc."Account No." := "Account No.";
        Doc."Currency Code" := "Currency Code";
        Doc."Cust./Vendor Bank Acc. Code" := "Cust./Vendor Bank Acc. Code";
        Doc."Pmt. Address Code" := "Pmt. Address Code";
        Doc."Global Dimension 1 Code" := "Shortcut Dimension 1 Code";
        Doc."Global Dimension 2 Code" := "Shortcut Dimension 2 Code";
        CASE GenJnlLine."Document Type" OF
          GenJnlLine."Document Type"::Bill:
            Doc."Document Type" := Doc."Document Type"::Bill;
          GenJnlLine."Document Type"::Invoice:
            Doc."Document Type" := Doc."Document Type"::Invoice;
          GenJnlLine."Document Type"::"Credit Memo":
            Doc."Document Type" := Doc."Document Type"::"1";
        END;
        IF "Account Type" = "Account Type"::Customer THEN BEGIN
          CompanyInfo.GET;
          IF "Cust./Vendor Bank Acc. Code" <> '' THEN BEGIN
            CustBankAcc.GET("Account No.","Cust./Vendor Bank Acc. Code");
            Doc.Place := CompanyInfo."Post Code" = CustBankAcc."Post Code";
            EXIT;
          END;
          IF "Pmt. Address Code" <> '' THEN BEGIN
            CustPmtAddress.GET("Account No.","Pmt. Address Code");
            Doc.Place := CompanyInfo."Post Code" = CustPmtAddress."Post Code";
            EXIT;
          END;
          Cust.GET("Account No.");
          Doc.Place := CompanyInfo."Post Code" = Cust."Post Code";
        END;
      END;
    END;

    PROCEDURE UpdateReceivableDoc@35(VAR CustLedgEntry@1100000 : Record 21;VAR GenJnlLine@1100001 : Record 81;AppliedAmountLCY@1100002 : Decimal;VAR DocAmountLCY@1100003 : Decimal;VAR RejDocAmountLCY@1100004 : Decimal;VAR DiscDocAmountLCY@1100005 : Decimal;VAR CollDocAmountLCY@1100006 : Decimal;VAR DiscRiskFactAmountLCY@1100007 : Decimal;VAR DiscUnriskFactAmountLCY@1100008 : Decimal;VAR CollFactAmountLCY@1100009 : Decimal);
    VAR
      Doc@1100010 : Record 7000002;
      PostedDoc@1100011 : Record 7000003;
      ClosedDoc@1100012 : Record 7000004;
      Doc2@1100013 : Record 7000002;
      PostedDoc2@1100014 : Record 7000003;
      ClosedDoc2@1100015 : Record 7000004;
      PostedBillGr@1100016 : Record 7000006;
      Currency@1100019 : Record 4;
      CarteraDimMgt@1100018 : Codeunit 7000011;
      DocLock@1100017 : Boolean;
    BEGIN
      WITH CustLedgEntry DO BEGIN
        IF NOT DocLock THEN BEGIN
          DocLock := TRUE;
          Doc.LOCKTABLE;
          PostedDoc.LOCKTABLE;
          ClosedDoc.LOCKTABLE;
          IF RECORDLEVELLOCKING THEN BEGIN
            IF Doc2.FIND('+') THEN;
            IF PostedDoc2.FIND('+') THEN;
            IF ClosedDoc2.FIND('+') THEN;
          END;
        END;
        IF "Remaining Amount" = 0 THEN
          "Remaining Amt. (LCY)" := 0;
        IF "Document Situation" <> "Document Situation"::Cartera THEN
          AppliedAmountLCY := ROUND(AppliedAmountLCY);
        CASE "Document Situation" OF
          0,"Document Situation"::Cartera:
            BEGIN
              Doc.GET(Doc.Type::Receivable,"Entry No.");
              IF Doc."Currency Code" = '' THEN
                Doc."Remaining Amount" := Doc."Remaining Amount" + AppliedAmountLCY
              ELSE BEGIN
                Currency.GET(Doc."Currency Code");
                Currency.InitRoundingPrecision();
                Doc."Remaining Amount" :=
                  Doc."Remaining Amount" +
                  ROUND(AppliedAmountLCY * CustLedgEntry."Original Currency Factor", Currency."Amount Rounding Precision");
              END;
              Doc."Remaining Amt. (LCY)" :=
                ROUND(Doc."Remaining Amount" / CustLedgEntry."Original Currency Factor", Currency."Amount Rounding Precision");

              AppliedAmountLCY := ROUND(AppliedAmountLCY);
              IF Doc."Document Type" = Doc."Document Type"::Bill THEN
                DocAmountLCY := DocAmountLCY + AppliedAmountLCY;
              Doc.ResetNoPrinted;
              IF Open THEN
                Doc.MODIFY
              ELSE BEGIN
                ClosedDoc.TRANSFERFIELDS(Doc);
                ClosedDoc.Status := ClosedDoc.Status::Honored;
                ClosedDoc."Honored/Rejtd. at Date" := GenJnlLine."Posting Date";
                ClosedDoc."Bill Gr./Pmt. Order No." := '';
                ClosedDoc."Remaining Amount" := 0;
                ClosedDoc."Remaining Amt. (LCY)" := 0;
                ClosedDoc."Amount for Collection" := 0;
                ClosedDoc."Amt. for Collection (LCY)" := 0;
                ClosedDoc.INSERT;
                CarteraDimMgt.MoveDocToClosedDoc(Doc);
                Doc.DELETE;
                "Document Situation" := "Document Situation"::"Closed Documents";
                "Document Status" := "Document Status"::Honored;
                IF "Document Type" <> "Document Type"::Invoice THEN
                  MODIFY;
              END;
            END;
          "Document Situation"::"Posted BG/PO":
            BEGIN
              PostedDoc.GET(PostedDoc.Type::Receivable,"Entry No.");
              PostedDoc."Remaining Amount" := "Remaining Amount";
              PostedDoc."Remaining Amt. (LCY)" := "Remaining Amt. (LCY)";
              IF PostedDoc.Factoring = PostedDoc.Factoring::" " THEN BEGIN
                IF PostedDoc.Status = PostedDoc.Status::Rejected THEN
                  RejDocAmountLCY := RejDocAmountLCY + AppliedAmountLCY
                ELSE
                  IF PostedDoc."Dealing Type" = PostedDoc."Dealing Type"::Discount THEN
                    DiscDocAmountLCY := DiscDocAmountLCY + AppliedAmountLCY
                  ELSE
                    CollDocAmountLCY := CollDocAmountLCY + AppliedAmountLCY;
              END ELSE BEGIN
                CASE TRUE OF
                  PostedDoc."Dealing Type" = PostedDoc."Dealing Type"::Discount:
                    BEGIN
                      PostedBillGr.GET(PostedDoc."Bill Gr./Pmt. Order No.");
                      IF PostedBillGr.Factoring = PostedBillGr.Factoring::Risked THEN
                        DiscRiskFactAmountLCY := DiscRiskFactAmountLCY + AppliedAmountLCY
                      ELSE
                        DiscUnriskFactAmountLCY := DiscUnriskFactAmountLCY + AppliedAmountLCY
                    END;
                  ELSE
                    CollFactAmountLCY := CollFactAmountLCY + AppliedAmountLCY;
                END;
              END;
              UpdateReceivableCurrFact(PostedDoc, AppliedAmountLCY, DocAmountLCY, RejDocAmountLCY, DiscDocAmountLCY, CollDocAmountLCY,
              DiscRiskFactAmountLCY, DiscUnriskFactAmountLCY, CollFactAmountLCY);
              IF NOT Open THEN BEGIN
                IF GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Payment THEN
                  IF PostedDoc.Status = ClosedDoc.Status::Rejected THEN
                    PostedDoc.Redrawn := TRUE;
                PostedDoc.Status := PostedDoc.Status::Honored;
                PostedDoc."Honored/Rejtd. at Date" := GenJnlLine."Posting Date";
                PostedDoc."Remaining Amount" := 0;
                PostedDoc."Remaining Amt. (LCY)" := 0;
                "Document Status" := "Document Status"::Honored;
                IF PostedDoc.Redrawn THEN
                  "Document Status" := "Document Status"::Redrawn;
                MODIFY;
              END;
              PostedDoc.MODIFY;
            END;
          "Document Situation"::"Closed BG/PO","Document Situation"::"Closed Documents":
            BEGIN
              ClosedDoc.GET(ClosedDoc.Type::Receivable,"Entry No.");
              ClosedDoc.TESTFIELD(Status,ClosedDoc.Status::Rejected);
              ClosedDoc."Remaining Amount" := "Remaining Amount";
              ClosedDoc."Remaining Amt. (LCY)" := "Remaining Amt. (LCY)";
              IF NOT Open THEN BEGIN
                IF GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Payment THEN
                  IF ClosedDoc.Status = PostedDoc.Status::Rejected THEN
                    ClosedDoc.Redrawn := TRUE;
                ClosedDoc.Status := ClosedDoc.Status::Honored;
                ClosedDoc."Remaining Amount" := 0;
                ClosedDoc."Remaining Amt. (LCY)" := 0;
                ClosedDoc."Honored/Rejtd. at Date" := GenJnlLine."Posting Date";
                "Document Status" := "Document Status"::Honored;
                IF ClosedDoc.Redrawn THEN
                  "Document Status" := "Document Status"::Redrawn;
                MODIFY;
              END;
              ClosedDoc.MODIFY;
              MODIFY;
              IF (ClosedDoc."Document Type" = ClosedDoc."Document Type"::Bill) OR
                 (ClosedDoc."Document Type" = ClosedDoc."Document Type"::Invoice) THEN
                RejDocAmountLCY := RejDocAmountLCY + AppliedAmountLCY;
            END;
        END;
      END;
    END;

    PROCEDURE UpdatePayableDoc@31(VAR VendLedgEntry@1100000 : Record 25;VAR GenJnlLine@1100001 : Record 81;VAR DocAmountLCY@1100002 : Decimal;AppliedAmountLCY@1100003 : Decimal;VAR DocLock@1100004 : Boolean;VAR CollDocAmountLCY@1100005 : Decimal);
    VAR
      Doc@1100006 : Record 7000002;
      PostedDoc@1100007 : Record 7000003;
      ClosedDoc@1100008 : Record 7000004;
      Doc2@1100009 : Record 7000002;
      PostedDoc2@1100010 : Record 7000003;
      ClosedDoc2@1100011 : Record 7000004;
      Currency@1100013 : Record 4;
      CarteraDimMgt@1100012 : Codeunit 7000011;
    BEGIN
      WITH VendLedgEntry DO BEGIN
        IF NOT DocLock THEN BEGIN
          DocLock := TRUE;
          Doc.LOCKTABLE;
          PostedDoc.LOCKTABLE;
          IF RECORDLEVELLOCKING THEN BEGIN
            IF Doc2.FIND('+') THEN;
            IF PostedDoc2.FIND('+') THEN;
            IF ClosedDoc2.FIND('+') THEN;
          END;
          ClosedDoc.LOCKTABLE;
        END;
        IF "Remaining Amount" = 0 THEN
          "Remaining Amt. (LCY)" := 0;
        IF "Document Situation" <> "Document Situation"::Cartera THEN
          AppliedAmountLCY := ROUND(AppliedAmountLCY);
        CASE "Document Situation" OF
          0,"Document Situation"::Cartera:
            BEGIN
              Doc.GET(Doc.Type::Payable,"Entry No.");
              IF Doc."Currency Code" = '' THEN
                Doc."Remaining Amount" := Doc."Remaining Amount" - AppliedAmountLCY
              ELSE BEGIN
                Currency.GET(Doc."Currency Code");
                Currency.InitRoundingPrecision();
                Doc."Remaining Amount" :=
                  Doc."Remaining Amount" -
                  ROUND(AppliedAmountLCY * VendLedgEntry."Original Currency Factor", Currency."Amount Rounding Precision");
              END;
              Doc."Remaining Amt. (LCY)" :=
                ROUND(Doc."Remaining Amount" / VendLedgEntry."Original Currency Factor", Currency."Amount Rounding Precision");

              AppliedAmountLCY := ROUND(AppliedAmountLCY);
              IF Doc."Document Type" = Doc."Document Type"::Bill THEN
                DocAmountLCY := DocAmountLCY + AppliedAmountLCY;
              Doc.ResetNoPrinted;
              IF Open THEN
                Doc.MODIFY
              ELSE BEGIN
                ClosedDoc.TRANSFERFIELDS(Doc);
                ClosedDoc.Status := ClosedDoc.Status::Honored;
                ClosedDoc."Honored/Rejtd. at Date" := GenJnlLine."Posting Date";
                ClosedDoc."Bill Gr./Pmt. Order No." := '';
                ClosedDoc."Remaining Amount" := 0;
                ClosedDoc."Remaining Amt. (LCY)" := 0;
                ClosedDoc."Amount for Collection" := 0;
                ClosedDoc."Amt. for Collection (LCY)" := 0;
                ClosedDoc.INSERT;
                CarteraDimMgt.MoveDocToClosedDoc(Doc);
                Doc.DELETE;
                "Document Situation" := "Document Situation"::"Closed Documents";
                "Document Status" := "Document Status"::Honored;
                IF "Document Type" <> "Document Type"::Invoice THEN
                  MODIFY;
              END;
            END;
          "Document Situation"::"Posted BG/PO":
            BEGIN
              PostedDoc.GET(PostedDoc.Type::Payable,"Entry No.");
              PostedDoc."Remaining Amount" := -"Remaining Amount";
              PostedDoc."Remaining Amt. (LCY)" := -"Remaining Amt. (LCY)";
              CollDocAmountLCY := CollDocAmountLCY + AppliedAmountLCY;
              UpdatePayableCurrFact(PostedDoc, AppliedAmountLCY, DocAmountLCY, CollDocAmountLCY);
              IF NOT Open THEN BEGIN
                IF PostedDoc.Status = ClosedDoc.Status::Rejected THEN
                  PostedDoc.Redrawn := TRUE;
                PostedDoc.Status := PostedDoc.Status::Honored;
                PostedDoc."Honored/Rejtd. at Date" := GenJnlLine."Posting Date";
                PostedDoc."Remaining Amount" := 0;
                PostedDoc."Remaining Amt. (LCY)" := 0;
                "Document Status" := "Document Status"::Honored;
                MODIFY;
              END;
              PostedDoc.MODIFY;
            END;
          "Document Situation"::"Closed BG/PO":
            BEGIN
              ClosedDoc.GET(ClosedDoc.Type::Payable,"Entry No.");
              ClosedDoc.TESTFIELD(Status,ClosedDoc.Status::Rejected);
              ClosedDoc."Remaining Amount" := "Remaining Amount";
              ClosedDoc."Remaining Amt. (LCY)" := "Remaining Amt. (LCY)";
              IF NOT Open THEN BEGIN
                IF ClosedDoc.Status = PostedDoc.Status::Rejected THEN
                  ClosedDoc.Redrawn := TRUE;
                ClosedDoc.Status := ClosedDoc.Status::Honored;
                ClosedDoc."Remaining Amount" := 0;
                ClosedDoc."Remaining Amt. (LCY)" := 0;
                ClosedDoc."Honored/Rejtd. at Date" := GenJnlLine."Posting Date";
              END;
              ClosedDoc.MODIFY;
            END;
        END;
      END;
    END;

    PROCEDURE CheckAppliedReceivableDoc@4(VAR OldCustLedgEntry@1100000 : Record 21;SystemCreatedEntry@1100001 : Boolean);
    BEGIN
      IF (OldCustLedgEntry."Document Situation" = OldCustLedgEntry."Document Situation"::"Posted BG/PO")
        AND NOT SystemCreatedEntry
      THEN
        ERROR(
          Text1100006,
          OldCustLedgEntry."Document Type",OldCustLedgEntry."Document No.",
          OldCustLedgEntry."Bill No.");
    END;

    PROCEDURE CheckAppliedPayableDoc@15(VAR OldVendLedgEntry@1100000 : Record 25;SystemCreatedEntry@1100001 : Boolean);
    BEGIN
      IF (OldVendLedgEntry."Document Situation" = OldVendLedgEntry."Document Situation"::"Posted BG/PO")
        AND NOT SystemCreatedEntry
      THEN
        ERROR(
          Text1100007,
          OldVendLedgEntry."Document Type",OldVendLedgEntry."Document No.",
          OldVendLedgEntry."Bill No.");
    END;

    PROCEDURE DocInfoToCustEntry@2(VAR GenJnlLine@1100000 : Record 81;VAR CustLedgEntry@1100001 : Record 21;VAR CVLedgEntryBuf@1100002 : Record 382;VAR DtldCVLedgEntryBuf@1100003 : Record 383);
    BEGIN
      CustLedgEntry."Bill No." := GenJnlLine."Bill No.";
      CustLedgEntry."Applies-to Bill No." := GenJnlLine."Applies-to Bill No.";
      CVLedgEntryBuf."Bill No." := GenJnlLine."Bill No.";
      CVLedgEntryBuf."Applies-to Bill No." := GenJnlLine."Applies-to Bill No.";
      DtldCVLedgEntryBuf."Bill No." := GenJnlLine."Bill No.";
      DtldCVLedgEntryBuf."Applies-to Bill No." :=  GenJnlLine."Applies-to Bill No.";
    END;

    PROCEDURE DocInfoToVendEntry@3(VAR GenJnlLine@1100000 : Record 81;VAR VendLedgEntry@1100001 : Record 25;VAR CVLedgEntryBuf@1100002 : Record 382;VAR DtldCVLedgEntryBuf@1100003 : Record 383);
    BEGIN
      VendLedgEntry."Bill No." := GenJnlLine."Bill No.";
      VendLedgEntry."Applies-to Bill No." := GenJnlLine."Applies-to Bill No.";
      CVLedgEntryBuf."Bill No." := GenJnlLine."Bill No.";
      CVLedgEntryBuf."Applies-to Bill No." := GenJnlLine."Applies-to Bill No.";
      DtldCVLedgEntryBuf."Bill No." := GenJnlLine."Bill No.";
      DtldCVLedgEntryBuf."Applies-to Bill No." :=  GenJnlLine."Applies-to Bill No.";
    END;

    PROCEDURE DocInfoToBankEntry@6(VAR GenJnlLine@1100000 : Record 81;VAR BankAccLedgEntry@1100001 : Record 271);
    BEGIN
      BankAccLedgEntry."Bill No." := GenJnlLine."Bill No.";
    END;

    PROCEDURE DocInfoToGLEntry@7(VAR GenJnlLine@1100000 : Record 81;VAR GLEntry@1100001 : Record 17);
    BEGIN
      GLEntry."Bill No." := GenJnlLine."Bill No.";
    END;

    PROCEDURE CheckPostingDate@5(CheckDate@1100000 : Date);
    VAR
      GLSetup@1100001 : Record 98;
      UserSetup@1100002 : Record 91;
      AllowPostingTo@1100003 : Date;
      AllowPostingFrom@1100004 : Date;
    BEGIN
      GLSetup.GET;
      IF USERID <> '' THEN
        IF UserSetup.GET(USERID) THEN BEGIN
          AllowPostingFrom := UserSetup."Allow Posting From";
          AllowPostingTo := UserSetup."Allow Posting To";
        END;
        IF (AllowPostingFrom = 0D) AND (AllowPostingTo = 0D) THEN BEGIN
          AllowPostingFrom := GLSetup."Allow Posting From";
          AllowPostingTo := GLSetup."Allow Posting To";
        END;
        IF AllowPostingTo = 0D THEN
          AllowPostingTo := 31129999D;
        IF (CheckDate < AllowPostingFrom) OR (CheckDate > AllowPostingTo) THEN
          ERROR(Text1100008,
                CheckDate);
    END;

    PROCEDURE CloseBillGroupIfEmpty@8(PostedBillGr@1100000 : Record 7000006;PostingDate@1100001 : Date);
    VAR
      PostedDoc@1100002 : Record 7000003;
      ClosedDoc@1100003 : Record 7000004;
      CustLedgEntry@1100004 : Record 21;
      ClosedBillGr@1100005 : Record 7000007;
      CarteraDimMgt@1100006 : Codeunit 7000011;
    BEGIN
      WITH PostedDoc DO BEGIN
        RESET;
        SETCURRENTKEY("Bill Gr./Pmt. Order No.",Status);
        SETRANGE("Bill Gr./Pmt. Order No.",PostedBillGr."No.");
        SETRANGE(Type,Type::Receivable);
        SETRANGE(Status,Status::Open);
        IF NOT FIND('-') THEN BEGIN
          SETRANGE(Status);
          FIND('-');
          REPEAT
            ClosedDoc.TRANSFERFIELDS(PostedDoc);
            ClosedDoc.INSERT;
            CustLedgEntry.GET(ClosedDoc."Entry No.");
            CustLedgEntry."Document Situation" := CustLedgEntry."Document Situation"::"Closed BG/PO";
            CustLedgEntry.MODIFY;
            CarteraDimMgt.MovePostedDocToClosedDoc(PostedDoc);
          UNTIL PostedDoc.NEXT = 0;
          PostedDoc.DELETEALL;
          ClosedBillGr.TRANSFERFIELDS(PostedBillGr);
          ClosedBillGr."Closing Date" := PostingDate;
          ClosedBillGr.INSERT;
          PostedBillGr.DELETE;
        END;
      END;
    END;

    PROCEDURE ClosePmtOrdIfEmpty@11(PostedPmtOrd@1100000 : Record 7000021;PostingDate@1100001 : Date);
    VAR
      PostedDoc@1100002 : Record 7000003;
      ClosedDoc@1100003 : Record 7000004;
      VendLedgEntry@1100004 : Record 25;
      ClosedPmtOrd@1100005 : Record 7000022;
      CarteraDimMgt@1100006 : Codeunit 7000011;
    BEGIN
      WITH PostedDoc DO BEGIN
        RESET;
        SETCURRENTKEY("Bill Gr./Pmt. Order No.",Status);
        SETRANGE("Bill Gr./Pmt. Order No.",PostedPmtOrd."No.");
        SETRANGE(Type,Type::Payable);
        SETRANGE(Status,Status::Open);
        IF NOT FIND('-') THEN BEGIN
          SETRANGE(Status);
          FIND('-');
          REPEAT
            ClosedDoc.TRANSFERFIELDS(PostedDoc);
            ClosedDoc.INSERT;
            VendLedgEntry.GET(ClosedDoc."Entry No.");
            VendLedgEntry."Document Situation" := VendLedgEntry."Document Situation"::"Closed BG/PO";
            VendLedgEntry.MODIFY;
            CarteraDimMgt.MovePostedDocToClosedDoc(PostedDoc);
          UNTIL PostedDoc.NEXT = 0;
          PostedDoc.DELETEALL;
          ClosedPmtOrd.TRANSFERFIELDS(PostedPmtOrd);
          ClosedPmtOrd."Closing Date" := PostingDate;
          ClosedPmtOrd.INSERT;
          PostedPmtOrd.DELETE;
        END;
      END;
    END;

    PROCEDURE CheckDocInfo@9(VAR GenJnlLine@1100000 : Record 81;VAR ErrorCounter@1100001 : Integer;VAR ErrorText@1100002 : ARRAY [50] OF Text[250]);
    VAR
      Doc@1100003 : Record 7000002;
      PaymentMethod@1100004 : Record 289;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF ("Document Type" = "Document Type"::Bill) AND
           (Amount <> 0)
        THEN BEGIN
          IF "Bill No." = '' THEN
            AddError(
              STRSUBSTNO(Text1100009,FIELDCAPTION("Bill No.")),
              ErrorCounter,
              ErrorText);
          IF "Due Date" = 0D THEN
            AddError(
              STRSUBSTNO(Text1100009,FIELDCAPTION("Due Date")),
              ErrorCounter,
              ErrorText);
          IF "Payment Method Code" = '' THEN
            AddError(
              STRSUBSTNO(Text1100009,FIELDCAPTION("Payment Method Code")),
              ErrorCounter,
              ErrorText);
          PaymentMethod.GET("Payment Method Code");
          IF NOT PaymentMethod."Create Bills" THEN
            AddError(
              STRSUBSTNO(Text1100010,FIELDCAPTION("Payment Method Code")),
              ErrorCounter,
              ErrorText);
          IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) THEN
            AddError(
              Text1100001,
              ErrorCounter,
              ErrorText);
        END;
        IF ("Account Type" = "Account Type"::Customer) AND
           ("Applies-to Doc. Type" = "Applies-to Doc. Type"::Bill) AND
           NOT "System-Created Entry" THEN
        BEGIN
          CLEAR(Doc);
          Doc.SETCURRENTKEY(Type,"Document No.");
          Doc.SETRANGE(Type,Doc.Type::Receivable);
          Doc.SETRANGE("Document No.","Applies-to Doc. No.");
          Doc.SETRANGE("No.","Applies-to Bill No.");
          IF Doc.FIND('-') AND (Doc."Bill Gr./Pmt. Order No." <> '') THEN
            AddError(
              Text1100011,
              ErrorCounter,
              ErrorText);
        END;
      END;
    END;

    LOCAL PROCEDURE AddError@10(Text@1100000 : Text[250];VAR ErrorCounter@1100001 : Integer;VAR ErrorText@1100002 : ARRAY [50] OF Text[250]);
    BEGIN
      ErrorCounter := ErrorCounter + 1;
      ErrorText[ErrorCounter] := Text;
    END;

    PROCEDURE FindDisctdAmt@12(DocAmount@1100000 : Decimal;CustomerNo@1100001 : Code[20];BankAccCode@1100002 : Code[10]) : Decimal;
    VAR
      CustRating@1100003 : Record 7000023;
      BankAcc@1100004 : Record 270;
    BEGIN
      BankAcc.GET(BankAccCode);
      BankAcc.TESTFIELD(BankAcc."Customer Ratings Code");
      CustRating.GET(BankAcc."Customer Ratings Code",BankAcc."Currency Code",CustomerNo);
      CustRating.TESTFIELD("Risk Percentage");
      EXIT(DocAmount * CustRating."Risk Percentage" /100);
    END;

    PROCEDURE GetRemainingDisctdAmt@45(DocAmount@1100000 : Decimal;CustomerNo@1100001 : Code[20];GenJnlLine@1100002 : Record 81) : Decimal;
    VAR
      CustRating@1100003 : Record 7000023;
      BankAcc@1100004 : Record 270;
      PostedBillGr@1100005 : Record 7000006;
      GLSetup@1100006 : Record 98;
    BEGIN
      WITH GenJnlLine DO BEGIN
        PostedBillGr.GET("Document No.");
        BankAcc.GET(PostedBillGr."Bank Account No.");
        BankAcc.TESTFIELD("Customer Ratings Code");
        GLSetup.GET;
        CustRating.GET(BankAcc."Customer Ratings Code",BankAcc."Currency Code",CustomerNo);
        CustRating.TESTFIELD("Risk Percentage");
        EXIT(
          ROUND(
            DocAmount - DocAmount * CustRating."Risk Percentage" /100,
            GLSetup."Amount Rounding Precision"));
      END;
    END;

    LOCAL PROCEDURE Code@17(VAR GenJnlLine@1100000 : Record 81;VAR PostOk@1100001 : Boolean;Print@1100002 : Boolean);
    VAR
      GenJnlTemplate@1100003 : Record 80;
      GenJnlPostBatch@1100004 : Codeunit 13;
      TempJnlBatchName@1100005 : Code[10];
      GLReg@1100006 : Record 45;
    BEGIN
      WITH GenJnlLine DO BEGIN
        GenJnlTemplate.GET("Journal Template Name");
        GenJnlTemplate.TESTFIELD("Force Posting Report",FALSE);
        IF GenJnlTemplate.Recurring AND (GETFILTER("Posting Date") <> '') THEN
          FIELDERROR("Posting Date",Text1100012);

        IF Print THEN BEGIN
          IF NOT CONFIRM(Text1100013,FALSE) THEN
            EXIT;
        END ELSE BEGIN
          IF NOT CONFIRM(Text1100014,FALSE) THEN
            EXIT;
        END;

        TempJnlBatchName := "Journal Batch Name";

        IF Print THEN BEGIN
          GLReg.LOCKTABLE;
          IF GLReg.FIND('+') THEN;
        END;


        GenJnlPostBatch.RUN(GenJnlLine);
        CLEAR(GenJnlPostBatch);

        IF Print THEN BEGIN
         GLReg.SETRANGE("No.",GLReg."No." + 1,"Line No.");
          IF GLReg.GET("Line No.") THEN
            REPORT.RUN(GenJnlTemplate."Posting Report ID",FALSE,FALSE,GLReg);
        END;

        IF "Line No." = 0 THEN
          MESSAGE(Text1100015)
        ELSE
          IF TempJnlBatchName = "Journal Batch Name" THEN BEGIN
            MESSAGE(Text1100016);
            PostOk := TRUE;
          END ELSE
            MESSAGE(
              Text1100017,
              "Journal Batch Name");

        IF NOT FIND('=><') OR (TempJnlBatchName <> "Journal Batch Name") THEN BEGIN
          RESET;
          FILTERGROUP(2);
          SETRANGE("Journal Template Name","Journal Template Name");
          SETRANGE("Journal Batch Name","Journal Batch Name");
          FILTERGROUP(0);
          "Line No." := 1;
        END;
      END;
    END;

    PROCEDURE PostLines@16(VAR GenJnlLine2@1100000 : Record 81;VAR PostOk@1100001 : Boolean;Print@1100002 : Boolean);
    VAR
      GenJnlLine@1100003 : Record 81;
    BEGIN
      GenJnlLine.COPY(GenJnlLine2);
      Code(GenJnlLine,PostOk,Print);
      GenJnlLine2.COPY(GenJnlLine);
    END;

    PROCEDURE InsertDtldCustLedgEntry@1100000(CustLedgEntry2@1100000 : Record 21;Amount2@1100003 : Decimal;Amount2LCY@1100004 : Decimal;EntryType@1100005 : ' ,Initial Entry,Application,Unrealized Loss,Unrealized Gain,Realized Loss,Realized Gain,Payment Discount,Payment Discount (VAT Excl.),Payment Discount (VAT Adjustment),Appln. Rounding,Correction of Remaining Amount,,,,,,,,,Settlement,Rejection,Redrawal,Expenses';PostingDate@1000 : Date);
    VAR
      DtldCVLedgEntryBuf@1100001 : Record 379;
      GenJnlPostLine@1100100 : Codeunit 12;
      NextDtldBufferEntryNo@1100002 : Integer;
    BEGIN
      CLEAR(DtldCVLedgEntryBuf);
      DtldCVLedgEntryBuf.RESET;
      IF DtldCVLedgEntryBuf.FIND('+') THEN
        NextDtldBufferEntryNo := DtldCVLedgEntryBuf."Entry No." + 1
      ELSE
        NextDtldBufferEntryNo := 1;

      CustLedgEntry2.CALCFIELDS(Amount);
      DtldCVLedgEntryBuf.INIT;
      DtldCVLedgEntryBuf."Entry No." := NextDtldBufferEntryNo;
      DtldCVLedgEntryBuf."Cust. Ledger Entry No." := CustLedgEntry2."Entry No.";
      DtldCVLedgEntryBuf."Entry Type" := EntryType;
      CASE TRUE OF
        EntryType = EntryType::Rejection:
          DtldCVLedgEntryBuf."Excluded from calculation" := TRUE;
        EntryType = EntryType::Redrawal:
          DtldCVLedgEntryBuf."Excluded from calculation" := TRUE;
      END;
      DtldCVLedgEntryBuf."Posting Date" := PostingDate;
      DtldCVLedgEntryBuf."Initial Entry Due Date" := CustLedgEntry2."Due Date";
      DtldCVLedgEntryBuf."Document Type" := CustLedgEntry2."Document Type";
      DtldCVLedgEntryBuf."Document No." := CustLedgEntry2."Document No.";
      DtldCVLedgEntryBuf.Amount := Amount2;
      DtldCVLedgEntryBuf."Amount (LCY)" := Amount2LCY;
      DtldCVLedgEntryBuf."Customer No." := CustLedgEntry2."Customer No.";
      DtldCVLedgEntryBuf."Currency Code" := CustLedgEntry2."Currency Code";
      DtldCVLedgEntryBuf."User ID" := USERID;
      DtldCVLedgEntryBuf."Initial Entry Global Dim. 1" := CustLedgEntry2."Global Dimension 1 Code";
      DtldCVLedgEntryBuf."Initial Entry Global Dim. 2" := CustLedgEntry2."Global Dimension 2 Code";
      DtldCVLedgEntryBuf."Bill No." := CustLedgEntry2."Bill No.";
      DtldCVLedgEntryBuf.INSERT(TRUE);
    END;

    PROCEDURE InsertDtldVendLedgEntry@1100001(VendLedgEntry2@1100000 : Record 25;Amount2@1100003 : Decimal;Amount2LCY@1100004 : Decimal;EntryType@1100005 : ' ,Initial Entry,Application,Unrealized Loss,Unrealized Gain,Realized Loss,Realized Gain,Payment Discount,Payment Discount (VAT Excl.),Payment Discount (VAT Adjustment),Appln. Rounding,Correction of Remaining Amount,,,,,,,,,Settlement,Rejection,Redrawal,Expenses';PostingDate@1000 : Date);
    VAR
      DtldCVLedgEntryBuf@1100001 : Record 380;
      GenJnlPostLine@1100100 : Codeunit 12;
      NextDtldBufferEntryNo@1100002 : Integer;
    BEGIN
      CLEAR(DtldCVLedgEntryBuf);
      DtldCVLedgEntryBuf.RESET;
      IF DtldCVLedgEntryBuf.FIND('+') THEN
        NextDtldBufferEntryNo := DtldCVLedgEntryBuf."Entry No." + 1
      ELSE
        NextDtldBufferEntryNo := 1;

      VendLedgEntry2.CALCFIELDS(Amount);
      DtldCVLedgEntryBuf.INIT;
      DtldCVLedgEntryBuf."Entry No." := NextDtldBufferEntryNo;
      DtldCVLedgEntryBuf."Vendor Ledger Entry No." := VendLedgEntry2."Entry No.";
      DtldCVLedgEntryBuf."Entry Type" := EntryType;
      CASE TRUE OF
        EntryType = EntryType::Rejection:
          DtldCVLedgEntryBuf."Excluded from calculation" := TRUE;
        EntryType = EntryType::Redrawal:
          DtldCVLedgEntryBuf."Excluded from calculation" := TRUE;
      END;
      DtldCVLedgEntryBuf."Posting Date" := PostingDate;
      DtldCVLedgEntryBuf."Initial Entry Due Date" := VendLedgEntry2."Due Date";
      DtldCVLedgEntryBuf."Document Type" := VendLedgEntry2."Document Type";
      DtldCVLedgEntryBuf."Document No." := VendLedgEntry2."Document No.";
      DtldCVLedgEntryBuf.Amount := Amount2;
      DtldCVLedgEntryBuf."Amount (LCY)" := Amount2LCY;
      DtldCVLedgEntryBuf."Vendor No." := VendLedgEntry2."Vendor No.";
      DtldCVLedgEntryBuf."Currency Code" := VendLedgEntry2."Currency Code";
      DtldCVLedgEntryBuf."User ID" := USERID;
      DtldCVLedgEntryBuf."Initial Entry Global Dim. 1" := VendLedgEntry2."Global Dimension 1 Code";
      DtldCVLedgEntryBuf."Initial Entry Global Dim. 2" := VendLedgEntry2."Global Dimension 2 Code";
      DtldCVLedgEntryBuf."Bill No." := VendLedgEntry2."Bill No.";
      DtldCVLedgEntryBuf.INSERT(TRUE);
    END;

    PROCEDURE GetFCYAppliedAmt@1100002(AppliedAmountLCY@1100000 : Decimal;CurrCode@1100003 : Code[20];PostingDate@1100005 : Date) : Decimal;
    VAR
      CurrExchRate@1100001 : Record 330;
      GLSetup@1100004 : Record 98;
    BEGIN
      IF CurrCode <> '' THEN BEGIN
        GLSetup.GET;
        EXIT(
          ROUND(
            CurrExchRate.ExchangeAmtLCYToFCY(
              PostingDate,
              CurrCode,
              AppliedAmountLCY,
              CurrExchRate.ExchangeRate(PostingDate,CurrCode)),
            GLSetup."Amount Rounding Precision"));
      END ELSE
        EXIT(AppliedAmountLCY);
    END;

    PROCEDURE UpdateReceivableCurrFact@18(PostedDoc@1000 : Record 7000003;AppliedAmountLCY@1003 : Decimal;VAR DocAmountLCY@1017 : Decimal;VAR RejDocAmountLCY@1016 : Decimal;VAR DiscDocAmountLCY@1015 : Decimal;VAR CollDocAmountLCY@1014 : Decimal;VAR DiscRiskFactAmountLCY@1013 : Decimal;VAR DiscUnriskFactAmountLCY@1012 : Decimal;VAR CollFactAmountLCY@1011 : Decimal);
    VAR
      SalesInvHeader@1170000003 : Record 112;
      PostBillGroup@1170000002 : Record 7000006;
      CurrFact@1170000001 : Decimal;
      CurrExchRate@1170000000 : Record 330;
    BEGIN
      IF SalesInvHeader.GET(PostedDoc."Document No.") THEN BEGIN
        IF SalesInvHeader."Currency Factor" <> 0 THEN BEGIN
          IF PostBillGroup.GET(PostedDoc."Bill Gr./Pmt. Order No.") THEN;
          CurrFact := CurrExchRate.ExchangeRate(PostBillGroup."Posting Date", PostedDoc."Currency Code");
          IF CurrFact <> SalesInvHeader."Currency Factor" THEN BEGIN
            IF PostedDoc.Factoring = PostedDoc.Factoring::" " THEN BEGIN
              IF PostedDoc.Status = PostedDoc.Status::Rejected THEN
                DocAmountLCY := GetCorrectAmounts(RejDocAmountLCY, AppliedAmountLCY, CurrFact, SalesInvHeader."Currency Factor",
      PostedDoc)
              ELSE
                IF PostedDoc."Dealing Type" = PostedDoc."Dealing Type"::Discount THEN
                  DocAmountLCY := GetCorrectAmounts(DiscDocAmountLCY, AppliedAmountLCY, CurrFact, SalesInvHeader."Currency Factor"
                                                    ,PostedDoc)
                ELSE
                  DocAmountLCY := GetCorrectAmounts(CollDocAmountLCY, AppliedAmountLCY, CurrFact, SalesInvHeader."Currency Factor"
                                                    ,PostedDoc);
            END ELSE BEGIN
              CASE TRUE OF
                PostedDoc."Dealing Type" = PostedDoc."Dealing Type"::Discount:
                  BEGIN
                    IF PostBillGroup.GET(PostedDoc."Bill Gr./Pmt. Order No.") THEN;
                    IF PostBillGroup.Factoring = PostBillGroup.Factoring::Risked THEN
                      DocAmountLCY := GetCorrectAmounts(DiscRiskFactAmountLCY,AppliedAmountLCY,CurrFact,SalesInvHeader."Currency Factor"
                                                        ,PostedDoc)
                    ELSE
                      DocAmountLCY := GetCorrectAmounts(DiscUnriskFactAmountLCY,AppliedAmountLCY,CurrFact,
                                                         SalesInvHeader."Currency Factor",PostedDoc)
                  END;
                ELSE
                    DocAmountLCY := GetCorrectAmounts(CollFactAmountLCY,AppliedAmountLCY,CurrFact,SalesInvHeader."Currency Factor"
                                                      ,PostedDoc)
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE UpdatePayableCurrFact@19(PostedDoc@1000 : Record 7000003;AppliedAmountLCY@1003 : Decimal;VAR DocAmountLCY@1001 : Decimal;VAR CollDocAmountLCY@1002 : Decimal);
    VAR
      PurchInvHeader@1005 : Record 122;
      PostPaymOrd@1008 : Record 7000021;
      CurrExchRate@1006 : Record 330;
      CurrFact@1007 : Decimal;
    BEGIN
      IF PurchInvHeader.GET(PostedDoc."Document No.") THEN BEGIN
        IF PurchInvHeader."Currency Factor" <> 0 THEN BEGIN
          IF PostPaymOrd.GET(PostedDoc."Bill Gr./Pmt. Order No.") THEN;
          CurrFact := CurrExchRate.ExchangeRate(PostPaymOrd."Posting Date", PostedDoc."Currency Code");
          IF CurrFact <> PurchInvHeader."Currency Factor" THEN
            DocAmountLCY := GetCorrectAmounts(CollDocAmountLCY,AppliedAmountLCY,CurrFact,PurchInvHeader."Currency Factor",PostedDoc);
        END;
      END;
    END;

    PROCEDURE GetCorrectAmounts@20(VAR Amount@1000 : Decimal;AppliedAmountLCY@1001 : Decimal;CurrFact@1002 : Decimal;InvoiceCurrFact@1004 : Decimal;PostedDoc@1000001 : Record 7000003) : Decimal;
    VAR
      AuxAmount@1003 : Decimal;
      AuxAmount2@1000000 : Decimal;
    BEGIN
      AuxAmount := Amount;
      Amount := ROUND(ROUND(AppliedAmountLCY * InvoiceCurrFact) / CurrFact);
      AuxAmount2 := AuxAmount - Amount;

      IF (PostedDoc.Adjusted = TRUE) AND (PostedDoc.ReAdjusted = TRUE) THEN BEGIN
        Amount := Amount - PostedDoc."Adjusted Amount";
        EXIT(0);
      END;
      IF PostedDoc.Adjusted AND NOT PostedDoc.ReAdjusted THEN
        EXIT(0);
      IF NOT PostedDoc.Adjusted AND PostedDoc.ReAdjusted THEN
        Amount := Amount - PostedDoc."Adjusted Amount";

      EXIT(AuxAmount2);
    END;

    PROCEDURE UpdateUnAppliedReceivableDoc@22(VAR CustLedgEntry@1100000 : Record 21;VAR GenJnlLine@1100001 : Record 81);
    VAR
      Doc@1100010 : Record 7000002;
      PostedDoc@1100011 : Record 7000003;
      ClosedDoc@1100012 : Record 7000004;
      Doc2@1100013 : Record 7000002;
      PostedDoc2@1100014 : Record 7000003;
      ClosedDoc2@1100015 : Record 7000004;
      PostedBillGr@1100016 : Record 7000006;
      CarteraDimMgt@1100018 : Codeunit 7000011;
      DocLock@1100017 : Boolean;
      Text1100100@1001 : TextConst 'ENU=%1 cannot be applied, since it is included in a bill group.;ESP=%1 no se puede liquidar, ya que est  incluido en una remesa.';
      Text1100101@1000 : TextConst 'ENU=" Remove it from its bill group and try again.";ESP=" B¢rrelo de la remesa e int‚ntelo de nuevo."';
      Text1100102@1000000 : TextConst 'ENU=%1 cannot be unapplied, since it is included in a bill group.;ESP=El movimiento %1 est  incluido en una remesa y no se puede desliquidar.';
      InBillGroup@1000001 : Boolean;
      DtldCustLedgEntry@1000002 : Record 379;
      IsRejection@1000003 : Boolean;
    BEGIN
      WITH CustLedgEntry DO BEGIN
        InBillGroup := FALSE;
        IF Doc.GET(Doc.Type::Receivable,CustLedgEntry."Entry No.") THEN
          IF Doc."Bill Gr./Pmt. Order No." <> '' THEN
            InBillGroup := TRUE;
        IF PostedDoc.GET(PostedDoc.Type::Receivable,CustLedgEntry."Entry No.") THEN
          IF PostedDoc."Bill Gr./Pmt. Order No." <> '' THEN
            InBillGroup := TRUE;
        IF ClosedDoc.GET(ClosedDoc.Type::Receivable,CustLedgEntry."Entry No.") THEN
          IF ClosedDoc."Bill Gr./Pmt. Order No." <> '' THEN
            InBillGroup := TRUE;
        IF InBillGroup THEN
           ERROR(
            Text1100102 +
            Text1100101,
            CustLedgEntry.Description);
        CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
        IF NOT DocLock THEN BEGIN
          DocLock := TRUE;
          Doc.LOCKTABLE;
          ClosedDoc.LOCKTABLE;
          IF RECORDLEVELLOCKING THEN BEGIN
            IF Doc2.FIND('+') THEN;
            IF ClosedDoc2.FIND('+') THEN;
          END;
        END;
        IF "Remaining Amount" = 0 THEN
          "Remaining Amt. (LCY)" := 0;
        CASE "Document Situation" OF
          "Document Situation"::Cartera:
            BEGIN
              Doc.GET(Doc.Type::Receivable,"Entry No.");
              Doc."Remaining Amount" :=
                Doc."Remaining Amount" + GetFCYAppliedAmt(CustLedgEntry."Remaining Amt. (LCY)" - Doc."Remaining Amt. (LCY)",
                Doc."Currency Code",GenJnlLine."Posting Date");
              Doc."Remaining Amt. (LCY)" := Doc."Remaining Amt. (LCY)" + (CustLedgEntry."Remaining Amt. (LCY)" -
                Doc."Remaining Amt. (LCY)");
              Doc.ResetNoPrinted;
              IF Open THEN
                Doc.MODIFY
            END;
          "Document Situation"::"Closed Documents":
            BEGIN
              ClosedDoc.GET(ClosedDoc.Type::Receivable,"Entry No.");
              IsRejection := FALSE;
              DtldCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.","Posting Date");
              DtldCustLedgEntry.SETRANGE(DtldCustLedgEntry."Cust. Ledger Entry No.","Entry No.");
              IF DtldCustLedgEntry.FIND('-') THEN
                REPEAT
                  IF DtldCustLedgEntry."Entry Type" = DtldCustLedgEntry."Entry Type"::Rejection THEN
                    IsRejection := TRUE;
                UNTIL DtldCustLedgEntry.NEXT = 0;

              IF Open THEN BEGIN
                IF (IsRejection = TRUE) AND ("Remaining Amount" <> 0) THEN BEGIN
                  ClosedDoc."Remaining Amount" := ClosedDoc."Remaining Amount" + ("Remaining Amount" - ClosedDoc."Remaining Amount");
                  ClosedDoc."Remaining Amt. (LCY)" := ClosedDoc."Remaining Amt. (LCY)" +
                                                ("Remaining Amt. (LCY)" - ClosedDoc."Remaining Amt. (LCY)");
                  ClosedDoc.Status := ClosedDoc.Status::Rejected;
                  ClosedDoc.MODIFY;
                  "Document Situation" := "Document Situation"::"Closed Documents";
                  "Document Status" := "Document Status"::Rejected;
                  MODIFY;
                END ELSE BEGIN
                  Doc.TRANSFERFIELDS(ClosedDoc);
                  Doc.Type := Doc.Type::Receivable;
                  Doc."Remaining Amount" := Doc."Remaining Amount" + "Remaining Amount";
                  Doc."Remaining Amt. (LCY)" := Doc."Remaining Amt. (LCY)" + "Remaining Amt. (LCY)";
                  Doc.INSERT;
                  CarteraDimMgt.MoveClosedDocToDoc(ClosedDoc);
                  ClosedDoc.DELETE;
                  "Document Situation" := "Document Situation"::Cartera;
                  "Document Status" := "Document Status"::Open;
                  MODIFY;
                END;
              END;
              MODIFY;
            END;
        END;
      END;
    END;

    PROCEDURE UpdateUnAppliedPayableDoc@21(VAR VendLedgEntry@1100000 : Record 25;VAR GenJnlLine@1100001 : Record 81;VAR DocLock@1000 : Boolean);
    VAR
      Doc@1100006 : Record 7000002;
      PostedDoc@1100007 : Record 7000003;
      ClosedDoc@1100008 : Record 7000004;
      Doc2@1100009 : Record 7000002;
      PostedDoc2@1100010 : Record 7000003;
      ClosedDoc2@1100011 : Record 7000004;
      CarteraDimMgt@1100012 : Codeunit 7000011;
      Text1100100@1002 : TextConst 'ENU=%1 cannot be applied, since it is included in a payment order.;ESP=%1 no se puede liquidar, ya que est  incluido en una orden pago.';
      Text1100101@1001 : TextConst 'ENU=" Remove it from its payment order and try again.";ESP=" B¢rrelo de la orden pago e int‚ntelo de nuevo."';
      InBillGroup@1000000 : Boolean;
      Text1100102@1000001 : TextConst 'ENU=%1 cannot be unapplied, since it is included in a payment order.;ESP=El movimiento %1 est  incluido en una orden de pago y no se puede desliquidar.';
    BEGIN
      WITH VendLedgEntry DO BEGIN
        InBillGroup := FALSE;
        IF Doc.GET(Doc.Type::Payable,VendLedgEntry."Entry No.") THEN
          IF Doc."Bill Gr./Pmt. Order No." <> '' THEN
            InBillGroup := TRUE;
        IF PostedDoc.GET(PostedDoc.Type::Payable,VendLedgEntry."Entry No.") THEN
          IF PostedDoc."Bill Gr./Pmt. Order No." <> '' THEN
            InBillGroup := TRUE;
        IF ClosedDoc.GET(ClosedDoc.Type::Payable,VendLedgEntry."Entry No.") THEN
          IF ClosedDoc."Bill Gr./Pmt. Order No." <> '' THEN
            InBillGroup := TRUE;
        IF InBillGroup THEN
           ERROR(
            Text1100102 +
            Text1100101,
            VendLedgEntry.Description);
        CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
        IF NOT DocLock THEN BEGIN
          DocLock := TRUE;
          Doc.LOCKTABLE;
          IF RECORDLEVELLOCKING THEN BEGIN
            IF Doc2.FIND('+') THEN;
            IF ClosedDoc2.FIND('+') THEN;
          END;
          ClosedDoc.LOCKTABLE;
        END;
        IF "Remaining Amount" = 0 THEN
          "Remaining Amt. (LCY)" := 0;
        CASE "Document Situation" OF
          "Document Situation"::Cartera:
            BEGIN
              Doc.GET(Doc.Type::Payable,"Entry No.");
              // Doc."Remaining Amt. (LCY)" :=
              //   GetLCYAppliedAmt(Doc."Remaining Amount",Doc."Currency Code",VendLedgEntry."Posting Date"); // PS21732
              //  Doc."Remaining Amount" - GetFCYAppliedAmt(VendLedgEntry."Remaining Amount"+ Doc."Remaining Amount",
              //      Doc."Currency Code",GenJnlLine."Posting Date");
      // Doc."Remaining Amt. (LCY)" := Doc."Remaining Amt. (LCY)" - (VendLedgEntry."Remaining Amt. (LCY)" + Doc."Remaining Amount")
              // ;
              Doc."Remaining Amount" :=
                Doc."Remaining Amount" - GetFCYAppliedAmt(VendLedgEntry."Remaining Amt. (LCY)"+ Doc."Remaining Amt. (LCY)",
                    Doc."Currency Code",GenJnlLine."Posting Date");
              Doc."Remaining Amt. (LCY)" := Doc."Remaining Amt. (LCY)" - (VendLedgEntry."Remaining Amt. (LCY)" +
                Doc."Remaining Amt. (LCY)");
              Doc.ResetNoPrinted;
              IF Open THEN
                Doc.MODIFY
            END;
          "Document Situation"::"Closed Documents":
            BEGIN
              ClosedDoc.GET(ClosedDoc.Type::Payable,"Entry No.");
              IF Open THEN BEGIN
                Doc.TRANSFERFIELDS(ClosedDoc);
                Doc.Type := Doc.Type::Payable;
                Doc."Remaining Amount" := Doc."Remaining Amount" - "Remaining Amount";
                Doc."Remaining Amt. (LCY)" := Doc."Remaining Amt. (LCY)" - "Remaining Amt. (LCY)";
                Doc.INSERT;
                CarteraDimMgt.MoveClosedDocToDoc(ClosedDoc);
                ClosedDoc.DELETE;
                "Document Situation" := "Document Situation"::Cartera;
                "Document Status" := "Document Status"::Open;
                MODIFY;
              END;
              MODIFY;
            END;
        END;
      END;
    END;

    PROCEDURE GetLCYAppliedAmt@1100003(AppliedAmountFCY@1100000 : Decimal;CurrCode@1100003 : Code[20];PostingDate@1100005 : Date) : Decimal;
    VAR
      CurrExchRate@1100001 : Record 330;
      GLSetup@1100004 : Record 98;
    BEGIN
      IF CurrCode <> '' THEN BEGIN
        GLSetup.GET;
        EXIT(
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              PostingDate,
              CurrCode,
              AppliedAmountFCY,
              CurrExchRate.ExchangeRate(PostingDate,CurrCode)),
            GLSetup."Amount Rounding Precision"));
      END ELSE
        EXIT(AppliedAmountFCY);
    END;

    BEGIN
    END.
  }
}
