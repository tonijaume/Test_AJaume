OBJECT Codeunit 7010169 Creacion masiva servicio excur
{
  OBJECT-PROPERTIES
  {
    Date=23/09/14;
    Time=19:26:34;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnRun=VAR
            lrHoja@1100217000 : Record 7010168;
            lrExc@1100217002 : Record 7009710;
            lrUser@1100217001 : Record 91;
          BEGIN
            wDialog.OPEN(Text001);
            wDialog.INPUT(1, wFecha);
            IF wFecha = 0D THEN
              EXIT;

            IF NOT CONFIRM(Text002, FALSE, wFecha) THEN
              EXIT;

            lrUser.GET(USERID);
            //-$005lrUser.TESTFIELD("Oficina Excursiones");

            lrHoja.RESET;
            lrHoja.SETFILTER(Producto, '<>%1', '');
            lrHoja.SETRANGE (Fecha   , wFecha);
            IF lrHoja.FINDSET THEN
            BEGIN
              REPEAT
                lrExc.GET(lrHoja.Producto);
                IF NOT lrExc."Transporte organizado agencia" THEN
                  _ProcesarExcursion(lrHoja, lrUser."Oficina Excursiones");
              UNTIL lrHoja.NEXT = 0;
            END;

            MESSAGE(Text003);
          END;

  }
  CODE
  {
    VAR
      wDialog@1100217000 : Dialog;
      Text001@1100217001 : TextConst 'ENU=Create excursion services for day #1########;ESP=Crear servicios de excursion para dia #1########';
      wFecha@1100217002 : Date;
      Text002@1100217003 : TextConst 'ENU=The excursion services without transport for day #1######## will be created;ESP=Se van a crear los servicios de excursion sin transporte propio para dia #1########';
      Text003@1100217004 : TextConst 'ENU=Process completed;ESP=Proceso finalizado';

    LOCAL PROCEDURE _ProcesarExcursion@1100217005(prHoja@1100217000 : Record 7010168;pwOficina@1100217003 : Code[10]);
    VAR
      lrRsv@1100217001 : Record 7010162;
      lrServ@1100217004 : Record 7010163;
      lcFun@1100217002 : Codeunit 7010141;
    BEGIN
      // _ProcesarExcursion

      lrRsv.RESET;
      lrRsv.SETCURRENTKEY(Delegacion, "Fecha Excursion", Producto);
      lrRsv.SETRANGE (Delegacion       , prHoja.Delegacion);
      lrRsv.SETRANGE ("Fecha Excursion", prHoja.Fecha);
      lrRsv.SETRANGE (Producto         , prHoja.Producto);
      lrRsv.SETRANGE ("Turno Excursion", prHoja.Turno); //+$004
      lrRsv.SETRANGE ("N§ Servicio"    , 0);
      lrRsv.SETRANGE (Anulada          , FALSE);
      lrRsv.SETRANGE (Reembolsada      , FALSE);
      lrRsv.SETFILTER("Zona Hotel"     , '<>%1', '');
      //+$005 <
      IF pwOficina <> '' THEN
        lrRsv.SETRANGE (Oficina          , pwOficina);
      //+$005 >
      lrRsv.SETFILTER("N§ Personas"    , '<>%1', 0); //+$001 //+$002
      IF lrRsv.FINDFIRST THEN
      BEGIN
        lrRsv.SETRANGE("N§ Servicio");
        lrRsv.SETRANGE(Anulada);
        lrRsv.SETRANGE(Reembolsada);

        //. Buscamos si ya existe servicio
        lrServ.RESET;
        lrServ.SETRANGE(Fecha    , prHoja.Fecha);
        lrServ.SETRANGE(Excursion, prHoja.Producto);
        lrServ.SETRANGE(Estado   , lrServ.Estado::Generada);
        IF lrServ.FINDFIRST THEN
        BEGIN
          lrRsv.SETRANGE ("N§ Servicio", 0);
          lrRsv.SETRANGE(Anulada       , FALSE); //+$003
          lrRsv.SETRANGE(Reembolsada   , FALSE); //+$003
          lrRsv.FINDSET;
          REPEAT
            lcFun.AsignaReservaServicio(lrRsv, lrServ);
          UNTIL lrRsv.NEXT = 0;
        END
        ELSE
          lcFun.Selecciona_Excursion(lrRsv, TRUE);
      END;
    END;

    BEGIN
    {
      $001 AJS 16072013 Corrijo para que esta funcion no trabaje con reservas que no tienen personas

      $002 AJS 30082013 Sustituyo el campo Personas por N§ Personas

      $003 AJS 28052014 Corrijo error para que no se asignen reservas anuladas/reembolsadas a servicios ya existentes

      $004 AJS 10092014 CNT-OC-14073, Dividir los servicios por turno

      $005 AJS 23092014 Si la oficina esta blanco crear para todas las oficinas
    }
    END.
  }
}
