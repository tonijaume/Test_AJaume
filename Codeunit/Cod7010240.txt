OBJECT Codeunit 7010240 Funciones Validar Circuitos
{
  OBJECT-PROPERTIES
  {
    Date=11/05/15;
    Time=15:50:43;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1103355011 : TextConst 'ENU=Generating IBR Circuit''\;ESP=Generando FPR Circuito...';
      Text001@1103355012 : TextConst 'ENU=Accumulating per supplier (1 out of 3);ESP=Acumulando por proveedor (1 de 3)';
      Text002@1103355013 : TextConst 'ENU=CASHCIRCUIT;ESP=EFECTIVOCIRCUITO';
      Text003@1103355014 : TextConst 'ENU=Generating ledger entries  (2 out of 3);ESP=Generando asientos   (2 de 3)';
      Text004@1103355015 : TextConst 'ENU=Selected remaining ones (3 out of 3);ESP=Marcando pendientes  (3 de 3)';
      Text005@1103355016 : TextConst 'ENU=Database parameters folder does not exist;ESP=No existe el fichero de parametros de la B. D.';
      Text006@1103355017 : TextConst 'ENU=Circuit parameters folder does not exist;ESP=No existe el fichero par metros circuito';
      Text007@1103355018 : TextConst 'ENU=Accounts file for Touroperator %1 does not exist \;ESP=No existe el fichero de Cuentas para el Touroperador %1';
      Text008@1103355019 : TextConst 'ENU=in Local Office %2, neither in generic card;ESP=en la Delegacion %2, ni la ficha generica.';
      Text009@1103355020 : TextConst 'ENU=Circuit;ESP=Circuito';
      Text010@1103355021 : TextConst 'ENU=Ledger entries of circuit in local office;ESP=Asientos de Circuito en delegaci¢n.';
      Text012@1103355023 : TextConst 'ENU=Cost circuit pruchase inv.;ESP=Coste fras. compra circuitos.';
      Text013@1103355024 : TextConst 'ENU=IBR %1 %2, CASH;ESP=FPR %1 %2, EFECTIVO';
      Text014@1103355025 : TextConst 'ENU=IBR %1 %2, supp. %3;ESP=FPR %1 %2, prv. %3';
      Text015@1103355026 : TextConst 'ENU=Cash Circuit;ESP=Efectivo Circuito';
      Text016@1103355027 : TextConst 'ENU=Unable to validate because the circuit %1, order %2 out of %3 is remaining to calculation;ESP=No se puede validar ya que el circuito %1, orden %2 de %3 est  pendiente de c lculo.';
      Text017@1103355028 : TextConst 'ENU=More than one supplier have been detected in the lines to validate;ESP=Se ha detectado m s de un proveedor en las l¡neas a validar.';
      Text018@1103355029 : TextConst 'ENU=There are %1 lines. Unable to validate lines %1-;ESP=Existen lineas %1. No se pueden validar lineas %1.';
      Text019@1103355030 : TextConst 'ENU=Amount of the lines do not coincide with the invoice.;ESP=Los importes de las lineas no coinciden con el de la factura.';
      Text020@1103355031 : TextConst 'ENU=Have indicated a refunded cash different of 0, and receipt amounts;ESP=Ha indicado un efectivo devuelto distinto de 0, y el importe de los comprobantes';
      Text021@1103355032 : TextConst 'ENU=plus the refunded cash amount is higher than the given cash.;ESP=m s el importe del efectivo devuelto es superior al efectivo que se di¢.';
      Text022@1103355033 : TextConst 'ENU=There is more amount justified than given cash,;ESP=Hay m s cantidad justificada que efectivo se di¢ en su momento,';
      Text023@1103355034 : TextConst 'ENU=must refund %1 pesetas to guide.\\Continue?;ESP=hay que devolver %1 pesetas al guia.\\¨Continuar?';
      Text024@1103355035 : TextConst 'ENU=Given cash does not coincide with refunded cash and receipts;ESP=El efectivo que se dio en su momento no cuadra con el efectivo devuelto y los comprobantes';
      Text025@1103355036 : TextConst 'ENU=<integer>;ESP=<integer>';
      Text026@1103355037 : TextConst 'ENU=Circuit purchase inv. Cost;ESP=Coste Fras. compra Circuito';
      Text027@1103355038 : TextConst 'ENU=Circuit %1 order %2 does not exist;ESP=El circuito %1 orden %2 no existe.';
      Text028@1103355039 : TextConst 'ENU=Card supplier from guide %1 does not exist;ESP=La ficha proveedor del guia %1 no existe';
      Text029@1103355040 : TextConst 'ENU=Supplier posting group %1 does not exist;ESP=No existe el grupo contable proveedor %1';
      Text030@1103355041 : TextConst 'ENU=Purchase contract does not exist for supplier %1 day %2;ESP=No existe contrato compra para el proveedor %1 el dia %2.';
      Text031@1103355042 : TextConst 'ENU=Purchase contract for supplier %1 and generic contract day %2 do not exist;ESP=No existe contrato compra para el proveedor %1 ni contrato gen‚rico el dia %2.';
      Text032@1103355043 : TextConst 'ENU=DB parameters file does not exist;ESP=No existe el fichero de Parametros de B.D.';
      Text033@1103355044 : TextConst 'ENU=Circuits from;ESP=Circuitos desde';
      Text034@1103355045 : TextConst 'ENU=" to";ESP=" hasta"';
      Text035@1103355046 : TextConst 'ENU=Pruchase VAT %1 - %2 does not exist;ESP=No existe el IVA de compra %1 - %2.';
      Text036@1103355047 : TextConst 'ENU=Must refund the guide %1 ptas.;ESP=Hay que dar al gu¡a %1 ptas.';
      Text037@1103355048 : TextConst 'ENU=You are about to select all the lines from the window, continue?;ESP=Va a poner una marca en todas las lineas de la ventana, desea seguir?';
      Text038@1103355049 : TextConst 'ENU=Some of the selected lines have already been marked by;ESP=Alguna de las lineas seleccionadas ya ha sido marcada por';
      Text039@1103355050 : TextConst 'ENU=, continue?;ESP=, desea seguir?';
      Text040@1103355051 : TextConst 'ENU="       ASSIGNING VALIDATION MARK \";ESP="       ASIGNANDO MARCA DE VALIDACION \"';
      Text041@1103355052 : TextConst 'ENU=" Description: #1############################";ESP=" Descripcion: #1############################"';
      Text042@1103355053 : TextConst 'ENU=Must indicate a description for the mark;ESP=Se debe indicar una descripcion para la marca.';
      Text043@1103355054 : TextConst 'ENU=Mark is going to be recovered;ESP=Se va a restaurar la marca';
      Text044@1103355055 : TextConst 'ENU=, continue?;ESP=, desea continuar?';
      Text045@1103355056 : TextConst 'ENU=Mark is going to be erasure;ESP=Se va a borrar la marca';
      Text046@1103355057 : TextConst 'ENU=%1 % Tax-income ledger entry;ESP=%1 % Ret. a cta. IRPF';
      Text047@1103355058 : TextConst 'ENU=Inv.;ESP=Fac.';
      Text048@1103355059 : TextConst 'ENU=Cred.;ESP=Abo.';
      rPar@1103355000 : Record 7009700;
      rParC@1103355001 : Record 7010185;
      rCtas@1103355002 : Record 7009705;
      rSeccion@1103355003 : Record 232;
      rProv@1103355005 : Record 23;
      rGrup@1103355006 : Record 93;
      GLSetup@1103355060 : Record 98;
      cFunSeg@1100217000 : Codeunit 7009751;
      finestra@1103355007 : Dialog;
      nFac@1103355008 : Code[20];
      TipoFac@1103355009 : Code[4];
      signo@1103355010 : Integer;
      wDiarioGeneral@1100217001 : Code[10];

    PROCEDURE Generar_FPR@1(VAR rLin@1103355000 : Record 7010190;pw_departamento@1103355001 : Code[10]);
    VAR
      rCir@1103355002 : Record 7010187;
      rLin2@1103355003 : Record 7010190;
      rLin3@1103355004 : Record 7010190;
      lcSincroCOM@1000000000 : Codeunit 7009793;
      nRegs@1103355005 : Integer;
      i@1103355006 : Integer;
      k@1103355007 : Integer;
      j@1103355008 : Integer;
      indice_max@1103355009 : Integer;
      Proveedores@1103355010 : ARRAY [150] OF Code[20];
      Guias@1103355011 : ARRAY [150] OF Code[20];
      aux_fecha_desde@1103355012 : ARRAY [150] OF Date;
      aux_importe_linea@1103355013 : ARRAY [150] OF Decimal;
      asiento_linea@1103355014 : Integer;
      aux_efectivo@1103355015 : ARRAY [150] OF Decimal;
    BEGIN
      // generar_fpr

      //. Existe un parametro para indicar cuando se registra FPR con impuesto y cuando sin impuestos

      rPar.FINDFIRST;

      rParC.GET;

      indice_max := 0;
      finestra.OPEN(Text000 +
                    '#1############################\' +
                    '@2@@@@@@@@@@@@@@@@@@@@@@@@@@@@\');

      rLin2.RESET;
      rLin2.COPY(rLin);
      rLin2.SETRANGE ("Coste/Ingreso" , rLin2."Coste/Ingreso"::Coste);
      IF rParC."No generar FPR profesionales" THEN
        rLin2.SETFILTER("Tipo Proveedor", '<>%1&<>%2', rLin2."Tipo Proveedor"::"Guia Oficial",
                                                       rLin2."Tipo Proveedor"::"Guia Acompa¤ante");

      IF rLin2.FINDSET THEN BEGIN
        finestra.UPDATE(1, Text001);
        nRegs := rLin2.COUNT;
        i := 0;
        k := 0;
        j := 0;
        CLEAR(aux_fecha_desde);
        CLEAR(aux_importe_linea);
        CLEAR(Proveedores);
        CLEAR(Guias);
        REPEAT
          j := j + 1;
          finestra.UPDATE(2, ROUND((j / nRegs) * 10000, 1));
          IF rLin2."Pendiente FPR" THEN BEGIN
            IF rLin2.Efectivo THEN
              rLin2."Proveedor/Cliente" := Text002;
            i := Busca_Proveedor(rLin2."Proveedor/Cliente", Proveedores);
            IF i > indice_max THEN
              indice_max := i;
            IF ((aux_fecha_desde[i] > rLin2.Fecha) AND (rLin2.Fecha <> 0D)) OR (aux_fecha_desde[i] = 0D) THEN
              aux_fecha_desde[i] := rLin2.Fecha;

            // AJS 13.11.2003
            // Se ha puesto un parametro para indicar cuando se registra FPR con impuesto y cuando sin impuestos

            IF rPar."Registrar FPR con impuestos" THEN
              aux_importe_linea[i] := aux_importe_linea[i] + rLin2."Importe Con Impuesto"
            ELSE
              aux_importe_linea[i] := aux_importe_linea[i] + rLin2."Importe Sin Impuesto";
          END;
        UNTIL rLin2.NEXT = 0;
      END;

      finestra.UPDATE(1, Text003);
      i := 1;
      WHILE Proveedores[i] <> '' DO
      BEGIN
        finestra.UPDATE(2, ROUND(i / indice_max * 10000, 1));
        IF aux_importe_linea[i] <> 0 THEN
        BEGIN
          IF (Proveedores[i] <> Text002) OR (i = 1) THEN
            Asegura_Cuentas(rLin.TourOperador, Proveedores[i]);
          rCtas.TESTFIELD("Cta. compra circuito");
          rGrup.TESTFIELD("Cta. FPR Circuito");
          asiento_linea := Busca_Asiento(aux_fecha_desde[i]);

          Genera_Asiento(0, rCtas."Cta. compra circuito", (-aux_importe_linea[i]), Proveedores[i], aux_fecha_desde[i],
                         asiento_linea, 0, rLin.TourOperador, pw_departamento);
          Genera_Asiento(1, rGrup."Cta. FPR Circuito", (-aux_importe_linea[i]), Proveedores[i], aux_fecha_desde[i],
                         asiento_linea, 0, rLin.TourOperador, pw_departamento);

          //+$011 <
          IF rPar."Registrar costes en comerciali" THEN
            lcSincroCOM.SincronizaDiario(rPar.GetLibroDiarioGeneral, 'CIRCUITO', '', rLin.TourOperador);
          //+$011 >
        END;
        i := i + 1;
      END;

      IF rLin2.FINDSET THEN BEGIN
        finestra.UPDATE(1, Text004);
        i := 0;
        REPEAT
          i := i + 1;
          finestra.UPDATE(2, ROUND(i / nRegs * 10000, 1));
          rLin3 := rLin2;
          rLin3."Pendiente FPR" := FALSE;
          rLin3.MODIFY;
        UNTIL rLin2.NEXT = 0;
      END;

      finestra.CLOSE;
    END;

    PROCEDURE Asegura_Cuentas@2(par_touroperador@1103355000 : Code[10];par_proveedor@1103355001 : Code[20]) : Boolean;
    BEGIN
      // asegura_cuentas

      rPar.FINDFIRST;
      wDiarioGeneral := rPar.GetLibroDiarioGeneral;

      rParC.FINDFIRST;

      IF NOT rCtas.GET(rPar.Delegacion, par_touroperador) THEN BEGIN
        IF NOT rCtas.GET(rPar.Delegacion, '') THEN
          ERROR(Text007 + ' ' + Text008, par_touroperador, rPar.Delegacion);
      END;

      IF NOT rSeccion.GET(wDiarioGeneral, Text009) THEN BEGIN
        CLEAR(rSeccion);
        rSeccion."Journal Template Name" := wDiarioGeneral;
        rSeccion.Name                    := Text009;
        rSeccion.Description             := Text010;
        rSeccion.INSERT;
      END;

      rProv.GET(par_proveedor);
      rGrup.GET(rProv."Vendor Posting Group");
    END;

    PROCEDURE Busca_Proveedor@3(aux_Proveedor@1103355000 : Code[20];VAR par_Proveedores@1103355001 : ARRAY [150] OF Code[20]) : Integer;
    VAR
      encontrado@1103355002 : Boolean;
      i@1103355003 : Integer;
    BEGIN
      // busca_touroperador

      i := 0;
      REPEAT
        i := i + 1;
        IF par_Proveedores[i] = '' THEN
          par_Proveedores[i] := aux_Proveedor;
      UNTIL par_Proveedores[i] = aux_Proveedor;
      EXIT(i);
    END;

    PROCEDURE Busca_TourOperador@20(aux_TourOperador@1103355000 : Code[10];VAR par_TourOperadores@1103355001 : ARRAY [150] OF Code[10]) : Integer;
    VAR
      encontrado@1103355002 : Boolean;
      i@1103355003 : Integer;
    BEGIN
      // busca_touroperador

      i := 0;
      REPEAT
        i := i + 1;
        IF par_TourOperadores[i] = '' THEN
          par_TourOperadores[i] := aux_TourOperador;
      UNTIL par_TourOperadores[i] = aux_TourOperador;
      EXIT(i);
    END;

    PROCEDURE Busca_Guia@14(VAR par_Guias@1103355000 : ARRAY [150] OF Code[20];par_guia@1103355001 : Code[10]) : Integer;
    VAR
      i@1103355002 : Integer;
    BEGIN
      i := 0;
      REPEAT
        i := i + 1;
        IF par_Guias[i] = '' THEN
          par_Guias[i] := par_guia;
      UNTIL par_Guias[i] = par_guia;
      EXIT(i);
    END;

    PROCEDURE Busca_Asiento@6(Par_FechaDesde@1103355000 : Date) : Integer;
    VAR
      rLinDiario@1103355001 : Record 81;
      rLinDiario2@1103355002 : Record 81;
    BEGIN
      // busca_asiento

      rLinDiario2.RESET;
      //-$005rLinDiario2.SETCURRENTKEY("Journal Template Name", "Journal Batch Name", "Posting Date", "Transaction No.");
      rLinDiario2.SETCURRENTKEY("Journal Template Name", "Journal Batch Name", "Transaction No."); //+$005
      rLinDiario2.SETRANGE("Journal Template Name", wDiarioGeneral);
      rLinDiario2.SETRANGE("Journal Batch Name"   , Text009);
      rLinDiario2.SETRANGE("Posting Date"         , Par_FechaDesde);
      IF rLinDiario2.FINDLAST THEN
        EXIT(rLinDiario2."Transaction No." + 1)
      ELSE
        EXIT(1);
    END;

    PROCEDURE Busca_Orden@7() : Integer;
    VAR
      rLinDiario2@1103355000 : Record 81;
    BEGIN
      // busca_orden

      rLinDiario2.RESET;
      rLinDiario2.SETRANGE("Journal Template Name", wDiarioGeneral);
      rLinDiario2.SETRANGE("Journal Batch Name"   , Text009);
      IF rLinDiario2.FINDLAST THEN
        EXIT(rLinDiario2."Line No." + 10000)
      ELSE
        EXIT(10000);
    END;

    PROCEDURE Genera_Asiento@8(par_tipolinea@1103355000 : 'Debe,Haber';par_cuenta@1103355001 : Code[20];par_importe_linea@1103355002 : Decimal;par_Proveedor@1103355003 : Code[20];par_Fecha@1103355004 : Date;par_asiento_linea@1103355005 : Integer;par_TipoAsiento@1103355006 : 'Normal,Efectivo';par_TourOperador@1103355007 : Code[10];par_Departamento@1103355008 : Code[10]);
    VAR
      rLinDiario@1103355009 : Record 81;
    BEGIN
      // genera_asiento

      CLEAR(rLinDiario);
      rLinDiario.VALIDATE("Journal Template Name"    , wDiarioGeneral);
      rLinDiario.VALIDATE("Journal Batch Name"       , Text009);
      rLinDiario.VALIDATE("Line No."                 , Busca_Orden);
      rLinDiario.VALIDATE("Posting Date"             , par_Fecha);
      rLinDiario.VALIDATE("Transaction No."          , par_asiento_linea);
      rLinDiario.VALIDATE("Document No."             , STRSUBSTNO('%1', par_asiento_linea));
      rLinDiario.VALIDATE("Account Type"             , rLinDiario."Account Type"::"G/L Account");
      rLinDiario.VALIDATE("Account No."              , par_cuenta);
      rLinDiario.VALIDATE("Shortcut Dimension 1 Code", par_Departamento);

      IF par_TipoAsiento = par_TipoAsiento::Normal THEN
        rLinDiario.VALIDATE("Shortcut Dimension 2 Code", par_TourOperador);

      IF par_TipoAsiento = par_TipoAsiento::Normal THEN BEGIN
        IF par_Proveedor = Text002 THEN
          rLinDiario.VALIDATE(Description, STRSUBSTNO(Text013, TipoFac, nFac))
        ELSE
          rLinDiario.VALIDATE(Description, STRSUBSTNO(Text014, TipoFac, nFac, COPYSTR(rProv.Name, 1, 14)));
      END
      ELSE
        rLinDiario.VALIDATE(Description, Text015 + par_TourOperador);

      rLinDiario.VALIDATE("Gen. Posting Type"       , 0);
      rLinDiario.VALIDATE("VAT Bus. Posting Group"  , '');
      rLinDiario.VALIDATE("VAT Prod. Posting Group" , '');
      rLinDiario.VALIDATE("Gen. Bus. Posting Group" , '');
      rLinDiario.VALIDATE("Gen. Prod. Posting Group", '');
      IF par_tipolinea = par_tipolinea::Debe THEN
        rLinDiario.VALIDATE("Debit Amount" , par_importe_linea)
      ELSE
        rLinDiario.VALIDATE("Credit Amount", par_importe_linea);

      //+$002 <
      rLinDiario."Source Type" := rLinDiario."Source Type"::Vendor;
      rLinDiario."Source No."  := rProv."No.";
      //+$002 >

      rLinDiario."System-Created Entry" := TRUE; //+$004
      rLinDiario."Source Code"                := rPar.GetSourceCode(rLinDiario."Journal Template Name"); //+$009
      rLinDiario.INSERT;
    END;

    PROCEDURE Validar_Factura_Coste@4(VAR rLin@1103355000 : Record 7010190);
    VAR
      rCir@1103355001 : Record 7010187;
      rLin2@1103355002 : Record 7010190;
      rLin3@1103355003 : Record 7010190;
      rCond@1103355004 : Record 7010085;
      rConC@1103355005 : Record 7010196;
      aux_Fecha_Desde@1103355006 : Date;
      aux_Fecha_hasta@1103355007 : Date;
      aux_importe_factura@1103355008 : Decimal;
      aux_importe_manual@1103355009 : Decimal;
      tab_touroperadores@1103355010 : ARRAY [150] OF Code[10];
      tab_guias@1103355011 : ARRAY [150] OF Code[20];
      tab_importes@1103355012 : ARRAY [150] OF Decimal;
      tab_importes_manuales@1103355013 : ARRAY [150] OF Decimal;
      tab_importe_Guias@1103355014 : ARRAY [150] OF Decimal;
      tab_importe_Guias_m@1103355015 : ARRAY [150] OF Decimal;
      iTTOO@1103355016 : Integer;
      iGuia@1103355017 : Integer;
      Orden_Cir@1103355018 : Text[10];
    BEGIN
      // validar_factura_coste

      cFunSeg.TienePermiso('CIR-VAL-COS', TRUE); //$001

      rPar.FINDFIRST;
      rParC.FINDFIRST;

      IF rCir.GET(rLin.Delegacion, rLin.Circuito, rLin.Orden) THEN BEGIN
        IF rCir."Pendiente calcular" THEN
          ERROR(Text016,
                rCir.Circuito, rCir.Orden, rCir.Fecha);
      END;

      CLEAR(aux_Fecha_Desde); // := 0D;
      aux_Fecha_hasta := 0D;
      aux_importe_factura := 0;
      aux_importe_manual := 0;
      CLEAR(tab_touroperadores);
      CLEAR(tab_importes);

      rLin.SETRANGE(Usuario, USERID);
      rLin2.RESET;
      rLin2.COPY(rLin);
      rLin2.SETRANGE ("Coste/Ingreso", rLin2."Coste/Ingreso"::Coste);

      // Quitamos las linea que esten incluidas en otras facturas
      rLin2.SETRANGE ("N§ Factura"   , '');

      IF NOT rLin.Efectivo THEN BEGIN
        rLin2.SETFILTER ("Proveedor/Cliente", '<>%1', rLin."Proveedor/Cliente");
        IF rLin2.FINDFIRST THEN
          ERROR(Text017);
        rLin2.SETRANGE ("Proveedor/Cliente");
      END
      ELSE BEGIN
        rLin2.SETRANGE(Circuito, rLin.Circuito);
        rLin2.SETRANGE(Orden   , rLin.Orden);
      END;

      IF rLin2.FINDSET THEN BEGIN
        aux_Fecha_Desde := rLin2.Fecha;
        aux_Fecha_hasta := rLin2.Fecha;
        REPEAT
          IF (rLin2."Pendiente FPR") THEN
            IF NOT(rParC."No generar FPR profesionales" AND
               (rLin2."Tipo Proveedor" IN [rLin2."Tipo Proveedor"::"Guia Oficial", rLin2."Tipo Proveedor"::"Guia Acompa¤ante"])) THEN
              ERROR(Text018, rLin2.FIELDCAPTION("Pendiente FPR"));

          iTTOO := Busca_TourOperador(rLin2.TourOperador, tab_touroperadores);
          IF rLin2."Tipo linea" = rLin2."Tipo linea"::Manual THEN BEGIN
            tab_importes_manuales[iTTOO] := tab_importes_manuales[iTTOO] - rLin2."Importe Con Impuesto";
            aux_importe_manual := aux_importe_manual + rLin2."Importe Con Impuesto";
          END
          ELSE
            tab_importes[iTTOO] := tab_importes[iTTOO] - rLin2."Importe Con Impuesto";

          aux_importe_factura := aux_importe_factura + rLin2."Importe Con Impuesto";
          IF (aux_Fecha_Desde > rLin2.Fecha) AND (rLin2.Fecha <> 0D) THEN
            aux_Fecha_Desde := rLin2.Fecha;
          IF (aux_Fecha_hasta < rLin2.Fecha) THEN
            aux_Fecha_hasta := rLin2.Fecha;
        UNTIL rLin2.NEXT = 0;
        aux_importe_manual := - aux_importe_manual;
      END;
      IF NOT rLin.FINDFIRST THEN
        EXIT;
      IF rLin.Efectivo THEN
        Pedir_Datos_Efectivo(rLin, rCond)
      ELSE
        Pedir_Datos(rLin, rCond);
      IF NOT rCond.Correcto THEN
        EXIT;
      IF NOT rLin.Efectivo THEN BEGIN
        IF rCond."Total Factura" <> (- aux_importe_factura) THEN
          ERROR(Text019);
      END
      ELSE BEGIN
        IF rCond."Total Factura" + rCond."Efectivo devuelto" > (-aux_importe_factura) THEN BEGIN
          IF rCond."Efectivo devuelto" <> 0 THEN
            ERROR(Text020 +
                  Text021);
          IF NOT CONFIRM(Text022 +
                         Text023, FALSE, rCond."Total Factura" + aux_importe_factura) THEN
            EXIT;
          rCond."Efectivo devuelto" := rCond."Total Factura" + aux_importe_factura;
        END
        ELSE
          IF rCond."Total Factura" + rCond."Efectivo devuelto" < (-aux_importe_factura) THEN
            ERROR(Text024);
      END;

      IF rLin.Efectivo THEN
      BEGIN
        Orden_Cir := CONVERTSTR(FORMAT(rLin.Orden,10,Text025),' ','0');
        rCond."N§ Factura proveedor" := COPYSTR(rLin.Circuito, 1, 5)+ '/' + COPYSTR(Orden_Cir, STRLEN(Orden_Cir) - 3, 4);
        rCond.MODIFY;
        Crear_Movimientos(aux_Fecha_Desde, aux_Fecha_hasta, aux_importe_manual, tab_touroperadores, tab_importes_manuales, rCond,
                          tab_importes, rCond.Delegacion);
      END
      ELSE BEGIN
        Asegura_Proveedor(rLin2, rCond, rConC);
        Crear_Factura(rLin2, aux_Fecha_Desde, aux_Fecha_hasta, aux_importe_manual, tab_touroperadores, tab_importes_manuales
                      , rCond, rConC, tab_importes, rCond.Delegacion);
      END;

      rLin3.RESET; rLin3.INIT;
      IF rLin2.FINDSET THEN BEGIN
        REPEAT
          rLin3 := rLin2;
          rLin3."N§ Factura" := rCond."N§ Factura proveedor";
          rLin3.Usuario      := '';
          rLin3.MODIFY;
        UNTIL rLin2.NEXT = 0;
      END;

      rLin.SETRANGE(Usuario);
    END;

    PROCEDURE Pedir_Datos@18(VAR rLin@1103355000 : Record 7010190;VAR rCond@1103355001 : Record 7010085);
    BEGIN
      // pedir_datos

      IF rCond.GET(USERID()) THEN
        rCond.DELETE;
      rCond.INIT;
      rCond.Usuario := USERID();
      rCond.Proveedor := '';
      IF rProv.GET(rLin."Proveedor/Cliente") THEN
        rCond.Proveedor := rProv."No.";
      rCond.Delegacion  := rLin.Delegacion;
      rCond.INSERT;
      COMMIT;
      rCond.FILTERGROUP(2);
      rCond.SETRANGE(Usuario, USERID());
      rCond.FILTERGROUP(0);
      FORM.RUNMODAL(FORM::"Ficha Condicion val. Circuito", rCond);
      rCond.FILTERGROUP(2);
      rCond.SETRANGE(Usuario);
      rCond.FILTERGROUP(0);

      rCond.GET(USERID());
      IF rCond.Delegacion = '' THEN
        rCond.Delegacion := rLin.Delegacion;
    END;

    PROCEDURE Pedir_Datos_Efectivo@11(VAR rLin@1103355000 : Record 7010190;VAR rCond@1103355001 : Record 7010085);
    VAR
      rCir@1103355002 : Record 7010187;
    BEGIN
      // Pedir_Datos_Efectivo
      //
      IF rCond.GET(USERID()) THEN
        rCond.DELETE;
      rCond.INIT;
      rCond.Usuario := USERID();
      rCond.Proveedor := '';
      IF NOT rCir.GET(rLin.Delegacion, rLin.Circuito, rLin.Orden) THEN
        ERROR(Text027, rLin.Circuito, rLin.Orden);
      IF NOT rProv.GET(rCir."Guia Efectivo") THEN
        ERROR(Text028, rCir."Guia Efectivo");

      rCond.Proveedor := rProv."No.";
      rCond.Delegacion:= rCir.Delegacion;
      rCond.Circuito  := rCir.Circuito;
      rCond.Orden     := rCir.Orden;
      rCond.INSERT;
      COMMIT;

      rCond.FILTERGROUP(2);
      rCond.SETRANGE(Usuario, USERID());
      rCond.FILTERGROUP(0);
      FORM.RUNMODAL(FORM::"Ficha Condicion val. Cir. Efe.", rCond);
      rCond.FILTERGROUP(2);
      rCond.SETRANGE(Usuario);
      rCond.FILTERGROUP(0);

      rCond.GET(USERID());
      IF rCond.Delegacion = '' THEN
        rCond.Delegacion := rLin.Delegacion;
    END;

    PROCEDURE Asegura_Proveedor@12(VAR par_Lin@1103355000 : Record 7010190;VAR par_Cond@1103355001 : Record 7010085;VAR par_ConC@1103355002 : Record 7010196);
    BEGIN
      // Asegura_Proveedor
      //
      rProv.GET(par_Cond.Proveedor);

      IF rGrup.GET(rProv."Vendor Posting Group") THEN BEGIN
        rGrup.TESTFIELD("Payables Account");
        rGrup.TESTFIELD("Cta. FPR Circuito");
      END
      ELSE
        ERROR(Text029, rProv."Vendor Posting Group");

      IF par_Lin."N§ Tarifa" <> '' THEN BEGIN
        par_ConC.GET(par_Lin.Delegacion, par_Lin."Tipo Proveedor", par_Lin."N§ Tarifa");
        EXIT;
      END;

      par_ConC.RESET;
      par_ConC.SETCURRENTKEY(Proveedor,
                             "Fecha inicio",
                             "Fecha final");
      par_ConC.SETRANGE (Proveedor     , rProv."No.");
      par_ConC.SETFILTER("Fecha inicio", '<=%1', par_Lin.Fecha);
      par_ConC.SETFILTER("Fecha final" , '>=%1', par_Lin.Fecha);
      par_ConC.SETRANGE ("Tipo Tarifa" , par_Lin."Tipo Proveedor");
      IF NOT par_ConC.FINDFIRST THEN BEGIN
        IF par_Lin."Tipo Proveedor" <> par_Lin."Tipo Proveedor"::"Guia Acompa¤ante" THEN
          ERROR(Text030, rProv."No.", par_Lin.Fecha);
      // si el proveedor es un guia acompa¤ante, adem s buscaremos por el contrato gen‚rico
        par_ConC.SETRANGE(Proveedor, '');
        IF NOT par_ConC.FINDFIRST THEN
          ERROR(Text031, rProv."No.", par_Lin.Fecha);
      END;

      par_Lin."N§ Tarifa" := par_ConC."N§ Tarifa";
      par_Lin.MODIFY;
    END;

    PROCEDURE Crear_Factura@16(VAR rLinea@1103355000 : Record 7010190;VAR par_FechaDesde@1103355001 : Date;VAR par_FechaHasta@1103355002 : Date;VAR par_Importe_Manual@1103355003 : Decimal;VAR par_TourOperadores@1103355004 : ARRAY [150] OF Code[10];VAR par_Importes_Manuales@1103355005 : ARRAY [150] OF Decimal;VAR par_Cond@1103355006 : Record 7010085;VAR par_ConC@1103355007 : Record 7010196;VAR par_Importes@1103355008 : ARRAY [150] OF Decimal;pw_departamento@1103355009 : Code[10]);
    VAR
      rIVACompra@1103355010 : Record 325;
      lrConfCompra@1103355011 : Record 312;
      rCabFra@1103355012 : Record 38;
      rLinFra@1103355013 : Record 39;
      rLinFra2@1103355014 : Record 39;
      lcCheck@1100217000 : Codeunit 11;
      importesin@1103355015 : Decimal;
      importesin2@1103355016 : Decimal;
      importecon@1103355017 : Decimal;
      num_linea@1103355018 : Integer;
      indice@1103355019 : Integer;
      lcRelease@1000000000 : Codeunit 415;
      lcSincro@1000000001 : Codeunit 7009793;
    BEGIN
      // Crear_Factura
      //
      CLEAR(importesin);
      CLEAR(importesin2);
      CLEAR(importecon);

      rPar.FINDFIRST;

      rParC.FINDFIRST;

      CLEAR(lrConfCompra);
      lrConfCompra.FINDFIRST;

      CLEAR(rCabFra);
      IF par_Cond."Total Factura" > 0 THEN BEGIN
        rCabFra.VALIDATE("Document Type", rCabFra."Document Type"::Invoice);
        rCabFra.VALIDATE("No. Series"   , par_ConC."Cod. Serie");
        signo := 1;
      END
      ELSE BEGIN
        rCabFra.VALIDATE("Document Type", rCabFra."Document Type"::"Credit Memo");
        rCabFra.VALIDATE("No. Series"   , lrConfCompra."Credit Memo Nos.");
        signo := -1;
      END;
      _CheckReasonCode;
      rCabFra.INSERT(TRUE);

      IF par_Cond."Total Factura" > 0 THEN BEGIN
        rCabFra.VALIDATE("Posting No. Series", par_ConC."Cod. Serie");
        rCabFra.VALIDATE("Vendor Invoice No.", par_Cond."N§ Factura proveedor");
      END
      ELSE BEGIN
        rCabFra.VALIDATE("Posting No. Series" , lrConfCompra."Posted Credit Memo Nos.");
        rCabFra.VALIDATE("Vendor Cr. Memo No.", par_Cond."N§ Factura proveedor");
      END;
      rCabFra.VALIDATE("Buy-from Vendor No.", rProv."No.");
      rCabFra.VALIDATE("Posting Date"       , par_FechaDesde);

      lcCheck.DateNotAllowed(rCabFra."Posting Date"); //+$006

      rCabFra.VALIDATE("Posting Description", Text033 + STRSUBSTNO('%1', par_FechaDesde) +
                                              Text034 + STRSUBSTNO('%1', par_FechaHasta));
      rCabFra.VALIDATE("Document Date"            , par_Cond."Fecha emision proveedor");
      rCabFra.VALIDATE("Payment Terms Code"       , par_ConC."Cod. Terminos Pago");
      rCabFra.VALIDATE("Payment Method Code"      , par_ConC."Cod. Formas Pago");
      rCabFra.VALIDATE("Shortcut Dimension 1 Code", pw_departamento);
      rCabFra.VALIDATE("Shortcut Dimension 2 Code", rLinea.TourOperador);

      // AJS 06.03.2007
      // Rellenar el campo Tipo de factura con un parametro si aplica NCF

      GLSetup.FINDFIRST;
      IF GLSetup."Aplica legislacion NCF" THEN BEGIN
        rPar.TESTFIELD("Tipo factura compra Incoming");
        rCabFra."Tipo factura compra" := rPar."Tipo factura compra Incoming";
      END;

      rCabFra.MODIFY;

      IF (rLinea."Tipo Proveedor" IN [rLinea."Tipo Proveedor"::"Guia Oficial", rLinea."Tipo Proveedor"::"Guia Acompa¤ante"]) AND
         rParC."No generar FPR profesionales" THEN BEGIN
      // Generar las lineas de factura contra Gastos profesionales circuito
      //
        rGrup.TESTFIELD("Cta. Gastos servs profesio cir");
        indice := 1;
        num_linea := 0;

        WHILE par_TourOperadores[indice] <> '' DO BEGIN
          num_linea := num_linea + 10000;

          CLEAR(rLinFra);
          rLinFra.VALIDATE("Document Type", rCabFra."Document Type");
          rLinFra.VALIDATE("Document No." , rCabFra."No.");
          rLinFra.VALIDATE("Line No."     , num_linea);
          rLinFra.VALIDATE(Type           , rLinFra.Type::"G/L Account");
          rLinFra.INSERT;

          rLinFra.VALIDATE("No."                      , rGrup."Cta. Gastos servs profesio cir");
          rLinFra.VALIDATE("Buy-from Vendor No."      , par_Cond.Proveedor);
          rLinFra.VALIDATE("Shortcut Dimension 1 Code", pw_departamento);
          rLinFra.VALIDATE("Shortcut Dimension 2 Code", par_TourOperadores[indice]);
          rLinFra.VALIDATE("Allow Invoice Disc."      , FALSE);
          rLinFra.VALIDATE(Quantity                   , 1);
          rLinFra.VALIDATE("VAT Prod. Posting Group"  , par_ConC."Grupo registro iva prod.");

          IF NOT rIVACompra.GET(rProv."VAT Bus. Posting Group", par_ConC."Grupo registro iva prod.") THEN
            ERROR(Text035, rProv."VAT Bus. Posting Group", par_ConC."Grupo registro iva prod.");

          // Si se ha seleccionado el ajuste de coste restamos al importe de la factura
          // el importe de las lineas manuales de los touroperadores.

          IF rPar."Permite validacion parcial" THEN
            importecon := signo * par_Importes[indice]
          ELSE
            importecon := signo * (par_Importes[indice] + par_Importes_Manuales[indice]);

          importesin2 := importecon / (1 + (rIVACompra."VAT+EC %" / 100));
          importesin  := importesin + importesin2;

          rLinFra.VALIDATE("Direct Unit Cost", importesin2);

          //-$007rLinFra."Amount Including VAT" := importecon;
          //-$007rLinFra.Amount                 := importesin2;

          rLinFra."Line Discount %" := 0;
          rLinFra.ActualizaCamposImporte; //+$007
          rLinFra.MODIFY;

          indice := indice + 1;
        END;
      END
      ELSE
      BEGIN
        // Generar las lineas de factura contra FPR

        CLEAR(rLinFra);
        rLinFra.VALIDATE("Document Type", rCabFra."Document Type");
        rLinFra.VALIDATE("Document No." , rCabFra."No.");
        rLinFra.VALIDATE("Line No."     , 10000);
        rLinFra.VALIDATE(Type           , rLinFra.Type::"G/L Account");
        rLinFra.INSERT;

        rLinFra.VALIDATE("No."                      , rGrup."Cta. FPR Circuito");
        rLinFra.VALIDATE("Buy-from Vendor No."      , par_Cond.Proveedor);
        rLinFra.VALIDATE("Shortcut Dimension 1 Code", pw_departamento);
        rLinFra.VALIDATE("Shortcut Dimension 2 Code", rLinea.TourOperador);
        rLinFra.VALIDATE("Allow Invoice Disc."      , FALSE);
        rLinFra.VALIDATE(Quantity                   , 1);
        rLinFra.VALIDATE("VAT Prod. Posting Group"  , par_ConC."Grupo registro iva prod.");

        IF NOT rIVACompra.GET(rProv."VAT Bus. Posting Group", par_ConC."Grupo registro iva prod.") THEN
          ERROR(Text035, rProv."VAT Bus. Posting Group", par_ConC."Grupo registro iva prod.");

        // Si se ha seleccionado el ajuste de coste restamos al importe de la factura
        // el importe de las lineas manuales de los touroperadores.

        IF rPar."Permite validacion parcial" THEN
          importecon := signo * (par_Cond."Total Factura" - par_Importe_Manual)
        ELSE
          importecon := signo * par_Cond."Total Factura";

        importesin := importecon / (1 + (rIVACompra."VAT+EC %" / 100));
        rLinFra.VALIDATE("Direct Unit Cost", importesin);

        //-$007rLinFra."Amount Including VAT" := importecon;
        //-$007rLinFra.Amount                 := importesin;
        rLinFra."Line Discount %"      := 0;
        rLinFra.ActualizaCamposImporte; //+$007
        rLinFra.MODIFY;

        num_linea := rLinFra."Line No.";
      END;

      // Si se ha seleccionado el ajuste de coste generar las lineas de
      // ajuste de coste por touroperador

      IF rPar."Permite validacion parcial" THEN
      BEGIN
        indice := 1;
        WHILE par_TourOperadores[indice] <> '' DO BEGIN
          IF par_Importes_Manuales[indice] <> 0 THEN BEGIN
            // buscamos el fichero de cuentas TO-Delegacion

            IF NOT rCtas.GET(rPar.Delegacion, par_TourOperadores[indice]) THEN BEGIN
              IF NOT rCtas.GET(rPar.Delegacion, '') THEN
                ERROR(Text007+
                      Text008, par_TourOperadores[indice], rPar.Delegacion);
            END;
            rCtas.TESTFIELD("Cta. ajuste FPR circuito");

            // Creamos la linea correspondiente a los ajustes de coste para este touroperador

            num_linea := num_linea + 10000;
            rLinFra2 := rLinFra;
            rLinFra2.VALIDATE("Line No.", num_linea);
            rLinFra2.INSERT;

            rLinFra2.VALIDATE("No."                      , rCtas."Cta. ajuste FPR circuito");
            rLinFra2.VALIDATE("Shortcut Dimension 2 Code", par_TourOperadores[indice]);
            rLinFra2.VALIDATE("Gen. Bus. Posting Group"  , rProv."Gen. Bus. Posting Group");
            rLinFra2.VALIDATE("VAT Bus. Posting Group"   , rProv."VAT Bus. Posting Group");
            rLinFra2.VALIDATE("VAT Prod. Posting Group"  , par_ConC."Grupo registro iva prod.");

            importesin2 := signo * (par_Importes_Manuales[indice] / (1 + (rIVACompra."VAT+EC %" / 100)));
            importesin := importesin + importesin2;
            rLinFra2.VALIDATE("Direct Unit Cost", importesin2);

            //-$007rLinFra2."Amount Including VAT" := signo * par_Importes_Manuales[indice];
            //-$007rLinFra2.Amount                 := importesin2;
            rLinFra2."Line Discount %"      := 0;
            rLinFra2.ActualizaCamposImporte; //+$007
            rLinFra2.MODIFY;
          END;
          indice := indice + 1;
        END;
      END;

      //+$008 <
      IF rCabFra.GET(rCabFra."Document Type", rCabFra."No.") THEN
        lcRelease.RUN(rCabFra);
      //+$008 >

      //+$010 <
      IF rCabFra.GET(rCabFra."Document Type", rCabFra."No.") THEN
      BEGIN
        rCabFra."Reason Code" := 'ATENNEA';
        rCabFra.MODIFY;
      END;
      //+$010 >

      //+$012 <
      IF rPar."Registrar costes en comerciali" THEN
        lcSincro.SincronizaDocCompra(rCabFra."Document Type", rCabFra."No.", rCabFra."Shortcut Dimension 2 Code");
      //+$012 >
    END;

    PROCEDURE Crear_Movimientos@19(VAR par_FechaDesde@1103355000 : Date;VAR par_FechaHasta@1103355001 : Date;VAR par_Importe_Manual@1103355002 : Decimal;VAR par_TourOperadores@1103355003 : ARRAY [150] OF Code[10];VAR par_Importes_Manuales@1103355004 : ARRAY [150] OF Decimal;VAR par_Cond@1103355005 : Record 7010085;VAR par_Importes@1103355006 : ARRAY [150] OF Decimal;pw_departamento@1103355007 : Code[10]);
    VAR
      ImporteCON@1103355008 : Decimal;
      Indice@1103355009 : Integer;
      asiento_linea@1103355010 : Integer;
      DebeHaber@1103355011 : Integer;
      percentTTOO@1103355012 : Decimal;
      lcSincro@1000000000 : Codeunit 7009793;
    BEGIN
      // crear_Movimientos

      rPar.FINDFIRST;

      rParC.FINDFIRST;

      IF rPar."Permite validacion parcial" THEN
        ImporteCON := par_Cond."Total Factura" - par_Importe_Manual
      ELSE
        ImporteCON := par_Cond."Total Factura";

      asiento_linea := Busca_Asiento(par_FechaDesde);

      rProv.GET(par_Cond.Proveedor);
      rGrup.GET(rProv."Vendor Posting Group");
      rGrup.TESTFIELD("Cta. FPR Circuito");
      rGrup.TESTFIELD("Cta. Gastos guia circuitos");
      IF NOT rParC."No generar FPR profesionales" THEN
        rGrup.TESTFIELD("Cta. Gastos servs profesio cir");

      // Cerramos la cuenta de gastos guia circuitos
      //
      rParC.TESTFIELD("Cta. Caja");
      rGrup.TESTFIELD("Cta. FPR Circuito");
      Genera_Asiento(1, rParC."Cta. Caja", ImporteCON, par_Cond.Proveedor, par_FechaDesde,
                     asiento_linea, 1, par_TourOperadores[1], pw_departamento);
      Genera_Asiento(0, rGrup."Cta. FPR Circuito", ImporteCON + par_Cond."Efectivo devuelto", par_Cond.Proveedor, par_FechaDesde,
                     asiento_linea, 1, par_TourOperadores[1], pw_departamento);

      IF par_Cond."Efectivo devuelto" > 0 THEN
        DebeHaber := 1 // 0-> debe   1-> haber
      ELSE IF par_Cond."Efectivo devuelto" < 0 THEN BEGIN
        DebeHaber := 0; // 0-> debe   1-> haber
        par_Cond."Efectivo devuelto" := -par_Cond."Efectivo devuelto";
        MESSAGE(Text036, par_Cond."Efectivo devuelto");
      END;

      Indice := 0;
      REPEAT
        Indice := Indice + 1;
        percentTTOO := par_Importes[Indice] / ImporteCON;
        IF NOT rCtas.GET(rPar.Delegacion, par_TourOperadores[Indice]) THEN
          IF NOT rCtas.GET(rPar.Delegacion, '') THEN
            ERROR(Text007+
                  Text008, par_TourOperadores[Indice], rPar.Delegacion);
        rCtas.TESTFIELD("Cta. compra circuito");
        Genera_Asiento(DebeHaber, rCtas."Cta. compra circuito", par_Cond."Efectivo devuelto" * percentTTOO,
                       par_Cond.Proveedor, par_FechaDesde, asiento_linea, 1, '', pw_departamento);
      UNTIL par_TourOperadores[Indice] = '';

      // Si se ha seleccionado el ajuste de coste generar las lineas de
      // ajuste de coste por touroperador

      IF rPar."Permite validacion parcial" THEN BEGIN
        Indice := 1;
        WHILE par_TourOperadores[Indice] <> '' DO BEGIN
          IF par_Importes_Manuales[Indice] <> 0 THEN BEGIN

            // buscamos el fichero de cuentas TO-Delegacion

            IF NOT rCtas.GET(rPar.Delegacion, par_TourOperadores[Indice]) THEN BEGIN
              IF NOT rCtas.GET(rPar.Delegacion, '') THEN
                ERROR(Text007+
                      Text008, par_TourOperadores[Indice], rPar.Delegacion);
            END;
            rCtas.TESTFIELD("Cta. ajuste FPR circuito");

            asiento_linea := Busca_Asiento(par_FechaDesde);

            // Creamos la linea correspondiente a los ajustes de coste para este touroperador

            rParC.TESTFIELD("Cta. Caja");
            rCtas.TESTFIELD("Cta. ajuste FPR circuito");

            Genera_Asiento(1, rParC."Cta. Caja", par_Importes_Manuales[Indice], par_TourOperadores[Indice], par_FechaDesde,
                           asiento_linea, 0, '', pw_departamento);
            Genera_Asiento(0, rCtas."Cta. ajuste FPR circuito", par_Importes_Manuales[Indice], par_TourOperadores[Indice],
                           par_FechaDesde, asiento_linea, 0, '', pw_departamento);

          END;
          Indice := Indice + 1;
        END;
      END;

      //+$012 <
      IF (rPar."Registrar costes en comerciali") AND (par_TourOperadores[1] <> '') THEN
        lcSincro.SincronizaDiario(rPar.GetLibroDiarioGeneral, Text009, '', par_TourOperadores[1]);
      //+$012 >
    END;

    PROCEDURE Crear_Marca_Circuito@5(VAR rLin@1103355000 : Record 7010190);
    VAR
      rLinea@1103355001 : Record 7010190;
      sw@1103355002 : Boolean;
      textodescripcion@1103355003 : Text[30];
      textoconfirma@1103355004 : Text[80];
      ventana@1103355005 : Dialog;
      usuariomarca@1103355006 : Code[10];
    BEGIN
      // Crear_Marca_Circuito

      IF NOT CONFIRM(Text037) THEN
        EXIT;
      sw := FALSE;
      rLinea.COPYFILTERS(rLin);
      IF rLinea.FINDSET THEN BEGIN
        REPEAT
          IF rLinea."Descripcion Marca" <> '' THEN BEGIN
            sw := TRUE;
            usuariomarca:= rLinea.Usuario;
          END;
        UNTIL (rLinea.NEXT = 0) OR (sw);
      END;
      IF sw THEN BEGIN
        textoconfirma := Text038 +
                         usuariomarca + Text039;
        IF NOT CONFIRM(textoconfirma) THEN
          EXIT;
      END;
      ventana.OPEN(Text040+
                   '\'+
                   Text041);
      ventana.INPUT(1, textodescripcion);
      ventana.CLOSE;
      IF textodescripcion = '' THEN
        ERROR(Text042);
      IF rLinea.FINDSET THEN BEGIN
        REPEAT
          rLinea.Usuario := USERID();
          rLinea."Descripcion Marca" := textodescripcion;
          rLinea.MODIFY;
        UNTIL rLinea.NEXT = 0;
      END;
    END;

    PROCEDURE Recuperar_Marca_Circuito@9(VAR rLin@1103355000 : Record 7010190);
    VAR
      rLinea@1103355001 : Record 7010190;
      sw@1103355002 : Boolean;
      textodescripcion@1103355003 : Text[30];
      textoconfirma@1103355004 : Text[80];
      ventana@1103355005 : Dialog;
      usuariomarca@1103355006 : Code[10];
      fTabCos@1103355007 : Form 7009944;
    BEGIN
      // Recuperar_Marca_Circuito
      //
      ventana.OPEN(Text040+
                   '\'+
                   Text041);
      ventana.INPUT(1, textodescripcion);
      ventana.CLOSE;
      IF textodescripcion = '' THEN
        ERROR(Text042);
      textoconfirma := Text043 + textodescripcion +
                       Text044;
      IF NOT CONFIRM(textoconfirma) THEN
        EXIT;
      rLinea.RESET;
      rLinea.SETCURRENTKEY("Descripcion Marca");
      rLinea.FILTERGROUP(2);
      rLinea.SETRANGE("Descripcion Marca", textodescripcion);
      rLinea.FILTERGROUP(0);
      fTabCos.SETTABLEVIEW(rLinea);
      fTabCos.RUNMODAL;
      CLEAR(fTabCos);
      rLinea.FILTERGROUP(2);
      rLinea.SETRANGE("Descripcion Marca");
      rLinea.FILTERGROUP(0);
      rLinea.RESET;
    END;

    PROCEDURE Borrar_Marca_Circuito@10(VAR rLin@1103355000 : Record 7010190);
    VAR
      rLinea@1103355001 : Record 7010190;
      sw@1103355002 : Boolean;
      textodescripcion@1103355003 : Text[30];
      textoconfirma@1103355004 : Text[80];
      ventana@1103355005 : Dialog;
      usuariomarca@1103355006 : Code[10];
    BEGIN
      // Borrar_Marca_Circuito
      //
      ventana.OPEN(Text040+
                   '\'+
                   Text041);
      ventana.INPUT(1, textodescripcion);
      ventana.CLOSE;
      IF textodescripcion = '' THEN
        ERROR(Text042);
      textoconfirma := Text045 + textodescripcion +
                       Text044;
      IF NOT CONFIRM(textoconfirma) THEN
        EXIT;
      rLinea.RESET;
      rLinea.SETCURRENTKEY("Descripcion Marca");
      rLinea.SETRANGE("Descripcion Marca", textodescripcion);
      IF rLinea.FINDSET THEN BEGIN
        REPEAT
          rLinea.Usuario := '';
          rLinea."Descripcion Marca" := '';
          rLinea.MODIFY;
        UNTIL rLinea.NEXT = 0;
      END;
    END;

    PROCEDURE Pasar_Factura_Venta@28(par_Nfactura@1103355000 : Code[20];par_Tipo@1103355001 : Integer);
    VAR
      rCab@1103355002 : Record 36;
    BEGIN
      nFac := par_Nfactura;
      CASE par_Tipo OF
        rCab."Document Type"::Invoice: TipoFac := Text047;
        rCab."Document Type"::"Credit Memo": TipoFac := Text048;
      END;
    END;

    LOCAL PROCEDURE _CheckReasonCode@1000000008();
    VAR
      lrReason@1000000000 : Record 231;
      TextCodAu@1000000001 : TextConst 'ENU=ATENNEA;ESP=ATENNEA';
    BEGIN
      // _CheckReasonCode

      IF NOT lrReason.GET(TextCodAu) THEN
      BEGIN
        lrReason.INIT;
        lrReason.Code        := TextCodAu;
        lrReason.Description := lrReason.Code;
        lrReason.INSERT;
      END;
    END;

    BEGIN
    {
      $001 AJS 23082012 Control de seguridad por usuario

      $002 AJS 22102012 Rellenar el codigo de procedencia de los movimientos de FPR con el codigo de proveedor

      $003 AJS 26082013 Elimino las referencias a la tabla Maestro de claves porque es una tabla obsoleta

      $004 AJS 04102013 Marco los asientos de FPR como Asiento automatico para que no se puedan borrar

      $005 AJS 19112013 Sustituyo la clave a la hora de buscar el ultimo numero de asiento

      $006 AJS 18062014 Comprobar si la fecha de registro esta bloqueada en contabilidad

      $007 AJS 21112014 Utilizo la funcion ActualizaCamposImporte de las lineas de factura para rellenar los campos
                        Amount y Amount including VAT

      $008 AJS 21012015 Ejecutar el proceso estandar de Lanzar factura

      $009 AJS 09022015 Rellenar el campo Source code del diario general

      $010 AJS 06052015 El campo Source code no se rellena hasta el final del proceso

      $011 AJS 07052015 Algunas empresas no registran costes porque se traspasan a comercializadora

      $012 AJS 11052015 Algunas empresas no registran facturas porque se traspasan a comercializadora
    }
    END.
  }
}
