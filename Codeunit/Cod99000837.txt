OBJECT Codeunit 99000837 Prod. Order Line-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 337=rimd,
                TableData 99000849=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Reserved quantity cannot be greater than %1;ESP=La cantidad reservada no puede ser mayor que %1';
      Text002@1001 : TextConst 'ENU=must be filled in when a quantity is reserved;ESP=se debe rellenar cuando se ha reservado una cantidad';
      Text003@1002 : TextConst 'ENU=must not be changed when a quantity is reserved;ESP=no se debe modificar cuando se ha reservado una cantidad';
      Text004@1003 : TextConst 'ENU=Codeunit is not initialized correctly.;ESP=Codeunit no iniciada correctamente.';
      CreateReservEntry@1005 : Codeunit 99000830;
      ReservEngineMgt@1006 : Codeunit 99000831;
      ReservMgt@1007 : Codeunit 99000845;
      Blocked@1008 : Boolean;
      SetFromType@1009 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry';
      SetFromSubtype@1010 : Integer;
      SetFromID@1011 : Code[20];
      SetFromBatchName@1012 : Code[10];
      SetFromProdOrderLine@1013 : Integer;
      SetFromRefNo@1014 : Integer;
      SetFromVariantCode@1015 : Code[10];
      SetFromLocationCode@1016 : Code[10];
      SetFromSerialNo@1018 : Code[20];
      SetFromLotNo@1019 : Code[20];
      SetFromQtyPerUOM@1020 : Decimal;
      Text006@1021 : TextConst 'ENU=The %1 %2 %3 has item tracking. Do you want to delete it anyway?;ESP=%1 %2 %3 tiene seguimiento de productos. ¨Desea eliminarlo de todas maneras?';
      Text007@1017 : TextConst 'ENU=The %1 %2 %3 has components with item tracking. Do you want to delete it anyway?;ESP=%1 %2 %3 tiene componentes con seguimiento de productos. ¨Desea eliminarlo de todas maneras?';
      Text008@1022 : TextConst 'ENU=The %1 %2 %3 and its components have item tracking. Do you want to delete them anyway?;ESP=%1 %2 %3 y sus componentes tienen seguimiento de productos. ¨Desea eliminarlos de todas maneras?';

    PROCEDURE CreateReservation@1(VAR ProdOrderLine@1000 : Record 5406;Description@1001 : Text[50];ExpectedReceiptDate@1002 : Date;Quantity@1003 : Decimal;ForSerialNo@1004 : Code[20];ForLotNo@1005 : Code[20]);
    VAR
      ShipmentDate@1007 : Date;
    BEGIN
      IF SetFromType = 0 THEN
        ERROR(Text004);

      ProdOrderLine.TESTFIELD("Item No.");
      ProdOrderLine.TESTFIELD("Due Date");

      ProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
      IF ABS(ProdOrderLine."Remaining Qty. (Base)") < ABS(ProdOrderLine."Reserved Qty. (Base)") + Quantity THEN
        ERROR(
          Text000,
          ABS(ProdOrderLine."Remaining Qty. (Base)") - ABS(ProdOrderLine."Reserved Qty. (Base)"));

      ProdOrderLine.TESTFIELD("Location Code",SetFromLocationCode);
      ProdOrderLine.TESTFIELD("Variant Code",SetFromVariantCode);

      IF Quantity < 0 THEN
        ShipmentDate := ProdOrderLine."Due Date"
      ELSE BEGIN
        ShipmentDate := ExpectedReceiptDate;
        ExpectedReceiptDate := ProdOrderLine."Due Date";
      END;

      IF ProdOrderLine."Planning Flexibility" <> ProdOrderLine."Planning Flexibility"::Unlimited THEN
        CreateReservEntry.SetPlanningFlexibility(ProdOrderLine."Planning Flexibility");

      CreateReservEntry.CreateReservEntryFor(
        DATABASE::"Prod. Order Line",ProdOrderLine.Status,
        ProdOrderLine."Prod. Order No.",'',ProdOrderLine."Line No.",0,
        ProdOrderLine."Qty. per Unit of Measure",Quantity,ForSerialNo,ForLotNo);
      CreateReservEntry.CreateReservEntryFrom(
        SetFromType,SetFromSubtype,SetFromID,SetFromBatchName,SetFromProdOrderLine,SetFromRefNo,
        SetFromQtyPerUOM,SetFromSerialNo,SetFromLotNo);
      CreateReservEntry.CreateReservEntry(
        ProdOrderLine."Item No.",ProdOrderLine."Variant Code",ProdOrderLine."Location Code",
        Description,ExpectedReceiptDate,ShipmentDate,0);

      SetFromType := 0;
    END;

    PROCEDURE CreateReservationSetFrom@9(FromType@1000 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry';FromSubtype@1001 : Integer;FromID@1002 : Code[20];FromBatchName@1003 : Code[10];FromProdOrderLine@1004 : Integer;FromRefNo@1005 : Integer;FromVariantCode@1006 : Code[10];FromLocationCode@1007 : Code[10];FromSerialNo@1009 : Code[20];FromLotNo@1010 : Code[20];FromQtyPerUOM@1011 : Decimal);
    BEGIN
      SetFromType := FromType;
      SetFromSubtype := FromSubtype;
      SetFromID := FromID;
      SetFromBatchName := FromBatchName;
      SetFromProdOrderLine := FromProdOrderLine;
      SetFromRefNo := FromRefNo;
      SetFromVariantCode := FromVariantCode;
      SetFromLocationCode := FromLocationCode;
      SetFromSerialNo := FromSerialNo;
      SetFromLotNo := FromLotNo;
      SetFromQtyPerUOM := FromQtyPerUOM;
    END;

    PROCEDURE FilterReservFor@12(VAR FilterReservEntry@1000 : Record 337;ProdOrderLine@1001 : Record 5406);
    BEGIN
      FilterReservEntry.SETRANGE("Source Type",DATABASE::"Prod. Order Line");
      FilterReservEntry.SETRANGE("Source Subtype",ProdOrderLine.Status);
      FilterReservEntry.SETRANGE("Source ID",ProdOrderLine."Prod. Order No.");
      FilterReservEntry.SETRANGE("Source Batch Name",'');
      FilterReservEntry.SETRANGE("Source Prod. Order Line",ProdOrderLine."Line No.");
      FilterReservEntry.SETRANGE("Source Ref. No.",0);
    END;

    PROCEDURE Caption@30(ProdOrderLine@1001 : Record 5406) CaptionText@1000 : Text[80];
    BEGIN
      CaptionText :=
        STRSUBSTNO('%1 %2 %3 %4',
          ProdOrderLine.Status,ProdOrderLine.TABLECAPTION,ProdOrderLine."Prod. Order No.",ProdOrderLine."Item No.");
    END;

    PROCEDURE FindReservEntry@4(ProdOrderLine@1000 : Record 5406;VAR ReservEntry@1001 : Record 337) : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,ProdOrderLine);
      EXIT(ReservEntry.FINDLAST);
    END;

    PROCEDURE VerifyChange@59(VAR NewProdOrderLine@1000 : Record 5406;VAR OldProdOrderLine@1001 : Record 5406);
    VAR
      ProdOrderLine@1005 : Record 5406;
      TempReservEntry@1002 : Record 337;
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
    BEGIN
      IF NewProdOrderLine.Status = NewProdOrderLine.Status::Finished THEN
        EXIT;
      IF Blocked THEN
        EXIT;
      IF NewProdOrderLine."Line No." = 0 THEN
        IF NOT ProdOrderLine.GET(
                 NewProdOrderLine.Status,
                 NewProdOrderLine."Prod. Order No.",
                 NewProdOrderLine."Line No.")
        THEN
          EXIT;

      NewProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewProdOrderLine."Reserved Qty. (Base)" <> 0;

      IF NewProdOrderLine."Due Date" = 0D THEN
        IF ShowError THEN
          NewProdOrderLine.FIELDERROR("Due Date",Text002)
        ELSE
          HasError := TRUE;

      IF NewProdOrderLine."Item No." <> OldProdOrderLine."Item No." THEN
        IF ShowError THEN
          NewProdOrderLine.FIELDERROR("Item No.",Text003)
        ELSE
          HasError := TRUE;
      IF (NewProdOrderLine."Location Code" <> OldProdOrderLine."Location Code") THEN
        IF ShowError THEN
          NewProdOrderLine.FIELDERROR("Location Code",Text003)
        ELSE
          HasError := TRUE;
      IF NewProdOrderLine."Variant Code" <> OldProdOrderLine."Variant Code" THEN
        IF ShowError THEN
          NewProdOrderLine.FIELDERROR("Variant Code",Text003)
        ELSE
          HasError := TRUE;
      IF NewProdOrderLine."Line No." <> OldProdOrderLine."Line No." THEN
        HasError := TRUE;

      IF HasError THEN
        IF (NewProdOrderLine."Item No." <> OldProdOrderLine."Item No.") OR
           FindReservEntry(NewProdOrderLine,TempReservEntry)
        THEN BEGIN
          IF (NewProdOrderLine."Item No." <> OldProdOrderLine."Item No.") THEN BEGIN
            ReservMgt.SetProdOrderLine(OldProdOrderLine);
            ReservMgt.DeleteReservEntries(TRUE,0);
            ReservMgt.SetProdOrderLine(NewProdOrderLine);
          END ELSE BEGIN
            ReservMgt.SetProdOrderLine(NewProdOrderLine);
            ReservMgt.DeleteReservEntries(TRUE,0);
          END;
          ReservMgt.AutoTrack(NewProdOrderLine."Remaining Qty. (Base)");
        END;

      IF HasError OR (NewProdOrderLine."Due Date" <> OldProdOrderLine."Due Date")
      THEN BEGIN
        AssignForPlanning(NewProdOrderLine);
        IF (NewProdOrderLine."Item No." <> OldProdOrderLine."Item No.") OR
             (NewProdOrderLine."Variant Code" <> OldProdOrderLine."Variant Code") OR
             (NewProdOrderLine."Location Code" <> OldProdOrderLine."Location Code")
          THEN
            AssignForPlanning(OldProdOrderLine);
      END;
    END;

    PROCEDURE VerifyQuantity@5(VAR NewProdOrderLine@1000 : Record 5406;VAR OldProdOrderLine@1001 : Record 5406);
    VAR
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      IF Blocked THEN
        EXIT;

      WITH NewProdOrderLine DO BEGIN
        IF Status = Status::Finished THEN
          EXIT;
        IF "Line No." = OldProdOrderLine."Line No." THEN
          IF "Quantity (Base)" = OldProdOrderLine."Quantity (Base)" THEN
            EXIT;
        IF "Line No." = 0 THEN
          IF NOT ProdOrderLine.GET(Status,"Prod. Order No.","Line No.") THEN
            EXIT;
        ReservMgt.SetProdOrderLine(NewProdOrderLine);
        IF "Qty. per Unit of Measure" <> OldProdOrderLine."Qty. per Unit of Measure" THEN
          ReservMgt.ModifyUnitOfMeasure;
        ReservMgt.DeleteReservEntries(FALSE,"Remaining Qty. (Base)");
        ReservMgt.ClearSurplus;
        ReservMgt.AutoTrack("Remaining Qty. (Base)");
        AssignForPlanning(NewProdOrderLine);
      END;
    END;

    PROCEDURE UpdatePlanningFlexibility@2(VAR ProdOrderLine@1000 : Record 5406);
    VAR
      ReservEntry@1001 : Record 337;
    BEGIN
      IF FindReservEntry(ProdOrderLine,ReservEntry) THEN
        ReservEntry.MODIFYALL("Planning Flexibility",ProdOrderLine."Planning Flexibility");
    END;

    PROCEDURE TransferPOLineToPOLine@31(VAR OldProdOrderLine@1000 : Record 5406;VAR NewProdOrderLine@1001 : Record 5406;TransferQty@1002 : Decimal;TransferAll@1003 : Boolean);
    VAR
      OldReservEntry@1004 : Record 337;
      OldReservEntry2@1005 : Record 337;
      NewReservEntry@1006 : Record 337;
      ActionMessageEntry@1007 : Record 99000849;
      ActionMessageEntry2@1008 : Record 99000849;
      Status@1009 : 'Reservation,Tracking,Surplus,Prospect';
    BEGIN
      IF NOT FindReservEntry(OldProdOrderLine,OldReservEntry) THEN
        EXIT;

      OldReservEntry.Lock;

      NewProdOrderLine.TESTFIELD("Item No.",OldProdOrderLine."Item No.");
      NewProdOrderLine.TESTFIELD("Variant Code",OldProdOrderLine."Variant Code");
      NewProdOrderLine.TESTFIELD("Location Code",OldProdOrderLine."Location Code");

      IF TransferAll THEN BEGIN
        OldReservEntry.FINDSET;
        OldReservEntry.TESTFIELD("Qty. per Unit of Measure",NewProdOrderLine."Qty. per Unit of Measure");
        REPEAT
          OldReservEntry.TESTFIELD("Item No.",OldProdOrderLine."Item No.");
          OldReservEntry.TESTFIELD("Variant Code",OldProdOrderLine."Variant Code");
          OldReservEntry.TESTFIELD("Location Code",OldProdOrderLine."Location Code");

          NewReservEntry := OldReservEntry;
          NewReservEntry."Source Type" := DATABASE::"Prod. Order Line";
          NewReservEntry."Source Subtype" := NewProdOrderLine.Status;
          NewReservEntry."Source ID" := NewProdOrderLine."Prod. Order No.";
          NewReservEntry."Source Batch Name" := '';
          NewReservEntry."Source Prod. Order Line" := NewProdOrderLine."Line No.";
          NewReservEntry."Source Ref. No." := 0;

          IF OldReservEntry."Reservation Status" = OldReservEntry."Reservation Status"::Surplus THEN BEGIN
            NewReservEntry.MODIFY;
            ActionMessageEntry.FilterFromReservEntry(OldReservEntry);
            IF ActionMessageEntry.FINDSET THEN REPEAT
              ActionMessageEntry2 := ActionMessageEntry;
              ActionMessageEntry2.TransferFromReservEntry(NewReservEntry);
              ActionMessageEntry2.MODIFY;
            UNTIL ActionMessageEntry.NEXT = 0;
          END ELSE
            IF OldReservEntry2.GET(OldReservEntry."Entry No.",NOT OldReservEntry.Positive) THEN BEGIN
              IF CreateReservEntry.HasSamePointer(OldReservEntry2,NewReservEntry) THEN BEGIN
                OldReservEntry2.DELETE;
                NewReservEntry.DELETE;
              END ELSE
                NewReservEntry.MODIFY;
            END ELSE
              NewReservEntry.MODIFY;

        UNTIL (OldReservEntry.NEXT = 0);
      END ELSE
        FOR Status := Status::Reservation TO Status::Prospect DO BEGIN
          IF TransferQty = 0 THEN
            EXIT;
          OldReservEntry.SETRANGE("Reservation Status",Status);

          IF OldReservEntry.FINDSET THEN
            REPEAT
              OldReservEntry.TESTFIELD("Item No.",OldProdOrderLine."Item No.");
              OldReservEntry.TESTFIELD("Variant Code",OldProdOrderLine."Variant Code");
              OldReservEntry.TESTFIELD("Location Code",OldProdOrderLine."Location Code");

              TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Prod. Order Line",
                NewProdOrderLine.Status,NewProdOrderLine."Prod. Order No.",'',NewProdOrderLine."Line No.",0,
                NewProdOrderLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

            UNTIL (OldReservEntry.NEXT = 0) OR (TransferQty = 0);
        END; // DO
    END;

    PROCEDURE TransferPOLineToItemJnlLine@3(VAR OldProdOrderLine@1000 : Record 5406;VAR NewItemJnlLine@1001 : Record 83;TransferQty@1002 : Decimal);
    VAR
      OldReservEntry@1003 : Record 337;
      ItemTrackingFilterIsSet@1005 : Boolean;
      EndLoop@1006 : Boolean;
    BEGIN
      IF NOT FindReservEntry(OldProdOrderLine,OldReservEntry) THEN
        EXIT;

      OldReservEntry.Lock;

      // Handle Item Tracking on output:
      CLEAR(CreateReservEntry);
      IF NewItemJnlLine."Entry Type" = NewItemJnlLine."Entry Type"::Output THEN
        IF (NewItemJnlLine."Serial No." <> '') OR (NewItemJnlLine."Lot No." <> '') THEN BEGIN
          // Try to match against Item Tracking on the prod. order line:
          OldReservEntry.SETRANGE("Serial No.",NewItemJnlLine."Serial No.");
          OldReservEntry.SETRANGE("Lot No.",NewItemJnlLine."Lot No.");
          IF OldReservEntry.ISEMPTY THEN BEGIN
            OldReservEntry.SETRANGE("Serial No.");
            OldReservEntry.SETRANGE("Lot No.");
          END ELSE
            ItemTrackingFilterIsSet := TRUE;
        END;

      NewItemJnlLine.TESTFIELD("Item No.",OldProdOrderLine."Item No.");
      NewItemJnlLine.TESTFIELD("Variant Code",OldProdOrderLine."Variant Code");
      NewItemJnlLine.TESTFIELD("Location Code",OldProdOrderLine."Location Code");

      IF TransferQty = 0 THEN
        EXIT;

      IF ReservEngineMgt.InitRecordSet(OldReservEntry) THEN
        REPEAT
          IF (NewItemJnlLine."Serial No." <> '') OR (NewItemJnlLine."Lot No." <> '') THEN
            CreateReservEntry.SetNewSerialLotNo(NewItemJnlLine."Serial No.",NewItemJnlLine."Lot No.");
          OldReservEntry.TESTFIELD("Item No.",OldProdOrderLine."Item No.");
          OldReservEntry.TESTFIELD("Variant Code",OldProdOrderLine."Variant Code");
          OldReservEntry.TESTFIELD("Location Code",OldProdOrderLine."Location Code");

          TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Item Journal Line",
            NewItemJnlLine."Entry Type",NewItemJnlLine."Journal Template Name",NewItemJnlLine."Journal Batch Name",0,
            NewItemJnlLine."Line No.",NewItemJnlLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

          IF ReservEngineMgt.NEXTRecord(OldReservEntry) = 0 THEN
            IF ItemTrackingFilterIsSet THEN BEGIN
              OldReservEntry.SETRANGE("Serial No.");
              OldReservEntry.SETRANGE("Lot No.");
              ItemTrackingFilterIsSet := FALSE;
              EndLoop := NOT ReservEngineMgt.InitRecordSet(OldReservEntry);
            END ELSE
              EndLoop := TRUE;

        UNTIL EndLoop OR (TransferQty = 0);
    END;

    PROCEDURE RenameLine@10(VAR NewProdOrderLine@1001 : Record 5406;VAR OldProdOrderLine@1000 : Record 5406);
    BEGIN
      ReservEngineMgt.RenamePointer(DATABASE::"Prod. Order Line",
        OldProdOrderLine.Status,
        OldProdOrderLine."Prod. Order No.",
        '',
        OldProdOrderLine."Line No.",
        0,
        NewProdOrderLine.Status,
        NewProdOrderLine."Prod. Order No.",
        '',
        NewProdOrderLine."Line No.",
        0);
    END;

    PROCEDURE DeleteLineConfirm@20(VAR ProdOrderLine@1000 : Record 5406) : Boolean;
    VAR
      ReservEntry@1001 : Record 337;
      ReservEntry2@1002 : Record 337;
      ConfirmMessage@1004 : Text[250];
      HasItemTracking@1003 : 'None,Line,Components,Line and Components';
    BEGIN
      WITH ReservEntry DO BEGIN
        FilterReservFor(ReservEntry, ProdOrderLine);
        SETFILTER("Item Tracking", '<> %1', "Item Tracking"::None);
        IF NOT ISEMPTY THEN
          HasItemTracking := HasItemTracking::Line;

        SETRANGE("Source Type",DATABASE::"Prod. Order Component");
        SETFILTER("Source Ref. No.",' > %1',0);
        IF NOT ISEMPTY THEN
          IF HasItemTracking = HasItemTracking::Line THEN
            HasItemTracking := HasItemTracking::"Line and Components"
          ELSE
            HasItemTracking := HasItemTracking::Components;

        IF HasItemTracking = HasItemTracking::None THEN
          EXIT(TRUE)
        ELSE BEGIN
          CASE HasItemTracking OF
            HasItemTracking::Line : ConfirmMessage := Text006;
            HasItemTracking::Components : ConfirmMessage := Text007;
            HasItemTracking::"Line and Components" : ConfirmMessage := Text008;
          END;

          IF NOT CONFIRM(ConfirmMessage, FALSE, ProdOrderLine.Status, ProdOrderLine.TABLECAPTION, ProdOrderLine."Line No.") THEN
            EXIT(FALSE);
        END;

        SETFILTER("Source Type",'%1|%2', DATABASE::"Prod. Order Line",DATABASE::"Prod. Order Component");
        SETRANGE("Source Ref. No.");
        IF FINDSET THEN
          REPEAT
            ReservEntry2 := ReservEntry;
            ReservEntry2.ClearItemTrackingFields;
            ReservEntry2.MODIFY;
          UNTIL NEXT = 0;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE DeleteLine@6(VAR ProdOrderLine@1000 : Record 5406);
    BEGIN
      IF Blocked THEN
        EXIT;

      WITH ProdOrderLine DO BEGIN
        ReservMgt.SetProdOrderLine(ProdOrderLine);
        ReservMgt.DeleteReservEntries(TRUE,0);
        ReservMgt.ClearActionMessageReferences;
        CALCFIELDS("Reserved Qty. (Base)");
        AssignForPlanning(ProdOrderLine);
      END;
    END;

    PROCEDURE AssignForPlanning@7(VAR ProdOrderLine@1000 : Record 5406);
    VAR
      PlanningAssignment@1001 : Record 99000850;
    BEGIN
      WITH ProdOrderLine DO BEGIN
        IF Status = Status::Simulated THEN
          EXIT;
        IF "Item No." <> '' THEN
          PlanningAssignment.ChkAssignOne("Item No.","Variant Code","Location Code",WORKDATE);
      END;
    END;

    PROCEDURE Block@8(SetBlocked@1000 : Boolean);
    BEGIN
      Blocked := SetBlocked;
    END;

    PROCEDURE CallItemTracking@14(VAR ProdOrderLine@1003 : Record 5406);
    VAR
      TrackingSpecification@1001 : Record 336;
      ItemTrackingForm@1002 : Form 6510;
      ItemTrackingMgt@1000 : Codeunit 6500;
    BEGIN
      IF ProdOrderLine.Status = ProdOrderLine.Status::Finished THEN
        ItemTrackingMgt.CallPostedItemTrackingForm4(DATABASE::"Prod. Order Line",
          ProdOrderLine."Prod. Order No.",ProdOrderLine."Line No.",0)
      ELSE BEGIN
        ProdOrderLine.TESTFIELD("Item No.");
        InitTrackingSpecification(ProdOrderLine,TrackingSpecification);
        ItemTrackingForm.SetSource(TrackingSpecification,ProdOrderLine."Due Date");
        ItemTrackingForm.RUNMODAL;
      END;
    END;

    PROCEDURE InitTrackingSpecification@13(VAR ProdOrderLine@1001 : Record 5406;VAR TrackingSpecification@1003 : Record 336);
    BEGIN
      TrackingSpecification.INIT;
      TrackingSpecification."Source Type" := DATABASE::"Prod. Order Line";
      WITH ProdOrderLine DO BEGIN
        TrackingSpecification."Item No." := "Item No.";
        TrackingSpecification."Location Code" := "Location Code";
        TrackingSpecification.Description := Description;
        TrackingSpecification."Variant Code" := "Variant Code";
        TrackingSpecification."Source Subtype" := Status;
        TrackingSpecification."Source ID" := "Prod. Order No.";
        TrackingSpecification."Source Batch Name" := '';
        TrackingSpecification."Source Prod. Order Line" := "Line No.";
        TrackingSpecification."Source Ref. No." := 0;
        TrackingSpecification."Quantity (Base)" := "Quantity (Base)";
        TrackingSpecification."Qty. to Handle" := "Remaining Quantity";
        TrackingSpecification."Qty. to Handle (Base)" := "Remaining Qty. (Base)";
        TrackingSpecification."Qty. to Invoice" := "Remaining Quantity";
        TrackingSpecification."Qty. to Invoice (Base)" := "Remaining Qty. (Base)";
        TrackingSpecification."Quantity Handled (Base)" := "Finished Qty. (Base)";
        TrackingSpecification."Quantity Invoiced (Base)" := "Finished Qty. (Base)";
        TrackingSpecification."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
      END;
    END;

    PROCEDURE UpdateItemTrackingAfterPosting@11(ProdOrderLine@1000 : Record 5406);
    VAR
      ReservEntry@1001 : Record 337;
      CreateReservEntry@1002 : Codeunit 99000830;
    BEGIN
      // Used for updating Quantity to Handle after posting;
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      ReservEntry.SETRANGE("Source Type",DATABASE::"Prod. Order Line");
      ReservEntry.SETRANGE("Source Subtype",ProdOrderLine.Status);
      ReservEntry.SETRANGE("Source ID",ProdOrderLine."Prod. Order No.");
      ReservEntry.SETRANGE("Source Batch Name",'');
      ReservEntry.SETRANGE("Source Prod. Order Line",ProdOrderLine."Line No.");
      CreateReservEntry.UpdateItemTrackingAfterPosting(ReservEntry);
    END;

    BEGIN
    END.
  }
}
