OBJECT Codeunit 7009749 Procesar reservas interface TX
{
  OBJECT-PROPERTIES
  {
    Date=16/02/15;
    Time=18:31:45;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1103355008 : TextConst 'ENU=INCLUDING DATA\;ESP=INCORPORANDO DATOS\';
      Text001@1103355009 : TextConst 'ENU=Cancellations;ESP=Anulaciones';
      Text002@1103355010 : TextConst 'ENU=Modifications-Canc;ESP=Modificaciones-Anul';
      Text003@1103355011 : TextConst 'ENU=Modifications-Inserc;ESP=Modificaciones-Inserc';
      Text004@1103355012 : TextConst 'ENU=Insert;ESP=Inserciones';
      Text005@1103355013 : TextConst 'ENU=Validate dates;ESP=Valida Fechas';
      Text006@1103355014 : TextConst 'ENU=3FLG;ESP=3FLG';
      Text007@1103355015 : TextConst 'ENU=1100L;ESP=1100L';
      Text008@1103355016 : TextConst 'ENU=L1;ESP=L1';
      Text009@1103355017 : TextConst 'ENU=L2;ESP=L2';
      Text010@1103355018 : TextConst 'ENU=3D1100L1;ESP=3D1100L1';
      Text011@1103355019 : TextConst 'ENU=3D1100L2;ESP=3D1100L2';
      Text012@1103355020 : TextConst 'ENU=3D1100L3;ESP=3D1100L3';
      Text013@1103355021 : TextConst 'ENU=3D1100L4;ESP=3D1100L4';
      Text014@1103355022 : TextConst 'ENU=3D1100L5;ESP=3D1100L5';
      Text015@1103355023 : TextConst 'ENU=3D1100L6;ESP=3D1100L6';
      Text016@1103355024 : TextConst 'ENU=3D3002;ESP=3D3002';
      Text017@1103355025 : TextConst 'ENU=3D3002ZIEL;ESP=3D3002ZIEL';
      cPar@1103355000 : Codeunit 7009700;
      cFunRes@1103355001 : Codeunit 7009703;
      rHis@1103355002 : Record 7009751;
      rPar@1103355004 : Record 7010081;
      rCabInt@1103355005 : Record 7010076;
      rConHotel@1103355006 : Record 7009725;
      rDatosIns@1100217000 : Record 7009768;
      ventana@1103355007 : Dialog;
      Text018@1100217001 : TextConst 'ENU=You must set a filter in the touroperator field;ESP=Especifique un filtro de Touroperador';
      wTTOO@1000000000 : Code[10];

    PROCEDURE SeleccionarTipoProceso@1100217000(VAR prCab@1100217000 : Record 7010076);
    VAR
      lrCab@1100217001 : Record 7010076;
      lrFich@1100217002 : Record 7009899;
      lcProcWS@1100217003 : Codeunit 7009775;
    BEGIN
      // SeleccionarTipoProceso

      rPar.FINDFIRST;
      CASE rPar."Tipo proceso reservas" OF
        rPar."Tipo proceso reservas"::Texto:
        BEGIN
          CLEAR(lrCab);
          lrCab.COPY(prCab);
          lrCab.SETRANGE("Pasado errores", TRUE);
          lrCab.SETRANGE(Errores         , 0);
          IF lrCab.FINDFIRST THEN
            incorporar_datos(lrCab);
        END;

        rPar."Tipo proceso reservas"::WS:
        BEGIN
          CLEAR(lrCab);
          lrCab.COPY(prCab);
          lrCab.SETRANGE("Pasado errores", TRUE);
          lrCab.SETRANGE(Errores         , 0);
          IF lrCab.FINDFIRST THEN
            lcProcWS.IncorporarDatos(lrCab);
        END;

        rPar."Tipo proceso reservas"::Ambos:
        BEGIN
          IF (prCab.GETFILTER(TourOperador) = '') AND
             (prCab.GETFILTER(Bono) = '') AND
             (prCab.GETFILTER(Fichero) = '') THEN
            ERROR(Text018);

          CLEAR(lrCab);
          lrCab.COPY(prCab);
          lrCab.SETRANGE("Pasado errores", TRUE);
          lrCab.SETRANGE(Errores         , 0);
          IF lrCab.FINDFIRST THEN
          BEGIN
            lrFich.GET(lrCab.Fichero);
            CASE lrFich.Type OF
              lrFich.Type::"Web Service": lcProcWS.IncorporarDatos(lrCab);

              lrFich.Type::TXT: incorporar_datos(lrCab);
            END;
          END;
        END;
      END;
    END;

    PROCEDURE incorporar_datos@1(VAR par_cab@1103355000 : Record 7010076);
    VAR
      rCab@1103355001 : Record 7010076;
      rCab2@1103355002 : Record 7010076;
      lrCabRes@1103355003 : Record 7009741;
      w_total@1103355004 : Integer;
      w_linea@1103355005 : Integer;
      lrConvTO@1000000000 : Record 7010161;
    BEGIN
      // incorporar_datos

      rPar.GET;
      rDatosIns.FINDFIRST;

      CLEAR(rCab);
      rCab.COPY(par_cab);
      rCab.SETRANGE("Pasado errores", TRUE);
      rCab.SETRANGE(Errores         , 0);
      IF rCab.FINDSET THEN
      BEGIN
        w_total := rCab.COUNT;
        w_linea := 0;
        ventana.OPEN(Text000 +
                     '\' +
                     '#2####                #3####\' +
                     '\' +
                     '@1@@@@@@@@@@@@@@@@@@@@@@@@@@'+
                     '\' +
                     '#4#################' +
                     '\' +
                     '@5@@@@@@@@@@@@@@@@@');
        REPEAT
          //-$012rConvTO.GET(rCab.TourOperador);
          wTTOO := lrConvTO.ConversionTouroperador(rCab.TourOperador, rCab.Destino); //+$012

          w_linea := w_linea + 1;

          ventana.UPDATE(1, ROUND((w_linea * 10000) / w_total, 1));
          ventana.UPDATE(2, w_linea);
          ventana.UPDATE(3, w_total);
          ventana.UPDATE(4, '');
          ventana.UPDATE(5, 0);

          TratarDatos(rCab);

          // Se genera las cabeceras
          lrCabRes.SETCURRENTKEY(TourOperador,
                            Bono,
                            Temporada);
          //-$002lrCabRes.SETRANGE(TourOperador, rPar."Touroperador importacion");
          lrCabRes.SETRANGE(Bono        , rCab.Bono);
          lrCabRes.SETRANGE(Temporada   , rCab.Temporada);
          lrCabRes.SETRANGE("N§ Fichero", rCab.Fichero);
          IF lrCabRes.FINDSET THEN
          BEGIN
            REPEAT
              cFunRes.generar_cabecera(lrCabRes, FALSE);
              cFunRes.a¤adir_acompa¤ante(lrCabRes);
            UNTIL lrCabRes.NEXT = 0;
          END;

          rCab2 := rCab;
          rCab2.Estado := rCab2.Estado::Procesada;
          rCab2."Usuario proceso" := USERID;
          rCab2."Fecha Procesado" := CURRENTDATETIME;
          rCab2.MODIFY;
        UNTIL rCab.NEXT = 0;
        ventana.CLOSE;
      END;
    END;

    PROCEDURE TratarDatos@11(VAR prCab@1103355000 : Record 7010076);
    VAR
      lrTempRes@1103355001 : TEMPORARY Record 7010084;
      lrTempImp@1103355002 : TEMPORARY Record 7010084;
      lrTempExtras@1103355007 : TEMPORARY Record 7010084;
      lrTempAux@1103355003 : TEMPORARY Record 7010084;
      lrAcomp@1103355004 : Record 7009748;
      lwCont@1103355005 : Integer;
      lwTotal@1103355006 : Integer;
    BEGIN
      // TratarDatos

      //. Los extras se mueven a un archivo temporal aparte lrTempExtras

      GETReservasAnt(prCab, lrTempRes);

      GETReservasImp(prCab, lrTempImp);

      TratarHotelFicticcio(lrTempImp, lrTempExtras);

      IF lrTempImp.FINDSET THEN  // Busca su vinculaci¢n con reservas existentes
        REPEAT
          //IF lrTempImp."N§ Interno"=0 THEN
          BuscaReserva(lrTempRes,lrTempImp,0, FALSE);
        UNTIL lrTempImp.NEXT = 0;

      lrTempRes.RESET;
      IF lrTempRes.FINDSET(TRUE) THEN
        lrTempRes.MODIFYALL("Modificado Por",0);

      // Buscamos las personas o periodos que no han cambiado nada para no procesarlos
      Selecciona(lrTempRes,lrTempImp);

      lrTempImp.RESET;
      IF lrTempImp.FINDSET THEN  // Busca su vinculaci¢n con reservas existentes
        REPEAT
          BuscaReserva(lrTempRes,lrTempImp,0, FALSE);
        UNTIL lrTempImp.NEXT=0;

      // Comprobamos cuando una anulacion es por todo un periodo o solo de un pax
      lrTempImp.RESET;
      TrataAnulaciones(lrTempRes,lrTempImp);

      // Buscamos primero las anulaciones
      ventana.UPDATE(4,Text001);
      lrTempImp.RESET;
      lrTempImp.SETCURRENTKEY(NoPax,EsVuelo);
      lrTempImp.SETRANGE(TipoPax, lrTempImp.TipoPax::Anula);
      IF lrTempImp.FINDSET THEN
      BEGIN
        lwTotal := lrTempImp.COUNT;
        CLEAR(lwCont);
        lrAcomp.RESET;
        REPEAT
          BorraReserva(lrTempRes,lrTempImp);
          lwCont +=1;
          ventana.UPDATE(5,ROUND(lwCont/lwTotal*10000,1));
        UNTIL lrTempImp.NEXT = 0;
      END;

      // Luego las Inserciones Modificaciones
      ventana.UPDATE(4,Text002);
      lrTempImp.RESET;
      lrTempImp.SETCURRENTKEY("Fecha Entrada","Fecha Salida");
      lrTempImp.SETRANGE(TipoPax , lrTempImp.TipoPax::Modifica);
      lrTempImp.SETRANGE(TipoServ, lrTempImp.TipoServ::Anula);
      IF lrTempImp.FINDSET THEN
      BEGIN
        lwTotal := lrTempImp.COUNT;
        CLEAR(lwCont);
        REPEAT
          BorraReserva(lrTempRes,lrTempImp);
          lwCont +=1;
          ventana.UPDATE(5,ROUND(lwCont/lwTotal*10000,1));
        UNTIL lrTempImp.NEXT = 0;
      END;
      ventana.UPDATE(4,Text003);
      lrTempImp.SETFILTER(TipoServ, '<>%1',lrTempImp.TipoServ::Anula);
      IF lrTempImp.FINDFIRST THEN
      BEGIN
        InsertaReserva(lrTempRes,lrTempImp, lrTempExtras);
      END;

      // Luego las Inserciones puras al final
      ventana.UPDATE(4, Text004);
      lrTempImp.RESET;
      lrTempImp.SETCURRENTKEY(NoPax, EsVuelo);
      lrTempImp.SETRANGE(TipoPax, lrTempImp.TipoPax::Inserta);
      IF lrTempImp.FINDSET THEN
      BEGIN
        lrAcomp.RESET;
        InsertaReserva(lrTempRes, lrTempImp, lrTempExtras);
      END;

      // Finalmente validamos las fechas de entrada y salida
      // No se ha realizado anteriormente en las modificaciones porque al cambiar puede ocasionar errores de solapamiento de fechas
      ventana.UPDATE(4,Text005);
      lrTempImp.RESET;
      lrTempImp.SETRANGE("Validar Fecha",TRUE);
      IF lrTempImp.FINDSET THEN
      BEGIN
        lwTotal := lrTempImp.COUNT;
        CLEAR(lwCont);
        REPEAT
          ValidaFecha(lrTempImp);
          lwCont +=1;
          ventana.UPDATE(5,ROUND(lwCont/lwTotal*10000,1));
        UNTIL lrTempImp.NEXT = 0;
      END;
    END;

    PROCEDURE traduce_tipo_persona@8(par_touroperador@1103355000 : Code[10];par_persona@1103355001 : Code[10]) : Code[10];
    VAR
      rConv@1103355002 : Record 7009722;
    BEGIN
      // traduce_tipo_persona

      CLEAR(rConv);
      rConv.SETRANGE(TourOperador     , par_touroperador);
      rConv.SETRANGE("Tipo Persona TO", par_persona);
      IF rConv.FINDFIRST THEN
        ;
      EXIT(rConv."Tipo Persona");
    END;

    PROCEDURE verificar_plan_vuelo@35(par_vue@1103355000 : Record 7010077) : Time;
    VAR
      rPlan@1103355001 : Record 7009754;
    BEGIN
      // verificar_plan_vuelo
      //
      IF rPlan.GET(par_vue.Fecha, par_vue.Compa¤ia, par_vue.Vuelo, par_vue."IATA origen", par_vue."IATA destino") THEN BEGIN
        {*
        rPlan.Conservar := TRUE;
        IF rPlan."Entrada/Salida" = rPlan."Entrada/Salida"::Entrada THEN BEGIN
          IF rPlan."Hora Entrada" <> par_vue.Hora THEN BEGIN
            rPlan.VALIDATE(rPlan."Hora Entrada", par_vue.Hora);
            rPlan.Conservar := FALSE;
            rPlan.MODIFY;
          END;
        END
        ELSE BEGIN
          IF rPlan."Hora Salida" <> par_vue.Hora THEN BEGIN
            rPlan.VALIDATE(rPlan."Hora Salida", par_vue.Hora);
            rPlan.Conservar := FALSE;
            rPlan.MODIFY;
          END;
        END;
        *}
        IF rPlan."Entrada/Salida" = rPlan."Entrada/Salida"::Entrada THEN
          EXIT(rPlan."Hora Entrada")
        ELSE
          EXIT(rPlan."Hora Salida");
      END
      ELSE BEGIN
        CLEAR(rPlan);
        rPlan.Fecha := par_vue.Fecha;
        rPlan.Compa¤ia := par_vue.Compa¤ia;
        rPlan.Vuelo := par_vue.Vuelo;
        rPlan.Origen := par_vue."IATA origen";
        rPlan.Destino := par_vue."IATA destino";
        rPlan."Entrada/Salida" := par_vue."Tipo Vuelo";
        rPlan.Conservar := TRUE;
        IF rPlan."Entrada/Salida" = rPlan."Entrada/Salida"::Entrada THEN
          rPlan.VALIDATE(rPlan."Hora Entrada", par_vue.Hora)
        ELSE
          rPlan.VALIDATE(rPlan."Hora Salida", par_vue.Hora);
        rPlan.Conservar := FALSE;
        {
        rPlan.INSERT;
        }
        EXIT(par_vue.Hora);
      END;
    END;

    PROCEDURE GETReservasAnt@12(rCabInt@1103355000 : Record 7010076;VAR rtRI@1103355001 : TEMPORARY Record 7010084);
    VAR
      lrCabRes@1103355002 : Record 7009741;
      lrPeriodo@1103355003 : Record 7009742;
      lrAcomp@1103355004 : Record 7009748;
      lrPer@1103355005 : Record 7009742;
      lrHotel@1103355007 : Record 7009724;
      lwCont@1103355006 : Integer;
    BEGIN
      // GETReservasAnt

      rtRI.RESET;
      IF rtRI.FIND('-') THEN
        rtRI.DELETEALL;
      CLEAR(lwCont);

      lrCabRes.RESET;
      lrPeriodo.RESET;
      lrAcomp.RESET;

      lrCabRes.SETCURRENTKEY(TourOperador,Bono,Temporada);
      lrCabRes.SETRANGE(Bono                , rCabInt.Bono);
      lrCabRes.SETRANGE("TourOperador Venta", wTTOO); //+$12
      lrCabRes.SETRANGE(Temporada           , rCabInt.Temporada); //+$001
      IF lrCabRes.FINDSET THEN
      BEGIN
        REPEAT
          lrAcomp.SETRANGE(Delegacion    , lrCabRes.Delegacion);
          lrAcomp.SETRANGE("N§ Interno"  , lrCabRes."N§ Interno");
          IF lrAcomp.FINDSET THEN
          BEGIN
            REPEAT
              rtRI.INIT;
              rtRI.RI               := rtRI.RI::Reserva;
              rtRI.Nombre           := DELCHR(lrAcomp.Nombre, '>', ' '); // le quitamos los espacios en blanco del final
              rtRI.Delegacion       := lrCabRes.Delegacion;
              rtRI."N§ Interno"     := lrCabRes."N§ Interno";
              rtRI.Responsable      := lrAcomp."N§ Acompa¤ante" =1;
              rtRI."No Acompa¤ante" := lrAcomp."N§ Acompa¤ante";
              rtRI.Bono             := lrCabRes.Bono;
              rtRI.Temporada        := lrCabRes.Temporada;

              lrPeriodo.SETRANGE(Delegacion   , lrCabRes.Delegacion);
              lrPeriodo.SETRANGE("N§ Interno" , lrCabRes."N§ Interno");
              IF lrPeriodo.FINDSET THEN
              BEGIN
                REPEAT
                  rtRI.Hotel              := lrPeriodo."Hotel TO";
                  rtRI.Habitacion         := lrPeriodo."Habitacion TO";
                  rtRI."Fecha Entrada"    := lrPeriodo."Fecha entrada";
                  rtRI."Fecha Salida"     := lrPeriodo."Fecha salida";
                  rtRI.Regimen            := lrPeriodo."Regimen TO";
                  rtRI.Periodo            := lrPeriodo."N§ Periodo";
                  rtRI."Transfer Privado" := lrPeriodo."Transfer Privado";

                  //+$007 <
                  IF _PaqueteTieneTransfer(lrPeriodo.Paquete) THEN
                  BEGIN
                    IF lrPeriodo."Transfer Privado" IN [lrPeriodo."Transfer Privado"::Ambos,lrPeriodo."Transfer Privado"::Entrada] THEN
                      rtRI."Servicio transfer llegada" := 'P'   //. P = Privado
                    ELSE
                      rtRI."Servicio transfer llegada" := 'S';  //. S = Shared

                    IF lrPeriodo."Transfer Privado" IN [lrPeriodo."Transfer Privado"::Ambos,lrPeriodo."Transfer Privado"::Salida] THEN
                      rtRI."Servicio transfer salida" := 'P'   //. P = Privado
                    ELSE
                      rtRI."Servicio transfer salida" := 'S';  //. S = Shared
                  END
                  ELSE
                  BEGIN
                    rtRI."Servicio transfer llegada" := 'N'; //. N = None
                    rtRI."Servicio transfer salida" := 'N';  //. N = None
                  END;
                  //+$007 >

                  // Buscamos si el hotel es ficticio
                  IF lrHotel.GET(lrPeriodo."Hotel reservado") THEN
                    rtRI."Hotel Ficticio" := lrHotel."Hotel Ficticio";

                  lwCont += 1;
                  rtRI.No  := lwCont;
                  rtRI.INSERT;
                UNTIL lrPeriodo.NEXT=0;
              END;

            UNTIL lrAcomp.NEXT=0;
          END;
        UNTIL lrCabRes.NEXT=0;
      END;
    END;

    PROCEDURE GETReservasImp@18(prCabInt@1103355000 : Record 7010076;VAR prtRI@1103355001 : TEMPORARY Record 7010084);
    VAR
      lwCont@1103355002 : Integer;
      lrHotInt@1103355003 : Record 7010078;
      lrVueInt@1103355004 : Record 7010077;
      lrServ@1103355005 : Record 7010080;
      lrServ2@1103355006 : Record 7010080;
      lrPax@1103355007 : Record 7010079;
      lrAcomp@1103355008 : Record 7009748;
      lrPlanVue@1103355009 : Record 7009754;
      lrDel@1103355010 : Record 7009718;
      lwEncontrado@1103355011 : Boolean;
      lwOk@1103355012 : Boolean;
      lwPos@1103355013 : Integer;
    BEGIN
      // GETReservasImp

      prtRI.RESET;
      IF prtRI.FINDSET(TRUE) THEN
        prtRI.DELETEALL;

      CLEAR(lwCont);

      lrHotInt.RESET;

      lrPax.RESET;
      lrPax.SETRANGE(Fichero        , prCabInt.Fichero);
      lrPax.SETRANGE(TourOperador   , prCabInt.TourOperador);
      lrPax.SETRANGE(Bono           , prCabInt.Bono);
      lrPax.SETRANGE(Temporada      , prCabInt.Temporada);

      prtRI.RI               := prtRI.RI::Importacion;
      prtRI.Bono             := prCabInt.Bono;
      prtRI.Temporada        := prCabInt.Temporada;
      prtRI."Fecha creacion" := prCabInt."Fecha creacion";
      prtRI.Fichero          := prCabInt.Fichero;
      prtRI."Tipo operacion" := prCabInt."Tipo operacion"; //+$008

      IF lrPax.FINDSET THEN
      BEGIN
        REPEAT
          CASE lrPax."Tipo Registro" OF
            lrPax."Tipo Registro"::Ok          : prtRI.TipoPax:= prtRI.TipoPax::Inserta;
            lrPax."Tipo Registro"::Cancelacion : prtRI.TipoPax:= prtRI.TipoPax::Anula;
            lrPax."Tipo Registro"::Modificacion: prtRI.TipoPax:= prtRI.TipoPax::Modifica;
          END;
          prtRI."ID Pax"           := lrPax."ID Pax";
          prtRI.NoPax              := lrPax.Contador;
          prtRI.Nombre             := DELCHR(lrPax.Nombre, '>', ' '); // Le quitamos los espacios en blanco de la derecha
          prtRI."Tipo Persona"     := lrPax."Tipo Persona";
          prtRI.Edad               := lrPax.Edad;
          prtRI."Fecha Nacimiento" := lrPax."Fecha Nacimiento";

          // Hoteles

          lrServ.RESET;
          lrServ.SETRANGE(Fichero         , prCabInt.Fichero);
          lrServ.SETRANGE(Touroperador    , prCabInt.TourOperador);
          lrServ.SETRANGE(Bono            , prCabInt.Bono);
          lrServ.SETRANGE(Temporada       , prCabInt.Temporada);
          lrServ.SETRANGE("Tipo Servicio" , lrServ."Tipo Servicio"::Hotel);
          lrServ.SETRANGE(lrServ.Persona , lrPax.Contador);
          IF lrServ.FINDSET THEN
          BEGIN
            REPEAT
              lrHotInt.SETRANGE(Fichero       , prCabInt.Fichero);
              lrHotInt.SETRANGE(Touroperador  , prCabInt.TourOperador);
              lrHotInt.SETRANGE(Bono          , prCabInt.Bono);
              lrHotInt.SETRANGE(Temporada     , prCabInt.Temporada);
              lrHotInt.SETRANGE("N§ Servicio" , lrServ."N§ Servicio");
              lrHotInt.SETRANGE(Excluido      , FALSE); // JPT 18/11/08
              IF lrHotInt.FINDFIRST THEN
              BEGIN
                prtRI.Hotel            := lrHotInt.Hotel;
                // Buscamo si el hotel es ficticio
                EsHotelFicticio(prtRI);

                prtRI.Habitacion       := lrHotInt.Habitacion;
                prtRI."Fecha Entrada"  := lrHotInt."Fecha entrada";
                prtRI."Fecha Salida"   := lrHotInt."Fecha salida";
                prtRI.Regimen          := lrHotInt.Regimen;
                prtRI.Paquete          := lrHotInt."Paquete asociado";
                prtRI."Orden Vuelo"    := lrHotInt."Orden Vuelo";
                prtRI."N§ Habitaciones":= lrHotInt."N§ Habitaciones";
                //+$007 <
                prtRI."Servicio transfer llegada" := lrHotInt."Servicio transfer llegada";
                prtRI."Servicio transfer salida"  := lrHotInt."Servicio transfer salida";
                //+$007 <
                CASE lrHotInt."Tipo Registro" OF
                  lrHotInt."Tipo Registro"::Ok         : prtRI.TipoServ:=prtRI.TipoServ::Inserta;
                  lrHotInt."Tipo Registro"::Cancelacion: prtRI.TipoServ:=prtRI.TipoServ::Anula;
                END;
                lwCont +=1;
                prtRI.No  := lwCont;

                // AJS 30.08.2005
                // Cambiamos la codificacion de los hoteles que simulan los transfer aereos
                //prtRI.EsVuelo := STRPOS(UPPERCASE(prtRI.Hotel),Text006) <> 0;

                // AJS 05.10.2005
                // Incluimos nuevos codigos para indicar los transfer aereos
                //prtRI.EsVuelo := STRPOS(UPPERCASE(prtRI.Hotel), Text007) <> 0;

                //prtRI.EsVuelo := (STRPOS(UPPERCASE(prtRI.Hotel), Text007) <> 0) OR
                //                 (STRPOS(UPPERCASE(prtRI.Hotel), Text008) <> 0) OR
                //                 (STRPOS(UPPERCASE(prtRI.Hotel), Text009) <> 0);

                // AJS 16.12.2005
                // Cambio en los codigos de hoteles de transfer aereo

                CLEAR(lwPos);
                IF prtRI.Hotel IN [Text010, Text011, Text012, Text013, Text014, Text015] THEN
                  lwPos := 1;

                prtRI.EsVuelo := lwPos <> 0;

                // AJS 02.11.2005
                // Si es un transfer aereo hay que comprobar si la delegacion esta marcada para trabajar con estos codigos
                // como si fueran hoteles normales, para poder hacer el pago en Hotel Payment

                IF prtRI.EsVuelo THEN BEGIN
                  lrDel.FIND('-');
                  IF lrDel."Pago transfer aereo Hotel Paym" THEN
                    prtRI.EsVuelo := FALSE;
                END;

                // Lo consideraremos igual si se trata de cruceros
                // prtRI.EsVuelo := prtRI.EsVuelo OR (UPPERCASE(prtRI.Hotel) IN [Text016,Text017]);

                // Vuelos
                CLEAR(prtRI."Vuelo salida");
                CLEAR(prtRI."Hora salida");
                CLEAR(prtRI."Compa¤ia salida");
                CLEAR(prtRI."IATA origen salida");
                CLEAR(prtRI."IATA destino salida");
                CLEAR(prtRI."Vuelo entrada");
                CLEAR(prtRI."Hora entrada");
                CLEAR(prtRI."Compa¤ia entrada");
                CLEAR(prtRI."IATA origen entrada");
                CLEAR(prtRI."IATA destino entrada");

                lrServ2.RESET;
                lrServ2.SETRANGE(Fichero         , prCabInt.Fichero);
                lrServ2.SETRANGE(Touroperador    , prCabInt.TourOperador);
                lrServ2.SETRANGE(Bono            , prCabInt.Bono);
                lrServ2.SETRANGE(Temporada       , prCabInt.Temporada);
                lrServ2.SETRANGE("Tipo Servicio" , lrServ2."Tipo Servicio"::Transfer);
                lrServ2.SETRANGE(Persona        , lrPax.Contador);
                IF lrServ2.FIND('-') THEN BEGIN
                  REPEAT
                    lrVueInt.RESET;
                    lrVueInt.SETRANGE(Fichero       , prCabInt.Fichero);
                    lrVueInt.SETRANGE(TourOperador  , prCabInt.TourOperador);
                    lrVueInt.SETRANGE(Bono          , prCabInt.Bono);
                    lrVueInt.SETRANGE(Temporada     , prCabInt.Temporada);
                    lrVueInt.SETRANGE("N§ Servicio" , lrServ2."N§ Servicio");
                    IF lrVueInt.FIND('-') THEN BEGIN
                      REPEAT
                        IF lrVueInt."Tipo Vuelo" = lrVueInt."Tipo Vuelo"::Salida THEN BEGIN
                          // Solo se lo asignamos a un periodo si es el ultimo
                          lwOk := prtRI."Fecha Salida" = lrVueInt.Fecha;

                          IF lwOk THEN BEGIN
                            prtRI."Vuelo salida"       := lrVueInt.Vuelo;
                            prtRI."Hora salida"        := lrVueInt.Hora;
                            prtRI."Compa¤ia salida"    := lrVueInt.Compa¤ia;
                            prtRI."IATA origen salida" := lrVueInt."IATA origen";
                            prtRI."IATA destino salida":= lrVueInt."IATA destino";
                          END;

                          // Vuelo Salida
                          lrPlanVue.RESET;
                          lrPlanVue.SETRANGE(Fecha   , lrVueInt.Fecha);
                          lrPlanVue.SETRANGE(Vuelo   , lrVueInt.Vuelo);
                          lrPlanVue.SETRANGE(Compa¤ia, lrVueInt.Compa¤ia);
                          lrPlanVue.SETRANGE(Origen  , lrVueInt."IATA origen");
                          lrPlanVue.SETRANGE(Destino , lrVueInt."IATA destino");
                          IF lrPlanVue.FIND('-') THEN BEGIN
                            IF (prtRI."Hora salida" = 0T) AND lwOk THEN
                              prtRI."Hora salida" := lrPlanVue."Hora Salida";
                          END;

                        END
                        ELSE BEGIN
                          IF lrVueInt."Tipo Vuelo" = lrVueInt."Tipo Vuelo"::Entrada THEN BEGIN
                            // Solo se lo asignamos a un periodo si es el primero
                            lwOk := prtRI."Fecha Entrada" = lrVueInt.Fecha;

                            IF lwOk THEN BEGIN
                              prtRI."Vuelo entrada"        := lrVueInt.Vuelo;
                              prtRI."Hora entrada"         := lrVueInt.Hora;
                              prtRI."Compa¤ia entrada"     := lrVueInt.Compa¤ia;
                              prtRI."IATA origen entrada"  := lrVueInt."IATA origen";
                              prtRI."IATA destino entrada" := lrVueInt."IATA destino";
                            END;

                            // Vuelo entrada
                            lrPlanVue.RESET;
                            lrPlanVue.SETRANGE(Fecha   , lrVueInt.Fecha);
                            lrPlanVue.SETRANGE(Vuelo   , lrVueInt.Vuelo);
                            lrPlanVue.SETRANGE(Compa¤ia, lrVueInt.Compa¤ia);
                            lrPlanVue.SETRANGE(Origen  , lrVueInt."IATA origen");
                            lrPlanVue.SETRANGE(Destino , lrVueInt."IATA destino");
                            IF lrPlanVue.FIND('-') THEN BEGIN
                              IF (prtRI."Hora entrada" = 0T) AND lwOk THEN
                                prtRI."Hora entrada" := lrPlanVue."Hora Entrada";
                            END;
                          END;
                        END;
                      UNTIL lrVueInt.NEXT=0;
                    END;
                  UNTIL lrServ2.NEXT=0;
                END;

                // Inserta la linea
                prtRI.INSERT;
              END;
            UNTIL lrServ.NEXT=0;
          END;

        UNTIL lrPax.NEXT=0;
      END;
    END;

    PROCEDURE PasaTemp@19(VAR Origen@1103355000 : TEMPORARY Record 7010084;VAR Destino@1103355001 : TEMPORARY Record 7010084);
    VAR
      lrAux@1103355002 : TEMPORARY Record 7010084;
    BEGIN
      // PasaTemp
      // Crea una copia de la tabla temporal

      lrAux.COPY(Origen);

      Destino.RESET;
      IF Destino.FIND('-') THEN
        Destino.DELETEALL;


      IF Origen.FIND('-') THEN BEGIN
        REPEAT
          Destino := Origen;
          Destino.INSERT;
        UNTIL Origen.NEXT=0;
      END
      ELSE
        EXIT;

      // Deja el origen en la misma posicion que lo encontro
      Origen.COPY(lrAux);
    END;

    PROCEDURE Selecciona@17(VAR prAnt@1103355000 : TEMPORARY Record 7010084;VAR prImp@1103355001 : TEMPORARY Record 7010084);
    VAR
      lrAux1@1103355002 : TEMPORARY Record 7010084;
      lrAux2@1103355003 : TEMPORARY Record 7010084;
      lrIgual@1103355004 : TEMPORARY Record 7010084;
      lrBorrable@1103355005 : TEMPORARY Record 7010084;
      lwBorra@1103355006 : Boolean;
      lwOk@1103355007 : Boolean;
    BEGIN
      // Selecciona

      // En este proceso eliminamos las entradas que no tienen modificaci¢n, es decir vienen porque una parte
      // de la reserva se ha modificada pero ellas en si no se han alterado.

      IF NOT prImp.FIND('-') THEN
        EXIT;

      PasaTemp(prImp,lrAux1);
      PasaTemp(prImp,lrAux2);

      lrAux1.SETRANGE(TipoPax , lrAux1.TipoPax::Modifica);
      lrAux1.SETRANGE(TipoServ, lrAux1.TipoServ::Inserta);

      IF lrAux1.FIND('-') THEN BEGIN
        // Borramos las que no cambian nada
        REPEAT
          lrAux2.RESET;
          lrAux2.SETRANGE(TipoPax        , lrAux2.TipoPax::Modifica);
          lrAux2.SETRANGE(TipoServ       , lrAux2.TipoServ::Anula);
          lrAux2.SETRANGE(NoPax          , lrAux1.NoPax);
          lrAux2.SETRANGE(Hotel          , lrAux1.Hotel);
          lrAux2.SETRANGE(Habitacion     , lrAux1.Habitacion);
          IF lrAux2.FIND('-') THEN BEGIN  // Si lo encontramos y son iguales borramos los dos registros en el de entrada
            REPEAT
              lwOk := SonIguales(lrAux2,lrAux1);
              IF lwOk THEN BEGIN
                IF prImp.GET(lrAux1.No,lrAux1.RI) THEN
                  prImp.DELETE;

                IF prImp.GET(lrAux2.No,lrAux2.RI) THEN
                  prImp.DELETE;

                // Hacemos una copia del registro que eliminamos
                lrIgual := lrAux1;
                lrIgual.INSERT;
              END;
            UNTIL (lrAux2.NEXT=0) OR (lwOk);
          END;
        UNTIL lrAux1.NEXT=0;
      END;

      // Marcamos las anulaciones de periodos enteros

      {* AJS 25.03.2004
      PasaTemp(prImp, lrAux1);
      PasaTemp(prImp, lrAux2);

      lrAux1.SETRANGE(TipoPax , lrAux1.TipoPax::Anula);
      lrAux1.SETRANGE(TipoServ, lrAux1.TipoServ::Anula);
      IF lrAux1.FIND('-') THEN BEGIN
        REPEAT
          lrAux2.SETRANGE(Delegacion   , lrAux1.Delegacion);
          lrAux2.SETRANGE("N§ Interno" , lrAux1."N§ Interno");
          lrAux2.SETRANGE(Periodo      , lrAux1.Periodo);
          lrAux2.SETRANGE(TipoServ     , lrAux1.TipoServ::Inserta);
          IF NOT lrAux2.FIND('-') THEN BEGIN
            IF prImp.GET(lrAux1.No,lrAux1.RI) THEN BEGIN
              prImp.Eliminar:=prImp.Eliminar::Periodo;
              prImp.MODIFY;
            END;
          END;
        UNTIL lrAux1.NEXT=0;
      END;
      *}

      IF NOT prImp.FIND('-') THEN
        EXIT;

      PasaTemp(prImp,lrAux1);
      PasaTemp(prImp,lrAux2);
      lrAux1.SETRANGE(lrAux1.TipoPax , lrAux1.TipoPax::Anula);

      // Consideramos los que son cambios de nombre
      IF lrAux1.FIND('-') THEN BEGIN
        REPEAT
          lrAux2.RESET;
          lrAux2.SETRANGE(TipoPax       , lrAux2.TipoPax::Inserta);
          lrAux2.SETRANGE(NoPax         , lrAux1.NoPax);
          IF NOT lrAux2.FIND('-') THEN BEGIN

            lrAux2.SETRANGE(NoPax);
            lrAux2.SETRANGE(Hotel           , lrAux1.Hotel);
            lrAux2.SETRANGE(Habitacion      , lrAux1.Habitacion);
            lrAux2.SETRANGE("No Acompa¤ante", 0);
            // JPT 19/01/10 Las tres siguientes lineas se habian comentado en un momento dado. Las he vuelto a activar
            // he encontrado un caso que falla si no estan ya que duplica periodo
            // Si no estan considera que es un mero cambio de nombre cuando realmente cambian factores del periodo.
            lrAux2.SETRANGE("Fecha Entrada" , lrAux1."Fecha Entrada");
            lrAux2.SETRANGE("Fecha Salida"  , lrAux1."Fecha Salida");
            lrAux2.SETRANGE(Regimen         , lrAux1.Regimen);
            {
            lrAux2.SETFILTER(Delegacion       , '<>%1','');
            lrAux2.SETFILTER("N§ Interno"     , '<>0');
            lrAux2.SETFILTER("No Acompa¤ante" , '<>0');
            }
            IF lrAux2.FIND('-') THEN BEGIN
              IF prImp.GET(lrAux2.No,lrAux2.RI) THEN BEGIN // Le marcamos cual ser  su nuevo acompa¤ante
                prImp.TipoPax         := prImp.TipoPax::Modifica;
                prImp.TipoServ        := prImp.TipoServ::Inserta;
                prImp.Delegacion      := lrAux1.Delegacion;
                prImp."N§ Interno"    := lrAux1."N§ Interno";
                prImp."No Acompa¤ante":= lrAux1."No Acompa¤ante";
                prImp.MODIFY;

                lrAux2."No Acompa¤ante":= lrAux1."No Acompa¤ante";
                lrAux2.MODIFY;

                // Hay que modificar el nombre del anterior para que luego la encuentre
                prAnt.RESET;
                prAnt.SETRANGE(Delegacion       , lrAux1.Delegacion);
                prAnt.SETRANGE("N§ Interno"     , lrAux1."N§ Interno");
                prAnt.SETRANGE("No Acompa¤ante" , lrAux1."No Acompa¤ante");

                IF prAnt.FIND('-') THEN
                  prAnt.MODIFYALL(Nombre, lrAux2.Nombre);
              END;
              IF prImp.GET(lrAux1.No,lrAux1.RI) THEN  // Eliminamos la anterior
                prImp.DELETE;
            END;
          END;
        UNTIL lrAux1.NEXT=0;
      END;

      IF prImp.FIND('-') THEN BEGIN
        // Ahora consideramos las modificaciones propiamente dichas
        // Eliminando los registros superfluos
        PasaTemp(prImp,lrAux1);
        PasaTemp(prImp,lrAux2);
        // lrAux1.SETCURRENTKEY("Fecha Entrada","Fecha Salida");
        // lrAux2.SETCURRENTKEY("Fecha Entrada","Fecha Salida");
        lrAux1.SETRANGE(TipoPax , lrAux1.TipoPax::Modifica);
        lrAux1.SETRANGE(TipoServ, lrAux1.TipoServ::Anula);
        IF lrAux1.FIND('-') THEN BEGIN
          REPEAT
            lrAux2.RESET;
            lrAux2.SETRANGE(TipoPax      , lrAux2.TipoPax::Modifica);
            lrAux2.SETRANGE(TipoServ     , lrAux2.TipoServ::Inserta);
            lrAux2.SETRANGE(NoPax        , lrAux1.NoPax);
            lrAux2.SETRANGE(Hotel        , lrAux1.Hotel);
            lrAux2.SETRANGE(Habitacion   , lrAux1.Habitacion);
            lrAux2.SETRANGE("Fecha Salida" , lrAux1."Fecha Entrada");
            lrAux2.SETRANGE("Fecha Entrada", lrAux1."Fecha Salida");

            lwBorra := lrAux2.FIND('-');

            // Consideramos el cambio de fechas
            IF NOT lwBorra THEN BEGIN
              lrAux2.SETRANGE("Fecha Salida");
              lrAux2.SETRANGE("Fecha Entrada");
              lwBorra := lrAux2.FIND('-');


              IF lwBorra THEN BEGIN
                IF prImp.GET(lrAux2.No, lrAux2.RI) THEN BEGIN
                  prImp.Periodo := lrAux1.Periodo;
                  prImp.MODIFY;
                END;
              END;
            END;

            IF NOT lwBorra THEN BEGIN // Consideramos los cambios de habitacion JPT/13/01/04
              lrAux2.SETRANGE(Habitacion);
              lwBorra := lrAux2.FIND('-') AND lrAux2.Ok3;
              IF lwBorra THEN BEGIN
                IF prImp.GET(lrAux2.No,lrAux2.RI) THEN BEGIN
                  prImp.Periodo := lrAux1.Periodo;
                  prImp.MODIFY;
                END;
              END;
            END;

            IF NOT lwBorra THEN BEGIN // Consideramos los cambios de hotel

              lrAux2.SETRANGE(Hotel);
              IF lrAux2.FIND('-') THEN
                IF prImp.GET(lrAux1.No,lrAux1.RI) THEN BEGIN
                  prImp.Eliminar:=prImp.Eliminar::Periodo;
                  prImp.MODIFY;
                END;
            END;

            { JPT 22/02/05 explicacion abajo
            IF lwBorra THEN BEGIN
            // Si es un cambio, modificamos los periodos anteriores para que pueda ser encontrado en el proximo buscar reserva
            // Tanto si es un cambio de fechas como de habitacion

              prAnt.RESET;
              prAnt.SETRANGE(Delegacion   , lrAux1.Delegacion);
              prAnt.SETRANGE("N§ Interno" , lrAux1."N§ Interno");
              prAnt.SETRANGE(Periodo      , lrAux1.Periodo);
              prAnt.SETRANGE(Nombre       , lrAux1.Nombre); // JPT 17/02/05 A¤ado filtro nombre, Ojo a la evolucion
              IF prAnt.FIND('-') THEN BEGIN
                prAnt.MODIFYALL("Fecha Entrada" , lrAux2."Fecha Entrada");
                prAnt.MODIFYALL("Fecha Salida"  , lrAux2."Fecha Salida");
                prAnt.MODIFYALL(Habitacion      , lrAux2.Habitacion);
                prAnt.MODIFYALL("Modificado Por", lrAux2."Modificado Por");
              END;

              lrAux2.DELETE; // As¡ no se repetira

              IF prImp.GET(lrAux1.No,lrAux1.RI) THEN  // Eliminamos la anterior
                prImp.DELETE;
            END;
            JPT 22/02/05 }
            IF lwBorra THEN BEGIN
              lrBorrable := lrAux1;
              lrBorrable."Fecha Entrada" := lrAux2."Fecha Entrada";
              lrBorrable."Fecha Salida"  := lrAux2."Fecha Salida";
              lrBorrable.Habitacion      := lrAux2.Habitacion;
              lrBorrable."Modificado Por":= lrAux2."Modificado Por";
              lrBorrable.INSERT;

              // JPT 05/01/09 Si se va a borrar no queremos que vuelva a aparecer la insercci¢n
              lrAux2.DELETE;
            END;
          UNTIL lrAux1.NEXT=0;
        END;
      END;

      // JPT 22/02/05 Ahora en vez de borrar directamente pasamos la informaci¢n a unos temporales lrBorrable para asegurarnos
      // la integridad de los periodos, eso es que los periodos sean iguales para todos los ocupantes, una vez esta comprobaci¢n
      // se borran

      IF lrBorrable.FINDLAST THEN BEGIN
        lrAux1.RESET;
        REPEAT
          PasaTemp(lrBorrable,lrAux1);
          lrAux1.SETFILTER(No,'<>%1', lrBorrable.No);
          lrAux1.SETRANGE(Delegacion   , lrBorrable.Delegacion);
          lrAux1.SETRANGE("N§ Interno" , lrBorrable."N§ Interno");
          lrAux1.SETRANGE(Periodo      , lrBorrable.Periodo);
          lwBorra:= TRUE;
          IF lrAux1.FIND('-') THEN BEGIN
            REPEAT
              lwBorra := lwBorra AND (lrAux1."Fecha Entrada" = lrBorrable."Fecha Entrada");
              lwBorra := lwBorra AND (lrAux1."Fecha Salida"  = lrBorrable."Fecha Salida");
              lwBorra := lwBorra AND (lrAux1.Habitacion      = lrBorrable.Habitacion);
            UNTIL lrAux1.NEXT=0;
          END;

          // Comprobamos tambien que no interfiera con los registros iguales que se han eliminado
          PasaTemp(lrIgual, lrAux1);
          lrAux1.SETFILTER(No,'<>%1', lrBorrable.No);
          lrAux1.SETRANGE(Delegacion   , lrBorrable.Delegacion);
          lrAux1.SETRANGE("N§ Interno" , lrBorrable."N§ Interno");
          lrAux1.SETRANGE(Periodo      , lrBorrable.Periodo);
          lwBorra:= TRUE;
          IF lrAux1.FIND('-') THEN BEGIN
            REPEAT
              lwBorra := lwBorra AND (lrAux1."Fecha Entrada" = lrBorrable."Fecha Entrada");
              lwBorra := lwBorra AND (lrAux1."Fecha Salida"  = lrBorrable."Fecha Salida");
              lwBorra := lwBorra AND (lrAux1.Habitacion      = lrBorrable.Habitacion);
            UNTIL lrAux1.NEXT=0;
          END;

          IF lwBorra THEN BEGIN
            prAnt.RESET;
            prAnt.SETRANGE(Delegacion   , lrBorrable.Delegacion);
            prAnt.SETRANGE("N§ Interno" , lrBorrable."N§ Interno");
            prAnt.SETRANGE(Periodo      , lrBorrable.Periodo);
            prAnt.SETRANGE(Nombre       , lrBorrable.Nombre); // JPT 17/02/05 A¤ado filtro nombre, Ojo a la evolucion
            IF prAnt.FIND('-') THEN BEGIN
              REPEAT
                prAnt."Fecha Entrada" := lrBorrable."Fecha Entrada";
                prAnt."Fecha Salida"  := lrBorrable."Fecha Salida";
                prAnt.Habitacion      := lrBorrable.Habitacion;
                prAnt."Modificado Por":= lrBorrable."Modificado Por";
                prAnt.MODIFY;
              UNTIL prAnt.NEXT=0;
            END;

            IF prImp.GET(lrBorrable.No,lrBorrable.RI) THEN  // Eliminamos la anterior
              prImp.DELETE;

            lrBorrable.DELETE;
          END;
        UNTIL lrBorrable.NEXT(-1)=0;
      END;
    END;

    PROCEDURE BuscaReserva@16(VAR prAnt@1103355000 : TEMPORARY Record 7010084;VAR prImp@1103355001 : TEMPORARY Record 7010084;pwBusca@1103355002 : 'Todo,Periodo';pwTodoImp@1103355015 : Boolean) : Boolean;
    VAR
      lrAux@1103355003 : TEMPORARY Record 7010084;
      lrAux2@1103355004 : TEMPORARY Record 7010084;
      lrAux3@1103355005 : TEMPORARY Record 7010084;
      lrTmpCabRes@1103355006 : TEMPORARY Record 7009741;
      lrPerRsv@1103355007 : Record 7009742;
      lwOk1@1103355008 : Boolean;
      lwOk2@1103355009 : Boolean;
      lwOk3@1103355010 : Boolean;
      lwSeBorra@1103355011 : Boolean;
      lwInserta@1103355012 : Boolean;
      lwOkFinal@1103355013 : Boolean;
      lwOkAnt@1103355014 : Boolean;
    BEGIN
      // BuscaReserva
      // Busca la Reserva correspondiente a la entrada se¤alada
      // Lo marca con Num Interno y Num Acompa¤ante
      // Si se ha encontrado acompa¤ante pero no periodo vuelve a llamar a la rutina pero buscando solo el periodo
      // Devuelve False si no encuentra nada
      // JPT 05/02/09
      // pwTodoImp Indica que todo esta importado y se busca en segunda ronda. Sirve para comprobar que
      // el pax importado tiene todos los periodos de las reserva a la que va

      {
        Con esto tendremos que:
        Si existe acompa¤ate y periodo es que ha relacionado con un periodo
        si existe acompa¤ante pero no periodo que lo ha relacionado con un acompa¤ante pero el periodod no existe
        Si existe periodo pero no acompa¤ante es que existe el periodo pero no la persona
        Cuando nos referimos a periodo se refiere a periodo para la misma cabecera de reserva

        lwOk1 := Se ha encontrado acompa¤ante
        lwOk2 := Se ha encontrado periodo
        lwOk3 := No se ha encontrado periodo pero es compatible en la cabecera
      }

      CLEAR(lwOk1);
      CLEAR(lwOk2);

      prImp."No Acompa¤ante":=0;
      prImp.Delegacion      :='';
      prImp."N§ Interno"    :=0;
      CLEAR(prImp.Periodo);
      prImp.MODIFY;

      prAnt.RESET;


      // Resulta que determinado hotels cuyo nombre contiene Text006 no son hoteles
      // reales si no vuelos locales encubiertos. En ese caso determinados campos no deben rellenarse

      lwSeBorra := (prImp.TipoPax = prImp.TipoPax::Anula) OR ((prImp.TipoPax = prImp.TipoPax::Modifica) AND
                                                             (prImp.TipoServ= prImp.TipoServ:: Anula));

      lwInserta := prImp.TipoPax = prImp.TipoPax::Inserta;
      PasaTemp(prImp,lrAux);
      PasaTemp(prImp,lrAux2);
      lrAux.SETRANGE(NoPax, prImp.NoPax);

      lrTmpCabRes.RESET;
      IF lrTmpCabRes.FIND('-') THEN
        lrTmpCabRes.DELETEALL;

      // Primero lo buscaremos por nombre, si fallamos buscaremos por periodo

      IF pwBusca = pwBusca::Todo THEN BEGIN
        prAnt.SETRANGE(Nombre    , prImp.Nombre);
        prAnt.SETRANGE(Hotel     , prImp.Hotel);
        prAnt.SETRANGE(Habitacion, prImp.Habitacion);
        // prAnt.SETFILTER("Modificado Por",'%1|%2',0,prImp.No);
        IF NOT prAnt.FIND('-') THEN
          prAnt.SETRANGE(Habitacion);
        IF NOT prAnt.FIND('-') THEN
          prAnt.SETRANGE(Hotel);
        lwOk1 := prAnt.FIND('-');
        IF lwOk1 THEN BEGIN
          prImp."No Acompa¤ante":= prAnt."No Acompa¤ante";
          prImp.Delegacion      := prAnt.Delegacion;
          prImp."N§ Interno"    := prAnt."N§ Interno";
          REPEAT
            IF NOT lrTmpCabRes.GET(prAnt.Delegacion,prAnt."N§ Interno") THEN BEGIN
              lrTmpCabRes.Delegacion   := prAnt.Delegacion;   // Para buscar el periodo solo en esa cabecera
              lrTmpCabRes."N§ Interno" := prAnt."N§ Interno";
              lrTmpCabRes.INSERT;
            END;
          UNTIL prAnt.NEXT=0;
        END;
        prAnt.SETRANGE(Nombre);
      END;


      // Buscaremos el periodo
      // Creamos un temporal de cabeceras
      IF NOT lwOk1 THEN BEGIN    // Por cada cabecera buscaremos que correspondan sus periodos
        prAnt.RESET;
        IF prAnt.FIND('-') THEN BEGIN
          REPEAT
            IF NOT lrTmpCabRes.GET(prAnt.Delegacion,prAnt."N§ Interno") THEN BEGIN
              lrTmpCabRes.Delegacion   := prAnt.Delegacion;
              lrTmpCabRes."N§ Interno" := prAnt."N§ Interno";
              lrTmpCabRes.INSERT;
            END;
          UNTIL prAnt.NEXT=0;
        END;
      END;

      // Buscamos si el periodo ya existe
      IF lrTmpCabRes.FIND('-') THEN BEGIN
        REPEAT
          prAnt.SETRANGE(Delegacion   , lrTmpCabRes.Delegacion);
          prAnt.SETRANGE("N§ Interno" , lrTmpCabRes."N§ Interno");
          IF lwSeBorra THEN BEGIN // JPT 03/11/04 Si se borra tiene que ser igual
            prAnt.SETRANGE(Hotel           , prImp.Hotel);
            prAnt.SETRANGE(Habitacion      , prImp.Habitacion);
            prAnt.SETRANGE(Nombre          , prImp.Nombre);
            prAnt.SETRANGE("Fecha Entrada" , prImp."Fecha Entrada");
            prAnt.SETRANGE("Fecha Salida"  , prImp."Fecha Salida");
            lwOk2 := prAnt.FIND('-');
            IF lrAux.GET(prImp.No, prImp.RI) THEN BEGIN
               lrAux.Periodo := prAnt.Periodo;
               lrAux.MODIFY;
            END;
          END
          ELSE BEGIN // Si es una modificacion o insercion puede haber variantes
            // No puede haber dos tipo de habitaci¢n para la misma cabecera
            // que se vayan a introducir todos los periodos para esa persona
            lrAux.SETRANGE(Habitacion, prImp.Habitacion);
            IF lrAux.FIND('-') THEN BEGIN
              lwOk2 := TRUE;
              REPEAT
                prAnt.SETFILTER("Modificado Por",'%1|%2',0,prImp.No);
                prAnt.SETRANGE(Hotel      , lrAux.Hotel);
                IF NOT lrAux.EsVuelo THEN
                  prAnt.SETRANGE(Habitacion , lrAux.Habitacion);
                { JPT - 25/10/05 pruebo de anular esto para que cuando hay dos periodos en un mismo hotel
                IF (NOT prAnt.FIND('-'))  THEN
                  prAnt.SETRANGE("Modificado Por");}

                prAnt.SETRANGE(Nombre, prImp.Nombre);
                IF NOT prAnt.FIND('-') THEN
                  prAnt.SETRANGE(Nombre);
                prAnt.SETRANGE("Fecha Entrada" , lrAux."Fecha Entrada");

                IF NOT lrAux.EsVuelo THEN
                  prAnt.SETRANGE("Fecha Salida"  , lrAux."Fecha Salida");

                lwOkAnt := prAnt.FIND('-');


                // AJS 26.03.2004
                // Test

      //          IF (NOT lwOkAnt) AND (lrAux.TipoPax = lrAux.TipoPax::Modifica) AND (NOT lwSeBorra) THEN BEGIN

                //IF (NOT lwOkAnt) AND (lrAux.TipoPax = lrAux.TipoPax::Modifica) THEN BEGIN
                IF (NOT lwOkAnt) AND (lrAux.TipoServ = lrAux.TipoServ::Modifica) THEN BEGIN
                // Si no lo encuentra en las fechas los busca sin
                  prAnt.SETRANGE("Fecha Entrada");
                  prAnt.SETRANGE("Fecha Salida" );
                  lwOkAnt := prAnt.FIND('-');
                END;

                lwOk2 := lwOk2 AND lwOkAnt;

                // JPT 05/02/09 Si ha encontrado el periodo nos aseguramos que el pax
                // entre en todos los periodos de la reserva
                IF pwTodoImp AND lwOk2 THEN BEGIN
                  lrAux3.COPY(prAnt);
                  CLEAR(prAnt);
                  prAnt.SETRANGE(Delegacion  , lrAux3.Delegacion);
                  prAnt.SETRANGE("N§ Interno", lrAux3."N§ Interno");
                  IF prAnt.FINDSET THEN BEGIN
                    REPEAT
                      CLEAR(lrAux2);
                      lrAux2.SETRANGE(Hotel           , prAnt.Hotel);
                      lrAux2.SETRANGE(Habitacion      , prAnt.Habitacion);
                      lrAux2.SETRANGE(Nombre          , prImp.Nombre);
                      lrAux2.SETRANGE("Fecha Entrada" , prAnt."Fecha Entrada");
                      lrAux2.SETRANGE("Fecha Salida"  , prAnt."Fecha Salida");
                      lrAux2.SETRANGE(TipoServ        , lrAux2.TipoServ::Inserta);
                      lwOk2 := lrAux2.FINDFIRST;
                    UNTIL (prAnt.NEXT=0) OR (NOT lwOk2);
                  END;
                  CLEAR(lrAux2);
                  prAnt.COPY(lrAux3); // dejamos el prAnt as¡ como estaba
                END;

                IF lwOk2 THEN BEGIN
                  lrAux.Periodo := prAnt.Periodo;
                  lrAux.MODIFY;
                END;

                // Limpiar los filtros

                prAnt.SETRANGE(Habitacion);
                prAnt.SETRANGE(Nombre);
                prAnt.SETRANGE("Fecha Entrada");
                prAnt.SETRANGE("Fecha Salida");
              UNTIL (lrAux.NEXT = 0) OR (NOT lwOk2);
            END;
          END;
        UNTIL (lrTmpCabRes.NEXT=0) OR lwOk2;
      END;

      IF lwOk2 THEN BEGIN
        prImp.Delegacion      := prAnt.Delegacion;
        prImp."N§ Interno"    := prAnt."N§ Interno";
        {
        IF lwOk1 THEN
          prImp."No Acompa¤ante":= prAnt."No Acompa¤ante";
        }
      END;

      // Si se ha encontrado acompa¤ante pero no periodo comprueba que sea compatible

      lwOk3 := TRUE;
      IF lwOk1 AND (NOT lwOk2) AND (NOT prImp.EsVuelo) AND (NOT lwSeBorra) THEN BEGIN
        // JPT 27/02/08 Si es un hotel ficticio no puede ir en la misma reserva
        lwOk3 := lwOk3 AND (NOT prImp."Hotel Ficticio");

        prAnt.RESET;
        prAnt.SETRANGE(Delegacion   , prImp.Delegacion);
        prAnt.SETRANGE("N§ Interno" , prImp."N§ Interno");

        // jpt 15.09.2004 Tambien tiene que generar reserva nueva si hay una habitacion distinta
        prAnt.SETFILTER(Habitacion ,'<>%1',prImp.Habitacion);
        // lwOk3 := lwOk3 AND (NOT prAnt.FIND('-'));
        prAnt.SETRANGE(Habitacion);

        lrAux.SETRANGE(EsVuelo      , FALSE);
        IF lrAux.FIND('-') THEN BEGIN
          REPEAT
            prAnt.SETRANGE(Hotel     , lrAux.Hotel);
            prAnt.SETRANGE(Habitacion, lrAux.Habitacion);
            prAnt.SETRANGE("Fecha Salida",lrAux."Fecha Salida");
            prAnt.SETRANGE("Fecha Entrada",lrAux."Fecha Entrada");

            IF prAnt.FIND('-') THEN BEGIN
              // prImp.Periodo := prAnt.Periodo; // JPT - 01/06/04 No estoy muy seguro si esto no provocara problemas
            END
            ELSE BEGIN
              prAnt.SETRANGE("Fecha Salida");
              prAnt.SETRANGE("Fecha Entrada");
            END;

            IF prAnt.FIND('-') THEN BEGIN
              lrAux.Periodo := prAnt.Periodo;
              lrAux.MODIFY;
            END
            ELSE BEGIN // Si se ha encontrado acompa¤ante pero no periodo mira a ver si es compatible en esta cabecera
              // Si se superponene fechas tiene que ir a otra cabecera de reserva
              prAnt.SETRANGE(Hotel);
              prAnt.SETRANGE(Habitacion);
              prAnt.SETRANGE(EsVuelo         , FALSE);

              prAnt.SETFILTER("Fecha Salida" , '>%1',lrAux."Fecha Entrada");
              prAnt.SETFILTER("Fecha Entrada", '<%1',lrAux."Fecha Salida" );
              lwOk3 := lwOk3 AND (NOT prAnt.FIND('-'));

              IF lwOk3 THEN BEGIN
                prAnt.SETRANGE("Fecha Salida");
                prAnt.SETRANGE("Fecha Entrada");
                IF prAnt.FIND('-') THEN BEGIN
                  REPEAT

                    // IF prAnt.Nombre <> prImp.Nombre THEN BEGIN
                      CLEAR(lrAux2);
                      lrAux2.SETRANGE(Hotel     , prImp.Hotel);
                      lrAux2.SETRANGE(Habitacion, prImp.Habitacion);
                      lrAux2.SETRANGE(Nombre    , prAnt.Nombre);
                      lrAux2.SETRANGE(TipoServ  , lrAux2.TipoServ::Inserta);

                      lwOk3 := lwOk3 AND (lrAux2.FIND('-'));

                    // END;
                  UNTIL (prAnt.NEXT=0) OR NOT lwOk3;
                END;
              END;
            END;
          UNTIL (lrAux.NEXT=0) OR (NOT lwOk3);
        END;
      END;


      IF lwOk1 OR lwOk2 THEN BEGIN
        prImp.MODIFY;

        lrAux2 := prImp;
        lrAux3 := prImp;
        IF NOT lwOk3 THEN
          CLEAR(lrAux2);

        // Luego se lo pasa a un auxiliar para rellenar con los mismos datos todas las reservas del mismo pax

        // AJS 26.03.2004
        // Se modifican los registros siguientes, para cuando un pax pasa 2 veces por un mismo hotel
        // JPT 10/12/04 esceptuando las anulaciones
        lrAux3.RESET;
        lrAux3.COPY(prImp);
        prImp.SETRANGE (NoPax, prImp.NoPax);
        IF prImp.FIND('-') THEN BEGIN
          REPEAT
            // Solo cambiar  cuando no sean anulaciones o cuando sea el registro principal mismo pasado como parametro
            lwOkAnt := (prImp.No = lrAux3.No) OR ((prImp.TipoPax <> prImp.TipoPax::Anula) AND (prImp.TipoServ <> prImp.TipoServ::Anula))
      ;
            IF lwOkAnt THEN BEGIN
              prImp.Delegacion   := lrAux2.Delegacion;
              prImp."N§ Interno" := lrAux2."N§ Interno";

              IF lwOk1 THEN
                prImp."No Acompa¤ante" := lrAux2."No Acompa¤ante";
              prImp.Responsable := lrAux2.Responsable;
              IF lwOk2 THEN
                IF lrAux.GET(prImp.No, prImp.RI) THEN
                  prImp.Periodo := lrAux.Periodo;
              prImp.MODIFY;
            END;
          UNTIL prImp.NEXT=0;
        END;
        // Posiciona el puntero en el mismo sitio
        prImp.COPY(lrAux3);
        prImp.FIND; // recuperamos la nueva informacion
      END;

      prImp.Ok1:= lwOk1;
      prImp.Ok2:= lwOk2;
      prImp.Ok3:= lwOk3;
      prImp.MODIFY;


      // Si se ha encontrado el acompa¤ante pero no el periodo, busca si puede entrar en otra reserva
      IF lwOk1 AND (NOT lwOk3) THEN
        lwOkFinal := BuscaReserva(prAnt,prImp,1, pwTodoImp)
      ELSE
        lwOkFinal := lwOk1 OR lwOk2;


      // JPT 25/04/05 A¤ado la condicion que no sea anulaci¢n para marcar como modificado por
      // no estoy del todo seguro si eso puede conllevar algun da¤o colateral
      IF lwOk1 AND lwOk2 AND (NOT lwSeBorra) THEN BEGIN
        prAnt.RESET;
        prAnt.SETRANGE(Delegacion  , prImp.Delegacion);
        prAnt.SETRANGE("N§ Interno", prImp."N§ Interno");
        prAnt.SETRANGE(Periodo     , prImp.Periodo);
        prAnt.SETRANGE(Nombre      , prImp.Nombre);
        IF prAnt.FIND('-') THEN BEGIN
          prAnt."Modificado Por" := prImp.No;
          prAnt.MODIFY;
        END;
      END;


      prAnt.RESET;
      EXIT(lwOkFinal);
    END;

    PROCEDURE TrataAnulaciones@7(VAR prAnt@1103355000 : TEMPORARY Record 7010084;VAR prImp@1103355001 : TEMPORARY Record 7010084);
    VAR
      lrAux@1103355002 : TEMPORARY Record 7010084;
      lrAuxAnt@1103355003 : TEMPORARY Record 7010084;
      lwOk@1103355004 : Boolean;
    BEGIN
      // TrataAnulaciones
      // Establece si las anulaciones tienen que borrar el pax o el periodo

      prImp.RESET;
      PasaTemp(prImp, lrAux);
      PasaTemp(prAnt, lrAuxAnt);

      prImp.SETRANGE(TipoServ,prImp.TipoServ::Anula);
      IF prImp.FIND('-') THEN BEGIN
        REPEAT
          // JPT 20/09/05 Creamos un temporal de anteriores para no borrar periodos enteros que tenga algo anterior
          lrAuxAnt.RESET;
          lrAuxAnt.SETRANGE (Delegacion   , prImp.Delegacion);
          lrAuxAnt.SETRANGE ("N§ Interno" , prImp."N§ Interno");
          lrAuxAnt.SETRANGE (Periodo      , prImp.Periodo);
          lrAuxAnt.SETRANGE (Nombre       , prImp.Nombre);
          IF lrAuxAnt.FIND('-') THEN
            lrAuxAnt.DELETE;
        UNTIL prImp.NEXT=0;

        prImp.FIND('-');
        REPEAT
          IF prImp.Periodo <> 0 THEN BEGIN
            lrAux.SETRANGE (Delegacion   , prImp.Delegacion); // Si no se va insertar o modificar nada
            lrAux.SETRANGE ("N§ Interno" , prImp."N§ Interno");
            lrAux.SETRANGE (Periodo      , prImp.Periodo);
            lrAux.SETFILTER(TipoServ     , '%1|%2', lrAux.TipoServ::Inserta, lrAux.TipoServ::Modifica);
            lwOk := NOT lrAux.FIND('-');

            lrAuxAnt.RESET;  // JPT 20/09/05 Si no queda nada anterior pendiente de borrar
            lrAuxAnt.SETRANGE (Delegacion   , prImp.Delegacion);
            lrAuxAnt.SETRANGE ("N§ Interno" , prImp."N§ Interno");
            lrAuxAnt.SETRANGE (Periodo      , prImp.Periodo);
            lwOk := lwOk AND (NOT lrAuxAnt.FIND('-'));

            IF lwOk THEN BEGIN
              prImp.Eliminar:= prImp.Eliminar::Periodo;
              prImp.MODIFY;
            END;
          END;
        UNTIL prImp.NEXT=0;
      END;

      prImp.RESET;
    END;

    PROCEDURE InsertaReserva@34(VAR prAnt@1103355000 : TEMPORARY Record 7010084;VAR prImp@1103355001 : TEMPORARY Record 7010084;VAR prtrExt@1103355008 : TEMPORARY Record 7010084);
    VAR
      lrAux@1103355002 : TEMPORARY Record 7010084;
      lrCab@1103355003 : Record 7009741;
      lrPer@1103355004 : Record 50;
      lrAco@1103355005 : Record 7009748;
      lwCont@1103355006 : Integer;
      lwTotal@1103355007 : Integer;
    BEGIN
      // InsertaReserva

      {
        En Realidad existen posibilidades:
          1.- No se ha encontrado Acompa¤ante ni periodo      = Se Crea Cab. Reserva Nueva
          2.- No se ha encontrado Acompa¤ante pero si periodo = Se a¤ade acompa¤ante al la reserva
          3.- Se ha encontrado Acompa¤ante pero no periodo    = Se le a¤ade un nuevo producto a la reserva
      }

      PasaTemp(prImp,lrAux);

      IF prImp.FINDSET THEN
      BEGIN
        lwTotal := prImp.COUNT;
        CLEAR(lwCont);
        REPEAT
          BuscaReserva(prAnt, prImp, 0, TRUE);

          BuscaPeriodo(prAnt, prImp);

          IF (prImp.Delegacion = '') AND (prImp."N§ Interno" = 0) THEN //. Caso 1
          BEGIN
            CLEAR(lrCab);
            lrCab.INSERT(TRUE);
            lrCab.VALIDATE("Modificacion importacion", TRUE);

            //-$003lrCab.VALIDATE(TourOperador              , rPar."Touroperador importacion");

            IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN
              lrCab.VALIDATE(TourOperador, rPar."Touroperador importacion")
            ELSE
              lrCab.VALIDATE(TourOperador, wTTOO); //+$004 //+$012

            lrCab.VALIDATE("TourOperador Venta"      , wTTOO); //+$012
            lrCab.VALIDATE(Bono                      , prImp.Bono);
            lrCab.VALIDATE(Usuario                   , USERID);
            lrCab.VALIDATE("Fecha venta"             , prImp."Fecha creacion");
            lrCab.VALIDATE("N§ Fichero"              , prImp.Fichero);
            //lrCab.VALIDATE("N§ Linea"              , par_cab."ID Cabecera");
            lrCab.VALIDATE(Temporada                 , prImp.Temporada);
            lrCab.VALIDATE("Fecha recepcion"         , TODAY);
            lrCab.VALIDATE("Modificacion importacion", FALSE);
            lrCab.VALIDATE("Tipo Operacion"          , prImp."Tipo operacion"); //+$008
            lrCab.MODIFY(TRUE);

            // Al insertar creamos un acompa¤ante que tenemos que eliminar
            CLEAR(lrAco);
            lrAco.SETRANGE(Delegacion  , lrCab.Delegacion);
            lrAco.SETRANGE("N§ Interno", lrCab."N§ Interno");
            IF lrAco.FINDSET(TRUE) THEN
              lrAco.DELETEALL;

            prImp.Delegacion    := lrCab.Delegacion;
            prImp."N§ Interno"  := lrCab."N§ Interno";
            ActualizaLinA(prImp);
            InsertaPeriodo(prAnt, prImp, prtrExt);
            InsertaAcompa¤ante(prAnt, prImp);
          END
          ELSE
          BEGIN
             // Si no se crea la reserva
            // Actualiza el campo "N§ Fichero" de la cabecera de reserva
            IF lrCab.GET(prImp.Delegacion, prImp."N§ Interno") THEN
            BEGIN
              lrCab."N§ Fichero" := prImp.Fichero;
              lrCab.MODIFY;
            END;
          END;

          InsertaPeriodo(prAnt, prImp, prtrExt);
          InsertaAcompa¤ante(prAnt, prImp);


          prAnt := prImp;
          IF prAnt.FIND THEN
          BEGIN
            prAnt := prImp;
            prAnt.MODIFY;
          END
          ELSE
            prAnt.INSERT;

          lwCont += 1;
          ventana.UPDATE(5, ROUND(lwCont / lwTotal * 10000, 1));

        UNTIL prImp.NEXT = 0;
      END;

      prAnt.Procesado:= TRUE;
    END;

    PROCEDURE BorraReserva@10(VAR prAnt@1103355000 : TEMPORARY Record 7010084;VAR prImp@1103355001 : TEMPORARY Record 7010084);
    VAR
      lrAcomp@1103355002 : Record 7009748;
      lrAcomp2@1103355003 : Record 7009748;
      lrCabRes@1103355004 : Record 7009741;
      lrPer@1103355005 : Record 7009742;
      lrAux@1103355006 : TEMPORARY Record 7010084;
      lwAcompAnt@1103355007 : Integer;
      lwBorraCab@1103355008 : Boolean;
    BEGIN
      // BorraReserva

      BuscaReserva(prAnt,prImp,0, TRUE);

      CASE prImp.Eliminar OF
        prImp.Eliminar::Pax: BEGIN
          lrAcomp.RESET;
          IF NOT lrAcomp.GET(prImp.Delegacion,prImp."N§ Interno",prImp."No Acompa¤ante") THEN
            EXIT;

          IF prImp."No Acompa¤ante" = 1 THEN BEGIN // Si nos hemos cepillado al principal
            prAnt.RESET;
            prAnt.SETRANGE(Delegacion   , prImp.Delegacion);
            prAnt.SETRANGE("N§ Interno" , prImp."N§ Interno");
            prAnt.SETFILTER("No Acompa¤ante",'<>%1',1);
            IF NOT prAnt.FIND('-') THEN BEGIN  // Si era el £ltimo nos cargamos toda la reserva
              IF lrCabRes.GET(prImp.Delegacion,prImp."N§ Interno") THEN
                lrCabRes.DELETE(TRUE);

              prAnt.RESET;
              prAnt.SETRANGE(Delegacion   , prImp.Delegacion);
              prAnt.SETRANGE("N§ Interno" , prImp."N§ Interno");
              IF prAnt.FIND('-') THEN
                prAnt.DELETEALL;
            END
            ELSE BEGIN // Sino modificamos el ocupante
              lwAcompAnt := prAnt."No Acompa¤ante";
              IF NOT lrAcomp.GET(prAnt.Delegacion, prAnt."N§ Interno", prAnt."No Acompa¤ante") THEN
                EXIT;

              IF lrAcomp2.GET(prImp.Delegacion,prImp."N§ Interno", 1) THEN BEGIN

                // JPT 17/02/05 Eso es necesario para que en caso de varios periodos no desvirtue los presente
                // Hemos de buscar el el primer y el ultimo periodo
                lrAcomp2.Pasar_Periodo(prImp.Periodo);

                //lrAcomp2 := lrAcomp;

                //lrAcomp2."N§ Acompa¤ante" :=1;
                lrAcomp2.VALIDATE("Modificacion importacion", TRUE);
                lrAcomp2.VALIDATE(Nombre                    , lrAcomp.Nombre);
                lrAcomp2.VALIDATE(Edad                      , lrAcomp.Edad);
                lrAcomp2."Tipo Persona" :=               lrAcomp."Tipo Persona";
                lrAcomp2.VALIDATE("N§ Habitacion"        , lrAcomp."N§ Habitacion");
                lrAcomp2.VALIDATE("Compa¤ia entrada"     , lrAcomp."Compa¤ia entrada");
                lrAcomp2.VALIDATE("Vuelo entrada"        , lrAcomp."Vuelo entrada");
                lrAcomp2.VALIDATE("Fecha entrada"        , lrAcomp."Fecha entrada");
                lrAcomp2.VALIDATE("Terminal entrada"     , lrAcomp."Terminal entrada");
                lrAcomp2.VALIDATE("Hora entrada"         , lrAcomp."Hora entrada");
                lrAcomp2.VALIDATE("IATA origen entrada"  , lrAcomp."IATA origen entrada");
                lrAcomp2.VALIDATE("IATA destino entrada" , lrAcomp."IATA destino entrada");

                // Para los datos de salidas hemos de buscar el ultimo periodo
                PasaTemp(prImp,lrAux);

                lrAux.SETCURRENTKEY("Fecha Entrada","Fecha Salida");
                lrAux.SETRANGE(Delegacion  , prImp.Delegacion);
                lrAux.SETRANGE("N§ Interno", prImp."N§ Interno");
                lrAux.FINDLAST;
                lrAcomp2.Pasar_Periodo(lrAux.Periodo);

                // Solo cambiamos la fecha de salida, los dem s datos deber¡an ser los mismos
                lrAcomp2.VALIDATE("Hora salida"          , lrAcomp."Hora salida");

                lrAcomp2.VALIDATE(Regimen                , lrAcomp.Regimen);
                lrAcomp2.VALIDATE("Regimen TO"           , lrAcomp."Regimen TO");
                lrAcomp2.VALIDATE("Fecha venta"          , lrAcomp."Fecha venta");
                lrAcomp2.VALIDATE("N§ Fichero"           , lrAcomp."N§ Fichero");
                lrAcomp2.VALIDATE("N§ Linea"             , lrAcomp."N§ Linea");
                lrAcomp2.VALIDATE(Replicado              , lrAcomp.Replicado);
                lrAcomp2.VALIDATE(Temporada              , lrAcomp.Temporada);
                lrAcomp2.VALIDATE("Fecha Nacimiento"     , lrAcomp."Fecha Nacimiento");
                lrAcomp2.VALIDATE("N§ Periodo"           , lrAcomp."N§ Periodo");
                lrAcomp2.VALIDATE(Contador               , lrAcomp.Contador);
                lrAcomp2.VALIDATE(Bono                   , lrAcomp.Bono);
                lrAcomp2.VALIDATE(Touroperador           , lrAcomp.Touroperador);
                lrAcomp2.VALIDATE("Modificacion importacion", FALSE);
                lrAcomp2.MODIFY(TRUE);

                lrAcomp.VALIDATE("Modificacion importacion", TRUE);
                lrAcomp."Puede Borrar" := TRUE;
                lrAcomp.DELETE(TRUE);

                // Borramos el anterior del temporal

               prAnt.RESET;
               prAnt.SETRANGE(Delegacion       , prImp.Delegacion);
               prAnt.SETRANGE("N§ Interno"     , prImp."N§ Interno");
                //prAnt.SETRANGE(Periodo          , prAnt.Periodo);
                prAnt.SETRANGE("No Acompa¤ante" , 1);
                IF prAnt.FIND('-') THEN
                 prAnt.DELETEALL;

                // Luego le cambiamos el N§ de acompa¤ante al anterior

                prAnt.SETRANGE("No Acompa¤ante" , lwAcompAnt);
                IF prAnt.FIND('-') THEN
                  prAnt.MODIFYALL("No Acompa¤ante", 1);

                // Tambien a los registros de importaci¢n
                //PasaTemp(prImp,lrAux);   // Solo es para tener una referencia de los filtros y posicion de primp
                lrAux.COPYFILTERS(prImp);
                lrAux:=prImp;

                prImp.RESET;
                prImp.SETRANGE(Delegacion       , prImp.Delegacion);
                prImp.SETRANGE("N§ Interno"     , prImp."N§ Interno");
                prImp.SETRANGE("No Acompa¤ante" , lwAcompAnt);
                IF prImp.FINDLAST THEN
                  REPEAT
                    prImp."No Acompa¤ante" := 1;
                    prImp.MODIFY;
                  UNTIL prImp.NEXT(-1) = 0;

                // Luego dejamos prImp como estaba
                prImp.COPYFILTERS(lrAux);
                prImp:=lrAux;

              END;
            END;
          END
          ELSE BEGIN // Si no es el principal
            lrAcomp.RESET;
            IF lrAcomp.GET(prImp.Delegacion,prImp."N§ Interno",prImp."No Acompa¤ante") THEN BEGIN
              lrAcomp.VALIDATE("Modificacion importacion", TRUE);
              lrAcomp."Puede Borrar" := TRUE;
              lrAcomp.DELETE(TRUE);

              // Borramos el anterior del temporal
              prAnt.RESET;
              prAnt.SETRANGE(Delegacion       , prImp.Delegacion);
              prAnt.SETRANGE("N§ Interno"     , prImp."N§ Interno");
              prAnt.SETRANGE("No Acompa¤ante" , prImp."No Acompa¤ante");
              IF prAnt.FIND('-') THEN
                prAnt.DELETEALL;

           END;
          END;

        END;
        prImp.Eliminar::Periodo: BEGIN

          prAnt.RESET;
          prAnt.SETRANGE(Delegacion   , prImp.Delegacion);
          prAnt.SETRANGE("N§ Interno" , prImp."N§ Interno");
          prAnt.SETFILTER(Periodo  ,'<>%1', prImp.Periodo);
          // Si es el £ltimo periodo y no se va a insertar nada borra la reserva entera
          lwBorraCab := NOT prAnt.FIND('-');
          lrAux.COPY(prImp);
          prImp.RESET;
          prImp.SETFILTER(Delegacion   , lrAux.Delegacion);
          prImp.SETFILTER("N§ Interno" ,'%1', lrAux."N§ Interno");
          prImp.SETRANGE(TipoServ     , prImp.TipoServ::Inserta);
          prImp.SETFILTER(Periodo     ,'%1' , lrAux.Periodo);
          lwBorraCab := lwBorraCab AND (NOT prImp.FIND('-'));
          prImp.COPY(lrAux); // Se deja la referencia a tabla como estaba


          // Borramos el anterior del temporal
          prAnt.RESET;
          prAnt.SETRANGE(Delegacion       , prImp.Delegacion);
          prAnt.SETRANGE("N§ Interno"     , prImp."N§ Interno");

          IF lwBorraCab THEN BEGIN
            IF lrCabRes.GET(prImp.Delegacion,prImp."N§ Interno") THEN
              lrCabRes.DELETE(TRUE);
          END
          ELSE BEGIN // Si no borra solo el periodo
            lrPer.RESET;
            IF lrPer.GET(prImp.Delegacion,prImp."N§ Interno",prImp.Periodo) THEN BEGIN
              lrPer.VALIDATE("Modificacion importacion", TRUE);
              lrPer.DELETE(TRUE);
            END;

            prAnt.SETRANGE(Periodo          , prImp.Periodo); // Para borrar filtramos por periodo
          END;

          IF prAnt.FIND('-') THEN // Borramos los anteriores
            prAnt.DELETEALL;
        { JPT 15/10/04
          // Elimina todas las referencias a borrar el mismo periodo
          lrAux.COPY(prImp);
            prImp.RESET;
            prImp.SETRANGE(Delegacion       , lrAux.Delegacion);
            prImp.SETRANGE("N§ Interno"     , lrAux."N§ Interno");
            prImp.SETRANGE(Periodo          , lrAux.Periodo);
            prImp.SETRANGE(TipoServ         , prImp.TipoServ::Anula);
            prImp.SETRANGE(Eliminar         , prImp.Eliminar::Periodo);
            IF prImp.FIND('-') THEN
              prImp.MODIFYALL(Eliminar      , prImp.Eliminar::"No borrar");
          prImp.COPY(lrAux);
          }
        END;

      END;
    END;

    PROCEDURE InsertaPeriodo@23(VAR prAnt@1103355000 : TEMPORARY Record 7010084;VAR prImp@1103355001 : TEMPORARY Record 7010084;VAR prtrExt@1103355009 : TEMPORARY Record 7010084);
    VAR
      lrCab@1103355002 : Record 7009741;
      lrPer@1103355003 : Record 7009742;
      lrComent@1103355004 : Record 7009762;
      lrComInt@1103355005 : Record 7009858;
      lrHotTO@1103355006 : Record 7009725;
      lrExtrR@1103355010 : Record 7009864;
      lwNumPer@1103355007 : Integer;
      lwEcontrado@1103355008 : Boolean;
    BEGIN
      // InsertaPeriodo

      //. Si el tipo servicio transfer es N, ignoramos el periodo
      //+$011 <
      IF (prImp."Servicio transfer llegada" = 'N') AND
         (prImp."Servicio transfer salida" = 'N') THEN
        EXIT;
      //+$011 >

      CLEAR(lrPer);
      lwNumPer := 0;
      IF NOT lrPer.GET(prImp.Delegacion, prImp."N§ Interno", prImp.Periodo) THEN
      BEGIN
        lrPer.SETRANGE(Delegacion  , prImp.Delegacion);
        lrPer.SETRANGE("N§ Interno", prImp."N§ Interno");
        IF lrPer.FINDLAST THEN
          lwNumPer := lrPer."N§ Periodo" + 10000
        ELSE
          lwNumPer := 10000;

        CLEAR(lrPer);

        lrPer.Delegacion   := prImp.Delegacion;
        lrPer."N§ Interno" := prImp."N§ Interno";
        lrPer."N§ Periodo" := lwNumPer;
        lrPer.INSERT(TRUE);
      END;

      lrPer.VALIDATE("Modificacion importacion", TRUE);
      IF rCabInt.Paquete = rPar."Paquete Solo Hotel" THEN
        lrPer.Paquete:= rCabInt.Paquete
      ELSE
      BEGIN
        IF prImp.Paquete <> '' THEN
          lrPer.Paquete := prImp.Paquete
        ELSE
          lrPer.Paquete := rCabInt.Paquete;
      END;

      lrPer.VALIDATE("Fecha venta", prImp."Fecha creacion");
      IF lrPer."Tipo Reserva" <> prImp."Tipo Registro" THEN
        lrPer.VALIDATE("Tipo Reserva"            , prImp."Tipo Registro");
      IF lrPer."TourOperador Venta" <> wTTOO THEN //+$012
        lrPer.VALIDATE("TourOperador Venta"      , wTTOO); //+$012
      IF lrPer.Bono <> prImp.Bono THEN
        lrPer.VALIDATE(Bono                      , prImp.Bono);
      IF lrPer.Temporada <> prImp.Temporada THEN
        lrPer.VALIDATE(Temporada                 , prImp.Temporada);
      IF lrPer."N§ Fichero" <> prImp.Fichero THEN
        lrPer.VALIDATE("N§ Fichero"              , prImp.Fichero);

      // AJS 21.10.2003
      // Si es un vuelo hay que marcar el tipo de transfer como aereo, ademas ponemos en el hotel el hotel real al que va
      // asociado el servicio de transfer

      // AJS 29.04.2004
      // Buscar el registro de conversion hotel para ver si es un hotel sin traslados, en cuyo caso no debe llevar
      // informacion de vuelos

      lrCab.GET(lrPer.Delegacion, lrPer."N§ Interno");

      // AJS 14.05.2006
      // La conversion de hotel se puede hacer por touroperador venta

      lrHotTO.SETRANGE(TourOperador        , lrCab.TourOperador);
      lrHotTO.SETRANGE("Hotel TO"          , prImp.Hotel);
      lrHotTO.SETRANGE("Touroperador venta", wTTOO); //+$012
      IF NOT lrHotTO.FINDFIRST THEN
      BEGIN
        lrHotTO.SETRANGE("Touroperador venta", '');
        IF NOT lrHotTO.FINDFIRST THEN
          CLEAR(lrHotTO);
      END;

      IF prImp.EsVuelo THEN
      BEGIN
        lrPer.VALIDATE("Modificacion importacion", TRUE);
        IF prImp."Orden Vuelo" = prImp."Orden Vuelo"::Entrada THEN
          lrPer."Tipo transfer entrada" := lrPer."Tipo transfer entrada"::Aereo;
        IF prImp."Orden Vuelo" = prImp."Orden Vuelo"::Salida THEN
          lrPer."Tipo transfer salida" := lrPer."Tipo transfer salida"::Aereo;
        lrPer.VALIDATE("Fecha entrada" , prImp."Fecha Entrada");
        lrPer.VALIDATE("Fecha salida"  , prImp."Fecha Entrada");

        IF lrPer."Hotel TO" <> prImp.Hotel THEN
          lrPer.VALIDATE("Hotel TO", prImp.Hotel);
      END
      ELSE
      BEGIN
        IF lrPer."Fecha entrada" <> prImp."Fecha Entrada" THEN BEGIN
          lrPer."Fecha entrada":= prImp."Fecha Entrada";
          prImp."Validar Fecha":= TRUE // SE validara a posteriori
        END;
        IF lrPer."Fecha salida" <> prImp."Fecha Salida" THEN BEGIN
          lrPer."Fecha salida" := prImp."Fecha Salida";
          prImp."Validar Fecha":= TRUE  // SE validara a posteriori
        END;

        lrPer.VALIDATE("Modificacion importacion", TRUE);
        IF lrPer."Hotel TO" <> prImp.Hotel THEN
          lrPer.VALIDATE("Hotel TO"     , prImp.Hotel);

        // AJS 14.05.2006
        // La conversion de hotel se puede hacer por touroperador venta

        rConHotel.RESET;
        IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN
          rConHotel.SETRANGE(TourOperador, rPar."Touroperador importacion")
        ELSE
          rConHotel.SETRANGE(TourOperador, wTTOO); //+$012

        rConHotel.SETRANGE("Hotel TO"          , prImp.Hotel);
        rConHotel.SETRANGE("Touroperador venta", wTTOO); //+$012
        IF NOT rConHotel.FINDFIRST THEN
        BEGIN
          rConHotel.SETRANGE("Touroperador venta", '');
          IF NOT rConHotel.FINDFIRST THEN
            CLEAR(rConHotel);
        END;

        IF rConHotel."Hotel estancia" <> '' THEN
        BEGIN
          lrPer."Hotel reservado":= rConHotel."Hotel estancia";
          IF rConHotel."Hotel precios" <> '' THEN
          BEGIN
            lrPer."Hotel origen precios" := rConHotel."Hotel precios";
            lrPer."Hotel Factura"        := rConHotel."Hotel precios";
          END
          ELSE
            lrPer."Hotel origen precios" := rConHotel."Hotel estancia";
        END;

        IF prImp."Validar Fecha" THEN BEGIN
          //-$003lrPer.buscar_contrato(rPar."Touroperador importacion", lrPer, rConvTO."Touroperador Go Caribic");

          IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN
            lrPer.buscar_contrato(rPar."Touroperador importacion", wTTOO) //+$012
          ELSE //+$004
            lrPer.buscar_contrato(wTTOO, wTTOO); //+$004 //+$012
        END;

        IF lrPer."Fecha salida" = 0D THEN
          lrPer.VALIDATE("Fecha salida" , lrPer."Fecha entrada" + 1);

        IF _PaqueteTieneHotel(lrPer.Paquete) THEN
        BEGIN
          IF lrPer."N§ Habitaciones" <> prImp."N§ Habitaciones" THEN
            lrPer.VALIDATE("N§ Habitaciones"       , prImp."N§ Habitaciones");
          IF lrPer."Habitacion TO" <> prImp.Habitacion THEN
            lrPer.VALIDATE("Habitacion TO"         , prImp.Habitacion);
          IF lrPer."Regimen TO" <> prImp.Regimen THEN
            lrPer.VALIDATE("Regimen TO"            , prImp.Regimen);
        END;

        // AJS 20.09.2006
        // Calculamos la estancia del periodo

        lrPer.Estancia := lrPer."Fecha salida" - lrPer."Fecha entrada";
      END;

      //+$006 <
      IF (lrPer."Compa¤ia entrada" <> prImp."Compa¤ia entrada") AND
         (prImp."Compa¤ia entrada" <> '') AND
         (NOT lrHotTO."No Transfer") THEN
        lrPer.VALIDATE("Compa¤ia entrada"        , prImp."Compa¤ia entrada");

      IF (lrPer."Vuelo entrada" <> prImp."Vuelo entrada") AND
         (prImp."Vuelo entrada" <> '') AND
         (NOT lrHotTO."No Transfer") THEN
        lrPer.VALIDATE("Vuelo entrada"           , prImp."Vuelo entrada");

      IF (lrPer."Hora entrada" <> prImp."Hora entrada") AND
         (prImp."Hora entrada" <> 0T) AND
         (NOT lrHotTO."No Transfer") THEN
        lrPer.VALIDATE("Hora entrada"            , prImp."Hora entrada");

      IF (lrPer."IATA origen entrada" <> prImp."IATA origen entrada") AND
         (prImp."IATA origen entrada" <> '') AND
         (NOT lrHotTO."No Transfer") THEN
        lrPer.VALIDATE("IATA origen entrada"     , prImp."IATA origen entrada");

      IF (lrPer."IATA destino entrada" <> prImp."IATA destino entrada") AND
         (prImp."IATA destino entrada" <> '') AND
         (NOT lrHotTO."No Transfer") THEN
        lrPer.VALIDATE("IATA destino entrada"    , prImp."IATA destino entrada");

      IF (lrPer."Compa¤ia salida" <> prImp."Compa¤ia salida") AND
         (prImp."Compa¤ia salida" <> '') AND
         (NOT lrHotTO."No Transfer") THEN
        lrPer.VALIDATE("Compa¤ia salida"         , prImp."Compa¤ia salida");

      IF (lrPer."Vuelo salida" <> prImp."Vuelo salida") AND
         (prImp."Vuelo salida" <> '') AND
         (NOT lrHotTO."No Transfer") THEN
        lrPer.VALIDATE("Vuelo salida"            , prImp."Vuelo salida");

      IF (lrPer."Hora salida" <> prImp."Hora salida") AND
         (prImp."Hora salida" <> 0T) AND
         (NOT lrHotTO."No Transfer") THEN
        lrPer.VALIDATE("Hora salida"             , prImp."Hora salida");

      IF (lrPer."IATA origen salida" <> prImp."IATA origen salida") AND
         (prImp."IATA origen salida" <> '') AND
         (NOT lrHotTO."No Transfer") THEN
        lrPer.VALIDATE("IATA origen salida"      , prImp."IATA origen salida");

      IF (lrPer."IATA destino salida" <> prImp."IATA destino salida") AND
         (prImp."IATA destino salida" <> '') AND
         (NOT lrHotTO."No Transfer") THEN
        lrPer.VALIDATE("IATA destino salida"     , prImp."IATA destino salida");
      //+$006 >

      CASE rDatosIns."Empresa Real" OF
        rDatosIns."Empresa Real"::GOC:
        BEGIN
          IF (lrPer."Transfer Privado" <> prImp."Transfer Privado") THEN
            lrPer.VALIDATE(lrPer."Transfer Privado"  , prImp."Transfer Privado");
        END;

        //. La importaci¢n de los Touroperadores de Nexus trae especificado el servicio de transfer
        rDatosIns."Empresa Real"::CNT:
        BEGIN
          //+$010 <
          // < +$009
          IF prImp."Servicio transfer llegada" = 'S' THEN
            lrPer.VALIDATE(lrPer."Servicio transfer entrada", lrPer."Servicio transfer entrada"::Compartido)
          ELSE
          BEGIN
            IF prImp."Servicio transfer llegada" = 'P' THEN
              lrPer.VALIDATE(lrPer."Servicio transfer entrada", lrPer."Servicio transfer entrada"::Privado);
          END;

          IF prImp."Servicio transfer salida" = 'S' THEN
            lrPer.VALIDATE(lrPer."Servicio transfer salida", lrPer."Servicio transfer salida"::Compartido)
          ELSE
          BEGIN
            IF prImp."Servicio transfer salida" = 'P' THEN
              lrPer.VALIDATE(lrPer."Servicio transfer salida", lrPer."Servicio transfer salida"::Privado);
          END;
          // > $009
          //+$010 >

        END;
      END;

      lrPer.VALIDATE("Modificacion importacion", FALSE);
      lrPer.MODIFY;

      // JPT-02/07/03
      // Introducimos los comentarios
      CLEAR(lrComent);
      CLEAR(lrComInt);
      lrComInt.SETRANGE(Fichero, prImp.Fichero);
      lrComInt.SETRANGE(IDPax  , prImp."ID Pax");
      IF lrComInt.FINDSET THEN
      BEGIN
        REPEAT
          // Buscamos que el comentario No exista ya
          lrComent.RESET;
          lrComent.SETRANGE(Delegacion   , prImp.Delegacion);
          lrComent.SETRANGE("N§ Interno" , prImp."N§ Interno");
          IF lrComent.FINDSET THEN
          BEGIN
            lwEcontrado := FALSE;
            REPEAT
              lwEcontrado := lrComent.Texto = lrComInt.Texto;
            UNTIL (lrComent.NEXT=0) OR lwEcontrado;
          END;

          IF NOT lwEcontrado THEN BEGIN
            lrComent.INIT;
            lrComent.Delegacion   := prImp.Delegacion;
            lrComent."N§ Interno" := prImp."N§ Interno";
            lrComent.Texto        := lrComInt.Texto;
            lrComent.INSERT(TRUE);
          END;
        UNTIL  lrComInt.NEXT=0;
      END;

      // Introducimos los extras
      CLEAR(prtrExt);
      prtrExt.SETRANGE("Modificado Por", prImp.No);
      IF prtrExt.FINDSET THEN
      BEGIN
        REPEAT
          CLEAR(lrExtrR);
          lrExtrR.SETCURRENTKEY(Delegacion,"N§ Interno","N§ Periodo");
          lrExtrR.SETRANGE(Delegacion  , lrPer.Delegacion);
          lrExtrR.SETRANGE("N§ Interno", lrPer."N§ Interno");
          lrExtrR.SETRANGE("N§ Periodo", lrPer."N§ Periodo");
          lrExtrR.SETRANGE(Extra       , prtrExt.Hotel);
          IF NOT lrExtrR.FINDFIRST THEN BEGIN
            lrExtrR.Delegacion   := lrPer.Delegacion;
            lrExtrR."N§ Interno" := lrPer."N§ Interno";
            lrExtrR."N§ Periodo" := lrPer."N§ Periodo";
            lrExtrR.Extra        := prtrExt.Hotel;
            lrExtrR."Fecha desde":= prtrExt."Fecha Entrada";
            lrExtrR."Fecha hasta":= prtrExt."Fecha Salida";

            CLEAR(rConHotel); // Buscamos la conversion hotel
            IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN
              rConHotel.SETRANGE(TourOperador        , rPar."Touroperador importacion")
            ELSE
              rConHotel.SETRANGE(TourOperador, wTTOO); //+$012
            rConHotel.SETRANGE("Hotel TO"          , prtrExt.Hotel);
            rConHotel.SETRANGE("Touroperador venta", wTTOO); //+$012
            IF NOT rConHotel.FINDFIRST THEN
            BEGIN
              rConHotel.SETRANGE("Touroperador venta", '');
              IF NOT rConHotel.FINDFIRST THEN
                CLEAR(rConHotel);
            END;

            lrExtrR."Hotel factura" := rConHotel."Hotel estancia";
            lrExtrR.INSERT;
          END;
        UNTIL prtrExt.NEXT=0;
      END;

      prImp.Periodo := lrPer."N§ Periodo";
      prImp.MODIFY;
    END;

    PROCEDURE InsertaAcompa¤ante@20(VAR prAnt@1103355000 : TEMPORARY Record 7010084;VAR prImp@1103355001 : TEMPORARY Record 7010084);
    VAR
      lrAco@1103355002 : Record 7009748;
      lrCab@1103355003 : Record 7009741;
      lrHotTO@1103355004 : Record 7009725;
    BEGIN
      // InsertaAcompa¤ante


      // JPT/23/08/04 Si no tiene nombre ni tipo de persona no lo insertamos
      IF (prImp."Tipo Persona"='') OR (prImp.Nombre='') THEN
        EXIT;

      CLEAR(lrAco);
      // Lo a¤adimos si no existe

      IF NOT lrAco.GET(prImp.Delegacion,prImp."N§ Interno", prImp."No Acompa¤ante") THEN BEGIN
        lrAco.Delegacion       := prImp.Delegacion;
        lrAco."N§ Interno"     := prImp."N§ Interno";
        lrAco.INSERT(TRUE);
        prImp."No Acompa¤ante" := lrAco."N§ Acompa¤ante";
        prImp.Procesado        := TRUE;
        prImp.MODIFY;
      END;

      // Buscar el registro de conversion hotel para ver si es un hotel sin traslados, en cuyo caso no debe llevar
      // informacion de vuelos

      lrCab.GET(lrAco.Delegacion, lrAco."N§ Interno");

      lrHotTO.SETRANGE(TourOperador        , lrCab.TourOperador);
      lrHotTO.SETRANGE("Hotel TO"          , prImp.Hotel);
      lrHotTO.SETRANGE("Touroperador venta", wTTOO); //+$012
      IF NOT lrHotTO.FINDFIRST THEN
      BEGIN
        lrHotTO.SETRANGE("Touroperador venta", '');
        IF NOT lrHotTO.FINDFIRST THEN
          CLEAR(lrHotTO);
      END;

      lrAco.VALIDATE("Modificacion importacion", TRUE);
      IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN
        lrAco."Tipo Persona" := traduce_tipo_persona(rPar."Touroperador importacion", prImp."Tipo Persona")
      ELSE
        lrAco."Tipo Persona" := traduce_tipo_persona(wTTOO, prImp."Tipo Persona"); //+$012
      IF lrAco.Nombre <> prImp.Nombre THEN
        lrAco.VALIDATE(Nombre                    , prImp.Nombre);
      IF lrAco.Edad <> prImp.Edad THEN
        lrAco.VALIDATE(Edad                      , prImp.Edad);
      IF lrAco."Fecha Nacimiento" <> prImp."Fecha Nacimiento" THEN
        lrAco.VALIDATE("Fecha Nacimiento"        , prImp."Fecha Nacimiento");
      IF lrAco."N§ Fichero" <> prImp.Fichero THEN
        lrAco.VALIDATE("N§ Fichero"              , prImp.Fichero);
      IF lrAco.Temporada <> prImp.Temporada THEN
        lrAco.VALIDATE(Temporada                 , prImp.Temporada);
      IF lrAco."Fecha venta" <> prImp."Fecha creacion" THEN
        lrAco.VALIDATE("Fecha venta"             , prImp."Fecha creacion");
      IF lrAco."N§ Periodo" <> prImp.Periodo THEN
        lrAco.VALIDATE("N§ Periodo"              , prImp.Periodo);
      IF lrAco.Bono <> prImp.Bono THEN
        lrAco.VALIDATE(Bono                      , prImp.Bono);
      IF lrAco.Touroperador <> wTTOO THEN //+$012
        lrAco.VALIDATE(Touroperador              , wTTOO); //+$012
      lrAco.VALIDATE("Modificacion importacion", FALSE);
      IF (lrAco."Regimen TO" <> prImp.Regimen) AND (prImp.Regimen <> '') THEN
        lrAco.VALIDATE("Regimen TO"              , prImp.Regimen);

      IF (prImp."Fecha Entrada" < lrAco."Fecha entrada") OR (lrAco."Fecha entrada"=0D) THEN
        lrAco."Fecha entrada" := prImp."Fecha Entrada";
      IF (prImp."Fecha Salida" > lrAco."Fecha salida") THEN
        lrAco."Fecha salida" := prImp."Fecha Salida";

      IF NOT lrHotTO."No Transfer" THEN BEGIN
        GetDatosVuelo(prImp); // Buscamos los datos comunes de vuelo

        IF lrAco."Compa¤ia entrada" <> prImp."Compa¤ia entrada" THEN
          lrAco.VALIDATE("Compa¤ia entrada"    , prImp."Compa¤ia entrada");

        IF lrAco."Vuelo entrada" <> prImp."Vuelo entrada"  THEN
          lrAco.VALIDATE("Vuelo entrada"       , prImp."Vuelo entrada");

        IF lrAco."Hora entrada" <> prImp."Hora entrada" THEN
          lrAco.VALIDATE("Hora entrada"        , prImp."Hora entrada");

        IF lrAco."IATA origen entrada" <> prImp."IATA origen entrada" THEN
          lrAco.VALIDATE("IATA origen entrada" , prImp."IATA origen entrada");

        IF lrAco."IATA destino entrada" <> prImp."IATA destino entrada" THEN
          lrAco.VALIDATE("IATA destino entrada", prImp."IATA destino entrada");

        IF lrAco."Compa¤ia salida" <> prImp."Compa¤ia salida" THEN
          lrAco.VALIDATE("Compa¤ia salida"     , prImp."Compa¤ia salida");

        IF lrAco."Vuelo salida" <> prImp."Vuelo salida" THEN
          lrAco.VALIDATE("Vuelo salida"        , prImp."Vuelo salida");

        IF lrAco."Hora salida" <> prImp."Hora salida" THEN
          lrAco.VALIDATE("Hora salida"         , prImp."Hora salida");

        IF lrAco."IATA origen salida" <> prImp."IATA origen salida" THEN
          lrAco.VALIDATE("IATA origen salida"  , prImp."IATA origen salida");

        IF lrAco."IATA destino salida" <> prImp."IATA destino salida" THEN
          lrAco.VALIDATE("IATA destino salida" , prImp."IATA destino salida");
      END;

      lrAco.VALIDATE("Modificacion importacion", FALSE);

      lrAco.MODIFY(TRUE);

      ActualizaLinA(prImp);
    END;

    PROCEDURE ValidaFecha@3(VAR prImp@1103355000 : TEMPORARY Record 7010084);
    VAR
      lrPer@1103355001 : Record 7009742;
    BEGIN
      // ValidaFecha
      // La validaci¢n de las fechas se realiza a posteriori en las modificaciones para evitar errores de solapamiento

      IF NOT prImp."Validar Fecha" THEN
        EXIT;

      IF lrPer.GET(prImp.Delegacion, prImp."N§ Interno", prImp.Periodo) THEN BEGIN
        lrPer.VALIDATE("Modificacion importacion", TRUE);
        lrPer.Cambiasw_entrada(TRUE);
        lrPer.VALIDATE("Fecha entrada");
        lrPer.Cambiasw_salida(TRUE);
        lrPer.VALIDATE("Modificacion importacion", TRUE);
        lrPer.VALIDATE("Fecha salida");
        lrPer.VALIDATE("Modificacion importacion", FALSE);
        lrPer.MODIFY;
      END;
    END;

    PROCEDURE ActualizaLinA@28(VAR prImp@1103355000 : TEMPORARY Record 7010084);
    VAR
      lrAux@1103355001 : Record 7010084;
    BEGIN
      // ActualizaLinA

      lrAux.COPY(prImp);
      prImp.SETRANGE(NoPax, prImp.NoPax);
      IF prImp.FIND('-') THEN BEGIN
        REPEAT
          prImp.Delegacion       := lrAux.Delegacion;
          prImp."N§ Interno"     := lrAux."N§ Interno";
          prImp."No Acompa¤ante" := lrAux."No Acompa¤ante";
          prImp.MODIFY;
        UNTIL prImp.NEXT=0;
      END;

      // Lo dejamos en la posicion que estaba

      prImp.COPY(lrAux);
    END;

    PROCEDURE GetDatosVuelo@1103355002(VAR prImp@1103355000 : TEMPORARY Record 7010084);
    VAR
      lrAux@1103355001 : Record 7010084;
    BEGIN
      // GetDatosVuelo
      // Buscamos los datos de vuelo Comunes para un pax en una misma reserva
      // Esto es importante cuando tienen dos estancias ya que si no el vuelo de entrada desaparece
      // (la salida lo machaca una vez insertado)

      lrAux.COPY(prImp);
      prImp.SETRANGE(NoPax       , lrAux.NoPax);
      prImp.SETRANGE(Delegacion  , lrAux.Delegacion);
      prImp.SETRANGE("N§ Interno", lrAux."N§ Interno");
      prImp.SETRANGE(Procesado   , TRUE);
      IF prImp.FIND('-') THEN BEGIN
        REPEAT
          IF lrAux."Compa¤ia entrada" = ''  THEN
            lrAux."Compa¤ia entrada" := prImp."Compa¤ia entrada";

          IF lrAux."Vuelo entrada" = ''  THEN
            lrAux."Vuelo entrada" := prImp."Vuelo entrada";

          IF lrAux."Hora entrada" = 0T  THEN
            lrAux."Hora entrada" := prImp."Hora entrada";

          IF lrAux."IATA origen entrada" = ''  THEN
            lrAux."IATA origen entrada" := prImp."IATA origen entrada";

          IF lrAux."IATA destino entrada" = ''  THEN
            lrAux."IATA destino entrada" := prImp."IATA destino entrada";

          IF lrAux."Compa¤ia salida" = ''  THEN
            lrAux."Compa¤ia salida" := prImp."Compa¤ia salida";

          IF lrAux."Vuelo salida" = ''  THEN
            lrAux."Vuelo salida" := prImp."Vuelo salida";

          IF lrAux."Hora salida" = 0T  THEN
            lrAux."Hora salida" := prImp."Hora salida";

          IF lrAux."IATA origen salida" = ''  THEN
            lrAux."IATA origen salida" := prImp."IATA origen salida";

          IF lrAux."IATA destino salida" = ''  THEN
            lrAux."IATA destino salida" := prImp."IATA destino salida";
        UNTIL prImp.NEXT=0;
      END;

      // Lo dejamos en la posicion que estaba

      prImp.COPY(lrAux);
    END;

    PROCEDURE SonIguales@22(prRI1@1103355000 : TEMPORARY Record 7010084;prRI2@1103355001 : TEMPORARY Record 7010084) : Boolean;
    VAR
      lwSon@1103355002 : Boolean;
    BEGIN
      // SonIguales

      lwSon := TRUE;

      lwSon := lwSon AND (prRI1.Nombre                  = prRI2.Nombre);
      lwSon := lwSon AND (prRI1.Delegacion              = prRI2.Delegacion);
      lwSon := lwSon AND (prRI1."N§ Interno"            = prRI2."N§ Interno");
      lwSon := lwSon AND (prRI1.Hotel                   = prRI2.Hotel);
      lwSon := lwSon AND (prRI1.Habitacion              = prRI2.Habitacion);
      lwSon := lwSon AND (prRI1."Fecha Entrada"         = prRI2."Fecha Entrada");
      lwSon := lwSon AND (prRI1."Fecha Salida"          = prRI2."Fecha Salida");
      lwSon := lwSon AND (prRI1."No Acompa¤ante"        = prRI2."No Acompa¤ante");
      lwSon := lwSon AND (prRI1."Tipo Persona"          = prRI2."Tipo Persona");
      lwSon := lwSon AND (prRI1.Regimen                 = prRI2.Regimen);
      lwSon := lwSon AND (prRI1.NoPax                   = prRI2.NoPax);
      lwSon := lwSon AND (prRI1.Paquete                 = prRI2.Paquete);
      lwSon := lwSon AND (prRI1.Edad                    = prRI2.Edad);
      lwSon := lwSon AND (prRI1."Fecha Nacimiento"      = prRI2."Fecha Nacimiento");
      lwSon := lwSon AND (prRI1."Orden Vuelo"           = prRI2."Orden Vuelo");
      lwSon := lwSon AND (prRI1."N§ Habitaciones"       = prRI2."N§ Habitaciones");
      lwSon := lwSon AND (prRI1."Tipo Registro"         = prRI2."Tipo Registro");
      lwSon := lwSon AND (prRI1."Vuelo entrada"         = prRI2."Vuelo entrada");
      lwSon := lwSon AND (prRI1."Hora entrada"          = prRI2."Hora entrada");
      lwSon := lwSon AND (prRI1."Vuelo salida"          = prRI2."Vuelo salida");
      lwSon := lwSon AND (prRI1."Hora salida"           = prRI2."Hora salida");
      lwSon := lwSon AND (prRI1."IATA origen entrada"   = prRI2."IATA origen entrada");
      lwSon := lwSon AND (prRI1."IATA destino entrada"  = prRI2."IATA destino entrada");
      lwSon := lwSon AND (prRI1."IATA origen salida"    = prRI2."IATA origen salida");
      lwSon := lwSon AND (prRI1."IATA destino salida"   = prRI2."IATA destino salida");

      EXIT(lwSon);
    END;

    PROCEDURE BuscaPeriodo@4(VAR prAnt@1103355000 : TEMPORARY Record 7010084;VAR prImp@1103355001 : TEMPORARY Record 7010084);
    BEGIN
      // BuscaPeriodo

      // Es un sistema de seguridad para evitar que se dupliquen periodos en una reserva

      IF (prImp.Periodo <> 0) OR (prImp.Delegacion='') OR (prImp."N§ Interno"=0) THEN
        EXIT;

      prAnt.RESET;
      prAnt.SETRANGE(Delegacion      , prImp.Delegacion);
      prAnt.SETRANGE("N§ Interno"    , prImp."N§ Interno");
      prAnt.SETRANGE(Hotel           , prImp.Hotel);
      prAnt.SETRANGE(Habitacion      , prImp.Habitacion);
      prAnt.SETRANGE("Fecha Entrada" , prImp."Fecha Entrada");
      prAnt.SETRANGE("Fecha Salida"  , prImp."Fecha Salida");

      IF prAnt.FIND('-') THEN BEGIN
        prImp.Periodo := prAnt.Periodo;
        prImp.MODIFY;
      END;
    END;

    PROCEDURE PasarAReal@2(VAR prTmp@1103355000 : TEMPORARY Record 7010084);
    VAR
      lrReal@1103355001 : Record 7010084;
      lrTmp2@1103355002 : TEMPORARY Record 7010084;
    BEGIN
      // PasarAReal
      // JPT - 29/06/05  Esta funci¢n solo tiene objeto como ayuda al programador
      // Estamos todo el tiempo utilizando variables Temporarys que no podemos ver en su totalidad
      // Su comtido es pasarlo a la tabla real para poder as¡ invsestigar errores

      CLEAR(lrReal);
      CLEAR(lrTmp2);
      IF lrReal.FIND('-') THEN
        lrReal.DELETEALL;
      // Borramos todo lo que exista en la real

      lrTmp2.COPY(prTmp);
      prTmp.RESET;
      IF prTmp.FIND('-') THEN BEGIN
        REPEAT
          lrReal:=prTmp;
          lrReal.INSERT;
        UNTIL prTmp.NEXT=0;
      END;

      prTmp.COPY(lrTmp2); // Dejamos el registro tal y como estaba
    END;

    PROCEDURE EsHotelFicticio@1103355001(VAR prtRI@1103355003 : TEMPORARY Record 7010084);
    VAR
      lrHotTO@1103355000 : Record 7009725;
      lrHot@1103355002 : Record 7009724;
    BEGIN
      // EsHotelFicticio
      // Devuelve true si es una hotel ficcticio

      CLEAR(lrHotTO);
      IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN
        lrHotTO.SETRANGE(TourOperador        , rPar."Touroperador importacion")
      ELSE
        lrHotTO.SETRANGE(TourOperador        , wTTOO); //+$012
      lrHotTO.SETRANGE("Hotel TO"          , prtRI.Hotel);
      lrHotTO.SETRANGE("Touroperador venta", wTTOO); //+$012
      IF NOT lrHotTO.FINDFIRST THEN BEGIN
        lrHotTO.SETRANGE("Touroperador venta", '');
        IF NOT lrHotTO.FINDFIRST THEN
          CLEAR(lrHotTO);
      END;

      IF NOT lrHot.GET(lrHotTO."Hotel estancia") THEN
        CLEAR(lrHot);

      prtRI."Hotel Ficticio"     := lrHot."Hotel Ficticio";
      // JPT 29/10/08 Cuando se cumplen las dos condiciones no es un hotel sino un transfer privado
      prtRI."Hotel Transfer Prv" := lrHot."Hotel Ficticio" AND lrHotTO."Transfer Privado";
    END;

    PROCEDURE TratarHotelFicticcio@1103355004(VAR prtRI@1103355000 : TEMPORARY Record 7010084;VAR prtrExt@1103355002 : TEMPORARY Record 7010084);
    VAR
      lrAux1@1103355001 : TEMPORARY Record 7010084;
    BEGIN
      // TratarHotelFicticcio

      // Hay hoteles que en realidad son transfers privados
      // Eliminaremos las lineas de estos hoteles y marcaremos las reales con el campo "Transfer Privado""
      // Los dem s hoteles ficcticios los trataremos como extras
      // prtrExt es de salida. Se grabaran los extras ah¡

      CLEAR(prtrExt);
      prtrExt.DELETEALL;

      CLEAR(prtRI);
      PasaTemp(prtRI,lrAux1);

      lrAux1.SETRANGE("Hotel Ficticio"    , TRUE);
      IF lrAux1.FINDSET THEN BEGIN
        REPEAT
          CLEAR(prtRI);
          prtRI.SETRANGE(NoPax          , lrAux1.NoPax);
          prtRI.SETRANGE(TipoPax        , lrAux1.TipoPax);
          prtRI.SETRANGE(TipoServ       , lrAux1.TipoServ);
          prtRI.SETRANGE("Hotel Ficticio"    , FALSE);
          prtRI.SETRANGE("Hotel Transfer Prv", FALSE);
          IF lrAux1."Hotel Transfer Prv" THEN BEGIN // TRANSFER PRIVADO
            prtRI.SETRANGE("Fecha Entrada", lrAux1."Fecha Entrada");
            IF prtRI.FINDFIRST THEN BEGIN // Entrada
              CASE prtRI."Transfer Privado" OF
                prtRI."Transfer Privado"::Ninguno :  prtRI."Transfer Privado" := prtRI."Transfer Privado"::Entrada;
                prtRI."Transfer Privado"::Salida  :  prtRI."Transfer Privado" := prtRI."Transfer Privado"::Ambos;
              END;
            END
            ELSE BEGIN // Salida
              prtRI.SETRANGE("Fecha Entrada");
              prtRI.SETRANGE("Fecha Salida", lrAux1."Fecha Entrada");
              IF prtRI.FINDFIRST THEN BEGIN
                CASE prtRI."Transfer Privado" OF
                  prtRI."Transfer Privado"::Ninguno :  prtRI."Transfer Privado" := prtRI."Transfer Privado"::Salida;
                  prtRI."Transfer Privado"::Entrada :  prtRI."Transfer Privado" := prtRI."Transfer Privado"::Ambos;
                END;
              END;
            END;
            IF prtRI."Transfer Privado" <> prtRI."Transfer Privado"::Ninguno THEN BEGIN
              prtRI.Paquete := rPar."Paquete Hotel + Transfer";
              prtRI.MODIFY;
            END;
          END
          ELSE BEGIN // EXTRAS
            prtRI.SETFILTER("Fecha Entrada",'<=%1', lrAux1."Fecha Salida"  );
            prtRI.SETFILTER("Fecha Salida" ,'>=%1', lrAux1."Fecha Entrada" );
            IF prtRI.FINDFIRST THEN BEGIN
              prtrExt    := lrAux1;
              prtrExt."Modificado Por" := prtRI.No; // As¡ le decimos a que linea pertenece
              prtrExt.INSERT;
            END;
          END;

          // Borramos el registro hotel ficcticio
          CLEAR(prtRI);
          prtRI := lrAux1;
          prtRI.DELETE;
        UNTIL lrAux1.NEXT=0;
      END;
    END;

    LOCAL PROCEDURE _PaqueteTieneTransfer@1000000000(pwPaquete@1000000000 : Code[10]) : Boolean;
    VAR
      lrPaqPro@1000000001 : Record 7009752;
    BEGIN
      // _PaqueteTieneTransfer

      lrPaqPro.RESET;
      lrPaqPro.SETRANGE(Paquete        , pwPaquete);
      lrPaqPro.SETRANGE("Tipo Producto", lrPaqPro."Tipo Producto"::Transfer);
      EXIT(lrPaqPro.FINDFIRST);
    END;

    LOCAL PROCEDURE _PaqueteTieneHotel@1100217010(pwPaquete@1100217000 : Code[10]) : Boolean;
    VAR
      lrPaqProd@1100217001 : Record 7009752;
    BEGIN
      // _PaqueteTieneHotel

      lrPaqProd.RESET;
      lrPaqProd.SETRANGE(Paquete        , pwPaquete);
      lrPaqProd.SETRANGE("Tipo Producto", lrPaqProd."Tipo Producto"::Hotel);
      EXIT(lrPaqProd.FINDFIRST);
    END;

    BEGIN
    {
      $001 AJS 21102011 Modifico las busquedas de reserva para incluir la temporada

      $002 AJS 16112011 Temporalmente elimino el touroperador a la hora de filtrar las cabeceras a generar

      $003 AJS 16112011 El touroperador de compra se rellena automaticamente con REWE para las reservas con entrada
                        posterior al 010512D

      $004 AJS 22122011 Correccion de un error en las empresas que ya tenian el codigo REWE

      $005 AJS 08112012 Nueva funcion SeleccionarTipoProceso para escoger el proceso, si el fichero viene de WS trataremos
                        con el nuevo proceso

      $006 AJS 18032014 No dejamos la informacion de vuelo en blanco, porque algunos touroperadores no la envian y entonces
                        cuando ocurre una modificacion la reserva se queda sin el vuelo que se ha metido a mano

      $007 AJS 09092014 CNT-OC-14080, Modificacion del formato del fichero para que venga la indicaci¢n del servicio de transfer

      $008 AJS 09092014 CNT-OC-14080, Tratamiento del campo Tipo operacion para distinguir Charter y Regular

      $009 ARM 30092014 CNT-CAR-14063 Nuevos campos Servicio transfer entrada y salida

      $010 AJS 10112014 Habia un error de aplicacion de los campos Servicio transfer entrada y salida

      $011 AJS 24122014 Modifico la funcion InsertaPeriodo para ignorar aquellos que tenga servicio transfer entrada/salida con N

      $012 AJS 15012015 Utilizar la funcion de conversion touroperador que hay en la propia tabla

      $013 AJS 16022015 Modificar los FIND('+') por FINDLAST
    }
    END.
  }
}
