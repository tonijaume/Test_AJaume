OBJECT Codeunit 99000842 Service Line-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 337=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Codeunit is not initialized correctly.;ESP=Codeunit no iniciada correctamente.';
      Text001@1001 : TextConst 'ENU=Reserved quantity cannot be greater than %1;ESP=La cantidad reservada no puede ser mayor que %1';
      Text002@1002 : TextConst 'ENU=must be filled in when a quantity is reserved;ESP=se debe rellenar cuando se ha reservado una cantidad';
      Text003@1003 : TextConst 'ENU=must not be changed when a quantity is reserved;ESP=no se debe modificar cuando se ha reservado una cantidad';
      CreateReservEntry@1004 : Codeunit 99000830;
      ReservEngineMgt@1005 : Codeunit 99000831;
      ReservMgt@1006 : Codeunit 99000845;
      ItemTrackingMgt@1023 : Codeunit 6500;
      SetFromType@1008 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry';
      SetFromSubtype@1009 : Integer;
      SetFromID@1010 : Code[20];
      SetFromBatchName@1011 : Code[10];
      SetFromProdOrderLine@1012 : Integer;
      SetFromRefNo@1013 : Integer;
      SetFromVariantCode@1014 : Code[10];
      SetFromLocationCode@1015 : Code[10];
      SetFromSerialNo@1017 : Code[20];
      SetFromLotNo@1018 : Code[20];
      SetFromQtyPerUOM@1019 : Decimal;
      DeleteItemTracking@1016 : Boolean;
      Text004@1007 : TextConst 'ENU=must not be filled in when a quantity is reserved;ESP=no se debe rellenar cuando se ha reservado una cantidad';
      OverruleItemTracking@1020 : Boolean;

    PROCEDURE CreateReservation@1(VAR ServiceLine@1000 : Record 5902;Description@1001 : Text[50];ExpectedReceiptDate@1002 : Date;Quantity@1003 : Decimal;ForSerialNo@1005 : Code[20];ForLotNo@1004 : Code[20]);
    VAR
      ShipmentDate@1007 : Date;
    BEGIN
      IF SetFromType = 0 THEN
        ERROR(Text000);

      ServiceLine.TESTFIELD(Type,ServiceLine.Type::Item);
      ServiceLine.TESTFIELD("No.");
      ServiceLine.TESTFIELD("Posting Date");
      ServiceLine.CALCFIELDS("Reserved Qty. (Base)");
      IF ABS(ServiceLine."Outstanding Qty. (Base)") < ABS(ServiceLine."Reserved Qty. (Base)") + Quantity THEN
        ERROR(
          Text001,
          ABS(ServiceLine."Outstanding Qty. (Base)") - ABS(ServiceLine."Reserved Qty. (Base)"));

      ServiceLine.TESTFIELD("Variant Code",SetFromVariantCode);
      ServiceLine.TESTFIELD("Location Code",SetFromLocationCode);

      IF Quantity > 0 THEN
        ShipmentDate := ServiceLine."Posting Date"
      ELSE BEGIN
        ShipmentDate := ExpectedReceiptDate;
        ExpectedReceiptDate := ServiceLine."Posting Date";
      END;

      CreateReservEntry.CreateReservEntryFor(
        DATABASE::"Service Line",ServiceLine."Document Type",
        ServiceLine."Document No.",'',0,ServiceLine."Line No.",
        ServiceLine."Qty. per Unit of Measure",Quantity,ForSerialNo,ForLotNo);
      CreateReservEntry.CreateReservEntryFrom(
        SetFromType,SetFromSubtype,SetFromID,SetFromBatchName,SetFromProdOrderLine,SetFromRefNo,
        SetFromQtyPerUOM,SetFromSerialNo,SetFromLotNo);
      CreateReservEntry.CreateReservEntry(
        ServiceLine."No.",ServiceLine."Variant Code",ServiceLine."Location Code",
        Description,ExpectedReceiptDate,ShipmentDate,0);

      SetFromType := 0;
    END;

    PROCEDURE CreateReservationSetFrom@7(FromType@1000 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry';FromSubtype@1001 : Integer;FromID@1002 : Code[20];FromBatchName@1003 : Code[10];FromProdOrderLine@1004 : Integer;FromRefNo@1005 : Integer;FromVariantCode@1006 : Code[10];FromLocationCode@1007 : Code[10];FromSerialNo@1009 : Code[20];FromLotNo@1010 : Code[20];FromQtyPerUOM@1011 : Decimal);
    BEGIN
      SetFromType := FromType;
      SetFromSubtype := FromSubtype;
      SetFromID := FromID;
      SetFromBatchName := FromBatchName;
      SetFromProdOrderLine := FromProdOrderLine;
      SetFromRefNo := FromRefNo;
      SetFromVariantCode := FromVariantCode;
      SetFromLocationCode := FromLocationCode;
      SetFromSerialNo := FromSerialNo;
      SetFromLotNo := FromLotNo;
      SetFromQtyPerUOM := FromQtyPerUOM;
    END;

    PROCEDURE FilterReservFor@12(VAR FilterReservEntry@1000 : Record 337;ServiceLine@1001 : Record 5902);
    BEGIN
      FilterReservEntry.SETRANGE("Source Type",DATABASE::"Service Line");
      FilterReservEntry.SETRANGE("Source Subtype",ServiceLine."Document Type");
      FilterReservEntry.SETRANGE("Source ID",ServiceLine."Document No.");
      FilterReservEntry.SETRANGE("Source Batch Name",'');
      FilterReservEntry.SETRANGE("Source Prod. Order Line",0);
      FilterReservEntry.SETRANGE("Source Ref. No.",ServiceLine."Line No.");
    END;

    PROCEDURE Caption@30(ServiceLine@1001 : Record 5902) CaptionText@1000 : Text[80];
    BEGIN
      CaptionText :=
        STRSUBSTNO('%1 %2 %3',ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."No.");
    END;

    PROCEDURE FindReservEntry@4(ServiceLine@1000 : Record 5902;VAR ReservEntry@1001 : Record 337) : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,ServiceLine);
      EXIT(ReservEntry.FINDLAST);
    END;

    PROCEDURE ReservEntryExist@17(ServLine@1000 : Record 5902) : Boolean;
    VAR
      ReservEntry@1001 : Record 337;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,ServLine);
      EXIT(NOT ReservEntry.ISEMPTY);
    END;

    PROCEDURE ReservQuantity@21(ServLine@1001 : Record 5902) QtyToReserve@1000 : Decimal;
    BEGIN
      CASE ServLine."Document Type" OF
        ServLine."Document Type"::Quote,
        ServLine."Document Type"::Order,
        ServLine."Document Type"::Invoice:
          QtyToReserve := ServLine."Outstanding Qty. (Base)";
        ServLine."Document Type"::"Credit Memo":
          QtyToReserve := -ServLine."Outstanding Qty. (Base)"
      END;
    END;

    PROCEDURE VerifyChange@59(VAR NewServiceLine@1000 : Record 5902;VAR OldServiceLine@1001 : Record 5902);
    VAR
      ServiceLine@1005 : Record 5902;
      TempReservEntry@1002 : Record 337;
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
    BEGIN
      IF (NewServiceLine.Type <> NewServiceLine.Type::Item) AND (OldServiceLine.Type <> OldServiceLine.Type::Item) THEN
        EXIT;

      IF NewServiceLine."Line No." = 0 THEN
        IF NOT ServiceLine.GET(NewServiceLine."Document Type",NewServiceLine."Document No.",NewServiceLine."Line No.") THEN
          EXIT;

      NewServiceLine.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewServiceLine."Reserved Qty. (Base)" <> 0;

      IF (NewServiceLine."Posting Date" = 0D) AND (OldServiceLine."Posting Date" <> 0D) THEN
        IF ShowError THEN
          NewServiceLine.FIELDERROR("Posting Date",Text002)
        ELSE
          HasError := TRUE;

      IF NewServiceLine.Type <> OldServiceLine.Type THEN
        IF ShowError THEN
          NewServiceLine.FIELDERROR(Type,Text003)
        ELSE
          HasError := TRUE;

      IF NewServiceLine."No." <> OldServiceLine."No." THEN
        IF ShowError THEN
          NewServiceLine.FIELDERROR("No.",Text003)
        ELSE
          HasError := TRUE;

      IF NewServiceLine."Variant Code" <> OldServiceLine."Variant Code" THEN
        IF ShowError THEN
          NewServiceLine.FIELDERROR("Variant Code",Text003)
        ELSE
          HasError := TRUE;

      IF NewServiceLine."Location Code" <> OldServiceLine."Location Code" THEN
        IF ShowError THEN
          NewServiceLine.FIELDERROR("Location Code",Text003)
        ELSE
          HasError := TRUE;

      IF (NewServiceLine."Bin Code" <> OldServiceLine."Bin Code") THEN
        IF ShowError THEN
          NewServiceLine.FIELDERROR("Bin Code",Text004)
        ELSE
          HasError := TRUE;

      IF NewServiceLine."Line No." <> OldServiceLine."Line No." THEN
        HasError := TRUE;

      IF HasError THEN
        IF (NewServiceLine."No." <> OldServiceLine."No.") OR
           FindReservEntry(NewServiceLine,TempReservEntry)
        THEN BEGIN
          IF NewServiceLine."No." <> OldServiceLine."No." THEN BEGIN
            ReservMgt.SetServLine(OldServiceLine);
            ReservMgt.DeleteReservEntries(TRUE,0);
            ReservMgt.SetServLine(NewServiceLine);
          END ELSE BEGIN
            ReservMgt.SetServLine(NewServiceLine);
            ReservMgt.DeleteReservEntries(TRUE,0);
          END;
          ReservMgt.AutoTrack(NewServiceLine."Outstanding Qty. (Base)");
        END;

      IF HasError OR (NewServiceLine."Posting Date" <> NewServiceLine."Posting Date")
      THEN BEGIN
        AssignForPlanning(NewServiceLine);
        IF (NewServiceLine."No." <> OldServiceLine."No.") OR
           (NewServiceLine."Variant Code" <> OldServiceLine."Variant Code") OR
           (NewServiceLine."Location Code" <> OldServiceLine."Location Code")
        THEN
          AssignForPlanning(OldServiceLine);
      END;
    END;

    PROCEDURE VerifyQuantity@2(VAR NewServiceLine@1000 : Record 5902;VAR OldServiceLine@1001 : Record 5902);
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      WITH NewServiceLine DO BEGIN
        IF NOT ("Document Type" IN
                ["Document Type"::Quote,"Document Type"::Order])
        THEN
          IF NewServiceLine."Shipment No." = '' THEN
            EXIT;

        IF Type <> Type::Item THEN
          EXIT;
        IF "Line No." = OldServiceLine."Line No." THEN
          IF "Quantity (Base)" = OldServiceLine."Quantity (Base)" THEN
            EXIT;
        IF "Line No." = 0 THEN
          IF NOT ServiceLine.GET("Document Type","Document No.","Line No.") THEN
            EXIT;
        ReservMgt.SetServLine(NewServiceLine);
        IF "Qty. per Unit of Measure" <> OldServiceLine."Qty. per Unit of Measure" THEN
          ReservMgt.ModifyUnitOfMeasure;
        IF "Outstanding Qty. (Base)" * OldServiceLine."Outstanding Qty. (Base)" < 0 THEN
          ReservMgt.DeleteReservEntries(FALSE,0)
        ELSE
          ReservMgt.DeleteReservEntries(FALSE,"Outstanding Qty. (Base)");
        ReservMgt.ClearSurplus;
        ReservMgt.AutoTrack("Outstanding Qty. (Base)");
        AssignForPlanning(NewServiceLine);
      END;
    END;

    PROCEDURE AssignForPlanning@5(VAR ServiceLine@1000 : Record 5902);
    VAR
      PlanningAssignment@1001 : Record 99000850;
    BEGIN
      WITH ServiceLine DO BEGIN
        IF "Document Type" <> "Document Type"::Order THEN
          EXIT;
        IF Type <> Type::Item THEN
          EXIT;
        IF "No." <> '' THEN
          PlanningAssignment.ChkAssignOne("No.","Variant Code","Location Code","Posting Date");
      END;
    END;

    PROCEDURE RenameLine@8(VAR NewServiceLine@1001 : Record 5902;VAR OldServiceLine@1000 : Record 5902);
    BEGIN
      ReservEngineMgt.RenamePointer(DATABASE::"Service Line",
        OldServiceLine."Document Type",
        OldServiceLine."Document No.",
        '',
        0,
        OldServiceLine."Line No.",
        NewServiceLine."Document Type",
        NewServiceLine."Document No.",
        '',
        0,
        NewServiceLine."Line No.");
    END;

    PROCEDURE DeleteLineConfirm@20(VAR ServLine@1000 : Record 5902) : Boolean;
    BEGIN
      WITH ServLine DO BEGIN
        IF NOT ReservEntryExist(ServLine) THEN
          EXIT(TRUE);

        ReservMgt.SetServLine(ServLine);
        IF ReservMgt.DeleteItemTrackingConfirm THEN
          DeleteItemTracking := TRUE;
      END;

      EXIT(DeleteItemTracking);
    END;

    PROCEDURE DeleteLine@3(VAR ServLine@1000 : Record 5902);
    BEGIN
      WITH ServLine DO BEGIN
        ReservMgt.SetServLine(ServLine);
        IF DeleteItemTracking THEN
          ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
        ReservMgt.DeleteReservEntries(TRUE,0);
        DeleteInvoiceSpecFromLine(ServLine);
        CALCFIELDS("Reserved Qty. (Base)");
      END;
    END;

    PROCEDURE CallItemTracking@6(VAR ServiceLine@1003 : Record 5902);
    VAR
      TrackingSpecification@1001 : Record 336;
      ItemTrackingForm@1002 : Form 6510;
    BEGIN
      InitTrackingSpecification(ServiceLine,TrackingSpecification,FALSE);
      IF ((ServiceLine."Document Type" = ServiceLine."Document Type"::Invoice) AND
          (ServiceLine."Shipment No." <> ''))
      THEN
        ItemTrackingForm.SetFormRunMode(2); // Combined shipment/receipt
      ItemTrackingForm.SetSource(TrackingSpecification,ServiceLine."Posting Date");

      ItemTrackingForm.SetInbound(
        ((ServiceLine."Document Type" IN [ServiceLine."Document Type"::"Credit Memo"]) AND
         (ServiceLine."Quantity (Base)" > 0)) OR
        ((ServiceLine."Document Type" IN [ServiceLine."Document Type"::Order,ServiceLine."Document Type"::Invoice]) AND
         (ServiceLine."Quantity (Base)" < 0)));

      ItemTrackingForm.RUNMODAL;
    END;

    PROCEDURE InitTrackingSpecification@10(VAR ServiceLine@1001 : Record 5902;VAR TrackingSpecification@1003 : Record 336;Consume@1000 : Boolean);
    BEGIN
      TrackingSpecification.INIT;
      TrackingSpecification."Source Type" := DATABASE::"Service Line";
      WITH ServiceLine DO BEGIN
        TrackingSpecification."Item No." := "No.";
        TrackingSpecification."Location Code" := "Location Code";
        TrackingSpecification.Description := Description;
        TrackingSpecification."Variant Code" := "Variant Code";
        TrackingSpecification."Source Subtype" := "Document Type";
        TrackingSpecification."Source ID" := "Document No.";
        TrackingSpecification."Source Batch Name" := '';
        TrackingSpecification."Source Prod. Order Line" := 0;
        TrackingSpecification."Source Ref. No." := "Line No.";
        TrackingSpecification."Quantity (Base)" := "Quantity (Base)";
        IF Consume THEN BEGIN
          TrackingSpecification."Qty. to Invoice (Base)" := "Qty. to Consume (Base)";
          TrackingSpecification."Qty. to Invoice" := "Qty. to Consume";
          TrackingSpecification."Quantity Invoiced (Base)" := "Qty. Consumed (Base)";
        END ELSE BEGIN
          TrackingSpecification."Qty. to Invoice (Base)" := "Qty. to Invoice (Base)";
          TrackingSpecification."Qty. to Invoice" := "Qty. to Invoice";
          TrackingSpecification."Quantity Invoiced (Base)" := "Qty. Invoiced (Base)";
        END;
        TrackingSpecification."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        TrackingSpecification."Bin Code" := "Bin Code";

        IF "Document Type" IN ["Document Type"::"Credit Memo"] THEN BEGIN
          TrackingSpecification."Qty. to Handle (Base)" := "Qty. to Invoice (Base)";
          TrackingSpecification."Quantity Handled (Base)" := "Qty. Invoiced (Base)";
          TrackingSpecification."Qty. to Handle" := "Qty. to Invoice";
        END ELSE BEGIN
          TrackingSpecification."Qty. to Handle (Base)" := "Qty. to Ship (Base)";
          TrackingSpecification."Quantity Handled (Base)" := "Qty. Shipped (Base)";
          TrackingSpecification."Qty. to Handle" := "Qty. to Ship";
        END;
      END;
    END;

    PROCEDURE TransServLineToServLine@31(VAR OldServLine@1000 : Record 5902;VAR NewServLine@1001 : Record 5902;TransferQty@1002 : Decimal);
    VAR
      OldReservEntry@1003 : Record 337;
      Status@1004 : 'Reservation,Tracking,Surplus,Prospect';
    BEGIN
      IF NOT FindReservEntry(OldServLine,OldReservEntry) THEN
        EXIT;

      OldReservEntry.Lock;

      NewServLine.TESTFIELD("No.",OldServLine."No.");
      NewServLine.TESTFIELD("Variant Code",OldServLine."Variant Code");
      NewServLine.TESTFIELD("Location Code",OldServLine."Location Code");

      FOR Status := Status::Reservation TO Status::Prospect DO BEGIN
        IF TransferQty = 0 THEN
          EXIT;
        OldReservEntry.SETRANGE("Reservation Status",Status);
        IF OldReservEntry.FINDSET THEN
          REPEAT
            OldReservEntry.TESTFIELD("Item No.",OldServLine."No.");
            OldReservEntry.TESTFIELD("Variant Code",OldServLine."Variant Code");
            OldReservEntry.TESTFIELD("Location Code",OldServLine."Location Code");

            TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Service Line",
                NewServLine."Document Type",NewServLine."Document No.",'',0,
                NewServLine."Line No.",NewServLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

          UNTIL (OldReservEntry.NEXT = 0) OR (TransferQty = 0);
      END;
    END;

    PROCEDURE RetrieveInvoiceSpecification@9(VAR ServLine@1002 : Record 5902;VAR TempInvoicingSpecification@1001 : TEMPORARY Record 336;Consume@1004 : Boolean) OK@1003 : Boolean;
    VAR
      SourceSpecification@1000 : Record 336;
    BEGIN
      IF ServLine.Type <> ServLine.Type::Item THEN
        EXIT;
      IF ((ServLine."Document Type" = ServLine."Document Type"::Invoice) AND
          (ServLine."Shipment No." <> ''))
      THEN
        OK := RetrieveInvoiceSpecification2(ServLine,TempInvoicingSpecification)
      ELSE BEGIN
        InitTrackingSpecification(ServLine,SourceSpecification,Consume);
        OK := ItemTrackingMgt.RetrieveInvoiceSpecWithService(SourceSpecification,TempInvoicingSpecification,Consume);
      END;
    END;

    LOCAL PROCEDURE RetrieveInvoiceSpecification2@1013(VAR ServLine@1002 : Record 5902;VAR TempInvoicingSpecification@1001 : TEMPORARY Record 336) OK@1003 : Boolean;
    VAR
      TrackingSpecification@1000 : Record 336;
      ReservEntry@1004 : Record 337;
    BEGIN
      // Used for combined shipment:
      IF ServLine.Type <> ServLine.Type::Item THEN
        EXIT;
      IF NOT FindReservEntry(ServLine,ReservEntry) THEN
        EXIT;
      ReservEntry.FINDSET;
      REPEAT
        ReservEntry.TESTFIELD("Reservation Status",ReservEntry."Reservation Status"::Prospect);
        ReservEntry.TESTFIELD("Appl.-to Item Entry");
        TrackingSpecification.GET(ReservEntry."Appl.-to Item Entry");
        TempInvoicingSpecification := TrackingSpecification;
        TempInvoicingSpecification."Qty. to Invoice (Base)" :=
          ReservEntry."Qty. to Invoice (Base)";
        TempInvoicingSpecification."Qty. to Invoice" :=
          ROUND(ReservEntry."Qty. to Invoice (Base)"/ReservEntry."Qty. per Unit of Measure",0.00001);
        TempInvoicingSpecification."Buffer Status" := TempInvoicingSpecification."Buffer Status"::MODIFY;
        TempInvoicingSpecification.INSERT;
        ReservEntry.DELETE;
      UNTIL ReservEntry.NEXT = 0;

      OK := TempInvoicingSpecification.FINDFIRST;
    END;

    PROCEDURE DeleteInvoiceSpecFromHeader@14(VAR ServHeader@1002 : Record 5900);
    VAR
      TrackingSpecification@1001 : Record 336;
    BEGIN
      TrackingSpecification.SETCURRENTKEY("Source ID","Source Type",
        "Source Subtype","Source Batch Name","Source Prod. Order Line","Source Ref. No.");
      TrackingSpecification.SETRANGE("Source Type",DATABASE::"Service Line");
      TrackingSpecification.SETRANGE("Source Subtype",ServHeader."Document Type");
      TrackingSpecification.SETRANGE("Source ID",ServHeader."No.");
      TrackingSpecification.SETRANGE("Source Batch Name",'');
      TrackingSpecification.SETRANGE("Source Prod. Order Line",0);
      IF TrackingSpecification.FINDSET THEN
        REPEAT
          TrackingSpecification.DELETE;
        UNTIL TrackingSpecification.NEXT = 0;
    END;

    LOCAL PROCEDURE DeleteInvoiceSpecFromLine@19(ServLine@1002 : Record 5902);
    VAR
      TrackingSpecification@1001 : Record 336;
    BEGIN
      TrackingSpecification.SETCURRENTKEY("Source ID","Source Type",
        "Source Subtype","Source Batch Name","Source Prod. Order Line","Source Ref. No.");
      TrackingSpecification.SETRANGE("Source ID",ServLine."Document No.");
      TrackingSpecification.SETRANGE("Source Type",DATABASE::"Service Line");
      TrackingSpecification.SETRANGE("Source Subtype",ServLine."Document Type");
      TrackingSpecification.SETRANGE("Source Batch Name",'');
      TrackingSpecification.SETRANGE("Source Prod. Order Line",0);
      TrackingSpecification.SETRANGE("Source Ref. No.",ServLine."Line No.");
      IF TrackingSpecification.FINDSET THEN
        REPEAT
          TrackingSpecification.DELETE;
        UNTIL TrackingSpecification.NEXT = 0;
    END;

    PROCEDURE TransServLineToItemJnlLine@35(VAR ServLine@1000 : Record 5902;VAR ItemJnlLine@1001 : Record 83;TransferQty@1004 : Decimal;VAR CheckApplFromItemEntry@1002 : Boolean) : Decimal;
    VAR
      OldReservEntry@1003 : Record 337;
    BEGIN
      IF NOT FindReservEntry(ServLine,OldReservEntry) THEN
        EXIT(TransferQty);

      OldReservEntry.Lock;

      IF OverruleItemTracking THEN
        IF (ItemJnlLine."Serial No." <> '') OR (ItemJnlLine."Lot No." <> '') THEN BEGIN
          CreateReservEntry.SetNewSerialLotNo(ItemJnlLine."Serial No.",ItemJnlLine."Lot No.");
          CreateReservEntry.SetOverruleItemTracking(TRUE);
          // Try to match against Item Tracking on the service order line:
          OldReservEntry.SETRANGE("Serial No.",ItemJnlLine."Serial No.");
          OldReservEntry.SETRANGE("Lot No.",ItemJnlLine."Lot No.");
          IF OldReservEntry.ISEMPTY THEN
            EXIT(TransferQty);
        END;


      ItemJnlLine.TESTFIELD("Item No.",ServLine."No.");
      ItemJnlLine.TESTFIELD("Variant Code",ServLine."Variant Code");
      ItemJnlLine.TESTFIELD("Location Code",ServLine."Location Code");

      IF TransferQty = 0 THEN
        EXIT;

      IF ItemJnlLine."Invoiced Quantity" <> 0 THEN
        CreateReservEntry.SetUseQtyToInvoice(TRUE);

      IF ReservEngineMgt.InitRecordSet(OldReservEntry) THEN BEGIN
        REPEAT
          OldReservEntry.TESTFIELD("Item No.",ServLine."No.");
          OldReservEntry.TESTFIELD("Variant Code",ServLine."Variant Code");
          OldReservEntry.TESTFIELD("Location Code",ServLine."Location Code");

          IF CheckApplFromItemEntry THEN BEGIN
            OldReservEntry.TESTFIELD("Appl.-from Item Entry");
            CreateReservEntry.SetApplyFromEntryNo(OldReservEntry."Appl.-from Item Entry");
          END;

          TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Item Journal Line",
              ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",
              ItemJnlLine."Journal Batch Name",0,ItemJnlLine."Line No.",
              ItemJnlLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

        UNTIL (ReservEngineMgt.NEXTRecord(OldReservEntry) = 0) OR (TransferQty = 0);
        CheckApplFromItemEntry := FALSE;
      END;
      EXIT(TransferQty);
    END;

    PROCEDURE UpdateItemTrackingAfterPosting@11(ServHeader@1000 : Record 5900);
    VAR
      ReservEntry@1003 : Record 337;
      CreateReservEntry@1001 : Codeunit 99000830;
    BEGIN
      // Used for updating Quantity to Handle and Quantity to Invoice after posting
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      ReservEntry.SETRANGE("Source Type",DATABASE::"Service Line");
      ReservEntry.SETRANGE("Source Subtype",ServHeader."Document Type");
      ReservEntry.SETRANGE("Source ID",ServHeader."No.");
      ReservEntry.SETRANGE("Source Batch Name",'');
      ReservEntry.SETRANGE("Source Prod. Order Line",0);
      CreateReservEntry.UpdateItemTrackingAfterPosting(ReservEntry);
    END;

    BEGIN
    END.
  }
}
