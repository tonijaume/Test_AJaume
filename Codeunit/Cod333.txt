OBJECT Codeunit 333 Req. Wksh.-Make Order
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    TableNo=246;
    Permissions=TableData 37=m;
    OnRun=BEGIN
            IF RECORDLEVELLOCKING AND PlanningResiliency THEN
              LOCKTABLE;
            CarryOutReqLineAction(Rec);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Worksheet Name                     #1##########\\;ESP=Nombre hoja                        #1##########\\';
      Text001@1001 : TextConst 'ENU=Checking worksheet lines           #2######\;ESP=Comprobando l¡neas hoja            #2######\';
      Text002@1002 : TextConst 'ENU=Creating purchase orders           #3######\;ESP=Creando pedidos de compra          #3######\';
      Text003@1003 : TextConst 'ENU=Creating purchase lines            #4######\;ESP=Creando l¡neas de compra           #4######\';
      Text004@1004 : TextConst 'ENU=Updating worksheet lines           #5######;ESP=Actualizando l¡neas hoja           #5######';
      Text005@1005 : TextConst 'ENU=Deleting worksheet lines           #5######;ESP=Borrando l¡neas hoja               #5######';
      Text006@1006 : TextConst 'ENU=%1 on sales order %2 is already associated with purchase order %3.;ESP=En el pedido de venta %2, %1 est  asociado con el pedido de compra %3.';
      Text007@1007 : TextConst 'ENU=<Month Text>;ESP=<Month Text>';
      Text008@1008 : TextConst 'ENU=The combination of dimensions used in %1 %2, %3, %4 is blocked. %5;ESP=La combin. de dimensiones utilizada en %1 %2, %3, %4 est  bloq. %5';
      Text009@1009 : TextConst 'ENU=A dimension used in %1 %2, %3, %4 has caused an error. %5;ESP=La dimensi¢n util. en %1 %2, %3, %4 ha causado error. %5';
      ReservEntry@1050 : Record 337;
      PurchSetup@1010 : Record 312;
      ReqTemplate@1011 : Record 244;
      ReqWkshName@1012 : Record 245;
      PurchOrderHeader@1016 : Record 38;
      PurchOrderLine@1018 : Record 39;
      SalesOrderHeader@1019 : Record 36;
      SalesOrderLine@1020 : Record 37;
      TransHeader@1028 : Record 5740;
      ReportSelection@1021 : Record 77;
      AccountingPeriod@1022 : Record 50;
      TempJnlLineDim@1023 : TEMPORARY Record 356;
      CompanyInfo@1024 : Record 79;
      TempFailedReqLine@1054 : TEMPORARY Record 246;
      PurchasingCode@1046 : Record 5721;
      Location@1045 : Record 14;
      ReqWkshMakeOrders@1053 : Codeunit 333;
      TransferExtendedText@1027 : Codeunit 378;
      ReserveReqLine@1025 : Codeunit 99000833;
      DimMgt@1026 : Codeunit 408;
      Window@1029 : Dialog;
      OrderDateReq@1030 : Date;
      PostingDateReq@1031 : Date;
      ReceiveDateReq@1032 : Date;
      EndOrderDate@1035 : Date;
      PlanningResiliency@1055 : Boolean;
      PrintPurchOrders@1034 : Boolean;
      ReferenceReq@1033 : Text[30];
      MonthText@1044 : Text[30];
      OrderCounter@1036 : Integer;
      LineCount@1037 : Integer;
      OrderLineCounter@1038 : Integer;
      StartLineNo@1039 : Integer;
      NextLineNo@1040 : Integer;
      Day@1041 : Integer;
      Week@1042 : Integer;
      Month@1043 : Integer;
      CounterFailed@1052 : Integer;
      PrevPurchCode@1047 : Code[10];
      PrevShipToCode@1017 : Code[10];
      "0DF"@1048 : DateFormula;
      Text010@1049 : TextConst 'ENU=must match %1 on Sales Order %2, Line %3;ESP=debe coincidir %1 en Ped. venta %2, L¡nea %3';

    PROCEDURE CarryOutBatchAction@18(VAR ReqLine2@1000 : Record 246);
    VAR
      ReqLine@1001 : Record 246;
    BEGIN
      ReqLine.COPY(ReqLine2);
      ReqLine.SETRANGE("Accept Action Message",TRUE);
      Code(ReqLine);
      ReqLine2 := ReqLine;
    END;

    PROCEDURE Set@1(NewPurchOrderHeader@1000 : Record 38;NewEndingOrderDate@1001 : Date;NewPrintPurchOrder@1002 : Boolean);
    BEGIN
      PurchOrderHeader := NewPurchOrderHeader;
      EndOrderDate := NewEndingOrderDate;
      PrintPurchOrders := NewPrintPurchOrder;
      OrderDateReq := PurchOrderHeader."Order Date";
      PostingDateReq := PurchOrderHeader."Posting Date";
      ReceiveDateReq := PurchOrderHeader."Expected Receipt Date";
      ReferenceReq := PurchOrderHeader."Your Reference";
    END;

    LOCAL PROCEDURE Code@8(VAR ReqLine@1001 : Record 246);
    VAR
      JnlLineDim@1000 : Record 356;
      ReqLine2@1002 : Record 246;
      ReqLine3@1003 : Record 246;
    BEGIN
      WITH ReqLine DO BEGIN
        CLEAR(PurchOrderHeader);

        SETRANGE("Worksheet Template Name","Worksheet Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        IF RECORDLEVELLOCKING AND NOT(PlanningResiliency) THEN
          LOCKTABLE;

        IF "Planning Line Origin" <> "Planning Line Origin"::"Order Planning" THEN
          ReqTemplate.GET("Worksheet Template Name");

        IF ReqTemplate.Recurring THEN BEGIN
          SETRANGE("Order Date",0D,EndOrderDate);
          SETFILTER("Expiration Date",'%1 | %2..',0D,WORKDATE);
        END;

        IF NOT FIND('=><') THEN BEGIN
          "Line No." := 0;
          COMMIT;
          EXIT;
        END;

        IF ReqTemplate.Recurring THEN
          Window.OPEN(
            Text000 +
            Text001 +
            Text002 +
            Text003 +
            Text004)
        ELSE
          Window.OPEN(
            Text000 +
            Text001 +
            Text002 +
            Text003 +
            Text005);

        Window.UPDATE(1,"Journal Batch Name");

        // Check lines
        LineCount := 0;
        StartLineNo := "Line No.";
        REPEAT
          LineCount := LineCount + 1;
          Window.UPDATE(2,LineCount);
          CheckRecurringLine(ReqLine);
          JnlLineDim.SETRANGE("Table ID",DATABASE::"Requisition Line");
          JnlLineDim.SETRANGE("Journal Template Name","Worksheet Template Name");
          JnlLineDim.SETRANGE("Journal Batch Name","Journal Batch Name");
          JnlLineDim.SETRANGE("Journal Line No.","Line No.");
          JnlLineDim.SETRANGE("Allocation Line No.",0);
          DimMgt.CopyJnlLineDimToJnlLineDim(JnlLineDim,TempJnlLineDim);
          CheckReqWkshLine(ReqLine,TempJnlLineDim);
          IF NEXT = 0 THEN
            FIND('-');
        UNTIL "Line No." = StartLineNo;

        // Create lines
        LineCount := 0;
        OrderCounter := 0;
        OrderLineCounter := 0;
        CLEAR(PurchOrderHeader);
        SetPurchOrderHeader;
        SETCURRENTKEY(
          "Worksheet Template Name","Journal Batch Name","Vendor No.",
          "Sell-to Customer No.","Ship-to Code","Order Address Code","Currency Code",
          "Location Code","Transfer-from Code");
        IF FIND('-') THEN
          REPEAT
            IF PlanningResiliency THEN BEGIN
              IF NOT TryCarryOutReqLineAction(ReqLine) THEN BEGIN
                SetFailedReqLine(ReqLine);
                CounterFailed := CounterFailed + 1;
              END;
            END ELSE
              CarryOutReqLineAction(ReqLine);
          UNTIL NEXT = 0;

        IF PrintPurchOrders THEN
          PrintTransOrder;

        IF PurchOrderHeader."Buy-from Vendor No." <> '' THEN
          FinalizeOrderHeader(PurchOrderHeader,ReqLine);

        // Copy number of created orders and current journal batch name to requisition worksheet
        INIT;
        "Line No." := OrderCounter;

        IF OrderCounter <> 0 THEN
          IF NOT ReqTemplate.Recurring THEN BEGIN
            // Not a recurring journal
            ReqLine2.COPY(ReqLine);
            ReqLine2.SETFILTER("Vendor No.",'<>%1','');
            IF ReqLine2.FIND('-') THEN; // Remember the last line
            IF FIND('-') THEN
              REPEAT
                TempFailedReqLine := ReqLine;
                IF NOT TempFailedReqLine.FIND THEN
                  DELETE(TRUE);
              UNTIL NEXT = 0;
            TempJnlLineDim.DELETEALL;

            ReqLine3.SETRANGE("Worksheet Template Name","Worksheet Template Name");
            ReqLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
            IF NOT ReqLine3.FIND('+') THEN
              IF INCSTR("Journal Batch Name") <> '' THEN BEGIN
                ReqWkshName.GET("Worksheet Template Name","Journal Batch Name");
                ReqWkshName.DELETE;
                ReqWkshName.Name := INCSTR("Journal Batch Name");
                IF ReqWkshName.INSERT THEN;
                "Journal Batch Name" := ReqWkshName.Name;
              END;

            ReqLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
            IF NOT ReqLine3.FIND('+') THEN BEGIN
              ReqLine3.INIT;
              ReqLine3."Worksheet Template Name" := "Worksheet Template Name";
              ReqLine3."Journal Batch Name" := "Journal Batch Name";
              ReqLine3."Line No." := 10000;
              ReqLine3.Type := ReqLine2.Type;
              ReqLine3."Order Date" := ReqLine2."Order Date";
              ReqLine3.INSERT;
            END;
          END;
      END;
    END;

    PROCEDURE CheckReqWkshLine@2(VAR ReqLine2@1000 : Record 246;VAR JnlLineDim@1001 : Record 356);
    VAR
      SalesLine@1004 : Record 37;
      Purchasing@1005 : Record 5721;
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      WITH ReqLine2 DO BEGIN
        IF ("No." <> '') OR ("Vendor No." <> '') OR (Quantity <> 0) THEN BEGIN
          TESTFIELD("No.");
          IF "Action Message" <> "Action Message"::Cancel THEN
            TESTFIELD(Quantity);
          IF ("Action Message" = "Action Message"::" ") OR
             ("Action Message" = "Action Message"::New)
          THEN
            IF "Replenishment System" = "Replenishment System"::Purchase THEN BEGIN
              IF "Planning Line Origin" = "Planning Line Origin"::"Order Planning" THEN
                TESTFIELD("Supply From");
              TESTFIELD("Vendor No.")
            END ELSE
              IF "Replenishment System" = "Replenishment System"::Transfer THEN BEGIN
                TESTFIELD("Location Code");
                IF "Planning Line Origin" = "Planning Line Origin"::"Order Planning" THEN
                  TESTFIELD("Supply From");
                TESTFIELD("Transfer-from Code");
              END;
        END;

        JnlLineDim.SETRANGE("Journal Line No.",ReqLine2."Line No.");
        IF NOT DimMgt.CheckJnlLineDimComb(JnlLineDim) THEN
          ERROR(
            Text008,
            TABLECAPTION,"Worksheet Template Name","Journal Batch Name","Line No.",
            DimMgt.GetDimCombErr);

        TableID[1] := DimMgt.TypeToTableID3(Type);
        No[1] := "No.";
        IF NOT DimMgt.CheckJnlLineDimValuePosting(JnlLineDim,TableID,No) THEN
          IF "Line No." <> 0 THEN
            ERROR(
              Text009,
              TABLECAPTION,"Worksheet Template Name","Journal Batch Name","Line No.",
              DimMgt.GetDimValuePostingErr)
          ELSE
            ERROR(DimMgt.GetDimValuePostingErr);

        IF SalesLine.GET(SalesLine."Document Type"::Order,"Sales Order No.","Sales Order Line No.") AND
          (SalesLine."Unit of Measure Code" <> "Unit of Measure Code")
        THEN
          IF SalesLine."Drop Shipment"  OR
            (PurchasingCode.GET("Purchasing Code") AND PurchasingCode."Drop Shipment")
          THEN
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(
                Text010,
                SalesLine.FIELDCAPTION("Unit of Measure Code"),
                SalesLine."Document No.",
                SalesLine."Line No."));

        IF Purchasing.GET("Purchasing Code") THEN
          IF Purchasing."Drop Shipment" OR Purchasing."Special Order" THEN BEGIN
            SalesLine.GET(SalesLine."Document Type"::Order,"Sales Order No.","Sales Order Line No.");
            IF (Purchasing."Drop Shipment" <> SalesLine."Drop Shipment") OR
               (Purchasing."Special Order" <> SalesLine."Special Order")
            THEN
              FIELDERROR(
                "Purchasing Code",
                STRSUBSTNO(
                  Text010,
                  SalesLine.FIELDCAPTION("Purchasing Code"),
                  SalesLine."Document No.",
                  SalesLine."Line No."));
          END;
      END;
    END;

    PROCEDURE CarryOutReqLineAction@14(VAR ReqLine@1001 : Record 246);
    VAR
      CarryOutAction@1000 : Codeunit 99000813;
    BEGIN
      WITH ReqLine DO BEGIN
        CASE "Replenishment System" OF
          "Replenishment System"::Transfer:
            CASE "Action Message" OF
              "Action Message"::Cancel:
                BEGIN
                  CarryOutAction.DeleteOrderLines(ReqLine);
                  OrderCounter := OrderCounter + 1;
                END;
              "Action Message"::"Change Qty.","Action Message"::Reschedule,"Action Message"::"Resched. & Chg. Qty." :
                BEGIN
                  CarryOutAction.SetPrintOrder(PrintPurchOrders);
                  CarryOutAction.TransOrderChgAndReshedule(ReqLine);
                  OrderCounter := OrderCounter + 1;
                END;
              "Action Message"::New,"Action Message"::" " :
                BEGIN
                  CarryOutAction.SetPrintOrder(PrintPurchOrders);
                  CarryOutAction.InsertTransLine(ReqLine,TransHeader);
                  OrderCounter := OrderCounter + 1;
                END;
            END;
          "Replenishment System"::Purchase,"Replenishment System"::"Prod. Order":
            CASE "Action Message" OF
              "Action Message"::Cancel:
                BEGIN
                  CarryOutAction.DeleteOrderLines(ReqLine);
                  OrderCounter := OrderCounter + 1;
                END;
              "Action Message"::"Change Qty.","Action Message"::Reschedule, "Action Message"::"Resched. & Chg. Qty." :
                BEGIN
                  CarryOutAction.SetPrintOrder(PrintPurchOrders);
                  CarryOutAction.PurchOrderChgAndReshedule(ReqLine);
                  OrderCounter := OrderCounter + 1;
                END;
              "Action Message"::New,"Action Message"::" ":
                BEGIN
                  IF ((PurchOrderHeader."Buy-from Vendor No." <> '') AND
                      ((PurchOrderHeader."Buy-from Vendor No." <> "Vendor No.") OR
                       (PurchOrderHeader."Currency Code" <> "Currency Code"))) OR
                     (PurchOrderHeader."Sell-to Customer No." <> "Sell-to Customer No.") OR
                     (PurchOrderHeader."Ship-to Code" <> "Ship-to Code") OR
                     (PurchOrderHeader."Order Address Code" <> "Order Address Code")
                  THEN BEGIN
                    FinalizeOrderHeader(PurchOrderHeader,ReqLine);
                    PurchOrderLine.RESET;
                    PurchOrderLine.SETRANGE(PurchOrderLine."Document Type",PurchOrderHeader."Document Type");
                    PurchOrderLine.SETRANGE(PurchOrderLine."Document No.",PurchOrderHeader."No.");
                    PurchOrderLine.SETFILTER(PurchOrderLine."Special Order Sales Line No.",'<> 0');
                    IF PurchOrderLine.FIND('-') THEN
                      REPEAT
                        SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,PurchOrderLine."Special Order Sales No.",
                          PurchOrderLine."Special Order Sales Line No.");
                      UNTIL PurchOrderLine.NEXT = 0;
                  END;
                  MakeRecurringTexts(ReqLine);
                  InsertPurchOrderLine(ReqLine,PurchOrderHeader);
                END;
            END;
        END;
      END;
    END;

    PROCEDURE TryCarryOutReqLineAction@12(VAR ReqLine@1001 : Record 246) : Boolean;
    BEGIN
      WITH ReqLine DO BEGIN
        ReqWkshMakeOrders.Set(PurchOrderHeader,EndOrderDate,PrintPurchOrders);
        TempJnlLineDim.SETRANGE("Journal Line No.","Line No.");
        ReqWkshMakeOrders.SetTryParam(
          ReqTemplate,
          LineCount,
          NextLineNo,
          PrevPurchCode,
          PrevShipToCode,
          OrderCounter,
          OrderLineCounter,
          TempFailedReqLine,
          TempJnlLineDim);
        IF ReqWkshMakeOrders.RUN(ReqLine) THEN BEGIN
          ReqWkshMakeOrders.GetTryParam(
            PurchOrderHeader,
            LineCount,
            NextLineNo,
            PrevPurchCode,
            PrevShipToCode,
            OrderCounter,
            OrderLineCounter);

          Window.UPDATE(3,OrderCounter);
          Window.UPDATE(4,LineCount);
          Window.UPDATE(5,OrderLineCounter);
          EXIT(TRUE);
        END;
        EXIT(FALSE)
      END;
    END;

    LOCAL PROCEDURE InsertPurchOrderLine@3(VAR ReqLine2@1000 : Record 246;VAR PurchOrderHeader@1001 : Record 38);
    VAR
      DocDim@1004 : Record 357;
      PurchOrderLine2@1003 : Record 39;
      AddOnIntegrMgt@1002 : Codeunit 5403;
    BEGIN
      WITH ReqLine2 DO BEGIN
        IF ("No." = '') OR ("Vendor No." = '') OR (Quantity = 0) THEN
          EXIT;

        IF (PurchOrderHeader."Buy-from Vendor No." <> "Vendor No.") OR
           (PurchOrderHeader."Sell-to Customer No." <> "Sell-to Customer No.") OR
           (PrevShipToCode <> "Ship-to Code") OR
           (PurchOrderHeader."Order Address Code" <> "Order Address Code") OR
           (PurchOrderHeader."Currency Code" <> "Currency Code") OR
           (PrevPurchCode <> "Purchasing Code")
        THEN BEGIN
          InsertHeader(ReqLine2);
          LineCount := 0;
          NextLineNo := 0;
          PrevPurchCode := "Purchasing Code";
          PrevShipToCode := "Ship-to Code";
        END;

        LineCount := LineCount + 1;
        IF NOT PlanningResiliency THEN
          Window.UPDATE(4,LineCount);

        TESTFIELD("Currency Code",PurchOrderHeader."Currency Code");

        PurchOrderLine.INIT;
        PurchOrderLine.BlockDynamicTracking(TRUE);
        PurchOrderLine."Document Type" := PurchOrderLine."Document Type"::Order;
        PurchOrderLine."Buy-from Vendor No." := "Vendor No.";
        PurchOrderLine."Document No." := PurchOrderHeader."No.";
        NextLineNo := NextLineNo + 10000;
        PurchOrderLine."Line No." := NextLineNo;
        PurchOrderLine.VALIDATE(Type,Type);
        PurchOrderLine.VALIDATE("No.","No.");
        PurchOrderLine."Variant Code" := "Variant Code";
        PurchOrderLine.VALIDATE("Location Code","Location Code");
        PurchOrderLine.VALIDATE("Unit of Measure Code","Unit of Measure Code");
        PurchOrderLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        PurchOrderLine."Prod. Order No." := "Prod. Order No.";
        PurchOrderLine."Prod. Order Line No." := "Prod. Order Line No.";
        PurchOrderLine.VALIDATE(Quantity,Quantity);
        IF PurchOrderHeader."Prices Including VAT" THEN
          PurchOrderLine.VALIDATE("Direct Unit Cost","Direct Unit Cost" * (1 + PurchOrderLine."VAT %" / 100))
        ELSE
          PurchOrderLine.VALIDATE("Direct Unit Cost","Direct Unit Cost");

        PurchOrderLine.VALIDATE("Line Discount %","Line Discount %");
        PurchOrderLine."Vendor Item No." := "Vendor Item No.";
        PurchOrderLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        PurchOrderLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        PurchOrderLine.Description := Description;
        PurchOrderLine."Description 2" := "Description 2";
        PurchOrderLine."Sales Order No." := "Sales Order No.";
        PurchOrderLine."Sales Order Line No." := "Sales Order Line No.";
        PurchOrderLine."Prod. Order No." := "Prod. Order No.";
        PurchOrderLine."Bin Code" := "Bin Code";
        PurchOrderLine."Item Category Code" := "Item Category Code";
        PurchOrderLine.Nonstock := Nonstock;
        PurchOrderLine.VALIDATE("Planning Flexibility","Planning Flexibility");
        PurchOrderLine.VALIDATE("Purchasing Code","Purchasing Code");
        PurchOrderLine."Product Group Code" := "Product Group Code";
        IF "Due Date" <> 0D THEN BEGIN
          PurchOrderLine.VALIDATE("Expected Receipt Date","Due Date");
          PurchOrderLine."Requested Receipt Date" := PurchOrderLine."Planned Receipt Date";
        END;

        MODIFY;

        AddOnIntegrMgt.TransferFromReqLineToPurchLine(PurchOrderLine,ReqLine2);

        PurchOrderLine."Drop Shipment" := "Sales Order Line No." <> 0;

        IF PurchasingCode.GET("Purchasing Code") THEN
          IF PurchasingCode."Special Order" THEN BEGIN
            PurchOrderLine."Special Order Sales No." := "Sales Order No.";
            PurchOrderLine."Special Order Sales Line No." := "Sales Order Line No.";
            PurchOrderLine."Special Order" := TRUE;
            PurchOrderLine."Drop Shipment" := FALSE;
            PurchOrderLine."Sales Order No." := '';
            PurchOrderLine."Sales Order Line No." := 0;
            PurchOrderLine."Special Order" := TRUE;
            PurchOrderLine.UpdateUnitCost;
          END;

        ReserveReqLine.TransferReqLineToPurchLine(ReqLine2,PurchOrderLine,"Quantity (Base)",FALSE);
        PurchOrderLine.INSERT;

        IF Reserve THEN
          ReserveBindingOrderToPurch(PurchOrderLine,ReqLine2);

        DocDim.SETRANGE("Table ID",DATABASE::"Purchase Line");
        DocDim.SETRANGE("Document Type",PurchOrderLine."Document Type");
        DocDim.SETRANGE("Document No.",PurchOrderLine."Document No.");
        DocDim.SETRANGE("Line No.",PurchOrderLine."Line No.");

        TempJnlLineDim.SETRANGE("Journal Line No.",ReqLine2."Line No.");
        IF TempJnlLineDim.FIND('-') THEN BEGIN
          REPEAT
            IF DocDim.GET(
               DATABASE::"Purchase Line",
               PurchOrderLine."Document Type",
               PurchOrderLine."Document No.",
               PurchOrderLine."Line No.",
               TempJnlLineDim."Dimension Code")
             THEN
              DocDim.DELETE;
            DocDim.INIT;
            DocDim."Table ID" := DATABASE::"Purchase Line";
            DocDim."Document Type" := PurchOrderLine."Document Type";
            DocDim."Document No." := PurchOrderLine."Document No.";
            DocDim."Line No." := PurchOrderLine."Line No.";
            DocDim."Dimension Code" := TempJnlLineDim."Dimension Code";
            DocDim."Dimension Value Code" := TempJnlLineDim."Dimension Value Code";
            DocDim.INSERT;
          UNTIL TempJnlLineDim.NEXT = 0;
        END;

        IF (PurchOrderLine."Drop Shipment")  OR (PurchOrderLine."Special Order") THEN BEGIN
          SalesOrderLine.LOCKTABLE;
          SalesOrderHeader.LOCKTABLE;
          SalesOrderHeader.GET(SalesOrderHeader."Document Type"::Order,"Sales Order No.");
          IF NOT PurchOrderLine."Special Order" THEN
            TESTFIELD("Ship-to Code",SalesOrderHeader."Ship-to Code");
          SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,"Sales Order No.","Sales Order Line No.");
          SalesOrderLine.TESTFIELD(Type,SalesOrderLine.Type::Item);
          IF SalesOrderLine."Purch. Order Line No." <> 0 THEN
            ERROR(Text006,SalesOrderLine."No.",SalesOrderLine."Document No.",SalesOrderLine."Purchase Order No.");
          IF SalesOrderLine."Special Order Purchase No." <> '' THEN
            ERROR(Text006,SalesOrderLine."No.",SalesOrderLine."Document No.",SalesOrderLine."Special Order Purchase No.");
          IF NOT PurchOrderLine."Special Order" THEN
            TESTFIELD("Sell-to Customer No.",SalesOrderLine."Sell-to Customer No.");
          TESTFIELD(Type,SalesOrderLine.Type);
          TESTFIELD(
            Quantity,
            ROUND(
              SalesOrderLine."Outstanding Quantity" *
              SalesOrderLine."Qty. per Unit of Measure" /
              "Qty. per Unit of Measure",
              0.00001));
          TESTFIELD("No.",SalesOrderLine."No.");
          TESTFIELD("Location Code",SalesOrderLine."Location Code");
          TESTFIELD("Variant Code",SalesOrderLine."Variant Code");
          TESTFIELD("Bin Code",SalesOrderLine."Bin Code");
          TESTFIELD("Prod. Order No.",'');
          TESTFIELD("Qty. per Unit of Measure","Qty. per Unit of Measure");
          SalesOrderLine.VALIDATE("Unit Cost (LCY)");

          IF SalesOrderLine."Special Order" THEN BEGIN
            SalesOrderLine."Special Order Purchase No." := PurchOrderLine."Document No.";
            SalesOrderLine."Special Order Purch. Line No." := PurchOrderLine."Line No.";
          END ELSE BEGIN
            SalesOrderLine."Purchase Order No." := PurchOrderLine."Document No.";
            SalesOrderLine."Purch. Order Line No." := PurchOrderLine."Line No.";
          END;
          SalesOrderLine.MODIFY;
        END;

        IF TransferExtendedText.PurchCheckIfAnyExtText(PurchOrderLine,FALSE) THEN BEGIN
          TransferExtendedText.InsertPurchExtText(PurchOrderLine);
          PurchOrderLine2.SETRANGE("Document Type",PurchOrderHeader."Document Type");
          PurchOrderLine2.SETRANGE("Document No.",PurchOrderHeader."No.");
          IF PurchOrderLine2.FIND('+') THEN
            NextLineNo := PurchOrderLine2."Line No.";
        END;
      END;
    END;

    LOCAL PROCEDURE InsertHeader@4(VAR ReqLine2@1000 : Record 246);
    VAR
      SpecialOrder@1001 : Boolean;
    BEGIN
      WITH ReqLine2 DO BEGIN
        OrderCounter := OrderCounter + 1;
        IF NOT PlanningResiliency THEN
          Window.UPDATE(3,OrderCounter);

        PurchSetup.GET;
        PurchSetup.TESTFIELD("Order Nos.");
        PurchOrderHeader.INIT;
        PurchOrderHeader."Document Type" := PurchOrderHeader."Document Type"::Order;
        PurchOrderHeader."No." := '';
        PurchOrderHeader."Posting Date" := PostingDateReq;
        PurchOrderHeader.INSERT(TRUE);
        PurchOrderHeader."Your Reference" := ReferenceReq;
        PurchOrderHeader."Order Date" := OrderDateReq;
        PurchOrderHeader."Expected Receipt Date" := ReceiveDateReq;
        PurchOrderHeader.VALIDATE("Buy-from Vendor No.","Vendor No.");
        IF "Order Address Code" <> '' THEN
          PurchOrderHeader.VALIDATE("Order Address Code","Order Address Code");

        IF "Sell-to Customer No." <> '' THEN
          PurchOrderHeader.VALIDATE("Sell-to Customer No.","Sell-to Customer No.");

        PurchOrderHeader.VALIDATE("Currency Code","Currency Code");

        IF PurchasingCode.GET("Purchasing Code") THEN
          IF PurchasingCode."Special Order" THEN
            SpecialOrder := TRUE;

        IF NOT SpecialOrder THEN BEGIN
          IF "Ship-to Code" <> '' THEN
            PurchOrderHeader.VALIDATE("Ship-to Code","Ship-to Code")
          ELSE
            PurchOrderHeader.VALIDATE("Location Code",ReqLine2."Location Code");
        END ELSE BEGIN
          PurchOrderHeader.VALIDATE("Location Code",ReqLine2."Location Code");
          PurchOrderHeader.SetShipToForSpecOrder;
        END;

        PurchOrderHeader.MODIFY;
        COMMIT;
        IF RECORDLEVELLOCKING THEN
          LOCKTABLE;
        PurchOrderHeader.MARK(TRUE);
      END;
    END;

    LOCAL PROCEDURE FinalizeOrderHeader@5(PurchOrderHeader@1000 : Record 38;VAR ReqLine@1002 : Record 246);
    VAR
      ReqLine2@1003 : Record 246;
      CarryOutAction@1001 : Codeunit 99000813;
    BEGIN
      // Update/delete lines
      IF NOT ReqLine.RECORDLEVELLOCKING THEN
        ReqLine.LOCKTABLE(TRUE,TRUE);
      IF ReqTemplate.Recurring THEN BEGIN
        // Recurring journal
        ReqLine2.COPY(ReqLine);
        ReqLine2.SETRANGE("Vendor No.",PurchOrderHeader."Buy-from Vendor No.");
        ReqLine2.SETRANGE("Sell-to Customer No.",PurchOrderHeader."Sell-to Customer No.");
        ReqLine2.SETRANGE("Ship-to Code",PurchOrderHeader."Ship-to Code");
        ReqLine2.SETRANGE("Order Address Code",PurchOrderHeader."Order Address Code");
        ReqLine2.SETRANGE("Currency Code",PurchOrderHeader."Currency Code");
        ReqLine2.FIND('-');
        REPEAT
          OrderLineCounter := OrderLineCounter + 1;
          IF NOT PlanningResiliency THEN
            Window.UPDATE(5,OrderLineCounter);
          IF ReqLine2."Order Date" <> 0D THEN BEGIN
            ReqLine2.VALIDATE(
              "Order Date",
              CALCDATE(ReqLine2."Recurring Frequency",ReqLine2."Order Date"));
            ReqLine2.VALIDATE("Currency Code",PurchOrderHeader."Currency Code");
          END;
          IF (ReqLine2."Recurring Method" = ReqLine2."Recurring Method"::Variable) AND
             (ReqLine2."No." <> '')
          THEN BEGIN
            ReqLine2.Quantity := 0;
            ReqLine2."Line Discount %" := 0;
          END;
          ReqLine2.MODIFY;
        UNTIL ReqLine2.NEXT = 0;
      END ELSE BEGIN
        // Not a recurring journal
        OrderLineCounter := OrderLineCounter + LineCount;
        IF NOT PlanningResiliency THEN
          Window.UPDATE(5,OrderLineCounter);
        ReqLine2.COPY(ReqLine);
        ReqLine2.SETRANGE("Vendor No.",PurchOrderHeader."Buy-from Vendor No.");
        ReqLine2.SETRANGE("Sell-to Customer No.",PurchOrderHeader."Sell-to Customer No.");
        ReqLine2.SETRANGE("Ship-to Code",PurchOrderHeader."Ship-to Code");
        ReqLine2.SETRANGE("Order Address Code",PurchOrderHeader."Order Address Code");
        ReqLine2.SETRANGE("Currency Code",PurchOrderHeader."Currency Code");
        IF ReqLine2.FIND('-') THEN BEGIN
          ReqLine2.BlockDynamicTracking(TRUE);
          ReservEntry.SETCURRENTKEY(
             "Source ID","Source Ref. No.","Source Type","Source Subtype",
             "Source Batch Name","Source Prod. Order Line");
          REPEAT
            TempFailedReqLine := ReqLine2;
            IF NOT TempFailedReqLine.FIND THEN BEGIN
              ReserveReqLine.FilterReservFor(ReservEntry,ReqLine2);
              ReservEntry.DELETEALL(TRUE);
              ReqLine2.DELETE(TRUE);
            END;
          UNTIL ReqLine2.NEXT = 0;
        END;

      END;
      COMMIT;

      CarryOutAction.SetPrintOrder(PrintPurchOrders);
      CarryOutAction.PrintPurchaseOrder(PurchOrderHeader);
    END;

    LOCAL PROCEDURE CheckRecurringLine@10(VAR ReqLine2@1000 : Record 246);
    BEGIN
      WITH ReqLine2 DO BEGIN
        IF "No." <> '' THEN
          IF ReqTemplate.Recurring THEN BEGIN
            TESTFIELD("Recurring Method");
            TESTFIELD("Recurring Frequency");
            IF "Recurring Method" = "Recurring Method"::Variable THEN
              TESTFIELD(Quantity);
          END ELSE BEGIN
            TESTFIELD("Recurring Method",0);
            TESTFIELD("Recurring Frequency","0DF");
          END;
      END;
    END;

    LOCAL PROCEDURE MakeRecurringTexts@6(VAR ReqLine2@1000 : Record 246);
    BEGIN
      WITH ReqLine2 DO BEGIN
        IF ("No." <> '') AND ("Recurring Method" <> 0) AND ("Order Date" <> 0D) THEN BEGIN
          Day := DATE2DMY("Order Date",1);
          Week := DATE2DWY("Order Date",2);
          Month := DATE2DMY("Order Date",2);
          MonthText := FORMAT("Order Date",0,Text007);
          AccountingPeriod.SETRANGE("Starting Date",0D,"Order Date");
          IF NOT AccountingPeriod.FIND('+') THEN
            AccountingPeriod.Name := '';
          Description :=
            DELCHR(
              PADSTR(
                STRSUBSTNO(Description,Day,Week,Month,MonthText,AccountingPeriod.Name),
                MAXSTRLEN(Description)),
              '>');
        END;
      END;
    END;

    PROCEDURE ReserveBindingOrderToPurch@7(VAR PurchLine@1005 : Record 39;VAR ReqLine@1000 : Record 246);
    VAR
      ProdOrderComp@1004 : Record 5407;
      SalesLine@1007 : Record 37;
      ReservEntry@1003 : Record 337;
      ReserveProdOrderComp@1002 : Codeunit 99000838;
      ReserveSalesLine@1008 : Codeunit 99000832;
      ReservMgt@1006 : Codeunit 99000845;
      ReservQty@1001 : Decimal;
    BEGIN
      CLEAR(ReservMgt);

      PurchLine.CALCFIELDS("Reserved Qty. (Base)");
      IF (PurchLine."Quantity (Base)" - PurchLine."Reserved Qty. (Base)") > ReqLine."Demand Quantity (Base)" THEN
        ReservQty := ReqLine."Demand Quantity (Base)"
      ELSE
        ReservQty := PurchLine."Quantity (Base)" - PurchLine."Reserved Qty. (Base)";
      ReservMgt.SetPurchLine(PurchLine);

      CASE ReqLine."Demand Type" OF
        DATABASE::"Prod. Order Component":
          BEGIN
            ProdOrderComp.GET(
              ReqLine."Demand Subtype",
              ReqLine."Demand Order No.",
              ReqLine."Demand Line No.",
              ReqLine."Demand Ref. No.");
            ReservEntry."Source Type" := DATABASE::"Prod. Order Component";
            ReserveProdOrderComp.SetBinding(ReservEntry.Binding::"Order-to-Order");
            ReserveProdOrderComp.CreateReservationSetFrom(
              DATABASE::"Purchase Line",
              PurchLine."Document Type",
              PurchLine."Document No.",
              '',
              0,PurchLine."Line No.",
              PurchLine."Variant Code",
              PurchLine."Location Code",'','',
              PurchLine."Qty. per Unit of Measure");
            ReserveProdOrderComp.CreateReservation(
              ProdOrderComp,
              PurchLine.Description,
              PurchLine."Expected Receipt Date",
              ReservQty,
              '','');
            ProdOrderComp.MODIFY;
         END;
        DATABASE::"Sales Line":
          BEGIN
            SalesLine.GET(ReqLine."Demand Subtype",ReqLine."Demand Order No.",ReqLine."Demand Line No.");
            ReservEntry."Source Type" := DATABASE::"Sales Line";
            ReserveSalesLine.SetBinding(ReservEntry.Binding::"Order-to-Order");
            ReserveSalesLine.CreateReservationSetFrom(
              DATABASE::"Purchase Line",
              PurchLine."Document Type",
              PurchLine."Document No.",
              '',
              0,PurchLine."Line No.",
              PurchLine."Variant Code",
              PurchLine."Location Code",'','',
              PurchLine."Qty. per Unit of Measure");
            ReserveSalesLine.CreateReservation(
              SalesLine,
              PurchLine.Description,
              PurchLine."Expected Receipt Date",
              ReservQty,
              '','');
            IF SalesLine.Reserve = SalesLine.Reserve::Never THEN
              SalesLine.Reserve := SalesLine.Reserve::Optional;
            SalesLine.MODIFY;
         END;
      END;
      PurchLine.MODIFY;
    END;

    PROCEDURE SetTryParam@11(TryReqTemplate@1006 : Record 244;VAR TryLineCount@1005 : Integer;VAR TryNextLineNo@1004 : Integer;VAR TryPrevPurchCode@1003 : Code[10];VAR TryPrevShipToCode@1000 : Code[10];VAR TryOrderCounter@1007 : Integer;VAR TryOrderLineCounter@1008 : Integer;VAR TryFailedReqLine@1001 : Record 246;VAR TryJnlLineDim@1009 : TEMPORARY Record 356);
    BEGIN
      SetPlanningResiliency;
      ReqTemplate := TryReqTemplate;
      LineCount := TryLineCount;
      NextLineNo := TryNextLineNo;
      PrevPurchCode := TryPrevPurchCode;
      PrevShipToCode := TryPrevShipToCode;
      OrderCounter := TryOrderCounter;
      OrderLineCounter := TryOrderLineCounter;
      IF TryFailedReqLine.FIND('-') THEN
        REPEAT
          TempFailedReqLine := TryFailedReqLine;
          IF TempFailedReqLine.INSERT THEN;
        UNTIL TryFailedReqLine.NEXT = 0;
      DimMgt.CopyJnlLineDimToJnlLineDim(TryJnlLineDim,TempJnlLineDim);
    END;

    PROCEDURE GetTryParam@9(VAR TryPurchOrderHeader@1001 : Record 38;VAR TryLineCount@1005 : Integer;VAR TryNextLineNo@1004 : Integer;VAR TryPrevPurchCode@1003 : Code[10];VAR TryPrevShipToCode@1000 : Code[10];VAR TryOrderCounter@1007 : Integer;VAR TryOrderLineCounter@1008 : Integer);
    BEGIN
      TryPurchOrderHeader.COPY(PurchOrderHeader);
      TryLineCount := LineCount;
      TryNextLineNo := NextLineNo;
      TryPrevPurchCode := PrevPurchCode;
      TryPrevShipToCode := PrevShipToCode;
      TryOrderCounter := OrderCounter;
      TryOrderLineCounter := OrderLineCounter;
    END;

    PROCEDURE SetFailedReqLine@13(VAR TryFailedReqLine@1000 : Record 246);
    BEGIN
      TempFailedReqLine := TryFailedReqLine;
      TempFailedReqLine.INSERT;
    END;

    PROCEDURE SetPlanningResiliency@17();
    BEGIN
      PlanningResiliency := TRUE;
    END;

    PROCEDURE GetFailedCounter@19() : Integer;
    BEGIN
      EXIT(CounterFailed);
    END;

    LOCAL PROCEDURE PrintTransOrder@15();
    VAR
      CarryOutAction@1000 : Codeunit 99000813;
    BEGIN
      IF TransHeader."No." <> '' THEN BEGIN
        CarryOutAction.SetPrintOrder(PrintPurchOrders);
        CarryOutAction.PrintTransferOrder(TransHeader);
      END;
    END;

    LOCAL PROCEDURE SetPurchOrderHeader@16();
    BEGIN
      PurchOrderHeader."Order Date" := OrderDateReq;
      PurchOrderHeader."Posting Date" := PostingDateReq;
      PurchOrderHeader."Expected Receipt Date" := ReceiveDateReq;
      PurchOrderHeader."Your Reference" := ReferenceReq;
    END;

    BEGIN
    END.
  }
}
