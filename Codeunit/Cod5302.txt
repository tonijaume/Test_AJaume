OBJECT Codeunit 5302 Outlook Synch. Type Conv
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=The filter expression ''%1'' is invalid.\Please redefine your criteria.;ESP=La expresi¢n de filtro ''%1'' no es v lida.\Vuelva a definir los criterios.';
      Text002@1000 : TextConst 'ENU=The filter cannot be processed because the expression is too long.\Please redefine your criteria.;ESP=El filtro no se puede procesar porque la expresi¢n es demasiado larga.\Vuelva a definir los criterios.';
      Text003@1003 : TextConst 'ENU=The synchronization failed because the %1 field in the %2 table is of an unsupported type. Please contact your system administrator.;ESP=La sincronizaci¢n no se pudo realizar porque el campo %1 de la tabla %2 no es un tipo compatible. P¢ngase en contacto con el administrador del sistema.';
      Field@1002 : Record 2000000041;

    LOCAL PROCEDURE GetOptionsQuantity@52(OptionString@1000 : Text[1024]) : Integer;
    VAR
      Counter@1001 : Integer;
      CommaPosition@1002 : Integer;
    BEGIN
      IF STRPOS(OptionString,',') = 0 THEN
        EXIT(0);

      REPEAT
        CommaPosition := STRPOS(OptionString,',');
        OptionString := DELSTR(OptionString,1,CommaPosition);
        Counter := Counter + 1;
      UNTIL CommaPosition = 0;

      EXIT(Counter - 1);
    END;

    PROCEDURE GetSubStrByNo@24(Number@1000 : Integer;CommaString@1001 : Text[1024]) SelectedStr : Text[250];
    VAR
      SubStrQuantity@1002 : Integer;
      Counter@1003 : Integer;
      CommaPosition@1004 : Integer;
    BEGIN
      IF Number <= 0 THEN
        EXIT;

      SubStrQuantity := GetOptionsQuantity(CommaString);
      IF SubStrQuantity + 1 < Number THEN
        EXIT;

      REPEAT
        Counter := Counter + 1;
        CommaPosition := STRPOS(CommaString,',');
        IF CommaPosition = 0 THEN
          SelectedStr := CommaString
        ELSE BEGIN
          SelectedStr := COPYSTR(CommaString,1,CommaPosition - 1);
          CommaString := DELSTR(CommaString,1,CommaPosition);
        END;
      UNTIL Counter = Number;
    END;

    PROCEDURE EvaluateTextToFieldRef@12(InputText@1001 : Text[1024];VAR FieldRef@1000 : FieldRef;ToValidate@1002 : Boolean) : Boolean;
    VAR
      GUIDVar@1006 : GUID;
      GUIDVar1@1022 : GUID;
      BigIntVar@1005 : BigInteger;
      BigIntVar1@1021 : BigInteger;
      IntVar@1003 : Integer;
      IntVar1@1013 : Integer;
      DecimalVar@1007 : Decimal;
      DecimalVar1@1014 : Decimal;
      BoolVar@1004 : Boolean;
      BoolVar1@1015 : Boolean;
      DateVar@1008 : Date;
      DateVar1@1016 : Date;
      TimeVar@1009 : Time;
      TimeVar1@1017 : Time;
      DateTimeVar@1010 : DateTime;
      DateTimeVar1@1018 : DateTime;
      DurationVar@1011 : Duration;
      DurationVar1@1019 : Duration;
      DateFormulaVar@1012 : DateFormula;
      DateFormulaVar1@1020 : DateFormula;
      TextVar@1023 : Text[1024];
      TextVar1@1024 : Text[1024];
    BEGIN
      //EVALUATE(Field.Class,FORMAT(FieldRef.CLASS));
      //IF (Field.Class = Field.Class::FlowField) OR (Field.Class = Field.Class::FlowFilter) THEN
      IF (FORMAT(FieldRef.CLASS) = 'FlowField') OR (FORMAT(FieldRef.CLASS) = 'FlowFilter') THEN
        EXIT(TRUE);

      //EVALUATE(Field.Type,FORMAT(FieldRef.TYPE));
      //CASE Field.Type OF
      CASE FORMAT(FieldRef.TYPE) OF
        //Field.Type::Option:
        'Option':
          BEGIN
            IntVar := TextToOptionValue(InputText,FieldRef.OPTIONCAPTION);
            IF IntVar = -1 THEN
              EXIT(FALSE);

            IF ToValidate THEN BEGIN
              IntVar1 := FieldRef.VALUE;
              IF IntVar1 <> IntVar THEN
                FieldRef.VALIDATE(IntVar);
            END ELSE
              FieldRef.VALUE := IntVar;
          END;

        'Integer':
          IF TextToInteger(InputText,IntVar) THEN BEGIN
            IF ToValidate THEN BEGIN
              IntVar1 := FieldRef.VALUE;
              IF IntVar1 <> IntVar THEN
                FieldRef.VALIDATE(IntVar);
            END ELSE
              FieldRef.VALUE := IntVar;
          END ELSE
            EXIT(FALSE);

        'Decimal':
          IF TextToDecimal(InputText,DecimalVar) THEN BEGIN
            IF ToValidate THEN BEGIN
              DecimalVar1 := FieldRef.VALUE;
              IF DecimalVar1 <> DecimalVar THEN
                FieldRef.VALIDATE(DecimalVar);
            END ELSE
              FieldRef.VALUE := DecimalVar;
          END ELSE
            EXIT(FALSE);

        'Date':
          IF TextToDate(InputText,DateVar,TRUE) THEN BEGIN
            IF ToValidate THEN BEGIN
              DateVar1 := FieldRef.VALUE;
              IF DateVar1 <> DateVar THEN
                FieldRef.VALIDATE(DateVar);
            END ELSE
              FieldRef.VALUE := DateVar;
          END ELSE
            EXIT(FALSE);

        'Time':
          IF TextToTime(InputText,TimeVar,TRUE) THEN BEGIN
            IF ToValidate THEN BEGIN
              TimeVar1 := FieldRef.VALUE;
              IF TimeVar1 <> TimeVar THEN
                FieldRef.VALIDATE(TimeVar);
            END ELSE
              FieldRef.VALUE := TimeVar;
          END ELSE
            EXIT(FALSE);

        'DateTime':
          IF TextToDateTime(InputText,DateTimeVar) THEN BEGIN
            IF ToValidate THEN BEGIN
              DateTimeVar1 := FieldRef.VALUE;
              IF DateTimeVar1 <> DateTimeVar THEN
                FieldRef.VALIDATE(DateTimeVar);
            END ELSE
              FieldRef.VALUE := DateTimeVar;
          END ELSE
            EXIT(FALSE);

        'Boolean':
          IF TextToBoolean(InputText,BoolVar) THEN BEGIN
            IF ToValidate THEN BEGIN
              BoolVar1 := FieldRef.VALUE;
              IF BoolVar1 <> BoolVar THEN
                FieldRef.VALIDATE(BoolVar);
            END ELSE
              FieldRef.VALUE := BoolVar;
          END ELSE
            EXIT(FALSE);

        'Duration':
          IF TextToDuration(InputText,DurationVar) THEN BEGIN
            IF ToValidate THEN BEGIN
              DurationVar1 := FieldRef.VALUE;
              IF DurationVar1 <> DurationVar THEN
                FieldRef.VALIDATE(DurationVar);
            END ELSE
              FieldRef.VALUE := DurationVar;
          END ELSE
            EXIT(FALSE);

        'BigInteger':
          IF TextToBigInteger(InputText,BigIntVar) THEN BEGIN
            IF ToValidate THEN BEGIN
              BigIntVar1 := FieldRef.VALUE;
              IF BigIntVar1 <> BigIntVar THEN
                FieldRef.VALIDATE(BigIntVar);
            END ELSE
              FieldRef.VALUE := BigIntVar;
          END ELSE
            EXIT(FALSE);

        'GUID':
          IF TextToGUID(InputText,GUIDVar) THEN BEGIN
            IF ToValidate THEN BEGIN
              GUIDVar1 := FieldRef.VALUE;
              IF GUIDVar1 <> GUIDVar THEN
                FieldRef.VALIDATE(GUIDVar);
            END ELSE
              FieldRef.VALUE := GUIDVar;
          END ELSE
            EXIT(FALSE);

        'Code','Text':
          BEGIN
            IF STRLEN(InputText) > FieldRef.LENGTH THEN BEGIN
              IF ToValidate THEN BEGIN
                TextVar := FieldRef.VALUE;
                TextVar1 := PADSTR(InputText,FieldRef.LENGTH);
                IF TextVar <> TextVar1 THEN
                  FieldRef.VALIDATE(TextVar1);
              END ELSE
                FieldRef.VALUE := PADSTR(InputText,FieldRef.LENGTH);
            END ELSE BEGIN
              IF ToValidate THEN BEGIN
                TextVar := FieldRef.VALUE;
                IF TextVar <> InputText THEN
                  FieldRef.VALIDATE(InputText);
              END ELSE
                FieldRef.VALUE := InputText;
            END;
          END;

        'DateFormula':
          BEGIN
            IF TextToDateFormula(InputText,DateFormulaVar) THEN BEGIN
              IF ToValidate THEN BEGIN
                DateFormulaVar1 := FieldRef.VALUE;
                IF DateFormulaVar1 <> DateFormulaVar THEN
                  FieldRef.VALIDATE(DateFormulaVar);
              END ELSE
                FieldRef.VALUE := DateFormulaVar;
            END ELSE
              EXIT(FALSE);
          END;

        ELSE
          EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE TextToOptionValue@9(InputText@1000 : Text[1024];OptionString@1001 : Text[1024]) : Integer;
    VAR
      IntVar@1003 : Integer;
      Counter@1004 : Integer;
    BEGIN
      IF InputText = '' THEN
        InputText := ' ';

      IF EVALUATE(IntVar,InputText) THEN BEGIN
        IF IntVar < 0 THEN
          IntVar := -1;
        IF GetOptionsQuantity(OptionString) < IntVar THEN
          IntVar := -1;
      END ELSE BEGIN
        IntVar := -1;
        FOR Counter := 1 TO GetOptionsQuantity(OptionString) + 1 DO BEGIN
          IF UPPERCASE(GetSubStrByNo(Counter,OptionString)) = UPPERCASE(InputText) THEN
            IntVar := Counter - 1;
        END;
      END;

      EXIT(IntVar);
    END;

    PROCEDURE TextToInteger@8(InputText@1000 : Text[1024];VAR IntVar@1001 : Integer) IsConverted : Boolean;
    BEGIN
      IsConverted := EVALUATE(IntVar,InputText);
    END;

    PROCEDURE TextToBigInteger@22(InputText@1000 : Text[1024];VAR BigIntVar@1001 : BigInteger) IsConverted : Boolean;
    BEGIN
      IsConverted := EVALUATE(BigIntVar,InputText);
    END;

    PROCEDURE TextToBoolean@18(InputText@1000 : Text[1024];VAR BoolVar@1001 : Boolean) IsConverted : Boolean;
    BEGIN
      IsConverted := EVALUATE(BoolVar,InputText);
    END;

    PROCEDURE TextToGUID@21(InputText@1000 : Text[1024];VAR GUIDVar@1001 : GUID) IsConverted : Boolean;
    BEGIN
      IsConverted := EVALUATE(GUIDVar,InputText);
    END;

    PROCEDURE TextToDecimal@10(InputText@1000 : Text[1024];VAR DecVar@1004 : Decimal) IsConverted : Boolean;
    VAR
      PartArray@1003 : ARRAY [2] OF Text[250];
      IntegeralPart@1001 : Integer;
      FractionalPart@1002 : Integer;
      Sign@1010 : Integer;
    BEGIN
      InputText := CONVERTSTR(InputText,'.',',');
      IF STRPOS(InputText,',') = 0 THEN BEGIN
        IsConverted := TextToInteger(InputText,IntegeralPart);
        IF IsConverted THEN
          DecVar := IntegeralPart;
        EXIT;
      END;

      PartArray[1] := GetSubStrByNo(1,InputText);
      PartArray[2] := GetSubStrByNo(2,InputText);

      IsConverted := EVALUATE(IntegeralPart,PartArray[1]);
      IF NOT IsConverted THEN
        EXIT;

      IsConverted := EVALUATE(FractionalPart,PartArray[2]);
      IF NOT IsConverted THEN
        EXIT;

      IF STRPOS(InputText,'-') = 0 THEN
        Sign := 1
      ELSE
        Sign := -1;
      DecVar := (Sign * (ABS(IntegeralPart) + (FractionalPart / POWER(10,STRLEN(PartArray[2])))));
    END;

    LOCAL PROCEDURE TextToDate@13(InputText@1000 : Text[1024];VAR DateVar@1004 : Date;UseLocalTime@1006 : Boolean) IsConverted : Boolean;
    VAR
      Day@1001 : Integer;
      Month@1002 : Integer;
      Year@1003 : Integer;
      DateTimeVar@1005 : DateTime;
    BEGIN
      InputText := CONVERTSTR(InputText,' ',',');
      IF STRPOS(InputText,',') = 0 THEN
        EXIT;

      InputText := GetSubStrByNo(1,InputText);
      InputText := CONVERTSTR(InputText,'/',',');
      IF STRPOS(InputText,',') = 0 THEN
        EXIT;

      IsConverted := EVALUATE(Month,GetSubStrByNo(1,InputText));
      IF NOT IsConverted THEN
        EXIT;

      InputText := DELSTR(InputText,1,STRPOS(InputText,','));
      IF STRPOS(InputText,',') = 0 THEN BEGIN
        IsConverted := FALSE;
        EXIT;
      END;

      IsConverted := EVALUATE(Day,GetSubStrByNo(1,InputText));
      IF NOT IsConverted THEN
        EXIT;

      IsConverted := EVALUATE(Year,GetSubStrByNo(2,InputText));
      IF NOT IsConverted THEN
        EXIT;

      IF (Day < 1) AND (Day > 31) AND (Month < 1) AND (Month > 12) THEN BEGIN
        IsConverted := FALSE;
        EXIT;
      END;

      DateVar := DMY2DATE(Day,Month,Year);
      IF DateVar = 01014501D THEN
        DateVar := 0D
      ELSE BEGIN
        IF UseLocalTime THEN
          DateTimeVar := UTC2LocalDT(CREATEDATETIME(DateVar,000000T))
        ELSE
          DateTimeVar := CREATEDATETIME(DateVar,000000T);
        DateVar := DT2DATE(DateTimeVar);
      END;
    END;

    LOCAL PROCEDURE TextToTime@15(InputText@1000 : Text[1024];VAR TimeVar@1004 : Time;UseLocalTime@1002 : Boolean) IsConverted : Boolean;
    VAR
      DateTimeVar@1001 : DateTime;
    BEGIN
      InputText := CONVERTSTR(InputText,' ',',');
      IF STRPOS(InputText,',') = 0 THEN
        EXIT;

      IsConverted := EVALUATE(TimeVar,GetSubStrByNo(2,InputText));

      IF NOT IsConverted THEN
        EXIT;

      IF UseLocalTime THEN
        DateTimeVar := UTC2LocalDT(CREATEDATETIME(TODAY,TimeVar))
      ELSE
        DateTimeVar := CREATEDATETIME(TODAY,TimeVar);
      TimeVar := DT2TIME(DateTimeVar);
    END;

    PROCEDURE TextToDateTime@16(InputText@1000 : Text[1024];VAR DateTimeVar@1001 : DateTime) IsConverted : Boolean;
    VAR
      DateVar@1002 : Date;
      TimeVar@1003 : Time;
    BEGIN
      IsConverted := TextToDate(InputText,DateVar,FALSE);
      IF NOT IsConverted THEN
        EXIT;

      IsConverted := TextToTime(InputText,TimeVar,FALSE);
      IF NOT IsConverted THEN
        EXIT;

      IF DateVar <> 0D THEN
        DateTimeVar := UTC2LocalDT(CREATEDATETIME(DateVar,TimeVar))
      ELSE BEGIN
        IF TimeVar <> 0T THEN
          DateTimeVar := CREATEDATETIME(TODAY,TimeVar);
      END;
    END;

    PROCEDURE TextToDuration@20(InputText@1000 : Text[1024];VAR DurationVar@1002 : Duration) IsConverted : Boolean;
    VAR
      Millisec@1001 : BigInteger;
    BEGIN
      IF NOT EVALUATE(Millisec,InputText) THEN
        EXIT;

      Millisec := Millisec * 60000;
      DurationVar := Millisec;
      IsConverted := TRUE;
    END;

    PROCEDURE TextToDateFormula@27(InputText@1000 : Text[1024];VAR DateFormulaVar@1001 : DateFormula) IsConverted : Boolean;
    BEGIN
      IsConverted := EVALUATE(DateFormulaVar,InputText);
    END;

    PROCEDURE OptionValueToText@11(InputInteger@1000 : Integer;OptionString@1001 : Text[1024]) OutputText : Text[80];
    BEGIN
      IF (InputInteger >= 0) AND (InputInteger <= GetOptionsQuantity(OptionString)) THEN
        OutputText := SELECTSTR(InputInteger + 1,OptionString);
    END;

    PROCEDURE EvaluateOptionField@3(FieldRef@1000 : FieldRef;VAR ValueToEvaluate@1002 : Text[80]) : Boolean;
    VAR
      IntValue@1001 : Integer;
    BEGIN
      IntValue := TextToOptionValue(ValueToEvaluate,FieldRef.OPTIONCAPTION);
      IF IntValue <> -1 THEN
        ValueToEvaluate := SELECTSTR(IntValue + 1,FieldRef.OPTIONCAPTION);
      EXIT(IntValue <> -1);
    END;

    PROCEDURE EvaluateFilterOptionField@2(FieldRef@1000 : FieldRef;VAR FilterValueToEvaluate@1002 : Text[250];ReplaceOptionsWithValues@1009 : Boolean) Asserted : Boolean;
    VAR
      AssertedOption@1004 : Text[80];
      TempString@1005 : Text[250];
      ArrayImpliedOptions@1007 : ARRAY [20] OF Text[80];
      IntValue@1001 : Integer;
      I@1008 : Integer;
      SpaceRemovePosStart@1006 : Integer;
      SpaceRemovePosEnd@1010 : Integer;
      ImpliedOption@1003 : Text[80];
    BEGIN
      TempString := FilterValueToEvaluate;

      IF NOT ParseFilterExpression(TempString,ArrayImpliedOptions) THEN
        ERROR(Text001,FilterValueToEvaluate);

      TempString := FilterValueToEvaluate;
      SpaceRemovePosStart := 1;

      FOR I := 1 TO 20 DO BEGIN
        AssertedOption := '';
        ImpliedOption := '';
        IF ArrayImpliedOptions[I] <> '' THEN BEGIN
          ImpliedOption := ArrayImpliedOptions[I];

          IF EVALUATE(IntValue,ImpliedOption) THEN BEGIN
            AssertedOption := OptionValueToText(IntValue,FieldRef.OPTIONCAPTION);
            Asserted := AssertedOption <> '';
          END ELSE BEGIN
            IntValue := TextToOptionValue(ImpliedOption,FieldRef.OPTIONCAPTION);
            IF IntValue <> -1 THEN
              AssertedOption := SELECTSTR(IntValue + 1,FieldRef.OPTIONCAPTION);
            Asserted := IntValue <> -1;
          END;

          IF NOT Asserted THEN
            EXIT;

          IF ReplaceOptionsWithValues THEN
            AssertedOption := FORMAT(IntValue);

          IF (STRPOS(AssertedOption,'(') <> 0) OR (STRPOS(AssertedOption,')') <> 0) OR (AssertedOption = ' ') THEN
            AssertedOption := STRSUBSTNO('''%1''',AssertedOption);

          SpaceRemovePosEnd := STRPOS(TempString,ImpliedOption);
          TempString := RemoveSpaceChars(TempString,SpaceRemovePosStart,SpaceRemovePosEnd);

          IF (STRLEN(TempString) + STRLEN(AssertedOption) - STRLEN(ImpliedOption)) > MAXSTRLEN(TempString) THEN
            ERROR(Text002);

          SpaceRemovePosStart := STRPOS(TempString,ImpliedOption) + STRLEN(AssertedOption);

          TempString := ReplaceText(TempString,ImpliedOption,AssertedOption,TRUE);
        END;
      END;
      TempString := RemoveSpaceChars(TempString,SpaceRemovePosStart,STRLEN(TempString));

      FilterValueToEvaluate := TempString;
    END;

    LOCAL PROCEDURE ParseFilterExpression@7(VAR FilterExpression@1000 : Text[250];VAR ArrayTokens@1001 : ARRAY [20] OF Text[80]) : Boolean;
    VAR
      TempStr@1003 : Text[250];
      ReservedFilterChars@1005 : Text[30];
      I@1002 : Integer;
      Count@1004 : Integer;
    BEGIN
      IF FilterExpression = '' THEN
        FilterExpression := ' ';

      FilterExpression := CONVERTSTR(FilterExpression,'&|',',,');
      FilterExpression := ReplaceText(FilterExpression,'..',',',FALSE);

      IF FilterExpression[STRLEN(FilterExpression)] = ',' THEN
        EXIT(FALSE);

      TempStr := FilterExpression;
      Count := 1;

      WHILE STRPOS(TempStr,',') > 0 DO BEGIN
        TempStr := DELSTR(TempStr,STRPOS(TempStr,','),1);
        Count := Count + 1;
      END;

      IF Count > 20 THEN
        EXIT(FALSE);

      ReservedFilterChars := '&|<>=()';
      FilterExpression := DELCHR(FilterExpression,'=',ReservedFilterChars);
      FilterExpression := DELCHR(FilterExpression,'<>',' ');

      IF FilterExpression = '' THEN
        EXIT(FALSE);

      FOR I := 1 TO Count DO
        ArrayTokens[I] := DELCHR(GetSubStrByNo(I,FilterExpression),'<>',' ');

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ReplaceText@19(Text@1000 : Text[1024];FromText@1001 : Text[1024];ToText@1002 : Text[1024];OnlyOnce@1004 : Boolean) : Text[1024];
    VAR
      I@1003 : Integer;
    BEGIN
      REPEAT
        I := STRPOS(Text,FromText);
        IF I > 0 THEN BEGIN
          Text := DELSTR(Text,I,STRLEN(FromText));
          Text := INSSTR(Text,ToText,I);
        END;
      UNTIL (I = 0) OR OnlyOnce;
      EXIT(Text);
    END;

    LOCAL PROCEDURE RemoveSpaceChars@25(Text@1000 : Text[1024];StartPos@1001 : Integer;EndPos@1002 : Integer) OutText : Text[1024];
    VAR
      SpaceRemovedString@1003 : Text[1024];
    BEGIN
      OutText := Text;
      IF (STRLEN(Text) > EndPos) AND (EndPos > StartPos) THEN BEGIN
        SpaceRemovedString := COPYSTR(Text,StartPos,EndPos - StartPos);
        OutText := ReplaceText(Text,SpaceRemovedString,DELCHR(SpaceRemovedString,'=',' '),TRUE);
      END;
    END;

    PROCEDURE TruncateString@1(VAR InputString@1000 : Text[1024];NewLength@1001 : Integer);
    BEGIN
      IF STRLEN(InputString) > NewLength THEN
        InputString := PADSTR(InputString,NewLength);
    END;

    PROCEDURE SetTimeFormat@4(InTime@1000 : Time) OutTime : Text[10];
    BEGIN
      OutTime := CONVERTSTR(FORMAT(InTime,0,'<Hours24,2>:<Minutes,2>:<Seconds,2>'),' ','0');
    END;

    PROCEDURE SetDateFormat@14(InDate@1000 : Date) OutDate : Text[10];
    BEGIN
      OutDate := FORMAT(InDate,0,'<Month,2>/<Day,2>/<Year4>');
    END;

    PROCEDURE SetDateTimeFormat@68(InDateTime@1000 : DateTime) OutDateTime : Text[20];
    BEGIN
      IF InDateTime = 0DT THEN
        OutDateTime := SetDateFormat(01014501D) + ' ' + SetTimeFormat(000000T)
      ELSE
        OutDateTime := SetDateFormat(DT2DATE(InDateTime)) + ' ' + SetTimeFormat(DT2TIME(InDateTime));
    END;

    PROCEDURE SetDecimalFormat@46(InDecimal@1000 : Decimal) OutDecimal : Text[30];
    BEGIN
      OutDecimal := FORMAT(InDecimal,0,'<Sign>') + FORMAT(InDecimal,0,'<Integer>');

      IF COPYSTR(FORMAT(InDecimal,0,'<Decimals>'),2) <> '' THEN
        OutDecimal := OutDecimal + '.' + COPYSTR(FORMAT(InDecimal,0,'<Decimals>'),2)
      ELSE
        OutDecimal := OutDecimal + '.0';
    END;

    PROCEDURE SetBoolFormat@17(InBoolean@1000 : Boolean) OutBoolean : Text[3];
    BEGIN
      IF InBoolean THEN
        OutBoolean := '1'
      ELSE
        OutBoolean := '0';
    END;

    PROCEDURE PrepareFieldValueForXML@5(FldRef@1000 : FieldRef) OutText : Text[1024];
    VAR
      RecID@1003 : RecordID;
      Date@1005 : Date;
      Time@1002 : Time;
      DateTime@1006 : DateTime;
      Integer@1007 : Integer;
      BigInt@1001 : BigInteger;
      Decimal@1011 : Decimal;
      Bool@1004 : Boolean;
      GUID@1008 : GUID;
    BEGIN
      //EVALUATE(Field.Type,FORMAT(FldRef.TYPE));
      //EVALUATE(Field.Class,FORMAT(FldRef.CLASS));

      //IF Field.Class = Field.Class::FlowField THEN
      IF FORMAT(FldRef.CLASS) = 'FlowField' THEN
          FldRef.CALCFIELD;

      CASE FORMAT(FldRef.TYPE) OF
        //Field.Type::Option:
          'Option':
          BEGIN
            EVALUATE(Integer,FORMAT(FldRef.VALUE));
            OutText := FORMAT(Integer);
          END;

        //Field.Type::Text,Field.Type::Code:
        'Text','Code':
          BEGIN
            OutText := FORMAT(FldRef.VALUE);
          END;

        //Field.Type::Date:
         'Date':
          BEGIN
            EVALUATE(Date,FORMAT(FldRef.VALUE));
            DateTime := CREATEDATETIME(Date,0T);
            Date := DT2DATE(LocalDT2UTC(DateTime));
            OutText := SetDateFormat(Date);
          END;

        //Field.Type::Time:
        'Time':
          BEGIN
            EVALUATE(Time,FORMAT(FldRef.VALUE));
            DateTime := CREATEDATETIME(TODAY,Time);
            Time := DT2TIME(LocalDT2UTC(DateTime));
            OutText := SetTimeFormat(Time);
          END;

        //Field.Type::DateTime:
          'DateTime':
          BEGIN
            EVALUATE(DateTime,FORMAT(FldRef.VALUE));
            OutText := SetDateTimeFormat(LocalDT2UTC(DateTime));
          END;

        //Field.Type::Integer,Field.Type::BigInteger:
          'Integer','BigInteger':
          BEGIN
            OutText := FORMAT(FldRef.VALUE);
          END;

        //Field.Type::Duration:
          'Duration':
          BEGIN
            BigInt := FldRef.VALUE;
            BigInt := BigInt / 60000;
            OutText := FORMAT(BigInt);
          END;

        //Field.Type::Decimal:
          'Decimal':
          BEGIN
            EVALUATE(Decimal,FORMAT(FldRef.VALUE));
            OutText := SetDecimalFormat(Decimal);
          END;

        //Field.Type::DateFormula:
          'DateFormula':
          BEGIN
            OutText := FORMAT(FldRef.VALUE);
          END;

        //Field.Type::Boolean:
          'Boolean':
          BEGIN
            EVALUATE(Bool,FORMAT(FldRef.VALUE));
            OutText := SetBoolFormat(Bool);
          END;

        //Field.Type::GUID:
          'GUID':
          BEGIN
            OutText := FORMAT(FldRef.VALUE);
          END;

        ELSE BEGIN
          RecID := FldRef.RECORD.RECORDID;
          Field.GET(RecID.TABLENO,FldRef.NUMBER);
          ERROR(STRSUBSTNO(Text003,Field."Field Caption",FldRef.RECORD.CAPTION));
        END;
      END;
    END;

    PROCEDURE SetValueFormat@6(FormattedValue@1000 : Text[1024];FldRef@1001 : FieldRef) OutText : Text[1024];
    VAR
      RecID@1011 : RecordID;
      Date@1008 : Date;
      Time@1007 : Time;
      DateTime@1006 : DateTime;
      Integer@1005 : Integer;
      BigInt@1009 : BigInteger;
      Decimal@1004 : Decimal;
      Bool@1003 : Boolean;
      DurationVar@1010 : Duration;
      GUID@1002 : GUID;
    BEGIN
      //EVALUATE(Field.Type,FORMAT(FldRef.TYPE));

      //CASE Field.Type OF
      CASE FORMAT(FldRef.TYPE) OF

        //Field.Type::Text,Field.Type::Code,Field.Type::Option,Field.Type::DateFormula,Field.Type::GUID:
        'Text','Code','Option','DateFormula','GUID':
          OutText := FormattedValue;

        'Date':
          BEGIN
            EVALUATE(Date,FormattedValue);
            IF Date <> 0D THEN
              OutText := SetDateTimeFormat(CREATEDATETIME(Date,000000T));
          END;

        'Time':
          BEGIN
            EVALUATE(Time,FormattedValue);
            OutText := SetDateTimeFormat(CREATEDATETIME(01014501D,Time));
          END;

        'DateTime':
          BEGIN
            EVALUATE(DateTime,FormattedValue);
            OutText := SetDateTimeFormat(DateTime);
          END;

        'Integer','BigInteger':
          BEGIN
            OutText := FormattedValue;
          END;

        'Decimal':
          BEGIN
            EVALUATE(Decimal,FormattedValue);
            OutText := SetDecimalFormat(Decimal);
          END;

        'Boolean':
          BEGIN
            EVALUATE(Bool,FormattedValue);
            OutText := SetBoolFormat(Bool);
          END;

        'Duration':
          BEGIN
            EVALUATE(DurationVar,FormattedValue);
            BigInt := DurationVar / 60000;
            OutText := FORMAT(BigInt);
          END;

        ELSE BEGIN
          RecID := FldRef.RECORD.RECORDID;
          Field.GET(RecID.TABLENO,FldRef.NUMBER);
          ERROR(Text003,FldRef.CAPTION,FldRef.RECORD.CAPTION);
        END;
      END;
    END;

    PROCEDURE HandleFilterChars@36(InputText@1000 : Text[1024];MaxLength@1001 : Integer) : Text[1024];
    VAR
      Pos@1002 : Integer;
      Char@1003 : Char;
      QuotesNeeded@1004 : Boolean;
    BEGIN
      IF (STRLEN(InputText) + 2) > MaxLength THEN
        EXIT(InputText);

      Pos := 1;
      REPEAT
        Char := InputText[Pos];
        IF Char IN ['@','(',')','<','>','&','|','='] THEN
          QuotesNeeded := TRUE;
        Pos := Pos + 1;
      UNTIL (Pos = MaxLength) OR QuotesNeeded;

      IF QuotesNeeded THEN
        EXIT(STRSUBSTNO('"%1"',InputText));
      EXIT(InputText);
    END;

    PROCEDURE ReplaceFilterChars@23(InputString@1000 : Text[1024]) Result : Text[1024];
    BEGIN
      Result := CONVERTSTR(InputString,'@()<>&|="''','??????????');
      IF Result = '' THEN
        Result := '''''';
      EXIT(Result);
    END;

    PROCEDURE LocalDT2UTC@39(LocalDT@1000 : DateTime) UTC : DateTime;
    BEGIN
      IF LocalDT <> 0DT THEN
        UTC := ParseUTCString(FORMAT(LocalDT,0,9))
      ELSE
        UTC := 0DT;
    END;

    LOCAL PROCEDURE UTC2LocalDT@43(UTC@1000 : DateTime) LocalDT : DateTime;
    VAR
      CurrentDT@1018 : DateTime;
      UTCDifference@1019 : Duration;
    BEGIN
      IF UTC <> 0DT THEN BEGIN
        UTCDifference := UTC - LocalDT2UTC(UTC);
        LocalDT := UTC + UTCDifference;
      END ELSE
        LocalDT := 0DT;
    END;

    PROCEDURE UTCString2LocalDT@45(UTCString@1000 : Text[1024]) ResultDT : DateTime;
    VAR
      UTC@1018 : DateTime;
    BEGIN
      UTC := ParseUTCString(UTCString);
      ResultDT := UTC2LocalDT(UTC);
    END;

    LOCAL PROCEDURE ParseUTCString@41(UTCString@1000 : Text[1024]) ResultDT : DateTime;
    VAR
      Time@1004 : Time;
      Year@1005 : Integer;
      Month@1006 : Integer;
      Day@1007 : Integer;
      Hour@1008 : Integer;
      Minute@1003 : Integer;
      Sec@1002 : Integer;
      Millisec@1001 : Integer;
      PosDot@1009 : Integer;
      PosZ@1010 : Integer;
    BEGIN
      IF UTCString = '' THEN
        EXIT(0DT);
      EVALUATE(Year,COPYSTR(UTCString,1,4));
      EVALUATE(Month,COPYSTR(UTCString,6,2));
      EVALUATE(Day,COPYSTR(UTCString,9,2));
      EVALUATE(Hour,COPYSTR(UTCString,12,2));
      EVALUATE(Minute,COPYSTR(UTCString,15,2));
      EVALUATE(Sec,COPYSTR(UTCString,18,2));
      PosDot := STRPOS(UTCString,'.');
      PosZ := STRPOS(UTCString,'Z');
      IF PosDot > 0 THEN
        EVALUATE(Millisec,COPYSTR(UTCString, PosDot + 1,PosZ - PosDot - 1));
      EVALUATE(Time,STRSUBSTNO('%1:%2:%3.%4',Hour,Minute,Sec,Millisec));
      ResultDT := CREATEDATETIME(DMY2DATE(Day,Month,Year),Time);
    END;

    BEGIN
    END.
  }
}
