OBJECT Codeunit 7035320 FUNCIONES TREX
{
  OBJECT-PROPERTIES
  {
    Date=18/06/15;
    Time=13:29:49;
    Modified=Yes;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            ImportarServiciosAtlas;
          END;

  }
  CODE
  {
    VAR
      Text50000@1103355001 : TextConst 'ESP=<-1D>';
      Text000@1100244017 : TextConst 'ESP=Base del Traslado';
      Text001@1100244018 : TextConst 'ESP=Tipo de Vehiculo';
      Text002@1100244019 : TextConst 'ESP=Tipo de Traslado';
      Text003@1100244020 : TextConst 'ESP=Touroperador en Subzona';
      Text004@1100244021 : TextConst 'ESP=Hotel Traslados';
      Text005@1100244022 : TextConst 'ESP=Subzona Traslados';
      Text006@1100244023 : TextConst 'ESP=Zona Traslados';
      Text007@1100244024 : TextConst 'ESP=Vehiculo Asignado';
      Text008@1100244025 : TextConst 'ESP=Vuelo';
      Text009@1100244026 : TextConst 'ESP=Vehiculo Va a Hotel';
      Text010@1100244027 : TextConst 'ESP=Vehiculo Va a Vuelo';
      Text011@1100244028 : TextConst 'ESP=Directorio Archivos';
      Text012@1100244029 : TextConst 'ESP=Directorio Archivos Importados';
      Text013@1100244030 : TextConst 'ESP=<Month Text><Year>';
      Text014@1100244031 : TextConst 'ESP=IMP_';
      Text015@1100244032 : TextConst 'ESP=Transfiriendo\@1@@@@@@@@@\';
      Text016@1100244033 : TextConst 'ESP=Parte : #2#########\@3@@@@@@@@@';
      Text017@1100244034 : TextConst 'ESP=<YEAR>';
      Text018@1100244035 : TextConst 'ESP=Lineas';
      Text019@1100244036 : TextConst 'ESP=Tipo Vehiculo';
      Text020@1100244037 : TextConst 'ESP=L';
      Text021@1100244038 : TextConst 'ESP=S';
      Text022@1100244039 : TextConst 'ESP=Base Traslado';
      Text023@1100244040 : TextConst 'ESP=Touroperador';
      Text024@1100244041 : TextConst 'ESP=Cliente/TTOO';
      Text025@1100244042 : TextConst 'ESP=T';
      Text026@1100244043 : TextConst 'ESP=CARTA';
      Text027@1100244044 : TextConst 'ESP="CARTA "';
      Text028@1100244045 : TextConst 'ESP=TipoVehiculoFinbus';
      Text029@1100244046 : TextConst 'ESP=C';
      Text030@1100244047 : TextConst 'ESP=Parte : #2#########';
      Text031@1100244048 : TextConst 'ESP=Transferida';
      Text032@1100244049 : TextConst 'ESP=\DifereciaPax';
      Text033@1100244050 : TextConst 'ESP=".txt "';
      Text034@1100244051 : TextConst 'ESP="Num. Importacion : "';
      Text035@1100244052 : TextConst 'ESP="Fecha : "';
      Text036@1100244053 : TextConst 'ESP="Hora : "';
      Text037@1100244054 : TextConst 'ESP="Usuario : "';
      Text038@1100244055 : TextConst 'ESP=Num. Parte';
      Text039@1100244056 : TextConst 'ESP=Pax FinBus';
      Text040@1100244057 : TextConst 'ESP=Pax Definitivo';
      err1@1100244000 : TextConst 'ESP=El directorio %1 no existe';
      err2@1100244001 : TextConst 'ESP=El Par metro %1 debe estar rellenado';
      err3@1100244002 : TextConst 'ESP=No se encuentra ning£n archivo en el directorio %1';
      cFunParAd@1100253000 : Codeunit 7010410;
      wVehCorrecto@1100244003 : Boolean;
      wGarajeDefecto2@1100244004 : Code[10];
      err4@1100244005 : TextConst 'ESP=Falta alguno de los ficheros requeridos por la importacion.';
      mssg1@1100244006 : TextConst 'ESP=Se han generado errores en el traspaso, ¨Quiere visualizarlos ahora?';
      wVentana1@1100244007 : Dialog;
      rServicio@1100244008 : Record 7010358;
      rPar@1103350000 : Record 7010311;
      wThomson@1100244009 : Boolean;
      Text00001@1100244010 : TextConst 'ESP=ESPECIFIQUE PERIODO DE FECHAS\';
      Text00002@1100244011 : TextConst 'ESP=Fecha desde #1######\';
      Text00003@1100244012 : TextConst 'ESP=Fecha hasta #2######\';
      Text00004@1100244013 : TextConst 'ESP=Ha especificado incorrectamente una fecha hasta anterior a la fecha desde.';
      Text00005@1100244014 : TextConst 'ESP=Maletas #3####';
      wDefinitivo@1100244015 : Boolean;
      wFile@1100244016 : File;
      cGestionPartes@1103355000 : Codeunit 7010318;
      Text00006@1100217000 : TextConst 'ESP=El fichero seleccionado (%1) no contiene ningun servicio.';
      Text00007@1100217001 : TextConst 'ESP=Bebes';

    PROCEDURE Importar_Archivos@1();
    VAR
      lrParam@1100244000 : Record 7035332;
      lrHistorico@1100244001 : Record 7035333;
      lwNoImportacion@1100244002 : Integer;
    BEGIN
      // Importar_Archivos

      Comprobaciones_Previas;

      // Crea una l¡nea nueva del Historico de Importaci¢n
      lrHistorico.INIT;
      lrHistorico.INSERT(TRUE);

      // Ejecuta los distintos dataports

      // ----  19.08.2002 Modificacion para comprobar que todos los ficheros existen antes de iniciar la importacion  ----

      IF NOT (EXISTS(NombreArchivo(1,3) )) OR
         NOT (EXISTS(NombreArchivo(2,3) )) OR
         NOT (EXISTS(NombreArchivo(4,3) )) OR
         NOT (EXISTS(NombreArchivo(5,3) )) OR
         NOT (EXISTS(NombreArchivo(6,3) )) OR
         NOT (EXISTS(NombreArchivo(7,3) )) OR
         NOT (EXISTS(NombreArchivo(8,3) )) OR
         NOT (EXISTS(NombreArchivo(9,3) )) OR
         NOT (EXISTS(NombreArchivo(10,3))) OR
         NOT (EXISTS(NombreArchivo(11,3))) THEN
        ERROR(err4);

      DATAPORT.RUNMODAL(DATAPORT::"BASE TRASLADO", FALSE);
      DATAPORT.RUNMODAL(DATAPORT::"TIPO VEHICULO", FALSE);
      DATAPORT.RUNMODAL(DATAPORT::"TOUROPERADOR EN SUBZONA", FALSE);
      DATAPORT.RUNMODAL(DATAPORT::"HOTEL TRASLADOS", FALSE);
      DATAPORT.RUNMODAL(DATAPORT::SUBZONA_TRASLADOS, FALSE);
      DATAPORT.RUNMODAL(DATAPORT::"ZONA TRASLADOS", FALSE);
      DATAPORT.RUNMODAL(DATAPORT::"VEHICULO ASIGNADO", FALSE);
      DATAPORT.RUNMODAL(DATAPORT::VUELO, FALSE);
      DATAPORT.RUNMODAL(DATAPORT::"VEHICULO VA A HOTEL", FALSE);
      DATAPORT.RUNMODAL(DATAPORT::"VEHICULO VA A VUELO", FALSE);

      // ----  FIN 19.08.2002  ----

      MueveArchivos(lrHistorico."No Importacion");
      //cnm
      lrHistorico.RESET;
      lrHistorico.SETRANGE(Tipo,lrHistorico.Tipo::Reserva);
      IF lrHistorico.FINDLAST THEN BEGIN
         lrHistorico.Definitivo := wDefinitivo;
         lrHistorico.MODIFY;
      END;
      //fin cnm
    END;

    PROCEDURE NombreArchivo@2(pwNum@1100244000 : Integer;pwModo@1100244001 : 'Nombre Tipo,Nombre Archivo,Nombre Archivo y Direccion,Direccion,Direccion Importados') : Text[250];
    VAR
      lrParam@1100244002 : Record 7035332;
      lwTexto@1100244003 : Text[250];
    BEGIN
      // NombreArchivo
      // Esta funci¢n automatiza la devoluci¢n de un nombre de archivo de importacion
      // Segun el valor de pwModo devolver  :
      // 1 Nombre Tipo:    Nombre Generico del Tipo de Archivo
      // 2 Nombre Archivo: El nombre parametrizado del archivo
      // 3 Nombre Archivo y Direccion: Nombre y direcci¢n del archivo
      // 4 Direccion :    El directorio donde se Posicionan los archivos
      // 5 Direccion Importados: El directorio donde se mueven los archivos importados

      // Cada archivo tiene un n£mero seg£n la siguiente relaci¢n. PwNum.
      // 1 : BASE DEL TRASLADO
      // 2 : TIPO DE VEHICULO
      // 3 : TIPO DE TRASLADO
      // 4 : TOUROPERADOR EN SUBZONA
      // 5 : HOTEL TRASLADOS
      // 6 : SUBZONA TRASLADOS
      // 7 : ZONA TRASLADOS
      // 8 : VEHICULO ASIGNADO
      // 9 : VUELO
      // 10: VEHICULO VA A HOTEL
      // 11: VEHICULO VA A VUELO

      lrParam.RESET;
      IF lrParam.FINDFIRST THEN BEGIN
        CASE pwModo OF
          1: CASE pwNum OF
              1 : lwTexto := Text000;
              2 : lwTexto := Text001;
              3 : lwTexto := Text002;
              4 : lwTexto := Text003;
              5 : lwTexto := Text004;
              6 : lwTexto := Text005;
              7 : lwTexto := Text006;
              8 : lwTexto := Text007;
              9 : lwTexto := Text008;
              10: lwTexto := Text009;
              11: lwTexto := Text010;
            END;


          2,3: BEGIN
            CASE pwNum OF
              1 : lwTexto := BuscaArchivo(lrParam."Base del Traslado" , lrParam) ;
              2 : lwTexto := BuscaArchivo(lrParam."Tipo de Vehiculo", lrParam);
              3 : lwTexto := BuscaArchivo(lrParam."Tipo de Traslado", lrParam);
              4 : lwTexto := BuscaArchivo(lrParam."Touroperador en Subzona", lrParam);
              5 : lwTexto := BuscaArchivo(lrParam."Hotel Traslados", lrParam);
              6 : lwTexto := BuscaArchivo(lrParam."Subzona Traslados", lrParam);
              7 : lwTexto := BuscaArchivo(lrParam."Zona Traslados", lrParam);
              8 : lwTexto := BuscaArchivo(lrParam."Vehiculo Asignado", lrParam);
              9 : lwTexto := BuscaArchivo(lrParam.Vuelo, lrParam);
              10: lwTexto := BuscaArchivo(lrParam."Vehiculo Va a Hotel", lrParam);
              11: lwTexto := BuscaArchivo(lrParam."Vehiculo Va a Vuelo", lrParam);
            END;
            IF (lwTexto <> '' ) AND (pwModo = 3) THEN BEGIN
              IF lrParam."Directorio Archivos"[STRLEN(lrParam."Directorio Archivos")] <> '\' THEN
                 lwTexto := lrParam."Directorio Archivos" + '\' + lwTexto
               ELSE
                 lwTexto := lrParam."Directorio Archivos" + lwTexto;
            END;
          END;
          4 : lwTexto := lrParam."Directorio Archivos" ;
          5 : lwTexto := lrParam."Directorio Archivos Importados";
        END;

      END;

      EXIT(lwTexto);
    END;

    PROCEDURE Comprobaciones_Previas@3();
    VAR
      lwDirectorio@1100244000 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
      lwContador@1100244001 : Integer;
      lwHayAlguno@1100244002 : Boolean;
    BEGIN
      // Comprobaciones_Previas
      // Comprueba que :
      // 1 : Los campos de la tabla Parametros ULTRAMAR referentes a nombres de Archivos est‚n rellenados
      // 2 : Los campos DE Parametros ULTRAMAR  "Directorio Archivos" Y "Directorio Archivos Importados" esten rellenados
      // 3 : Existan los directorios indicados en dichos campos.
      // 4 : Exista por lo menos un archivo de los seleccionados en el directorio

      // 1
      FOR  lwContador:= 1 TO 11 DO BEGIN
        IF NombreArchivo(lwContador,2) = '' THEN
          ERROR (err2 , NombreArchivo(lwContador,1));
      END;

      // 2
      IF NombreArchivo(0,4) = '' THEN
        ERROR (err2 , Text011);

      IF NombreArchivo(0,5) = '' THEN
        ERROR (err2 , Text012);

      // 3
      CREATE(lwDirectorio);


      IF NOT lwDirectorio.FolderExists(NombreArchivo(0,4)) THEN
        ERROR(err1, NombreArchivo(0,4));

      IF NOT lwDirectorio.FolderExists(NombreArchivo(0,5)) THEN
        ERROR(err1, NombreArchivo(0,5));

      //4

      lwHayAlguno := FALSE;
      REPEAT
        IF EXISTS (NombreArchivo(lwContador,3)) THEN
          lwHayAlguno := TRUE;
        lwContador += 1;
      UNTIL lwHayAlguno OR (lwContador > 10);

      IF NOT lwHayAlguno THEN
        ERROR (err3 , NombreArchivo(0,4));
    END;

    PROCEDURE MueveArchivos@4(pwNoImportacion@1100244000 : Integer);
    VAR
      lwDirectorio@1100244001 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
      lwSubdirectorio@1100244002 : Text[250];
      lwContador@1100244003 : Integer;
      lwArch1@1100244004 : Text[250];
      lwArch2@1100244005 : Text[250];
    BEGIN
      // MueveArchivos
      // Esta funci¢n se encarga de abrir un Subdiectorio para esa importaci¢n y mover
      // all¡ todos los archivos importados
      // pwNoImportacion Es el N§ asignado a esa importaci¢n.

      CREATE(lwDirectorio);

      lwSubdirectorio := NombreArchivo(0,5);
      IF lwSubdirectorio[STRLEN(lwSubdirectorio)] <> '\' THEN
        lwSubdirectorio := lwSubdirectorio + '\';

      lwSubdirectorio := lwSubdirectorio + FORMAT(TODAY,0,Text013) + '\';

      IF NOT lwDirectorio.FolderExists (lwSubdirectorio) THEN
        lwDirectorio.CreateFolder (lwSubdirectorio);

      lwSubdirectorio := lwSubdirectorio  + Text014 + PonCeros(pwNoImportacion , 4) + '_' + PonFecha(TODAY);

      IF NOT lwDirectorio.FolderExists (lwSubdirectorio) THEN
        lwDirectorio.CreateFolder (lwSubdirectorio);

      FOR lwContador := 1 TO 11 DO BEGIN
        lwArch1 := NombreArchivo(lwContador , 3);
        IF EXISTS(lwArch1) THEN BEGIN
            lwArch2 := lwSubdirectorio + '\' + NombreArchivo(lwContador , 2);
            lwDirectorio.MoveFile(lwArch1 , lwArch2);
          END;
      END;
    END;

    PROCEDURE PonCeros@6(pwNumero@1100244000 : Integer;pwCuantos@1100244001 : Integer) : Code[20];
    VAR
      lwTexto@1100244002 : Code[20];
    BEGIN
      // PonCeros
      // A partir del entero pasado como parametro "pwNumero" devuelve un code, pero CON ceros delante en "pwCuantos" cifras


      lwTexto := FORMAT (pwNumero);

      IF STRLEN (lwTexto) < pwCuantos THEN
        REPEAT
          lwTexto := '0' + lwTexto;
        UNTIL STRLEN (lwTexto) >= pwCuantos;

      EXIT(lwTexto);
    END;

    PROCEDURE Tranferencia@5(pwNoImportacion@1100244000 : Integer;pwComprobacion@1100244001 : Boolean);
    VAR
      lrVehiculo@1100244002 : Record 7035324;
      lrVehiculo2@1100244003 : Record 7035324;
      lrErrores@1100244004 : Record 7035334;
      lrHistorico@1100244005 : Record 7035333;
      lfPrevio@1100244006 : Form 7035334;
      lfFormErrores@1100244007 : Form 7035333;
      lwContador1@1100244008 : Integer;
      lwValor@1100244009 : Integer;
      lwTotal@1100244010 : Integer;
    BEGIN
      // Tranferencia
      // pwComprobacion indica si tiene que realizarse una comprobacion previa

      IF lfPrevio.RUNMODAL = ACTION::OK  THEN BEGIN
        lfPrevio.Devuelve (pwNoImportacion);
      END
      ELSE
        EXIT;

      wVentana1.OPEN(Text015 +
                     Text016 );

      lwContador1 := 0;

      // cnm

      IF pwNoImportacion <> 0 THEN BEGIN
         IF lrHistorico.GET(pwNoImportacion) THEN BEGIN
            IF lrHistorico.Definitivo THEN BEGIN
               TxtComparaPax(lrHistorico);
            END;
         END;
      END;


      //fin cnm

      lrVehiculo.RESET;
      lrVehiculo.SETCURRENTKEY("N§ Fichero",
                               Estado);
      IF pwNoImportacion <> 0 THEN
        lrVehiculo.SETRANGE ("N§ Fichero" , pwNoImportacion);

      IF pwComprobacion  THEN
        lrVehiculo.SETFILTER (Estado, '<>%1&<>%2', lrVehiculo.Estado::Incorporado,
                                                   lrVehiculo.Estado::Error)
      ELSE
        lrVehiculo.SETFILTER (Estado, '%1',lrVehiculo.Estado::Revisado);

      lwTotal := lrVehiculo.COUNT;
      IF lrVehiculo.FINDSET(TRUE) THEN
        REPEAT
          lrVehiculo2 := lrVehiculo;
          IF CompruebaVehiculo(lrVehiculo2) OR (pwComprobacion = FALSE) THEN
            TransfiereVehiculo(lrVehiculo2);
          lwContador1 += 1;
          IF lwTotal > 0 THEN
            lwValor := ROUND((lwContador1/ lwTotal  ) * 10000, 1);
          wVentana1.UPDATE(3, lwValor);

          // AJS 21.07.2006
          // Cada 10 vehiculos pongo un COMMIT para que no se bloquee toda la aplicacion durante la importaci¢n

          IF lwContador1 MOD 10 = 0 THEN
            COMMIT;
        UNTIL lrVehiculo.NEXT = 0;

      lrErrores.SETRANGE("No Importacion" , pwNoImportacion);
      IF lrErrores.FINDFIRST THEN BEGIN
        IF CONFIRM (mssg1, TRUE) THEN BEGIN
          lfFormErrores.SETTABLEVIEW(lrErrores);
          lfFormErrores.RUN;
        END;

      END;
      wVentana1.CLOSE;
      CompruebaImportacionTrans(pwNoImportacion);
    END;

    PROCEDURE PonFecha@7(pwFecha@1100244000 : Date) : Code[8];
    BEGIN
      // PonFecha
      // Devuelve la fecha en formato code y sin barras
      EXIT(PonCeros(DATE2DMY(pwFecha,1),2) + PonCeros(DATE2DMY(pwFecha,2),2) + FORMAT(pwFecha,0,Text017));
    END;

    PROCEDURE InsertaError@11(pwNoImportacion@1100244000 : Integer;"pwCodigo de Vehiculo"@1100244001 : Code[10];pwSituacion@1100244002 : Text[30];pwDescripcion@1100244003 : Text[100]);
    VAR
      lrHistorico@1100244004 : Record 7035334;
    BEGIN
      // InsertaError
      // Inserta cada l¡nea de error

      lrHistorico.RESET;
      lrHistorico.INIT;
      lrHistorico."No Importacion"     := pwNoImportacion;
      lrHistorico."Codigo de Vehiculo" := "pwCodigo de Vehiculo";
      lrHistorico.Situacion            := pwSituacion;
      lrHistorico.Descripcion          := pwDescripcion;
      lrHistorico.INSERT(TRUE);

      wVehCorrecto := FALSE;
    END;

    PROCEDURE CompruebaVehiculo@8(VAR prVehiculo@1100244000 : Record 7035324) : Boolean;
    VAR
      Ierr1@1100244001 : TextConst 'ESP=No hay ninguna l¡nea asignada en ''Vehiculo va a Hotel''';
      lrTipoVehiculo@1100244002 : Record 7035320;
      Ierr2@1100244003 : TextConst 'ESP=El tipo de vehiculo %1 no est  registrado en la tabla "Tipo vehiculo"';
      Ierr3@1100244004 : TextConst 'ESP=El tipo de vehiculo %1 No tiene correspondecia Finbus';
      lrBaseTraslado@1100244005 : Record 7035326;
      Ierr4@1100244006 : TextConst 'ESP=La Base de Traslado %1 No se encuentra';
      Ierr5@1100244007 : TextConst 'ESP=La Base de Traslado %1 No tiene correspondencia Finbus';
      lrTouroperador@1100244008 : Record 7035321;
      Ierr6@1100244009 : TextConst 'ESP=El Touroperador %1 No se encuentra';
      Ierr7@1100244010 : TextConst 'ESP=El Touroperador %1 No tiene correspondencia Finbus';
      lrHotel@1100244011 : Record 7035322;
      Ierr8@1100244012 : TextConst 'ESP=El Hotel %1 No se encuentra';
      Ierr9@1100244013 : TextConst 'ESP=El Hotel %1 No tiene correspondecia Finbus';
      lrVuelo@1100244014 : Record 7035325;
      Ierr10@1100244015 : TextConst 'ESP=El Vuelo de Referencia %1 No se encuentra';
      Ierr11@1100244016 : TextConst 'ESP="No hay ninguna l¡nea asignada en ""Vehiculo va a Vuelo"" "';
      lrErrores@1100244017 : Record 7035334;
      lrVVVuelo@1100244018 : Record 7035328;
      lrVVHotel@1100244019 : Record 7035327;
      Ierr12@1100244020 : TextConst 'ESP=La l¡nea de Vehiculo Asignado N§ %1 no tiene c¢digo de vehiculo';
      lrClienteTTOO@1100244021 : Record 7010313;
      lrParametrosUEX@1100244022 : Record 7035332;
      lwTTOO@1100244023 : Code[10];
      Ierr13@1100244024 : TextConst 'ESP=No existe asociaci¢n entre el Cliente %1 y el TTOO %2';
      lrPuntoRecogida@1100244025 : Record 7010315;
      Ierr14@1100244026 : TextConst 'ESP=El Hotel %1 No puede tener el Codigo Finbus en Blanco';
      lrParte@1100244027 : Record 7010360;
      "lwLlegada/Salida"@1100244028 : Code[1];
      Ierr15@1100244029 : TextConst 'ESP=En un mismo Parte existen codigos de Entrada/Salida distintos';
      Ierr16@1100244030 : TextConst 'ESP=Codigo Llegada/Salida desconocido (%1)';
      Ierr17@1100244031 : TextConst 'ESP=Se asigno una hora de Salida a un parte de Llegada';
      Ierr18@1100244032 : TextConst 'ESP=Se asigno una hora de Llegada a un parte de Salida';
      Ierr19@1100244033 : TextConst 'ESP=No se puede modificar un parte confirmado.';
    BEGIN
      // CompruebaVehiculo
      // Realiza en cada Vehiculo Asignado Asignado (Parte) las siguientes comprobaciones:
      wVehCorrecto := TRUE;

      // Borra las lineas de error relacionadas con esta importaci¢n y este vehiculo asignado
      lrErrores.RESET;
      lrErrores.SETCURRENTKEY("Codigo de Vehiculo");
      lrErrores.SETRANGE ("No Importacion", prVehiculo."N§ Fichero");
      lrErrores.SETRANGE ("Codigo de Vehiculo", prVehiculo."Codigo de Vehiculo");
      lrErrores.DELETEALL;


      lrVVVuelo.RESET;
      lrVVVuelo.SETCURRENTKEY ("N§Fichero",
                               "Codigo Vehiculo Asignado");
      lrVVHotel.RESET;
      lrVVHotel.SETCURRENTKEY ("N§Fichero",
                               "Codigo Vehiculo Asignado");

      lrVVVuelo.SETRANGE("Codigo Vehiculo Asignado", prVehiculo."Codigo de Vehiculo");
      lrVVVuelo.SETRANGE("N§Fichero"               , prVehiculo."N§ Fichero");
      lrVVHotel.SETRANGE("Codigo Vehiculo Asignado", prVehiculo."Codigo de Vehiculo");
      lrVVHotel.SETRANGE("N§Fichero"               , prVehiculo."N§ Fichero");


      IF prVehiculo."Codigo de Vehiculo" = '' THEN BEGIN
          InsertaError ( prVehiculo."N§ Fichero" , prVehiculo."Codigo de Vehiculo" ,Text007 ,
                                                 STRSUBSTNO( Ierr12 , prVehiculo."N§Linea"));
        EXIT(FALSE);
      END;

      {* - JPT -- Dejamos que pasen los vehiculo asignados Sin Lineas Porque entonces esos partes se borraran automaticamente
      IF NOT lrVVHotel.FINDFIRST THEN
        InsertaError ( prVehiculo."N§ Fichero" , prVehiculo."Codigo de Vehiculo" ,Text018 ,Ierr1);

      IF NOT lrVVVuelo.FINDFIRST THEN
        InsertaError ( prVehiculo."N§ Fichero" , prVehiculo."Codigo de Vehiculo" ,Text018 ,Ierr11);

      ---------------------------------------------------------------*}
      IF lrTipoVehiculo.GET(prVehiculo."Tipo de Vehiculo") THEN BEGIN

        IF lrTipoVehiculo."Codigo FinBus" = '' THEN
          InsertaError ( prVehiculo."N§ Fichero" , prVehiculo."Codigo de Vehiculo" ,Text019 ,
                                                 STRSUBSTNO( Ierr3 , prVehiculo."Tipo de Vehiculo"));
      END
      ELSE
        InsertaError ( prVehiculo."N§ Fichero" , prVehiculo."Codigo de Vehiculo" ,Text019 ,
                                                 STRSUBSTNO( Ierr2 , prVehiculo."Tipo de Vehiculo"));


      // Comprueba todas las lineas Vehiculo va a Hotel relacionadas con el Vehiculo (Parte)
      IF lrVVHotel.FINDSET(TRUE) THEN BEGIN
        "lwLlegada/Salida" := lrVVHotel."Llegada/Salida";
        REPEAT
          lrHotel.INIT;
          IF lrHotel.GET (lrVVHotel."Codigo Hotel") THEN BEGIN
            IF lrHotel."Codigo FinBus" <> '' THEN BEGIN
              // Mira adem s que el codigo Finbus tenga una correspondecia real
              IF NOT lrPuntoRecogida.GET(lrHotel."Codigo FinBus") THEN BEGIN
                 InsertaError ( prVehiculo."N§ Fichero" , prVehiculo."Codigo de Vehiculo" ,Text004 ,
                                                 STRSUBSTNO( Ierr9 ,
                                                 lrVVHotel."Codigo Hotel"));

              END
              ELSE BEGIN
                // JPT 26/07/04 Si encuentra el punto Ponemos el numero de orden a vehiculo va a hotel a partir del Punto de recogida
                CASE lrVVHotel."Llegada/Salida" OF
                  Text021: lrVVHotel."Numero de Orden" := lrPuntoRecogida."Orden salida";
                  Text020: lrVVHotel."Numero de Orden" := lrPuntoRecogida."Orden entrada";
                END;
                lrVVHotel.MODIFY;
              END;

            END ELSE
              InsertaError ( prVehiculo."N§ Fichero" , prVehiculo."Codigo de Vehiculo" ,Text004 ,
                                                 STRSUBSTNO( Ierr14 ,
                                                 lrVVHotel."Codigo Hotel"));

          END ELSE
            InsertaError ( prVehiculo."N§ Fichero" , prVehiculo."Codigo de Vehiculo" ,Text004 ,
                                                 STRSUBSTNO( Ierr8 , lrVVHotel."Codigo Hotel"));

          // Si encuentra un codigo de Llegada/Salida desconocido
          // ----  AJS 12.04.02
          {*
          IF NOT (lrVVHotel."Llegada/Salida" IN [Text020,Text021]) THEN
            InsertaError ( prVehiculo."N§ Fichero" , prVehiculo."Codigo de Vehiculo" ,Text004 ,
                                                       STRSUBSTNO( Ierr16 , lrVVHotel."Llegada/Salida"));
          *}
          // ----  FIN AJS 12.04.02  ----

          // Si en un mismo Vehiculo tenemos codigos distintos de entrada/salida
          IF "lwLlegada/Salida" <> lrVVHotel."Llegada/Salida" THEN
            InsertaError ( prVehiculo."N§ Fichero" , prVehiculo."Codigo de Vehiculo" ,Text004,Ierr15 );

          // Comprobamos que existe la conversi¢n de touroperadores a nivel de linea
          lrTouroperador.INIT;
          IF lrTouroperador.GET (lrVVHotel."Codigo de Ciente") THEN BEGIN
            IF lrTouroperador."Codigo FinBus" = '' THEN
              InsertaError ( lrVVHotel."N§Fichero" , lrVVHotel."Codigo Vehiculo Asignado" ,Text023 ,
                                                   STRSUBSTNO( Ierr7 , lrVVHotel."Codigo de Ciente"));
          END
          ELSE
            InsertaError ( lrVVHotel."N§Fichero" ,  lrVVHotel."Codigo Vehiculo Asignado" ,Text023 ,
                                                 STRSUBSTNO( Ierr6 , lrVVHotel."Codigo de Ciente"));

        UNTIL lrVVHotel.NEXT = 0;

      END;

      // Comprueba todas las lineas Vehiculo va a Vuelo relacionadas con el Vehiculo (Parte)
      IF lrVVVuelo.FINDSET THEN
        REPEAT
          lrBaseTraslado.INIT;

          IF lrBaseTraslado.GET(lrVVVuelo."Base Traslado") THEN BEGIN
            IF lrBaseTraslado."Codigo FINBUS" = '' THEN
              InsertaError ( prVehiculo."N§ Fichero" , prVehiculo."Codigo de Vehiculo" ,Text022 ,
                                                 STRSUBSTNO( Ierr5 , lrVVVuelo."Base Traslado"));
          END ELSE
            InsertaError ( prVehiculo."N§ Fichero" , prVehiculo."Codigo de Vehiculo" ,Text022 ,
                                                 STRSUBSTNO( Ierr4 , lrVVVuelo."Base Traslado"));
          lrTouroperador.INIT;
          IF lrTouroperador.GET (lrVVVuelo."Codigo Touroperador") THEN BEGIN
            IF lrTouroperador."Codigo FinBus" = '' THEN
              InsertaError ( prVehiculo."N§ Fichero" , prVehiculo."Codigo de Vehiculo" ,Text023 ,
                                                   STRSUBSTNO( Ierr7 , lrVVVuelo."Codigo Touroperador"));
          END
          ELSE
            InsertaError ( prVehiculo."N§ Fichero" , prVehiculo."Codigo de Vehiculo" ,Text023 ,
                                                 STRSUBSTNO( Ierr6 , lrVVVuelo."Codigo Touroperador"));

          // Comprueba que tenga relaci¢n con un vuelo
          lrVuelo.SETCURRENTKEY ("N§Archivo",
                                 "Referencia Vuelo");
          lrVuelo.SETRANGE("N§Archivo"       , lrVVVuelo."N§Fichero");
          lrVuelo.SETRANGE("Referencia Vuelo", lrVVVuelo."Referencia Vuelo");
          IF NOT lrVuelo.FINDFIRST THEN
            InsertaError ( prVehiculo."N§ Fichero" , prVehiculo."Codigo de Vehiculo" ,Text008 ,
                                                   STRSUBSTNO( Ierr10 , lrVVVuelo."Referencia Vuelo"));

          // ----  AJS 14.02.04
          {*
          ELSE
            // Que las horas de llegada/Salida de los vuelos se correspondan con el codigo se servicio
            REPEAT
              CASE lrVVHotel."Llegada/Salida" OF
               Text020:BEGIN
                     IF lrVuelo."Hora Salida" <> 0T THEN
                       InsertaError ( prVehiculo."N§ Fichero" , prVehiculo."Codigo de Vehiculo" ,Text008 ,Ierr17);
                 END;
               Text021:BEGIN
                     IF lrVuelo."Hora Llegada" <> 0T THEN
                       InsertaError ( prVehiculo."N§ Fichero" , prVehiculo."Codigo de Vehiculo" ,Text008 ,Ierr18);
                   END;
              END
            UNTIL lrVuelo.NEXT=0;
          *}

        UNTIL lrVVVuelo.NEXT = 0;

        // Comprueba que exista una relaci¢n entre el cliente y el TTOO de m s peso
        lrParametrosUEX.RESET;
        lrParametrosUEX.FINDFIRST;
        lrClienteTTOO.RESET;
        lwTTOO := BuscaTTTOOParte(lrVVVuelo);    // TTOO de m s peso
        IF NOT lrClienteTTOO.GET(lrParametrosUEX."Cliente Importaci¢n", lwTTOO) THEN
          InsertaError ( prVehiculo."N§ Fichero" , prVehiculo."Codigo de Vehiculo" ,Text024 ,
                         STRSUBSTNO( Ierr13 , lrParametrosUEX."Cliente Importaci¢n",lwTTOO));


        lrParte.RESET;
        IF lrParte.GET(prVehiculo."Codigo de Vehiculo") THEN BEGIN
          IF lrParte.Confirmado THEN
            InsertaError (prVehiculo."N§ Fichero" , prVehiculo."Codigo de Vehiculo" ,Text024 ,
                          STRSUBSTNO( Ierr19 , lrParametrosUEX."Cliente Importaci¢n",lwTTOO));
        END;

        IF wVehCorrecto THEN
          prVehiculo.Estado := prVehiculo.Estado:: Revisado
        ELSE
          prVehiculo.Estado := prVehiculo.Estado:: Error;
        prVehiculo.Usuario := USERID;
        prVehiculo.MODIFY;

      EXIT(wVehCorrecto);
    END;

    PROCEDURE EstaBloqueado@34(pwPunto@1100244000 : Code[10];VAR prSerPar@1100244001 : Record 7010359) : Boolean;
    VAR
      lrSerPar2@1100244002 : Record 7010359;
    BEGIN
      // EstaBloqueado
      // Devuelve true si el punto de recogida pasado como parametro esta en una linea
      // de servicios partes bloqueada

      lrSerPar2.COPY (prSerPar);
      lrSerPar2.SETCURRENTKEY("N§ Parte","Punto recogida","Hora recogida");
      lrSerPar2.SETRANGE("Punto recogida",pwPunto);
      lrSerPar2.SETRANGE("Linea Manual",TRUE);
      EXIT (lrSerPar2.FINDFIRST);
    END;

    PROCEDURE Actualiza_TTOO@9(VAR prVVVuelo@1100244000 : Record 7035328) Touroperadores : Text[60];
    VAR
      lrVVVuelo@1100244001 : Record 7035328;
      lwTTOO@1100244002 : Code[10];
      lwTouroperadores@1100244003 : Text[60];
    BEGIN
      // Actualiza_TTOO
      // Devuelve la concatenaci¢n de todos los touroperadores.

      lwTouroperadores := '';
      lrVVVuelo.COPY(prVVVuelo);

      IF lrVVVuelo.FINDSET THEN
        REPEAT
          lwTTOO := TTOO_Finbus (lrVVVuelo."Codigo Touroperador");
          IF lwTTOO <> '' THEN BEGIN
            IF STRPOS(lwTouroperadores , lwTTOO) = 0 THEN BEGIN
              IF lwTouroperadores <> '' THEN
                lwTouroperadores := lwTouroperadores + '|';
              lwTouroperadores := lwTouroperadores + lwTTOO;
            END;

          END;
        UNTIL lrVVVuelo.NEXT = 0;
      EXIT(lwTouroperadores);
    END;

    PROCEDURE Actualiza_Temp_Vuelos@18(VAR prVVVuelo@1100244000 : Record 7035328;prPlaning@1100244001 : Code[10]) VUELOS : Text[250];
    VAR
      lrVVVuelo@1100244002 : Record 7035328;
      lrVuelo@1100244003 : Record 7035325;
      lrTempVuelo@1100244004 : Record 7010400;
      lwHora@1100244005 : Time;
      lwIATA@1100244006 : Code[10];
      lwVuelos@1100244007 : Text[250];
      lrVueloXParte@1100244008 : Record 7035335;
    BEGIN
      // Actualiza_Temp_Vuelos
      // Rellena los campo del temporal de vuelos (DESACTIVADO) y devuelve la concatenacion de vuelos
      // Aprovecha ya que estamos y rellena tambi‚n la tabla Vuelo x Parte UEX.
      // El Parametro prPlaning solo se utiliza para rellenar esta ultima tabla.

      lrVVVuelo.COPY(prVVVuelo);
      lrVVVuelo.SETCURRENTKEY("Referencia Vuelo");
      lrVuelo.RESET;
      lrVuelo.SETCURRENTKEY("N§Archivo",
                            "Referencia Vuelo",
                            "Fecha Llegada Vuelo");
      lwVuelos := '';

      // Borrar todos los registros de la tabla Vuelo X Parte correspondiente a este parte
      lrVueloXParte.RESET;
      lrVueloXParte.SETRANGE("N§Parte" , prVVVuelo."Codigo Vehiculo Asignado");
      IF lrVueloXParte.FINDFIRST THEN
        lrVueloXParte.DELETEALL;
      //lrVueloXParte.RESET;

      IF lrVVVuelo.FINDSET THEN
        REPEAT
          lrVuelo.SETRANGE("N§Archivo"           , lrVVVuelo."N§Fichero");
          lrVuelo.SETRANGE("Referencia Vuelo"    , lrVVVuelo."Referencia Vuelo");
      //    lrVuelo.SETRANGE("Fecha Llegada Vuelo" , lrVVVuelo."Fecha Traslado");
          IF NOT lrVuelo.FINDFIRST THEN
            lrVuelo.INIT;
          IF lrVuelo."Referencia Vuelo" = '' THEN
            EXIT;
          IF lrVuelo."Hora Llegada" <> 0T THEN BEGIN
            lwHora := lrVuelo."Hora Llegada";
            lwIATA := lrVuelo.Origen;
          END ELSE
          IF lrVuelo."Hora Salida" <> 0T THEN BEGIN
            lwHora := lrVuelo."Hora Salida";
            lwIATA := lrVuelo.Destino;
          END ELSE
          BEGIN
            lwHora := 0T;
            lwIATA := '';
          END;
          {* --- JPT -- 09/10/01  DESACTIVADO ya que la tabla deja de utilizarse --------------------
          IF NOT lrTempVuelo.GET(lrVuelo."Referencia Vuelo" , lrVuelo."Fecha Traslado") THEN BEGIN
            lrTempVuelo.INIT;
            lrTempVuelo.VALIDATE ("Cod.Vuelo" , lrVuelo."Referencia Vuelo");
            lrTempVuelo.VALIDATE (fecha , lrVuelo."Fecha Traslado");
            lrTempVuelo.INSERT(TRUE);
          END;

            lrTempVuelo.VALIDATE (Hora , lwHora);
            lrTempVuelo.VALIDATE (IATA , lwIATA);
            lrTempVuelo.MODIFY (TRUE);

          IF STRPOS(lwVuelos ,lrVVVuelo."Referencia Vuelo" ) = 0 THEN BEGIN
            IF lwVuelos <> '' THEN
              lwVuelos := lwVuelos + ',';
            lwVuelos := lwVuelos + lrVVVuelo."Referencia Vuelo";
          END;

          --------------------------------------------------------------------------- FIN - JPT ----*}

          // Rellena la tabla Vuelo x Parte

          Rellena_VueloXParte(lrVVVuelo, lrVuelo, prPlaning, lrVueloXParte);

        UNTIL lrVVVuelo.NEXT = 0;

      // Concatena los vuelos
      lrVueloXParte.SETCURRENTKEY("N§Parte",
                                  Hora);
      lrVueloXParte.SETRANGE("N§Parte", prVVVuelo."Codigo Vehiculo Asignado");
      IF lrVueloXParte.FINDSET THEN
        REPEAT
          IF STRPOS(lwVuelos , lrVueloXParte."Referencia Vuelo" ) = 0 THEN BEGIN
            IF lwVuelos <> '' THEN
              lwVuelos := lwVuelos + ',';
            lwVuelos := lwVuelos + lrVueloXParte."Referencia Vuelo";
          END;
        UNTIL lrVueloXParte.NEXT = 0;


      EXIT(lwVuelos);
    END;

    PROCEDURE BuscaServicio@10(VAR prParte@1100244000 : Record 7010360;pwPlaning@1100244001 : Code[10]);
    BEGIN
      // BuscaServicio
      // Busca el servicio que tengan el mismo Codigo de Servicio y Planning, si no lo encuentra lo cre, en todo
      // caso devuelve el n£mero del Servicio

      rServicio.RESET; rServicio.INIT;
      rServicio.SETCURRENTKEY (Planing,"Codigo Servicio",Fecha);

      rServicio.SETRANGE (Planing , pwPlaning);
      rServicio.SETRANGE ("Codigo Servicio", prParte."Codigo Servicio");
      rServicio.SETRANGE (Fecha , prParte.Fecha);
      rServicio.SETRANGE (Cliente , prParte.Cliente);

      IF NOT rServicio.FINDFIRST THEN BEGIN

        CLEAR(rServicio);
        rServicio.Garaje := prParte.Garaje;
        rServicio.INSERT   (TRUE);

        rServicio.VALIDATE (Cliente ,prParte.Cliente);
        rServicio.VALIDATE ("Codigo Servicio" , prParte."Codigo Servicio");
        rServicio.VALIDATE ("Tipo Servicio", prParte."Tipo Servicio");
        rServicio.VALIDATE (Planing , pwPlaning);

        rServicio.Fecha  :=  prParte.Fecha;
        rServicio.MODIFY (TRUE);
      END;
    END;

    PROCEDURE Hotel_FinBus@20(pwCodigoImp@1100244000 : Code[10]) CodigoFinbus : Code[10];
    VAR
      lrHotelTraslados@1100244001 : Record 7035322;
    BEGIN
      // Hotel_FinBus
      // Dado un codigo de hotel importado devuelve el correspondiente codigo Finbus

      lrHotelTraslados.RESET;
      IF NOT lrHotelTraslados.GET(pwCodigoImp) THEN
        lrHotelTraslados.INIT;
      EXIT(lrHotelTraslados."Codigo FinBus");
    END;

    PROCEDURE TTOO_Finbus@15(pwCodigoImp@1100244000 : Code[10]) "TTOO Finbus" : Code[10];
    VAR
      lrTTOOSubzona@1100244001 : Record 7035321;
    BEGIN
      // TTOO_Finbus
      // Dado un codigo de TTOO importado devuelve el correspondiente codigo Finbus

      lrTTOOSubzona.RESET;
      IF NOT lrTTOOSubzona.GET(pwCodigoImp) THEN
        lrTTOOSubzona.INIT;
      EXIT(lrTTOOSubzona."Codigo FinBus");
    END;

    PROCEDURE BaseDelTraslado_Finbus@30(pwNoBaseTraslado@1100244000 : Code[10]) : Code[10];
    VAR
      lrBase@1100244001 : Record 7035326;
    BEGIN
      // BaseDelTraslado_Finbus
      // Dado una base de traslado importada devuelve el correspondiente codigo Finbus

      IF NOT lrBase.GET(pwNoBaseTraslado) THEN
        lrBase.INIT;
      EXIT(lrBase."Codigo FINBUS");
    END;

    PROCEDURE CodigoVehiculo_Finbus@13(PwTipoVehiculo@1100244000 : Code[10]) "Tipo Finbus" : Code[10];
    VAR
      lrTipoVehiuclo@1100244001 : Record 7035320;
    BEGIN
      // CodigoVehiculo_Finbus

      // Dado un Codigo de Vehiculo importado devuelve el correspondiente codigo Finbus

      IF NOT lrTipoVehiuclo.GET(PwTipoVehiculo) THEN
        lrTipoVehiuclo.INIT;
      EXIT(lrTipoVehiuclo."Codigo FinBus");
    END;

    PROCEDURE InputGaraje@12(pwGarajeEntrada@1100244000 : Code[10]);
    BEGIN
      // InputGaraje
      // Entra el wGarajeDefecto desde fuera del objeto

      //wGarajeDefecto := pwGarajeEntrada;
    END;

    PROCEDURE TransfiereVehiculoVent@14(VAR prVehiculo@1100244000 : Record 7035324);
    BEGIN
      // TransfiereVehiculoVent
      // Cuando se transfiere un solo vehiculo
      // Hace de puende a TransfiereVehiculo simplemente a¤adiendo la ventana de progreso
      // Se ha hecho de esta manera porque cuando se llama a esa funci¢n desde una trasferencia
      // multiple se emplea otro tipo de ventana.

      wVentana1.OPEN(Text015+
                      Text030 );

      TransfiereVehiculo(prVehiculo);
      CompruebaImportacionTrans(prVehiculo."N§ Fichero");
      wVentana1.CLOSE;
    END;

    PROCEDURE CompruebaImportacionTrans@22(pwNoImportacion@1100244000 : Integer);
    VAR
      lrHistorico@1100244001 : Record 7035333;
      lrVehiculo@1100244002 : Record 7035324;
    BEGIN
      // CompruebaImportacionTrans
      // Comprueba si toda la importaci¢n se ha traspasado, en cuyo caso marca la tabla
      // Historico de Importaciones 7000323 como Text031

      lrHistorico.RESET;

      lrVehiculo.RESET;
      lrVehiculo.SETCURRENTKEY ("N§ Fichero",
                                Estado);
      lrVehiculo.SETRANGE  ("N§ Fichero" , pwNoImportacion);
      lrVehiculo.SETFILTER (Estado, '<> %1', lrVehiculo.Estado::Incorporado);

      IF NOT lrVehiculo.FINDFIRST THEN BEGIN
        IF lrHistorico.GET(lrHistorico.Tipo::Reserva, pwNoImportacion) THEN BEGIN
          lrHistorico.Transferida := TRUE;
          lrHistorico.Usuario := USERID;
          lrHistorico.MODIFY(TRUE);
        END;
      END;
    END;

    PROCEDURE BuscaArchivo@17(pwNombreArchivo@1100244000 : Text[100];prParametros@1100244001 : Record 7035332) "Archivo retorno" : Text[100];
    VAR
      lwArchivo@1100244002 : Text[100];
      lwdireccion@1100244003 : Text[250];
    BEGIN
      // BuscaArchivo
      // En realidad lo que busca es si existe el archivo con extensi¢n definitiva en primer lugar
      // y con extensi¢n provisional en segundo. Devuelve el nombre de archivo con extensi¢n pero sin direccion

      lwdireccion := prParametros."Directorio Archivos";

      IF lwdireccion[STRLEN(lwdireccion)] <> '\' THEN
        lwdireccion := lwdireccion + '\';

      lwArchivo := pwNombreArchivo + '.' + prParametros."Extensi¢n Arch. Definitivos";
      IF NOT EXISTS (lwdireccion + lwArchivo) THEN
        lwArchivo := pwNombreArchivo + '.' + prParametros."Extensi¢n Arch. Provisionales"
      ELSE
        wDefinitivo := TRUE;
      EXIT(lwArchivo);
    END;

    PROCEDURE BuscarPrimeraHora@21(VAR prVVHotel@1100244000 : Record 7035327;pw1eraHora@1100244001 : Time) PrimeraHora : Time;
    VAR
      lrVVHotel2@1100244002 : Record 7035327;
      lwPrimeraHora@1100244003 : Time;
      lrParametros@1100244004 : Record 7010311;
    BEGIN
      // BuscarPrimeraHora
      // Esta funci¢n devuelve la primera hora de recogida del parte
      // Se tendr  en cuenta que ninguna de las horas de las l¡neas de parte corresponda al dia siguiente
      // para ello no la considerara como 1¦ hora si hay m s de 12 horas de diferencia
      // Si es una Entrada y no se encuentra hora se considerar  la hora del 1 Vuelo

      lrParametros.RESET;
      lrParametros.FINDFIRST;
      lrVVHotel2.COPY(prVVHotel);
      lrVVHotel2.SETCURRENTKEY("N§Fichero",
                               "Codigo Vehiculo Asignado",
                               Hora);
      lrVVHotel2.SETFILTER(Hora,'>%1',lrParametros."Partes d¡a siguiente");
      IF lrVVHotel2.FINDFIRST THEN
        lwPrimeraHora := lrVVHotel2.Hora
      ELSE BEGIN
        lrVVHotel2.SETRANGE(Hora);
        IF lrVVHotel2.FINDFIRST THEN
          lwPrimeraHora := lrVVHotel2.Hora
      END;

      IF lwPrimeraHora = 0T THEN
        lwPrimeraHora := pw1eraHora;

      EXIT(lwPrimeraHora);
    END;

    PROCEDURE Hora1erVuelo_Partes@23(pwCodServicio@1100244000 : Code[10];VAR prVVVuelo@1100244001 : Record 7035328) "1§Hora" : Time;
    VAR
      lw1Hora@1100244002 : Time;
      lrVuelos@1100244003 : Record 7035325;
      lrparam@1100244004 : Record 7010311;
      lrVuelosTemp@1103355000 : TEMPORARY Record 7035325;
    BEGIN
      // Hora1erVuelo_Partes
      // AJF 22/10/08 - Cambio los markedonly por un temporary.
      // Esta funcion actualiza el campo Hora 1er Vuelo de la tabla Partes.
      // Para evitar confundirse si se a¤aden horas de 1hora de la madrugada
      // del dia siguiente, no se considerar  cuando la diferencia con la hora anterior > 12 horas

      // Primero selecciona todas las lineas de Text008 relacionadas

      lrVuelos.RESET;
      lrVuelos.SETCURRENTKEY("N§Archivo",
                             "Referencia Vuelo");
      IF prVVVuelo.FIND THEN
        REPEAT
          lrVuelos.SETRANGE("N§Archivo", prVVVuelo."N§Fichero");
          lrVuelos.SETRANGE("Referencia Vuelo",prVVVuelo."Referencia Vuelo");  // AJS11
          IF lrVuelos.FINDFIRST THEN BEGIN
             lrVuelosTemp := lrVuelos;
             IF NOT lrVuelosTemp.FIND THEN
               lrVuelosTemp.INSERT;
          END;
        UNTIL prVVVuelo.NEXT = 0;

      // Seg£n el CODIGO de servicio se considerar  la hora de llegada o la hora de salida
      lrparam.FINDFIRST;

      lw1Hora :=0T;

      // Si es entrada
      IF lrparam."Codigo Salidas" = pwCodServicio THEN
      BEGIN
        lrVuelosTemp.RESET;
        lrVuelosTemp.SETCURRENTKEY("Hora Salida");
        lrVuelosTemp.ASCENDING := FALSE;
        IF lrVuelosTemp.FINDFIRST THEN
        BEGIN
          REPEAT
            // 43200000 milisegundos = 12 horas
            IF lrVuelosTemp."Hora Salida" <> 0T THEN
            BEGIN
              IF lw1Hora = 0T THEN
                lw1Hora := lrVuelosTemp."Hora Salida"
              ELSE
                IF (lw1Hora - lrVuelosTemp."Hora Salida") < 43200000 THEN
                    lw1Hora := lrVuelosTemp."Hora Salida";
            END;
          UNTIL lrVuelosTemp.NEXT = 0;
        END;
      END;

      // Si es salida
      IF lrparam."Codigo Entradas" = pwCodServicio THEN
      BEGIN
        lrVuelosTemp.RESET;
        lrVuelosTemp.SETCURRENTKEY("Hora Llegada");
        lrVuelosTemp.ASCENDING := FALSE;
        IF lrVuelosTemp.FINDFIRST THEN
        BEGIN
          REPEAT
            // 43200000 milisegundos = 12 horas
            IF lrVuelosTemp."Hora Llegada" <> 0T THEN
            BEGIN
              IF lw1Hora = 0T THEN
                lw1Hora := lrVuelosTemp."Hora Llegada"
              ELSE
                IF (lw1Hora - lrVuelosTemp."Hora Llegada") < 43200000 THEN
                    lw1Hora := lrVuelosTemp."Hora Llegada";
            END;
          UNTIL lrVuelosTemp.NEXT = 0;
        END;
      END;

      EXIT(lw1Hora);
    END;

    PROCEDURE BuscaZonaMasAlejada@24(prParte@1100244000 : Record 7010360) Zona : Code[10];
    VAR
      lrSerPar@1100244002 : Record 7010359;
      lrZona@1100244003 : Record 7010314;
      lrPunto@1100244005 : Record 7010315;
    BEGIN
      // BuscaZonaMasAlejada
      //
      // A partir del parte pasado como parametro devolver  la zona fisisca m s alejada

      lrSerPar.RESET;
      lrSerPar.SETCURRENTKEY("N§ Parte","Punto recogida","Hora recogida");
      lrSerPar.SETRANGE("N§ Parte",prParte."N§ Parte");

      lrZona.RESET;

      IF lrSerPar.FINDSET THEN BEGIN
        REPEAT
          IF lrZona.GET(lrSerPar."Zona fisica") THEN
            lrZona.MARK(TRUE);
        UNTIL lrSerPar.NEXT = 0;
      END;

      lrZona.MARKEDONLY(TRUE);
      lrZona.SETCURRENTKEY(Orden);
      IF lrZona.FINDLAST THEN
        EXIT(lrZona.Codigo)
      ELSE
        EXIT('');
    END;

    PROCEDURE Rellena_VueloXParte@27(VAR prVVVuelo@1100244000 : Record 7035328;VAR prVuelo@1100244001 : Record 7035325;prPlaning@1100244002 : Code[10];VAR prVueloXParte@1100244003 : Record 7035335);
    VAR
      lwHora@1100244004 : Time;
      "lwE/S"@1100244005 : ',Entrada,Salida';
      lwTTOO@1100244006 : Code[10];
    BEGIN
      // Rellena_VueloXParte
      //

      lwHora := 0T;
      lwTTOO := TTOO_Finbus(prVVVuelo."Codigo Touroperador");

      IF NOT prVueloXParte.GET(prVVVuelo."Codigo Vehiculo Asignado" , prVVVuelo."Referencia Vuelo", lwTTOO) THEN BEGIN
        prVueloXParte.INIT;
        prVueloXParte.VALIDATE("N§Parte"      , prVVVuelo."Codigo Vehiculo Asignado");
        prVueloXParte."Referencia Vuelo"     := prVVVuelo."Referencia Vuelo";
        prVueloXParte.VALIDATE("Codigo Touroperador" , lwTTOO);
        prVueloXParte.INSERT;
      END;

      prVueloXParte.VALIDATE("Fecha Traslado"      , prVuelo."Fecha Traslado");
      prVueloXParte.VALIDATE("Fecha Llegada Vuelo" , prVuelo."Fecha Llegada Vuelo");
      prVueloXParte.VALIDATE("Codigo Planing"      , prPlaning);

      IF prVuelo."Hora Llegada"= 0T THEN BEGIN
        lwHora := prVuelo."Hora Salida";
        "lwE/S"  := "lwE/S"::Salida;
        prVueloXParte.VALIDATE(IATA                , prVuelo.Destino);
      END
      ELSE
      IF prVuelo."Hora Salida" = 0T THEN BEGIN
        lwHora := prVuelo."Hora Llegada";
        "lwE/S"  := "lwE/S"::Entrada;
        prVueloXParte.VALIDATE(IATA              , prVuelo.Origen);
      END;

      prVueloXParte.VALIDATE(Hora                  , lwHora);
      prVueloXParte.VALIDATE(Terminal              , prVuelo.Terminal);
      prVueloXParte.VALIDATE("E/S"                 ,"lwE/S");
      prVueloXParte.MODIFY;
    END;

    PROCEDURE BuscaZonaParte@28(VAR prSerPar@1100244000 : Record 7010359;VAR prParte@1100244001 : Record 7010360);
    VAR
      lrSerPar@1100244002 : Record 7010359;
      lrZonFis@1103350000 : Record 7010314;
    BEGIN
      // BuscaZonaParte()
      // Busca e inserta la Zona Parte (Zona Fisica mas alejada) en Parte

      lrSerPar.RESET;
      lrSerPar.COPY(prSerPar);
      lrSerPar.SETCURRENTKEY("N§ Parte",
                             "Orden zona");

      // AJS 23.06.2008
      // Sustituyo un FIND('+') por un FINDLAST

      IF lrSerPar.FINDLAST THEN BEGIN
        prParte."Zona parte" := lrSerPar."Zona fisica";
        prParte.VALIDATE("Zona trabajo", lrZonFis.GetZonaTrabajo(lrSerPar."Zona fisica",
                                                                 lrSerPar.Touroperador,
                                                                 lrSerPar."Tipo Servicio"));
        prParte.MODIFY(TRUE);
      END;
    END;

    PROCEDURE BuscaTTTOOParte@29(VAR prVVVuelo@1100244000 : Record 7035328) CODIGO : Code[10];
    VAR
      lrVVVuelo@1100244001 : Record 7035328;
      lrTTOO@1100244002 : Record 7010312;
      lwCodTTOO@1100244003 : Code[10];
      lrTTOOTemp@1103355000 : TEMPORARY Record 7010312;
    BEGIN
      // BuscaTTTOOParte
      // AJF 21/10/08 - Me cargo el markedonly y pongo un temporary
      // Busca  y devuelve el Touroperador con el n£mero de Orden Peso m s bajo

      CLEAR(lwCodTTOO);
      lrVVVuelo.COPY(prVVVuelo);
      lrTTOO.RESET;

      IF lrVVVuelo.FINDSET THEN BEGIN
        REPEAT
          IF lrTTOO.GET(TTOO_Finbus(lrVVVuelo."Codigo Touroperador")) THEN BEGIN
            lrTTOOTemp := lrTTOO;
            IF NOT lrTTOOTemp.FIND THEN
              lrTTOOTemp.INSERT;
          END;
        UNTIL lrVVVuelo.NEXT = 0;

        lrTTOOTemp.SETCURRENTKEY("Orden Peso");
        IF lrTTOOTemp.FINDFIRST THEN
          lwCodTTOO := lrTTOOTemp.Codigo;
      END;

      EXIT(lwCodTTOO);
    END;

    PROCEDURE contar_maletas@33();
    VAR
      lrParte@1100244000 : Record 7010360;
      lrCli@1100244001 : Record 18;
      lrTTOO@1100244002 : Record 7010312;
      lfTabCli@1100244003 : Form 22;
      lfTabTTOO@1100244004 : Form 7010326;
      lw_cliente_excluido@1100244005 : ARRAY [20] OF Code[20];
      lw_TTOO_excluido@1100244006 : ARRAY [50] OF Code[10];
      lw_ind@1100244007 : Integer;
      lw_fechadesde@1100244008 : Date;
      lw_fechahasta@1100244009 : Date;
      lw_ventana@1100244010 : Dialog;
      lwTextFiltroTipoServicio@1100244011 : Text[60];
      lwTextFiltroCliente@1100244015 : Text[250];
      lwExcluido@1100244012 : Boolean;
      lwMaletas@1100244013 : Decimal;
      lw_parte@1100244014 : Decimal;
    BEGIN
      // contar_maletas
      //
      lrParte.RESET;
      lrParte.SETCURRENTKEY(Confirmado,
                            Fecha);
      lrParte.SETRANGE(Confirmado, TRUE);
      lrParte.SETRANGE(Facturable, TRUE);

      // ----  Seleccionar los clientes que no se desean utilizar  ----

      lrCli.RESET;
      CLEAR(lfTabCli);
      lfTabCli.SETTABLEVIEW(lrCli);
      lfTabCli.LOOKUPMODE(TRUE);
      lfTabCli.RUNMODAL;
      lwTextFiltroCliente := lfTabCli.GetSelectionFilter;

      lrCli.SETFILTER("No.", lwTextFiltroCliente);
      IF lrCli.FINDSET THEN BEGIN
        lw_ind := 0;
        REPEAT
          lw_ind += 1;
          lw_cliente_excluido[lw_ind] := lrCli."No.";
        UNTIL lrCli.NEXT = 0;
      END;

      // ----  Seleccionar los touroperadores que no se desean utilizar  ----

      lrTTOO.RESET;
      CLEAR(lfTabTTOO);
      lfTabTTOO.SETTABLEVIEW(lrTTOO);
      lfTabTTOO.LOOKUPMODE(TRUE);
      lfTabTTOO.RUNMODAL;
      lfTabTTOO.retorna_registro(lrTTOO);

      lrTTOO.MARKEDONLY(TRUE);
      IF lrTTOO.FINDSET THEN BEGIN
        lw_ind := 0;
        REPEAT
          lw_ind += 1;
          lw_TTOO_excluido[lw_ind] := lrTTOO.Codigo;
        UNTIL lrTTOO.NEXT = 0;
      END;

      // ----  Seleccionar el periodo de fechas que se quiere  ----

      lw_ventana.OPEN(Text00001 +
                      '\' +
                      Text00002 +
                      Text00003 +
                      '\' +
                      '#4#######\' +
                      '\' +
                      Text00005);

      lw_ventana.INPUT(1, lw_fechadesde);
      lw_ventana.INPUT(2, lw_fechahasta);

      IF lw_fechadesde = 0D THEN BEGIN
        lw_ventana.CLOSE;
        EXIT;
      END;

      IF lw_fechahasta = 0D THEN BEGIN
        lw_ventana.CLOSE;
        EXIT;
      END;

      IF lw_fechadesde > lw_fechahasta THEN
        ERROR(Text00004);

      lwTextFiltroTipoServicio := filtro_tiposervicio_transfer;

      lrParte.SETRANGE (Fecha          , lw_fechadesde, lw_fechahasta);
      lrParte.SETFILTER("Tipo Servicio", lwTextFiltroTipoServicio);

      // ----  Vamos a filtrar por el primer codigo de cliente excluido, porque no se puede filtrar por todos porque el  ----
      // ----  el filtro de texto no funciona en los distintos                                                           ----

      lrParte.SETFILTER(Cliente, '<>%1', lw_cliente_excluido[1]);

      IF lrParte.FINDSET THEN BEGIN
        lw_parte := 0;
        REPEAT
          lw_parte += 1;
          lw_ventana.UPDATE(4, lw_parte);

          lwExcluido := FALSE;

          // ----  Primero comprobamos que no este entre los clientes excluidos  ----

          lw_ind := 2;
          WHILE (lw_cliente_excluido[lw_ind] <> '') AND (NOT lwExcluido) DO BEGIN
            IF lrParte.Cliente = lw_cliente_excluido[lw_ind] THEN
              lwExcluido := TRUE;
            lw_ind += 1;
          END;

          // ----  Comprobar si no esta entre los touroperadores excluidos  ----

          lw_ind := 1;
          WHILE (lw_TTOO_excluido[lw_ind] <> '') AND (NOT lwExcluido) DO BEGIN
            IF STRPOS(lrParte.Touroperadores, lw_TTOO_excluido[lw_ind]) <> 0 THEN
              lwExcluido := TRUE;

            lw_ind += 1;
          END;

          IF NOT lwExcluido THEN BEGIN
            lrParte.CALCFIELDS("Adultos transportados", "Ni¤os transportados");
            lwMaletas := lwMaletas + lrParte."Adultos transportados" + lrParte."Ni¤os transportados";
          END;
        UNTIL lrParte.NEXT = 0;
      END;

      IF lwMaletas <> 0 THEN
        lw_ventana.INPUT(3, lwMaletas);
      lw_ventana.CLOSE;
    END;

    PROCEDURE filtro_tiposervicio_transfer@38() : Text[60];
    VAR
      lrTipoSer@1100244000 : Record 7010319;
      lwTipoSer@1100244001 : Text[60];
    BEGIN
      // filtro_tiposervicio_transfer
      //
      lrTipoSer.RESET;
      lrTipoSer.SETRANGE("Tipo fijo", lrTipoSer."Tipo fijo"::Traslado);
      IF lrTipoSer.FINDSET THEN BEGIN
        REPEAT
          IF lwTipoSer = '' THEN
            lwTipoSer := DELCHR(lrTipoSer.Codigo, '<>')
          ELSE
            lwTipoSer := lwTipoSer + '|' + DELCHR(lrTipoSer.Codigo, '<>');
        UNTIL lrTipoSer.NEXT = 0;
      END;

      EXIT(lwTipoSer);
    END;

    PROCEDURE TxtComparaPax@35(VAR prHistorico@1100244000 : Record 7035333);
    VAR
      lrVehiculoHotel@1100244001 : Record 7035327;
      lrVehiculoAsig@1100244002 : Record 7035324;
      lrPartes@1100244003 : Record 7010360;
      lwCad3@1100244004 : Text[30];
      lwCad2@1100244005 : Text[30];
      lwCad1@1100244006 : Text[30];
      lwNumPax@1100244007 : Integer;
      lwPrimero@1100244008 : Boolean;
      lwCont@1100244009 : Integer;
    BEGIN
      // TxtComparaPax  --> Compara los pax de partes y vehiculo asignado -> vehiculo va a hotel,
      //                    y si es necesario genera un archivo de txt con las diferencias

      lwPrimero := TRUE;
      lrVehiculoAsig.RESET;
      lrVehiculoAsig.SETRANGE(lrVehiculoAsig."N§ Fichero",prHistorico."No Importacion");
      IF lrVehiculoAsig.FINDSET THEN BEGIN
         REPEAT
           lwNumPax := 0;
           lrVehiculoHotel.RESET;
           lrVehiculoHotel.SETCURRENTKEY("N§Fichero",
                                         "Codigo Vehiculo Asignado");
           lrVehiculoHotel.SETRANGE("N§Fichero"               , prHistorico."No Importacion");
           lrVehiculoHotel.SETRANGE("Codigo Vehiculo Asignado", lrVehiculoAsig."Codigo de Vehiculo");
           IF lrVehiculoHotel.FIND('-') THEN BEGIN
              REPEAT
                   lwNumPax += lrVehiculoHotel.Pax;
              UNTIL lrVehiculoHotel.NEXT = 0;
           END;
           lrPartes.RESET;
           lrPartes.SETRANGE(lrPartes."N§ Parte",lrVehiculoAsig."Codigo de Vehiculo");
           IF lrPartes.FINDFIRST THEN BEGIN
               lrPartes.CALCFIELDS(lrPartes."Adultos transportados");
               IF lrPartes."Adultos transportados" <> lwNumPax THEN BEGIN      //INTRO LINEA EN EL TXT
                  IF lwPrimero THEN BEGIN
                     lwPrimero := FALSE;
                     CrearCabeceraTXT(prHistorico);
                  END;
                  lwCad1 :=FORMAT(lrVehiculoAsig."Codigo de Vehiculo");
                  FOR lwCont := STRLEN(lrVehiculoAsig."Codigo de Vehiculo") TO 13 DO BEGIN
                      lwCad1 := lwCad1 + ' ';
                  END;
                  lwCad2 := FORMAT(lrPartes."Adultos transportados");
                  FOR lwCont := STRLEN(lwCad2) TO 13 DO BEGIN
                      lwCad2 := ' ' +  lwCad2;
                  END;
                  lwCad3 := FORMAT(lwNumPax);
                  FOR lwCont :=STRLEN(lwCad3)TO 18 DO BEGIN
                      lwCad3 := ' ' +lwCad3;
                  END;

                  wFile.WRITE(lwCad1 + lwCad2  +lwCad3);
               END;
           END
           ELSE BEGIN      //INTRO LINEA EN EL TXT CON PAX PARTE A CERO
                IF lwPrimero THEN BEGIN
                   lwPrimero := FALSE;
                   CrearCabeceraTXT(prHistorico);
                END;
                lwCad1:=FORMAT(lrVehiculoAsig."Codigo de Vehiculo");
                FOR lwCont := STRLEN(lrVehiculoAsig."Codigo de Vehiculo") TO 13 DO BEGIN
                    lwCad1 := lwCad1 + ' ';
                END;

                lwCad2 := '-';
                FOR lwCont := 0 TO 12 DO BEGIN
                    lwCad2 := ' ' + lwCad2;;
                END;


                lwCad3 := FORMAT(lwNumPax);
                FOR lwCont :=STRLEN(lwCad3)TO 18 DO BEGIN
                    lwCad3 := ' ' +lwCad3;
                END;
                wFile.WRITE(lwCad1 + lwCad2 + lwCad3);
           END;
           lwCad1 := '';
           lwCad2 := '';
           lwCad3 := '';
         UNTIL lrVehiculoAsig.NEXT = 0;
      END;

      IF NOT lwPrimero THEN BEGIN
         wFile.CLOSE;
      END;
    END;

    PROCEDURE CrearCabeceraTXT@37(VAR prHistorico@1100244000 : Record 7035333);
    VAR
      lrParametrosU@1100244001 : Record 7035332;
      lwRuta@1100244002 : Text[250];
      lwCadena@1100244003 : Text[250];
      lwCont@1100244004 : Integer;
    BEGIN
      // CrearCabeceraTXT
      //
      lrParametrosU.RESET;
      IF lrParametrosU.FINDFIRST THEN BEGIN
         IF lrParametrosU."Directorio Archivos Importados" <> '' THEN BEGIN
            lwRuta := lrParametrosU."Directorio Archivos Importados"+Text032 + FORMAT(prHistorico."No Importacion") + Text033;
         END
         ELSE BEGIN
             ERROR(err2,Text012);
         END;
      END;
      wFile.TEXTMODE := TRUE;
      wFile.WRITEMODE := TRUE;
      wFile.CREATE(lwRuta);
      lwCadena:=  Text034 + FORMAT(prHistorico."No Importacion");
      wFile.WRITE(lwCadena);
      lwCadena:=  Text035 + FORMAT(prHistorico.Fecha);
      wFile.WRITE(lwCadena);

      lwCadena:=  Text036 + FORMAT(prHistorico.Hora);
      wFile.WRITE(lwCadena);

      lwCadena:=  Text037 + FORMAT(prHistorico.Usuario);
      wFile.WRITE(lwCadena);
      lwCadena := Text038;
      FOR lwCont := 0 TO 7 DO BEGIN
         lwCadena := lwCadena + ' ';
      END;
      lwCadena := lwCadena + Text039;
      FOR lwCont := 0 TO 4 DO BEGIN
         lwCadena := lwCadena + ' ';
      END;
      lwCadena := lwCadena + Text040;
      wFile.WRITE(lwCadena);
    END;

    PROCEDURE BuscaProveedor@1103350000(VAR prParte@1103350001 : Record 7010360) : Boolean;
    VAR
      lrConf@1103350000 : Record 7010371;
      lwPax@1103350002 : Decimal;
      lwOk@1103350003 : Boolean;
    BEGIN
      // BuscaProveedor
      // JPT 23/08/04
      // Si el parte cumple unas determinadas caracteristicas estipuladas en una tabla de configuraci¢n
      // se le asigna automaticamente un conductor y vehiculo (asociado a este un proveedor)
      // Devuelve true si se ha encontrado una configuraci¢n

      IF NOT prParte.FIND THEN
        EXIT;

      CLEAR(lrConf);
      lrConf.SETCURRENTKEY("Tipo Busqueda",Cliente,TTOO,"Zona Trabajo",Garaje,"Rango Desde","Rango Hasta");
      lrConf.SETRANGE("Tipo Busqueda",lrConf."Tipo Busqueda"::Proveedor);
      lrConf.SETFILTER(Cliente        ,'=%1', prParte.Cliente);
      lrConf.SETFILTER(TTOO           ,'=%1', prParte."Touroperador principal");
      lrConf.SETFILTER("Zona Trabajo" ,'=%1', prParte."Zona trabajo");
      lrConf.SETFILTER(Garaje         ,'=%1', prParte.Garaje);

      prParte.CALCFIELDS("Adultos transportados","Ni¤os transportados");
      lwPax := prParte."Adultos transportados" + prParte."Ni¤os transportados";
      lrConf.SETFILTER("Rango Desde",'<=%1', lwPax);
      lrConf.SETFILTER("Rango Hasta",'>=%1', lwPax);
      IF NOT lrConf.FINDFIRST THEN BEGIN
        lrConf.SETFILTER("Rango Desde",'<=%1|=%2', lwPax, 0);
        lrConf.SETFILTER("Rango Hasta",'>=%1|=%2', lwPax, 0);
      END;

      lwOk := lrConf.FINDFIRST;

      // JPT-08/11/04 Solo insertaremos el proveedor cuando en observaciones se encuentre la palabra "CARTA" (UEX)
      IF rPar."Empresa Real" IN [rPar."Empresa Real"::UEX] THEN
        lwOk := lwOk AND (STRPOS(UPPERCASE(prParte.Observaciones),Text027) <>0);

      IF lwOk THEN BEGIN
        prParte."Asignacion rapida":= TRUE;
        prParte.SetBol(1,TRUE); // Eso elimina el control diario
        prParte.VALIDATE(Vehiculo         , lrConf.GetMatricula);
        prParte.VALIDATE("Cod Conductor"  , lrConf.Conductor);
        prParte."Asignacion rapida":= FALSE;
        prParte.MODIFY;
      END;

      EXIT(lwOk);
    END;

    PROCEDURE TipoServicioUexFinbus@1103350001(VAR pCodigoUEx@1103350000 : Code[1];VAR pwTipoServicoUex@1103350001 : ' ,Trayecto,Combinado,Sin Previsi¢n');
    BEGIN
      // TipoServicioUexFinbus

      // Dado el codigo de Tipo se Servicio importado devuelve el correspondient code paraText028 en Parte

      CASE pCodigoUEx OF
        Text025 : pwTipoServicoUex := pwTipoServicoUex::Trayecto;
        Text029 : pwTipoServicoUex := pwTipoServicoUex::Combinado;
        Text021 : pwTipoServicoUex := pwTipoServicoUex::"Sin Previsi¢n"
        ELSE  pwTipoServicoUex := 1;
      END;
    END;

    PROCEDURE TransfiereVehiculo@1103355000(VAR prVehiculo@1100244000 : Record 7035324);
    VAR
      lrParte@1100244001 : Record 7010360;
      lrParametrosUEX@1100244002 : Record 7035332;
      lrVVVuelo@1100244003 : Record 7035328;
      lrVVHotel@1100244004 : Record 7035327;
      lrCodigoServicio@1100244005 : Record 7010320;
      lrVuelo@1100244007 : Record 7035325;
      err1@1100244008 : TextConst 'ESP=No se encuentran Parametros';
      lrSerPar@1100244009 : Record 7010359;
      lrVueloxParte@1100244018 : Record 7035335;
      lrTTOOxParte@1100244019 : Record 7010365;
      lrPuntoRec@1000000002 : Record 7010315;
      lwNoLinea@1100244010 : Integer;
      lwValor@1100244011 : Integer;
      lwTotal@1100244012 : Integer;
      lwContador1@1100244013 : Integer;
      lwVuelos@1100244014 : Text[250];
      lwCodTTOO@1100244015 : Code[10];
      ltrAyuda@1100244016 : TEMPORARY Record 7035330;
      lwPuntoRec@1100244017 : Code[10];
      lwTipoServUEX@1103350000 : ' ,Trayecto,Combinado,Sin Previsi¢n';
      lrParteTMP@1103355000 : TEMPORARY Record 7010360;
      lrSerParTMP@1103355001 : TEMPORARY Record 7010359;
      lwAdultos@1103355002 : Integer;
      lwNi¤os@1000000000 : Integer;
      lwPrimeraLinea@1000000001 : Boolean;
    BEGIN
      // TransfiereVehiculo
      // Trasfiere la infomaci¢n de un Vehiculo Asignado (Parte) a las tablas Finbus

      // ----  Crear el registro de parte   ----

      wVentana1.UPDATE(2, prVehiculo."Codigo de Vehiculo");

      lwContador1 :=0;

      IF NOT lrParametrosUEX.FINDFIRST THEN
        ERROR(err1);
      lrParametrosUEX.TESTFIELD("TTOO Importaci¢n");
      lrParametrosUEX.TESTFIELD("Cliente Importaci¢n");
      lrParametrosUEX.TESTFIELD("Garaje Importaci¢n");
      lrParametrosUEX.TESTFIELD("Touroperador Thomson");

      lrVVVuelo.RESET;
      lrVVVuelo.SETCURRENTKEY ("N§Fichero",
                               "Codigo Vehiculo Asignado");
      lrVVHotel.RESET;
      lrVVHotel.SETCURRENTKEY ("N§Fichero",
                               "Codigo Vehiculo Asignado");

      lrVVVuelo.SETRANGE("N§Fichero" , prVehiculo."N§ Fichero");
      lrVVVuelo.SETRANGE("Codigo Vehiculo Asignado" , prVehiculo."Codigo de Vehiculo");
      lrVVHotel.SETRANGE("N§Fichero" , prVehiculo."N§ Fichero");
      lrVVHotel.SETRANGE("Codigo Vehiculo Asignado" , prVehiculo."Codigo de Vehiculo");

      IF lrVVHotel.FINDFIRST THEN
        lwTotal := lrVVHotel.COUNT + 1;
      IF lrVVVuelo.FINDFIRST THEN;

      // Busca el Codigo de Servicio y el Tipo de Servicio

      IF NOT rPar.FINDFIRST THEN
        ERROR(err1);
      lrVuelo.RESET; lrVuelo.INIT;
      lrVuelo.SETCURRENTKEY("N§Archivo",
                            "Referencia Vuelo");

      lrVuelo.SETRANGE ("N§Archivo"       , prVehiculo."N§ Fichero");

      lrVuelo.SETRANGE ("Referencia Vuelo",lrVVVuelo."Referencia Vuelo");
      IF NOT lrVuelo.FINDFIRST THEN
        lrVuelo.INIT;

      IF lrVuelo.FINDFIRST THEN BEGIN
        IF lrVuelo."Hora Llegada" <> 0T THEN
          lrCodigoServicio.GET(rPar."Codigo Entradas")
        ELSE
        IF lrVuelo."Hora Salida" <> 0T THEN
          lrCodigoServicio.GET(rPar."Codigo Salidas");
      END;

      // Actualiza el temporal de vuelos
      lwVuelos := Actualiza_Temp_Vuelos(lrVVVuelo,lrVVHotel."Codigo Planing");

      // JPT 15/11/04 El campo vuelos en el parte es de 150
      lwVuelos := COPYSTR(lwVuelos,1 ,MAXSTRLEN(lrParte.Vuelos));

      // Primero copia los Partes de ayuda de ese Parte a una Variable Temporal "ltrAyuda"

      // Entra la Informaci¢n en los partes

      // ** A TEMP

      lrParteTMP."N§ Parte"                  := prVehiculo."Codigo de Vehiculo";
      lrParteTMP.Garaje                      := lrParametrosUEX."Garaje Importaci¢n";
      lrParteTMP."Fecha facturacion"         := lrVVVuelo."Fecha Traslado";
      lrParteTMP.Fecha                       := lrVVVuelo."Fecha Traslado";
      lrParteTMP.Cliente                     := lrParametrosUEX."Cliente Importaci¢n";
      lrParteTMP."Codigo Servicio"           := lrCodigoServicio.Codigo;
      lrParteTMP."Tipo Servicio"             := lrCodigoServicio."Tipo servicio";
      lrParteTMP.Guia                        := prVehiculo."Nombre Guia";
      lrParteTMP.Observaciones               := prVehiculo.Observaciones;
      lrParteTMP."Origen/Destino"            := BaseDelTraslado_Finbus (lrVuelo."Base Traslado");
      lrParteTMP."Tipo Vehiculo facturacion" := CodigoVehiculo_Finbus(prVehiculo."Tipo de Vehiculo");
      lrParteTMP.Touroperadores              := Actualiza_TTOO(lrVVVuelo);
      //-$007lrParteTMP.Agrupacion                  := lrVVHotel."Codigo Planing";
      lrParteTMP."Hora 1er Vuelo"            := Hora1erVuelo_Partes (lrParteTMP."Codigo Servicio", lrVVVuelo);
      lrParteTMP."Hora inicio"               := BuscarPrimeraHora(lrVVHotel,lrParteTMP."Hora 1er Vuelo");

      // Para Ibizatours los partes entre las 12 de la noche y las 3 son considerados en el dia anterior a la fecha que
      // traen en el fichero
      IF rPar."Empresa Real" IN [rPar."Empresa Real"::IBZ, rPar."Empresa Real"::SJO] THEN BEGIN
        IF (lrParteTMP."Hora inicio" >= 000000T) AND (lrParteTMP."Hora inicio" <= 030000T) THEN BEGIN
          lrParteTMP.Fecha := CALCDATE(Text50000, lrParteTMP.Fecha);
          lrParteTMP."Dia siguiente" := TRUE;
        END;
      END;

      //-$002lrParte.Bono := prVehiculo."Prefijo Bono" + prVehiculo."Numero de Bono";
      //+$002 <
      lrParte.Bono := COPYSTR(prVehiculo."Numero de Bono", 1, 10);
      lrParte.Referencia := prVehiculo."Numero de Bono";
      //+$002 >
      lrParteTMP.Vuelos := lwVuelos;

      CLEAR (lrParteTMP."Adultos trans. soporte");
      CLEAR (lrParteTMP."Ni¤os trans. soporte");

      // (UEX) Los servicios de tipo sin prevision hay que marcarlos como no facturables y gratuitos
      IF rPar."Empresa Real"= rPar."Empresa Real"::UEX THEN BEGIN
        TipoServicioUexFinbus(prVehiculo."Tipo de Servicios", lwTipoServUEX);
        IF lwTipoServUEX = lwTipoServUEX::"Sin Previsi¢n" THEN BEGIN
          lrParteTMP.Facturable := FALSE;
          lrParteTMP.Gratuito   := TRUE;
        END;
      END;

      lrParteTMP.Usuario := USERID;
      lrParteTMP."Origen creacion"  := lrParteTMP."Origen creacion"::Importacion;

      lrParte.Letreros           := prVehiculo.Letreros;
      lrParte.Guia               := prVehiculo."Nombre Guia";
      IF prVehiculo."Hora Guia" <> 0T THEN
        lrParte."Hora inicio" := prVehiculo."Hora Guia";
      lrParte.Presentacion := prVehiculo."Recogida Guia";

      lwContador1 +=1;
      IF lwTotal > 0 THEN
        lwValor :=ROUND((lwContador1/ lwTotal  ) * 10000,1) ;
      wVentana1.UPDATE(1, lwValor);

      // Busca el numero de servicio que le corresponde, en funci¢n del codigo de planning
      BuscaServicio (lrParteTMP , lrVVHotel."Codigo Planing");

      // Busca el TTOO de m s peso de entre todos los del parte y lo asigna a todas las lineas de ese parte
      lwCodTTOO := BuscaTTTOOParte (lrVVVuelo);
      lrParteTMP."Touroperador principal" := lwCodTTOO;
      IF rServicio.Touroperador = '' THEN
      BEGIN
        rServicio.VALIDATE(Touroperador, lwCodTTOO);
        rServicio.MODIFY;
      END;

      // Tambien busca el numero de la primera linea Servicios Partes
      lrSerPar.RESET;
      lrSerPar.SETRANGE("N§ Servicio" , rServicio."N§ Servicio");
      IF lrSerPar.FINDLAST THEN
        lwNoLinea := lrSerPar."N§ Linea"
      ELSE
        lwNoLinea := 0;

      // Copias las Ayudas en un temporal ya que van a borrarse
      CLEAR(ltrAyuda);

      // Rellena las l¡neas de Servicios-Parte. Antes borra todas las del mismo parte
      lrSerPar.RESET;
      lrSerPar.SETCURRENTKEY("N§ Parte",
                             "Linea Manual");
      lrSerPar.SETRANGE ("N§ Parte" , lrParteTMP."N§ Parte");
      lrSerPar.SETRANGE("Linea Manual"   , FALSE);
      // JPT 24/08/05 Es necesario la doble comprobacion
      IF lrSerPar.FINDFIRST THEN
        lrSerPar.MODIFYALL(lrSerPar."Permite Borrar",TRUE);
      IF lrSerPar.FINDFIRST THEN
        lrSerPar.DELETEALL(TRUE);


      lrSerPar.SETRANGE("Linea Manual");

      // AML 28.08.02 pongo la condicion de "touroperador thomson" a false.
      wThomson := FALSE;

      // JPT 28/06/04 Ordeno para que se salga por orden de hora de entrada a INVISA
      lrVVHotel.SETCURRENTKEY("N§Fichero","Codigo Vehiculo Asignado",Hora,"Numero de Orden");

      lwAdultos := 0;
      lwNi¤os   := 0;
      lwPrimeraLinea := TRUE; //+$008

      IF lrVVHotel.FINDSET THEN
      BEGIN
        REPEAT
          lwPuntoRec := Hotel_FinBus(lrVVHotel."Codigo Hotel");
          // Comprueba que este parte no existe una linea bloqueada con este Punto de Recogida
          IF NOT EstaBloqueado(lwPuntoRec,lrSerPar) THEN
          BEGIN
            lwNoLinea += 1000;

            lrSerParTMP.INIT;
            lrSerParTMP."N§ Linea" := lwNoLinea;
            lrSerParTMP."N§ Servicio" := rServicio."N§ Servicio";
            lrSerParTMP."Punto recogida" := lwPuntoRec;
            IF NOT lrPuntoRec.GET(lwPuntoRec) THEN
              CLEAR(lrPuntoRec);
            lrSerParTMP."Descripcion Punto Recogida" := lrPuntoRec.Descripci¢n;
            lrSerParTMP.Touroperador := TTOO_Finbus(lrVVHotel."Codigo de Ciente");

            // marcamos el touroperador Thomson para modificar algunos campos luego.
            IF lrSerParTMP.Touroperador = lrParametrosUEX."Touroperador Thomson" THEN
              wThomson := TRUE;

            lrSerParTMP."N§ Parte" := lrParteTMP."N§ Parte";

            lrSerParTMP."Permite Borrar" := TRUE; // JPT 24/06/04 Esto es para evitar que pregunte Control de Paxes a Invisa

            //-$001lrSerPar.VALIDATE ("Adultos transportados", lrVVHotelTMP.Pax);
            lrSerParTMP.VALIDATE("Adultos transportados", lrVVHotel.Adultos); //+$001
            lrSerParTMP.VALIDATE("Ni¤os transportados"  , lrVVHotel.Ni¤os); //+$001
            lrSerParTMP."Permite Borrar" := FALSE;

            // ----  AJS 14.12.2001  ----
            // ----  Modificado para mantener el campo de "Adultos trans. soporte del parte ya    ----
            // ----  que el codigo automatico no funciona porque el get de parte no encuentra el  ----
            // ----  parte porque no se ha hecho el commit, esta bien asi                         ----

            lwAdultos := lwAdultos + lrVVHotel.Adultos;
            lwNi¤os := lwNi¤os + lrVVHotel.Ni¤os;

            // ----  FIN AJS 14.12.2001  ----

            lrSerParTMP."Hora recogida"       := lrVVHotel.Hora;
            lrSerParTMP."Nombre Cliente"      := lrVVHotel."Nombre general"; //+$001
            lrSerParTMP.Observaciones         := lrVVHotel.Observaciones; //+$003
            lrSerParTMP."Orden Hotel en zona" := lrVVHotel."Numero de Orden";
            //lrSerPar.mantener_touroperador_parte(lrParte);
            lrSerParTMP.INSERT;

            // AJF 17/07/09
            // Para la primera l¡nea si es una salida copiamos la descripci¢n del punto de recogida a la
            // presentaci¢n del parte.
            IF (lwPrimeraLinea) AND (rPar."Codigo Salidas" = lrParteTMP."Codigo Servicio") THEN
            BEGIN
              lwPrimeraLinea := FALSE; //+$008
              lrParteTMP.VALIDATE(Presentacion, lrSerParTMP."Descripcion Punto Recogida");
            END;
            lwContador1 += 1;
            lwValor :=ROUND((lwContador1 / lwTotal  ) * 10000,1);
            wVentana1.UPDATE(1, lwValor);

          END;
        UNTIL lrVVHotel.NEXT = 0;

        lrParteTMP."Adultos trans. soporte" := lwAdultos;
        lrParteTMP."Ni¤os trans. soporte" := lwNi¤os;

        // Se modifican las observaciones para el touroperador Thomson
        IF ( wThomson = TRUE ) AND (lrParteTMP."Adultos trans. soporte" >= 1) AND
           (lrParteTMP."Adultos trans. soporte" <= 99) AND (prVehiculo."Tipo de Traslado" = Text025) THEN BEGIN

          lrParteTMP.Observaciones := Text027 + COPYSTR(lrParte.Observaciones, 1, 244);

          lrParteTMP."No Exportar" := TRUE;
        END;

        lrParteTMP.INSERT;

        cGestionPartes.CrearParte(lrParteTMP, lrSerParTMP, cGestionPartes.TipoParteImportacionUEX, lrParte);

        // JPT 04/02/05 Esta funci¢n asegura que los registros de Zona Fisica x Parte esta debidamente rellenado
        // No se rellena por el medio normal ya que Punto de Recogida se valida antes de que este asignado el No Parte ne las lineas
        lrParte.RellenaZonasFiscasParte;

        // AJF 29/10/08 recupero una linea del parte para poder calcular ttoo x parte
        IF lrSerPar.FINDSET THEN
        BEGIN
          REPEAT
            lrSerPar.mantener_touroperador_parte(lrParte);
          UNTIL lrSerPar.NEXT = 0;
        END;

        lrParte.MantenTipoIngreso;
        lrParte.MODIFY;

        // Busca y situa la Zona Parte (Zona fisica m s alejada) en el Parte
        BuscaZonaParte(lrSerPar,lrParte);

        BuscaProveedor(lrParte); // Se le asigna proveedor

        IF rPar."Empresa Real" IN [rPar."Empresa Real"::IBZ, rPar."Empresa Real"::SJO] THEN BEGIN
          // JPT-28/06/04 Actualizamos el campo Vuelos de la primera linea con la concatenaci¢n de todos los vuelos
          // Solo para Ibiza Tours
          lrSerPar.RESET;

          lrSerPar.SETCURRENTKEY("N§ Parte", "N§ Linea");
          lrSerPar.SETRANGE("N§ Parte", lrParte."N§ Parte");
          IF lrSerPar.FINDFIRST THEN
          BEGIN
            lrSerPar.VALIDATE(Vuelo, lwVuelos);

            lrVueloxParte.RESET;
            lrVueloxParte.SETCURRENTKEY("N§Parte",Hora);
            lrVueloxParte.SETRANGE("N§Parte",lrParte."N§ Parte");
            IF lrVueloxParte.FINDFIRST THEN
            BEGIN
              lrSerPar."Hora Vuelo":= lrVueloxParte.Hora;
              lrSerPar.IATA        := lrVueloxParte.IATA;
            END;
            lrSerPar.MODIFY;
          END;
        END;

        cFunParAd.GarajeAutomatico(lrParte);
        lrParte.MODIFY(TRUE);
      END
      ELSE BEGIN     //Si el parte no tiene lineas se borra
        lrParte.SetBol(3, TRUE); // Eso es para evitar el backup
        lrParte.DELETE(TRUE);
      END;

      prVehiculo.VALIDATE(Estado, prVehiculo.Estado::Incorporado);
      prVehiculo.Usuario := USERID;
      prVehiculo.MODIFY;
    END;

    PROCEDURE ReordenaVVHotel@1103355011(VAR prVVHotel@1103355000 : Record 7035327;VAR prVVHotelTMP@1103355001 : TEMPORARY Record 7035327);
    VAR
      lwNumLinea@1103355002 : Integer;
      lwPaso@1103355003 : Integer;
      lwHoraAnt@1103355004 : Time;
    BEGIN
      // ReordenaVVHotel
      // Reordenamos las l¡neas de recogida para que en el caso de un servicio entre dias el orden sea erroneo.

      // Vaciamos el Temporary.
      prVVHotelTMP.RESET;
      prVVHotelTMP.DELETEALL;

      lwNumLinea := 0;
      lwPaso     := 1000;

      IF prVVHotel.FIND('-') THEN BEGIN

        REPEAT

          // Si la diferencia entre horas es muy grande (12 horas) supondremos que es del dia anterior.
          IF (lwPaso <> 1) AND (prVVHotel.Hora <> 0T) THEN BEGIN

            IF lwHoraAnt = 0T THEN
              lwHoraAnt  := prVVHotel.Hora;

            IF ABS(lwHoraAnt - prVVHotel.Hora) > 43200000 THEN BEGIN
              lwNumLinea := 0;
              lwPaso     := 1;
              lwHoraAnt  := prVVHotel.Hora;
            END;

          END;

          lwNumLinea += lwPaso;

          prVVHotelTMP.INIT;
          prVVHotelTMP := prVVHotel;
          prVVHotelTMP."N§Linea" := lwNumLinea;
          prVVHotelTMP.INSERT;

        UNTIL prVVHotel.NEXT = 0;
      END;
    END;

    PROCEDURE ImportarServiciosAtlas@1100217000();
    VAR
      lrParam@1100217002 : Record 7035332;
      lrHistorico@1100217001 : Record 7035333;
      lrArchivo@1100217003 : Record 2000000022;
      lwNoImportacion@1100217000 : Integer;
    BEGIN
      // ImportarServiciosAtlas

      //. Abrimos un formulario para que el usuario pueda seleccionar el fichero
      lrParam.FIND('-');
      IF NOT _SeleccionaFichero(lrArchivo, lrParam."Directorio Archivos")THEN
        EXIT;

      //. Si el usuario ha seleccionado mas de un archivo los procesamos todos
      //. la seleccion se hace mediante un SETSELECTIONFILTER del formulario
      IF lrArchivo.FIND('-') THEN
      BEGIN
        REPEAT
          _ProcesarFicheroAtlas(lrArchivo.Path, lrArchivo.Name);

          lrHistorico.RESET;
          lrHistorico.SETRANGE(Tipo,lrHistorico.Tipo::Reserva);
          IF lrHistorico.FIND('+') THEN BEGIN
            lrHistorico.Definitivo := wDefinitivo;
            lrHistorico.MODIFY;
          END;

        UNTIL lrArchivo.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _ProcesarFicheroAtlas@1100217002(pwRuta@1100217002 : Text[250];pwNomFichero@1100217000 : Text[250]);
    VAR
      lrHistorico@1100217004 : Record 7035333;
      lrExcelTMP@1100217001 : ARRAY [2] OF TEMPORARY Record 370;
      lwNomHoja@1100217029 : Text[31];
      lwParte@1100217003 : Code[10];
      lwParteAnterior@1100217031 : Code[10];
      lwBono@1100217005 : Code[30];
      lwTouroperador@1100217006 : Text[30];
      lwFechaTraslado@1100217007 : Date;
      lwTipoTraslado@1100217008 : Text[30];
      lwOrigenTraslado@1100217032 : Code[10];
      lwDestinoTraslado@1100217033 : Code[10];
      lwNomCliente@1100217009 : Text[80];
      lwHotel@1100217010 : Code[10];
      lwAdultos@1100217011 : Integer;
      lwChilds@1100217012 : Integer;
      lwBebes@1100217013 : Integer;
      lwVuelo@1100217014 : Code[10];
      lwHoraTexto@1100217015 : Text[30];
      lwHora@1100217016 : Time;
      lwOrigen@1100217017 : Code[10];
      lwDestino@1100217018 : Code[10];
      lwTipoVehiculo@1100217019 : Code[10];
      lwRecogidaTexto@1100217020 : Text[30];
      lwRecogida@1100217021 : Time;
      lwLetreros@1100217022 : Text[30];
      lwObservaciones@1100217023 : Text[250];
      lwNumOrden@1100217024 : Integer;
      lwGuia@1100217025 : Code[10];
      lwHoraGuiaTexto@1100217026 : Text[30];
      lwHoraGuia@1100217027 : Time;
      lwRecogidaGuia@1100217028 : Text[250];
      lwDecimal@1100217030 : Decimal;
      lwBaseTraslado@1100217034 : Code[10];
    BEGIN
      //. @pwNomFichero, Nombre completo del fichero que vamos a procesar

      //. Insertamos en le historico de importaciones
      lrHistorico.INIT;
      lrHistorico.Tipo := lrHistorico.Tipo::Reserva;
      lrHistorico.INSERT(TRUE);

      //. Vaciamos el temporal de excel
      lrExcelTMP[1].RESET;
      lrExcelTMP[1].DELETEALL;

      //. Abrimos el fichero y lo leemos para volcar la informacion en el buffer
      //. En los ejemplos recibidos la hoja con los datos tiene el mismo nombre que el fichero

      //-$006lwNomHoja := COPYSTR(pwNomFichero, 1, STRLEN(pwNomFichero) - 5);
      //+$006 <
      IF STRLEN(pwNomFichero) > 30 THEN
        lwNomHoja := COPYSTR(pwNomFichero, 1, 31)
      ELSE
        lwNomHoja := COPYSTR(pwNomFichero, 1, STRLEN(pwNomFichero) - 5);
      //+$006 >

      lrExcelTMP[1].OpenBook(pwRuta + pwNomFichero, lwNomHoja);
      lrExcelTMP[1].ReadSheet;

      lrExcelTMP[1].SETFILTER("Row No."   , '>%1', 1);
      lrExcelTMP[1].SETRANGE ("Column No.", 20); //. Numero de parte //+$005
      IF lrExcelTMP[1].FINDSET THEN
      BEGIN
        lwParteAnterior := '';
        REPEAT
          //. Obtenemos el numero de bono
          lwBono := _GetCampo(lrExcelTMP, lrExcelTMP[1]."Row No.", 2);

          //. Obtenemos el Touroperador y buscamos su conversion
          lwTouroperador := _GetTouroperador(lrExcelTMP, lrExcelTMP[1]."Row No.");

          //. Obtener la fecha
          EVALUATE(lwFechaTraslado, _GetCampo(lrExcelTMP, lrExcelTMP[1]."Row No.", 5));

          //. Obtener el tipo de traslado
          lwTipoTraslado := _GetCampo(lrExcelTMP, lrExcelTMP[1]."Row No.", 6);
          lwTipoTraslado := COPYSTR(lwTipoTraslado, 1, 1);

          //. Obtener origen traslado
          lwOrigenTraslado := _GetCampo(lrExcelTMP, lrExcelTMP[1]."Row No.", 8);

          //. Obtener destino traslado
          lwDestinoTraslado := _GetCampo(lrExcelTMP, lrExcelTMP[1]."Row No.", 9);

          //. Obtener el nombre del cliente (servicios privados y shuttle)
          lwNomCliente := _GetCampo(lrExcelTMP, lrExcelTMP[1]."Row No.", 10);

          //. Obtenemos el Hotel y buscamos su conversion
          lwHotel := _GetHotel(lrExcelTMP, lrHistorico."No Importacion", lrExcelTMP[1]."Row No.");

          //. Obtenemos el vuelo
          lwVuelo := _GetCampo(lrExcelTMP, lrExcelTMP[1]."Row No.", 16);

          //. Obtenemos la hora de vuelo
          lwHoraTexto := _GetCampo(lrExcelTMP, lrExcelTMP[1]."Row No.", 17);
          IF lwHoraTexto <> '' THEN
          BEGIN
            EVALUATE(lwDecimal, lwHoraTexto);
            lwHora := 000000T + ROUND(lwDecimal * (1000*60*60*24), 1);
          END;

          //. Obtenemos el origen
          lwOrigen := _GetCampo(lrExcelTMP, lrExcelTMP[1]."Row No.", 18);

          //. Obtenemos el destino
          lwDestino := _GetCampo(lrExcelTMP, lrExcelTMP[1]."Row No.", 19);

          //. Obtenemos el tipo de vehiculo
          lwTipoVehiculo := _GetTipoVehiculo(lrExcelTMP, lrExcelTMP[1]."Row No.");

          //. Obtenemos la hora de recogida
          lwRecogidaTexto := _GetCampo(lrExcelTMP, lrExcelTMP[1]."Row No.", 29);
          IF lwRecogidaTexto <> '' THEN
          BEGIN
            EVALUATE(lwDecimal, lwRecogidaTexto);
            lwRecogida := 000000T + ROUND(lwDecimal * (1000*60*60*24), 1);
          END;

          //. Obtenemos las observaciones
          lwObservaciones := _GetCampo(lrExcelTMP, lrExcelTMP[1]."Row No.", 30);

          //. Obtenemos los letreros
          lwLetreros := _GetCampo(lrExcelTMP, lrExcelTMP[1]."Row No.", 31);

          //. Obtenemos el numero de orden de las recogidas
          EVALUATE(lwNumOrden, _GetCampo(lrExcelTMP, lrExcelTMP[1]."Row No.", 33));

          // Obtenemos la informacion de guia
          lwGuia := _GetCampo(lrExcelTMP, lrExcelTMP[1]."Row No.", 34);

          lwHoraGuiaTexto := _GetCampo(lrExcelTMP, lrExcelTMP[1]."Row No.", 35);
          IF lwHoraGuiaTexto <> '' THEN
          BEGIN
            EVALUATE(lwDecimal, lwHoraGuiaTexto);
            lwHoraGuia := 000000T + ROUND(lwDecimal * (1000*60*60*24), 1);
          END;

          lwRecogidaGuia := _GetCampo(lrExcelTMP, lrExcelTMP[1]."Row No.", 36);

          lwParte := _ContenidoCelda(lrExcelTMP[1]);
          lwParte := DELCHR(lwParte, '=', '.');

          //. El campo numero de parte para va a servir para identificar los servicios
          IF lwParte <> lwParteAnterior THEN
          BEGIN
            lwParteAnterior := lwParte;

            //. Trabajamos con conversion de Touroperador
            _CrearParte(lrHistorico."No Importacion", lrExcelTMP[1]."Row No.", lwParte, lwBono, lwTipoTraslado, lwTipoVehiculo,
                        lwLetreros, lwGuia, lwRecogidaGuia, lwHoraGuia, lwOrigenTraslado, lwDestinoTraslado, lwBaseTraslado);
          END;

          //. Obtenemos los adultos
          EVALUATE(lwAdultos, _GetCampo(lrExcelTMP, lrExcelTMP[1]."Row No.", 12));

          //. Obtenemos los ni¤os
          EVALUATE(lwChilds, _GetCampo(lrExcelTMP, lrExcelTMP[1]."Row No.", 13));

          //. Obtenemos los bebes
          EVALUATE(lwBebes, _GetCampo(lrExcelTMP, lrExcelTMP[1]."Row No.", 14));

          _CrearVehiculoHotel(lrHistorico."No Importacion", lrExcelTMP[1]."Row No.", lwParte, lwTouroperador, lwTipoTraslado,
                              lwNomCliente, lwHotel, lwAdultos, lwChilds, lwBebes, lwRecogida, lwNumOrden, lwObservaciones);

          _CrearVehiculoVuelo(lrHistorico."No Importacion", lrExcelTMP[1]."Row No.", lwParte, lwTouroperador, lwFechaTraslado,
                              lwVuelo, lwBaseTraslado);

          _CrearVuelo(lrHistorico."No Importacion", lrExcelTMP[1]."Row No.", lwParte, lwTouroperador, lwFechaTraslado, lwVuelo,
                      lwTipoTraslado, lwHora, lwOrigen, lwDestino, lwBaseTraslado);
        UNTIL lrExcelTMP[1].NEXT = 0;
      END
      ELSE
        ERROR(Text00006, pwNomFichero);

      //. Movemos los archivos procesados
      _MoverArchivosAtlas(lrHistorico."No Importacion", pwRuta, pwNomFichero);
    END;

    LOCAL PROCEDURE _CrearParte@1100217008(pwFichero@1100217000 : Integer;pwLinea@1100217002 : Integer;pwParte@1100217003 : Code[10];pwBono@1100217004 : Code[30];pwTipoServicio@1100217005 : Text[30];pwTipoVehiculo@1100217006 : Code[10];pwLetreros@1100217008 : Text[30];pwGuia@1100217009 : Text[30];pwRecogidaGuia@1100217010 : Text[80];pwHoraGuia@1100217011 : Time;pwOrigenTraslado@1100217012 : Code[10];pwDestinoTraslado@1100217013 : Code[10];VAR pwBaseTraslado@1100217016 : Code[10]);
    VAR
      lrServicio@1100217001 : Record 7035324;
      lrBase@1100217015 : Record 7035326;
    BEGIN
      CLEAR(lrServicio);
      lrServicio."N§ Fichero"         := pwFichero;
      lrServicio."N§Linea"            := pwLinea;
      lrServicio."Codigo de Vehiculo" := pwParte;
      lrServicio."Numero de Bono"     := pwBono;
      lrServicio."Tipo de Servicios"  := pwTipoServicio;
      lrServicio."Tipo de Vehiculo"   := pwTipoVehiculo;
      lrServicio.Letreros             := pwLetreros;
      lrServicio."Nombre Guia"        := pwGuia;
      lrServicio."Recogida Guia"      := pwRecogidaGuia;
      lrServicio."Hora Guia"          := pwHoraGuia;
      IF pwTipoServicio = 'E' THEN
        pwBaseTraslado := pwOrigenTraslado;
      IF pwTipoServicio = 'S' THEN
        pwBaseTraslado := pwDestinoTraslado;

      lrServicio.INSERT;

      //. Comprobamos si existe la base traslado
      IF NOT lrBase.GET(pwBaseTraslado) THEN
      BEGIN
        CLEAR(lrBase);
        lrBase.Codigo := pwBaseTraslado;
        lrBase.Nombre := pwBaseTraslado;
        lrBase.INSERT;
      END;
    END;

    LOCAL PROCEDURE _CrearVehiculoHotel@1100217018(pwFichero@1100217002 : Integer;pwLinea@1100217003 : Integer;pwVehiculo@1100217004 : Code[10];pwTouroperador@1100217000 : Code[10];pwTipoServicio@1100217005 : Text[30];pwNombreGeneral@1100217006 : Text[80];pwHotel@1100217007 : Code[10];pwAdultos@1100217008 : Integer;pwChilds@1100217009 : Integer;pwBebes@1100217010 : Integer;pwHora@1100217011 : Time;pwNumOrden@1100217012 : Integer;pwObservaciones@1100217013 : Text[250]);
    VAR
      lrVHotel@1100217001 : Record 7035327;
      lwObservaciones@1100217014 : Text[250];
    BEGIN
      CLEAR(lrVHotel);
      lrVHotel."N§Fichero"                := pwFichero;
      lrVHotel."N§Linea"                  := pwLinea;
      lrVHotel."Codigo Vehiculo Asignado" := pwVehiculo;
      lrVHotel."Codigo Planing"           := FORMAT(pwFichero);
      lrVHotel."Codigo de Ciente"         := pwTouroperador;
      lrVHotel."Llegada/Salida"           := pwTipoServicio;
      lrVHotel."Nombre general"           := pwNombreGeneral;
      lrVHotel."Codigo Hotel"             := pwHotel;
      lrVHotel.Adultos                    := pwAdultos;
      lrVHotel.Ni¤os                      := pwChilds;
      lrVHotel.Bebes                      := pwBebes;
      lrVHotel.Pax                        := pwAdultos + pwChilds;
      lrVHotel.Hora                       := pwHora;
      lrVHotel."Numero de Orden"          := pwNumOrden;

      IF pwBebes <> 0 THEN
      BEGIN
        IF lwObservaciones <> '' THEN
          lwObservaciones := lwObservaciones + ' - ';
        lwObservaciones := lwObservaciones + Text00007 + ' ' + FORMAT(pwBebes);
      END;
      IF pwObservaciones <> '' THEN
        lwObservaciones := lwObservaciones + ' - ' + COPYSTR(pwObservaciones, 1, 247 - STRLEN(lwObservaciones));

      lrVHotel.Observaciones := lwObservaciones;
      lrVHotel.INSERT;
    END;

    LOCAL PROCEDURE _CrearVehiculoVuelo@1100217019(pwFichero@1100217004 : Integer;pwLinea@1100217003 : Integer;pwVehiculo@1100217002 : Code[10];pwTouroperador@1100217000 : Code[10];pwFecha@1100217005 : Date;pwVuelo@1100217006 : Code[10];pwBaseTraslado@1100217007 : Code[10]);
    VAR
      lrVVuelo@1100217001 : Record 7035328;
    BEGIN
      lrVVuelo.RESET;
      lrVVuelo.SETRANGE("N§Fichero"               , pwFichero);
      lrVVuelo.SETRANGE("Codigo Vehiculo Asignado", pwVehiculo);
      lrVVuelo.SETRANGE("Fecha Traslado"          , pwFecha);
      lrVVuelo.SETRANGE("Referencia Vuelo"        , pwVuelo);
      lrVVuelo.SETRANGE("Codigo Touroperador"     , pwTouroperador);
      IF lrVVuelo.FIND('-') THEN
        EXIT;

      CLEAR(lrVVuelo);
      lrVVuelo."N§Fichero"                := pwFichero;
      lrVVuelo."N§Linea"                  := pwLinea;
      lrVVuelo."Codigo Vehiculo Asignado" := pwVehiculo;
      lrVVuelo."Codigo Planning"          := FORMAT(pwFichero);
      lrVVuelo."Codigo Touroperador"      := pwTouroperador;
      lrVVuelo."Fecha Traslado"           := pwFecha;
      lrVVuelo."Referencia Vuelo"         := pwVuelo;
      lrVVuelo."Base Traslado"            := pwBaseTraslado;
      lrVVuelo.INSERT;
    END;

    LOCAL PROCEDURE _CrearVuelo@1100217020(pwFichero@1100217004 : Integer;pwLinea@1100217003 : Integer;pwVehiculo@1100217002 : Code[10];pwTouroperador@1100217000 : Code[10];pwFecha@1100217005 : Date;pwVuelo@1100217006 : Code[10];pwTipoVuelo@1100217007 : Text[30];pwHora@1100217008 : Time;pwOrigen@1100217009 : Code[10];pwDestino@1100217010 : Code[10];pwBaseTraslado@1100217011 : Code[10]);
    VAR
      lrVuelo@1100217001 : Record 7035325;
    BEGIN
      lrVuelo.RESET;
      lrVuelo.SETRANGE("N§Archivo"          , pwFichero);
      lrVuelo.SETRANGE("Fecha Traslado"     , pwFecha);
      lrVuelo.SETRANGE("Referencia Vuelo"   , pwVuelo);
      lrVuelo.SETRANGE("Codigo Touroperador", pwTouroperador);
      IF lrVuelo.FIND('-') THEN
        EXIT;

      CLEAR(lrVuelo);
      lrVuelo."N§Archivo"                := pwFichero;
      lrVuelo."N§Linea"                  := pwLinea;
      lrVuelo."Codigo Touroperador"      := pwTouroperador;
      lrVuelo."Fecha Traslado"           := pwFecha;
      lrVuelo."Referencia Vuelo"         := pwVuelo;

      IF pwTipoVuelo = 'E' THEN
        lrVuelo."Hora Llegada" := pwHora;
      IF pwTipoVuelo = 'S' THEN
        lrVuelo."Hora Salida" := pwHora;

      lrVuelo.Origen          := pwOrigen;
      lrVuelo.Destino         := pwDestino;
      lrVuelo."Base Traslado" := pwBaseTraslado;
      lrVuelo.INSERT;
    END;

    LOCAL PROCEDURE _SeleccionaFichero@1100217001(VAR prArchivos@1100217001 : Record 2000000022;pwRuta@1100217003 : Text[250]) : Boolean;
    VAR
      lfDirect@1100217000 : Form 7035279;
      lwOk@1100217002 : Boolean;
    BEGIN
      // _SeleccionaFichero

      lwOk := FALSE;

      CLEAR(lfDirect);
      lfDirect.FiltrarDirectorio(pwRuta);
      IF NOT(lfDirect.RUNMODAL IN [ACTION::LookupCancel, ACTION::Cancel]) THEN BEGIN
        IF lfDirect.OK THEN BEGIN
          lfDirect.PasarArchivos(prArchivos);
          prArchivos.SETRANGE("Is a file",TRUE);
          lwOk:= TRUE;
        END;
      END;

      EXIT(lwOk);
    END;

    LOCAL PROCEDURE _ContenidoCelda@1100217005(VAR prExcelTMP@1100217000 : TEMPORARY Record 370) : Text[250];
    BEGIN
      EXIT ( DELCHR(prExcelTMP."Cell Value as Text", '<>') );
    END;

    LOCAL PROCEDURE _GetCampo@1100217010(VAR prExcelTMP@1100217000 : ARRAY [2] OF TEMPORARY Record 370;pwLinea@1100217001 : Integer;pwColumna@1100217002 : Integer) : Text[250];
    BEGIN
      prExcelTMP[2].SETRANGE("Row No."   , pwLinea);
      prExcelTMP[2].SETRANGE("Column No.", pwColumna);
      IF prExcelTMP[2].FIND('-') THEN
        EXIT(_ContenidoCelda(prExcelTMP[2]) );
    END;

    LOCAL PROCEDURE _GetTouroperador@1100217014(VAR prExcelTMP@1100217000 : ARRAY [2] OF TEMPORARY Record 370;pwLinea@1100217001 : Integer) : Code[10];
    VAR
      lrTO@1100217002 : Record 7035321;
      lwNomTouroperador@1100217003 : Text[50];
      lwCodigo@1100217004 : Code[10];
    BEGIN

      prExcelTMP[2].SETRANGE("Row No."   , pwLinea);
      prExcelTMP[2].SETRANGE("Column No.", 3);
      IF prExcelTMP[2].FIND('-') THEN
      BEGIN
        lwNomTouroperador := _ContenidoCelda(prExcelTMP[2]);

        //. Hay que buscar la conversion por el nombre porque en este fichero no mandan codigos
        lrTO.RESET;
        lrTO.SETRANGE(Nombre, lwNomTouroperador);
        IF NOT lrTO.FIND('-') THEN
        BEGIN
          //. Buscamos el ultimo codigo de touroperador
          lrTO.RESET;
          IF lrTO.FIND('+') THEN
            lwCodigo := lrTO."Codigo de Cliente"
          ELSE
            lwCodigo := '0';

          lrTO.INIT;
          lrTO."Codigo de Cliente" := INCSTR(lwCodigo);
          lrTO.Nombre              := lwNomTouroperador;
          lrTO.INSERT;
        END;

        EXIT(lrTO."Codigo de Cliente");
      END;
    END;

    LOCAL PROCEDURE _GetHotel@1100217006(VAR prExcelTMP@1100217000 : ARRAY [2] OF TEMPORARY Record 370;pwFichero@1100217005 : Integer;pwLinea@1100217001 : Integer) : Code[10];
    VAR
      lrHotel@1100217002 : Record 7035322;
      lwNomHotel@1100217003 : Text[50];
      lwCodigo@1100217004 : Code[10];
      lwAuxiliar@1100217006 : Code[10];
    BEGIN

      prExcelTMP[2].SETRANGE("Row No."   , pwLinea);
      prExcelTMP[2].SETRANGE("Column No.", 11);
      IF prExcelTMP[2].FIND('-') THEN
      BEGIN
        lwNomHotel := _ContenidoCelda(prExcelTMP[2]);

        //. Hay que buscar la conversion por el nombre porque en este fichero no mandan codigos
        lrHotel.RESET;
        lrHotel.SETRANGE(Nombre, lwNomHotel);
        IF NOT lrHotel.FIND('-') THEN
        BEGIN
          lwAuxiliar := FORMAT(pwFichero)+ FORMAT(pwLinea);
          lwCodigo := '13' + PADSTR('', 8 - STRLEN(lwAuxiliar), '0') + lwAuxiliar;

          lrHotel.INIT;
          lrHotel.Codigo :=  lwCodigo;
          lrHotel.Nombre := lwNomHotel;
          lrHotel.INSERT;
        END;

        EXIT(lrHotel.Codigo);
      END;
    END;

    LOCAL PROCEDURE _GetTipoVehiculo@1100217009(VAR prExcelTMP@1100217000 : ARRAY [2] OF TEMPORARY Record 370;pwLinea@1100217001 : Integer) : Code[10];
    VAR
      lrTipoVehiculo@1100217002 : Record 7035320;
      lwNomTipo@1100217003 : Text[50];
      lwCodigo@1100217004 : Code[10];
    BEGIN

      prExcelTMP[2].SETRANGE("Row No."   , pwLinea);
      prExcelTMP[2].SETRANGE("Column No.", 25);
      IF prExcelTMP[2].FIND('-') THEN
      BEGIN
        lwCodigo := _ContenidoCelda(prExcelTMP[2]);

        //. Hay que buscar la conversion
        lrTipoVehiculo.RESET;
        lrTipoVehiculo.SETRANGE(Codigo, lwCodigo);
        IF NOT lrTipoVehiculo.FIND('-') THEN
        BEGIN
          lrTipoVehiculo.INIT;
          lrTipoVehiculo.Codigo := lwCodigo;
          lrTipoVehiculo.Nombre := _GetCampo(prExcelTMP, prExcelTMP[1]."Row No.", 26);
          lrTipoVehiculo.INSERT;
        END;

        EXIT(lrTipoVehiculo.Codigo);
      END;
    END;

    LOCAL PROCEDURE _MoverArchivosAtlas@1100217003(pwNoImportacion@1100244000 : Integer;pwRuta@1100217000 : Text[250];pwFichero@1100217001 : Text[250]);
    VAR
      lwDirectorio@1100244001 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
      lwSubdirectorio@1100244002 : Text[250];
      lwContador@1100244003 : Integer;
      lwArch1@1100244004 : Text[250];
      lwArch2@1100244005 : Text[250];
    BEGIN
      // _MoverArchivosAtlas

      // Esta funci¢n se encarga de abrir un Subdiectorio para esa importaci¢n y mover
      // el archivo importado
      // pwNoImportacion Es el N§ asignado a esa importaci¢n.

      CREATE(lwDirectorio);

      lwSubdirectorio := pwRuta;
      IF lwSubdirectorio[STRLEN(lwSubdirectorio)] <> '\' THEN
        lwSubdirectorio := lwSubdirectorio + '\';

      lwSubdirectorio := lwSubdirectorio + FORMAT(TODAY, 0, Text013) + '\';

      IF NOT lwDirectorio.FolderExists (lwSubdirectorio) THEN
        lwDirectorio.CreateFolder (lwSubdirectorio);

      lwSubdirectorio := lwSubdirectorio  + Text014 + PonCeros(pwNoImportacion , 4) + '_' + PonFecha(TODAY);

      IF NOT lwDirectorio.FolderExists (lwSubdirectorio) THEN
        lwDirectorio.CreateFolder (lwSubdirectorio);

      lwArch1 := pwRuta +  pwFichero;
      IF EXISTS(lwArch1) THEN
      BEGIN
        lwArch2 := lwSubdirectorio + '\' + pwFichero;
        lwDirectorio.MoveFile(lwArch1 , lwArch2);
      END;
    END;

    BEGIN
    {
      ## AJF 17/07/09

      .- (INC-42477) Al transferir el veh¡culo actualizo la presentaci¢n del parte con la descripci¢n de la recogida
                     si el parte es de salida.

      $001 AJS INV-OC-13036 Nueva importacion de servicios de TUI (Sistema Atlas)

      $002 AJS 02072013, Almacenamos el bono en el campo Referencia del parte, y en el campo Bono la parte que quepa

      $003 AJS 04072013 Bajamos las observaciones a nivel de servicios - partes

      $004 AJS 15062015 Cuando se utiliza ASCENDING(FALSE) no se puede utilizar FINDSET

      $005 AJS 16062015 El numero de parte est  en la columna 20 en lugar de la 19

      $006 AJS 17062015 El nombre de la hoja y el nombre del fichero dejan de coincidir

      $007 AJS 17062015 Dejamos de rellenar el campo Agrupacion con el Codigo de planing

      $008 AJS 18062015 Corrijo un problema en la funcion TransfiereVehiculo que no rellena la presentacion
    }
    END.
  }
}
