OBJECT Codeunit 99000831 Reservation Engine Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 32=rm,
                TableData 337=rimd,
                TableData 99000849=rid;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 must be greater than 0.;ESP=%1 debe ser mayor que 0.';
      Text001@1001 : TextConst 'ENU=%1 must be less than 0.;ESP=%1 debe ser menor que 0.';
      Text002@1002 : TextConst 'ENU=Use Cancel Reservation.;ESP=Utilice cancelar reserva.';
      Text003@1003 : TextConst 'ENU=%1 can only be reduced.;ESP=%1 s¢lo se puede reducir.';
      Text005@1004 : TextConst 'ENU=Outbound,Inbound;ESP=Salida,Entrada';
      CalcSalesLine@1005 : Record 37;
      CalcPurchLine@1012 : Record 39;
      CalcItemJnlLine@1006 : Record 83;
      CalcProdOrderLine@1007 : Record 5406;
      Item@1009 : Record 27;
      TempSurplusEntry@1010 : TEMPORARY Record 337;
      TempSortRec1@1016 : TEMPORARY Record 337;
      TempSortRec2@1015 : TEMPORARY Record 337;
      TempSortRec3@1014 : TEMPORARY Record 337;
      TempSortRec4@1013 : TEMPORARY Record 337;
      ReservMgt@1008 : Codeunit 99000845;
      Text006@1011 : TextConst 'ENU=Signing mismatch.;ESP=Acepta no coincidencia.';
      Text007@1017 : TextConst 'ENU=Renaming reservation entries...;ESP=Renombrando movs. reserva...';
      CalcJobJnlLine@1018 : Record 210;
      LostReservationQty@1019 : Decimal;
      Text008@1020 : TextConst 'ENU="You cannot state %1 or %2 on a demand when it is linked to a supply by %3 = %4.";ESP="No puede establecer %1 ni %2 en una demanda cuando ‚sta est  vinculada a un suministro (%3 = %4)‡."';
      ReservationsModified@1021 : Boolean;
      IsPick@1022 : Boolean;

    PROCEDURE CloseReservEntry2@9(ReservEntry@1002 : Record 337);
    VAR
      ReservEntry3@1003 : Record 337;
      LastEntryNo@1004 : Integer;
    BEGIN
      ReservEntry.TESTFIELD("Reservation Status",ReservEntry."Reservation Status"::Reservation);

      ReservEntry3.LOCKTABLE;
      IF ReservEntry3.FINDLAST THEN
        LastEntryNo := ReservEntry3."Entry No.";

      ReservEntry3.GET(ReservEntry."Entry No.",NOT ReservEntry.Positive);
      IF (ReservEntry3."Lot No." <> '') OR (ReservEntry3."Serial No." <> '') OR
         (ReservEntry."Lot No." <> '') OR (ReservEntry."Serial No." <> '') THEN BEGIN
        ReservEntry."Reservation Status" := ReservEntry."Reservation Status"::Surplus;
        ReservEntry3."Reservation Status" := ReservEntry3."Reservation Status"::Surplus;
        ReservEntry.MODIFY;
        ReservEntry3.DELETE;
        ReservEntry3."Entry No." := LastEntryNo + 1;
        ReservEntry3.INSERT;
        TempSurplusEntry.DELETEALL;
        UpdateTempSurplusEntry(ReservEntry);
        UpdateTempSurplusEntry(ReservEntry3);
        UpdateOrderTracking(TempSurplusEntry);
      END ELSE
        CloseReservEntry(ReservEntry,TRUE,FALSE);
    END;

    PROCEDURE CloseReservEntry@20(ReservEntry@1000 : Record 337;ReTrack@1001 : Boolean;DeleteAll@1002 : Boolean);
    VAR
      ReservEntry2@1003 : Record 337;
      SurplusReservEntry@1004 : Record 337;
      DummyReservEntry@1005 : Record 337;
      TotalQty@1006 : Decimal;
      AvailabilityDate@1007 : Date;
    BEGIN
      ReservEntry.DELETE;
      GetItem(ReservEntry."Item No.");
      IF ReservEntry."Reservation Status" = ReservEntry."Reservation Status"::Prospect THEN
        EXIT;

      IF ReservEntry."Reservation Status" = ReservEntry."Reservation Status"::Surplus THEN BEGIN
        IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::"Tracking & Action Msg." THEN
          ReservMgt.ModifyActionMessage(ReservEntry."Entry No.",0,TRUE); // Delete related action messages
      END ELSE BEGIN
        IF ReservEntry.Binding = ReservEntry.Binding::"Order-to-Order" THEN
          IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::"Tracking & Action Msg." THEN
            ReservMgt.ModifyActionMessage(ReservEntry."Entry No.",0,TRUE); // Delete related action messages

        ReservEntry2.GET(ReservEntry."Entry No.",NOT ReservEntry.Positive);
        IF (Item."Order Tracking Policy" = Item."Order Tracking Policy"::None) AND
            (((ReservEntry.Binding = ReservEntry.Binding::"Order-to-Order") AND ReservEntry2.Positive )OR
            ((ReservEntry2."Serial No." = '') AND (ReservEntry2."Lot No." = ''))) THEN
          ReservEntry2.DELETE
        ELSE BEGIN
          ReservEntry2."Reservation Status" := ReservEntry2."Reservation Status"::Surplus;

          IF ReservEntry2.Positive THEN BEGIN
            AvailabilityDate := ReservEntry2."Expected Receipt Date";
            ReservEntry2."Shipment Date" := 0D
          END ELSE BEGIN
            AvailabilityDate := ReservEntry2."Shipment Date";
            ReservEntry2."Expected Receipt Date" := 0D;
          END;
          ReservEntry2.MODIFY;
          ReservEntry2."Quantity (Base)" :=
            ReservMgt.MatchSurplus(ReservEntry2,SurplusReservEntry,ReservEntry2."Quantity (Base)",NOT ReservEntry2.Positive,
              AvailabilityDate,Item."Order Tracking Policy");
          IF ReservEntry2."Quantity (Base)" = 0 THEN BEGIN
            ReservEntry2.DELETE(TRUE);
          END ELSE BEGIN
            ReservEntry2.MODIFY;

            IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::"Tracking & Action Msg." THEN BEGIN
              ModifyActionMessageDating(ReservEntry2);
              IF DeleteAll THEN
                ReservMgt.IssueActionMessage(ReservEntry2,FALSE,ReservEntry)
              ELSE
                ReservMgt.IssueActionMessage(ReservEntry2,FALSE,DummyReservEntry);
            END;
          END;
        END;
      END;

      IF ReTrack THEN BEGIN
        TotalQty := ReservMgt.SourceQuantity(ReservEntry,TRUE);
        ReservMgt.AutoTrack(TotalQty);
      END;
    END;

    PROCEDURE ModifyReservEntry@68(ReservEntry@1000 : Record 337;NewQuantity@1001 : Decimal;NewDescription@1002 : Text[50];ModifyReserved@1003 : Boolean);
    VAR
      TotalQty@1004 : Decimal;
    BEGIN
      ReservEntry.TESTFIELD("Reservation Status",ReservEntry."Reservation Status"::Reservation);
      IF NewQuantity * ReservEntry."Quantity (Base)" < 0 THEN
        IF NewQuantity < 0 THEN
          ERROR(Text000,ReservEntry.FIELDCAPTION("Quantity (Base)"))
        ELSE
          ERROR(Text001,ReservEntry.FIELDCAPTION("Quantity (Base)"));
      IF NewQuantity = 0 THEN
        ERROR(Text002);
      IF ABS(NewQuantity) > ABS(ReservEntry."Quantity (Base)") THEN
        ERROR(Text003,ReservEntry.FIELDCAPTION("Quantity (Base)"));

      IF ModifyReserved THEN BEGIN
        IF ReservEntry."Item No." <> Item."No." THEN
          GetItem(ReservEntry."Item No.");

        ReservEntry.GET(ReservEntry."Entry No.",ReservEntry.Positive); // Get existing entry
        ReservEntry.VALIDATE("Quantity (Base)",NewQuantity);
        ReservEntry.Description := NewDescription;
        ReservEntry."Changed By" := USERID;
        ReservEntry.MODIFY;
        IF Item."Order Tracking Policy" > Item."Order Tracking Policy"::None THEN BEGIN
          TotalQty := ReservMgt.SourceQuantity(ReservEntry,TRUE);
          ReservMgt.AutoTrack(TotalQty);
        END;

        IF ReservEntry.GET(ReservEntry."Entry No.",NOT ReservEntry.Positive) THEN BEGIN // Get related entry
          ReservEntry.VALIDATE("Quantity (Base)",-NewQuantity);
          ReservEntry.Description := NewDescription;
          ReservEntry."Changed By" := USERID;
          ReservEntry.MODIFY;
          IF Item."Order Tracking Policy" > Item."Order Tracking Policy"::None THEN BEGIN
            TotalQty := ReservMgt.SourceQuantity(ReservEntry,TRUE);
            ReservMgt.AutoTrack(TotalQty);
          END;
        END;
      END;
    END;

    PROCEDURE CreateForText@70(ReservEntry@1000 : Record 337) : Text[80];
    BEGIN
      IF ReservEntry.GET(ReservEntry."Entry No.",FALSE) THEN
        EXIT(CreateText(ReservEntry))
      ELSE
        EXIT('');
    END;

    PROCEDURE CreateFromText@69(ReservEntry@1000 : Record 337) : Text[80];
    BEGIN
      IF ReservEntry.GET(ReservEntry."Entry No.",TRUE) THEN
        EXIT(CreateText(ReservEntry))
      ELSE
        EXIT('');
    END;

    PROCEDURE CreateText@1(ReservEntry@1001 : Record 337) @1000 : Text[80];
    VAR
      SourceType@1002 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry,Prod. Order Line,Prod. Order Component,Planning Line,Planning Component,Transfer,Service Order,Job Journal';
      SourceTypeText@1003 : TextConst 'ENU=Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry,Prod. Order Line,Prod. Order Component,Planning Line,Planning Component,Transfer,Service Order;ESP=Ventas,L¡n. repos.,Compras,Diario prod.,Diario L.M.,Mov. prod.,L¡n. orden producc.,Comp. orden producc.,Planif. l¡n.,Planif. componente,Transfer.,Pedido servicio';
    BEGIN
      WITH ReservEntry DO BEGIN
        CASE "Source Type" OF
          DATABASE::"Sales Line":
            BEGIN
              SourceType := SourceType::Sales;
              CalcSalesLine."Document Type" := "Source Subtype";
              EXIT(STRSUBSTNO('%1 %2 %3',SELECTSTR(SourceType,SourceTypeText),
                CalcSalesLine."Document Type","Source ID"));
            END;
          DATABASE::"Purchase Line":
            BEGIN
              SourceType := SourceType::Purchase;
              CalcPurchLine."Document Type" := "Source Subtype";
              EXIT(STRSUBSTNO('%1 %2 %3',SELECTSTR(SourceType,SourceTypeText),
                CalcPurchLine."Document Type","Source ID"));
            END;
          DATABASE::"Requisition Line":
            BEGIN
              SourceType := SourceType::"Requisition Line";
              EXIT(STRSUBSTNO('%1 %2 %3',SELECTSTR(SourceType,SourceTypeText),
              "Source ID","Source Batch Name"));
            END;
          DATABASE::"Planning Component":
            BEGIN
              SourceType := SourceType::"Planning Component";
              EXIT(STRSUBSTNO('%1 %2 %3',SELECTSTR(SourceType,SourceTypeText),
                "Source ID","Source Batch Name"));
            END;
          DATABASE::"BOM Journal Line":
            BEGIN
              SourceType := SourceType::"BOM Journal";
              EXIT(STRSUBSTNO('%1 %2 %3',SELECTSTR(SourceType,SourceTypeText),
                "Source ID","Source Batch Name"));
            END;
          DATABASE::"Item Journal Line":
            BEGIN
              SourceType := SourceType::"Item Journal";
              CalcItemJnlLine."Entry Type" := "Source Subtype";
              EXIT(STRSUBSTNO('%1 %2 %3 %4',SELECTSTR(SourceType,SourceTypeText),
                CalcItemJnlLine."Entry Type","Source ID","Source Batch Name"));
            END;
          DATABASE::"Job Journal Line":
            BEGIN
              SourceType := SourceType::"Job Journal";
              EXIT(STRSUBSTNO('%1 %2 %3 %4',SELECTSTR(SourceType,SourceTypeText),
                CalcJobJnlLine."Entry Type","Source ID","Source Batch Name"));
            END;
          DATABASE::"Item Ledger Entry":
            BEGIN
              SourceType := SourceType::"Item Ledger Entry";
              EXIT(STRSUBSTNO('%1 %2',SELECTSTR(SourceType,SourceTypeText),"Source Ref. No."));
            END;
          DATABASE::"Prod. Order Line":
            BEGIN
              SourceType := SourceType::"Prod. Order Line";
              CalcProdOrderLine.Status := "Source Subtype";
              EXIT(STRSUBSTNO('%1 %2 %3',SELECTSTR(SourceType,SourceTypeText),
                CalcProdOrderLine.Status,"Source ID"));
            END;
          DATABASE::"Prod. Order Component":
            BEGIN
              SourceType := SourceType::"Prod. Order Component";
              CalcProdOrderLine.Status := "Source Subtype";
              EXIT(STRSUBSTNO('%1 %2 %3',SELECTSTR(SourceType,SourceTypeText),
                CalcProdOrderLine.Status,"Source ID"));
            END;
          DATABASE::"Transfer Line":
            BEGIN
              SourceType := SourceType::Transfer;
              EXIT(STRSUBSTNO('%1 %2, %3',SELECTSTR(SourceType,SourceTypeText),
                "Source ID",SELECTSTR("Source Subtype" + 1,Text005)));
            END;
          DATABASE::"Service Line":
            BEGIN
              SourceType := SourceType::"Service Order";
              EXIT(STRSUBSTNO('%1 %2',SELECTSTR(SourceType,SourceTypeText),"Source ID"));
            END;
        END;

        EXIT('');
      END;
    END;

    PROCEDURE ModifyShipmentDate@78(VAR ReservEntry@1000 : Record 337;NewShipmentDate@1001 : Date);
    VAR
      ReservEntry2@1002 : Record 337;
    BEGIN
      ReservEntry2 := ReservEntry;
      ReservEntry2."Shipment Date" := NewShipmentDate;
      ReservEntry2."Changed By" := USERID;
      ReservEntry2.MODIFY;

      IF ReservEntry2.GET(ReservEntry2."Entry No.",NOT ReservEntry2.Positive) THEN BEGIN // Get related entry
        ReservEntry2."Shipment Date" := NewShipmentDate;
        ReservEntry2."Changed By" := USERID;
        ReservEntry2.MODIFY;

        ModifyActionMessageDating(ReservEntry2);
      END;
    END;

    PROCEDURE ModifyExpectedReceiptDate@79(VAR ReservEntry@1000 : Record 337;NewExpectedReceiptDate@1001 : Date);
    VAR
      ReservEntry2@1002 : Record 337;
    BEGIN
      ReservEntry2 := ReservEntry;
      ReservEntry2."Expected Receipt Date" := NewExpectedReceiptDate;
      ReservEntry2."Changed By" := USERID;
      ReservEntry2.MODIFY;

      ModifyActionMessageDating(ReservEntry2);

      IF ReservEntry2.GET(ReservEntry2."Entry No.",NOT ReservEntry2.Positive) THEN BEGIN // Get related entry
        ReservEntry2."Expected Receipt Date" := NewExpectedReceiptDate;
        ReservEntry2."Changed By" := USERID;
        ReservEntry2.MODIFY;
      END;
    END;

    PROCEDURE InitFilterAndSortingFor@19(VAR FilterReservEntry@1000 : Record 337;SetFilters@1001 : Boolean);
    BEGIN
      FilterReservEntry.RESET;
      FilterReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status");
      IF SetFilters THEN BEGIN
        FilterReservEntry.SETRANGE("Reservation Status",FilterReservEntry."Reservation Status"::Reservation);
      END;
    END;

    PROCEDURE InitFilterAndSortingLookupFor@64(VAR FilterReservEntry@1000 : Record 337;SetFilters@1001 : Boolean);
    BEGIN
      FilterReservEntry.RESET;
      FilterReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status",
        "Shipment Date","Expected Receipt Date");
      IF SetFilters THEN
        FilterReservEntry.SETRANGE("Reservation Status",FilterReservEntry."Reservation Status"::Reservation);
    END;

    PROCEDURE ModifyUnitOfMeasure@2(VAR ReservEntry@1000 : Record 337;NewQtyPerUnitOfMeasure@1001 : Decimal);
    VAR
      ReservEntry2@1002 : Record 337;
    BEGIN
      ReservEntry.TESTFIELD("Source Type");
      ReservEntry2.RESET;
      ReservEntry2.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status",
        "Shipment Date","Expected Receipt Date");

      ReservEntry2.SETRANGE("Source ID",ReservEntry."Source ID");
      ReservEntry2.SETRANGE("Source Ref. No.",ReservEntry."Source Ref. No.");
      ReservEntry2.SETRANGE("Source Type",ReservEntry."Source Type");
      ReservEntry2.SETRANGE("Source Subtype",ReservEntry."Source Subtype");
      ReservEntry2.SETRANGE("Source Batch Name",ReservEntry."Source Batch Name");
      ReservEntry2.SETRANGE("Source Prod. Order Line",ReservEntry."Source Prod. Order Line");

      IF ReservEntry2.FINDSET THEN
        IF NewQtyPerUnitOfMeasure <> ReservEntry2."Qty. per Unit of Measure" THEN
          REPEAT
            ReservEntry2.VALIDATE("Qty. per Unit of Measure",NewQtyPerUnitOfMeasure);
            ReservEntry2.MODIFY;
          UNTIL ReservEntry2.NEXT = 0;
    END;

    PROCEDURE ModifyActionMessageDating@3(VAR ReservEntry@1000 : Record 337);
    VAR
      ReservEntry2@1001 : Record 337;
      ActionMessageEntry@1002 : Record 99000849;
      ManufacturingSetup@1003 : Record 99000765;
      FirstDate@1004 : Date;
      NextEntryNo@1005 : Integer;
    BEGIN
      IF NOT (ReservEntry."Source Type" IN [DATABASE::"Prod. Order Line",
        DATABASE::"Purchase Line"])
      THEN
        EXIT;

      IF NOT ReservEntry.Positive THEN
        EXIT;

      GetItem(ReservEntry."Item No.");
      IF Item."Order Tracking Policy" <> Item."Order Tracking Policy"::"Tracking & Action Msg." THEN
        EXIT;

      ActionMessageEntry.SETCURRENTKEY(
        "Source Type","Source Subtype","Source ID","Source Batch Name","Source Prod. Order Line","Source Ref. No.");
      ActionMessageEntry.SETRANGE("Source Type",ReservEntry."Source Type");
      ActionMessageEntry.SETRANGE("Source Subtype",ReservEntry."Source Subtype");
      ActionMessageEntry.SETRANGE("Source ID",ReservEntry."Source ID");
      ActionMessageEntry.SETRANGE("Source Batch Name",ReservEntry."Source Batch Name");
      ActionMessageEntry.SETRANGE("Source Prod. Order Line",ReservEntry."Source Prod. Order Line");
      ActionMessageEntry.SETRANGE("Source Ref. No.",ReservEntry."Source Ref. No.");
      ActionMessageEntry.SETRANGE(Quantity,0);

      ReservEntry2.COPY(ReservEntry);
      ReservMgt.SetPointerFilter(ReservEntry2);
      ReservEntry2.SETRANGE(
        "Reservation Status",ReservEntry2."Reservation Status"::Reservation,ReservEntry2."Reservation Status"::Tracking);
      FirstDate := ReservMgt.FindDate(ReservEntry2,0,TRUE);

      ManufacturingSetup.GET;
      IF (FORMAT(ManufacturingSetup."Dampener (Time)") = '') OR
        ((ReservEntry.Binding = ReservEntry.Binding::"Order-to-Order") AND
        (ReservEntry."Reservation Status" = ReservEntry."Reservation Status"::Reservation))
      THEN
        EVALUATE(ManufacturingSetup."Dampener (Time)",'<0D>');

      ActionMessageEntry.DELETEALL;

      IF FirstDate = 0D THEN
        EXIT;

      IF CALCDATE('-' + FORMAT(ManufacturingSetup."Dampener (Time)"),FirstDate) <= ReservEntry."Expected Receipt Date" THEN
        EXIT;

      IF ReservEntry."Planning Flexibility" = ReservEntry."Planning Flexibility"::None THEN
        EXIT;

      ActionMessageEntry.RESET;
      IF NOT ActionMessageEntry.FINDLAST THEN
        NextEntryNo := 1
      ELSE
        NextEntryNo := ActionMessageEntry."Entry No." + 1;
      ActionMessageEntry.INIT;
      ActionMessageEntry.TransferFromReservEntry(ReservEntry);
      ActionMessageEntry."Entry No." := NextEntryNo;
      ActionMessageEntry.Type := ActionMessageEntry.Type::Reschedule;
      ActionMessageEntry."New Date" := FirstDate;
      ActionMessageEntry."Reservation Entry" := ReservEntry2."Entry No.";
      WHILE NOT ActionMessageEntry.INSERT DO
        ActionMessageEntry."Entry No." += 1;
    END;

    PROCEDURE AddItemTrackingToTempRecSet@4(VAR TempReservEntry@1007 : TEMPORARY Record 337;VAR TrackingSpecification@1001 : Record 336;QtyToAdd@1002 : Decimal;VAR QtyToAddAsBlank@1005 : Decimal;SNSpecific@1004 : Boolean;LotSpecific@1003 : Boolean) @1006 : Decimal;
    VAR
      ReservEntry2@1008 : Record 337;
      LastEntryNo@1000 : Integer;
    BEGIN
      LostReservationQty := 0; // Late Binding
      ReservationsModified := FALSE;
      TempReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status");
      TempReservEntry.ASCENDING(FALSE);
      IF TempReservEntry.FIND('-') THEN
        REPEAT
          IF IsPick THEN BEGIN
            // pick must be tracked against Item ledger entry only
            IF NOT ReservEntry2.GET(TempReservEntry."Entry No.",NOT TempReservEntry.Positive) THEN
              ReservEntry2."Source Type" := DATABASE::"Item Ledger Entry";
            IF ReservEntry2."Source Type" = DATABASE::"Item Ledger Entry" THEN
              QtyToAdd :=
                ModifyItemTrackingOnTempRec(
                  TempReservEntry,TrackingSpecification,QtyToAdd,
                  QtyToAddAsBlank,LastEntryNo,SNSpecific,LotSpecific,FALSE,FALSE);
          END ELSE
            QtyToAdd :=
              ModifyItemTrackingOnTempRec(
                TempReservEntry,TrackingSpecification,QtyToAdd,
                QtyToAddAsBlank,LastEntryNo,SNSpecific,LotSpecific,FALSE,FALSE);
        UNTIL (TempReservEntry.NEXT = 0) OR (QtyToAdd = 0);
      EXIT(QtyToAdd);
    END;

    LOCAL PROCEDURE ModifyItemTrackingOnTempRec@8(VAR TempReservEntry@1007 : TEMPORARY Record 337;VAR TrackingSpecification@1001 : Record 336;QtyToAdd@1002 : Decimal;VAR QtyToAddAsBlank@1017 : Decimal;LastEntryNo@1000 : Integer;SNSpecific@1012 : Boolean;LotSpecific@1011 : Boolean;EntryMismatch@1016 : Boolean;CalledRecursively@1005 : Boolean) @1006 : Decimal;
    VAR
      ReservEntry1@1004 : Record 337;
      ReservEntry2@1003 : Record 337;
      TempReservEntry2@1008 : TEMPORARY Record 337;
      TrackingSpecification2@1013 : Record 336;
      QtyToAdd2@1010 : Decimal;
      ModifyPartnerRec@1009 : Boolean;
      SNMismatch@1014 : Boolean;
      LotMismatch@1015 : Boolean;
      ItemTrackingMgt@1102601000 : Codeunit 6500;
      FromSourceID@1102601001 : Text[100];
      ToSourceID@1102601002 : Text[100];
    BEGIN
      IF NOT CalledRecursively THEN
        IF TempReservEntry."Reservation Status" IN
          [TempReservEntry."Reservation Status"::Reservation,
           TempReservEntry."Reservation Status"::Tracking]
        THEN BEGIN
          ModifyPartnerRec := TRUE;
          ReservEntry1 := TempReservEntry;
          ReservEntry1.GET(ReservEntry1."Entry No.",NOT ReservEntry1.Positive);
          TempReservEntry2 := ReservEntry1;
          TrackingSpecification2 := TrackingSpecification;

          SetItemTracking2(TempReservEntry2,TrackingSpecification2);

          // Check if the entries still match:
          IF TempReservEntry.Positive THEN BEGIN
            IF TrackingSpecification2."Serial No." <> '' THEN
              SNMismatch := SNSpecific AND
                (TrackingSpecification."Serial No." <> TrackingSpecification2."Serial No.");
            IF TrackingSpecification2."Lot No." <> '' THEN
              LotMismatch := LotSpecific AND
                (TrackingSpecification."Lot No." <> TrackingSpecification2."Lot No.");
          END ELSE BEGIN
            IF TrackingSpecification."Serial No." <> '' THEN
              SNMismatch := SNSpecific AND
                (TrackingSpecification."Serial No." <> TrackingSpecification2."Serial No.");
            IF TrackingSpecification."Lot No." <> '' THEN
              LotMismatch := LotSpecific AND
                (TrackingSpecification."Lot No." <> TrackingSpecification2."Lot No.");
          END;
          EntryMismatch := LotMismatch OR SNMismatch;
          QtyToAdd2 := -QtyToAdd;
        END;

      ReservEntry1 := TempReservEntry;
      IF ABS(TempReservEntry."Quantity (Base)") > ABS(QtyToAdd) THEN BEGIN // Split entry
        IF LastEntryNo = 0 THEN
          LastEntryNo := LastReservEntryNo;
        ReservEntry2 := TempReservEntry;
        ReservEntry2.VALIDATE("Quantity (Base)",QtyToAdd);
        ReservEntry2."Lot No." := TrackingSpecification."Lot No.";
        ReservEntry2."Serial No." := TrackingSpecification."Serial No.";
        ReservEntry2."Warranty Date" := TrackingSpecification."Warranty Date";
        ReservEntry2."Expiration Date" := TrackingSpecification."Expiration Date";
        ReservEntry2."Entry No." := LastEntryNo + 1;
        ReservEntry2.UpdateItemTracking;
        IF EntryMismatch THEN BEGIN
          IF NOT CalledRecursively THEN
            SaveLostReservQty(ReservEntry2); // Late Binding
          ReservEntry2."Reservation Status" := ReservEntry2."Reservation Status"::Surplus;
          LastEntryNo += 1;
          IF ReservEntry2."Source Type" = DATABASE::"Item Ledger Entry" THEN BEGIN
            GetItem(ReservEntry2."Item No.");
            IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::None THEN
              ReservEntry2."Quantity (Base)" := 0;
          END;
        END ELSE
          IF NOT CalledRecursively THEN
            ReservationsModified := ReservEntry2."Reservation Status" = ReservEntry2."Reservation Status"::Reservation;
        IF NOT CalledRecursively THEN
          VerifySurplusRecord(ReservEntry2,QtyToAddAsBlank);
        IF ReservEntry2."Quantity (Base)" <> 0 THEN
          ReservEntry2.INSERT;
        ReservEntry1.VALIDATE("Quantity (Base)",ReservEntry1."Quantity (Base)" - QtyToAdd);
        ReservEntry1.MODIFY;
        TempReservEntry := ReservEntry1;
        IF NOT CalledRecursively THEN BEGIN
          TempReservEntry := ReservEntry2;
          IF TempReservEntry."Quantity (Base)" <> 0 THEN
            TempReservEntry.INSERT;
          TempReservEntry := ReservEntry1;
          TempReservEntry.MODIFY;
        END ELSE
          TempReservEntry := ReservEntry1;
        QtyToAdd := 0;
        UpdateTempSurplusEntry(ReservEntry1);
        UpdateTempSurplusEntry(ReservEntry2);
      END ELSE BEGIN // Modify entry directly
        ReservEntry1."Qty. to Handle (Base)" := ReservEntry1."Quantity (Base)";
        ReservEntry1."Qty. to Invoice (Base)" := ReservEntry1."Quantity (Base)";
        ReservEntry1."Lot No." := TrackingSpecification."Lot No.";
        ReservEntry1."Serial No." := TrackingSpecification."Serial No.";
        ReservEntry1."Warranty Date" := TrackingSpecification."Warranty Date";
        ReservEntry1."Expiration Date" := TrackingSpecification."Expiration Date";
        IF ReservEntry1.Positive THEN
          ReservEntry1."Appl.-from Item Entry" := TrackingSpecification."Appl.-from Item Entry";
        ReservEntry1.UpdateItemTracking;
        IF EntryMismatch THEN BEGIN
          IF NOT CalledRecursively THEN
            SaveLostReservQty(ReservEntry1); // Late Binding
          GetItem(ReservEntry1."Item No.");
          IF (ReservEntry1."Source Type" = DATABASE::"Item Ledger Entry") AND
            (Item."Order Tracking Policy" = Item."Order Tracking Policy"::None)
          THEN BEGIN
            ReservEntry1.DELETE;
          END ELSE BEGIN
            ReservEntry1."Reservation Status" := ReservEntry1."Reservation Status"::Surplus;
            IF CalledRecursively THEN BEGIN
              IF LastEntryNo = 0 THEN
                LastEntryNo := LastReservEntryNo;
              ReservEntry1.DELETE;
              ReservEntry1."Entry No." := LastEntryNo + 1;
              ReservEntry1.INSERT;
            END ELSE
              ReservEntry1.MODIFY;
          END;
        END ELSE BEGIN
          IF NOT CalledRecursively THEN
            ReservationsModified := ReservEntry2."Reservation Status" = ReservEntry2."Reservation Status"::Reservation;
          ReservEntry1.MODIFY;
        END;
        QtyToAdd -= ReservEntry1."Quantity (Base)";
        IF NOT CalledRecursively THEN BEGIN
          IF VerifySurplusRecord(ReservEntry1,QtyToAddAsBlank) THEN
            ReservEntry1.MODIFY;
          IF ReservEntry1."Quantity (Base)" = 0 THEN BEGIN
            TempReservEntry := ReservEntry1;
            TempReservEntry.DELETE;
            ReservEntry1.DELETE;
            ReservMgt.ModifyActionMessage(ReservEntry1."Entry No.",0,TRUE); // Delete related Action Msg.
          END ELSE BEGIN
            TempReservEntry := ReservEntry1;
            TempReservEntry.MODIFY;
          END;
        END;
        UpdateTempSurplusEntry(ReservEntry1);
      END;

      IF ModifyPartnerRec THEN
        ModifyItemTrackingOnTempRec(TempReservEntry2,TrackingSpecification2,
          QtyToAdd2,QtyToAddAsBlank,LastEntryNo,SNSpecific,LotSpecific,EntryMismatch,TRUE);
      IF NOT CalledRecursively THEN
        LastEntryNo := ReservEntry2."Entry No.";
      IF (TempReservEntry."Reservation Status" = TempReservEntry."Reservation Status"::Reservation) AND
        (TempReservEntry."Source Type" = DATABASE::"Transfer Line") AND
        (TempReservEntry."Source Subtype" = 0) AND
        (TempReservEntry.Binding = TempReservEntry.Binding::"Order-to-Order") AND
        NOT(ModifyPartnerRec)
      THEN BEGIN
        FromSourceID := ItemTrackingMgt.ComposeRowID(TempReservEntry."Source Type",
          TempReservEntry."Source Subtype",TempReservEntry."Source ID",TempReservEntry."Source Batch Name",
          TempReservEntry."Source Prod. Order Line",TempReservEntry."Source Ref. No.");
        ToSourceID := ItemTrackingMgt.ComposeRowID(TempReservEntry."Source Type",
          1,TempReservEntry."Source ID",TempReservEntry."Source Batch Name",
          TempReservEntry."Source Prod. Order Line",TempReservEntry."Source Ref. No.");
        ItemTrackingMgt.SynchronizeItemTracking(FromSourceID,ToSourceID,'');
      END;

      TempSurplusEntry.RESET;
      IF TempSurplusEntry.FINDSET THEN BEGIN
        GetItem(TempSurplusEntry."Item No.");
        IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::"Tracking & Action Msg." THEN
          REPEAT
            UpdateActionMessages(TempSurplusEntry);
          UNTIL TempSurplusEntry.NEXT = 0;
      END;

      EXIT(QtyToAdd);
    END;

    LOCAL PROCEDURE VerifySurplusRecord@7(VAR ReservEntry@1000 : Record 337;VAR QtyToAddAsBlank@1001 : Decimal) Modified@1002 : Boolean;
    BEGIN
      IF (ReservEntry."Lot No." <> '') OR (ReservEntry."Serial No." <> '') THEN
        EXIT;
      IF ReservEntry."Reservation Status" = ReservEntry."Reservation Status"::Prospect THEN BEGIN
        ReservEntry.VALIDATE("Quantity (Base)",0);
        EXIT(TRUE);
      END;
      IF ReservEntry."Reservation Status" <> ReservEntry."Reservation Status"::Surplus THEN
        EXIT;
      IF QtyToAddAsBlank * ReservEntry."Quantity (Base)" < 0 THEN
        ERROR(Text006);
      IF ABS(QtyToAddAsBlank) < ABS(ReservEntry."Quantity (Base)") THEN BEGIN
        ReservEntry.VALIDATE("Quantity (Base)",QtyToAddAsBlank);
        Modified := TRUE;
      END;
      QtyToAddAsBlank -= ReservEntry."Quantity (Base)";
      EXIT(Modified);
    END;

    LOCAL PROCEDURE UpdateTempSurplusEntry@6(VAR ReservEntry@1000 : Record 337);
    BEGIN
      IF ReservEntry."Reservation Status" <> ReservEntry."Reservation Status"::Surplus THEN
        EXIT;
      IF ReservEntry."Quantity (Base)" = 0 THEN
        EXIT;
      TempSurplusEntry := ReservEntry;
      IF NOT TempSurplusEntry.INSERT THEN
        TempSurplusEntry.MODIFY;
    END;

    PROCEDURE LastReservEntryNo@5() : Integer;
    VAR
      ReservEntry@1000 : Record 337;
    BEGIN
      IF ReservEntry.FINDLAST THEN
        EXIT(ReservEntry."Entry No.")
      ELSE
        EXIT(0);
    END;

    PROCEDURE CollectAffectedSurplusEntries@16(VAR TempReservEntry@1002 : TEMPORARY Record 337) @1000 : Boolean;
    BEGIN
      TempSurplusEntry.RESET;
      TempReservEntry.RESET;

      IF NOT TempSurplusEntry.FINDSET THEN
        EXIT(FALSE)
      ELSE
        REPEAT
          TempReservEntry := TempSurplusEntry;
          TempReservEntry.INSERT;
        UNTIL TempSurplusEntry.NEXT = 0;

      TempSurplusEntry.DELETEALL;

      EXIT(TRUE);
    END;

    PROCEDURE UpdateOrderTracking@26(VAR TempReservEntry@1000 : TEMPORARY Record 337);
    VAR
      ReservEntry@1004 : Record 337;
      SurplusEntry@1002 : Record 337;
      ReservationMgt@1001 : Codeunit 99000845;
      AvailabilityDate@1003 : Date;
      FirstLoop@1005 : Boolean;
    BEGIN
      FirstLoop := TRUE;

      WHILE TempReservEntry.FINDSET DO BEGIN
        IF FirstLoop THEN BEGIN
          GetItem(TempReservEntry."Item No.");
          IF Item."Order Tracking Policy" = Item."Order Tracking Policy"::None THEN BEGIN
            REPEAT
              IF ((TempReservEntry."Source Type" = DATABASE::"Item Ledger Entry") OR
                  (TempReservEntry."Lot No." = '') AND (TempReservEntry."Serial No." = '')) THEN BEGIN
                ReservEntry := TempReservEntry;
                ReservEntry.DELETE;
              END;
            UNTIL TempReservEntry.NEXT = 0;
            EXIT;
          END;
          FirstLoop := FALSE;
        END;
        CLEAR(SurplusEntry);
        SurplusEntry.TESTFIELD("Entry No.",0);
        TempReservEntry.TESTFIELD("Item No.",Item."No.");
        IF ReservEntry.GET(TempReservEntry."Entry No.",TempReservEntry.Positive) THEN
          IF ReservEntry."Reservation Status" = ReservEntry."Reservation Status"::Surplus THEN
            ReservEntry."Quantity (Base)" := ReservationMgt.MatchSurplus(ReservEntry,SurplusEntry,
              ReservEntry."Quantity (Base)",NOT ReservEntry.Positive,AvailabilityDate,Item."Order Tracking Policy");
        TempReservEntry.DELETE;
        IF SurplusEntry."Entry No." <> 0 THEN BEGIN
          IF ReservEntry."Quantity (Base)" = 0 THEN
            ReservEntry.DELETE
          ELSE BEGIN
            ReservEntry.VALIDATE("Quantity (Base)");
            ReservEntry.MODIFY;
          END;
          TempReservEntry := SurplusEntry;
          IF NOT TempReservEntry.INSERT THEN
            TempReservEntry.MODIFY;
        END;
      END;
    END;

    PROCEDURE UpdateActionMessages@10(SurplusEntry@1000 : Record 337);
    VAR
      ReservEntry@1002 : Record 337;
      ActionMessageEntry@1001 : Record 99000849;
    BEGIN
      ActionMessageEntry.RESET;
      ActionMessageEntry.SETCURRENTKEY("Reservation Entry");
      ActionMessageEntry.SETRANGE("Reservation Entry",SurplusEntry."Entry No.");
      IF NOT ActionMessageEntry.ISEMPTY THEN
        ActionMessageEntry.DELETEALL;
      IF NOT (SurplusEntry."Reservation Status" = SurplusEntry."Reservation Status"::Surplus) THEN
        EXIT;
      ReservMgt.IssueActionMessage(SurplusEntry,FALSE,ReservEntry);
    END;

    LOCAL PROCEDURE GetItem@11(ItemNo@1000 : Code[20]);
    BEGIN
      IF Item."No." <> ItemNo THEN
        Item.GET(ItemNo);
    END;

    PROCEDURE ItemTrackingMismatch@25(ReservEntry@1000 : Record 337;NewSerialNo@1003 : Code[20];NewLotNo@1002 : Code[20]) : Boolean;
    VAR
      ReservEntry2@1001 : Record 337;
    BEGIN
      IF (NewLotNo = '') AND (NewSerialNo = '') THEN
        EXIT(FALSE);

      IF ReservEntry."Reservation Status" > ReservEntry."Reservation Status"::Tracking THEN
        EXIT(FALSE);

      ReservEntry2.GET(ReservEntry."Entry No.",NOT ReservEntry.Positive);

      IF ReservEntry2."Item Tracking" = ReservEntry2."Item Tracking"::None THEN
        EXIT(FALSE);

      IF (ReservEntry2."Lot No." <> '') AND (NewLotNo <> '') THEN
        IF (ReservEntry2."Lot No." <> NewLotNo) THEN
          EXIT(TRUE);

      IF (ReservEntry2."Serial No." <> '') AND (NewSerialNo <> '') THEN
        IF (ReservEntry2."Serial No." <> NewSerialNo) THEN
          EXIT(TRUE);

       EXIT(FALSE);
    END;

    PROCEDURE InitRecordSet@24(VAR ReservEntry@1000 : Record 337) : Boolean;
    BEGIN
      EXIT(InitRecordSet2(ReservEntry,'',''));
    END;

    PROCEDURE InitRecordSet2@14(VAR ReservEntry@1000 : Record 337;CurrSerialNo@1003 : Code[20];CurrLotNo@1004 : Code[20]) : Boolean;
    VAR
      IsDemand@1002 : Boolean;
      CarriesItemTracking@1001 : Boolean;
    BEGIN
      // Used for combining sorting of reservation entries with priorities
      IF NOT ReservEntry.FINDSET THEN
        EXIT(FALSE);

      IsDemand := ReservEntry."Quantity (Base)" < 0;

      TempSortRec1.RESET;
      TempSortRec2.RESET;
      TempSortRec3.RESET;
      TempSortRec4.RESET;

      TempSortRec1.DELETEALL;
      TempSortRec2.DELETEALL;
      TempSortRec3.DELETEALL;
      TempSortRec4.DELETEALL;

      REPEAT
        IF NOT ItemTrackingMismatch(ReservEntry,CurrSerialNo,CurrLotNo) THEN BEGIN
          TempSortRec1 := ReservEntry;
          TempSortRec1.INSERT;
          CarriesItemTracking := (TempSortRec1."Lot No." <> '') OR (TempSortRec1."Serial No." <> '');
          IF CarriesItemTracking THEN BEGIN
            TempSortRec2 := TempSortRec1;
            TempSortRec2.INSERT;
          END;

          IF TempSortRec1."Reservation Status" = TempSortRec1."Reservation Status"::Reservation THEN
            IF TempSortRec1."Expected Receipt Date" = 0D THEN // Inventory
              IF IsDemand THEN
                IF CarriesItemTracking THEN BEGIN
                  TempSortRec4 := TempSortRec1;
                  TempSortRec4.INSERT;
                  TempSortRec2.DELETE;
                END ELSE BEGIN
                  TempSortRec3 := TempSortRec1;
                  TempSortRec3.INSERT;
                END;
         END;
      UNTIL ReservEntry.NEXT = 0;

      SetKeyAndFilters(TempSortRec1);
      SetKeyAndFilters(TempSortRec2);
      SetKeyAndFilters(TempSortRec3);
      SetKeyAndFilters(TempSortRec4);

      EXIT(NEXTRecord(ReservEntry) <> 0);
    END;

    PROCEDURE NEXTRecord@13(VAR ReservEntry@1000 : Record 337) : Integer;
    VAR
      Found@1001 : Boolean;
    BEGIN
      // Used for combining sorting of reservation entries with priorities
      IF NOT TempSortRec1.FINDFIRST THEN
        EXIT(0);

      IF TempSortRec1."Reservation Status" = TempSortRec1."Reservation Status"::Reservation THEN BEGIN
        IF NOT TempSortRec4.ISEMPTY THEN BEGIN // Reservations with item tracking against inventory
          TempSortRec4.FINDFIRST;
          TempSortRec1 := TempSortRec4;
          TempSortRec4.DELETE;
          Found := TRUE;
        END ELSE
          IF NOT TempSortRec3.ISEMPTY THEN BEGIN // Reservations with no item tracking against inventory
            TempSortRec3.FINDFIRST;
            TempSortRec1 := TempSortRec3;
            TempSortRec3.DELETE;
            Found := TRUE;
          END;
      END;

      IF NOT Found THEN BEGIN
        TempSortRec2.SETRANGE("Reservation Status",TempSortRec1."Reservation Status");
        IF NOT TempSortRec2.ISEMPTY THEN BEGIN // Records carrying item tracking
          TempSortRec2.FINDFIRST;
          TempSortRec1 := TempSortRec2;
          TempSortRec2.DELETE;
        END ELSE BEGIN
          TempSortRec2.SETRANGE("Reservation Status");
          IF NOT TempSortRec2.ISEMPTY THEN BEGIN // Records carrying item tracking
            TempSortRec2.FINDFIRST;
            TempSortRec1 := TempSortRec2;
            TempSortRec2.DELETE;
          END;
        END;
      END;

      ReservEntry := TempSortRec1;
      TempSortRec1.DELETE;
      EXIT(1);
    END;

    LOCAL PROCEDURE SetKeyAndFilters@12(VAR ReservEntry@1001 : Record 337);
    BEGIN
      IF ReservEntry.ISEMPTY THEN
        EXIT;

      ReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status",
        "Shipment Date","Expected Receipt Date");

      IF ReservEntry.FINDFIRST THEN
        ReservMgt.SetPointerFilter(ReservEntry);
    END;

    PROCEDURE RenamePointer@15(TableID@1005 : Integer;OldSubtype@1004 : Integer;OldID@1003 : Code[20];OldBatchName@1002 : Code[10];OldProdOrderLine@1001 : Integer;OldRefNo@1000 : Integer;NewSubtype@1010 : Integer;NewID@1009 : Code[20];NewBatchName@1008 : Code[10];NewProdOrderLine@1007 : Integer;NewRefNo@1006 : Integer);
    VAR
      ReservEntry@1011 : Record 337;
      NewReservEntry@1013 : Record 337;
      PointerFieldIsActive@1012 : ARRAY [6] OF Boolean;
      W@1014 : Dialog;
    BEGIN
      GetActivePointerFields(TableID,PointerFieldIsActive);
      IF NOT PointerFieldIsActive[1] THEN
        EXIT;

      ReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Reservation Status");

      IF PointerFieldIsActive[3] THEN
        ReservEntry.SETRANGE("Source ID",OldID)
      ELSE
        ReservEntry.SETRANGE("Source ID",'');

      IF PointerFieldIsActive[6] THEN
        ReservEntry.SETRANGE("Source Ref. No.",OldRefNo)
      ELSE
        ReservEntry.SETRANGE("Source Ref. No.",0);

      ReservEntry.SETRANGE("Source Type",TableID);

      IF PointerFieldIsActive[2] THEN
        ReservEntry.SETRANGE("Source Subtype",OldSubtype)
      ELSE
        ReservEntry.SETRANGE("Source Subtype",0);

      IF PointerFieldIsActive[4] THEN
        ReservEntry.SETRANGE("Source Batch Name",OldBatchName)
      ELSE
        ReservEntry.SETRANGE("Source Batch Name",'');

      IF PointerFieldIsActive[5] THEN
        ReservEntry.SETRANGE("Source Prod. Order Line",OldProdOrderLine)
      ELSE
        ReservEntry.SETRANGE("Source Prod. Order Line",0);

      ReservEntry.Lock;

      IF ReservEntry.FINDSET THEN BEGIN
        W.OPEN(Text007);
        REPEAT
          NewReservEntry := ReservEntry;
          IF OldSubtype <> NewSubtype THEN
            NewReservEntry."Source Subtype" := NewSubtype;
          IF OldID <> NewID THEN
            NewReservEntry."Source ID" := NewID;
          IF OldBatchName <> NewBatchName THEN
            NewReservEntry."Source Batch Name" := NewBatchName;
          IF OldProdOrderLine <> NewProdOrderLine THEN
            NewReservEntry."Source Prod. Order Line" := NewProdOrderLine;
          IF OldRefNo <> NewRefNo THEN
            NewReservEntry."Source Ref. No." := NewRefNo;
          ReservEntry.DELETE;
          NewReservEntry.INSERT;
        UNTIL ReservEntry.NEXT = 0;
        W.CLOSE;
      END;
    END;

    LOCAL PROCEDURE GetActivePointerFields@17(TableID@1000 : Integer;VAR PointerFieldIsActive@1001 : ARRAY [6] OF Boolean);
    BEGIN
      CLEAR(PointerFieldIsActive);
      PointerFieldIsActive[1] := TRUE;  // Type

      CASE TableID OF
        DATABASE::"Sales Line",DATABASE::"Purchase Line",DATABASE::"Service Line":
          BEGIN
            PointerFieldIsActive[2] := TRUE;  // SubType
            PointerFieldIsActive[3] := TRUE;  // ID
            PointerFieldIsActive[6] := TRUE;  // RefNo
          END;
        DATABASE::"Requisition Line",DATABASE::"BOM Journal Line":
          BEGIN
            PointerFieldIsActive[3] := TRUE;  // ID
            PointerFieldIsActive[4] := TRUE;  // BatchName
            PointerFieldIsActive[6] := TRUE;  // RefNo
          END;
        DATABASE::"Item Journal Line":
          BEGIN
            PointerFieldIsActive[2] := TRUE;  // SubType
            PointerFieldIsActive[3] := TRUE;  // ID
            PointerFieldIsActive[4] := TRUE;  // BatchName
            PointerFieldIsActive[6] := TRUE;  // RefNo
          END;
        DATABASE::"Job Journal Line":
          BEGIN
            PointerFieldIsActive[2] := TRUE;  // SubType
            PointerFieldIsActive[3] := TRUE;  // ID
            PointerFieldIsActive[4] := TRUE;  // BatchName
            PointerFieldIsActive[6] := TRUE;  // RefNo
          END;
        DATABASE::"Item Ledger Entry":
          BEGIN
            PointerFieldIsActive[6] := TRUE;  // RefNo
          END;
        DATABASE::"Prod. Order Line":
          BEGIN
            PointerFieldIsActive[2] := TRUE;  // SubType
            PointerFieldIsActive[3] := TRUE;  // ID
            PointerFieldIsActive[5] := TRUE;  // ProdOrderLine
          END;
        DATABASE::"Prod. Order Component",  DATABASE::"Transfer Line":
          BEGIN
            PointerFieldIsActive[2] := TRUE;  // SubType
            PointerFieldIsActive[3] := TRUE;  // ID
            PointerFieldIsActive[5] := TRUE;  // ProdOrderLine
            PointerFieldIsActive[6] := TRUE;  // RefNo
          END;
        DATABASE::"Planning Component":
          BEGIN
            PointerFieldIsActive[3] := TRUE;  // ID
            PointerFieldIsActive[4] := TRUE;  // BatchName
            PointerFieldIsActive[5] := TRUE;  // ProdOrderLine
            PointerFieldIsActive[6] := TRUE;  // RefNo
          END;
      ELSE
        PointerFieldIsActive[1] := FALSE;  // Type is not used
      END;
    END;

    PROCEDURE SplitTrackingConnection@18(ReservEntry2@1002 : Record 337;NewDate@1000 : Date);
    VAR
      ActionMessageEntry@1001 : Record 99000849;
      ReservEntry3@1003 : Record 337;
      DummyReservEntry@1005 : Record 337;
      LastEntryNo@1004 : Integer;
    BEGIN
      ActionMessageEntry.SETCURRENTKEY("Reservation Entry");
      ActionMessageEntry.SETRANGE("Reservation Entry",ReservEntry2."Entry No.");
      IF NOT ActionMessageEntry.ISEMPTY THEN
        ActionMessageEntry.DELETEALL;

      ReservEntry3.LOCKTABLE;
      IF ReservEntry3.FINDLAST THEN
        LastEntryNo := ReservEntry3."Entry No.";

      IF ReservEntry2.Positive THEN BEGIN
        ReservEntry2."Expected Receipt Date" := NewDate;
        ReservEntry2."Shipment Date" := 0D;
      END ELSE BEGIN
        ReservEntry2."Shipment Date" := NewDate;
        ReservEntry2."Expected Receipt Date" := 0D;
      END;
      ReservEntry2."Changed By" := USERID;
      ReservEntry2."Reservation Status" := ReservEntry2."Reservation Status"::Surplus;
      ReservEntry2.MODIFY;

      IF ReservEntry3.GET(ReservEntry2."Entry No.",NOT ReservEntry2.Positive) THEN BEGIN // Get related entry
        ReservEntry3.DELETE;
        ReservEntry3."Entry No." := LastEntryNo + 1;
        ReservEntry3."Reservation Status" := ReservEntry3."Reservation Status"::Surplus;
        IF ReservEntry3.Positive THEN
          ReservEntry3."Shipment Date" := 0D
        ELSE
          ReservEntry3."Expected Receipt Date" := 0D;
        ReservEntry3.INSERT;
      END;

      IF ReservEntry2."Quantity (Base)" <> 0 THEN
        ReservMgt.IssueActionMessage(ReservEntry2,FALSE,DummyReservEntry);

      IF ReservEntry3."Quantity (Base)" <> 0 THEN
        ReservMgt.IssueActionMessage(ReservEntry3,FALSE,DummyReservEntry);
    END;

    LOCAL PROCEDURE SaveLostReservQty@22(ReservEntry@1000 : Record 337);
    BEGIN
      IF ReservEntry."Reservation Status" = ReservEntry."Reservation Status"::Reservation THEN BEGIN
        LostReservationQty += ReservEntry."Quantity (Base)";
        ReservationsModified := TRUE;
      END;
    END;

    PROCEDURE RetrieveLostReservQty@21(VAR LostQuantity@1000 : Decimal) ReservEntriesHaveBeenModified : Boolean;
    BEGIN
      LostQuantity := LostReservationQty;
      LostReservationQty := 0;
      ReservEntriesHaveBeenModified := ReservationsModified;
      ReservationsModified := FALSE;
    END;

    LOCAL PROCEDURE SetItemTracking2@23(TempReservEntry2@1000 : Record 337;VAR TrackingSpecification2@1001 : Record 336);
    BEGIN
      IF TempReservEntry2.Binding = TempReservEntry2.Binding::"Order-to-Order" THEN BEGIN
        // only supply can change IT and demand must respect it
        IF TempReservEntry2.Positive AND
          ((TempReservEntry2."Serial No." <> TrackingSpecification2."Serial No.") OR
          (TempReservEntry2."Lot No." <> TrackingSpecification2."Lot No."))
        THEN
          ERROR(Text008,
            TempReservEntry2.FIELDCAPTION(TempReservEntry2."Serial No."),
            TempReservEntry2.FIELDCAPTION(TempReservEntry2."Lot No."),
            TempReservEntry2.FIELDCAPTION(TempReservEntry2.Binding),
            TempReservEntry2.Binding);
      END ELSE BEGIN
        // each record brings/holds own IT
        TrackingSpecification2."Serial No." := TempReservEntry2."Serial No.";
        TrackingSpecification2."Lot No." := TempReservEntry2."Lot No.";
      END;
    END;

    PROCEDURE ResvExistsForSalesHeader@27(VAR SalesHeader@1000 : Record 36) : Boolean;
    VAR
      ReservEntry@1001 : Record 337;
    BEGIN
      InitFilterAndSortingFor(ReservEntry,TRUE);

      WITH SalesHeader DO BEGIN
        ReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
        ReservEntry.SETRANGE("Source Subtype","Document Type");
        ReservEntry.SETRANGE("Source ID","No.");
      END;

      EXIT(ResvExistsForHeader(ReservEntry));
    END;

    PROCEDURE ResvExistsForPurchHeader@28(VAR PurchHeader@1000 : Record 38) : Boolean;
    VAR
      ReservEntry@1001 : Record 337;
    BEGIN
      InitFilterAndSortingFor(ReservEntry,TRUE);

      WITH PurchHeader DO BEGIN
        ReservEntry.SETRANGE("Source Type",DATABASE::"Purchase Line");
        ReservEntry.SETRANGE("Source Subtype","Document Type");
        ReservEntry.SETRANGE("Source ID","No.");
      END;

      EXIT(ResvExistsForHeader(ReservEntry));
    END;

    PROCEDURE ResvExistsForTransHeader@29(VAR TransHeader@1000 : Record 5740) : Boolean;
    VAR
      ReservEntry@1001 : Record 337;
    BEGIN
      InitFilterAndSortingFor(ReservEntry,TRUE);

      WITH TransHeader DO BEGIN
        ReservEntry.SETRANGE("Source Type",DATABASE::"Transfer Line");
        ReservEntry.SETRANGE("Source ID","No.");
      END;

      EXIT(ResvExistsForHeader(ReservEntry));
    END;

    LOCAL PROCEDURE ResvExistsForHeader@30(VAR ReservEntry@1000 : Record 337) : Boolean;
    BEGIN
      ReservEntry.SETRANGE("Source Batch Name",'');
      ReservEntry.SETRANGE("Source Prod. Order Line",0);
      ReservEntry.SETFILTER("Source Ref. No.",'>0');

      EXIT(NOT ReservEntry.ISEMPTY);
    END;

    PROCEDURE SetPick@31(IsPick2@1000 : Boolean);
    BEGIN
      IsPick := IsPick2;
    END;

    BEGIN
    END.
  }
}
