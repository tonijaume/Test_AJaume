OBJECT Codeunit 7009797 Gestion transfer COM
{
  OBJECT-PROPERTIES
  {
    Date=23/07/15;
    Time=11:01:25;
    Modified=Yes;
    Version List=AIC2009,COM;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            LlamarFacturacion;
          END;

  }
  CODE
  {
    VAR
      Text001@1000000000 : TextConst 'ENU=This period has been calculated, do you want to recalculate?;ESP=Este periodo ya ha sido calculado, desea recalcularlo?';
      Text002@1000000001 : TextConst 'ENU=There are no reservations pending to be calculated.;ESP=No hay reservas pendientes de calcular.';
      rError@1000000002 : Record 7009943;
      Text003@1000000003 : TextConst 'ENU="There is no contract for Destination (%1) - Touroperator (%2) - Date (%3) ";ESP="No se ha encontrado contrato para Delegacion (%1) - Touroperador (%2) - Fecha (%3) "';
      Text004@1000000004 : TextConst 'ENU=There is no price zone for zone (%1) in the contract;ESP=No existe zona de precios para la zona (%1) en el contrato';
      Text005@1000000005 : TextConst 'ENU=There is no price for route (%1-%2) service (%3) day (%4) for (%5) persons.;ESP=No hay precio para ruta (%1-%2) servicio (%3) dia (%4) para (%5) personas.';
      Text006@1000000006 : TextConst 'ENU=There is no price for suppplement (%1) for route (%2-%3) service (%4) day (%5) for quantity (%6).;ESP=No hay precio para suplemento (%1) para ruta (%2-%3) servicio (%4) dia (%5) para cantidad (%6).';
      Text007@1000000007 : TextConst 'ENU=Do you want to recalculate the period (%1-%2) for Destination (%3) - Touroperator (%4);ESP=Desea recalcular el periodo (%1-%2) para Delegacion (%3) - Touroperador (%4)';
      Text008@1000000008 : TextConst 'ENU=There are no incomes to invoice in the period (%1-%2) for Destination (%3) - Touroperator (%4);ESP=No hay ingresos que facturar en el periodo (%1-%2) para Delegacion (%3) - Touroperador (%4)';
      Text009@1000000009 : TextConst 'ENU=TRANSFER PROFORMA;ESP=PREFACTURAS TRANSFER';
      rSalesSetup@1000000017 : Record 311;
      cExcel@1000000010 : Codeunit 7009755;
      Text010@1000000011 : TextConst 'ESP=Servicio';
      Text011@1000000012 : TextConst 'ENU=Transfer;ESP=Transfer';
      Text012@1000000013 : TextConst 'ENU=Do you want to cancel the proforma %1.;ESP=Desea deshacer la prefactura %1.';
      Text013@1000000014 : TextConst 'ENU="This proforma (%1) have been invoiced. ";ESP=Esta prefactura (%1) ha sido facturada.';
      Text014@1000000015 : TextConst 'ENU=Do you want to confirm the proforma %1.;ESP=Desea confirmar la prefactura %1.';
      Text015@1000000016 : TextConst 'ENU=There is nothing pending to invoice.;ESP=No hay nada pendiente de facturar.';
      Text016@1000000018 : TextConst 'ENU=Transfer services %1 - %2;ESP=Servicios transfer %1 - %2';
      cSeguridad@1000000019 : Codeunit 7009751;
      Text017@1000000020 : TextConst 'ENU=Flight;ESP=Vuelo';
      Text018@1000000021 : TextConst 'ENU=Creating sale invoice;ESP=Generando factura venta';
      Text019@1000000022 : TextConst 'ENU=Calculating reservations;ESP=Calculando reservas';
      Text020@1000000023 : TextConst 'ENU=Do you want to cancel the calculation of the period (%1-%2) for Destination (%3) - Touroperator (%4);ESP=Desea deshacer el calculo del periodo (%1-%2) para Delegacion (%3) - Touroperador (%4)';
      Text021@1000000024 : TextConst 'ENU=Calculation record no deleted because all the associated incomes are invoiced.;ESP=No se ha borrado el registro de calculo porque todos los ingresos asociados estan facturados.';
      Text022@1000000025 : TextConst 'ENU=Supplement;ESP=Suplemento';
      Text023@1000000026 : TextConst 'ENU=Touroperator booking file;ESP=Fichero bonos touroperador';
      Text024@1000000027 : TextConst 'ENU=Getting touroperator bookings...;ESP=Importando bonos touroperador...';
      Text025@1000000028 : TextConst 'ENU=You must set a period of dates to conciliate;ESP=Debe indicar un periodo de fechas a conciliar';
      Text026@1000000029 : TextConst 'ENU=This register overlaps with another already existing;ESP=Este registro se solapa con otro ya introducido.';
      pwd@1000000030 : TextConst 'ESP=ATENNEA';
      Text027@1000000031 : TextConst 'ENU=Total w/o taxes;ESP=Total sin impuestos';
      Text028@1000000032 : TextConst 'ENU=Total with taxes;ESP=Total con impuestos';
      Text029@1000000033 : TextConst 'ENU=Generated day;ESP=Generada dia';
      Text030@1000000034 : TextConst 'ENU=Generated by;ESP=Generado por';

    PROCEDURE NuevoCalculo@1000000000();
    VAR
      lrCalculo@1000000000 : Record 7009942;
      lrCond@1000000001 : Record 7010085;
    BEGIN
      // NuevoCalculo

      cSeguridad.TienePermiso('COM-CAL-TRF', TRUE);

      //. Pedir los datos de filtro al usuario
      IF NOT _PedirDatos THEN
        EXIT;
      lrCond.GET(USERID);

      //. Comprobar si el periodo ya est  calculado, el usuario podr  decidir si quiere recalcular
      lrCalculo.RESET;
      lrCalculo.SETCURRENTKEY(Modulo);
      lrCalculo.SETRANGE (Modulo       , lrCalculo.Modulo::Transfer);
      //+$007 <
      IF lrCond.Delegacion <> '' THEN
        lrCalculo.SETRANGE (Delegacion   , lrCond.Delegacion);
      //+$007 >
      lrCalculo.SETRANGE (Touroperador , lrCond.TourOperador);
      lrCalculo.SETFILTER("Fecha desde", '>=%1', lrCond."Fecha hasta");
      lrCalculo.SETFILTER("Fecha hasta", '<=%1', lrCond."Fecha desde");
      IF lrCalculo.FINDFIRST THEN
      BEGIN
        IF NOT CONFIRM(Text001) THEN
          EXIT;
      END
      ELSE
      BEGIN
        lrCalculo.INIT;
        lrCalculo.Modulo        := lrCalculo.Modulo::Transfer;
        lrCalculo.Delegacion    := lrCond.Delegacion;
        lrCalculo.Touroperador  := lrCond.TourOperador;
        lrCalculo."Fecha desde" := lrCond."Fecha desde";
        lrCalculo."Fecha hasta" := lrCond."Fecha hasta";
        lrCalculo.INSERT(TRUE);
      END;

      //. Llamar al proceso de c lculo
      _CalcularPeriodo(lrCalculo);
    END;

    PROCEDURE RecalcularPeriodo@1000000011(prCalculo@1000000000 : Record 7009942);
    BEGIN
      // RecalcularPeriodo

      cSeguridad.TienePermiso('COM-CAL-TRF', TRUE);

      IF NOT CONFIRM(Text007, FALSE, prCalculo."Fecha desde", prCalculo."Fecha hasta", prCalculo.Delegacion, prCalculo.Touroperador) THEN
        EXIT;

      _CalcularPeriodo(prCalculo);
    END;

    PROCEDURE DeshacerCalculo@1000000020(prCalculo@1000000000 : Record 7009942);
    VAR
      lrIngreso@1000000001 : Record 7009936;
      lrIngreso2@1000000003 : Record 7009936;
      lrRsv@1000000002 : Record 7009931;
    BEGIN
      // DeshacerCalculo

      //. Pedir confirmacion al usuario
      IF NOT CONFIRM(Text020, FALSE, prCalculo."Fecha desde", prCalculo."Fecha hasta", prCalculo.Delegacion, prCalculo.Touroperador) THEN
        EXIT;

      lrIngreso.RESET;
      lrIngreso.SETCURRENTKEY("ID Calculo");
      lrIngreso.SETRANGE("ID Calculo"    , prCalculo."Id registro");
      lrIngreso.SETRANGE("Num. Documento", '');
      IF lrIngreso.FINDSET THEN
      BEGIN
        REPEAT
          IF lrRsv.GET(lrIngreso.Destino, lrIngreso.Touroperador, lrIngreso."Num. Bono",
                       lrIngreso."Fecha servicio", lrIngreso."ID Servicio") THEN
          BEGIN
            lrRsv.Calculada := FALSE;
            lrRsv.MODIFY;
          END;

          lrIngreso2 := lrIngreso;
          lrIngreso2.DELETE;
        UNTIL lrIngreso.NEXT = 0;

        prCalculo.DELETE;
      END
      ELSE
      BEGIN
        lrIngreso.RESET;
        lrIngreso.SETCURRENTKEY("ID Calculo");
        lrIngreso.SETRANGE("ID Calculo"    , prCalculo."Id registro");
        IF lrIngreso.FINDFIRST THEN
          MESSAGE(Text021)
        ELSE
          prCalculo.DELETE;
      END;
    END;

    PROCEDURE VerResultadosCalculo@1000000009(prCalculo@1000000000 : Record 7009942);
    VAR
      lrIngreso@1000000001 : Record 7009936;
    BEGIN
      // VerResultadosCalculo

      lrIngreso.RESET;
      lrIngreso.SETCURRENTKEY("ID Calculo");
      lrIngreso.SETRANGE("ID Calculo", prCalculo."Id registro");
      FORM.RUN(0, lrIngreso);
    END;

    LOCAL PROCEDURE _PedirDatos@1000000001() : Boolean;
    VAR
      lrCond@1000000000 : Record 7010085;
      lfSeleccion@1000000001 : Form 7010029;
    BEGIN
      // _PedirDatos

      lrCond.InicializaRegistro;
      COMMIT;

      lrCond.GET(USERID);
      lrCond.FILTERGROUP(2);
      lrCond.SETRECFILTER;
      lrCond.FILTERGROUP(0);

      CLEAR(lfSeleccion);
      lfSeleccion.SETTABLEVIEW(lrCond);
      IF lfSeleccion.RUNMODAL <> ACTION::OK THEN
        EXIT(FALSE);

      //. Comprobamos si los datos estan correctamente rellenados
      lrCond.GET(USERID);
      //+$001lrCond.TESTFIELD(Delegacion);
      lrCond.TESTFIELD(TourOperador);
      lrCond.TESTFIELD("Fecha desde");
      lrCond.TESTFIELD("Fecha hasta");

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE _CalcularPeriodo@1000000006(prCalculo@1000000000 : Record 7009942);
    VAR
      lrContrato@1000000002 : Record 7009788;
      lrRsv@1000000001 : Record 7009931;
      lrRsv2@1000000003 : Record 7009931;
      lwDialog@1000000004 : Dialog;
    BEGIN
      // _CalcularPeriodo

      _BorrarErroresAnteriores(prCalculo."Id registro");

      lrRsv.RESET;
      //+$007 <
      IF prCalculo.Delegacion <> '' THEN
        lrRsv.SETRANGE(Destino         , prCalculo.Delegacion);
      //+$007 >
      lrRsv.SETRANGE(Touroperador    , prCalculo.Touroperador);
      lrRsv.SETRANGE("Fecha servicio", prCalculo."Fecha desde", prCalculo."Fecha hasta");
      lrRsv.SETRANGE(Calculada       , FALSE);
      IF lrRsv.FINDSET THEN
      BEGIN
        lwDialog.OPEN(Text019);
        REPEAT
          lrRsv2 := lrRsv;

          _BorrarIngresosAnteriores(lrRsv2);

          IF _GetContrato(lrContrato, lrRsv2."Delegacion Atennea", lrRsv2.Touroperador, lrRsv2."Fecha servicio") THEN
          BEGIN
            IF _BuscarZonasPrecio(lrRsv2, lrContrato, prCalculo."Id registro") THEN
            BEGIN
              _CalcularReserva(prCalculo."Id registro", lrRsv2, lrContrato);
              _CalcularSuplementos(prCalculo."Id registro", lrRsv2, lrContrato);

              //. Si no hay errores marcaremos la reserva como calculada
              IF NOT _ReservaTieneErrores(prCalculo."Id registro", lrRsv2) THEN
              BEGIN
                lrRsv2.Calculada := TRUE;
                lrRsv2.MODIFY;
              END;
            END;
          END
          ELSE
            rError.InsertaError(prCalculo."Id registro",
                                STRSUBSTNO(Text003, lrRsv2."Delegacion Atennea", lrRsv2.Touroperador, lrRsv2."Fecha servicio"), '', '');
        UNTIL lrRsv.NEXT = 0;

        //. Marcamos la ultima fecha de calculo
        prCalculo."Ultimo recalculo" := CURRENTDATETIME;

        //. Si el calculo finaliza con algun error mostrar un mensaje para permitir ver los errores
        rError.RESET;
        rError.FILTERGROUP(2);
        rError.SETRANGE("ID calculo", prCalculo."Id registro");
        rError.FILTERGROUP(0);
        IF rError.FINDFIRST THEN
          prCalculo."Calculo completado" := FALSE
        ELSE
          prCalculo."Calculo completado" := TRUE;
        prCalculo.MODIFY;

        lwDialog.CLOSE;

        IF NOT prCalculo."Calculo completado" THEN
        BEGIN
          COMMIT;
          FORM.RUNMODAL(0, rError);
        END;
      END
      ELSE
        MESSAGE(Text002);
    END;

    LOCAL PROCEDURE _GetContrato@1000000002(VAR prContrato@1000000004 : Record 7009788;pwDelegacion@1000000001 : Code[10];pwTouroperador@1000000000 : Code[10];pwFecha@1000000002 : Date) : Boolean;
    BEGIN
      // _GetContrato

      prContrato.RESET;
      prContrato.SETRANGE (Delegacion             , pwDelegacion);
      prContrato.SETRANGE (TourOperador           , pwTouroperador);
      prContrato.SETFILTER("Fecha inicio contrato", '<=%1', pwFecha);
      prContrato.SETFILTER("Fecha final contrato" , '>=%1', pwFecha);
      prContrato.SETRANGE (Confirmado             , TRUE);
      prContrato.SETRANGE (Comercializadora       , TRUE);
      EXIT(prContrato.FINDFIRST);
    END;

    LOCAL PROCEDURE _BuscarZonasPrecio@1000000003(VAR prRsv@1000000000 : Record 7009931;prContrato@1000000001 : Record 7009788;pwIDCalculo@1000000003 : Integer) lwCorrecto : Boolean;
    VAR
      lrZona@1000000002 : Record 7009791;
    BEGIN
      // _BuscarZonasPrecio

      lwCorrecto := TRUE;

      //lrZona.RESET;
      //lrZona.SETRANGE(Delegacion     , prContrato.Delegacion);
      //lrZona.SETRANGE(Contrato       , prContrato."N§ Contrato Venta");
      //lrZona.SETRANGE("Tipo contrato", lrZona."Tipo contrato"::Venta);
      //lrZona.SETRANGE("Zona fisica"  , prRsv."Zona aeropuerto");
      //IF lrZona.FINDFIRST THEN
      //BEGIN
      //  prRsv."Zona origen ruta" := lrZona.Zona;
      //  prRsv.MODIFY;
      //END
      //ELSE
      //BEGIN
      //  lwCorrecto := FALSE;
      //
      //  rError.InsertaError(pwIDCalculo,
      //                      STRSUBSTNO(Text004, prRsv."Zona aeropuerto"), prContrato."N§ Contrato Venta", prRsv.GETPOSITION);
      //END;

      prRsv."Zona origen ruta" := prRsv."Zona aeropuerto";
      prRsv.MODIFY;

      lrZona.SETRANGE("Zona fisica"  , prRsv."Zona hotel");
      IF lrZona.FINDFIRST THEN
      BEGIN
        prRsv."Zona destino ruta" := lrZona.Zona;
        prRsv.MODIFY;
      END
      ELSE
      BEGIN
        lwCorrecto := FALSE;
        rError.InsertaError(pwIDCalculo,
                            STRSUBSTNO(Text004, prRsv."Zona hotel"), prContrato."N§ Contrato Venta", prRsv.GETPOSITION);
      END;

      EXIT(lwCorrecto);
    END;

    LOCAL PROCEDURE _CalcularReserva@1000000008(pwIDCalculo@1000000004 : Integer;prRsv@1000000001 : Record 7009931;prContrato@1000000000 : Record 7009788);
    VAR
      lrPrecio@1000000002 : Record 7009790;
      lwPersonas@1000000003 : Integer;
    BEGIN
      // _CalcularReserva

      prRsv.CALCFIELDS(Adultos, Ni¤os);
      lwPersonas := prRsv.Adultos + prRsv.Ni¤os;

      //. Precio base del servicio de transfer
      lrPrecio.RESET;
      lrPrecio.SETRANGE (Delegacion      , prContrato.Delegacion);
      lrPrecio.SETRANGE ("N§ Contrato"   , prContrato."N§ Contrato Venta");
      lrPrecio.SETRANGE ("Codigo precio" , lrPrecio."Codigo precio"::"Precio Base");
      lrPrecio.SETFILTER("Fecha desde"   , '<=%1', prRsv."Fecha servicio");
      lrPrecio.SETFILTER("Fecha hasta"   , '>=%1', prRsv."Fecha servicio");
      lrPrecio.SETRANGE (Origen          , prRsv."Zona origen ruta");
      lrPrecio.SETRANGE (Destino         , prRsv."Zona destino ruta");
      lrPrecio.SETFILTER("Tipo operacion", '%1|%2', prRsv."Tipo operacion" + 1, lrPrecio."Tipo operacion"::Ambos);
      lrPrecio.SETRANGE ("Tipo Traslado" , prRsv."Tipo servicio venta");
      lrPrecio.SETFILTER("Rango desde"   , '<=%1', lwPersonas);
      lrPrecio.SETFILTER("Rango hasta"   , '>=%1', lwPersonas);
      lrPrecio.SETRANGE (Activo          , TRUE);
      IF lrPrecio.FINDFIRST THEN
        _CrearIngresoReserva(pwIDCalculo, prContrato."N§ Contrato Venta", 0, 0, prRsv, lrPrecio)
      ELSE
        rError.InsertaError(pwIDCalculo,
                            STRSUBSTNO(Text005, prRsv."Zona origen ruta", prRsv."Zona destino ruta", prRsv."Tipo servicio venta",
                                                prRsv."Fecha servicio", lwPersonas),
                            prContrato."N§ Contrato Venta", prRsv.GETPOSITION);
    END;

    LOCAL PROCEDURE _CalcularSuplementos@1000000005(pwIDCalculo@1000000002 : Integer;prRsv@1000000001 : Record 7009931;prContrato@1000000000 : Record 7009788);
    VAR
      lrSuplRsv@1000000003 : Record 7009933;
      lrPrecio@1000000004 : Record 7009790;
    BEGIN
      // _CalcularSuplementos

      lrSuplRsv.RESET;
      lrSuplRsv.SETRANGE(Destino         , prRsv.Destino);
      lrSuplRsv.SETRANGE(Touroperador    , prRsv.Touroperador);
      lrSuplRsv.SETRANGE("Num. Bono"     , prRsv."Num. Bono");
      lrSuplRsv.SETRANGE("Fecha servicio", prRsv."Fecha servicio");
      lrSuplRsv.SETRANGE("ID Servicio"   , prRsv."ID Servicio");
      IF lrSuplRsv.FINDSET THEN
      BEGIN
        REPEAT
          lrPrecio.RESET;
          lrPrecio.SETRANGE (Delegacion      , prContrato.Delegacion);
          lrPrecio.SETRANGE ("N§ Contrato"   , prContrato."N§ Contrato Venta");
          lrPrecio.SETRANGE ("Codigo precio" , lrPrecio."Codigo precio"::Suplemento);
          lrPrecio.SETFILTER("Fecha desde"   , '<=%1', prRsv."Fecha servicio");
          lrPrecio.SETFILTER("Fecha hasta"   , '>=%1', prRsv."Fecha servicio");
          lrPrecio.SETRANGE (Origen          , prRsv."Zona origen ruta");
          lrPrecio.SETRANGE (Destino         , prRsv."Zona destino ruta");
          lrPrecio.SETFILTER("Rango desde"   , '<=%1', lrSuplRsv.Cantidad);
          lrPrecio.SETFILTER("Rango hasta"   , '>=%1', lrSuplRsv.Cantidad);
          lrPrecio.SETRANGE ("Tipo elemento" , lrSuplRsv."Codigo suplemento");
          lrPrecio.SETRANGE (Activo          , TRUE);
          IF lrPrecio.FINDFIRST THEN
            _CrearIngresoReserva(pwIDCalculo, prContrato."N§ Contrato Venta", 1, lrSuplRsv.Cantidad, prRsv, lrPrecio)
          ELSE
            rError.InsertaError(pwIDCalculo,
                                STRSUBSTNO(Text006, lrSuplRsv."Codigo suplemento", prRsv."Zona origen ruta", prRsv."Zona destino ruta",
                                                    prRsv."Tipo servicio venta", prRsv."Fecha servicio", lrSuplRsv.Cantidad),
                                prContrato."N§ Contrato Venta", prRsv.GETPOSITION);
        UNTIL lrSuplRsv.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _CrearIngresoReserva@1000000004(pwIDCalculo@1000000000 : Integer;pwNumContrato@1000000005 : Code[10];pwTipoLinea@1000000004 : Integer;pwCantidad@1000000006 : Decimal;prRsv@1000000001 : Record 7009931;prPrecio@1000000002 : Record 7009790);
    VAR
      lrIngreso@1000000003 : Record 7009936;
    BEGIN
      // _CrearIngresoReserva

      lrIngreso.INIT;
      lrIngreso.Destino               := prRsv.Destino;
      lrIngreso.Touroperador          := prRsv.Touroperador;
      lrIngreso."Num. Bono"           := prRsv."Num. Bono";
      lrIngreso."Fecha servicio"      := prRsv."Fecha servicio";
      lrIngreso."ID Servicio"         := prRsv."ID Servicio";
      lrIngreso."ID Calculo"          := pwIDCalculo;
      lrIngreso."Tipo servicio venta" := prRsv."Tipo servicio venta";
      lrIngreso."Tipo operacion"      := prRsv."Tipo operacion";

      CASE pwTipoLinea OF
        0: //. Esta es la linea del servicio
        BEGIN
          lrIngreso.Adultos               := prRsv.Adultos;
          lrIngreso.Ni¤os                 := prRsv.Ni¤os;
          IF prPrecio."Tipo Aplicacion" = prPrecio."Tipo Aplicacion"::Pax THEN
          BEGIN
            lrIngreso."Precio adulto" := prPrecio."Precio Adulto";
            lrIngreso."Precio ni¤o"   := prPrecio."Precio Ni¤o";
            lrIngreso.VALIDATE(Importe, (lrIngreso.Adultos * lrIngreso."Precio adulto") +
                                        (lrIngreso.Ni¤os * lrIngreso."Precio ni¤o"));
          END
          ELSE
          BEGIN
            lrIngreso."Precio adulto" := prPrecio.Precio;
            lrIngreso.VALIDATE(Importe, prPrecio.Precio);
          END;
        END;
        1: //. Esta es la linea de cada suplemento
        BEGIN
          lrIngreso.Cantidad := pwCantidad;
          IF prPrecio."Tipo Aplicacion" = prPrecio."Tipo Aplicacion"::Pax THEN
          BEGIN
            lrIngreso."Precio adulto" := prPrecio.Precio;
            lrIngreso.VALIDATE(Importe, (lrIngreso.Cantidad * lrIngreso."Precio adulto"));
          END
          ELSE
          BEGIN
            lrIngreso."Precio adulto" := prPrecio.Precio;
            lrIngreso.VALIDATE(Importe, prPrecio.Precio);
          END;
        END;
      END;

      lrIngreso."Origen ruta"     := prPrecio.Origen;
      lrIngreso."Destino ruta"    := prPrecio.Destino;
      lrIngreso."Tipo aplicacion" := prPrecio."Tipo Aplicacion";
      lrIngreso.VALIDATE("Num. Contrato", pwNumContrato);

      IF lrIngreso.Importe <> 0 THEN
        lrIngreso.INSERT(TRUE)
    END;

    LOCAL PROCEDURE _ReservaTieneErrores@1000000010(pwIDCalculo@1000000001 : Integer;prRsv@1000000000 : Record 7009931) : Boolean;
    BEGIN
      // _ReservaTieneErrores

      rError.RESET;
      rError.SETRANGE("ID calculo", pwIDCalculo);
      rError.SETRANGE(Reserva     , prRsv.GETPOSITION);
      EXIT(NOT rError.ISEMPTY);
    END;

    LOCAL PROCEDURE _BorrarErroresAnteriores@1000000012(pwIDCalculo@1000000000 : Integer);
    BEGIN
      // _BorrarErroresAnteriores

      rError.RESET;
      rError.SETRANGE("ID calculo", pwIDCalculo);
      IF rError.FINDSET(TRUE) THEN
        rError.DELETEALL;
    END;

    LOCAL PROCEDURE _BorrarIngresosAnteriores@1000000007(prRsv@1000000001 : Record 7009931);
    VAR
      lrIngreso@1000000000 : Record 7009936;
    BEGIN
      // _BorrarIngresosAnteriores

      lrIngreso.RESET;
      lrIngreso.SETRANGE(Destino         , prRsv.Destino);
      lrIngreso.SETRANGE(Touroperador    , prRsv.Touroperador);
      lrIngreso.SETRANGE("Num. Bono"     , prRsv."Num. Bono");
      lrIngreso.SETRANGE("Fecha servicio", prRsv."Fecha servicio");
      lrIngreso.SETRANGE("ID Servicio"   , prRsv."ID Servicio");
      lrIngreso.SETRANGE("Num. Documento", '');
      IF lrIngreso.FINDSET(TRUE) THEN
        lrIngreso.DELETEALL;
    END;

    PROCEDURE LlamarFacturacion@1000000013();
    VAR
      lrIngreso@1000000000 : Record 7009936;
      lfIngresos@1000000001 : Form 7010058;
    BEGIN
      // LlamarFacturacion

      lrIngreso.RESET;
      lrIngreso.SETCURRENTKEY("Num. Documento", "Num. Prefactura", Destino, Touroperador, "Fecha servicio", "Num. Bono");
      lrIngreso.SETRANGE("Num. Documento", '');

      CLEAR(lfIngresos);
      lfIngresos.SETTABLEVIEW(lrIngreso);
      lfIngresos.RUN;
    END;

    PROCEDURE CrearPrefactura@1000000014(pwSoloSuplemento@1000000003 : Boolean);
    VAR
      lrIngreso@1000000000 : Record 7009936;
      lrCond@1000000001 : Record 7010085;
      lrSuplemento@1000000004 : Record 7009715;
      lwNumPrefactura@1000000002 : Code[10];
    BEGIN
      // CrearPrefactura

      cSeguridad.TienePermiso('COM-FRA-TRF', TRUE);

      //. Pedir los datos de filtro al usuario
      IF NOT _PedirDatos THEN
        EXIT;
      lrCond.GET(USERID);

      //. Si es una facturacion de suplemento, pedir al usuario que lo seleccione
      IF pwSoloSuplemento THEN
      BEGIN
        lrSuplemento.RESET;
        lrSuplemento.FILTERGROUP(2);
        lrSuplemento.SETRANGE(Humano, FALSE);
        lrSuplemento.FILTERGROUP(0);
        IF FORM.RUNMODAL(0, lrSuplemento) <> ACTION::LookupOK THEN
          EXIT;
      END;

      //. Filtramos los ingresos para marcarlos con el numero de prefactura
      lrIngreso.RESET;
      lrIngreso.SETCURRENTKEY("Num. Documento", "Num. Prefactura", Destino, Touroperador, "Fecha servicio", "Num. Bono");
      lrIngreso.SETRANGE("Num. Prefactura", '');
      //+$001 <
      IF lrCond.Delegacion <> '' THEN
        lrIngreso.SETRANGE(Destino     , lrCond.Delegacion);
      //+$001 >
      lrIngreso.SETRANGE(Touroperador     , lrCond.TourOperador);
      lrIngreso.SETRANGE("Fecha servicio" , lrCond."Fecha desde", lrCond."Fecha hasta");
      IF pwSoloSuplemento THEN
        lrIngreso.SETRANGE("Codigo suplemento", lrSuplemento."Tipo elemento");
      IF lrIngreso.FINDSET(TRUE) THEN
      BEGIN
        lwNumPrefactura := _GetNumPrefactura;
        lrIngreso.MODIFYALL("Num. Prefactura", lwNumPrefactura);

        COMMIT;

        //. Lanzar la impresi¢n directamente en EXCEL
        lrIngreso.RESET;
        lrIngreso.SETCURRENTKEY("Num. Documento", "Num. Prefactura", Destino, Touroperador, "Fecha servicio", "Num. Bono");
        lrIngreso.SETRANGE("Num. Prefactura", lwNumPrefactura);
        lrIngreso.FINDFIRST;
        ImprimirPrefactura(lrIngreso);
      END
      ELSE
        ERROR(Text008, lrCond."Fecha desde", lrCond."Fecha hasta", lrCond.Delegacion, lrCond.TourOperador);
    END;

    LOCAL PROCEDURE _GetNumPrefactura@1000000015() : Code[20];
    VAR
      lcPar@1000000000 : Codeunit 7009700;
      lcNoSeriesMgt@1000000001 : Codeunit 396;
    BEGIN
      // _GetNumPrefactura

      lcPar.CrearSerieEstandar('ATTRANSPRE', Text009, '', FALSE, FALSE);

      EXIT(lcNoSeriesMgt.GetNextNo('ATTRANSPRE', TODAY, TRUE));
    END;

    PROCEDURE ImprimirPrefactura@1000000016(VAR prIngreso@1000000000 : Record 7009936);
    VAR
      lrRsv@1000000003 : Record 7009931;
      lrSuplemento@1000000005 : Record 7009715;
      lwLinea@1000000002 : Integer;
      lwServicio@1000000001 : Text[80];
      lwTextFormula@1000000004 : Text[30];
    BEGIN
      // ImprimirPrefactura

      CLEAR(cExcel);

      //. Cabecera del informe
      _LineaCabeceraPrefactura(prIngreso);
      lwLinea := 5;

      //. Lineas de detalle
      prIngreso.FINDSET;
      REPEAT
        lwLinea += 1;

        IF NOT lrRsv.GET(prIngreso.Destino, prIngreso.Touroperador, prIngreso."Num. Bono", prIngreso."Fecha servicio",
                         prIngreso."ID Servicio") THEN
          CLEAR(lrRsv);


        CASE prIngreso."Tipo linea" OF
          prIngreso."Tipo linea"::Base:
          BEGIN
            lwServicio := Text011 + ': ' + prIngreso."Origen ruta" + ' - ' + prIngreso."Destino ruta" +
                          ' (' + FORMAT(prIngreso."Tipo servicio venta") + ')';
            cExcel.ValorCelda2(lwLinea, 10, FORMAT(prIngreso."Precio adulto"));// prIngreso."Precio adulto"
            cExcel.ValorCelda2(lwLinea, 11, FORMAT(prIngreso."Precio ni¤o"));// prIngreso."Precio ni¤o"
          END;
          prIngreso."Tipo linea"::Suplemento:
          BEGIN
            lrSuplemento.GET(prIngreso."Codigo suplemento");
            lwServicio := Text022 + ': ' + lrSuplemento.Descripcion;
            cExcel.ValorCelda2(lwLinea, 10, FORMAT(prIngreso.Cantidad)); // prIngreso.Cantidad
            cExcel.ValorCelda2(lwLinea, 11, FORMAT(0)); // 0
          END;
        END;

        cExcel.ValorCelda2(lwLinea, 1, prIngreso."Num. Bono"); // prIngreso."Num. Bono"
        cExcel.ValorCelda2(lwLinea, 2, FORMAT(prIngreso."Fecha servicio")); // prIngreso."Fecha servicio"
        cExcel.ValorCelda2(lwLinea, 3, lwServicio); // Descripcion servicio
        cExcel.Rango(lwLinea, 3, lwLinea, 6);
        cExcel.CombinarSinCentrar;

        cExcel.ValorCelda2(lwLinea, 7, lrRsv."Compa¤ia aerea" + ' ' + lrRsv."Num. Vuelo"); // Vuelo
        cExcel.ValorCelda2(lwLinea, 8, FORMAT(prIngreso.Adultos)); // prIngreso.Adultos
        cExcel.ValorCelda2(lwLinea, 9, FORMAT(prIngreso.Ni¤os));// prIngreso.Ni¤os
        cExcel.ValorCelda2(lwLinea, 12, FORMAT(prIngreso."Tipo aplicacion"));// prIngreso."Tipo aplicacion"
        cExcel.ValorCelda2(lwLinea, 13, FORMAT(prIngreso.Importe));// prIngreso.Importe
      UNTIL prIngreso.NEXT = 0;

      //. Agrego un total
      lwLinea += 1;
      IF COPYSTR(cExcel.GetNombreHoja, 1, 5) = 'Sheet' THEN
        lwTextFormula := '=SUM(M6..L' + FORMAT(lwLinea-1) + ')'
      ELSE
        lwTextFormula := '=SUMA(M6..L' + FORMAT(lwLinea-1) + ')';

      IF prIngreso."Precios IVA incluido" THEN
        cExcel.ValorCelda(lwLinea, 11, Text028, TRUE, FALSE, FALSE)
      ELSE
        cExcel.ValorCelda(lwLinea, 11, Text027, TRUE, FALSE, FALSE);
      cExcel.Rango(lwLinea, 11, lwLinea, 12);
      cExcel.CombinarSinCentrar;

      cExcel.ValorCelda(lwLinea, 13, lwTextFormula, TRUE, FALSE, FALSE);

      //. Ajustar texto y mostrar al usuario
      cExcel.Rango(1, 1, lwLinea, 13);
      cExcel.AjustarTexto;
      cExcel.ProtegerHoja(pwd);
      cExcel.Mostrar;
    END;

    LOCAL PROCEDURE _LineaCabeceraPrefactura@1000000017(prIngreso@1000000000 : Record 7009936);
    VAR
      lrDelegacion@1000000001 : Record 7009718;
      lrTouroperador@1000000002 : Record 7009717;
    BEGIN
      // _LineaCabecera

      cExcel.Nuevo;

      //. Linea 1
      cExcel.ValorCelda(1, 1, prIngreso.FIELDCAPTION("Num. Prefactura"), TRUE, FALSE, FALSE);
      cExcel.AnchoColumna(15);
      cExcel.ValorCelda2(1, 2, prIngreso."Num. Prefactura");

      cExcel.ValorCelda(1, 10, Text029, TRUE, FALSE, FALSE);
      cExcel.Rango(1, 10, 1, 11);
      cExcel.CombinarSinCentrar;
      cExcel.ValorCelda2(1, 12, FORMAT(CURRENTDATETIME));
      cExcel.Rango(1, 12, 1, 13);
      cExcel.CombinarSinCentrar;

      //. Linea 2
      cExcel.ValorCelda(2, 1, prIngreso.FIELDCAPTION(Destino), TRUE, FALSE, FALSE);
      lrDelegacion.GET(prIngreso.Destino);
      cExcel.ValorCelda2(2, 2, prIngreso.Destino + ' - ' + lrDelegacion.Nombre);
      cExcel.Rango(2, 2, 2, 5);
      cExcel.CombinarSinCentrar;

      cExcel.ValorCelda(2, 10, Text030, TRUE, FALSE, FALSE);
      cExcel.Rango(2, 10, 2, 11);
      cExcel.CombinarSinCentrar;
      cExcel.ValorCelda2(2, 12, USERID);
      cExcel.Rango(2, 12, 2, 13);
      cExcel.CombinarSinCentrar;

      //. Linea 3
      cExcel.ValorCelda(3, 1, prIngreso.FIELDCAPTION(Touroperador), TRUE, FALSE, FALSE);
      lrTouroperador.GET(prIngreso.Touroperador);
      cExcel.ValorCelda2(3, 2, prIngreso.Touroperador + ' - ' + lrTouroperador.Nombre);
      cExcel.Rango(3, 2, 3, 5);
      cExcel.CombinarSinCentrar;

      //. Linea 5
      cExcel.ValorCelda(5, 1, prIngreso.FIELDCAPTION("Num. Bono"), TRUE, FALSE, FALSE);  // prIngreso."Num. Bono"
      cExcel.ValorCelda(5, 2, prIngreso.FIELDCAPTION("Fecha servicio"), TRUE, FALSE, FALSE);  // prIngreso."Fecha servicio"
      cExcel.AnchoColumna(15);
      cExcel.ValorCelda(5, 3, Text010, TRUE, FALSE, FALSE);  // prIngreso."Origen ruta"
      cExcel.Rango(5, 3, 5, 6);
      cExcel.CombinarSinCentrar;
      cExcel.ValorCelda(5, 7, Text017, TRUE, FALSE, FALSE); // prIngreso.Adultos
      cExcel.ValorCelda(5, 8, prIngreso.FIELDCAPTION(Adultos), TRUE, FALSE, FALSE); // prIngreso.Adultos
      cExcel.ValorCelda(5, 9, prIngreso.FIELDCAPTION(Ni¤os), TRUE, FALSE, FALSE); // prIngreso.Ni¤os
      cExcel.ValorCelda(5, 10, prIngreso.FIELDCAPTION("Precio adulto"), TRUE, FALSE, FALSE);   // prIngreso."Precio adulto"
      cExcel.ValorCelda(5, 11, prIngreso.FIELDCAPTION("Precio ni¤o"), TRUE, FALSE, FALSE);   // prIngreso."Precio ni¤o"
      cExcel.ValorCelda(5, 12, prIngreso.FIELDCAPTION("Tipo aplicacion"), TRUE, FALSE, FALSE);   // prIngreso."Tipo aplicacion"
      cExcel.AnchoColumna(15);
      cExcel.ValorCelda(5, 13, prIngreso.FIELDCAPTION(Importe), TRUE, FALSE, FALSE);   // prIngreso.Importe
    END;

    PROCEDURE DeshacerPrefactura@1000000022(prIngreso@1000000000 : Record 7009936);
    VAR
      lrIngreso@1000000001 : Record 7009936;
    BEGIN
      // DeshacerPrefactura

      IF prIngreso."Num. Prefactura" = '' THEN
        EXIT;

      IF NOT CONFIRM(Text012, FALSE, prIngreso."Num. Prefactura") THEN
        EXIT;

      lrIngreso.RESET;
      lrIngreso.SETRANGE ("Num. Prefactura", prIngreso."Num. Prefactura");
      lrIngreso.SETFILTER("Num. Documento" , '<>%1', '');
      IF lrIngreso.FINDFIRST THEN
        ERROR(Text013, lrIngreso."Num. Documento");

      lrIngreso.SETRANGE("Num. Documento");
      lrIngreso.MODIFYALL("Num. Prefactura", '');
    END;

    PROCEDURE FacturarTransfer@1000000023(prIngreso@1000000000 : Record 7009936);
    VAR
      lrIngreso@1000000001 : Record 7009936;
      lrSetupTO@1000000002 : Record 7009705;
      lrCabVenta@1000000004 : Record 36;
      lrCabImp@1000000005 : Record 7009908;
      lrDimVal@1000000009 : Record 349;
      lcRelease@1000000006 : Codeunit 414;
      lwImporte@1000000003 : Decimal;
      lwDialog@1000000007 : Dialog;
      lwDepartamento@1000000008 : Code[20];
      lwFechaDesde@1000000010 : Date;
      lwFechaHasta@1000000011 : Date;
    BEGIN
      // FacturarTransfer

      cSeguridad.TienePermiso('COM-FRA-TRF', TRUE);

      IF (prIngreso."Num. Prefactura" = '') OR
         (prIngreso."Num. Documento" <> '') THEN
        EXIT;

      IF NOT CONFIRM(Text014, FALSE, prIngreso."Num. Prefactura") THEN
        EXIT;

      //. Pedir al usuario el codigo de dimension departamento para la factura

      lrDimVal.RESET;
      lrDimVal.SETRANGE("Dimension Value Type", lrDimVal."Dimension Value Type"::Standard);
      lrDimVal.SETRANGE("Global Dimension No.", 1);
      IF FORM.RUNMODAL(0, lrDimVal) = ACTION::LookupOK THEN
        lwDepartamento := lrDimVal.Code
      ELSE
        lwDepartamento := lrIngreso.Destino;

      lwDialog.OPEN(Text018);

      //. Comprobar datos maestros
      _CheckSetup(prIngreso, lrSetupTO, lwDepartamento);

      //. Acumular los ingresos
      lrIngreso.RESET;
      lrIngreso.SETCURRENTKEY("Num. Documento", "Num. Prefactura", Destino, Touroperador, "Fecha servicio", "Num. Bono");
      lrIngreso.SETRANGE("Num. Prefactura", prIngreso."Num. Prefactura");
      lrIngreso.SETRANGE("Num. Documento" , '');
      IF lrIngreso.FINDSET THEN
      BEGIN
        lwFechaDesde := 0D;
        lwFechaHasta := 0D;
        lwImporte    := 0;
        REPEAT
          IF (lwFechaDesde = 0D) OR (lrIngreso."Fecha servicio" < lwFechaDesde) THEN
            lwFechaDesde := lrIngreso."Fecha servicio";
          IF lrIngreso."Fecha servicio" > lwFechaHasta THEN
            lwFechaHasta := lrIngreso."Fecha servicio";

          lwImporte += lrIngreso.Importe;
        UNTIL lrIngreso.NEXT = 0;
      END
      ELSE
        ERROR(Text015);

      //. Crear factura - Gestion financiera
      _CrearCabVenta(lrCabVenta, lrIngreso, lwImporte, lwDepartamento);
      _CrearLinVenta(lrCabVenta, lrSetupTO, lrIngreso, lwImporte);

      //. Crear factura impresion
      CLEAR(lrCabImp);
      lrCabImp.Modulo           := lrCabImp.Modulo::Transfer;
      lrCabImp.Touroperador     := lrIngreso.Touroperador;
      lrCabImp."Periodo Desde"  := lwFechaDesde;
      lrCabImp."Periodo Hasta"  := lwFechaHasta;
      lrCabImp."Fecha creacion" := CURRENTDATETIME;
      lrCabImp.SetInf(lrCabVenta);
      lrCabImp.INSERT;

      _CrearLineasImpresion(lrCabImp, lrIngreso);

      lrCabImp.GetImportes;
      lrCabImp.MODIFY;

      //. Lanzar factura (proceso estandar para rellenar campos de importe)
      lrCabVenta.GET(lrCabVenta."Document Type", lrCabVenta."No.");
      lcRelease.RUN(lrCabVenta);

      //. El reason code se rellena despues para evitar problemas de permisos
      lrCabVenta.GET(lrCabVenta."Document Type", lrCabVenta."No.");
      lrCabVenta.VALIDATE("Reason Code", 'ATENNEA');
      lrCabVenta.MODIFY;

      //. Ponemos el numero de factura en las lineas de ingreso
      lrIngreso.MODIFYALL("Num. Documento", lrCabImp."No.");

      lwDialog.CLOSE;

      //. Imprimir factura
      lrCabImp.GET(lrCabImp."Tipo documento", lrCabImp."No.");
      lrCabImp.SETRECFILTER;
      ImprimirFacturaTransfer(lrCabImp);
    END;

    PROCEDURE ImprimirFacturaTransfer@1000000019(VAR prCabImp@1000000000 : Record 7009908);
    VAR
      lrPar@1000000001 : Record 7009700;
    BEGIN
      // ImprimirFacturaTransfer

      lrPar.FINDFIRST;
      lrPar.TESTFIELD("Factura Venta Transfer");

      REPORT.RUN(lrPar."Factura Venta Transfer", TRUE, TRUE, prCabImp);
    END;

    LOCAL PROCEDURE _CheckSetup@1000000024(prIngreso@1000000000 : Record 7009936;VAR prSetupTO@1000000003 : Record 7009705;pwDepartamento@1000000001 : Code[20]);
    VAR
      lrDimVal@1000000002 : Record 349;
    BEGIN
      // _CheckSetup

      //. Comprobar la cuenta de ingresos
      prSetupTO.RESET;
      prSetupTO.GET(prIngreso.Destino, prIngreso.Touroperador);
      prSetupTO.TESTFIELD("Cta. venta transfer COM");

      //. Comprobar la dimension para el departamento
      lrDimVal.RESET;
      lrDimVal.SETRANGE("Global Dimension No.", 1);
      lrDimVal.SETRANGE(Code                  , pwDepartamento);
      lrDimVal.FINDFIRST;

      //. Comprobar la dimension para el Touroperador
      lrDimVal.RESET;
      lrDimVal.SETRANGE("Global Dimension No.", 2);
      lrDimVal.SETRANGE(Code                  , prIngreso.Touroperador);
      lrDimVal.FINDFIRST;

      //. Comprobar las series de facturaci¢n
      rSalesSetup.FINDFIRST;
      rSalesSetup.TESTFIELD("Invoice Nos.");
      rSalesSetup.TESTFIELD("Posted Invoice Nos.");
      rSalesSetup.TESTFIELD("Credit Memo Nos.");
      rSalesSetup.TESTFIELD("Posted Credit Memo Nos.");

      //. Comprobar el codigo de auditoria
      _CheckReasonCode;
    END;

    LOCAL PROCEDURE _CrearCabVenta@1000000029(VAR prCabVenta@1000000002 : Record 36;prIngreso@1000000000 : Record 7009936;pwImporte@1000000001 : Decimal;pwDepartamento@1000000003 : Code[20]);
    BEGIN
      // _CrearCabVenta

      prCabVenta.INIT;
      IF pwImporte >= 0 THEN
      BEGIN
        prCabVenta.VALIDATE("Document Type"     , prCabVenta."Document Type"::Invoice);
        prCabVenta.VALIDATE("No. Series"        , rSalesSetup."Invoice Nos.");
        prCabVenta.VALIDATE("Posting No. Series", rSalesSetup."Invoice Nos.");
        prCabVenta.INSERT(TRUE);
      END
      ELSE
      BEGIN
        prCabVenta.VALIDATE("Document Type"     , prCabVenta."Document Type"::"Credit Memo");
        prCabVenta.VALIDATE("No. Series"        , rSalesSetup."Credit Memo Nos.");
        prCabVenta.VALIDATE("Posting No. Series", rSalesSetup."Credit Memo Nos.");
        prCabVenta.INSERT(TRUE);
      END;

      prCabVenta.VALIDATE("Sell-to Customer No."     , prIngreso.Cliente);
      prCabVenta.VALIDATE("Posting Date"             , WORKDATE);
      prCabVenta.VALIDATE("Shortcut Dimension 1 Code", pwDepartamento);
      prCabVenta.VALIDATE("Shortcut Dimension 2 Code", prIngreso.Touroperador);
      prCabVenta.VALIDATE("Posting Description"      , STRSUBSTNO(Text016, prIngreso.Destino, prIngreso.Touroperador));
      prCabVenta.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE _CrearLinVenta@1000000033(prCabVenta@1000000000 : Record 36;prSetupTO@1000000001 : Record 7009705;prIngreso@1000000002 : Record 7009936;pwImporte@1000000003 : Decimal);
    VAR
      lrLinVenta@1000000004 : Record 37;
    BEGIN
      // _CrearLinVenta

      lrLinVenta.INIT;
      lrLinVenta.VALIDATE("Document Type", prCabVenta."Document Type");
      lrLinVenta.VALIDATE("Document No." , prCabVenta."No.");
      lrLinVenta.VALIDATE("Line No."     , 10000);
      lrLinVenta.INSERT(TRUE);

      lrLinVenta.VALIDATE(Type                     , lrLinVenta.Type::"G/L Account");
      lrLinVenta.VALIDATE("No."                    , prSetupTO."Cta. venta transfer COM");
      lrLinVenta.VALIDATE("VAT Prod. Posting Group", prIngreso."Gr. Registro IVA Producto");
      lrLinVenta.VALIDATE(Quantity                 , 1);
      lrLinVenta.VALIDATE("Unit Price"             , ABS(pwImporte));
      lrLinVenta.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE _CrearLineasImpresion@1000000018(prCabImp@1000000000 : Record 7009908;VAR prIngreso@1000000001 : Record 7009936);
    VAR
      lrLinImp@1000000002 : Record 7009909;
      lrVATSetup@1000000004 : Record 325;
      lrRsv@1000000005 : Record 7009931;
      lrSuplemento@1000000003 : Record 7009715;
    BEGIN
      // _CrearLineasImpresion

      prIngreso.FINDSET;
      REPEAT
        lrLinImp.INIT;
        lrLinImp.VALIDATE("Tipo documento", prCabImp."Tipo documento");
        lrLinImp.VALIDATE("N§ documento"  , prCabImp."No.");
        lrLinImp.VALIDATE("Line No."      , 0);

        //. Campos de informacion IVA
        lrVATSetup.GET(prIngreso."Grupo registro IVA neg.", prIngreso."Gr. Registro IVA Producto");
        lrLinImp."% IVA"                    := prIngreso."% IVA";
        lrLinImp."Grupo registro IVA neg."  := prIngreso."Grupo registro IVA neg.";
        lrLinImp."Grupo registro IVA prod." := prIngreso."Gr. Registro IVA Producto";
        lrLinImp."Cod. divisa"              := prIngreso."Cod. Divisa";
        lrLinImp."VAT Identifier"           := lrVATSetup."VAT Identifier";
        lrLinImp."Impuesto Incluidos"       := prIngreso."Precios IVA incluido";

        //. Campos de informacion de la reserva
        lrRsv.GET(prIngreso.Destino, prIngreso.Touroperador, prIngreso."Num. Bono",
                  prIngreso."Fecha servicio", prIngreso."ID Servicio");

        lrLinImp.Delegacion          := prIngreso.Destino;
        lrLinImp.TourOperador        := prIngreso.Touroperador;
        lrLinImp.Bono                := prIngreso."Num. Bono";
        lrLinImp.Fecha               := prIngreso."Fecha servicio";
        lrLinImp.Zona                := prIngreso."Destino ruta";
        lrLinImp.Aeropuerto          := lrRsv."Aeropuerto local";
        lrLinImp.Hotel               := lrRsv.Hotel;
        lrLinImp.Nombre              := lrRsv."Nombre cliente";
        lrLinImp.Vuelo               := lrRsv."Compa¤ia aerea" + ' ' + lrRsv."Num. Vuelo";
        lrLinImp."Precio x vehiculo" := (prIngreso."Tipo aplicacion" = prIngreso."Tipo aplicacion"::Persona);

        CASE prIngreso."Tipo linea" OF
          prIngreso."Tipo linea"::Base:
          BEGIN
            //. Campos de importe
            IF prIngreso."Tipo aplicacion" = prIngreso."Tipo aplicacion"::Persona THEN
            BEGIN
              IF prIngreso.Adultos <> 0 THEN
              BEGIN
                lrLinImp.Concepto   := 'BASE';
                lrLinImp."Tipo Pax" := 'ADU';
                lrLinImp.Cantidad   := prIngreso.Adultos;
                lrLinImp.Precio     := prIngreso."Precio adulto";
                lrLinImp.Importe    := prIngreso.Adultos * prIngreso."Precio adulto";
                lrLinImp.SetImportes;
                lrLinImp.INSERT(TRUE);
              END;

              IF prIngreso.Ni¤os <> 0 THEN
              BEGIN
                lrLinImp.Concepto   := 'BASE';
                lrLinImp."Line No." := 0;
                lrLinImp."Tipo Pax" := 'CHD';
                lrLinImp.Cantidad   := prIngreso.Ni¤os;
                lrLinImp.Precio     := prIngreso."Precio ni¤o";
                lrLinImp.Importe    := prIngreso.Ni¤os * prIngreso."Precio ni¤o";
                lrLinImp.SetImportes;
                lrLinImp.INSERT(TRUE);
              END;
            END
            ELSE
            BEGIN
              lrLinImp.Concepto   := 'BASE';
              lrLinImp."Tipo Pax" := 'RSV';
              lrLinImp.Cantidad   := prIngreso.Adultos + prIngreso.Ni¤os;
              lrLinImp.Precio     := prIngreso."Precio adulto";
              lrLinImp.Importe    := prIngreso.Importe;
              lrLinImp.SetImportes;
              lrLinImp.INSERT(TRUE);
            END;
          END;
          prIngreso."Tipo linea"::Suplemento:
          BEGIN
            lrSuplemento.GET(prIngreso."Codigo suplemento");

            lrLinImp.Concepto    := 'SUPLEMENTO';
            lrLinImp.Descripcion := lrSuplemento.Descripcion;
            lrLinImp."Tipo Pax"  := prIngreso."Codigo suplemento";
            lrLinImp.Cantidad    := prIngreso.Cantidad;
            lrLinImp.Precio      := prIngreso."Precio adulto";
            lrLinImp.Importe     := prIngreso.Importe;
            lrLinImp.SetImportes;
            lrLinImp.INSERT(TRUE);
          END;
        END;
      UNTIL prIngreso.NEXT = 0;
    END;

    LOCAL PROCEDURE _CheckReasonCode@1000000031();
    VAR
      lrReason@1000000000 : Record 231;
      TextCodAu@1000000001 : TextConst 'ENU=ATENNEA;ESP=ATENNEA';
    BEGIN
      // _CheckReasonCode

      IF NOT lrReason.GET(TextCodAu) THEN
      BEGIN
        lrReason.INIT;
        lrReason.Code        := TextCodAu;
        lrReason.Description := lrReason.Code;
        lrReason.INSERT;
      END;
    END;

    PROCEDURE ImportarBonosTouroperador@1000000021();
    VAR
      lrTouroperador@1000000001 : Record 7009717;
      lrDestino@1000000006 : Record 7009859;
      lrBono@1000000000 : Record 7009937;
      lrExcelTMP@1000000004 : ARRAY [2] OF TEMPORARY Record 370;
      lrContrato@1000000012 : Record 7009788;
      CommonDialogMgt@1000000005 : Codeunit 412;
      lwTouroperador@1000000002 : Code[10];
      lwDestino@1000000007 : Code[10];
      lwNameFile@1000000003 : Text[250];
      lwFecha@1000000008 : Date;
      lwInteger@1000000009 : Integer;
      lwDecimal@1000000010 : Decimal;
      lwDialog@1000000013 : Dialog;
      lwDelegacion@1000000011 : Code[10];
    BEGIN
      // ImportarBonosTouroperador

      CLEAR(lwTouroperador);

      lrTouroperador.RESET;
      IF FORM.RUNMODAL(0, lrTouroperador) = ACTION::LookupOK THEN
        lwTouroperador := lrTouroperador.TourOperador;

      lrDestino.RESET;
      lrDestino.SETRANGE(Tipo, lrDestino.Tipo::"Detalle Pago");
      IF FORM.RUNMODAL(0, lrDestino) = ACTION::LookupOK THEN
        lwDestino := lrDestino.Destino;

      IF lwTouroperador = '' THEN
        EXIT;

      CLEAR(lwNameFile);
      lwNameFile := CommonDialogMgt.OpenFile(Text023, lwNameFile, 4, '*.xlsx',0);
      IF lwNameFile = '' THEN
        EXIT;

      lrExcelTMP[1].RESET;
      lrExcelTMP[1].OpenBook(lwNameFile, 'Sheet1');
      lrExcelTMP[1].ReadSheet;

      lrExcelTMP[1].SETRANGE ("Column No.", 1);
      lrExcelTMP[1].SETFILTER("Row No."   , '>%1', 1); //+$003
      IF lrExcelTMP[1].FINDSET THEN
      BEGIN
        lwDialog.OPEN(Text024);
        REPEAT
          CLEAR(lrBono); //+$002
          lrBono.Destino      := lwDestino;
          lrBono.Touroperador := lwTouroperador;
          lrBono."Num. Bono"  := lrExcelTMP[1]."Cell Value as Text";
          lrBono.INSERT;

          lrExcelTMP[2].SETRANGE ("Row No."   , lrExcelTMP[1]."Row No.");
          lrExcelTMP[2].SETFILTER("Column No.", '<>%1', lrExcelTMP[1]."Column No.");
          IF lrExcelTMP[2].FINDSET THEN
          BEGIN
            REPEAT
              CASE lrExcelTMP[2]."Column No." OF
                2:
                BEGIN
                  IF EVALUATE(lwFecha, lrExcelTMP[2]."Cell Value as Text") THEN
                  BEGIN
                    lrBono."Fecha servicio" := lwFecha;
                    lwDelegacion := _GetDelegacion(lwDestino);
                    _GetContrato(lrContrato, lwDestino, lwTouroperador, lwFecha);
                    lrBono."Cod. Divisa" := lrContrato."C¢d. divisa";
                  END;
                END;
                3: lrBono."Nombre cliente" := lrExcelTMP[2]."Cell Value as Text";
                4: lrBono.Hotel := lrExcelTMP[2]."Cell Value as Text";
                5: lrBono."Nombre hotel" := lrExcelTMP[2]."Cell Value as Text";
                6:
                BEGIN
                  IF EVALUATE(lwInteger, lrExcelTMP[2]."Cell Value as Text") THEN
                    lrBono.Adultos := lwInteger;
                END;
                7:
                BEGIN
                  IF EVALUATE(lwInteger, lrExcelTMP[2]."Cell Value as Text") THEN
                    lrBono.Ni¤os := lwInteger;
                END;
                8:
                BEGIN
                  IF EVALUATE(lwDecimal, lrExcelTMP[2]."Cell Value as Text") THEN
                    lrBono.Importe := lwDecimal;
                END;
              END;
            UNTIL lrExcelTMP[2].NEXT = 0;
            lrBono.MODIFY;
          END;

        UNTIL lrExcelTMP[1].NEXT = 0;
        lwDialog.CLOSE;
      END;
    END;

    PROCEDURE ConciliarBonos@1000000025();
    VAR
      lrCabConTMP@1000000000 : TEMPORARY Record 7009945;
      lrCabCon@1000000001 : Record 7009938;
      lrBonConc@1000000002 : Record 7009939;
      lfBonCon@1000000003 : Form 7010121;
    BEGIN
      // ConciliarBonos

      //. Voy a utilizar el formulario de condiciones de conciliacion de excursiones para reutilizar codigo
      lrCabConTMP.INIT;
      lrCabConTMP.INSERT;

      IF FORM.RUNMODAL(7010307,lrCabConTMP) <> ACTION::LookupOK THEN
        EXIT;

      IF (lrCabConTMP."Fecha desde" = 0D) OR (lrCabConTMP."Fecha hasta" = 0D) THEN
        ERROR(Text025);

      //-$007lrCabConTMP.TESTFIELD(Delegacion);
      lrCabConTMP.TESTFIELD(TourOperador);

      // Comprobamos si ya existe o se solapa con otro registro
      //-$005lrCabCon.RESET;
      //-$005lrCabCon.SETRANGE (TourOperador , lrCabConTMP.TourOperador);
      //-$005lrCabCon.SETFILTER("Fecha desde", '<=%1', lrCabConTMP."Fecha hasta");
      //-$005lrCabCon.SETFILTER("Fecha hasta", '>=%1', lrCabConTMP."Fecha desde");
      //-$005lrCabCon.SETRANGE (Delegacion   , lrCabConTMP.Delegacion);
      //-$005IF lrCabCon.FINDFIRST THEN
      //-$005  ERROR(Text026);
      //-$005lrCabCon.SETRANGE(Destino, lrCabConTMP.Destino);
      //-$005IF lrCabCon.FINDFIRST THEN
      //-$005  ERROR(Text026);

      //. Pasamos los datos de la tabla temporal a la de conciliacion de transfer
      lrCabCon.INIT;
      lrCabCon.Destino               := lrCabConTMP.Delegacion;
      lrCabCon.Delegacion            := lrCabConTMP.Destino;
      lrCabCon.TourOperador          := lrCabConTMP.TourOperador;
      lrCabCon."Fecha desde"         := lrCabConTMP."Fecha desde";
      lrCabCon."Fecha hasta"         := lrCabConTMP."Fecha hasta";
      lrCabCon."Conciliacion manual" := lrCabConTMP."Conciliacion manual";
      lrCabCon.INSERT(TRUE);

      IF lrCabCon."Conciliacion manual" THEN
        _ConciliacionManual(lrCabCon)
      ELSE
        _ConciliacionAutomatica(lrCabCon);

      // Mostramos el detalle de la conciliacion

      COMMIT;

      lrBonConc.RESET;
      lrBonConc.FILTERGROUP(0);
      lrBonConc.SETRANGE("ID conciliacion", lrCabCon."Id registro");
      lrBonConc.FILTERGROUP(2);

      CLEAR(lfBonCon);
      lfBonCon.SETTABLEVIEW(lrBonConc);
      lfBonCon.RUNMODAL;
    END;

    LOCAL PROCEDURE _ConciliacionManual@1000000026(prCabCon@1000000001 : Record 7009938);
    VAR
      lrResCOM@1000000000 : Record 7009931;
      lrBonConc@1000000002 : Record 7009939;
    BEGIN
      // _ConciliacionManual

      lrResCOM.RESET;
      lrResCOM.SETCURRENTKEY(Destino, Touroperador, "Fecha servicio", Calculada, Conciliada);
      //+$007 <
      IF prCabCon.Destino <> '' THEN
        lrResCOM.SETRANGE(Destino, prCabCon.Destino);
      //+$007 >
      lrResCOM.SETRANGE(Touroperador    , prCabCon.TourOperador);
      lrResCOM.SETRANGE("Fecha servicio", prCabCon."Fecha desde", prCabCon."Fecha hasta");
      lrResCOM.SETRANGE(Conciliada      , FALSE);
      IF lrResCOM.FINDSET THEN
      BEGIN
        REPEAT
          lrResCOM.CALCFIELDS(Adultos, Ni¤os, Importe);

          lrBonConc.INIT;
          lrBonConc.ID                       := 0;
          lrBonConc."ID conciliacion"        := prCabCon."Id registro";
          lrBonConc.Destino                  := lrResCOM.Destino;
          lrBonConc."Destino TO"             := lrResCOM.Destino;
          lrBonConc.Touroperador             := lrResCOM.Touroperador;
          lrBonConc."Num. Bono"              := lrResCOM."Num. Bono";
          lrBonConc."Nombre cliente Agencia" := lrResCOM."Nombre cliente";
          lrBonConc."Fecha servicio Agencia" := lrResCOM."Fecha servicio";
          lrBonConc."Hotel Agencia"          := lrResCOM.Hotel;
          lrBonConc."Adultos Agencia"        := lrResCOM.Adultos;
          lrBonConc."Ni¤os Agencia"          := lrResCOM.Ni¤os;
          lrBonConc."Importe Agencia"        := lrResCOM.Importe;
          lrBonConc.Estado                   := lrBonConc.Estado::"No To";
          lrBonConc.INSERT(TRUE);
        UNTIL lrResCOM.NEXT = 0;
        lrResCOM.MODIFYALL(lrResCOM.Conciliada, TRUE);
      END;

      prCabCon."Fecha/Hora ultima comprobacion" := CURRENTDATETIME;
      prCabCon.MODIFY;
    END;

    LOCAL PROCEDURE _ConciliacionAutomatica@1000000028(prCabCon@1000000000 : Record 7009938);
    VAR
      lrBonoTO@1000000001 : Record 7009937;
      lrBonoTO2@1000000008 : Record 7009937;
      lrBonoAg@1000000002 : Record 7009931;
      lrBonoAg2@1000000009 : Record 7009931;
      lrBonoCon@1000000007 : Record 7009939;
      lrConversionTO@1000000005 : Record 7010161;
      lwTouroperador@1000000003 : Code[10];
      lwImporteAgencia@1000000006 : Decimal;
    BEGIN
      // _ConciliacionAutomatica

      lwTouroperador := lrConversionTO.ConversionTouroperador(prCabCon.TourOperador, prCabCon.Destino);
      //+$006 <
      IF lwTouroperador = '' THEN
        lwTouroperador := prCabCon.TourOperador;
      //+$006 >

      lrBonoTO.RESET;
      lrBonoTO.SETCURRENTKEY(Destino, Touroperador, "Fecha servicio");
      //+$007 <
      IF prCabCon.Destino <> '' THEN
        lrBonoTO.SETRANGE(Destino, prCabCon.Destino);
      //+$007 >
      lrBonoTO.SETRANGE(Touroperador    , prCabCon.TourOperador);
      lrBonoTO.SETRANGE("Fecha servicio", prCabCon."Fecha desde", prCabCon."Fecha hasta");
      lrBonoTO.SETRANGE(Conciliado      , FALSE);
      IF lrBonoTO.FINDSET THEN
      BEGIN
        REPEAT
          //. Vamos a cruzar los datos del touroperador con los datos que tenemos en agencia
          lrBonoAg.RESET;
          lrBonoAg.SETRANGE(Destino         , lrBonoTO.Destino);
          lrBonoAg.SETRANGE(Touroperador    , lwTouroperador);
          lrBonoAg.SETRANGE("Num. Bono"     , lrBonoTO."Num. Bono");
          lrBonoAg.SETRANGE("Fecha servicio", lrBonoTO."Fecha servicio");
          lrBonoAg.SETRANGE(Conciliada      , FALSE);
          IF lrBonoAg.FINDFIRST THEN
          BEGIN
            //. Vamos a suponer que el touroperador nos envia una linea por cada Bono/Fecha servicio
            //. Como nosotros podemos tener m s de una, acumularemos
            lwImporteAgencia := 0;
            REPEAT
              lrBonoAg.CALCFIELDS(Importe);

              lwImporteAgencia += lrBonoAg.Importe;

              lrBonoAg2 := lrBonoAg;
              lrBonoAg2.VALIDATE(Conciliada, TRUE);
              lrBonoAg2.MODIFY;
            UNTIL lrBonoAg.NEXT = 0;

            //. Ahora lo comparamos contra el importe del touroperador
            IF lrBonoTO.Importe = lwImporteAgencia THEN
              _CrearConciliacion(prCabCon."Id registro", lrBonoAg, lrBonoTO, lrBonoCon.Estado::Conciliado)
            ELSE
            BEGIN
              IF lrBonoTO.Importe = lwImporteAgencia THEN
                _CrearConciliacion(prCabCon."Id registro", lrBonoAg, lrBonoTO, lrBonoCon.Estado::"+Touroperador")
              ELSE
                _CrearConciliacion(prCabCon."Id registro", lrBonoAg, lrBonoTO, lrBonoCon.Estado::"+Agencia")
            END;
          END
          //. Si no lo hemos encontrado en la misma fecha, buscaremos en otras fechas
          ELSE
          BEGIN
            lrBonoAg.SETRANGE("Fecha servicio");
            IF lrBonoAg.FINDFIRST THEN
            BEGIN
              lrBonoAg.CALCFIELDS(Importe);
              //. Si lo hemos encontrado lo conciliaremos como "Diferencia"
              _CrearConciliacion(prCabCon."Id registro", lrBonoAg, lrBonoTO, lrBonoCon.Estado::Diferencia);

              lrBonoAg2 := lrBonoAg;
              lrBonoAg2.VALIDATE(Conciliada, TRUE);
              lrBonoAg2.MODIFY;
            END
            //. Si no lo hemos encontrado, buscaremos para ver si es pago duplicado
            ELSE
            BEGIN
              lrBonoAg.SETRANGE(Conciliada);
              IF lrBonoAg.FINDFIRST THEN
                _CrearConciliacion(prCabCon."Id registro", lrBonoAg, lrBonoTO, lrBonoCon.Estado::"Pago Dup")
              ELSE
                _CrearConciliacion(prCabCon."Id registro", lrBonoAg, lrBonoTO, lrBonoCon.Estado::"No Agencia")
            END;
          END;

          lrBonoTO2 := lrBonoTO;
          lrBonoTO2.Conciliado := TRUE;
          lrBonoTO2.MODIFY;
        UNTIL lrBonoTO.NEXT = 0;
      END;

      //. Los bonos de agencia que hayan quedado sin conciliar los vamos a marcar
      lrBonoAg.RESET;
      //+$007 <
      IF prCabCon.Destino <> '' THEN
        lrBonoAg.SETRANGE(Destino, prCabCon.Destino);
      //+$007 <
      lrBonoAg.SETRANGE(Touroperador    , lwTouroperador);
      lrBonoAg.SETRANGE("Fecha servicio", prCabCon."Fecha desde", prCabCon."Fecha hasta");
      lrBonoAg.SETRANGE(Conciliada      , FALSE);
      IF lrBonoAg.FINDFIRST THEN
      BEGIN
        CLEAR(lrBonoTO);
        REPEAT
          lrBonoAg.CALCFIELDS(Importe);
          _CrearConciliacion(prCabCon."Id registro", lrBonoAg, lrBonoTO, lrBonoCon.Estado::"No To");

          lrBonoAg2 := lrBonoAg;
          lrBonoAg2.VALIDATE(Conciliada, TRUE);
          lrBonoAg2.MODIFY;
        UNTIL lrBonoAg.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _GetDelegacion@1000000027(pwDestino@1000000000 : Code[10]) : Code[10];
    VAR
      lrParAg@1000000001 : Record 7009700;
      lrConvDestino@1000000002 : Record 7009859;
    BEGIN
      // _GetDelegacion

      lrConvDestino.RESET;
      lrConvDestino.SETRANGE(Tipo   , lrConvDestino.Tipo::"Detalle Pago");
      lrConvDestino.SETRANGE(Destino, pwDestino);
      lrConvDestino.FINDFIRST;

      lrParAg.RESET;
      lrParAg.CHANGECOMPANY(lrConvDestino.Empresa);
      lrParAg.FINDFIRST;

      EXIT(lrParAg.Delegacion);
    END;

    LOCAL PROCEDURE _CrearConciliacion@1000000030(pwConciliacion@1000000000 : Integer;prBonoAg@1000000001 : Record 7009931;prBonoTO@1000000002 : Record 7009937;pwEstado@1000000006 : Integer);
    VAR
      lrBonoCon@1000000003 : Record 7009939;
      lcNom@1000000004 : Codeunit 7009702;
      lrContrato@1000000005 : Record 7009788;
    BEGIN
      // _CrearConciliacion

      _GetContrato(lrContrato, prBonoAg.Destino, prBonoAg.Touroperador, prBonoAg."Fecha servicio");

      lrBonoCon.INIT;
      lrBonoCon.ID                := 0;
      lrBonoCon."ID conciliacion" := pwConciliacion;

      //. Tomamos los datos identificativos del bono agencia, salvo que estn en blanco
      IF prBonoAg.Destino <> '' THEN
        lrBonoCon.Destino := prBonoAg.Destino
      ELSE
        lrBonoCon.Destino := prBonoTO.Destino;

      IF prBonoAg.Touroperador <> '' THEN
        lrBonoCon.Touroperador := prBonoAg.Touroperador
      ELSE
        lrBonoCon.Touroperador := prBonoTO.Touroperador;

      IF prBonoAg."Num. Bono" <> '' THEN
        lrBonoCon."Num. Bono" := prBonoAg."Num. Bono"
      ELSE
        lrBonoCon."Num. Bono" := prBonoTO."Num. Bono";

      lrBonoCon."Fecha servicio Touroperador" := prBonoTO."Fecha servicio";
      lrBonoCon."Nombre cliente Touroperador" := prBonoTO."Nombre cliente";
      lrBonoCon."Hotel Touroperador"          := prBonoTO.Hotel;
      lrBonoCon."Nombre hotel Touroperador"   := prBonoTO."Nombre hotel";
      lrBonoCon."Adultos Touroperador"        := prBonoTO.Adultos;
      lrBonoCon."Ni¤os Touroperador"          := prBonoTO.Ni¤os;
      lrBonoCon."Importe Touroperador"        := prBonoTO.Importe;
      lrBonoCon."Cod. Divisa Touroperador"    := prBonoTO."Cod. Divisa";

      lrBonoCon."Fecha servicio Agencia"      := prBonoAg."Fecha servicio";
      lrBonoCon."Nombre cliente Agencia"      := prBonoAg."Nombre cliente";
      lrBonoCon."Hotel Agencia"               := prBonoAg.Hotel;
      lrBonoCon."Nombre hotel Agencia"        := lcNom.nom_hotel(prBonoAg.Hotel);
      prBonoAg.CALCFIELDS(Adultos, Ni¤os);
      lrBonoCon."Adultos Agencia"             := prBonoAg.Adultos;
      lrBonoCon."Ni¤os Agencia"               := prBonoAg.Ni¤os;
      lrBonoCon."Importe Agencia"             := prBonoAg.Importe;
      lrBonoCon."Cod. Divisa Agencia"         := lrContrato."C¢d. divisa";
      lrBonoCon.Estado                        := pwEstado;
      lrBonoCon.Diferencia                    := lrBonoCon."Importe Agencia" - lrBonoCon."Importe Touroperador";
      lrBonoCon.INSERT(TRUE);
    END;

    BEGIN
    {
      $000 AJS 01042015 El EXCEL de la prefactura esta protegido, la contrase¤a es una TEXTCONSTANT

      $001 AJS 09062015 Permitir crear la prefactura sin filtro de Delegacion

      $002 AJS 16062015 Corregir error de permisos en la importacion

      $003 AJS 23062015 Modifico la funcion ImportarBonosTouroperador para ignorar la fila de encabezados

      $004 AJS 26062015 Vamos a buscar el contrato en funcion del campo Delegacion Atennea

      $005 AJS 03072015 Vamos a dejar que se creen periodos de conciliacion que solapen fechas

      $006 AJS 03072015 En _ConciliacionAutomatica si no encontramos conversion de touroperador, utilizamos el de la conciliacion

      $007 AJS 23072015 El filtro por Delegacion no es obligatorio en el calculo y la conciliacion
    }
    END.
  }
}
