OBJECT Codeunit 6819 EP Modify Data
{
  OBJECT-PROPERTIES
  {
    Date=25/05/05;
    Time=12:00:00;
    Version List=NAVW14.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DecodeXML@1000000000 : Codeunit 6813;
      EncodeXML@1000000003 : Codeunit 6814;
      SupportFunctions@1000000001 : Codeunit 6815;
      InsertHeadDataMgt@1000000004 : Codeunit 6822;
      InsertLineDataMgt@1000000005 : Codeunit 6823;
      ModifyHeadDataMgt@1000000008 : Codeunit 6824;
      ModifyLineDataMgt@1000000007 : Codeunit 6825;
      DeleteHeadDataMgt@1000000010 : Codeunit 6826;
      DeleteLineDataMgt@1000000009 : Codeunit 6827;
      ReadData@1000000006 : Codeunit 6816;
      Text001@1010 : TextConst 'ENU=Delete Head - Returncode %1.;ESP=Eliminar cabecera - C¢d. dev. %1.';

    PROCEDURE InsertHead@1000000002(VAR XMLDocIn@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocOut@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      EPTempNewHeadFields@1000 : Record 6825;
      XMLDocInFilters@1000000019 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocInData@1000000018 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocInStatic@1000000017 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocNewHead@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocOutErrors@1000000014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      DummyXMLDocIn@1000000022 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      DummyXMLDOCUMENTINFO@1000000021 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      DummyXMLFilters@1000000020 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocDummyData@1000000016 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      ErrorOccured@1000000003 : Boolean;
      TableNo@1000000002 : Integer;
      GUID@1000000005 : Text[50];
      OrgRequestType@1000000008 : Code[20];
      UserID@1000000009 : Code[50];
      GroupCode@1000000010 : Code[20];
      ReqTypeType@1000000007 : ' ,List,Detail,Head+Line,System';
    BEGIN
      ErrorOccured := FALSE;

      // Create XML DOM Objects
      IF ISCLEAR(XMLDocInStatic) THEN
        CREATE(XMLDocInStatic);
      IF ISCLEAR(XMLDocInFilters) THEN
        CREATE(XMLDocInFilters);
      IF ISCLEAR(XMLDocInData) THEN
        CREATE(XMLDocInData);
      IF ISCLEAR(XMLDocOutErrors) THEN
        CREATE(XMLDocOutErrors);
      IF ISCLEAR(XMLDocNewHead) THEN
        CREATE(XMLDocNewHead);

      // Create an document to store Errors
      EncodeXML.CreateErrors(XMLDocOutErrors);

      // Split Inbound Document in Filter, Data and Static Data Parts
      DecodeXML.GetXMLDocuments(XMLDocIn,XMLDocInFilters,XMLDocInData,XMLDocInStatic);

      // Get GUID from inbound document
      DecodeXML.GetGUIDFromIn(XMLDocIn,GUID);

      // Get User ID from Static Data Part
      DecodeXML.GetUserID(XMLDocInStatic,UserID);

      // Get the Table From Static Part
      DecodeXML.GetTableNoFromStatic(TableNo,XMLDocInStatic);

      // Get the Origin Request Type
      DecodeXML.GetOrgRequestTypeFromStatic(OrgRequestType,XMLDocInStatic);

      // Get Group for User
      DecodeXML.GetGroup(XMLDocInStatic,GroupCode);

      // Get the information to create the new Head
      DecodeXML.GetNewHeadStandardFields(XMLDocNewHead,XMLDocInStatic);
      DecodeXML.BuildTempNewHeadFieldTable(XMLDocNewHead,GUID,EPTempNewHeadFields);

      // Create Head Record
      InsertHeadDataMgt.InsertHeader(EPTempNewHeadFields,TableNo,GUID,SupportFunctions.CutWSSUserIDto20(UserID));

      // Delete the information to create the new Head
      SupportFunctions.DeleteTempNewHeadFieldTable(GUID);

      // Build an new dummy XMLDocIn to get Data
      IF ISCLEAR(DummyXMLDocIn) THEN
        CREATE(DummyXMLDocIn);
      IF ISCLEAR(DummyXMLDOCUMENTINFO) THEN
        CREATE(DummyXMLDOCUMENTINFO);
      IF ISCLEAR(DummyXMLFilters) THEN
        CREATE(DummyXMLFilters);
      IF ISCLEAR(XMLDocDummyData) THEN
        CREATE(XMLDocDummyData);

      EncodeXML.CreateDummyXMLDocIn(DummyXMLDocIn,GUID);
      EncodeXML.CreateDummyDataPart(XMLDocDummyData);
      EncodeXML.CreateDummyDOCUMENTINFO(DummyXMLDOCUMENTINFO,XMLDocInStatic);
      EncodeXML.CreateDummyFiltersPart(DummyXMLFilters,GUID);

      // Delete Temp Table (used to build Filter for DummyXMLFilters)
      SupportFunctions.DeleteTempHeadFilterTable(GUID);
      SupportFunctions.DeleteTempHeadFilterKeys(GUID);

      // Merge Elements to new XMLDocIn
      EncodeXML.MergeInfoForDummyXMLDocIn(DummyXMLDocIn,DummyXMLDOCUMENTINFO,DummyXMLFilters,XMLDocDummyData);

      // Destroy objects no longer needed
      CLEAR(XMLDocDummyData);
      CLEAR(XMLDocInFilters);
      CLEAR(XMLDocInData);
      CLEAR(XMLDocInStatic);
      CLEAR(XMLDocOutErrors);
      CLEAR(DummyXMLDOCUMENTINFO);
      CLEAR(DummyXMLFilters);
      CLEAR(XMLDocNewHead);

      // Request the data
      SupportFunctions.GetReqTypeFunctions(GroupCode,OrgRequestType,ReqTypeType);
      CASE ReqTypeType OF
        ReqTypeType::List: ReadData.GetLists(DummyXMLDocIn,XMLDocOut);
        ReqTypeType::Detail: ReadData.GetDetail(DummyXMLDocIn,XMLDocOut);
        ReqTypeType::"Head+Line": ReadData.GetHeadLine(DummyXMLDocIn,XMLDocOut);
      END;

      // Destroy objects
      CLEAR(DummyXMLDocIn);
    END;

    PROCEDURE InsertLine@1000000003(VAR XMLDocIn@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocOut@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      XMLDocInFilters@1000000019 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocInData@1000000018 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocInStatic@1000000017 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocInHead@1000000016 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocOutErrors@1000000013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      DummyXMLDocIn@1000000020 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      DummyXMLDOCUMENTINFO@1000000021 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      DummyXMLFilters@1000000022 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocDummyData@1000000014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      ErrorOccured@1000000012 : Boolean;
      TableNo@1000000011 : Integer;
      GUID@1000000010 : Text[50];
      OrgRequestType@1000000007 : Code[20];
      UserID@1000000006 : Code[50];
      GroupCode@1000000005 : Code[20];
      ReqTypeType@1000000002 : ' ,List,Detail,Head+Line,System';
    BEGIN
      ErrorOccured := FALSE;

      // Create XML DOM Objects
      IF ISCLEAR(XMLDocInStatic) THEN
        CREATE(XMLDocInStatic);
      IF ISCLEAR(XMLDocInFilters) THEN
        CREATE(XMLDocInFilters);
      IF ISCLEAR(XMLDocInData) THEN
        CREATE(XMLDocInData);
      IF ISCLEAR(XMLDocOutErrors) THEN
        CREATE(XMLDocOutErrors);
      IF ISCLEAR(XMLDocInHead) THEN
        CREATE(XMLDocInHead);
      IF ISCLEAR(XMLDocDummyData) THEN
        CREATE(XMLDocDummyData);

      // Create an document to store Errors
      EncodeXML.CreateErrors(XMLDocOutErrors);

      // Split Inbound Document in Filter, Data and Static Data Parts
      DecodeXML.GetXMLDocuments(XMLDocIn,XMLDocInFilters,XMLDocInData,XMLDocInStatic);

      // Get GUID from inbound document
      DecodeXML.GetGUIDFromIn(XMLDocIn,GUID);

      // Get User ID from Static Data Part
      DecodeXML.GetUserID(XMLDocInStatic,UserID);

      // Get the Table From Static Part
      DecodeXML.GetTableNoFromStatic(TableNo,XMLDocInStatic);

      // Get the Origin Request Type
      DecodeXML.GetOrgRequestTypeFromStatic(OrgRequestType,XMLDocInStatic);

      // Get Group for User
      DecodeXML.GetGroup(XMLDocInStatic,GroupCode);

      // Get the Head Data Part from Data
      DecodeXML.GetHeadDataFromData(XMLDocInData,XMLDocInHead);

      // Create the Line Record
      InsertLineDataMgt.InsertLine(XMLDocInHead,TableNo,GUID,SupportFunctions.CutWSSUserIDto20(UserID));

      // Build an new dummy XMLDocIn to get Head and Line
      IF ISCLEAR(DummyXMLDocIn) THEN
        CREATE(DummyXMLDocIn);
      IF ISCLEAR(DummyXMLDOCUMENTINFO) THEN
        CREATE(DummyXMLDOCUMENTINFO);
      IF ISCLEAR(DummyXMLFilters) THEN
        CREATE(DummyXMLFilters);

      EncodeXML.CreateDummyXMLDocIn(DummyXMLDocIn,GUID);
      EncodeXML.CreateDummyDataPart(XMLDocDummyData);
      EncodeXML.CreateDummyDOCUMENTINFO(DummyXMLDOCUMENTINFO,XMLDocInStatic);
      EncodeXML.CreateDummyFiltersPart(DummyXMLFilters,GUID);

      // Delete Temp Table (used to build Filter for DummyXMLFilters)
      SupportFunctions.DeleteTempHeadFilterTable(GUID);
      SupportFunctions.DeleteTempHeadFilterKeys(GUID);

      // Merge Elements to new XMLDocIn
      EncodeXML.MergeInfoForDummyXMLDocIn(DummyXMLDocIn,DummyXMLDOCUMENTINFO,DummyXMLFilters,XMLDocDummyData);

      // Destroy objects no longer needed
      CLEAR(XMLDocDummyData);
      CLEAR(XMLDocInFilters);
      CLEAR(XMLDocInData);
      CLEAR(XMLDocInStatic);
      CLEAR(XMLDocOutErrors);
      CLEAR(XMLDocInHead);
      CLEAR(DummyXMLDOCUMENTINFO);
      CLEAR(DummyXMLFilters);
      CLEAR(XMLDocDummyData);

      // Request the data
      SupportFunctions.GetReqTypeFunctions(GroupCode,OrgRequestType,ReqTypeType);
      CASE ReqTypeType OF
        ReqTypeType::List: ReadData.GetLists(DummyXMLDocIn,XMLDocOut);
        ReqTypeType::Detail: ReadData.GetDetail(DummyXMLDocIn,XMLDocOut);
        ReqTypeType::"Head+Line": ReadData.GetHeadLine(DummyXMLDocIn,XMLDocOut);
      END;

      // Destroy objects
      CLEAR(DummyXMLDocIn);
    END;

    PROCEDURE ModifyHead@1000000006(VAR XMLDocIn@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocOut@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      XMLDocInFilters@1000000018 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocInData@1000000017 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocInStatic@1000000016 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocInHead@1000000019 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocOutErrors@1000000014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      DummyXMLDocIn@1000000013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      DummyXMLDOCUMENTINFO@1000000012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      DummyXMLFilters@1000000011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocDummyData@1000000010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocOutData@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeDocOut@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      ErrorOccured@1000000009 : Boolean;
      TableNo@1000000008 : Integer;
      GUID@1000000007 : Text[50];
      OrgRequestType@1000000005 : Code[20];
      UserID@1000000004 : Code[50];
      GroupCode@1000000003 : Code[20];
      ReqTypeType@1000000002 : ' ,List,Detail,Head+Line,System';
      ReturnCode@1000 : Integer;
    BEGIN
      ErrorOccured := FALSE;

      // Create XML DOM Objects
      IF ISCLEAR(XMLDocInStatic) THEN
        CREATE(XMLDocInStatic);
      IF ISCLEAR(XMLDocInFilters) THEN
        CREATE(XMLDocInFilters);
      IF ISCLEAR(XMLDocInData) THEN
        CREATE(XMLDocInData);
      IF ISCLEAR(XMLDocOutErrors) THEN
        CREATE(XMLDocOutErrors);
      IF ISCLEAR(XMLDocInHead) THEN
        CREATE(XMLDocInHead);

      // Create an document to store Errors
      EncodeXML.CreateErrors(XMLDocOutErrors);

      // Split Inbound Document in Filter, Data and Static Data Parts
      DecodeXML.GetXMLDocuments(XMLDocIn,XMLDocInFilters,XMLDocInData,XMLDocInStatic);

      // Get GUID from inbound document
      DecodeXML.GetGUIDFromIn(XMLDocIn,GUID);

      // Get User ID from Static Data Part
      DecodeXML.GetUserID(XMLDocInStatic,UserID);

      // Get the Table From Static Part
      DecodeXML.GetTableNoFromStatic(TableNo,XMLDocInStatic);

      // Get the Origin Request Type
      DecodeXML.GetOrgRequestTypeFromStatic(OrgRequestType,XMLDocInStatic);

      // Get Group for User
      DecodeXML.GetGroup(XMLDocInStatic,GroupCode);

      // Get the Head Data Part from Data modify the Head
      DecodeXML.GetHeadDataFromData(XMLDocInData,XMLDocInHead);

      // Modify Head Record
      ReturnCode :=
        ModifyHeadDataMgt.ModifyHeader(XMLDocInHead,
          TableNo,GUID,GroupCode,OrgRequestType,SupportFunctions.CutWSSUserIDto20(UserID));

      IF ReturnCode > 0 THEN BEGIN
        EncodeXML.AddErrors(XMLDocOutErrors,20,STRSUBSTNO('%1',ReturnCode),'','');

        // Delete Temp Table (used to build Filter for DummyXMLFilters)
        SupportFunctions.DeleteTempHeadFilterTable(GUID);
        SupportFunctions.DeleteTempHeadFilterKeys(GUID);

        IF ISCLEAR(XMLDocOutData) THEN
          CREATE(XMLDocOutData);

        // Create outgoing document
        XMLDocOut.loadXML('<EMPLOYEEPORTAL/>');
        XMLNodeDocOut := XMLDocOut.documentElement;

        // Add GUID to OutGoing XML
        EncodeXML.AddGUID(XMLDocOut,GUID);

        // Add the inbound Static Part for reference
        XMLNode := XMLDocInStatic.documentElement;
        XMLNodeDocOut.appendChild(XMLNode);

        // Create the Data Part (without data)
        XMLDocOutData.loadXML('<DATA/>');

        // Merge Data and Error Part
        SupportFunctions.MergeErrorsPartToData(XMLDocOutData,XMLDocOutErrors);

        // Add outgoing Data Part
        XMLNode := XMLDocOutData.documentElement;
        XMLNodeDocOut.appendChild(XMLNode);

        CLEAR(XMLDocInFilters);
        CLEAR(XMLDocInData);
        CLEAR(XMLDocInStatic);
        CLEAR(XMLDocOutErrors);
        CLEAR(XMLDocInHead);
        CLEAR(XMLDocOutData);
      END ELSE BEGIN
        // Build an new dummy XMLDocIn to get Data
        IF ISCLEAR(DummyXMLDocIn) THEN
          CREATE(DummyXMLDocIn);
        IF ISCLEAR(DummyXMLDOCUMENTINFO) THEN
          CREATE(DummyXMLDOCUMENTINFO);
        IF ISCLEAR(DummyXMLFilters) THEN
          CREATE(DummyXMLFilters);
        IF ISCLEAR(XMLDocDummyData) THEN
          CREATE(XMLDocDummyData);

        EncodeXML.CreateDummyXMLDocIn(DummyXMLDocIn,GUID);
        EncodeXML.CreateDummyDataPart(XMLDocDummyData);
        EncodeXML.CreateDummyDOCUMENTINFO(DummyXMLDOCUMENTINFO,XMLDocInStatic);
        EncodeXML.CreateDummyFiltersPart(DummyXMLFilters,GUID);

        // Delete Temp Table (used to build Filter for DummyXMLFilters)
        SupportFunctions.DeleteTempHeadFilterTable(GUID);
        SupportFunctions.DeleteTempHeadFilterKeys(GUID);

        // Merge Elements to new XMLDocIn
        EncodeXML.MergeInfoForDummyXMLDocIn(DummyXMLDocIn,DummyXMLDOCUMENTINFO,DummyXMLFilters,XMLDocDummyData);

        // Destroy objects no longer needed
        CLEAR(XMLDocDummyData);
        CLEAR(XMLDocInFilters);
        CLEAR(XMLDocInData);
        CLEAR(XMLDocInStatic);
        CLEAR(XMLDocOutErrors);
        CLEAR(DummyXMLDOCUMENTINFO);
        CLEAR(DummyXMLFilters);
        CLEAR(XMLDocInHead);

        // Request the data
        SupportFunctions.GetReqTypeFunctions(GroupCode,OrgRequestType,ReqTypeType);
        CASE ReqTypeType OF
          ReqTypeType::List: ReadData.GetLists(DummyXMLDocIn,XMLDocOut);
          ReqTypeType::Detail: ReadData.GetDetail(DummyXMLDocIn,XMLDocOut);
          ReqTypeType::"Head+Line": ReadData.GetHeadLine(DummyXMLDocIn,XMLDocOut);
        END;

        // Destroy objects
        CLEAR(DummyXMLDocIn);
      END;
    END;

    PROCEDURE ModifyLine@1000000007(VAR XMLDocIn@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocOut@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      XMLDocInFilters@1000000018 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocInData@1000000017 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocInStatic@1000000016 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocInLine@1000000015 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocOutErrors@1000000014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      DummyXMLDocIn@1000000013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      DummyXMLDOCUMENTINFO@1000000012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      DummyXMLFilters@1000000011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocDummyData@1000000010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocOutData@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeDocOut@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      ErrorOccured@1000000009 : Boolean;
      TableNo@1000000008 : Integer;
      GUID@1000000007 : Text[50];
      OrgRequestType@1000000005 : Code[20];
      UserID@1000000004 : Code[50];
      GroupCode@1000000003 : Code[20];
      ReqTypeType@1000000002 : ' ,List,Detail,Head+Line,System';
      ReturnCode@1000 : Integer;
    BEGIN
      ErrorOccured := FALSE;

      // Create XML DOM Objects
      IF ISCLEAR(XMLDocInStatic) THEN
        CREATE(XMLDocInStatic);
      IF ISCLEAR(XMLDocInFilters) THEN
        CREATE(XMLDocInFilters);
      IF ISCLEAR(XMLDocInData) THEN
        CREATE(XMLDocInData);
      IF ISCLEAR(XMLDocOutErrors) THEN
        CREATE(XMLDocOutErrors);
      IF ISCLEAR(XMLDocInLine) THEN
        CREATE(XMLDocInLine);

      // Create an document to store Errors
      EncodeXML.CreateErrors(XMLDocOutErrors);

      // Split Inbound Document in Filter, Data and Static Data Parts
      DecodeXML.GetXMLDocuments(XMLDocIn,XMLDocInFilters,XMLDocInData,XMLDocInStatic);

      // Get GUID from inbound document
      DecodeXML.GetGUIDFromIn(XMLDocIn,GUID);

      // Get User ID from Static Data Part
      DecodeXML.GetUserID(XMLDocInStatic,UserID);

      // Get the Table From Static Part
      DecodeXML.GetTableNoFromStatic(TableNo,XMLDocInStatic);

      // Get the Origin Request Type
      DecodeXML.GetOrgRequestTypeFromStatic(OrgRequestType,XMLDocInStatic);

      // Get Group for User
      DecodeXML.GetGroup(XMLDocInStatic,GroupCode);

      // Get the Line Data Part from Data modify the Line
      // There should be only one DATALINE in XMLDocInData (with data to modify)
      DecodeXML.GetSingleLineDataFromData(XMLDocInData,XMLDocInLine,0,'',TRUE);  // Get first Line in DATALINE Part

      // Modify Line Record
      ReturnCode :=
        ModifyLineDataMgt.ModifyLine(XMLDocInLine,TableNo,GUID,GroupCode,
          OrgRequestType,SupportFunctions.CutWSSUserIDto20(UserID));

      // If record has been modified in the meantime
      IF ReturnCode > 0 THEN BEGIN
        EncodeXML.AddErrors(XMLDocOutErrors,20,STRSUBSTNO('%1',ReturnCode),'','');

        // Delete Temp Table (used to build Filter for DummyXMLFilters)
        SupportFunctions.DeleteTempHeadFilterTable(GUID);
        SupportFunctions.DeleteTempHeadFilterKeys(GUID);

        IF ISCLEAR(XMLDocOutData) THEN
          CREATE(XMLDocOutData);

        // Create outgoing document
        XMLDocOut.loadXML('<EMPLOYEEPORTAL/>');
        XMLNodeDocOut := XMLDocOut.documentElement;

        // Add GUID to OutGoing XML
        EncodeXML.AddGUID(XMLDocOut,GUID);

        // Add the inbound Static Part for reference
        XMLNode := XMLDocInStatic.documentElement;
        XMLNodeDocOut.appendChild(XMLNode);

        // Create the Data Part (without data)
        XMLDocOutData.loadXML('<DATA/>');

        // Merge Data and Error Part
        SupportFunctions.MergeErrorsPartToData(XMLDocOutData,XMLDocOutErrors);

        // Add outgoing Data Part
        XMLNode := XMLDocOutData.documentElement;
        XMLNodeDocOut.appendChild(XMLNode);

        CLEAR(XMLDocInFilters);
        CLEAR(XMLDocInData);
        CLEAR(XMLDocInStatic);
        CLEAR(XMLDocOutErrors);
        CLEAR(XMLDocInLine);
        CLEAR(XMLDocOutData);

      END ELSE BEGIN
        // Build an new dummy XMLDocIn to get Data
        IF ISCLEAR(DummyXMLDocIn) THEN
          CREATE(DummyXMLDocIn);
        IF ISCLEAR(DummyXMLDOCUMENTINFO) THEN
          CREATE(DummyXMLDOCUMENTINFO);
        IF ISCLEAR(DummyXMLFilters) THEN
          CREATE(DummyXMLFilters);
        IF ISCLEAR(XMLDocDummyData) THEN
          CREATE(XMLDocDummyData);

        EncodeXML.CreateDummyXMLDocIn(DummyXMLDocIn,GUID);
        EncodeXML.CreateDummyDataPart(XMLDocDummyData);
        EncodeXML.CreateDummyDOCUMENTINFO(DummyXMLDOCUMENTINFO,XMLDocInStatic);
        EncodeXML.CreateDummyFiltersPart(DummyXMLFilters,GUID);

        // Delete Temp Table (used to build Filter for DummyXMLFilters)
        SupportFunctions.DeleteTempHeadFilterTable(GUID);
        SupportFunctions.DeleteTempHeadFilterKeys(GUID);

        // Merge Elements to new XMLDocIn
        EncodeXML.MergeInfoForDummyXMLDocIn(DummyXMLDocIn,DummyXMLDOCUMENTINFO,DummyXMLFilters,XMLDocDummyData);

        // Destroy objects no longer needed
        CLEAR(XMLDocDummyData);
        CLEAR(XMLDocInFilters);
        CLEAR(XMLDocInData);
        CLEAR(XMLDocInStatic);
        CLEAR(XMLDocOutErrors);
        CLEAR(DummyXMLDOCUMENTINFO);
        CLEAR(DummyXMLFilters);
        CLEAR(XMLDocInLine);

        // Request the data
        SupportFunctions.GetReqTypeFunctions(GroupCode,OrgRequestType,ReqTypeType);
        CASE ReqTypeType OF
          ReqTypeType::List: ReadData.GetLists(DummyXMLDocIn,XMLDocOut);
          ReqTypeType::Detail: ReadData.GetDetail(DummyXMLDocIn,XMLDocOut);
          ReqTypeType::"Head+Line": ReadData.GetHeadLine(DummyXMLDocIn,XMLDocOut);
        END;

        // Destroy objects
        CLEAR(DummyXMLDocIn);
      END;
    END;

    PROCEDURE DeleteHead@1000000008(VAR XMLDocIn@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocOut@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      XMLDocInFilters@1000000018 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocInData@1000000017 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocInStatic@1000000016 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocInHead@1000000015 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocOutErrors@1000000014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocOutData@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLNodeDocOut@1000000020 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNode@1000000019 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      TableNo@1000000008 : Integer;
      GUID@1000000007 : Text[50];
      OrgRequestType@1000000005 : Code[20];
      UserID@1000000004 : Code[50];
      GroupCode@1000000003 : Code[20];
      ReturnCode@1000000006 : Integer;
    BEGIN
      // Create XML DOM Objects
      IF ISCLEAR(XMLDocInStatic) THEN
        CREATE(XMLDocInStatic);
      IF ISCLEAR(XMLDocInFilters) THEN
        CREATE(XMLDocInFilters);
      IF ISCLEAR(XMLDocInData) THEN
        CREATE(XMLDocInData);
      IF ISCLEAR(XMLDocOutErrors) THEN
        CREATE(XMLDocOutErrors);
      IF ISCLEAR(XMLDocInHead) THEN
        CREATE(XMLDocInHead);
      IF ISCLEAR(XMLDocOutData) THEN
        CREATE(XMLDocOutData);

      // Create an document to store Errors
      EncodeXML.CreateErrors(XMLDocOutErrors);

      // Split Inbound Document in Filter, Data and Static Data Parts
      DecodeXML.GetXMLDocuments(XMLDocIn,XMLDocInFilters,XMLDocInData,XMLDocInStatic);

      // Get GUID from inbound document
      DecodeXML.GetGUIDFromIn(XMLDocIn,GUID);

      // Get User ID from Static Data Part
      DecodeXML.GetUserID(XMLDocInStatic,UserID);

      // Get the Table From Static Part
      DecodeXML.GetTableNoFromStatic(TableNo,XMLDocInStatic);

      // Get the Origin Request Type
      DecodeXML.GetOrgRequestTypeFromStatic(OrgRequestType,XMLDocInStatic);

      // Get Group for User
      DecodeXML.GetGroup(XMLDocInStatic,GroupCode);

      // Get the Head Data Part from Data modify the Head
      DecodeXML.GetHeadDataFromData(XMLDocInData,XMLDocInHead);

      // Delete Head Record
      ReturnCode := DeleteHeadDataMgt.DeleteHeader(XMLDocInHead,TableNo,SupportFunctions.CutWSSUserIDto20(UserID));
      IF SupportFunctions.CheckIfDebug THEN
        MESSAGE(Text001,ReturnCode);
      IF ReturnCode > 0 THEN BEGIN
        EncodeXML.AddErrors(XMLDocOutErrors,10,STRSUBSTNO('%1',ReturnCode),'','');
      END ELSE BEGIN
        // Generate Success Message
        EncodeXML.AddErrors(XMLDocOutErrors,1000,STRSUBSTNO('%1',ReturnCode),'','');
      END;

      // Create outgoing document
      XMLDocOut.loadXML('<EMPLOYEEPORTAL/>');
      XMLNodeDocOut := XMLDocOut.documentElement;

      // Add GUID to OutGoing XML
      EncodeXML.AddGUID(XMLDocOut,GUID);

      // Add the inbound Static Part for reference
      XMLNode := XMLDocInStatic.documentElement;
      XMLNodeDocOut.appendChild(XMLNode);

      // Create the Data Part (without data)
      XMLDocOutData.loadXML('<DATA/>');

      // Merge Data and Error Part
      SupportFunctions.MergeErrorsPartToData(XMLDocOutData,XMLDocOutErrors);

      // Add outgoing Data Part
      XMLNode := XMLDocOutData.documentElement;
      XMLNodeDocOut.appendChild(XMLNode);

      // Destroy objects no longer needed
      CLEAR(XMLDocInFilters);
      CLEAR(XMLDocInData);
      CLEAR(XMLDocInStatic);
      CLEAR(XMLDocOutErrors);
      CLEAR(XMLDocOutData);
      CLEAR(XMLDocInHead);
    END;

    PROCEDURE DeleteLine@1000000009(VAR XMLDocIn@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocOut@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      XMLDocInFilters@1000000014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocInData@1000000013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocInStatic@1000000012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocInLine@1000000011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocOutData@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLNodeDocOut@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLDocOutErrors@1000000010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      DummyXMLDocIn@1000000015 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      DummyXMLDOCUMENTINFO@1000000009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      DummyXMLFilters@1000000008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocDummyData@1000000007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      TableNo@1000000006 : Integer;
      GUID@1000000005 : Text[50];
      OrgRequestType@1000000004 : Code[20];
      UserID@1000000003 : Code[50];
      GroupCode@1000000002 : Code[20];
      ReqTypeType@1000000016 : ' ,List,Detail,Head+Line,System';
      ReturnCode@1003 : Integer;
    BEGIN
      // Create XML DOM Objects
      IF ISCLEAR(XMLDocInStatic) THEN
        CREATE(XMLDocInStatic);
      IF ISCLEAR(XMLDocInFilters) THEN
        CREATE(XMLDocInFilters);
      IF ISCLEAR(XMLDocInData) THEN
        CREATE(XMLDocInData);
      IF ISCLEAR(XMLDocOutErrors) THEN
        CREATE(XMLDocOutErrors);
      IF ISCLEAR(XMLDocInLine) THEN
        CREATE(XMLDocInLine);

      // Create an document to store Errors
      EncodeXML.CreateErrors(XMLDocOutErrors);

      // Split Inbound Document in Filter, Data and Static Data Parts
      DecodeXML.GetXMLDocuments(XMLDocIn,XMLDocInFilters,XMLDocInData,XMLDocInStatic);

      // Get GUID from inbound document
      DecodeXML.GetGUIDFromIn(XMLDocIn,GUID);

      // Get User ID from Static Data Part
      DecodeXML.GetUserID(XMLDocInStatic,UserID);

      // Get the Table From Static Part
      DecodeXML.GetTableNoFromStatic(TableNo,XMLDocInStatic);

      // Get the Origin Request Type
      DecodeXML.GetOrgRequestTypeFromStatic(OrgRequestType,XMLDocInStatic);

      // Get Group for User
      DecodeXML.GetGroup(XMLDocInStatic,GroupCode);

      // Get the a Single Line from Data modify the Line
      // There should be only one DATALINE in XMLDocInData
      DecodeXML.GetSingleLineDataFromData(XMLDocInData,XMLDocInLine,0,'',TRUE); // Get first Line in DATALINE Part

      // Delete Line Record
      ReturnCode :=
        DeleteLineDataMgt.DeleteLine(
          XMLDocInLine,TableNo,GUID,SupportFunctions.CutWSSUserIDto20(UserID));

      // If record has been modified in the meantime
      IF ReturnCode > 0 THEN BEGIN
        EncodeXML.AddErrors(XMLDocOutErrors,20,STRSUBSTNO('%1',ReturnCode),'','');

        // Delete Temp Table (used to build Filter for DummyXMLFilters)
        SupportFunctions.DeleteTempHeadFilterTable(GUID);
        SupportFunctions.DeleteTempHeadFilterKeys(GUID);

        IF ISCLEAR(XMLDocOutData) THEN
          CREATE(XMLDocOutData);

        // Create outgoing document
        XMLDocOut.loadXML('<EMPLOYEEPORTAL/>');
        XMLNodeDocOut := XMLDocOut.documentElement;

        // Add GUID to OutGoing XML
        EncodeXML.AddGUID(XMLDocOut,GUID);

        // Add the inbound Static Part for reference
        XMLNode := XMLDocInStatic.documentElement;
        XMLNodeDocOut.appendChild(XMLNode);

        // Create the Data Part (without data)
        XMLDocOutData.loadXML('<DATA/>');

        // Merge Data and Error Part
        SupportFunctions.MergeErrorsPartToData(XMLDocOutData,XMLDocOutErrors);

        // Add outgoing Data Part
        XMLNode := XMLDocOutData.documentElement;
        XMLNodeDocOut.appendChild(XMLNode);

        CLEAR(XMLDocInFilters);
        CLEAR(XMLDocInData);
        CLEAR(XMLDocInStatic);
        CLEAR(XMLDocOutErrors);
        CLEAR(XMLDocInLine);
        CLEAR(XMLDocOutData);

      END ELSE BEGIN
        // Build an new dummy XMLDocIn to get Head and Line
        IF ISCLEAR(DummyXMLDocIn) THEN
          CREATE(DummyXMLDocIn);
        IF ISCLEAR(DummyXMLDOCUMENTINFO) THEN
          CREATE(DummyXMLDOCUMENTINFO);
        IF ISCLEAR(DummyXMLFilters) THEN
          CREATE(DummyXMLFilters);
        IF ISCLEAR(XMLDocDummyData) THEN
          CREATE(XMLDocDummyData);

        EncodeXML.CreateDummyXMLDocIn(DummyXMLDocIn,GUID);
        EncodeXML.CreateDummyDataPart(XMLDocDummyData);
        EncodeXML.CreateDummyDOCUMENTINFO(DummyXMLDOCUMENTINFO,XMLDocInStatic);
        EncodeXML.CreateDummyFiltersPart(DummyXMLFilters,GUID);

        // Delete Temp Table (used to build Filter for DummyXMLFilters)
        SupportFunctions.DeleteTempHeadFilterTable(GUID);
        SupportFunctions.DeleteTempHeadFilterKeys(GUID);

        // Merge Elements to new XMLDocIn
        EncodeXML.MergeInfoForDummyXMLDocIn(DummyXMLDocIn,DummyXMLDOCUMENTINFO,DummyXMLFilters,XMLDocDummyData);

        // Destroy objects no longer needed
        CLEAR(XMLDocDummyData);
        CLEAR(XMLDocInFilters);
        CLEAR(XMLDocInData);
        CLEAR(XMLDocInStatic);
        CLEAR(XMLDocOutErrors);
        CLEAR(XMLDocInLine);
        CLEAR(DummyXMLDOCUMENTINFO);
        CLEAR(DummyXMLFilters);
        CLEAR(XMLDocDummyData);

        // Request the data
        SupportFunctions.GetReqTypeFunctions(GroupCode,OrgRequestType,ReqTypeType);
        CASE ReqTypeType OF
          ReqTypeType::List: ReadData.GetLists(DummyXMLDocIn,XMLDocOut);
          ReqTypeType::Detail: ReadData.GetDetail(DummyXMLDocIn,XMLDocOut);
          ReqTypeType::"Head+Line": ReadData.GetHeadLine(DummyXMLDocIn,XMLDocOut);
        END;

        // Destroy objects
        CLEAR(DummyXMLDocIn);
      END
    END;

    BEGIN
    END.
  }
}
