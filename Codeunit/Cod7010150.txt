OBJECT Codeunit 7010150 Funciones Calcular Circuitos
{
  OBJECT-PROPERTIES
  {
    Date=02/10/12;
    Time=12:00:00;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1103355007 : TextConst 'ENU=Calculating #1######\;ESP=Calculando #1######\';
      Text001@1103355008 : TextConst 'ENU=This process has created errors, Would you like to see them?;ESP=Este proceso ha producido errores, ¨Quiere verlos?';
      Text002@1103355009 : TextConst 'ENU=Would you like to print circuit info;ESP=Desea imprimir la documentaci¢n del circuito';
      Text003@1103355010 : TextConst 'ENU=Incomes;ESP=Ingresos';
      Text004@1103355011 : TextConst 'ENU=There are invoiced income lines, in case you continue credit memos will be created for these lines,\Continue?;ESP=Existen l¡neas de ingreso facturadas, si contin£a se crear n abonos para dichas l¡neas,\¨Continuar?';
      Text005@1103355012 : TextConst 'ENU=Costs;ESP=Costes';
      Text006@1103355013 : TextConst 'ENU=Some cost line is already invoiced, unable to calculate cost;ESP=Alguna linea de coste ya esta facturada, no se puede calcular el coste';
      Text007@1103355014 : TextConst 'ENU=There are line of cost with generated IBR, \;ESP=Existen l¡neas de coste con FPR generado, \';
      Text008@1103355015 : TextConst 'ENU=in case you continue credit memos will be created for these lines,\Continue?;ESP=si contin£a se crear n abonos para dichas l¡neas,\¨Continuar?';
      Text009@1103355016 : TextConst 'ENU=Sale tariff for circuit %1, TourOperator %2, date %3 was not found;ESP=No se ha encontrado tarifa de venta para el circuito %1, TourOperador %2, fecha %3';
      Text010@1103355017 : TextConst 'ENU=Sale price for local office %1, tariff No. %2,;ESP=No existe precio de venta para la delegacion %1, tarifa n§ %2,';
      Text011@1103355018 : TextConst 'ENU=circuit %3, date %4, room %6, category %7, paxes %5;ESP=circuito %3, fecha %4, habitacion %6, categoria %7, paxes %5';
      Text012@1103355019 : TextConst 'ENU=Circuit %3, date %4, extra %5, category %6;ESP=circuito %3, fecha %4, extra %5, categoria %6';
      Text013@1103355020 : TextConst 'ENU=Client %1 does not exist;ESP=El cliente %1 no existe';
      Text014@1103355021 : TextConst 'ENU=Purchase tariff has not been found for %2, local office %1, tariff no. %3;ESP=No se ha encontrado tarifa de compra para %2: delegacion %1, n§ tarifa %3';
      Text015@1103355022 : TextConst 'ENU=Purchase price of carry for local office %1, tariff no. %2, date %3, paxes %4 was not found;ESP=No existe precio de compra de transporte para la delegacion %1, tarifa n§ %2, fecha %3, paxes %4';
      Text016@1103355023 : TextConst 'ENU=Restaurant purchase price for local office %1 does not exist,;ESP=No existe precio de compra de restaurante para la delegacion %1,';
      Text017@1103355024 : TextConst 'ENU=tariff no. %2, date %3, paxes %4, menu %5;ESP=tarifa n§ %2, fecha %3, paxes %4, menu %5';
      Text018@1103355025 : TextConst 'ENU=Companion guide purchase price does not exist for;ESP=No existe precio de compra de gu¡a acompa¤ante para la';
      Text019@1103355026 : TextConst 'ENU=local office %1 , tariff no. %2, date %3, paxes %4;ESP=delegacion %1, tarifa n§ %2, fecha %3, paxes %4';
      Text020@1103355027 : TextConst 'ENU=Official Guide purchase price for tariff no. %1, date %2, paxes %3;ESP=No existe precio de compra de guia oficial para tarifa n§ %1, fecha %2, paxes %3';
      Text021@1103355028 : TextConst 'ENU=Visit purchase price for local office %1 does not exist,;ESP=No existe precio de compra de visita para la delegacion %1,';
      Text022@1103355029 : TextConst 'ENU=tariff no. %2, date %3, paxes %4, visit %5;ESP=tarifa n§ %2, fecha %3, paxes %4, visita %5';
      Text023@1103355030 : TextConst 'ENU=Extra purchase price for local office %1 does not exist,;ESP=No existe precio de compra de extra para la delegacion %1,';
      Text024@1103355031 : TextConst 'ENU=tariff no. %2, date %3, paxes %4, extra %5;ESP=tarifa n§ %2, fecha %3, paxes %4, extra %5';
      Text025@1103355032 : TextConst 'ENU=Supplier %1 does not exist, tariff %2 no. %3;ESP=El proveedor %1 no existe, tarifa %2 n§ %3';
      Text026@1103355033 : TextConst 'ENU=Hotel Extra tariff was not found for circuit %1, Hotel %2, date %3;ESP=No se ha encontrado tarifa Extra hotel para el circuito %1, Hotel %2, fecha %3';
      Finestra@1103355000 : Dialog;
      nRegs@1103355001 : Integer;
      i@1103355002 : Integer;
      TourOperadores@1103355003 : ARRAY [50] OF Code[10];
      Porcentajes@1103355004 : ARRAY [50] OF Decimal;
      Modificado@1103355005 : Boolean;
      TipoCalculo@1103355006 : 'Coste/Ingreso,Efectivo';

    PROCEDURE Calcular_Circuito@1(VAR rCircuito@1103355000 : Record 7010187);
    VAR
      rError@1103355001 : Record 7010202;
      rCirc@1103355002 : Record 7010187;
    BEGIN
      // Calcular_Circuito
      //
      {************************
      // No podemos hacer los c lculos si el guia efectivo no ha sido asignado
      //
      rCircuito.TESTFIELD("Guia Efectivo");
      ************************}
      rError.RESET;
      rError.SETRANGE(Delegacion, rCircuito.Delegacion);
      rError.SETRANGE(Circuito  , rCircuito.Circuito);
      rError.SETRANGE(Orden     , rCircuito.Orden);
      IF rError.FIND('-') THEN
        rError.DELETEALL;

      Finestra.OPEN(Text000 +
                    '@2@@@@@@@@@@@@@@@@@');
      rCircuito.CALCFIELDS("Paxes Calculo");
      Calcular_Ingresos(rCircuito);
      Calcular_Costes(rCircuito);
      Refrescar_Coste_Circuito(rCircuito);
      Finestra.CLOSE;

      IF Modificado THEN BEGIN
        rCircuito."Documentacion Emitida" := FALSE;
        rCircuito.MODIFY;
      END;

      rError.SETRANGE(Error, TRUE);
      IF rError.FIND('-') THEN
        IF CONFIRM(Text001) THEN BEGIN
          COMMIT;
          FORM.RUNMODAL(FORM::"Tabla Error Circuito", rError);
        END;

      IF NOT rCircuito."Documentacion Emitida" THEN
       IF CONFIRM(Text002) THEN
        IF rCirc.GET(rCircuito.Delegacion, rCircuito.Circuito, rCircuito.Orden) THEN BEGIN
          rCirc.SETRECFILTER;
          IF NOT rCirc."Documentacion Emitida" THEN BEGIN
            rCirc."Documentacion Emitida" := TRUE;
            rCirc."Fecha Emision"         := TODAY;
            rCirc.MODIFY;
            COMMIT;
          END;
          REPORT.RUNMODAL(REPORT::"Documentacion Circuito", TRUE, FALSE, rCirc);
        END;

      rCircuito."Pendiente calcular" := FALSE;
      rCircuito.MODIFY;
    END;

    PROCEDURE Calcular_Ingresos@2(VAR rCircuito@1103355000 : Record 7010187);
    VAR
      lrPreExt@1103355001 : Record 7010212;
      lrExtCir@1103355002 : Record 7010213;
      rPaxTO@1103355003 : Record 7010188;
      rTarVta@1103355004 : Record 7010191;
      rPreVta@1103355005 : Record 7010192;
      rCIcirc@1103355006 : Record 7010190;
      rCir@1103355007 : Record 7010187;
      TTOOant@1103355008 : Code[10];
      vPaxes@1103355009 : Integer;
      iTO@1103355010 : Integer;
      Crear_Lineas@1103355011 : Boolean;
      w_num_cierre@1103355012 : Integer;
    BEGIN
      // Calcular_Ingresos
      //
      CLEAR(TourOperadores);
      CLEAR(Porcentajes);

      Finestra.UPDATE(1, Text003);

      rPaxTO.RESET;
      rPaxTO.SETRANGE (Delegacion  , rCircuito.Delegacion);
      rPaxTO.SETRANGE (Circuito    , rCircuito.Circuito);
      rPaxTO.SETRANGE (Orden       , rCircuito.Orden);
      rPaxTO.SETFILTER("N§ Factura", '<>%1', '');

      Crear_Lineas := TRUE;
      IF rPaxTO.FIND('-') THEN BEGIN
        IF CONFIRM(Text004,TRUE) THEN
          Crear_Lineas_Abono_Ing(rPaxTO)
        ELSE
          Crear_Lineas := FALSE;
      END;

      IF Crear_Lineas THEN BEGIN
        Modificado := TRUE;
        rCIcirc.RESET;
        rCIcirc.SETRANGE(Delegacion     , rCircuito.Delegacion);
        rCIcirc.SETRANGE(Circuito       , rCircuito.Circuito);
        rCIcirc.SETRANGE(Orden          , rCircuito.Orden);
        rCIcirc.SETRANGE("Coste/Ingreso", rCIcirc."Coste/Ingreso"::Ingreso);
        rCIcirc.SETRANGE("N§ Factura"   , '');
        rCIcirc.SETRANGE(Regularizacion , FALSE);
        IF rCIcirc.FIND('-') THEN
          rCIcirc.DELETEALL;
      END;

      rPaxTO.SETRANGE ("N§ Factura");

      rPaxTO.SETCURRENTKEY(TourOperador);
      TTOOant := '';
      nRegs := rPaxTO.COUNT;
      i := 0;
      iTO := 0;
      IF rPaxTO.FIND('-') THEN BEGIN
        rCir := rCircuito;
        rCircuito.CALCFIELDS("Paxes Calculo");
        REPEAT
          i := i + 1;
          IF Crear_Lineas THEN
            Finestra.UPDATE(2, ROUND((i / nRegs) * 10000, 1));
          IF TTOOant <> rPaxTO.TourOperador THEN BEGIN
            TTOOant := rPaxTO.TourOperador;
            rCir.SETRANGE("Filtro TO", rPaxTO.TourOperador);
            rCir.CALCFIELDS(Ingreso, "Paxes Calculo");
            vPaxes := rCir."Paxes Calculo";
      //
      // actualizamos la tabla TourOperadores y porcentajes para despu‚s separar los costes por TourOperador
      //
            iTO := iTO + 1;
            TourOperadores[iTO] := rPaxTO.TourOperador;
            Porcentajes[iTO]    := (vPaxes / rCircuito."Paxes Calculo");
            IF Crear_Lineas THEN
              Buscar_Tarifa_Venta(rPaxTO.Delegacion, TTOOant, rCircuito.Fecha, rTarVta, rCircuito);
          END;

          IF Crear_Lineas THEN BEGIN

            // ----  Buscar el ultimo cierre realizado para este Pax TO este numero de cierre  ----
            // ----  nos servira a la hora de facturar                                         ----
            w_num_cierre := busca_ultimo_cierre(rPaxTO);

            IF rPaxTO."Tipo Precio Manual Venta" = rPaxTO."Tipo Precio Manual Venta"::"No aplicar" THEN BEGIN
              IF rTarVta."N§ Tarifa" <> '' THEN BEGIN
                Buscar_Precio_Venta(rTarVta, rPreVta, rCircuito.Circuito, vPaxes, rCircuito.Fecha,
                                    rPaxTO."Tipo Habitacion", rCircuito, rPaxTO."Cod. Categoria");

                rPaxTO.Tarifa := rTarVta."N§ Tarifa";
                rPaxTO.VALIDATE(Precio, rPreVta.Precio);
                rPaxTO.VALIDATE("Impuestos incluidos", rTarVta."Impuestos incluidos");
                rPaxTO.CALCFIELDS(Paxes);

                Insertar_Linea_Ingreso(rCircuito, rPaxTO, rTarVta, rPreVta."Tipo Precio",
                                       rCircuito.Fecha, rPaxTO.Precio , '', rPaxTO.Paxes, w_num_cierre)
              END;
            END

            // ----  Codigo para los precios manuales de venta  ----

            ELSE BEGIN
              rPaxTO.Tarifa := '';
              rPaxTO.VALIDATE(Precio, rPaxTO."Precio Manual venta");
              rPaxTO.CALCFIELDS(Paxes);

              Insertar_Linea_Ingreso(rCircuito, rPaxTO, rTarVta,
                                     rPreVta."Tipo Precio"::Pax, rCircuito.Fecha, rPaxTO.Precio ,
                                     '', rPaxTO.Paxes, w_num_cierre);
            END;

            // ----  Calculo de los precios por extras para la actual linea de Pax TO-Circuito  ----

            lrExtCir.RESET; lrPreExt.INIT;
            lrExtCir.SETRANGE(Delegacion, rPaxTO.Delegacion);
            lrExtCir.SETRANGE(Circuito  , rPaxTO.Circuito);
            lrExtCir.SETRANGE(Orden     , rPaxTO.Orden);
            lrExtCir.SETRANGE("N§ Linea", rPaxTO."N§ Linea");
            IF lrExtCir.FIND('-') THEN BEGIN
              REPEAT

                // ----  Extra calculado en base a un precio manual  ----

                IF lrExtCir."Importe manual" <> 0 THEN BEGIN
                  Insertar_Linea_Ingreso(rCircuito, rPaxTO, rTarVta, rPreVta."Tipo Precio"::Vehiculo,
                                         rCircuito.Fecha, lrExtCir."Importe manual",
                                         lrExtCir."Cod. Extra", lrExtCir.Paxes, w_num_cierre);

                // ----  Extra calculado en base a un precio indicado en la tarifa  ----
                END
                ELSE BEGIN
                  IF rTarVta."N§ Tarifa" <> '' THEN BEGIN
                    lrPreExt.RESET; lrPreExt.INIT;
                    buscar_precio_extra_venta(rTarVta, lrPreExt, lrExtCir, rPaxTO, rCircuito);

                    Insertar_Linea_Ingreso(rCircuito, rPaxTO, rTarVta, lrPreExt."Tipo Precio" - 1,
                                           rCircuito.Fecha, lrPreExt."Precio (DL)",
                                           lrExtCir."Cod. Extra", lrExtCir.Paxes, w_num_cierre)
                  END;
                END;
              UNTIL lrExtCir.NEXT = 0;
            END;

            rPaxTO.MODIFY;
          END;
        UNTIL rPaxTO.NEXT = 0;
        rCir.SETRANGE("Filtro TO");
        IF Crear_Lineas THEN BEGIN
          rPaxTO.MODIFYALL("N§ Prefactura", '');
          rPaxTO.MODIFYALL("N§ Factura"   , '');
        END;
      END;
    END;

    PROCEDURE Calcular_Costes@3(VAR rCircuito@1103355000 : Record 7010187);
    VAR
      rPresCir@1103355001 : Record 7010211;
      rTarCom@1103355002 : Record 7010196;
      rPreTra@1103355003 : Record 7010197;
      rPreRes@1103355004 : Record 7010198;
      rPreGui@1103355005 : Record 7010199;
      rPreExt@1103355006 : Record 7010200;
      rPreVis@1103355007 : Record 7010201;
      Paxes@1103355008 : Integer;
      rCostes@1103355009 : Record 7010190;
      cFun@1103355010 : Codeunit 7010241;
    BEGIN
      // Calcular_Costes
      //
      Finestra.UPDATE(1, Text005);
      Finestra.UPDATE(2, 0);
      rCostes.RESET;

      rCostes.SETRANGE (Delegacion     , rCircuito.Delegacion);
      rCostes.SETRANGE (Circuito       , rCircuito.Circuito);
      rCostes.SETRANGE (Orden          , rCircuito.Orden);
      rCostes.SETRANGE ("Coste/Ingreso", rCostes."Coste/Ingreso"::Coste);
      rCostes.SETFILTER("N§ Factura"   , '<>%1', '');
      IF rCostes.FIND('-') THEN BEGIN
        MESSAGE(Text006);
        EXIT;
      END;
      rCostes.SETRANGE ("N§ Factura");
      rCostes.SETRANGE ("Pendiente FPR", FALSE);
      rCostes.SETRANGE (Regularizacion , FALSE);
      IF rCostes.FIND('-') THEN BEGIN
        IF NOT CONFIRM(Text007 +
                       Text008,TRUE) THEN
          EXIT;
        Crear_Lineas_Abono_Cos(rCostes);
        Modificado := TRUE;
      END;

      rCostes.SETRANGE ("Pendiente FPR", TRUE);
      //rCostes.SETRANGE (Regularizacion , FALSE);
      IF rCostes.FIND('-') THEN
        rCostes.DELETEALL;

      rPresCir.RESET;
      rPresCir.SETRANGE(Circuito, rCircuito.Circuito);
      rPresCir.SETRANGE(Orden   , rCircuito.Orden);
      IF rPresCir.FIND('-') THEN BEGIN
        Paxes := rCircuito."Paxes Calculo";
        Buscar_Hoteles_Circuito(rCircuito);
        nRegs := rPresCir.COUNT;
        i := 0;
        REPEAT
          i := i + 1;
          Finestra.UPDATE(2, ROUND((i / nRegs) * 10000, 1));
          Buscar_Tarifa_Compra(rPresCir."Tipo Proveedor", rPresCir.Tarifa, rTarCom, rCircuito);
          IF rTarCom."N§ Tarifa" <> '' THEN
            Buscar_Precio_Compra(rCircuito, rTarCom, rPresCir);
        UNTIL rPresCir.NEXT = 0;
        IF (rCircuito."Efectivo Gu¡a" > 0) AND (rCircuito."Guia Efectivo" <> '') THEN BEGIN
          cFun.Crear_Linea_Coste_Efectivo(rCircuito);
          cFun.Cambiar_Guia_Acompa¤ante(rCircuito);
        END;
      END;
    END;

    PROCEDURE Sumar_Paxes_TO@10(rPaxTO@1103355000 : Record 7010188) : Integer;
    VAR
      rPaxTOaux@1103355001 : Record 7010188;
      vPaxes@1103355002 : Integer;
    BEGIN
      // Sumar_Paxes_TO
      //
      vPaxes := 0;
      rPaxTOaux.RESET;
      rPaxTOaux.SETRANGE(Delegacion  , rPaxTO.Delegacion);
      rPaxTOaux.SETRANGE(Circuito    , rPaxTO.Circuito);
      rPaxTOaux.SETRANGE(Orden       , rPaxTO.Orden);
      rPaxTOaux.SETRANGE(TourOperador, rPaxTO.TourOperador);
      IF rPaxTOaux.FIND('-') THEN
        REPEAT
          rPaxTOaux.CALCFIELDS(Paxes);
          vPaxes := vPaxes + rPaxTOaux.Paxes;
        UNTIL rPaxTOaux.NEXT = 0;
      EXIT(vPaxes);
    END;

    PROCEDURE Buscar_Tarifa_Venta@4(Delegacion@1103355000 : Code[10];TTOO@1103355001 : Code[10];Fecha@1103355002 : Date;VAR rtarvta@1103355003 : Record 7010191;rCir@1103355004 : Record 7010187) : Boolean;
    BEGIN
      // Buscar_Tarifa_Venta
      //
      rtarvta.RESET;
      rtarvta.SETRANGE (Delegacion    , Delegacion);
      rtarvta.SETFILTER("Fecha inicio", '<=%1', Fecha);
      rtarvta.SETFILTER("Fecha final" , '>=%1', Fecha);
      rtarvta.SETRANGE (TourOperador  , TTOO);
      rtarvta.SETRANGE (Confirmado    , TRUE);
      IF NOT rtarvta.FIND('-') THEN
        Insertar_Error(STRSUBSTNO(Text009,
                                   Delegacion, TTOO, Fecha), rCir, TRUE);
    END;

    PROCEDURE Buscar_Precio_Venta@9(rTarVta@1103355000 : Record 7010191;VAR rPreVta@1103355001 : Record 7010192;Circuito@1103355002 : Code[10];Paxes@1103355003 : Integer;Fecha@1103355004 : Date;TipoHab@1103355005 : Code[10];rCir@1103355006 : Record 7010187;CodCateg@1103355007 : Code[10]);
    BEGIN
      // Buscar_Precio_Venta
      //
      CLEAR(rPreVta);
      rPreVta.RESET;
      rPreVta.SETRANGE (Delegacion       , rTarVta.Delegacion);
      rPreVta.SETRANGE ("N§ Tarifa"      , rTarVta."N§ Tarifa");
      rPreVta.SETRANGE (Circuito         , Circuito);
      rPreVta.SETRANGE ("Tipo Habitacion", TipoHab);
      rPreVta.SETFILTER("Fecha desde"    , '<=%1', Fecha);
      rPreVta.SETFILTER("Fecha hasta"    , '>=%1', Fecha);
      rPreVta.SETFILTER("Pax desde"      , '<=%1', Paxes);
      rPreVta.SETFILTER("Pax hasta"      , '>=%1', Paxes);
      rPreVta.SETRANGE ("C¢d. Categoria" , CodCateg);
      rPreVta.SETRANGE (Activo           , TRUE);
      IF NOT rPreVta.FIND('-') THEN
        // buscamos el generico
        rPreVta.SETRANGE (Circuito       , '');
        IF NOT rPreVta.FIND('-') THEN
          Insertar_Error(STRSUBSTNO(Text010 +
                         Text011,
                         rTarVta.Delegacion, rTarVta."N§ Tarifa", Circuito, Fecha, Paxes,
                         TipoHab, CodCateg), rCir, TRUE);
    END;

    PROCEDURE buscar_precio_extra_venta@34(prTarVta@1103355000 : Record 7010191;VAR prPreExt@1103355001 : Record 7010212;prExtCir@1103355002 : Record 7010213;prPaxTO@1103355003 : Record 7010188;prCir@1103355004 : Record 7010187);
    BEGIN
      // buscar_precio_extra_venta
      //
      prPreExt.RESET; prPreExt.INIT;
      prPreExt.SETRANGE (Delegacion      , prTarVta.Delegacion);
      prPreExt.SETRANGE ("N§ Tarifa"     , prTarVta."N§ Tarifa");
      prPreExt.SETRANGE ("Cod. Circuito" , prPaxTO.Circuito);
      prPreExt.SETRANGE ("Cod. Categoria", prPaxTO."Cod. Categoria");
      prPreExt.SETRANGE ("Cod. Extra"    , prExtCir."Cod. Extra");
      prPreExt.SETFILTER("Fecha desde"   , '<=%1', prExtCir."Fecha aplicacion");
      prPreExt.SETFILTER("Fecha hasta"   , '>=%1', prExtCir."Fecha aplicacion");
      prPreExt.SETRANGE (Activo          , TRUE);
      IF NOT prPreExt.FIND('-') THEN BEGIN

        // Buscar el precio generico del circuito sin mirar categoria

        prPreExt.SETRANGE("Cod. Categoria", '');
        IF NOT prPreExt.FIND('-') THEN BEGIN

          // Buscar el precio generico sin mirar circuito

          prPreExt.SETRANGE("Cod. Circuito", '');
          IF NOT prPreExt.FIND('-') THEN
            Insertar_Error(STRSUBSTNO(Text010 +
                                      Text012,
                                      prTarVta.Delegacion, prTarVta."N§ Tarifa", prPaxTO.Circuito,
                                      prExtCir."Fecha aplicacion", prExtCir."Cod. Extra",
                                      prPaxTO."Cod. Categoria"), prCir, TRUE);

        END;
      END;
    END;

    PROCEDURE Insertar_Linea_Ingreso@17(rCir@1103355000 : Record 7010187;rPaxTO@1103355001 : Record 7010188;rTarVta@1103355002 : Record 7010191;TipoPrecio@1103355003 : 'Pax,Fijo';Fecha@1103355004 : Date;pw_precio@1103355005 : Decimal;pw_extra@1103355006 : Code[10];pw_paxes@1103355007 : Decimal;pw_cierre@1103355008 : Integer);
    VAR
      rCIcirc@1103355009 : Record 7010190;
      rCli@1103355010 : Record 18;
      rConfIVA@1103355011 : Record 325;
    BEGIN
      // Insertar_Linea_Ingreso
      //
      rPaxTO.CALCFIELDS(Paxes);
      rCIcirc.INIT;
      rCIcirc.VALIDATE(Delegacion         , rCir.Delegacion);
      rCIcirc.VALIDATE(Circuito           , rCir.Circuito);
      rCIcirc.VALIDATE(Orden              , rCir.Orden);
      rCIcirc.VALIDATE("Coste/Ingreso"    , rCIcirc."Coste/Ingreso"::Ingreso);
      rCIcirc.VALIDATE("Tipo Proveedor"   , rCIcirc."Tipo Proveedor"::"10");
      rCIcirc.VALIDATE(TourOperador       , rPaxTO.TourOperador);
      rCIcirc.VALIDATE("Proveedor/Cliente", rTarVta.Cliente);
      IF pw_extra = '' THEN BEGIN
        rCIcirc.VALIDATE(Extra              , FALSE);
        rCIcirc.VALIDATE(Codigo             , rPaxTO."Tipo Habitacion");
      END
      ELSE BEGIN
        rCIcirc.VALIDATE(Extra              , TRUE);
        rCIcirc.VALIDATE(Codigo             , pw_extra);
      END;
      rCIcirc.VALIDATE(Fecha              , Fecha);
      rCIcirc.VALIDATE("Tipo Precio"      , TipoPrecio);
      rCIcirc.VALIDATE(Paxes              , pw_paxes);
      rCIcirc.VALIDATE("N§ Vehiculos"     , rCir."N§ Vehiculos");
      rCIcirc.VALIDATE(Precio             , pw_precio);
      rCIcirc.VALIDATE("N§ linea Auxiliar", rPaxTO."N§ Linea");
      rCIcirc.VALIDATE("N§ Tarifa"        , rTarVta."N§ Tarifa");

      rCIcirc."Impuestos incluidos" := rPaxTO."Impuestos incluidos";

      IF NOT rCli.GET(rTarVta.Cliente) THEN
        Insertar_Error(STRSUBSTNO(Text013, rTarVta.Cliente), rCir, TRUE)
      ELSE BEGIN
        rCli.TESTFIELD("VAT Bus. Posting Group");
        rCIcirc.VALIDATE("Grupo Registro IVA Neg." , rCli."VAT Bus. Posting Group");
      END;

      rTarVta.TESTFIELD("Grupo registro iva prod.");
      rCIcirc.VALIDATE("Grupo Registro IVA Prod.", rTarVta."Grupo registro iva prod.");

      rCIcirc."Tipo linea" := rCIcirc."Tipo linea"::Autom tica;
      rCIcirc."N§ Cierre"  := pw_cierre;
      rCIcirc.INSERT(TRUE);
    END;

    PROCEDURE Buscar_Tarifa_Compra@6(par_TipoProv@1103355000 : 'Transportista,Restaurante,Visita,Guia Acompa¤ante,Guia Oficial,Extra';par_Tarifa@1103355001 : Code[10];VAR par_TarCom@1103355002 : Record 7010196;par_Cir@1103355003 : Record 7010187);
    BEGIN
      // Buscar_Tarifa_Compra
      //
      par_TarCom.RESET;
      IF NOT par_TarCom.GET(par_Cir.Delegacion, par_TipoProv, par_Tarifa) THEN
        Insertar_Error(STRSUBSTNO(Text014,
              par_Cir.Delegacion, par_TipoProv, par_Tarifa), par_Cir, TRUE);
    END;

    PROCEDURE Buscar_Precio_Compra@7(VAR par_Cir@1103355000 : Record 7010187;par_TarCom@1103355001 : Record 7010196;par_Pres@1103355002 : Record 7010211);
    VAR
      rPreTra@1103355003 : Record 7010197;
      rPreRes@1103355004 : Record 7010198;
      rPreGui@1103355005 : Record 7010199;
      rPreExt@1103355006 : Record 7010200;
      rPreVis@1103355007 : Record 7010201;
      Fecha@1103355008 : Date;
      nVeh@1103355009 : Integer;
      PaxLin@1103355010 : Integer;
      nLin@1103355011 : Integer;
      i@1103355012 : Integer;
      Paxes@1103355013 : Integer;
    BEGIN
      // Buscar_Precio_Compra
      //
      Fecha := par_Pres."Dia Inicio prestacion";
      par_Cir.SETFILTER("Filtro Fecha Entrada", '<=%1', Fecha);
      par_Cir.SETFILTER("Filtro Fecha Salida", '>=%1', Fecha);
      par_Cir.CALCFIELDS("Paxes Calculo");
      Paxes := par_Cir."Paxes Calculo";

      CASE par_TarCom."Tipo Tarifa" OF
        par_TarCom."Tipo Tarifa"::Transportista: BEGIN
          rPreTra.RESET;
          rPreTra.SETRANGE (Delegacion       , par_TarCom.Delegacion);
          rPreTra.SETRANGE ("N§ Tarifa"      , par_TarCom."N§ Tarifa");
          rPreTra.SETFILTER("Fecha desde"    , '<=%1', Fecha);
          rPreTra.SETFILTER("Fecha hasta"    , '>=%1', Fecha);
          rPreTra.SETFILTER("Pax desde"      , '<=%1', Paxes);
          rPreTra.SETFILTER("Pax hasta"      , '>=%1', Paxes);
          rPreTra.SETRANGE (Activo           , TRUE);
          IF NOT rPreTra.FIND('-') THEN
            Insertar_Error(STRSUBSTNO(Text015,
                  par_TarCom.Delegacion , par_TarCom."N§ Tarifa", Fecha, Paxes), par_Cir, TRUE);
          CASE TipoCalculo OF
            TipoCalculo::"Coste/Ingreso":
              Insertar_Linea_Coste(par_Cir, par_TarCom, Paxes, rPreTra.Precio, rPreTra."Tipo Precio", Fecha, '', FALSE,
                                   par_Pres.Linea, rPreTra.Efectivo);
            TipoCalculo::Efectivo:
              Calcular_Efectivo(par_Cir, par_TarCom, Paxes, rPreTra.Precio, rPreTra."Tipo Precio", Fecha, '', FALSE,
                                   par_Pres.Linea, rPreTra.Efectivo);
          END;
        END;
        par_TarCom."Tipo Tarifa"::Restaurante: BEGIN
          rPreRes.RESET;
          rPreRes.SETRANGE (Delegacion       , par_TarCom.Delegacion);
          rPreRes.SETRANGE ("N§ Tarifa"      , par_TarCom."N§ Tarifa");
          rPreRes.SETRANGE (Menu             , par_Pres.Codigo);
          rPreRes.SETFILTER("Fecha desde"    , '<=%1', Fecha);
          rPreRes.SETFILTER("Fecha hasta"    , '>=%1', Fecha);
          rPreRes.SETFILTER("Pax desde"      , '<=%1', Paxes);
          rPreRes.SETFILTER("Pax hasta"      , '>=%1', Paxes);
          rPreRes.SETRANGE (Activo           , TRUE);
          IF NOT rPreRes.FIND('-') THEN
           Insertar_Error(STRSUBSTNO(Text016 +
                                     Text017,
                                     par_TarCom.Delegacion , par_TarCom."N§ Tarifa", Fecha, Paxes,
                                     par_Pres.Codigo), par_Cir, TRUE);

          CASE TipoCalculo OF
            TipoCalculo::"Coste/Ingreso":
              Insertar_Linea_Coste(par_Cir, par_TarCom, Paxes, rPreRes.Precio, rPreRes."Tipo Precio", Fecha, rPreRes.Menu, FALSE,
                                   par_Pres.Linea, rPreRes.Efectivo);
            TipoCalculo::Efectivo:
              Calcular_Efectivo(par_Cir, par_TarCom, Paxes, rPreRes.Precio, rPreRes."Tipo Precio", Fecha, rPreRes.Menu, FALSE,
                                par_Pres.Linea, rPreRes.Efectivo);
          END;
          Insertar_Linea_Extra(rPreExt."Tipo Extra"::Restaurante, Fecha, Paxes, par_Cir, par_TarCom);
        END;
        par_TarCom."Tipo Tarifa"::"Guia Acompa¤ante": BEGIN
          rPreGui.RESET;
          rPreGui.SETRANGE (Delegacion       , par_TarCom.Delegacion);
          rPreGui.SETRANGE ("N§ Tarifa"      , par_TarCom."N§ Tarifa");
          rPreGui.SETRANGE ("Tipo Guia"      , rPreGui."Tipo Guia"::Acompa¤ante);
          rPreGui.SETFILTER("Fecha desde"    , '<=%1', Fecha);
          rPreGui.SETFILTER("Fecha hasta"    , '>=%1', Fecha);
          rPreGui.SETFILTER("Pax desde"      , '<=%1', Paxes);
          rPreGui.SETFILTER("Pax hasta"      , '>=%1', Paxes);
          rPreGui.SETRANGE (Activo           , TRUE);
          IF NOT rPreGui.FIND('-') THEN
           Insertar_Error(STRSUBSTNO(Text018 +
                                    Text019,
                                    par_TarCom.Delegacion , par_TarCom."N§ Tarifa", Fecha,
                                    Paxes), par_Cir, TRUE);

          FOR nVeh := 1 TO par_Cir."N§ Vehiculos" DO
            CASE TipoCalculo OF
              TipoCalculo::"Coste/Ingreso":
                Insertar_Linea_Coste(par_Cir, par_TarCom, Paxes, rPreGui.Precio, rPreGui."Tipo Precio", Fecha, '', FALSE,
                                     par_Pres.Linea, rPreGui.Efectivo);
              TipoCalculo::Efectivo:
                Calcular_Efectivo(par_Cir, par_TarCom, Paxes, rPreGui.Precio, rPreGui."Tipo Precio", Fecha, '', FALSE, par_Pres.Linea
                                  , rPreGui.Efectivo);
            END;
        END;
        par_TarCom."Tipo Tarifa"::"Guia Oficial": BEGIN
          IF (Paxes <= par_TarCom."Pax Maximo") OR (par_TarCom."Pax Maximo" = 0) THEN BEGIN
            nLin := 1;
            PaxLin := Paxes;
          END
          ELSE BEGIN
            nLin := ROUND(Paxes / par_TarCom."Pax Maximo", 1, '>');
            PaxLin := ROUND(Paxes / nLin, 1);
          END;
          FOR i := 1 TO nLin DO BEGIN
            rPreGui.RESET;
            rPreGui.SETRANGE (Delegacion       , par_TarCom.Delegacion);
            rPreGui.SETRANGE ("N§ Tarifa"      , par_TarCom."N§ Tarifa");
            rPreGui.SETRANGE ("Tipo Guia"      , rPreGui."Tipo Guia"::Oficial);
            rPreGui.SETFILTER("Fecha desde"    , '<=%1', Fecha);
            rPreGui.SETFILTER("Fecha hasta"    , '>=%1', Fecha);
            rPreGui.SETFILTER("Pax desde"      , '<=%1', PaxLin);
            rPreGui.SETFILTER("Pax hasta"      , '>=%1', PaxLin);
            rPreGui.SETRANGE (Activo           , TRUE);
            IF NOT rPreGui.FIND('-') THEN
              Insertar_Error(STRSUBSTNO(Text020,
                                        par_TarCom."N§ Tarifa", Fecha, PaxLin), par_Cir, TRUE);
            IF i = nLin THEN BEGIN
              CASE TipoCalculo OF
                TipoCalculo::"Coste/Ingreso":
                  Insertar_Linea_Coste(par_Cir, par_TarCom, Paxes-(PaxLin*(nLin-1)), rPreGui.Precio, rPreGui."Tipo Precio", Fecha, '',
                                       FALSE, par_Pres.Linea, rPreGui.Efectivo);
                TipoCalculo::Efectivo:
                  Calcular_Efectivo(par_Cir, par_TarCom, Paxes-(PaxLin*(nLin-1)), rPreGui.Precio, rPreGui."Tipo Precio", Fecha, '',
                                    FALSE, par_Pres.Linea, rPreGui.Efectivo);
              END;
            END
            ELSE
              CASE TipoCalculo OF
                TipoCalculo::"Coste/Ingreso":
                 Insertar_Linea_Coste(par_Cir, par_TarCom, PaxLin, rPreGui.Precio, rPreGui."Tipo Precio", Fecha, '', FALSE,
                                      par_Pres.Linea, rPreGui.Efectivo);
                TipoCalculo::Efectivo:
                 Calcular_Efectivo(par_Cir, par_TarCom, PaxLin, rPreGui.Precio, rPreGui."Tipo Precio", Fecha, '', FALSE,
                                   par_Pres.Linea, rPreGui.Efectivo);
              END;
          END;
        END;
        par_TarCom."Tipo Tarifa"::Visita: BEGIN
          rPreVis.RESET;
          rPreVis.SETRANGE (Delegacion       , par_TarCom.Delegacion);
          rPreVis.SETRANGE ("N§ Tarifa"      , par_TarCom."N§ Tarifa");
          rPreVis.SETRANGE (Visita           , par_Pres.Codigo);
          rPreVis.SETFILTER("Fecha desde"    , '<=%1', Fecha);
          rPreVis.SETFILTER("Fecha hasta"    , '>=%1', Fecha);
          rPreVis.SETFILTER("Pax desde"      , '<=%1', Paxes);
          rPreVis.SETFILTER("Pax hasta"      , '>=%1', Paxes);
          rPreVis.SETRANGE (Activo           , TRUE);
          IF NOT rPreVis.FIND('-') THEN
           Insertar_Error(STRSUBSTNO(Text021 +
                                     Text022,
                                     par_TarCom.Delegacion , par_TarCom."N§ Tarifa", Fecha, Paxes,
                                     par_Pres.Codigo), par_Cir, TRUE);

          CASE TipoCalculo OF
            TipoCalculo::"Coste/Ingreso":
              Insertar_Linea_Coste(par_Cir, par_TarCom, Paxes, rPreVis.Precio, rPreVis."Tipo Precio", Fecha, par_Pres.Codigo,
                                   FALSE, par_Pres.Linea, rPreVis.Efectivo);
            TipoCalculo::Efectivo:
              Calcular_Efectivo(par_Cir, par_TarCom, Paxes, rPreVis.Precio, rPreVis."Tipo Precio", Fecha, par_Pres.Codigo,
                                FALSE, par_Pres.Linea, rPreVis.Efectivo);
          END;
          Insertar_Linea_Extra(rPreExt."Tipo Extra"::Visita, Fecha, Paxes, par_Cir, par_TarCom);
        END;
        par_TarCom."Tipo Tarifa"::Extra: BEGIN
          rPreExt.RESET;
          rPreExt.SETRANGE (Delegacion       , par_TarCom.Delegacion);
          rPreExt.SETRANGE ("N§ Tarifa"      , par_TarCom."N§ Tarifa");
          rPreExt.SETRANGE (Codigo           , par_Pres.Codigo);
          rPreExt.SETFILTER("Fecha desde"    , '<=%1', Fecha);
          rPreExt.SETFILTER("Fecha hasta"    , '>=%1', Fecha);
          rPreExt.SETFILTER("Pax desde"      , '<=%1', Paxes);
          rPreExt.SETFILTER("Pax hasta"      , '>=%1', Paxes);
          rPreExt.SETRANGE (Activo           , TRUE);
          IF NOT rPreExt.FIND('-') THEN
           Insertar_Error(STRSUBSTNO(Text023 +
                                     Text024,
                                     par_TarCom.Delegacion , par_TarCom."N§ Tarifa", Fecha, Paxes,
                                     par_Pres.Codigo), par_Cir, TRUE);

          CASE TipoCalculo OF
            TipoCalculo::"Coste/Ingreso":
              Insertar_Linea_Coste(par_Cir, par_TarCom, Paxes, rPreExt.Precio, rPreExt."Tipo Precio", Fecha, rPreExt.Codigo, TRUE,
                                   par_Pres.Linea, rPreExt.Efectivo);
            TipoCalculo::Efectivo:
              Calcular_Efectivo(par_Cir, par_TarCom, Paxes, rPreExt.Precio, rPreExt."Tipo Precio", Fecha, rPreExt.Codigo, TRUE,
                                par_Pres.Linea, rPreExt.Efectivo);
          END;
        END;
      END;

      par_Cir.SETRANGE("Filtro Fecha Entrada");
      par_Cir.SETRANGE("Filtro Fecha Salida");
      par_Cir.CALCFIELDS("Paxes Calculo");
    END;

    PROCEDURE Insertar_Linea_Coste@11(rCir@1103355000 : Record 7010187;rTarCom@1103355001 : Record 7010196;Paxes@1103355002 : Integer;Precio@1103355003 : Decimal;TipoPrecio@1103355004 : 'Pax,Fijo';Fecha@1103355005 : Date;Codigo@1103355006 : Code[10];Extra@1103355007 : Boolean;OrdenPres@1103355008 : Integer;Efectivo@1103355009 : Boolean);
    VAR
      rCoste@1103355010 : Record 7010190;
      rProv@1103355011 : Record 23;
      rConfIVA@1103355012 : Record 325;
    BEGIN
      // Insertar_Linea_Coste
      //
      CLEAR(rCoste);
      rCoste.VALIDATE(Delegacion         , rCir.Delegacion);
      rCoste.VALIDATE(Circuito           , rCir.Circuito);
      rCoste.VALIDATE(Orden              , rCir.Orden);
      rCoste.VALIDATE("Coste/Ingreso"    , rCoste."Coste/Ingreso"::Coste);
      rCoste.VALIDATE("Tipo Proveedor"   , rTarCom."Tipo Tarifa");
      IF (rCoste."Tipo Proveedor" = rCoste."Tipo Proveedor"::"Guia Acompa¤ante") AND
         (rCir."Guia Efectivo" <> '') THEN
        rCoste.VALIDATE("Proveedor/Cliente", rCir."Guia Efectivo")
      ELSE
        rCoste.VALIDATE("Proveedor/Cliente", rTarCom.Proveedor);
      rCoste.VALIDATE(Extra              , Extra);
      rCoste.VALIDATE(Codigo             , Codigo);
      rCoste.VALIDATE(Fecha              , Fecha);
      rCoste.VALIDATE(Efectivo           , Efectivo);
      rCoste.VALIDATE("N§ Tarifa"        , rTarCom."N§ Tarifa");
      IF (rTarCom."Tipo Tarifa" = rTarCom."Tipo Tarifa"::Transportista) AND (TipoPrecio = 1) THEN  // 1 -> precio por vehiculo
        rCoste.VALIDATE("Tipo Precio"    , rCoste."Tipo Precio"::Vehiculo)
      ELSE
        rCoste.VALIDATE("Tipo Precio"    , TipoPrecio);

      rCoste.VALIDATE(Paxes              , Paxes);
      rCoste.VALIDATE("N§ Vehiculos"     , rCir."N§ Vehiculos");
      rCoste.VALIDATE(Precio             , -Precio);
      // Los costes en efectivo siempre se calculan con impuestos incluidos
      //
      IF rCoste.Efectivo THEN
        rCoste."Impuestos incluidos"       := TRUE
      ELSE
        rCoste."Impuestos incluidos"       := rTarCom."Impuestos incluidos";
      rCoste."N§ linea Auxiliar"         := OrdenPres;

      IF rCoste."Tipo Proveedor" <> rCoste."Tipo Proveedor"::Hotel THEN BEGIN
        IF NOT rProv.GET(rCoste."Proveedor/Cliente") THEN
          Insertar_Error(STRSUBSTNO(Text025,
                                   rCoste."Proveedor/Cliente", rTarCom."Tipo Tarifa",
                                   rTarCom."N§ Tarifa"), rCir, TRUE)
        ELSE BEGIN
          rProv.TESTFIELD("VAT Bus. Posting Group");
          rTarCom.TESTFIELD("Grupo registro iva prod.");

          rCoste.VALIDATE("Grupo Registro IVA Neg." , rProv."VAT Bus. Posting Group");
          rCoste.VALIDATE("Grupo Registro IVA Prod.", rTarCom."Grupo registro iva prod.");
        END;
      END
      ELSE BEGIN
        rCoste."Importe Con Impuesto" := rCoste.Importe;
        rCoste."Importe Sin Impuesto" := rCoste.Importe;
      END;

      rCoste."Tipo linea" := rCoste."Tipo linea"::Autom tica;

      rCoste.INSERT(TRUE);


      Dividir_Coste_x_TO(rCoste, rCir);
    END;

    PROCEDURE Insertar_Linea_Extra@5(TipoExtra@1103355000 : Integer;Fecha@1103355001 : Date;Paxes@1103355002 : Integer;rCir@1103355003 : Record 7010187;rTarCom@1103355004 : Record 7010196);
    VAR
      rPreExt@1103355005 : Record 7010200;
    BEGIN
      // Insertar_Linea_Extra
      //
      rPreExt.RESET;
      rPreExt.SETRANGE (Delegacion   , rTarCom.Delegacion);
      rPreExt.SETRANGE ("Tipo Extra" , TipoExtra);
      rPreExt.SETRANGE ("N§ Tarifa"  , rTarCom."N§ Tarifa");
      rPreExt.SETFILTER("Fecha desde", '<=%1', Fecha);
      rPreExt.SETFILTER("Fecha hasta", '>=%1', Fecha);
      rPreExt.SETFILTER("Pax desde"  , '<=%1', Paxes);
      rPreExt.SETFILTER("Pax hasta"  , '>=%1', Paxes);
      rPreExt.SETRANGE (Activo       , TRUE);
      IF rPreExt.FIND('-') THEN
        REPEAT
          CASE TipoCalculo OF
            TipoCalculo::"Coste/Ingreso":
              Insertar_Linea_Coste(rCir, rTarCom, Paxes, rPreExt.Precio, rPreExt."Tipo Precio", Fecha, rPreExt.Codigo, TRUE, 0,
                                   rPreExt.Efectivo);
            TipoCalculo::Efectivo:
              Calcular_Efectivo(rCir, rTarCom, Paxes, rPreExt.Precio, rPreExt."Tipo Precio", Fecha, rPreExt.Codigo, TRUE, 0,
                                rPreExt.Efectivo);
          END;
        UNTIL rPreExt.NEXT = 0;
    END;

    PROCEDURE Buscar_Hoteles_Circuito@8(rCir@1103355000 : Record 7010187);
    VAR
      rPaxTO@1103355001 : Record 7010188;
      rHotCir@1103355002 : Record 7010189;
      vFilt@1103355003 : Text[150];
      vHotAnt@1103355004 : Code[10];
      vFecha@1103355005 : Date;
      vPaxes@1103355006 : Integer;
    BEGIN
      // Buscar_Hoteles_Circuito
      //
      CLEAR(vFilt);
      CLEAR(vHotAnt);
      CLEAR(vFecha);
      CLEAR(vPaxes);

      rPaxTO.RESET;
      rPaxTO.SETRANGE(Delegacion, rCir.Delegacion);
      rPaxTO.SETRANGE(Circuito  , rCir.Circuito);
      rPaxTO.SETRANGE(Orden     , rCir.Orden);
      IF rPaxTO.FIND('-') THEN BEGIN
        REPEAT
          IF vFilt <> '' THEN
            vFilt := vFilt + '|';
          vFilt := vFilt + STRSUBSTNO('%1', rPaxTO."N§ Interno")
        UNTIL rPaxTO.NEXT = 0;
        rPaxTO.RESET;
        rPaxTO.SETCURRENTKEY("N§ Interno");
        rHotCir.RESET;
        rHotCir.SETRANGE (Delegacion  , rCir.Delegacion);
        rHotCir.SETFILTER("N§ interno", vFilt);
        rHotCir.SETCURRENTKEY(Hotel, "Fecha Entrada");
        IF rHotCir.FIND('-') THEN BEGIN
          vHotAnt := rHotCir.Hotel;
          vFecha  := rHotCir."Fecha Entrada";
          REPEAT
            IF (rHotCir.Hotel <> vHotAnt) OR (rHotCir."Fecha Entrada" <> vFecha) THEN BEGIN
              Procesar_Extra_Hotel(rCir, vHotAnt, vFecha, vPaxes);
              vHotAnt := rHotCir.Hotel;
              vFecha  := rHotCir."Fecha Entrada";
              CLEAR(vPaxes);
            END;
            rPaxTO.SETRANGE("N§ Interno", rHotCir."N§ interno");
            IF rPaxTO.FIND('-') THEN BEGIN
              rPaxTO.CALCFIELDS(Paxes);
              vPaxes := vPaxes + rPaxTO.Paxes;
            END;
          UNTIL rHotCir.NEXT = 0;
          Procesar_Extra_Hotel(rCir, vHotAnt, vFecha, vPaxes);
        END;
      END;
    END;

    PROCEDURE Procesar_Extra_Hotel@12(rCir@1103355000 : Record 7010187;Hotel@1103355001 : Code[10];Fecha@1103355002 : Date;vPaxes@1103355003 : Integer);
    VAR
      rTarCom@1103355004 : Record 7010196;
      rPreExt@1103355005 : Record 7010200;
    BEGIN
      // Procesar_Extra_hotel
      //
      rTarCom.RESET;
      rTarCom.SETRANGE (Delegacion    , rCir.Delegacion);
      rTarCom.SETRANGE (Circuito      , rCir.Circuito);
      rTarCom.SETRANGE (Proveedor     , Hotel);
      rTarCom.SETFILTER("Fecha inicio", '<=%1', Fecha);
      rTarCom.SETFILTER("Fecha final" , '>=%1', Fecha);
      rTarCom.SETRANGE (Confirmado    , TRUE);
      IF NOT rTarCom.FIND('-') THEN BEGIN
        rTarCom.SETRANGE (Circuito    , '');
        IF NOT rTarCom.FIND('-') THEN BEGIN
          Insertar_Error(STRSUBSTNO(Text026,
                                    rCir.Circuito, Hotel, Fecha), rCir, FALSE);
          EXIT;
        END;
      END;

      Insertar_Linea_Extra(rPreExt."Tipo Extra"::Hotel, Fecha, vPaxes, rCir, rTarCom);
    END;

    PROCEDURE Insertar_Error@13(textError@1103355000 : Text[150];rCir@1103355001 : Record 7010187;pError@1103355002 : Boolean);
    VAR
      rError@1103355003 : Record 7010202;
    BEGIN
      // Insertar_Error
      //
      rError.RESET;
      rError.Delegacion  := rCir.Delegacion;
      rError.Circuito    := rCir.Circuito;
      rError.Orden       := rCir.Orden;
      rError.Descripcion := textError;
      rError.Usuario     := USERID;
      rError.Fecha       := TODAY;
      rError.Hora        := TIME;
      rError.Error       := pError;
      rError.INSERT(TRUE);
    END;

    PROCEDURE Refrescar_Coste_Circuito@14(rCirc@1103355000 : Record 7010187);
    VAR
      rPaxTO@1103355001 : Record 7010188;
    BEGIN
      // Refrescar_Coste_Circuito
      //
      rPaxTO.RESET;
      rPaxTO.SETRANGE(Delegacion, rCirc.Delegacion);
      rPaxTO.SETRANGE(Circuito  , rCirc.Circuito);
      rPaxTO.SETRANGE(Orden     , rCirc.Orden);
      IF rPaxTO.FIND('-') THEN
        REPEAT
          Refrescar_Coste_TO(rPaxTO);
        UNTIL rPaxTO.NEXT = 0;
    END;

    PROCEDURE Refrescar_Coste_TO@20(rPaxTO@1103355000 : Record 7010188);
    VAR
      rBono@1103355001 : Record 7010013;
      rResTrans@1103355002 : Record 7009744;
      Importe@1103355003 : Decimal;
    BEGIN
      // Refrescar_Coste_TO
      //

      // Buscar los costes de los hoteles

      Importe := 0;
      rBono.RESET;
      rBono.SETCURRENTKEY("N§ Interno");
      rBono.SETRANGE("N§ Interno", rPaxTO."N§ Interno");
      rBono.SETRANGE(Delegacion  , rPaxTO.Delegacion);
      IF rBono.FIND('-') THEN
        REPEAT
          rBono.CALCFIELDS("Importe coste");
          Importe := Importe - rBono."Importe coste";
        UNTIL rBono.NEXT = 0;
      IF Importe <> 0 THEN BEGIN
        rPaxTO."Coste Hoteles" := Importe;
        rPaxTO.MODIFY;
      END;

      // Buscar los costes de los transfers

      rResTrans.RESET;
      rResTrans.SETCURRENTKEY(Delegacion, "N§ Interno", "N§ Periodo");
      rResTrans.SETRANGE(Delegacion  , rPaxTO.Delegacion);
      rResTrans.SETRANGE("N§ Interno", rPaxTO."N§ Interno");
      IF rResTrans.FIND('-') THEN BEGIN
        rResTrans.CALCSUMS("Importe Coste Entrada", "Importe Coste Salida");
        IF (rResTrans."Importe Coste Entrada" <> 0) OR (rResTrans."Importe Coste Salida" <> 0) THEN BEGIN
          rPaxTO."Coste Transfer" := -rResTrans."Importe Coste Entrada" - rResTrans."Importe Coste Salida";
          rPaxTO.MODIFY;
        END;
      END;
    END;

    PROCEDURE Crear_Lineas_Abono_Ing@15(VAR rPaxTO@1103355000 : Record 7010188);
    VAR
      rPaxTOaux@1103355001 : Record 7010188;
      rCIcir@1103355002 : Record 7010190;
      rCIcirAux@1103355003 : Record 7010190;
      w_num_cierre@1103355004 : Integer;
    BEGIN
      // Crear_Lineas_Abono_Ing
      //
      rPaxTOaux.COPY(rPaxTO);

      IF rPaxTOaux.FIND('-') THEN BEGIN
        REPEAT
          w_num_cierre := busca_ultimo_cierre(rPaxTOaux);

          rCIcir.SETRANGE(Delegacion         , rPaxTOaux.Delegacion);
          rCIcir.SETRANGE(Circuito           , rPaxTOaux.Circuito);
          rCIcir.SETRANGE(Orden              , rPaxTOaux.Orden);
          rCIcir.SETRANGE("Coste/Ingreso"    , rCIcir."Coste/Ingreso"::Ingreso);
          rCIcir.SETRANGE("N§ linea Auxiliar", rPaxTOaux."N§ Linea");
          rCIcir.SETRANGE("N§ Factura"       , rPaxTOaux."N§ Factura");
          rCIcir.SETRANGE(Regularizacion     , FALSE);
          IF rCIcir.FIND('-') THEN
            REPEAT
              rCIcirAux := rCIcir;
              rCIcirAux."N§ Linea"     := 0;
              rCIcirAux.VALIDATE(Precio, -rCIcir.Precio);
              rCIcirAux.Regularizacion := TRUE;
              rCIcirAux."N§ Factura"   := '';
              rCIcirAux."N§ Cierre"    := w_num_cierre;
              rCIcirAux.INSERT(TRUE);
            UNTIL rCIcir.NEXT = 0;
        UNTIL rPaxTOaux.NEXT = 0;
      END;
    END;

    PROCEDURE Crear_Lineas_Abono_Cos@16(VAR rCIcir@1103355000 : Record 7010190);
    VAR
      rCIcirAux@1103355001 : Record 7010190;
      rCIcir2@1103355002 : Record 7010190;
    BEGIN
      // Crear_Lineas_Abono_Cos
      //
      rCIcirAux.COPY(rCIcir);
      rCIcirAux.SETRANGE(Regularizacion, FALSE);

      IF rCIcirAux.FIND('-') THEN
        REPEAT
          rCIcir2 := rCIcirAux;
          rCIcir2.Regularizacion := TRUE;
          rCIcir2.MODIFY;
          rCIcir2."N§ Linea"     := 0;
          rCIcir2.VALIDATE(Precio, -rCIcirAux.Precio);
      //    rCIcir2.Regularizacion := TRUE;
          rCIcir2."Pendiente FPR":= TRUE;
          rCIcir2."N§ Factura"   := '';
          rCIcir2.INSERT(TRUE);
        UNTIL rCIcirAux.NEXT = 0;
    END;

    PROCEDURE Dividir_Coste_x_TO@19(VAR rCI@1103355000 : Record 7010190;rCir@1103355001 : Record 7010187);
    VAR
      rCIaux@1103355002 : Record 7010190;
      i@1103355003 : Integer;
    BEGIN
      // Dividir_Coste_x_TO
      //
      IF TourOperadores[1] = '' THEN
        RellenaTO(rCir);

      i := 1;
      REPEAT
        rCIaux := rCI;
        rCIaux.TourOperador   := TourOperadores[i];
        rCIaux.VALIDATE("Porcentaje TO", Porcentajes[i]);
        IF i = 1 THEN
          rCIaux.MODIFY(TRUE)
        ELSE
          rCIaux.INSERT(TRUE);
        i := i + 1;
      UNTIL TourOperadores[i] = '';
      //rCI.DELETE;
    END;

    PROCEDURE RellenaTO@18(par_cir@1103355000 : Record 7010187);
    VAR
      rPaxTO@1103355001 : Record 7010188;
      TTOOant@1103355002 : Code[10];
      i@1103355003 : Integer;
      vPaxes@1103355004 : Integer;
      vPaxesCir@1103355005 : Integer;
    BEGIN
      // RellenaTO
      //
      CLEAR(TTOOant);
      i := 0;
      rPaxTO.SETRANGE(Delegacion, par_cir.Delegacion);
      rPaxTO.SETRANGE(Circuito  , par_cir.Circuito);
      rPaxTO.SETRANGE(Orden     , par_cir.Orden);
      rPaxTO.SETCURRENTKEY(TourOperador);
      IF rPaxTO.FIND('-') THEN BEGIN
        par_cir.RESET;
        par_cir.CALCFIELDS("Paxes Calculo");
        vPaxesCir := par_cir."Paxes Calculo";
        REPEAT
          IF rPaxTO.TourOperador <> TTOOant THEN BEGIN
            TTOOant := rPaxTO.TourOperador;
            par_cir.SETRANGE("Filtro TO", rPaxTO.TourOperador);
            par_cir.CALCFIELDS("Paxes Calculo");
            vPaxes := par_cir."Paxes Calculo";
            i := i + 1;
            TourOperadores[i] := rPaxTO.TourOperador;
            Porcentajes[i]    := (vPaxes / vPaxesCir);
          END;
        UNTIL rPaxTO.NEXT = 0;
        par_cir.RESET;
      END;
    END;

    PROCEDURE Calcular_Efectivo@22(VAR rCir@1103355000 : Record 7010187;rTarCom@1103355001 : Record 7010196;Paxes@1103355002 : Integer;Precio@1103355003 : Decimal;TipoPrecio@1103355004 : 'Pax,Fijo';Fecha@1103355005 : Date;Codigo@1103355006 : Code[10];Extra@1103355007 : Boolean;OrdenPres@1103355008 : Integer;Efectivo@1103355009 : Boolean);
    VAR
      rCoste@1103355010 : Record 7010190;
      rProv@1103355011 : Record 23;
      rConfIVA@1103355012 : Record 325;
    BEGIN
      // Insertar_Linea_Coste
      //
      IF NOT Efectivo THEN
        EXIT;

      CLEAR(rCoste);

      IF (rTarCom."Tipo Tarifa" = rTarCom."Tipo Tarifa"::Transportista) AND (TipoPrecio = 1) THEN  // 1 -> precio por vehiculo
        rCoste.VALIDATE("Tipo Precio"    , rCoste."Tipo Precio"::Vehiculo)
      ELSE
        rCoste.VALIDATE("Tipo Precio"    , TipoPrecio);

      rCoste.VALIDATE(Paxes              , Paxes);
      rCoste.VALIDATE("N§ Vehiculos"     , rCir."N§ Vehiculos");
      rCoste.VALIDATE(Precio             , -Precio);
      // Los costes en efectivo siempre se calculan con impuestos incluidos
      //
      IF rCoste.Efectivo THEN
        rCoste."Impuestos incluidos"       := TRUE
      ELSE
        rCoste."Impuestos incluidos"       := rTarCom."Impuestos incluidos";
      rCoste."N§ linea Auxiliar"         := OrdenPres;

      IF rCoste."Tipo Proveedor" <> rCoste."Tipo Proveedor"::Hotel THEN BEGIN
        IF NOT rProv.GET(rCoste."Proveedor/Cliente") THEN
          Insertar_Error(STRSUBSTNO(Text025,
                                   rCoste."Proveedor/Cliente", rTarCom."Tipo Tarifa",
                                   rTarCom."N§ Tarifa"), rCir, TRUE)
        ELSE BEGIN
          rProv.TESTFIELD("VAT Bus. Posting Group");
          rTarCom.TESTFIELD("Grupo registro iva prod.");

          rCoste.VALIDATE("Grupo Registro IVA Neg." , rProv."VAT Bus. Posting Group");
          rCoste.VALIDATE("Grupo Registro IVA Prod.", rTarCom."Grupo registro iva prod.");
        END;
      END
      ELSE BEGIN
        rCoste."Importe Con Impuesto" := rCoste.Importe;
        rCoste."Importe Sin Impuesto" := rCoste.Importe;
      END;

      rCoste."Tipo linea" := rCoste."Tipo linea"::Autom tica;

      rCir."Efectivo Gu¡a" := rCir."Efectivo Gu¡a" - rCoste."Importe Con Impuesto";
      rCir.MODIFY;
    END;

    PROCEDURE Establecer_TipoCalculo@21(par_TipoCalculo@1103355000 : 'Coste/Ingreso,Efectivo');
    BEGIN
      TipoCalculo := par_TipoCalculo;
    END;

    PROCEDURE busca_ultimo_cierre@23(prPaxTo@1103355000 : Record 7010188) : Integer;
    VAR
      lrCICir@1103355001 : Record 7010190;
    BEGIN
      // busca_ultimo_cierre
      //
      lrCICir.RESET; lrCICir.INIT;
      lrCICir.SETCURRENTKEY(Delegacion,
                            Circuito,
                            Orden,
                            "Coste/Ingreso",
                            "N§ linea Auxiliar",
                            "N§ Cierre");
      lrCICir.SETRANGE(Delegacion         , prPaxTo.Delegacion);
      lrCICir.SETRANGE(Circuito           , prPaxTo.Circuito);
      lrCICir.SETRANGE(Orden              , prPaxTo.Orden);
      lrCICir.SETRANGE("Coste/Ingreso"    , lrCICir."Coste/Ingreso"::Ingreso);
      lrCICir.SETRANGE("N§ linea Auxiliar", prPaxTo."N§ Linea");
      IF lrCICir.FIND('+') THEN
        EXIT(lrCICir."N§ Cierre" + 1)
      ELSE
       EXIT(1);
    END;

    BEGIN
    END.
  }
}
