OBJECT Codeunit 5817 Undo Posting Management
{
  OBJECT-PROPERTIES
  {
    Date=13/02/07;
    Time=12:00:00;
    Version List=NAVW15.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=You cannot undo line %1 because there is not sufficient content in the receiving bins.;ESP=No puede deshacer la l¡nea %1 porque no hay suficiente contenido en las ubic. recep.';
      Text002@1015 : TextConst 'ENU=You cannot undo line %1 because warehouse put-away lines have already been created.;ESP=No se puede deshacer la l¡nea %1 porque se crearon l¡neas ubicaci¢n almac‚n.';
      Text003@1018 : TextConst 'ENU=You cannot undo line %1 because warehouse activity lines have already been posted.;ESP=No se puede deshacer la l¡nea %1 porque se registraron l¡ns. actividad almac‚n.';
      Text004@1019 : TextConst 'ENU=You must delete the related %1 before you undo line %2.;ESP=Debe borrar lo relativo a %1 antes de deshacer la l¡nea %2.';
      Text005@1020 : TextConst 'ENU=You cannot undo line %1 because warehouse receipt lines have already been created.;ESP=No se puede deshacer la l¡nea %1 porque se crearon l¡ns. recep. almac‚n.';
      Text006@1021 : TextConst 'ENU=You cannot undo line %1 because warehouse shipment lines have already been created.;ESP=No se puede deshacer la l¡nea %1 porque se crearon l¡ns. env¡o almac‚n.';
      Text007@1022 : TextConst 'ENU=You cannot undo line %1 because warehouse shipment lines have already been posted.;ESP=No se puede deshacer la l¡nea %1 porque se registraron l¡ns. env¡o almac‚n.';
      Text008@1023 : TextConst 'ENU=You cannot undo line %1 because warehouse receipt lines have already been posted.;ESP=No se puede deshacer la l¡nea %1 porque se registraron l¡ns. recep. almac‚n.';
      Text009@1024 : TextConst 'ENU=You cannot undo line %1 because warehouse put-away lines have already been posted.;ESP=No se puede deshacer la l¡nea %1 porque se registraron l¡neas ubicaci¢n almac‚n.';
      Text010@1025 : TextConst 'ENU=You cannot undo line %1 because inventory pick lines have already been posted.;ESP=No se puede deshacer la l¡nea %1 porque se registraron l¡ns. picking exist.';
      Text011@1026 : TextConst 'ENU=You cannot undo line %1 because there is an item charge assigned to it on %2 Doc No. %3 Line %4.;ESP=No puede deshacer la l¡nea %1 porque hay un cargo de producto asignado a ella en %2 N§ doc. %3 L¡n. %4.';
      Text012@1002 : TextConst 'ENU=You cannot undo line %1 because an item charge has already been invoiced.;ESP=No puede deshacer l¡nea %1 porque un cargo de producto ya ha sido facturado.';
      Text013@1003 : TextConst 'ENU=Item ledger entries are missing for line %1.;ESP=Movs. producto faltan para la l¡nea %1.';
      Text014@1004 : TextConst 'ENU=You cannot undo line %1, because a revaluation has already been posted.;ESP=No se puede deshacer la l¡nea %1 porque se registr¢ la revalorizaci¢n.';

    PROCEDURE TestSalesShptLine@14(SalesShptLine@1003 : Record 111);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      WITH SalesShptLine DO BEGIN
        TestAllTransactions(DATABASE::"Sales Shipment Line",
          "Document No.","Line No.",
          DATABASE::"Sales Line",
          SalesLine."Document Type"::Order,
          "Order No.",
          "Order Line No.");
      END;
    END;

    PROCEDURE TestServShptLine@27(ServShptLine@1003 : Record 5991);
    VAR
      ServLine@1000 : Record 5902;
    BEGIN
      WITH ServShptLine DO BEGIN
        TestAllTransactions(DATABASE::"Service Shipment Line",
          "Document No.","Line No.",
          DATABASE::"Service Line",
          ServLine."Document Type"::Order,
          "Order No.",
          "Order Line No.");
      END;
    END;

    PROCEDURE TestPurchRcptLine@17(PurchRcptLine@1002 : Record 121);
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      WITH PurchRcptLine DO BEGIN
        TestAllTransactions(DATABASE::"Purch. Rcpt. Line",
          "Document No.","Line No.",
          DATABASE::"Purchase Line",
          PurchLine."Document Type"::Order,
          "Order No.",
          "Order Line No.");
      END;
    END;

    PROCEDURE TestReturnShptLine@18(ReturnShptLine@1001 : Record 6651);
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      WITH ReturnShptLine DO BEGIN
        TestAllTransactions(DATABASE::"Return Shipment Line",
          "Document No.","Line No.",
          DATABASE::"Purchase Line",
          PurchLine."Document Type"::"Return Order",
          "Return Order No.",
          "Return Order Line No.");
      END;
    END;

    PROCEDURE TestReturnRcptLine@19(ReturnRcptLine@1000 : Record 6661);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      WITH ReturnRcptLine DO BEGIN
        TestAllTransactions(DATABASE::"Return Receipt Line",
          "Document No.","Line No.",
          DATABASE::"Sales Line",
          SalesLine."Document Type"::"Return Order",
          "Return Order No.",
          "Return Order Line No.");
      END;
    END;

    LOCAL PROCEDURE TestAllTransactions@13(UndoType@1004 : Integer;UndoID@1006 : Code[20];UndoLineNo@1005 : Integer;SourceType@1003 : Integer;SourceSubtype@1002 : Integer;SourceID@1001 : Code[20];SourceRefNo@1000 : Integer);
    BEGIN
      IF NOT TestPostedWhseReceiptLine(
           UndoType,UndoID,UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo)
      THEN BEGIN
        TestWarehouseActivityLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo);
        TestRgstrdWhseActivityLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo);
        TestWhseWorksheetLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo);
      END;

      IF NOT (UndoType IN [DATABASE::"Purch. Rcpt. Line",DATABASE::"Return Receipt Line"]) THEN
        TestWarehouseReceiptLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo);
      TestWarehouseShipmentLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo);
      TestPostedWhseShipmentLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo);
      TestPostedInvtPutAwayLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo);
      TestPostedInvtPickLine(UndoLineNo,SourceType,SourceSubtype,SourceID,SourceRefNo);

      TestItemChargeAssignmentPurch(UndoType,UndoLineNo,SourceID,SourceRefNo);
      TestItemChargeAssignmentSales(UndoType,UndoLineNo,SourceID,SourceRefNo);
    END;

    LOCAL PROCEDURE TestPostedWhseReceiptLine@7(UndoType@1006 : Integer;UndoID@1007 : Code[20];UndoLineNo@1004 : Integer;SourceType@1003 : Integer;SourceSubtype@1002 : Integer;SourceID@1001 : Code[20];SourceRefNo@1000 : Integer) : Boolean;
    VAR
      PostedWhseReceiptLine@1005 : Record 7319;
      WhseUndoQty@1008 : Codeunit 7320;
    BEGIN
      IF NOT WhseUndoQty.FindPostedWhseRcptLine(
           PostedWhseReceiptLine,UndoType,UndoID,SourceType,SourceSubtype,SourceID,SourceRefNo)
      THEN
        EXIT(FALSE);
      TestWarehouseEntry(UndoLineNo,PostedWhseReceiptLine);
      TestWarehouseActivityLine2(UndoLineNo,PostedWhseReceiptLine);
      TestRgstrdWhseActivityLine2(UndoLineNo,PostedWhseReceiptLine);
      TestWhseWorksheetLine2(UndoLineNo,PostedWhseReceiptLine);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE TestWarehouseEntry@5(UndoLineNo@1002 : Integer;VAR PostedWhseReceiptLine@1000 : Record 7319);
    VAR
      WarehouseEntry@1007 : Record 7312;
      Location@1001 : Record 14;
    BEGIN
      WITH WarehouseEntry DO BEGIN
        IF PostedWhseReceiptLine."Location Code" = '' THEN
          EXIT;
        Location.GET(PostedWhseReceiptLine."Location Code");
        IF Location."Bin Mandatory" THEN BEGIN
          SETCURRENTKEY("Item No.","Location Code","Variant Code","Bin Type Code");
          SETRANGE("Item No.",PostedWhseReceiptLine."Item No.");
          SETRANGE("Location Code",PostedWhseReceiptLine."Location Code");
          SETRANGE("Variant Code",PostedWhseReceiptLine."Variant Code");
          IF Location."Directed Put-away and Pick" THEN
            SETFILTER("Bin Type Code",GetBinTypeFilter(0)); // Receiving area
          CALCSUMS("Qty. (Base)");
          IF "Qty. (Base)" < PostedWhseReceiptLine."Qty. (Base)" THEN
            ERROR(Text001,UndoLineNo);
        END;
      END;
    END;

    LOCAL PROCEDURE TestWarehouseActivityLine2@21(UndoLineNo@1001 : Integer;VAR PostedWhseReceiptLine@1000 : Record 7319);
    VAR
      WarehouseActivityLine@1011 : Record 5767;
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        SETCURRENTKEY("Whse. Document No.","Whse. Document Type","Activity Type","Whse. Document Line No.");
        SETRANGE("Whse. Document No.",PostedWhseReceiptLine."No.");
        SETRANGE("Whse. Document Type","Whse. Document Type"::Receipt);
        SETRANGE("Activity Type","Activity Type"::"Put-away");
        SETRANGE("Whse. Document Line No.",PostedWhseReceiptLine."Line No.");
        IF NOT ISEMPTY THEN
          ERROR(Text002,UndoLineNo);
      END;
    END;

    LOCAL PROCEDURE TestRgstrdWhseActivityLine2@23(UndoLineNo@1001 : Integer;VAR PostedWhseReceiptLine@1000 : Record 7319);
    VAR
      RegisteredWhseActivityLine@1010 : Record 5773;
    BEGIN
      WITH RegisteredWhseActivityLine DO BEGIN
        SETCURRENTKEY("Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
        SETRANGE("Whse. Document Type","Whse. Document Type"::Receipt);
        SETRANGE("Whse. Document No.",PostedWhseReceiptLine."No.");
        SETRANGE("Whse. Document Line No.",PostedWhseReceiptLine."Line No.");
        IF NOT ISEMPTY THEN
          ERROR(Text003,UndoLineNo);
      END;
    END;

    LOCAL PROCEDURE TestWhseWorksheetLine2@24(UndoLineNo@1001 : Integer;VAR PostedWhseReceiptLine@1000 : Record 7319);
    VAR
      WhseWorksheetLine@1002 : Record 7326;
    BEGIN
      WITH WhseWorksheetLine DO BEGIN
        SETCURRENTKEY("Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
        SETRANGE("Whse. Document Type","Whse. Document Type"::Receipt);
        SETRANGE("Whse. Document No.",PostedWhseReceiptLine."No.");
        SETRANGE("Whse. Document Line No.",PostedWhseReceiptLine."Line No.");
        IF NOT ISEMPTY THEN
          ERROR(Text004,TABLECAPTION,UndoLineNo);
      END;
    END;

    LOCAL PROCEDURE TestWarehouseActivityLine@1(UndoLineNo@1001 : Integer;SourceType@1005 : Integer;SourceSubtype@1004 : Integer;SourceID@1003 : Code[20];SourceRefNo@1000 : Integer);
    VAR
      WarehouseActivityLine@1011 : Record 5767;
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceID);
        SETRANGE("Source Line No.",SourceRefNo);
        IF NOT ISEMPTY THEN
          ERROR(Text003,UndoLineNo);
      END;
    END;

    LOCAL PROCEDURE TestRgstrdWhseActivityLine@2(UndoLineNo@1001 : Integer;SourceType@1005 : Integer;SourceSubtype@1004 : Integer;SourceID@1003 : Code[20];SourceRefNo@1000 : Integer);
    VAR
      RegisteredWhseActivityLine@1010 : Record 5773;
    BEGIN
      WITH RegisteredWhseActivityLine DO BEGIN
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceID);
        SETRANGE("Source Line No.",SourceRefNo);
        IF NOT ISEMPTY THEN
          ERROR(Text002,UndoLineNo);
      END;
    END;

    LOCAL PROCEDURE TestWarehouseReceiptLine@6(UndoLineNo@1004 : Integer;SourceType@1003 : Integer;SourceSubtype@1002 : Integer;SourceID@1001 : Code[20];SourceRefNo@1000 : Integer);
    VAR
      WarehouseReceiptLine@1006 : Record 7317;
    BEGIN
      WITH WarehouseReceiptLine DO BEGIN
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceID);
        SETRANGE("Source Line No.",SourceRefNo);
        IF NOT ISEMPTY THEN
          ERROR(Text005,UndoLineNo);
      END;
    END;

    LOCAL PROCEDURE TestWarehouseShipmentLine@8(UndoLineNo@1005 : Integer;SourceType@1003 : Integer;SourceSubtype@1002 : Integer;SourceID@1001 : Code[20];SourceRefNo@1000 : Integer);
    VAR
      WarehouseShipmentLine@1004 : Record 7321;
    BEGIN
      WITH WarehouseShipmentLine DO BEGIN
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceID);
        SETRANGE("Source Line No.",SourceRefNo);
        IF NOT ISEMPTY THEN
          ERROR(Text006,UndoLineNo);
      END;
    END;

    LOCAL PROCEDURE TestPostedWhseShipmentLine@9(UndoLineNo@1005 : Integer;SourceType@1004 : Integer;SourceSubtype@1002 : Integer;SourceID@1001 : Code[20];SourceRefNo@1000 : Integer);
    VAR
      PostedWhseShipmentLine@1003 : Record 7323;
    BEGIN
      WITH PostedWhseShipmentLine DO BEGIN
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceID);
        SETRANGE("Source Line No.",SourceRefNo);
        IF NOT ISEMPTY THEN
          ERROR(Text007,UndoLineNo);
      END;
    END;

    LOCAL PROCEDURE TestWhseWorksheetLine@10(UndoLineNo@1005 : Integer;SourceType@1004 : Integer;SourceSubtype@1003 : Integer;SourceID@1001 : Code[20];SourceRefNo@1000 : Integer);
    VAR
      WhseWorksheetLine@1002 : Record 7326;
    BEGIN
      WITH WhseWorksheetLine DO BEGIN
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceID);
        SETRANGE("Source Line No.",SourceRefNo);
        IF NOT ISEMPTY THEN
          ERROR(Text008,UndoLineNo);
      END;
    END;

    LOCAL PROCEDURE TestPostedInvtPutAwayLine@11(UndoLineNo@1005 : Integer;SourceType@1004 : Integer;SourceSubtype@1003 : Integer;SourceID@1002 : Code[20];SourceRefNo@1000 : Integer);
    VAR
      PostedInvtPutAwayLine@1001 : Record 7341;
    BEGIN
      WITH PostedInvtPutAwayLine DO BEGIN
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceID);
        SETRANGE("Source Line No.",SourceRefNo);
        IF NOT ISEMPTY THEN
          ERROR(Text009,UndoLineNo);
      END;
    END;

    LOCAL PROCEDURE TestPostedInvtPickLine@12(UndoLineNo@1005 : Integer;SourceType@1004 : Integer;SourceSubtype@1003 : Integer;SourceID@1002 : Code[20];SourceRefNo@1001 : Integer);
    VAR
      PostedInvtPickLine@1000 : Record 7343;
    BEGIN
      WITH PostedInvtPickLine DO BEGIN
        SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceID);
        SETRANGE("Source Line No.",SourceRefNo);
        IF NOT ISEMPTY THEN
          ERROR(Text010,UndoLineNo);
      END;
    END;

    LOCAL PROCEDURE TestItemChargeAssignmentPurch@3(UndoType@1004 : Integer;UndoLineNo@1002 : Integer;SourceID@1003 : Code[20];SourceRefNo@1000 : Integer);
    VAR
      ItemChargeAssignmentPurch@1009 : Record 5805;
    BEGIN
      WITH ItemChargeAssignmentPurch DO BEGIN
        SETCURRENTKEY("Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
        CASE UndoType OF
          DATABASE::"Purch. Rcpt. Line": SETRANGE("Applies-to Doc. Type","Applies-to Doc. Type"::Receipt);
          DATABASE::"Return Shipment Line": SETRANGE("Applies-to Doc. Type","Applies-to Doc. Type"::"Return Shipment");
          ELSE
            EXIT;
        END;
        SETRANGE("Applies-to Doc. No.",SourceID);
        SETRANGE("Applies-to Doc. Line No.",SourceRefNo);
        IF NOT ISEMPTY THEN
          IF FIND('-') THEN
            ERROR(Text011,UndoLineNo,"Document Type","Document No.","Line No.");
      END;
    END;

    LOCAL PROCEDURE TestItemChargeAssignmentSales@4(UndoType@1004 : Integer;UndoLineNo@1003 : Integer;SourceID@1002 : Code[20];SourceRefNo@1001 : Integer);
    VAR
      ItemChargeAssignmentSales@1008 : Record 5809;
    BEGIN
      WITH ItemChargeAssignmentSales DO BEGIN
        SETCURRENTKEY("Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
        CASE UndoType OF
          DATABASE::"Sales Shipment Line": SETRANGE("Applies-to Doc. Type","Applies-to Doc. Type"::Shipment);
          DATABASE::"Return Receipt Line": SETRANGE("Applies-to Doc. Type","Applies-to Doc. Type"::"Return Receipt");
          ELSE
            EXIT;
        END;
        SETRANGE("Applies-to Doc. No.",SourceID);
        SETRANGE("Applies-to Doc. Line No.",SourceRefNo);
        IF NOT ISEMPTY THEN
          IF FIND('-') THEN
            ERROR(Text011,UndoLineNo,"Document Type","Document No.","Line No.");
      END;
    END;

    LOCAL PROCEDURE GetBinTypeFilter@41(Type@1000 : 'Receive,Ship,Put Away,Pick') : Text[1024];
    VAR
      BinType@1001 : Record 7303;
      Filter@1002 : Text[1024];
    BEGIN
      WITH BinType DO BEGIN
        CASE Type OF
          Type::Receive: SETRANGE(Receive,TRUE);
          Type::Ship: SETRANGE(Ship,TRUE);
          Type::"Put Away": SETRANGE("Put Away",TRUE);
          Type::Pick: SETRANGE(Pick,TRUE);
        END;
        IF FIND('-') THEN
          REPEAT
            Filter := STRSUBSTNO('%1|%2',Filter,Code);
          UNTIL NEXT = 0;
        IF Filter <> '' THEN
          Filter := COPYSTR(Filter,2);
      END;
      EXIT(Filter);
    END;

    PROCEDURE CheckItemLedgEntries@26(VAR TempItemLedgEntry@1000 : TEMPORARY Record 32;LineRef@1003 : Integer);
    VAR
      ValueEntry@1001 : Record 5802;
      ItemRec@1002 : Record 27;
    BEGIN
      WITH TempItemLedgEntry DO BEGIN
        FIND('-'); // Assertion: will fail if not found.
        ValueEntry.SETCURRENTKEY("Item Ledger Entry No.");
        ItemRec.GET("Item No.");

        REPEAT
          IF Positive THEN
            TESTFIELD("Remaining Quantity",Quantity)
          ELSE
            TESTFIELD("Shipped Qty. Not Returned",Quantity);
          CALCFIELDS("Reserved Quantity");
          TESTFIELD("Reserved Quantity",0);

          ValueEntry.SETRANGE("Item Ledger Entry No.","Entry No.");
          IF ValueEntry.FIND('-') THEN
            REPEAT
              IF ValueEntry."Item Charge No." <> '' THEN
                ERROR(Text012,LineRef);
              IF ValueEntry."Entry Type" = ValueEntry."Entry Type"::Revaluation THEN
                ERROR(Text014,LineRef);
            UNTIL ValueEntry.NEXT = 0;

          IF ItemRec."Costing Method" = ItemRec."Costing Method"::Specific THEN
            TESTFIELD("Serial No.");
        UNTIL NEXT = 0;
      END; // WITH
    END;

    PROCEDURE PostItemJnlLineAppliedToList@22(ItemJnlLine@1002 : Record 83;VAR TempApplyToEntryList@1000 : TEMPORARY Record 32;UndoQty@1009 : Decimal;UndoQtyBase@1010 : Decimal;VAR TempItemLedgEntry@1011 : TEMPORARY Record 32;VAR TempItemEntryRelation@1008 : TEMPORARY Record 6507) : Integer;
    VAR
      ItemTrackingMgt@1006 : Codeunit 6500;
      ItemJnlPostLine@1001 : Codeunit 22;
      NonDistrQuantity@1004 : Decimal;
      NonDistrQuantityBase@1005 : Decimal;
    BEGIN
      TempApplyToEntryList.FIND('-'); // Assertion: will fail if not found.
      ItemJnlLine.TESTFIELD(Correction,TRUE);
      NonDistrQuantity := - UndoQty;
      NonDistrQuantityBase := - UndoQtyBase;
      REPEAT
        ItemJnlLine."Applies-to Entry" := TempApplyToEntryList."Entry No.";
        ItemJnlLine."Item Shpt. Entry No." := 0;
        ItemJnlLine."Quantity (Base)" := -TempApplyToEntryList.Quantity;
        ItemJnlLine."Serial No." := TempApplyToEntryList."Serial No.";
        ItemJnlLine."Lot No." := TempApplyToEntryList."Lot No.";

        // Quantity is filled in according to UOM:
        ItemTrackingMgt.AdjustQuantityRounding(
          NonDistrQuantity,ItemJnlLine.Quantity,
          NonDistrQuantityBase,ItemJnlLine."Quantity (Base)");

        NonDistrQuantity := NonDistrQuantity - ItemJnlLine.Quantity;
        NonDistrQuantityBase := NonDistrQuantityBase - ItemJnlLine."Quantity (Base)";

        ItemJnlPostLine.RUN(ItemJnlLine);

        TempItemEntryRelation."Item Entry No." := ItemJnlLine."Item Shpt. Entry No.";
        TempItemEntryRelation."Serial No." := ItemJnlLine."Serial No.";
        TempItemEntryRelation."Lot No." := ItemJnlLine."Lot No.";
        TempItemEntryRelation.INSERT;
        TempItemLedgEntry := TempApplyToEntryList;
        TempItemLedgEntry.INSERT;
      UNTIL TempApplyToEntryList.NEXT = 0;
    END;

    PROCEDURE CollectItemLedgEntries@20(VAR TempItemLedgEntry@1005 : TEMPORARY Record 32;SourceType@1000 : Integer;DocumentNo@1001 : Code[20];LineNo@1002 : Integer;BaseQty@1003 : Decimal;EntryRef@1004 : Integer);
    VAR
      ItemLedgEntry@1006 : Record 32;
      ItemTrackingMgt@1007 : Codeunit 6500;
    BEGIN
      TempItemLedgEntry.RESET;
      IF NOT TempItemLedgEntry.ISEMPTY THEN
        TempItemLedgEntry.DELETEALL;
      IF EntryRef <> 0 THEN BEGIN
        ItemLedgEntry.GET(EntryRef); // Assertion: will fail if no entry exists.
        TempItemLedgEntry := ItemLedgEntry;
        TempItemLedgEntry.INSERT;
      END ELSE BEGIN
        IF SourceType IN [DATABASE::"Sales Shipment Line",DATABASE::"Return Shipment Line",
          DATABASE::"Service Shipment Line"]
        THEN
          BaseQty := BaseQty * -1;
        IF NOT
           ItemTrackingMgt.CollectItemEntryRelation(
             TempItemLedgEntry,SourceType,0,DocumentNo,'',0,LineNo,BaseQty)
        THEN
          ERROR(Text013,LineNo);
      END;
    END;

    PROCEDURE UpdatePurchLine@16(PurchLine@1000 : Record 39;UndoQty@1002 : Decimal;UndoQtyBase@1005 : Decimal;VAR TempUndoneItemLedgEntry@1001 : TEMPORARY Record 32);
    VAR
      xPurchLine@1004 : Record 39;
      ReservePurchLine@1003 : Codeunit 99000834;
    BEGIN
      WITH PurchLine DO BEGIN
        xPurchLine := PurchLine;
        CASE "Document Type" OF
          "Document Type"::"Return Order":
            BEGIN
              "Return Qty. Shipped" := "Return Qty. Shipped" - UndoQty;
              "Return Qty. Shipped (Base)" := "Return Qty. Shipped (Base)" - UndoQtyBase;
              InitOutstanding;
              InitQtyToShip;
            END;
          "Document Type"::Order:
            BEGIN
              "Quantity Received" := "Quantity Received" - UndoQty;
              "Qty. Received (Base)" := "Qty. Received (Base)" - UndoQtyBase;
              InitOutstanding;
              InitQtyToReceive;
            END;
          ELSE
            FIELDERROR("Document Type");
        END;
        MODIFY;
        RevertPostedItemTracking(TempUndoneItemLedgEntry,"Expected Receipt Date");
        xPurchLine."Quantity (Base)" := 0;
        ReservePurchLine.VerifyQuantity(PurchLine,xPurchLine);
      END;
    END;

    PROCEDURE UpdateSalesLine@15(SalesLine@1000 : Record 37;UndoQty@1002 : Decimal;UndoQtyBase@1005 : Decimal;VAR TempUndoneItemLedgEntry@1001 : TEMPORARY Record 32);
    VAR
      xSalesLine@1004 : Record 37;
      ReserveSalesLine@1003 : Codeunit 99000832;
    BEGIN
      WITH SalesLine DO BEGIN
        xSalesLine := SalesLine;
        CASE "Document Type" OF
          "Document Type"::"Return Order":
            BEGIN
              "Return Qty. Received" := "Return Qty. Received" - UndoQty;
              "Return Qty. Received (Base)" := "Return Qty. Received (Base)" - UndoQtyBase;
              InitOutstanding;
              InitQtyToReceive;
            END;
          "Document Type"::Order:
            BEGIN
              "Quantity Shipped" := "Quantity Shipped" - UndoQty;
              "Qty. Shipped (Base)" := "Qty. Shipped (Base)" - UndoQtyBase;
              InitOutstanding;
              InitQtyToShip;
            END;
          ELSE
            FIELDERROR("Document Type");
        END;
        MODIFY;
        RevertPostedItemTracking(TempUndoneItemLedgEntry,"Shipment Date");
        xSalesLine."Quantity (Base)" := 0;
        ReserveSalesLine.VerifyQuantity(SalesLine,xSalesLine);
      END;
    END;

    PROCEDURE UpdateServLine@28(ServLine@1000 : Record 5902;UndoQty@1002 : Decimal;UndoQtyBase@1005 : Decimal;VAR TempUndoneItemLedgEntry@1001 : TEMPORARY Record 32);
    VAR
      xServLine@1004 : Record 5902;
      ReserveServLine@1003 : Codeunit 99000842;
    BEGIN
      WITH ServLine DO BEGIN
        xServLine := ServLine;
        CASE "Document Type" OF
          "Document Type"::Order:
            BEGIN
              "Quantity Shipped" := "Quantity Shipped" - UndoQty;
              "Qty. Shipped (Base)" := "Qty. Shipped (Base)" - UndoQtyBase;
              "Qty. to Consume" := 0;
              "Qty. to Consume (Base)" := 0;
              InitOutstanding;
              InitQtyToShip;
            END;
          ELSE
            FIELDERROR("Document Type");
        END;
        MODIFY;
        RevertPostedItemTracking(TempUndoneItemLedgEntry,"Posting Date");
        xServLine."Quantity (Base)" := 0;
        ReserveServLine.VerifyQuantity(ServLine,xServLine);
      END;
    END;

    PROCEDURE UpdateServLineCnsm@29(VAR ServLine@1000 : Record 5902;UndoQty@1005 : Decimal;UndoQtyBase@1008 : Decimal;VAR TempUndoneItemLedgEntry@1001 : TEMPORARY Record 32);
    VAR
      ServHeader@1002 : Record 5900;
      xServLine@1004 : Record 5902;
      SalesSetup@1006 : Record 311;
      ReserveServLine@1003 : Codeunit 99000842;
      ServCalcDiscount@1007 : Codeunit 5950;
    BEGIN
      WITH ServLine DO BEGIN
        xServLine := ServLine;
        CASE "Document Type" OF
          "Document Type"::Order:
            BEGIN
              "Quantity Consumed" := "Quantity Consumed" - UndoQty;
              "Qty. Consumed (Base)" := "Qty. Consumed (Base)" - UndoQtyBase;
              "Quantity Shipped" := "Quantity Shipped" - UndoQty;
              "Qty. Shipped (Base)" := "Qty. Shipped (Base)" - UndoQtyBase;
              "Qty. to Invoice" := 0;
              "Qty. to Invoice (Base)" := 0;
              InitOutstanding;
              InitQtyToShip;
              VALIDATE("Line Discount %");
              ConfirmAdjPriceLineChange;
              MODIFY;

              SalesSetup.GET;
              IF SalesSetup."Calc. Inv. Discount" THEN BEGIN
                ServHeader.GET("Document Type","Document No.");
                ServCalcDiscount.CalculateWithServHeader(ServHeader,ServLine,ServLine);
              END;

            END;
          ELSE
            FIELDERROR("Document Type");
        END;
        MODIFY;
        RevertPostedItemTracking(TempUndoneItemLedgEntry,"Posting Date");
        xServLine."Quantity (Base)" := 0;
        ReserveServLine.VerifyQuantity(ServLine,xServLine);
      END;
    END;

    PROCEDURE RevertPostedItemTracking@25(VAR TempItemLedgEntry@1000 : TEMPORARY Record 32;AvailabilityDate@1004 : Date);
    VAR
      TrackingSpecification@1001 : Record 336;
      ReservEntry@1002 : Record 337;
      TempReservEntry@1006 : TEMPORARY Record 337;
      ReservEngineMgt@1005 : Codeunit 99000831;
      LastEntryNo@1003 : Integer;
    BEGIN
      WITH TempItemLedgEntry DO BEGIN
        IF FIND('-') THEN BEGIN
          ReservEntry.LOCKTABLE;
          IF ReservEntry.FIND('+') THEN
            LastEntryNo := ReservEntry."Entry No.";
          REPEAT
            TrackingSpecification.GET("Entry No.");
            ReservEntry.INIT;
            ReservEntry.TRANSFERFIELDS(TrackingSpecification);
            ReservEntry.VALIDATE("Quantity (Base)");
            ReservEntry."Reservation Status" := ReservEntry."Reservation Status"::Surplus;
            IF ReservEntry.Positive THEN
              ReservEntry."Expected Receipt Date" := AvailabilityDate
            ELSE
              ReservEntry."Shipment Date" := AvailabilityDate;
            ReservEntry."Entry No." := LastEntryNo + 1;
            LastEntryNo := ReservEntry."Entry No.";
            ReservEntry.UpdateItemTracking;
            ReservEntry.INSERT;
            TempReservEntry := ReservEntry;
            TempReservEntry.INSERT;
            TrackingSpecification.DELETE;
          UNTIL NEXT = 0;
          ReservEngineMgt.UpdateOrderTracking(TempReservEntry);
        END;
      END; // WITH
    END;

    PROCEDURE PostItemJnlLine@40(VAR ItemJnlLine@1000 : Record 83);
    VAR
      ItemJnlPostLine@1001 : Codeunit 22;
    BEGIN
      ItemJnlPostLine.RUN(ItemJnlLine);
    END;

    BEGIN
    END.
  }
}
