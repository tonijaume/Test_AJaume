OBJECT Codeunit 6500 Item Tracking Management
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 6507=rd,
                TableData 6508=rd,
                TableData 6550=rimd;
    OnRun=VAR
            ItemTrackingForm@1000 : Form 6510;
          BEGIN
            SourceSpecification.TESTFIELD("Source Type");
            ItemTrackingForm.RegisterItemTrackingLines(
              SourceSpecification,DueDate,TempTrackingSpecification)
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=The quantity to %1 does not match the quantity defined in item tracking.;ESP=La cantidad que hay que %1 no coincide con la cantidad definida en seguimiento producto.';
      Text002@1015 : TextConst 'ENU=Cannot match item tracking.;ESP=No coincide seguimiento producto.';
      Text003@1002 : TextConst 'ENU=No information exists for %1 %2.;ESP=No existe informaci¢n para %1 %2.';
      Text004@1003 : TextConst 'ENU=Counting records...;ESP=Contando registros...';
      Text005@1004 : TextConst 'ENU=Warehouse item tracking is not enabled for %1 %2.;ESP=No est  habilitado el seguimiento pdto. almac‚n para %1 %2.';
      SourceSpecification@1005 : TEMPORARY Record 336;
      TempTrackingSpecification@1006 : TEMPORARY Record 336;
      TempGlobalWhseItemTrkgLine@1014 : TEMPORARY Record 6550;
      DueDate@1007 : Date;
      Text006@1008 : TextConst 'ENU=Synchronization cancelled.;ESP=Sincronizaci¢n cancelada.';
      Registering@1009 : Boolean;
      Text007@1001 : TextConst 'ENU=There are multiple expiration dates registered for lot %1.;ESP=Existen varias fechas de caducidad registradas para el lote %1.';
      text008@1010 : TextConst 'ENU=%1 already exists for %2 %3. Do you want to overwrite the existing information?;ESP=%1 ya existe para %2 %3. ¨Desea sobrescribir la informaci¢n existente?';
      Text009@1011 : TextConst 'ENU=Table %1 is not supported.;ESP=No se admite la tabla %1.';
      IsConsume@1012 : Boolean;
      Text010@1013 : TextConst 'ENU=invoice;ESP=factura';
      Text011@1102601000 : TextConst 'ENU=%1 must not be %2.;ESP=%1 no debe ser %2.';
      Text012@1016 : TextConst 'ENU=Only one expiration date is allowed per lot number.\%1 currently has two different expiration dates: %2 and %3.;ESP=S¢lo se permite una fecha de caducidad por n£mero de lote.\%1 tiene dos fechas de caducidad diferentes: %2 y %3.';
      IsPick@1017 : Boolean;

    PROCEDURE SetPointerFilter@21(VAR TrackingSpecification@1000 : Record 336);
    BEGIN
      WITH TrackingSpecification DO BEGIN
        SETCURRENTKEY("Source ID","Source Type","Source Subtype","Source Batch Name",
          "Source Prod. Order Line","Source Ref. No.");
        SETRANGE("Source Type","Source Type");
        SETRANGE("Source Subtype","Source Subtype");
        SETRANGE("Source ID","Source ID");
        SETRANGE("Source Batch Name","Source Batch Name");
        SETRANGE("Source Prod. Order Line","Source Prod. Order Line");
        SETRANGE("Source Ref. No.","Source Ref. No.");
      END;
    END;

    PROCEDURE LookupLotSerialNoInfo@23(ItemNo@1002 : Code[20];Variant@1003 : Code[20];LookupType@1004 : 'Serial No.,Lot No.';LookupNo@1005 : Code[20]);
    VAR
      LotNoInfo@1000 : Record 6505;
      SerialNoInfo@1001 : Record 6504;
    BEGIN
      CASE LookupType OF
        LookupType::"Serial No.":
          BEGIN
            IF NOT SerialNoInfo.GET(ItemNo,Variant,LookupNo) THEN
              ERROR(Text003,SerialNoInfo.FIELDCAPTION("Serial No."),LookupNo);
            FORM.RUNMODAL(0,SerialNoInfo);
          END;
        LookupType::"Lot No.":
          BEGIN
            IF NOT LotNoInfo.GET(ItemNo,Variant,LookupNo) THEN
              ERROR(Text003,LotNoInfo.FIELDCAPTION("Lot No."),LookupNo);
            FORM.RUNMODAL(0,LotNoInfo);
          END;
      END;
    END;

    PROCEDURE CreateTrackingSpecification@5(VAR FromReservEntry@1000 : Record 337;VAR ToTrackingSpecification@1001 : Record 336);
    BEGIN
      ToTrackingSpecification.INIT;
      ToTrackingSpecification.TRANSFERFIELDS(FromReservEntry);
      ToTrackingSpecification."Qty. to Handle (Base)" := 0;
      ToTrackingSpecification."Qty. to Invoice (Base)" := 0;
      ToTrackingSpecification."Quantity Handled (Base)" := FromReservEntry."Qty. to Handle (Base)";
      ToTrackingSpecification."Quantity Invoiced (Base)" := FromReservEntry."Qty. to Invoice (Base)";
    END;

    PROCEDURE InsertTrackingSpecification@6(VAR TrackingSpecification@1001 : Record 336);
    VAR
      TrackingSpecification2@1003 : Record 336;
    BEGIN
      IF TrackingSpecification2.FINDLAST THEN
        TrackingSpecification."Entry No." := TrackingSpecification2."Entry No." + 1
      ELSE
        TrackingSpecification."Entry No." := 1;
      TrackingSpecification.INSERT;
    END;

    PROCEDURE DeleteRelatedTrkgSpecification@7(ReservEntry@1000 : Record 337);
    VAR
      TrackingSpecification@1001 : Record 336;
    BEGIN
      TrackingSpecification.SETCURRENTKEY("Source ID");
      TrackingSpecification.TRANSFERFIELDS(ReservEntry);
      SetPointerFilter(TrackingSpecification);
      TrackingSpecification.DELETEALL;
    END;

    PROCEDURE GetItemTrackingSettings@4(VAR ItemTrackingCode@1000 : Record 6502;EntryType@1001 : 'Purchase,Sale,Positive Adjmt.,Negative Adjmt.,Transfer,Consumption,Output';Inbound@1002 : Boolean;VAR SNRequired@1003 : Boolean;VAR LotRequired@1004 : Boolean;VAR SNInfoRequired@1006 : Boolean;VAR LotInfoRequired@1005 : Boolean);
    BEGIN
      SNRequired := FALSE;
      LotRequired := FALSE;
      SNInfoRequired := FALSE;
      LotInfoRequired := FALSE;

      IF ItemTrackingCode.Code = '' THEN BEGIN
        CLEAR(ItemTrackingCode);
        EXIT;
      END ELSE
        ItemTrackingCode.GET(ItemTrackingCode.Code);

      SNInfoRequired := (Inbound AND ItemTrackingCode."SN Info. Inbound Must Exist") OR
        (NOT Inbound AND ItemTrackingCode."SN Info. Outbound Must Exist");

      LotInfoRequired := (Inbound AND ItemTrackingCode."Lot Info. Inbound Must Exist") OR
        (NOT Inbound AND ItemTrackingCode."Lot Info. Outbound Must Exist");

      IF ItemTrackingCode."SN Specific Tracking" THEN BEGIN
        SNRequired := TRUE;
      END ELSE BEGIN
        CASE EntryType OF
          EntryType::Purchase:
            IF Inbound THEN
              SNRequired := ItemTrackingCode."SN Purchase Inbound Tracking"
            ELSE
              SNRequired := ItemTrackingCode."SN Purchase Outbound Tracking";
          EntryType::Sale:
            IF Inbound THEN
              SNRequired := ItemTrackingCode."SN Sales Inbound Tracking"
            ELSE
              SNRequired := ItemTrackingCode."SN Sales Outbound Tracking";
          EntryType::"Positive Adjmt.":
            IF Inbound THEN
              SNRequired := ItemTrackingCode."SN Pos. Adjmt. Inb. Tracking"
            ELSE
              SNRequired := ItemTrackingCode."SN Pos. Adjmt. Outb. Tracking";
          EntryType::"Negative Adjmt.":
            IF Inbound THEN
              SNRequired := ItemTrackingCode."SN Neg. Adjmt. Inb. Tracking"
            ELSE
              SNRequired := ItemTrackingCode."SN Neg. Adjmt. Outb. Tracking";
          EntryType::Transfer:
            SNRequired := ItemTrackingCode."SN Transfer Tracking";
          EntryType::Consumption,EntryType::Output:
            IF Inbound THEN
              SNRequired := ItemTrackingCode."SN Manuf. Inbound Tracking"
            ELSE
              SNRequired := ItemTrackingCode."SN Manuf. Outbound Tracking";
        END;
      END;

      IF ItemTrackingCode."Lot Specific Tracking" THEN BEGIN
        LotRequired := TRUE;
      END ELSE BEGIN
        CASE EntryType OF
          EntryType::Purchase:
            IF Inbound THEN
              LotRequired := ItemTrackingCode."Lot Purchase Inbound Tracking"
            ELSE
              LotRequired := ItemTrackingCode."Lot Purchase Outbound Tracking";
          EntryType::Sale:
            IF Inbound THEN
              LotRequired := ItemTrackingCode."Lot Sales Inbound Tracking"
            ELSE
              LotRequired := ItemTrackingCode."Lot Sales Outbound Tracking";
          EntryType::"Positive Adjmt.":
            IF Inbound THEN
              LotRequired := ItemTrackingCode."Lot Pos. Adjmt. Inb. Tracking"
            ELSE
              LotRequired := ItemTrackingCode."Lot Pos. Adjmt. Outb. Tracking";
          EntryType::"Negative Adjmt.":
            IF Inbound THEN
              LotRequired := ItemTrackingCode."Lot Neg. Adjmt. Inb. Tracking"
            ELSE
              LotRequired := ItemTrackingCode."Lot Neg. Adjmt. Outb. Tracking";
          EntryType::Transfer:
            LotRequired := ItemTrackingCode."Lot Transfer Tracking";
          EntryType::Consumption,EntryType::Output:
            IF Inbound THEN
              LotRequired := ItemTrackingCode."Lot Manuf. Inbound Tracking"
            ELSE
              LotRequired := ItemTrackingCode."Lot Manuf. Outbound Tracking";
        END;
      END;
    END;

    PROCEDURE RetrieveInvoiceSpecification@35(SourceSpecification@1002 : Record 336;VAR TempInvoicingSpecification@1008 : TEMPORARY Record 336) OK@1003 : Boolean;
    VAR
      T336@1000 : Record 336;
      TotalQtyToInvoiceBase@1005 : Decimal;
    BEGIN
      OK := FALSE;
      TempInvoicingSpecification.RESET;
      TempInvoicingSpecification.DELETEALL;

      // T336 contains information about lines that should be invoiced:

      T336.SETCURRENTKEY("Source ID","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Source Ref. No.");

      T336.SETRANGE("Source Type",SourceSpecification."Source Type");
      T336.SETRANGE("Source Subtype",SourceSpecification."Source Subtype");
      T336.SETRANGE("Source ID",SourceSpecification."Source ID");
      T336.SETRANGE("Source Batch Name",SourceSpecification."Source Batch Name");
      T336.SETRANGE("Source Prod. Order Line",SourceSpecification."Source Prod. Order Line");
      T336.SETRANGE("Source Ref. No.",SourceSpecification."Source Ref. No.");
      IF T336.FINDSET THEN
        REPEAT
          T336.TESTFIELD("Qty. to Handle (Base)",0);
          T336.TESTFIELD("Qty. to Handle",0);
          IF NOT T336.Correction THEN BEGIN
            TempInvoicingSpecification := T336;
            TempInvoicingSpecification."Qty. to Invoice" :=
              ROUND(TempInvoicingSpecification."Qty. to Invoice (Base)" /
                SourceSpecification."Qty. per Unit of Measure",0.00001);
            TotalQtyToInvoiceBase += TempInvoicingSpecification."Qty. to Invoice (Base)";
            TempInvoicingSpecification.INSERT;
          END;
        UNTIL T336.NEXT = 0;

      IF SourceSpecification."Qty. to Invoice (Base)" <> 0 THEN BEGIN
        IF TempInvoicingSpecification.FINDFIRST THEN BEGIN
          IF (TotalQtyToInvoiceBase <>
              SourceSpecification."Qty. to Invoice (Base)" - SourceSpecification."Qty. to Handle (Base)") AND
             (TotalQtyToInvoiceBase <> 0) AND
             NOT IsConsume
          THEN
            ERROR(Text001,Text010);
          OK := TRUE;
        END;
      END;
      TempInvoicingSpecification.SETFILTER("Qty. to Invoice (Base)",'<>0');
      IF NOT TempInvoicingSpecification.FINDFIRST THEN
        TempInvoicingSpecification.INIT;
    END;

    PROCEDURE RetrieveInvoiceSpecWithService@75(SourceSpecification@1002 : Record 336;VAR TempInvoicingSpecification@1008 : TEMPORARY Record 336;Consume@1001 : Boolean) OK@1003 : Boolean;
    BEGIN
      IsConsume := Consume;
      OK := RetrieveInvoiceSpecification(SourceSpecification,TempInvoicingSpecification);
    END;

    PROCEDURE RetrieveItemTracking@9(ItemJnlLine@1002 : Record 83;VAR TempHandlingSpecification@1007 : TEMPORARY Record 336) : Boolean;
    VAR
      T337@1001 : Record 337;
    BEGIN
      IF ItemJnlLine.Subcontracting THEN
        EXIT(RetrieveSubcontrItemTracking(ItemJnlLine,TempHandlingSpecification));

      T337.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line");
      T337.SETRANGE("Source ID",ItemJnlLine."Journal Template Name");
      T337.SETRANGE("Source Ref. No.",ItemJnlLine."Line No.");
      T337.SETRANGE("Source Type",DATABASE::"Item Journal Line");
      T337.SETRANGE("Source Subtype",ItemJnlLine."Entry Type");
      T337.SETRANGE("Source Batch Name",ItemJnlLine."Journal Batch Name");
      T337.SETRANGE("Source Prod. Order Line",0);
      T337.SETFILTER("Qty. to Handle (Base)",'<>0');

      IF SumUpItemTracking(T337,TempHandlingSpecification,FALSE,TRUE) THEN BEGIN
        T337.SETRANGE("Reservation Status",T337."Reservation Status"::Prospect);
        IF NOT T337.ISEMPTY THEN
          T337.DELETEALL;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE RetrieveSubcontrItemTracking@46(ItemJnlLine@1002 : Record 83;VAR TempHandlingSpecification@1007 : TEMPORARY Record 336) : Boolean;
    VAR
      T337@1001 : Record 337;
      ProdOrderRtngLine@1000 : Record 5409;
    BEGIN
      IF NOT ItemJnlLine.Subcontracting THEN
        EXIT(FALSE);

      IF ItemJnlLine."Operation No." = '' THEN
        EXIT(FALSE);

      ItemJnlLine.TESTFIELD("Routing No.");
      IF NOT ProdOrderRtngLine.GET(
           ProdOrderRtngLine.Status::Released,ItemJnlLine."Prod. Order No.",
           ItemJnlLine."Routing Reference No.",ItemJnlLine."Routing No.",ItemJnlLine."Operation No.")
      THEN
        EXIT(FALSE);
      IF NOT (ProdOrderRtngLine."Next Operation No." = '') THEN
        EXIT(FALSE);

      T337.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line");
      T337.SETRANGE("Source ID",ItemJnlLine."Prod. Order No.");
      T337.SETRANGE("Source Ref. No.",0);
      T337.SETRANGE("Source Type",DATABASE::"Prod. Order Line");
      T337.SETRANGE("Source Subtype",3);
      T337.SETRANGE("Source Batch Name",'');
      T337.SETRANGE("Source Prod. Order Line",ItemJnlLine."Prod. Order Line No.");
      T337.SETFILTER("Qty. to Handle (Base)",'<>0');

      IF SumUpItemTracking(T337,TempHandlingSpecification,FALSE,TRUE) THEN BEGIN
        T337.SETRANGE("Reservation Status",T337."Reservation Status"::Prospect);
        IF NOT T337.ISEMPTY THEN
          T337.DELETEALL;
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE RetrieveConsumpItemTracking@13(ItemJnlLine@1002 : Record 83;VAR TempHandlingSpecification@1007 : TEMPORARY Record 336) : Boolean;
    VAR
      T337@1001 : Record 337;
    BEGIN
      T337.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line");
      T337.SETRANGE("Source ID",ItemJnlLine."Prod. Order No.");
      IF ItemJnlLine."Prod. Order Comp. Line No." <> 0 THEN
        T337.SETRANGE("Source Ref. No.",ItemJnlLine."Prod. Order Comp. Line No.");
      T337.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
      T337.SETRANGE("Source Subtype",3); // Released
      T337.SETRANGE("Source Batch Name",'');
      T337.SETRANGE("Source Prod. Order Line",ItemJnlLine."Prod. Order Line No.");
      T337.SETFILTER("Qty. to Handle (Base)",'<>0');

      // Sum up in a temporary table per component line:
      EXIT(SumUpItemTracking(T337,TempHandlingSpecification,TRUE,TRUE));
    END;

    PROCEDURE SumUpItemTracking@15(VAR T337@1000 : Record 337;VAR TempHandlingSpecification@1007 : TEMPORARY Record 336;SumPerLine@1006 : Boolean;SumPerLotSN@1008 : Boolean) : Boolean;
    VAR
      NextEntryNo@1004 : Integer;
      ExpDate@1210 : Date;
      EntriesExist@1211 : Boolean;
    BEGIN
      // Sum up Item Tracking in a temporary table (to defragment the T337 records)
      TempHandlingSpecification.RESET;
      TempHandlingSpecification.DELETEALL;
      IF SumPerLotSN THEN
        TempHandlingSpecification.SETCURRENTKEY("Lot No.","Serial No.");

      IF T337.FINDSET THEN
        REPEAT
          IF (T337."Lot No." <> '') OR (T337."Serial No." <> '') THEN BEGIN
            IF SumPerLine THEN
              TempHandlingSpecification.SETRANGE("Source Ref. No.",T337."Source Ref. No."); // Sum up line per line
            IF SumPerLotSN THEN BEGIN
              TempHandlingSpecification.SETRANGE("Serial No.",T337."Serial No.");
              TempHandlingSpecification.SETRANGE("Lot No.",T337."Lot No.");
            END;
            IF TempHandlingSpecification.FINDFIRST THEN BEGIN
              TempHandlingSpecification."Quantity (Base)" += T337."Quantity (Base)";
              TempHandlingSpecification."Qty. to Handle (Base)" += T337."Qty. to Handle (Base)";
              TempHandlingSpecification."Qty. to Invoice (Base)" += T337."Qty. to Invoice (Base)";
              TempHandlingSpecification."Quantity Invoiced (Base)" += T337."Quantity Invoiced (Base)";
              TempHandlingSpecification."Qty. to Handle" :=
                TempHandlingSpecification."Qty. to Handle (Base)" /
                T337."Qty. per Unit of Measure";
              TempHandlingSpecification."Qty. to Invoice" :=
                TempHandlingSpecification."Qty. to Invoice (Base)" /
                T337."Qty. per Unit of Measure";
              IF T337."Reservation Status" > T337."Reservation Status"::Tracking THEN
                TempHandlingSpecification."Buffer Value1" += // Late Binding
                  TempHandlingSpecification."Qty. to Handle (Base)";
              TempHandlingSpecification.MODIFY;
            END ELSE BEGIN
              TempHandlingSpecification.INIT;
              TempHandlingSpecification.TRANSFERFIELDS(T337);
              NextEntryNo += 1;
              TempHandlingSpecification."Entry No." := NextEntryNo;
              TempHandlingSpecification."Qty. to Handle" :=
                TempHandlingSpecification."Qty. to Handle (Base)" /
                T337."Qty. per Unit of Measure";
              TempHandlingSpecification."Qty. to Invoice" :=
                TempHandlingSpecification."Qty. to Invoice (Base)" /
                T337."Qty. per Unit of Measure";
              IF T337."Reservation Status" > T337."Reservation Status"::Tracking THEN
                TempHandlingSpecification."Buffer Value1" += // Late Binding
                  TempHandlingSpecification."Qty. to Handle (Base)";
              ExpDate := ExistingExpirationDate(T337."Item No.",T337."Variant Code",T337."Lot No.",T337."Serial No.",FALSE,EntriesExist)
      ;
              IF EntriesExist THEN
                TempHandlingSpecification."Expiration Date" := ExpDate;
              TempHandlingSpecification.INSERT;
            END;
          END;
        UNTIL T337.NEXT = 0;

      TempHandlingSpecification.RESET;
      EXIT(TempHandlingSpecification.FINDFIRST);
    END;

    PROCEDURE DecomposeRowID@8(IDtext@1000 : Text[250];VAR StrArray@1009 : ARRAY [6] OF Text[100]);
    VAR
      Len@1005 : Integer;
      Pos@1002 : Integer;
      ArrayIndex@1007 : Integer;
      Count@1004 : Integer;
      Char@1003 : Text[1];
      NoWriteSinceLastNext@1010 : Boolean;
      Write@1006 : Boolean;
      Next@1001 : Boolean;
    BEGIN
      FOR ArrayIndex := 1 TO 6 DO
        StrArray[ArrayIndex] := '';
      Len := STRLEN(IDtext);
      Pos := 1;
      ArrayIndex := 1;

      WHILE NOT (Pos > Len) DO BEGIN
        Char := COPYSTR(IDtext,Pos,1);
        IF Char = '"' THEN BEGIN
          Write := FALSE;
          Count += 1;
        END ELSE BEGIN
          IF Count = 0 THEN
            Write := TRUE
          ELSE BEGIN
            IF Count MOD 2 = 1 THEN BEGIN
              Next := (Char = ';');
              Count -= 1;
            END ELSE
              IF NoWriteSinceLastNext AND (Char = ';') THEN BEGIN
                Count -= 2;
                Next := TRUE;
              END;
            Count /= 2;
            WHILE Count > 0 DO BEGIN
              StrArray[ArrayIndex] += '"';
              Count -= 1;
            END;
            Write := NOT Next;
          END;
          NoWriteSinceLastNext := Next;
        END;

        IF Next THEN BEGIN
          ArrayIndex += 1;
          Next := FALSE
        END;

        IF Write THEN
          StrArray[ArrayIndex] += Char;
        Pos += 1;
      END;
    END;

    PROCEDURE ComposeRowID@2(Type@1005 : Integer;Subtype@1004 : Integer;ID@1003 : Code[20];BatchName@1002 : Code[10];ProdOrderLine@1001 : Integer;RefNo@1000 : Integer) : Text[250];
    VAR
      StrArray@1006 : ARRAY [2] OF Text[100];
      Pos@1010 : Integer;
      Len@1011 : Integer;
      T@1009 : Integer;
    BEGIN
      StrArray[1] := ID;
      StrArray[2] := BatchName;
      FOR T := 1 TO 2 DO BEGIN
        IF STRPOS(StrArray[T],'"') > 0 THEN BEGIN
          Len := STRLEN(StrArray[T]);
          Pos := 1;
          REPEAT
            IF COPYSTR(StrArray[T],Pos,1) = '"' THEN BEGIN
              StrArray[T] := INSSTR(StrArray[T],'"',Pos + 1);
              Len += 1;
              Pos += 1;
            END;
            Pos += 1;
          UNTIL Pos > Len;
        END;
      END;
      EXIT(STRSUBSTNO('"%1";"%2";"%3";"%4";"%5";"%6"',Type,Subtype,StrArray[1],StrArray[2],ProdOrderLine,RefNo));
    END;

    PROCEDURE CallPostedItemTrackingForm@10(Type@1005 : Integer;Subtype@1004 : Integer;ID@1003 : Code[20];BatchName@1002 : Code[10];ProdOrderLine@1001 : Integer;RefNo@1000 : Integer) : Boolean;
    VAR
      TempItemLedgEntry@1007 : TEMPORARY Record 32;
    BEGIN
      // Used when calling Item Tracking from Posted Shipments/Receipts:

      RetrieveILEFromShptRcpt(TempItemLedgEntry,Type,Subtype,ID,BatchName,ProdOrderLine,RefNo);
      IF NOT TempItemLedgEntry.ISEMPTY THEN BEGIN
        FORM.RUNMODAL(FORM::"Posted Item Tracking Lines",TempItemLedgEntry);
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CallPostedItemTrackingForm2@11(Type@1005 : Integer;Subtype@1004 : Integer;ID@1003 : Code[20];RefNo@1000 : Integer) : Boolean;
    VAR
      ItemEntryRelation@1006 : Record 6507;
      ItemLedgEntry@1008 : Record 32;
      TempItemLedgEntry@1007 : TEMPORARY Record 32;
      SignFactor@1010 : Integer;
    BEGIN
      // Used when calling Item Tracking from Posted Whse Activity Lines:

      CASE Type OF
        DATABASE::"Sales Line":
          Type := DATABASE::"Sales Shipment Line";
        DATABASE::"Purchase Line":
          Type := DATABASE::"Purch. Rcpt. Line";
        DATABASE::"Prod. Order Component":
        ;
        DATABASE::"Transfer Line":
          IF Subtype = 0 THEN
            Type := DATABASE::"Transfer Shipment Line"
          ELSE
            Type := DATABASE::"Transfer Receipt Line";
      END;

      ItemEntryRelation.SETCURRENTKEY("Order No.","Order Line No.");
      ItemEntryRelation.SETRANGE("Source Type",Type);
      ItemEntryRelation.SETRANGE("Order No.",ID);
      ItemEntryRelation.SETRANGE("Order Line No.",RefNo);
      IF ItemEntryRelation.FINDSET THEN BEGIN
        SignFactor := TableSignFactor(Type);
        REPEAT
          ItemLedgEntry.GET(ItemEntryRelation."Item Entry No.");
          TempItemLedgEntry := ItemLedgEntry;
          AddTempRecordToSet(TempItemLedgEntry,SignFactor);
        UNTIL ItemEntryRelation.NEXT = 0;
        FORM.RUNMODAL(FORM::"Posted Item Tracking Lines",TempItemLedgEntry);
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CallPostedItemTrackingForm3@12(InvoiceRowID@1000 : Text[100]) : Boolean;
    VAR
      TempItemLedgEntry@1007 : TEMPORARY Record 32;
    BEGIN
      // Used when calling Item Tracking from invoiced documents:

      RetrieveILEFromPostedInv(TempItemLedgEntry,InvoiceRowID);
      IF NOT TempItemLedgEntry.ISEMPTY THEN BEGIN
        FORM.RUNMODAL(FORM::"Posted Item Tracking Lines",TempItemLedgEntry);
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CallPostedItemTrackingForm4@39(Type@1009 : Integer;ID@1007 : Code[20];ProdOrderLine@1002 : Integer;RefNo@1001 : Integer) : Boolean;
    VAR
      ItemLedgEntry@1003 : Record 32;
      TempItemLedgEntry@1000 : TEMPORARY Record 32;
      Window@1004 : Dialog;
    BEGIN
      // Used when calling Item Tracking from finished prod. order and component:
      Window.OPEN(Text004);
      ItemLedgEntry.SETCURRENTKEY("Prod. Order No.","Prod. Order Line No.",
        "Entry Type","Prod. Order Comp. Line No.");

      ItemLedgEntry.SETRANGE("Prod. Order No.",ID);
      ItemLedgEntry.SETRANGE("Prod. Order Line No.",ProdOrderLine);

      CASE Type OF
        DATABASE::"Prod. Order Line":
          BEGIN
            ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Output);
            ItemLedgEntry.SETRANGE("Prod. Order Comp. Line No.",0);
          END;
        DATABASE::"Prod. Order Component":
          BEGIN
            ItemLedgEntry.SETRANGE("Entry Type",ItemLedgEntry."Entry Type"::Consumption);
            ItemLedgEntry.SETRANGE("Prod. Order Comp. Line No.",RefNo);
          END;
        ELSE
          EXIT(FALSE);
      END;

      IF ItemLedgEntry.FINDSET THEN
        REPEAT
          IF (ItemLedgEntry."Serial No." <> '') OR (ItemLedgEntry."Lot No." <> '') THEN BEGIN
            TempItemLedgEntry := ItemLedgEntry;
            TempItemLedgEntry.INSERT;
          END
        UNTIL ItemLedgEntry.NEXT = 0;
      Window.CLOSE;
      IF TempItemLedgEntry.ISEMPTY THEN
        EXIT(FALSE);

      FORM.RUNMODAL(FORM::"Posted Item Tracking Lines",TempItemLedgEntry);
      EXIT(TRUE);
    END;

    PROCEDURE CallItemTrackingEntryForm@25(SourceType@1001 : ' ,Customer,Vendor,Item';SourceNo@1002 : Code[20];ItemNo@1005 : Code[20];VariantCode@1009 : Code[20];SerialNo@1007 : Code[20];LotNo@1008 : Code[20];LocationCode@1010 : Code[10]);
    VAR
      ItemLedgEntry@1003 : Record 32;
      TempItemLedgEntry@1000 : TEMPORARY Record 32;
      Item@1006 : Record 27;
      Window@1004 : Dialog;
    BEGIN
      // Used when calling Item Tracking from Item, Stockkeeping Unit, Customer, Vendor and information card:
      Window.OPEN(Text004);

      IF SourceNo <> '' THEN BEGIN
        ItemLedgEntry.SETCURRENTKEY("Source Type","Source No.","Item No.","Variant Code");
        ItemLedgEntry.SETRANGE("Source No.",SourceNo);
        ItemLedgEntry.SETRANGE("Source Type",SourceType);
      END ELSE
        ItemLedgEntry.SETCURRENTKEY("Item No.",Open,"Variant Code");

      IF LocationCode <> '' THEN
        ItemLedgEntry.SETRANGE("Location Code",LocationCode);

      IF ItemNo <> '' THEN BEGIN
        Item.GET(ItemNo);
        Item.TESTFIELD("Item Tracking Code");
        ItemLedgEntry.SETRANGE("Item No.",ItemNo);
      END;
      IF SourceType = 0 THEN
        ItemLedgEntry.SETRANGE("Variant Code",VariantCode);
      IF SerialNo <> '' THEN
        ItemLedgEntry.SETRANGE("Serial No.",SerialNo);
      IF LotNo <> '' THEN
        ItemLedgEntry.SETRANGE("Lot No.",LotNo);

      IF ItemLedgEntry.FINDSET THEN
        REPEAT
          IF (ItemLedgEntry."Serial No." <> '') OR (ItemLedgEntry."Lot No." <> '') THEN BEGIN
            TempItemLedgEntry := ItemLedgEntry;
            TempItemLedgEntry.INSERT;
          END
        UNTIL ItemLedgEntry.NEXT = 0;
      Window.CLOSE;
      FORM.RUNMODAL(FORM::"Item Tracking Entries",TempItemLedgEntry);
    END;

    PROCEDURE CopyItemTracking@14(FromRowID@1000 : Text[250];ToRowID@1001 : Text[250];SwapSign@1006 : Boolean);
    BEGIN
      CopyItemTracking2(FromRowID,ToRowID,SwapSign,FALSE);
    END;

    PROCEDURE CopyItemTracking2@55(FromRowID@1000 : Text[250];ToRowID@1001 : Text[250];SwapSign@1006 : Boolean;SkipReservation@1007 : Boolean);
    VAR
      ReservEntry@1002 : Record 337;
      ReservMgt@1004 : Codeunit 99000845;
    BEGIN
      ReservEntry.SetPointer(FromRowID);
      ReservMgt.SetPointerFilter(ReservEntry);
      CopyItemTracking3(ReservEntry,ToRowID,SwapSign,SkipReservation);
    END;

    PROCEDURE CopyItemTracking3@76(VAR ReservEntry@1008 : Record 337;ToRowID@1001 : Text[250];SwapSign@1006 : Boolean;SkipReservation@1007 : Boolean);
    VAR
      ReservEntry1@1000 : Record 337;
      TempReservEntry@1003 : TEMPORARY Record 337;
      LastEntryNo@1005 : Integer;
    BEGIN
      IF SkipReservation THEN
        ReservEntry.SETFILTER("Reservation Status",'<>%1',ReservEntry."Reservation Status"::Reservation);
      IF ReservEntry.FINDSET THEN BEGIN
        REPEAT
          IF (ReservEntry."Lot No." <> '') OR (ReservEntry."Serial No." <> '') THEN BEGIN
            TempReservEntry := ReservEntry;
            TempReservEntry."Reservation Status" := TempReservEntry."Reservation Status"::Prospect;
            TempReservEntry.SetPointer(ToRowID);
            IF SwapSign THEN BEGIN
              TempReservEntry."Quantity (Base)" := -TempReservEntry."Quantity (Base)";
              TempReservEntry.Quantity := -TempReservEntry.Quantity;
              TempReservEntry."Qty. to Handle (Base)" := -TempReservEntry."Qty. to Handle (Base)";
              TempReservEntry."Qty. to Invoice (Base)" := -TempReservEntry."Qty. to Invoice (Base)";
              TempReservEntry."Quantity Invoiced (Base)" := -TempReservEntry."Quantity Invoiced (Base)";
              TempReservEntry.Positive := TempReservEntry."Quantity (Base)" > 0;
            END;
            TempReservEntry.INSERT;
          END;
        UNTIL ReservEntry.NEXT = 0;

        ModifyTemp337SetIfTransfer(TempReservEntry);

        IF TempReservEntry.FINDSET THEN BEGIN
          ReservEntry1.RESET;
          ReservEntry1.LOCKTABLE;
          IF ReservEntry1.FINDLAST THEN
            LastEntryNo := ReservEntry1."Entry No.";
          REPEAT
            ReservEntry1 := TempReservEntry;
            LastEntryNo += 1;
            ReservEntry1."Entry No." := LastEntryNo;
            ReservEntry1.INSERT;
          UNTIL TempReservEntry.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CopyHandledItemTrkgToInvLine@1(FromSalesLine@1000 : Record 37;ToSalesInvLine@1001 : Record 37);
    VAR
      ReservEntry@1005 : Record 337;
      TrackingSpecification@1006 : Record 336;
      ItemEntryRelation@1003 : Record 6507;
      QtyBase@1002 : Decimal;
      LastEntryNo@1009 : Integer;
    BEGIN
      // Used for combined shipment/returns:
      IF FromSalesLine.Type <> FromSalesLine.Type::Item THEN
        EXIT;

      ItemEntryRelation.SETCURRENTKEY("Source ID","Source Type","Source Subtype","Source Ref. No.");
      ItemEntryRelation.SETRANGE("Source Subtype",0);
      ItemEntryRelation.SETRANGE("Source Batch Name",'');
      ItemEntryRelation.SETRANGE("Source Prod. Order Line",0);

      CASE ToSalesInvLine."Document Type" OF
        ToSalesInvLine."Document Type"::Invoice:
          BEGIN
            ItemEntryRelation.SETRANGE("Source Type",DATABASE::"Sales Shipment Line");
            ItemEntryRelation.SETRANGE("Source ID",ToSalesInvLine."Shipment No.");
            ItemEntryRelation.SETRANGE("Source Ref. No.",ToSalesInvLine."Shipment Line No.");
          END;
        ToSalesInvLine."Document Type"::"Credit Memo":
          BEGIN
            ItemEntryRelation.SETRANGE("Source Type",DATABASE::"Return Receipt Line");
            ItemEntryRelation.SETRANGE("Source ID",ToSalesInvLine."Return Receipt No.");
            ItemEntryRelation.SETRANGE("Source Ref. No.",ToSalesInvLine."Return Receipt Line No.");
          END;
        ELSE
          ToSalesInvLine.FIELDERROR("Document Type",FORMAT(ToSalesInvLine."Document Type"));
      END;

      IF NOT ItemEntryRelation.FINDSET THEN
        EXIT;

      ReservEntry.LOCKTABLE;
      IF ReservEntry.FINDLAST THEN
        LastEntryNo := ReservEntry."Entry No.";

      REPEAT
        TrackingSpecification.GET(ItemEntryRelation."Item Entry No.");
        QtyBase := TrackingSpecification."Quantity (Base)" - TrackingSpecification."Quantity Invoiced (Base)";
        IF QtyBase <> 0 THEN BEGIN
          ReservEntry.INIT;
          ReservEntry.TRANSFERFIELDS(TrackingSpecification);
          ReservEntry."Source Subtype" := ToSalesInvLine."Document Type";
          ReservEntry."Source ID" := ToSalesInvLine."Document No.";
          ReservEntry."Source Ref. No." := ToSalesInvLine."Line No.";
          ReservEntry."Reservation Status" := ReservEntry."Reservation Status"::Prospect;
          ReservEntry."Quantity Invoiced (Base)" := 0;
          ReservEntry.VALIDATE("Quantity (Base)",QtyBase);
          ReservEntry.Positive := (ReservEntry."Quantity (Base)" > 0);
          ReservEntry."Entry No." := LastEntryNo + 1;
          ReservEntry.INSERT;
          LastEntryNo := ReservEntry."Entry No.";
        END;
      UNTIL ItemEntryRelation.NEXT = 0;
    END;

    PROCEDURE CopyHandledItemTrkgToInvLine2@43(FromPurchLine@1000 : Record 39;ToPurchInvLine@1001 : Record 39);
    VAR
      ReservEntry@1005 : Record 337;
      TrackingSpecification@1006 : Record 336;
      ItemEntryRelation@1003 : Record 6507;
      QtyBase@1002 : Decimal;
      LastEntryNo@1009 : Integer;
    BEGIN
      // Used for combined receipts/returns:
      IF FromPurchLine.Type <> FromPurchLine.Type::Item THEN
        EXIT;

      ItemEntryRelation.SETCURRENTKEY("Source ID","Source Type","Source Subtype","Source Ref. No.");
      ItemEntryRelation.SETRANGE("Source Subtype",0);
      ItemEntryRelation.SETRANGE("Source Batch Name",'');
      ItemEntryRelation.SETRANGE("Source Prod. Order Line",0);

      CASE ToPurchInvLine."Document Type" OF
        ToPurchInvLine."Document Type"::Invoice:
          BEGIN
            ItemEntryRelation.SETRANGE("Source Type",DATABASE::"Purch. Rcpt. Line");
            ItemEntryRelation.SETRANGE("Source ID",ToPurchInvLine."Receipt No.");
            ItemEntryRelation.SETRANGE("Source Ref. No.",ToPurchInvLine."Receipt Line No.");
          END;
        ToPurchInvLine."Document Type"::"Credit Memo":
          BEGIN
            ItemEntryRelation.SETRANGE("Source Type",DATABASE::"Return Shipment Line");
            ItemEntryRelation.SETRANGE("Source ID",ToPurchInvLine."Return Shipment No.");
            ItemEntryRelation.SETRANGE("Source Ref. No.",ToPurchInvLine."Return Shipment Line No.");
          END;
        ELSE
          ToPurchInvLine.FIELDERROR("Document Type",FORMAT(ToPurchInvLine."Document Type"));
      END;

      IF NOT ItemEntryRelation.FINDSET THEN
        EXIT;

      ReservEntry.LOCKTABLE;
      IF ReservEntry.FINDLAST THEN
        LastEntryNo := ReservEntry."Entry No.";

      REPEAT
        TrackingSpecification.GET(ItemEntryRelation."Item Entry No.");
        QtyBase := TrackingSpecification."Quantity (Base)" - TrackingSpecification."Quantity Invoiced (Base)";
        IF QtyBase <> 0 THEN BEGIN
          ReservEntry.INIT;
          ReservEntry.TRANSFERFIELDS(TrackingSpecification);
          ReservEntry."Source Subtype" := ToPurchInvLine."Document Type";
          ReservEntry."Source ID" := ToPurchInvLine."Document No.";
          ReservEntry."Source Ref. No." := ToPurchInvLine."Line No.";
          ReservEntry."Reservation Status" := ReservEntry."Reservation Status"::Prospect;
          ReservEntry."Quantity Invoiced (Base)" := 0;
          ReservEntry.VALIDATE("Quantity (Base)",QtyBase);
          ReservEntry.Positive := (ReservEntry."Quantity (Base)" > 0);
          ReservEntry."Entry No." := LastEntryNo + 1;
          ReservEntry.INSERT;
          LastEntryNo := ReservEntry."Entry No.";
        END;
      UNTIL ItemEntryRelation.NEXT = 0;
    END;

    PROCEDURE CopyHandledItemTrkgToServLine@93(FromServLine@1000 : Record 5902;ToServLine@1001 : Record 5902);
    VAR
      ReservEntry@1005 : Record 337;
      TrackingSpecification@1006 : Record 336;
      ItemEntryRelation@1003 : Record 6507;
      QtyBase@1002 : Decimal;
      LastEntryNo@1009 : Integer;
    BEGIN
      // Used for combined shipment/returns:
      IF FromServLine.Type <> FromServLine.Type::Item THEN
        EXIT;

      ItemEntryRelation.SETCURRENTKEY("Source ID","Source Type","Source Subtype","Source Ref. No.");
      ItemEntryRelation.SETRANGE("Source Subtype",0);
      ItemEntryRelation.SETRANGE("Source Batch Name",'');
      ItemEntryRelation.SETRANGE("Source Prod. Order Line",0);

      CASE ToServLine."Document Type" OF
        ToServLine."Document Type"::Invoice:
          BEGIN
            ItemEntryRelation.SETRANGE("Source Type",DATABASE::"Service Shipment Line");
            ItemEntryRelation.SETRANGE("Source ID",ToServLine."Shipment No.");
            ItemEntryRelation.SETRANGE("Source Ref. No.",ToServLine."Shipment Line No.");
          END;
        ELSE
          ToServLine.FIELDERROR("Document Type",FORMAT(ToServLine."Document Type"));
      END;

      IF NOT ItemEntryRelation.FINDSET THEN
        EXIT;

      ReservEntry.LOCKTABLE;
      IF ReservEntry.FINDLAST THEN
        LastEntryNo := ReservEntry."Entry No.";

      REPEAT
        TrackingSpecification.GET(ItemEntryRelation."Item Entry No.");
        QtyBase := TrackingSpecification."Quantity (Base)" - TrackingSpecification."Quantity Invoiced (Base)";
        IF QtyBase <> 0 THEN BEGIN
          ReservEntry.INIT;
          ReservEntry.TRANSFERFIELDS(TrackingSpecification);
          ReservEntry."Source Subtype" := ToServLine."Document Type";
          ReservEntry."Source ID" := ToServLine."Document No.";
          ReservEntry."Source Ref. No." := ToServLine."Line No.";
          ReservEntry."Reservation Status" := ReservEntry."Reservation Status"::Prospect;
          ReservEntry."Quantity Invoiced (Base)" := 0;
          ReservEntry.VALIDATE("Quantity (Base)",QtyBase);
          ReservEntry.Positive := (ReservEntry."Quantity (Base)" > 0);
          ReservEntry."Entry No." := LastEntryNo + 1;
          ReservEntry.INSERT;
          LastEntryNo := ReservEntry."Entry No.";
        END;
      UNTIL ItemEntryRelation.NEXT = 0;
    END;

    PROCEDURE CollectItemEntryRelation@37(VAR TempItemLedgEntry@1000 : TEMPORARY Record 32;SourceType@1002 : Integer;SourceSubtype@1003 : '0,1,2,3,4,5,6,7,8,9,10';SourceID@1004 : Code[20];SourceBatchName@1005 : Code[10];SourceProdOrderLine@1007 : Integer;SourceRefNo@1006 : Integer;TotalQty@1010 : Decimal) : Boolean;
    VAR
      ItemLedgEntry@1001 : Record 32;
      ItemEntryRelation@1008 : Record 6507;
      Quantity@1011 : Decimal;
    BEGIN
      Quantity := 0;
      TempItemLedgEntry.RESET;
      TempItemLedgEntry.DELETEALL;
      ItemEntryRelation.SETCURRENTKEY("Source ID","Source Type");
      ItemEntryRelation.SETRANGE("Source Type",SourceType);
      ItemEntryRelation.SETRANGE("Source Subtype",SourceSubtype);
      ItemEntryRelation.SETRANGE("Source ID",SourceID);
      ItemEntryRelation.SETRANGE("Source Batch Name",SourceBatchName);
      ItemEntryRelation.SETRANGE("Source Prod. Order Line",SourceProdOrderLine);
      ItemEntryRelation.SETRANGE("Source Ref. No.",SourceRefNo);
      IF ItemEntryRelation.FINDSET THEN
        REPEAT
          ItemLedgEntry.GET(ItemEntryRelation."Item Entry No.");
          TempItemLedgEntry := ItemLedgEntry;
          TempItemLedgEntry.INSERT;
          Quantity := Quantity + ItemLedgEntry.Quantity;
        UNTIL ItemEntryRelation.NEXT = 0;
      EXIT(Quantity = TotalQty);
    END;

    LOCAL PROCEDURE AddTempRecordToSet@16(VAR TempItemLedgEntry@1000 : TEMPORARY Record 32;SignFactor@1002 : Integer);
    VAR
      TempItemLedgEntry2@1001 : TEMPORARY Record 32;
    BEGIN
      IF SignFactor <> 1 THEN BEGIN
        TempItemLedgEntry.Quantity *= SignFactor;
        TempItemLedgEntry."Remaining Quantity" *= SignFactor;
        TempItemLedgEntry."Invoiced Quantity" *= SignFactor;
      END;
      RetrieveAppliedExpirationDate(TempItemLedgEntry);
      TempItemLedgEntry2 := TempItemLedgEntry;
      TempItemLedgEntry.RESET;
      TempItemLedgEntry.SETRANGE("Serial No.",TempItemLedgEntry2."Serial No.");
      TempItemLedgEntry.SETRANGE("Lot No.",TempItemLedgEntry2."Lot No.");
      TempItemLedgEntry.SETRANGE("Warranty Date",TempItemLedgEntry2."Warranty Date");
      TempItemLedgEntry.SETRANGE("Expiration Date",TempItemLedgEntry2."Expiration Date");
      IF TempItemLedgEntry.FINDFIRST THEN BEGIN
        TempItemLedgEntry.Quantity += TempItemLedgEntry2.Quantity;
        TempItemLedgEntry."Remaining Quantity" += TempItemLedgEntry2."Remaining Quantity";
        TempItemLedgEntry."Invoiced Quantity" += TempItemLedgEntry2."Invoiced Quantity";
        TempItemLedgEntry.MODIFY;
      END ELSE BEGIN
        TempItemLedgEntry.INSERT;
      END;
      TempItemLedgEntry.RESET;
    END;

    LOCAL PROCEDURE TableSignFactor@17(TableNo@1000 : Integer) : Integer;
    BEGIN
      IF TableNo IN [
                     DATABASE::"Sales Line",
                     DATABASE::"Sales Shipment Line",
                     DATABASE::"Sales Invoice Line",
                     DATABASE::"Purch. Cr. Memo Line",
                     DATABASE::"Prod. Order Component",
                     DATABASE::"Transfer Shipment Line",
                     DATABASE::"Return Shipment Line",
                     DATABASE::"Planning Component",
                     DATABASE::"Service Line",
                     DATABASE::"Service Shipment Line",
                     DATABASE::"Service Invoice Line"]
      THEN
        EXIT(-1);

      EXIT(1);
    END;

    LOCAL PROCEDURE TableSignFactor2@18(RowID@1000 : Text[250]) : Integer;
    VAR
      TableNo@1001 : Integer;
    BEGIN
      RowID := DELCHR(RowID,'<','"');
      RowID := COPYSTR(RowID,1,STRPOS(RowID,'"') - 1);
      IF EVALUATE(TableNo,RowID) THEN
        EXIT(TableSignFactor(TableNo));

      EXIT(1);
    END;

    PROCEDURE IsOrderNetworkEntity@19(Type@1002 : Integer;Subtype@1000 : Integer) : Boolean;
    BEGIN
      CASE Type OF
        DATABASE::"Sales Line":
          EXIT(Subtype IN [1,5]);
        DATABASE::"Purchase Line":
          EXIT(Subtype IN [1,5]);
        DATABASE::"Prod. Order Line":
          EXIT(Subtype IN [2,3]);
        DATABASE::"Prod. Order Component":
          EXIT(Subtype IN [2,3]);
        DATABASE::"Transfer Line":
          EXIT(TRUE);
        ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE DeleteItemEntryRelation@3(SourceType@1006 : Integer;SourceSubtype@1005 : Integer;SourceID@1004 : Code[20];SourceBatchName@1003 : Code[10];SourceProdOrderLine@1002 : Integer;SourceRefNo@1001 : Integer;DeleteAllDocLines@1007 : Boolean);
    VAR
      ItemEntryRelation@1000 : Record 6507;
    BEGIN
      ItemEntryRelation.SETCURRENTKEY("Source ID","Source Type");
      ItemEntryRelation.SETRANGE("Source Type",SourceType);
      ItemEntryRelation.SETRANGE("Source Subtype",SourceSubtype);
      ItemEntryRelation.SETRANGE("Source ID",SourceID);
      ItemEntryRelation.SETRANGE("Source Batch Name",SourceBatchName);
      ItemEntryRelation.SETRANGE("Source Prod. Order Line",SourceProdOrderLine);
      IF NOT DeleteAllDocLines THEN
        ItemEntryRelation.SETRANGE("Source Ref. No.",SourceRefNo);
      IF NOT ItemEntryRelation.ISEMPTY THEN
        ItemEntryRelation.DELETEALL;
    END;

    PROCEDURE DeleteValueEntryRelation@22(RowID@1001 : Text[100]);
    VAR
      ValueEntryRelation@1000 : Record 6508;
    BEGIN
      ValueEntryRelation.SETCURRENTKEY("Source RowId");
      ValueEntryRelation.SETRANGE("Source RowId",RowID);
      IF NOT ValueEntryRelation.ISEMPTY THEN
        ValueEntryRelation.DELETEALL;
    END;

    PROCEDURE FindInInventory@24(ItemNo@1000 : Code[20];VariantCode@1001 : Code[20];SerialNo@1002 : Code[20]) : Boolean;
    VAR
      ItemLedgerEntry@1004 : Record 32;
    BEGIN
      ItemLedgerEntry.RESET;
      ItemLedgerEntry.SETCURRENTKEY("Item No.",Open,"Variant Code",Positive);
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE(Open,TRUE);
      ItemLedgerEntry.SETRANGE("Variant Code",VariantCode);
      ItemLedgerEntry.SETRANGE(Positive,TRUE);
      IF SerialNo <> '' THEN
        ItemLedgerEntry.SETRANGE("Serial No.",SerialNo);
      EXIT(ItemLedgerEntry.FINDFIRST);
    END;

    PROCEDURE SplitWhseJnlLine@29(TempWhseJnlLine@1000 : TEMPORARY Record 7311;VAR TempWhseJnlLine2@1004 : TEMPORARY Record 7311;VAR TempWhseSplitSpecification@1001 : TEMPORARY Record 336;ToTransfer@1010 : Boolean);
    VAR
      NonDistrQtyBase@1006 : Decimal;
      NonDistrCubage@1007 : Decimal;
      NonDistrWeight@1008 : Decimal;
      SplitFactor@1009 : Decimal;
      LineNo@1002 : Integer;
      WhseSNRequired@1003 : Boolean;
      WhseLNRequired@1005 : Boolean;
    BEGIN
      TempWhseJnlLine2.DELETEALL;

      CheckWhseItemTrkgSetup(TempWhseJnlLine."Item No.",WhseSNRequired,WhseLNRequired,FALSE);
      IF NOT (WhseSNRequired OR WhseLNRequired) THEN BEGIN
        TempWhseJnlLine2 := TempWhseJnlLine;
        TempWhseJnlLine2.INSERT;
        EXIT;
      END;

      LineNo := TempWhseJnlLine."Line No.";
      WITH TempWhseSplitSpecification DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Source ID","Source Type","Source Subtype","Source Batch Name",
          "Source Prod. Order Line","Source Ref. No.");
        CASE TempWhseJnlLine."Source Type" OF
          DATABASE::"Item Journal Line":
            BEGIN
              SETRANGE("Source Type",TempWhseJnlLine."Source Type");
              SETRANGE("Source ID",TempWhseJnlLine."Journal Template Name");
              SETRANGE("Source Ref. No.",TempWhseJnlLine."Source Line No.");
            END;
          DATABASE::"Job Journal Line":
            BEGIN
              SETRANGE("Source Type",TempWhseJnlLine."Source Type");
              SETRANGE("Source ID",TempWhseJnlLine."Journal Template Name");
              SETRANGE("Source Ref. No.",TempWhseJnlLine."Source Line No.");
            END;
          DATABASE::"BOM Journal Line":
            BEGIN
              SETRANGE("Source Type",TempWhseJnlLine."Source Type");
              SETRANGE("Source ID",TempWhseJnlLine."Journal Template Name");
              SETRANGE("Source Ref. No.",TempWhseJnlLine."Source Line No.");
            END;
          0: // Whse. journal line
            BEGIN
              SETRANGE("Source Type",DATABASE::"Warehouse Journal Line");
              SETRANGE("Source ID",TempWhseJnlLine."Journal Batch Name");
              SETRANGE("Source Ref. No.",TempWhseJnlLine."Line No.");
            END;
          ELSE BEGIN
            SETRANGE("Source Type",TempWhseJnlLine."Source Type");
            SETRANGE("Source ID",TempWhseJnlLine."Source No.");
            SETRANGE("Source Ref. No.",TempWhseJnlLine."Source Line No.");
          END;
        END;
        SETFILTER("Quantity actual Handled (Base)",'<>%1',0);
        NonDistrQtyBase := TempWhseJnlLine."Qty. (Absolute, Base)";
        NonDistrCubage := TempWhseJnlLine.Cubage;
        NonDistrWeight := TempWhseJnlLine.Weight;
        IF FINDSET THEN
          REPEAT
            LineNo += 10000;
            TempWhseJnlLine2 := TempWhseJnlLine;
            TempWhseJnlLine2."Line No." := LineNo;
            IF "Serial No." <> '' THEN
              TESTFIELD("Qty. per Unit of Measure",1);
            IF ToTransfer THEN BEGIN
              TempWhseJnlLine2."Serial No." := "New Serial No.";
              TempWhseJnlLine2."Lot No." := "New Lot No.";
              IF "New Expiration Date" <> 0D THEN
                TempWhseJnlLine2."Expiration Date" := "New Expiration Date"
            END ELSE BEGIN
              TempWhseJnlLine2."Serial No." := "Serial No.";
              TempWhseJnlLine2."Lot No." := "Lot No.";
              TempWhseJnlLine2."Expiration Date" := "Expiration Date";
            END;
            TempWhseJnlLine2."New Serial No." := "New Serial No.";
            TempWhseJnlLine2."New Lot No." := "New Lot No.";
            TempWhseJnlLine2."New Expiration Date" := "New Expiration Date";
            TempWhseJnlLine2."Warranty Date" := "Warranty Date";
            TempWhseJnlLine2."Qty. (Absolute, Base)" := ABS("Quantity (Base)");
            TempWhseJnlLine2."Qty. (Absolute)" :=
              ROUND(TempWhseJnlLine2."Qty. (Absolute, Base)" / TempWhseJnlLine."Qty. per Unit of Measure",0.00001);
            IF TempWhseJnlLine.Quantity > 0 THEN BEGIN
              TempWhseJnlLine2."Qty. (Base)" := TempWhseJnlLine2."Qty. (Absolute, Base)";
              TempWhseJnlLine2.Quantity := TempWhseJnlLine2."Qty. (Absolute)";
            END ELSE BEGIN
              TempWhseJnlLine2."Qty. (Base)" := -TempWhseJnlLine2."Qty. (Absolute, Base)";
              TempWhseJnlLine2.Quantity := -TempWhseJnlLine2."Qty. (Absolute)";
            END;
            SplitFactor := "Quantity (Base)" / NonDistrQtyBase;
            IF SplitFactor < 1 THEN BEGIN
              TempWhseJnlLine2.Cubage := ROUND(NonDistrCubage * SplitFactor,0.00001);
              TempWhseJnlLine2.Weight := ROUND(NonDistrWeight * SplitFactor,0.00001);
              NonDistrQtyBase -= "Quantity (Base)";
              NonDistrCubage -= TempWhseJnlLine2.Cubage;
              NonDistrWeight -= TempWhseJnlLine2.Weight;
            END ELSE BEGIN // the last record
              TempWhseJnlLine2.Cubage := NonDistrCubage;
              TempWhseJnlLine2.Weight := NonDistrWeight;
            END;
            TempWhseJnlLine2.INSERT;
          UNTIL NEXT = 0
        ELSE BEGIN
          TempWhseJnlLine2 := TempWhseJnlLine;
          TempWhseJnlLine2.INSERT;
        END;
      END;
    END;

    PROCEDURE SplitPostedWhseRcptLine@26(PostedWhseRcptLine@1005 : Record 7319;VAR TempPostedWhseRcptlLine@1000 : TEMPORARY Record 7319);
    VAR
      WhseItemEntryRelation@1001 : Record 6509;
      ItemLedgEntry@1004 : Record 32;
      LineNo@1003 : Integer;
      WhseSNRequired@1006 : Boolean;
      WhseLNRequired@1002 : Boolean;
      CrossDockQty@1007 : Decimal;
      CrossDockQtyBase@1008 : Decimal;
    BEGIN
      TempPostedWhseRcptlLine.RESET;
      TempPostedWhseRcptlLine.DELETEALL;

      CheckWhseItemTrkgSetup(PostedWhseRcptLine."Item No.",WhseSNRequired,WhseLNRequired,FALSE);
      IF NOT (WhseSNRequired OR WhseLNRequired) THEN BEGIN
        TempPostedWhseRcptlLine := PostedWhseRcptLine;
        TempPostedWhseRcptlLine.INSERT;
        EXIT;
      END;

      WhseItemEntryRelation.RESET;
      WhseItemEntryRelation.SETCURRENTKEY(
        "Source ID","Source Type","Source Subtype","Source Ref. No.");
      WhseItemEntryRelation.SETRANGE("Source ID",PostedWhseRcptLine."No.");
      WhseItemEntryRelation.SETRANGE("Source Type",DATABASE::"Posted Whse. Receipt Line");
      WhseItemEntryRelation.SETRANGE("Source Subtype",0);
      WhseItemEntryRelation.SETRANGE("Source Ref. No.",PostedWhseRcptLine."Line No.");
      IF WhseItemEntryRelation.FINDSET THEN BEGIN
        REPEAT
          LineNo += 10000;
          ItemLedgEntry.GET(WhseItemEntryRelation."Item Entry No.");
          TempPostedWhseRcptlLine := PostedWhseRcptLine;
          TempPostedWhseRcptlLine."Line No." := LineNo;
          TempPostedWhseRcptlLine."Serial No." := WhseItemEntryRelation."Serial No.";
          TempPostedWhseRcptlLine."Lot No." := WhseItemEntryRelation."Lot No.";
          TempPostedWhseRcptlLine."Warranty Date" := ItemLedgEntry."Warranty Date";
          TempPostedWhseRcptlLine."Expiration Date" := ItemLedgEntry."Expiration Date";
          TempPostedWhseRcptlLine."Qty. (Base)" := ItemLedgEntry.Quantity;
          TempPostedWhseRcptlLine.Quantity :=
            ROUND(TempPostedWhseRcptlLine."Qty. (Base)" / TempPostedWhseRcptlLine."Qty. per Unit of Measure",0.00001);
          IF WhseSNRequired THEN BEGIN
            IF CrossDockQty < PostedWhseRcptLine."Qty. Cross-Docked" THEN BEGIN
              TempPostedWhseRcptlLine."Qty. Cross-Docked" := TempPostedWhseRcptlLine.Quantity;
              TempPostedWhseRcptlLine."Qty. Cross-Docked (Base)" := TempPostedWhseRcptlLine."Qty. (Base)";
            END ELSE BEGIN
              TempPostedWhseRcptlLine."Qty. Cross-Docked" := 0;
              TempPostedWhseRcptlLine."Qty. Cross-Docked (Base)" := 0;
            END;
            CrossDockQty := CrossDockQty + TempPostedWhseRcptlLine.Quantity;
          END ELSE BEGIN
            IF PostedWhseRcptLine."Qty. Cross-Docked" > 0 THEN BEGIN
              IF TempPostedWhseRcptlLine.Quantity <=
                 PostedWhseRcptLine."Qty. Cross-Docked" - CrossDockQty
              THEN BEGIN
                TempPostedWhseRcptlLine."Qty. Cross-Docked" := TempPostedWhseRcptlLine.Quantity;
                TempPostedWhseRcptlLine."Qty. Cross-Docked (Base)" := TempPostedWhseRcptlLine."Qty. (Base)";
              END ELSE BEGIN
                TempPostedWhseRcptlLine."Qty. Cross-Docked" := PostedWhseRcptLine."Qty. Cross-Docked" - CrossDockQty;
                TempPostedWhseRcptlLine."Qty. Cross-Docked (Base)" :=
                  PostedWhseRcptLine."Qty. Cross-Docked (Base)" - CrossDockQtyBase;
              END;
              CrossDockQty := CrossDockQty + TempPostedWhseRcptlLine."Qty. Cross-Docked";
              CrossDockQtyBase := CrossDockQtyBase + TempPostedWhseRcptlLine."Qty. Cross-Docked (Base)";
              IF CrossDockQty >= PostedWhseRcptLine."Qty. Cross-Docked" THEN BEGIN
                PostedWhseRcptLine."Qty. Cross-Docked" := 0;
                PostedWhseRcptLine."Qty. Cross-Docked (Base)" := 0;
              END;
            END;
          END;
          TempPostedWhseRcptlLine.INSERT;
        UNTIL WhseItemEntryRelation.NEXT = 0;
      END ELSE BEGIN
        TempPostedWhseRcptlLine := PostedWhseRcptLine;
        TempPostedWhseRcptlLine.INSERT;
      END
    END;

    PROCEDURE SplitInternalPutAwayLine@27(PostedWhseRcptLine@1005 : Record 7319;VAR TempPostedWhseRcptlLine@1000 : TEMPORARY Record 7319);
    VAR
      WhseItemTrackingLine@1001 : Record 6550;
      LineNo@1003 : Integer;
      WhseSNRequired@1004 : Boolean;
      WhseLNRequired@1002 : Boolean;
    BEGIN
      TempPostedWhseRcptlLine.DELETEALL;

      CheckWhseItemTrkgSetup(PostedWhseRcptLine."Item No.",WhseSNRequired,WhseLNRequired,FALSE);
      IF NOT (WhseSNRequired OR WhseLNRequired) THEN BEGIN
        TempPostedWhseRcptlLine := PostedWhseRcptLine;
        TempPostedWhseRcptlLine.INSERT;
        EXIT;
      END;

      WhseItemTrackingLine.RESET;
      WhseItemTrackingLine.SETCURRENTKEY(
        "Source ID","Source Type","Source Subtype","Source Batch Name",
        "Source Prod. Order Line","Source Ref. No.");
      WhseItemTrackingLine.SETRANGE("Source Type",DATABASE::"Whse. Internal Put-away Line");
      WhseItemTrackingLine.SETRANGE("Source ID",PostedWhseRcptLine."No.");
      WhseItemTrackingLine.SETRANGE("Source Subtype",0);
      WhseItemTrackingLine.SETRANGE("Source Batch Name",'');
      WhseItemTrackingLine.SETRANGE("Source Prod. Order Line",0);
      WhseItemTrackingLine.SETRANGE("Source Ref. No.",PostedWhseRcptLine."Line No.");
      WhseItemTrackingLine.SETFILTER("Qty. to Handle (Base)",'<>0');
      IF WhseItemTrackingLine.FINDSET THEN
        REPEAT
          LineNo += 10000;
          TempPostedWhseRcptlLine := PostedWhseRcptLine;
          TempPostedWhseRcptlLine."Line No." := LineNo;
          TempPostedWhseRcptlLine."Serial No." := WhseItemTrackingLine."Serial No.";
          TempPostedWhseRcptlLine."Lot No." := WhseItemTrackingLine."Lot No.";
          TempPostedWhseRcptlLine."Warranty Date" := WhseItemTrackingLine."Warranty Date";
          TempPostedWhseRcptlLine."Expiration Date" := WhseItemTrackingLine."Expiration Date";
          TempPostedWhseRcptlLine."Qty. (Base)" := WhseItemTrackingLine."Qty. to Handle (Base)";
          TempPostedWhseRcptlLine.Quantity :=
            ROUND(TempPostedWhseRcptlLine."Qty. (Base)" / TempPostedWhseRcptlLine."Qty. per Unit of Measure",0.00001);
          TempPostedWhseRcptlLine.INSERT;
        UNTIL WhseItemTrackingLine.NEXT = 0
      ELSE BEGIN
        TempPostedWhseRcptlLine := PostedWhseRcptLine;
        TempPostedWhseRcptlLine.INSERT;
      END
    END;

    PROCEDURE DeleteWhseItemTrkgLines@28(SourceType@1000 : Integer;SourceSubtype@1002 : Integer;SourceID@1001 : Code[20];SourceBatchName@1007 : Code[10];SourceProdOrderLine@1003 : Integer;SourceRefNo@1005 : Integer;LocationCode@1006 : Code[10];RelatedToLine@1008 : Boolean);
    VAR
      WhseItemTrkgLine@1004 : Record 6550;
    BEGIN
      WhseItemTrkgLine.RESET;
      WhseItemTrkgLine.SETCURRENTKEY(
        "Source ID","Source Type","Source Subtype","Source Batch Name",
        "Source Prod. Order Line","Source Ref. No.","Location Code");
      WhseItemTrkgLine.SETRANGE("Source Type",SourceType);
      WhseItemTrkgLine.SETRANGE("Source Subtype",SourceSubtype);
      WhseItemTrkgLine.SETRANGE("Source ID",SourceID);
      IF RelatedToLine THEN BEGIN
        WhseItemTrkgLine.SETRANGE("Source Prod. Order Line",SourceProdOrderLine);
        WhseItemTrkgLine.SETRANGE("Source Ref. No.",SourceRefNo);
        WhseItemTrkgLine.SETRANGE("Source Batch Name",SourceBatchName);
        WhseItemTrkgLine.SETRANGE("Location Code",LocationCode);
      END;
      WhseItemTrkgLine.DELETEALL;
    END;

    PROCEDURE InitTrackingSpecification@34(WhseWkshLine@1000 : Record 7326);
    VAR
      WhseItemTrkgLine@1002 : Record 6550;
      PostedWhseReceiptLine@1003 : Record 7319;
      TempWhseItemTrkgLine@1004 : TEMPORARY Record 6550;
      WhseManagement@1005 : Codeunit 5775;
      SourceType@1001 : Integer;
    BEGIN
      SourceType := WhseManagement.GetSourceType(WhseWkshLine);
      WITH WhseWkshLine DO BEGIN
        IF "Whse. Document Type" = "Whse. Document Type"::Receipt THEN BEGIN
          PostedWhseReceiptLine.SETRANGE("No.","Whse. Document No.");
          IF PostedWhseReceiptLine.FINDSET THEN
            REPEAT
              InsertWhseItemTrkgLines(PostedWhseReceiptLine,SourceType);
            UNTIL PostedWhseReceiptLine.NEXT = 0;
        END;

        WhseItemTrkgLine.SETCURRENTKEY(
          "Source ID","Source Type","Source Subtype","Source Batch Name","Source Prod. Order Line","Source Ref. No.");

        WhseItemTrkgLine.SETRANGE("Source Type",SourceType);
        IF SourceType = DATABASE::"Prod. Order Component" THEN BEGIN
          WhseItemTrkgLine.SETRANGE("Source Subtype","Source Subtype");
          WhseItemTrkgLine.SETRANGE("Source ID","Source No.");
          WhseItemTrkgLine.SETRANGE("Source Prod. Order Line","Source Line No.");
          WhseItemTrkgLine.SETRANGE("Source Ref. No.","Source Subline No.");
        END ELSE BEGIN
          WhseItemTrkgLine.SETRANGE("Source ID","Whse. Document No.");
          WhseItemTrkgLine.SETRANGE("Source Ref. No.","Whse. Document Line No.");
        END;

        IF RECORDLEVELLOCKING THEN
          WhseItemTrkgLine.LOCKTABLE;
        IF WhseItemTrkgLine.FINDSET THEN BEGIN
          REPEAT
            CalcWhseItemTrkgLine(WhseItemTrkgLine);
            WhseItemTrkgLine.MODIFY;
            IF SourceType = DATABASE::"Prod. Order Component" THEN BEGIN
              TempWhseItemTrkgLine := WhseItemTrkgLine;
              TempWhseItemTrkgLine.INSERT;
            END;
          UNTIL WhseItemTrkgLine.NEXT = 0;
          IF NOT TempWhseItemTrkgLine.ISEMPTY THEN
            CheckWhseItemTrkg(TempWhseItemTrkgLine,WhseWkshLine);
        END ELSE
          CASE SourceType OF
            DATABASE::"Posted Whse. Receipt Line":
              CreateWhseItemTrkgForReceipt(WhseWkshLine);
            DATABASE::"Warehouse Shipment Line":
              CreateWhseItemTrkgBatch(WhseWkshLine);
            DATABASE::"Prod. Order Component":
              CreateWhseItemTrkgBatch(WhseWkshLine);
          END;
      END;
    END;

    LOCAL PROCEDURE CreateWhseItemTrkgForReceipt@33(WhseWkshLine@1002 : Record 7326);
    VAR
      ItemLedgEntry@1001 : Record 32;
      WhseItemEntryRelation@1000 : Record 6509;
      WhseItemTrackingLine@1003 : Record 6550;
      EntryNo@1004 : Integer;
    BEGIN
      WITH WhseWkshLine DO BEGIN
        WhseItemTrackingLine.RESET;
        IF WhseItemTrackingLine.FINDLAST THEN
          EntryNo := WhseItemTrackingLine."Entry No.";

        WhseItemEntryRelation.SETCURRENTKEY(
          "Source ID","Source Type","Source Subtype","Source Ref. No.");
        WhseItemEntryRelation.SETRANGE("Source ID","Whse. Document No.");
        WhseItemEntryRelation.SETRANGE("Source Type",DATABASE::"Posted Whse. Receipt Line");
        WhseItemEntryRelation.SETRANGE("Source Subtype",0);
        WhseItemEntryRelation.SETRANGE("Source Ref. No.","Whse. Document Line No.");
        IF WhseItemEntryRelation.FINDSET THEN
          REPEAT
            WhseItemTrackingLine.INIT;
            EntryNo += 1;
            WhseItemTrackingLine."Entry No." := EntryNo;
            WhseItemTrackingLine."Item No." := "Item No.";
            WhseItemTrackingLine."Variant Code" := "Variant Code";
            WhseItemTrackingLine."Location Code" := "Location Code";
            WhseItemTrackingLine.Description := Description;
            WhseItemTrackingLine."Qty. per Unit of Measure" := "Qty. per From Unit of Measure";
            WhseItemTrackingLine."Source Type" := DATABASE::"Posted Whse. Receipt Line";
            WhseItemTrackingLine."Source ID" := "Whse. Document No.";
            WhseItemTrackingLine."Source Ref. No." := "Whse. Document Line No.";
            ItemLedgEntry.GET(WhseItemEntryRelation."Item Entry No.");
            WhseItemTrackingLine."Serial No." := ItemLedgEntry."Serial No.";
            WhseItemTrackingLine."Lot No." := ItemLedgEntry."Lot No.";
            WhseItemTrackingLine."Warranty Date" := ItemLedgEntry."Warranty Date";
            WhseItemTrackingLine."Expiration Date" := ItemLedgEntry."Expiration Date";
            WhseItemTrackingLine."Quantity (Base)" := ItemLedgEntry.Quantity;
            IF "Qty. (Base)" = "Qty. to Handle (Base)" THEN
              WhseItemTrackingLine."Qty. to Handle (Base)" := WhseItemTrackingLine."Quantity (Base)";
            WhseItemTrackingLine."Qty. to Handle" :=
              ROUND(WhseItemTrackingLine."Qty. to Handle (Base)" / WhseItemTrackingLine."Qty. per Unit of Measure",0.00001);
            WhseItemTrackingLine.INSERT;
          UNTIL WhseItemEntryRelation.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateWhseItemTrkgBatch@31(WhseWkshLine@1001 : Record 7326);
    VAR
      SourceItemTrackingLine@1000 : Record 337;
      WhseManagement@1004 : Codeunit 5775;
      SourceType@1005 : Integer;
    BEGIN
      SourceType := WhseManagement.GetSourceType(WhseWkshLine);

      WITH WhseWkshLine DO BEGIN
        SourceItemTrackingLine.SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line");
        SourceItemTrackingLine.SETRANGE("Source ID","Source No.");
        SourceItemTrackingLine.SETRANGE("Source Type","Source Type");
        SourceItemTrackingLine.SETRANGE("Source Subtype","Source Subtype");
        SourceItemTrackingLine.SETRANGE("Source Batch Name",'');
        CASE SourceType OF
          DATABASE::"Prod. Order Component":
            BEGIN
              SourceItemTrackingLine.SETRANGE("Source Ref. No.","Source Subline No.");
              SourceItemTrackingLine.SETRANGE("Source Prod. Order Line","Source Line No.");
            END;
          ELSE BEGIN
            SourceItemTrackingLine.SETRANGE("Source Ref. No.","Source Line No.");
            SourceItemTrackingLine.SETRANGE("Source Prod. Order Line",0);
          END;
        END;
        IF SourceItemTrackingLine.FINDSET THEN
          REPEAT
            CreateWhseItemTrkgForResEntry(SourceItemTrackingLine,WhseWkshLine);
          UNTIL SourceItemTrackingLine.NEXT = 0;
      END;
    END;

    PROCEDURE CreateWhseItemTrkgForResEntry@92(SourceItemTrackingLine@1000 : Record 337;WhseWkshLine@1004 : Record 7326);
    VAR
      WhseItemTrackingLine@1003 : Record 6550;
      WhseManagement@1001 : Codeunit 5775;
      EntryNo@1002 : Integer;
      SourceType@1005 : Integer;
    BEGIN
      IF (SourceItemTrackingLine."Serial No." = '') AND
         (SourceItemTrackingLine."Lot No." = '') THEN EXIT;

      SourceType := WhseManagement.GetSourceType(WhseWkshLine);

      IF WhseItemTrackingLine.FINDLAST THEN
        EntryNo := WhseItemTrackingLine."Entry No.";

      WhseItemTrackingLine.INIT;

      WITH WhseWkshLine DO
        CASE SourceType OF
          DATABASE::"Posted Whse. Receipt Line":
            BEGIN
              WhseItemTrackingLine."Source Type" := DATABASE::"Posted Whse. Receipt Line";
              WhseItemTrackingLine."Source ID" := "Whse. Document No.";
              WhseItemTrackingLine."Source Ref. No." := "Whse. Document Line No.";
            END;
          DATABASE::"Warehouse Shipment Line":
            BEGIN
              WhseItemTrackingLine."Source Type" := DATABASE::"Warehouse Shipment Line";
              WhseItemTrackingLine."Source ID" := "Whse. Document No.";
              WhseItemTrackingLine."Source Ref. No." := "Whse. Document Line No.";
            END;
          DATABASE::"Prod. Order Component":
            BEGIN
              WhseItemTrackingLine."Source Type" := "Source Type";
              WhseItemTrackingLine."Source Subtype" := "Source Subtype";
              WhseItemTrackingLine."Source ID" := "Source No.";
              WhseItemTrackingLine."Source Prod. Order Line" := "Source Line No.";
              WhseItemTrackingLine."Source Ref. No." := "Source Subline No.";
            END;
        END;

      WhseItemTrackingLine."Entry No." := EntryNo + 1;
      WhseItemTrackingLine."Item No." := SourceItemTrackingLine."Item No.";
      WhseItemTrackingLine."Variant Code" := SourceItemTrackingLine."Variant Code";
      WhseItemTrackingLine."Location Code" := SourceItemTrackingLine."Location Code";
      WhseItemTrackingLine.Description := SourceItemTrackingLine.Description;
      WhseItemTrackingLine."Qty. per Unit of Measure" := SourceItemTrackingLine."Qty. per Unit of Measure";
      WhseItemTrackingLine."Serial No." := SourceItemTrackingLine."Serial No.";
      WhseItemTrackingLine."Lot No." := SourceItemTrackingLine."Lot No.";
      WhseItemTrackingLine."Warranty Date" := SourceItemTrackingLine."Warranty Date";
      WhseItemTrackingLine."Expiration Date" := SourceItemTrackingLine."Expiration Date";
      WhseItemTrackingLine."Quantity (Base)" := -SourceItemTrackingLine."Quantity (Base)";
      IF WhseWkshLine."Qty. (Base)" = WhseWkshLine."Qty. to Handle (Base)" THEN
        WhseItemTrackingLine."Qty. to Handle (Base)" := WhseItemTrackingLine."Quantity (Base)";
      WhseItemTrackingLine."Qty. to Handle" :=
        ROUND(WhseItemTrackingLine."Qty. to Handle (Base)" / WhseItemTrackingLine."Qty. per Unit of Measure",0.00001);
      WhseItemTrackingLine.INSERT;
    END;

    PROCEDURE CalcWhseItemTrkgLine@30(VAR WhseItemTrkgLine@1000 : Record 6550);
    VAR
      WhseActivQtyBase@1001 : Decimal;
    BEGIN
      CASE WhseItemTrkgLine."Source Type" OF
        DATABASE::"Posted Whse. Receipt Line":
          WhseItemTrkgLine."Source Type Filter" := WhseItemTrkgLine."Source Type Filter"::Receipt;
        DATABASE::"Whse. Internal Put-away Line":
          WhseItemTrkgLine."Source Type Filter" := WhseItemTrkgLine."Source Type Filter"::"Internal Put-away";
        DATABASE::"Warehouse Shipment Line":
          WhseItemTrkgLine."Source Type Filter" := WhseItemTrkgLine."Source Type Filter"::Shipment;
        DATABASE::"Whse. Internal Pick Line":
          WhseItemTrkgLine."Source Type Filter" := WhseItemTrkgLine."Source Type Filter"::"Internal Pick";
        DATABASE::"Prod. Order Component":
          WhseItemTrkgLine."Source Type Filter" := WhseItemTrkgLine."Source Type Filter"::Production;
        DATABASE::"Whse. Worksheet Line":
          WhseItemTrkgLine."Source Type Filter" := WhseItemTrkgLine."Source Type Filter"::"Movement Worksheet";
      END;
      WhseItemTrkgLine.CALCFIELDS("Put-away Qty. (Base)","Pick Qty. (Base)");

      IF WhseItemTrkgLine."Put-away Qty. (Base)" > 0 THEN
        WhseActivQtyBase := WhseItemTrkgLine."Put-away Qty. (Base)";
      IF WhseItemTrkgLine."Pick Qty. (Base)" > 0 THEN
        WhseActivQtyBase := WhseItemTrkgLine."Pick Qty. (Base)";

      IF NOT Registering THEN
        WhseItemTrkgLine.VALIDATE("Quantity Handled (Base)",
          WhseActivQtyBase + WhseItemTrkgLine."Qty. Registered (Base)")
      ELSE
        WhseItemTrkgLine.VALIDATE("Quantity Handled (Base)",
          WhseItemTrkgLine."Qty. Registered (Base)");

      IF WhseItemTrkgLine."Quantity (Base)" >= WhseItemTrkgLine."Quantity Handled (Base)" THEN
        WhseItemTrkgLine.VALIDATE("Qty. to Handle (Base)",
          WhseItemTrkgLine."Quantity (Base)" - WhseItemTrkgLine."Quantity Handled (Base)");
    END;

    PROCEDURE InitItemTrkgForTempWkshLine@36(WhseDocType@1000 : ' ,Receipt,Shipment,Internal Put-away,Internal Pick,Production';WhseDocNo@1001 : Code[20];WhseDocLineNo@1002 : Integer;SourceType@1003 : Integer;SourceSubtype@1004 : '0,1,2,3,4,5,6,7,8,9,10';SourceNo@1005 : Code[20];SourceLineNo@1006 : Integer;SourceSublineNo@1007 : Integer);
    VAR
      TempWhseWkshLine@1008 : Record 7326;
    BEGIN
      InitWhseWkshLine(TempWhseWkshLine,WhseDocType,WhseDocNo,WhseDocLineNo,SourceType,SourceSubtype,SourceNo,
        SourceLineNo,SourceSublineNo);
      InitTrackingSpecification(TempWhseWkshLine);
    END;

    PROCEDURE InitWhseWkshLine@99(VAR WhseWkshLine@1009 : Record 7326;WhseDocType@1007 : ' ,Receipt,Shipment,Internal Put-away,Internal Pick,Production';WhseDocNo@1006 : Code[20];WhseDocLineNo@1005 : Integer;SourceType@1004 : Integer;SourceSubtype@1003 : '0,1,2,3,4,5,6,7,8,9,10';SourceNo@1002 : Code[20];SourceLineNo@1001 : Integer;SourceSublineNo@1000 : Integer);
    BEGIN
      WhseWkshLine.INIT;
      WhseWkshLine."Whse. Document Type" := WhseDocType;
      WhseWkshLine."Whse. Document No." := WhseDocNo;
      WhseWkshLine."Whse. Document Line No." := WhseDocLineNo;
      WhseWkshLine."Source Type" := SourceType;
      WhseWkshLine."Source Subtype" := SourceSubtype;
      WhseWkshLine."Source No." := SourceNo;
      WhseWkshLine."Source Line No." := SourceLineNo;
      WhseWkshLine."Source Subline No." := SourceSublineNo;
    END;

    PROCEDURE UpdateWhseItemTrkgLines@38(VAR TempWhseItemTrkgLine@1000 : TEMPORARY Record 6550);
    VAR
      WhseItemTrkgLine@1001 : Record 6550;
    BEGIN
      IF TempWhseItemTrkgLine.FINDSET THEN
        REPEAT
          WhseItemTrkgLine.SETCURRENTKEY("Serial No.","Lot No.");
          WhseItemTrkgLine.SETRANGE("Serial No.",TempWhseItemTrkgLine."Serial No.");
          WhseItemTrkgLine.SETRANGE("Lot No.",TempWhseItemTrkgLine."Lot No.");
          WhseItemTrkgLine.SETRANGE("Source Type",TempWhseItemTrkgLine."Source Type");
          WhseItemTrkgLine.SETRANGE("Source Subtype",TempWhseItemTrkgLine."Source Subtype");
          WhseItemTrkgLine.SETRANGE("Source ID",TempWhseItemTrkgLine."Source ID");
          WhseItemTrkgLine.SETRANGE("Source Batch Name",TempWhseItemTrkgLine."Source Batch Name");
          WhseItemTrkgLine.SETRANGE("Source Prod. Order Line",TempWhseItemTrkgLine."Source Prod. Order Line");
          WhseItemTrkgLine.SETRANGE("Source Ref. No.",TempWhseItemTrkgLine."Source Ref. No.");
          IF WhseItemTrkgLine.RECORDLEVELLOCKING THEN
            WhseItemTrkgLine.LOCKTABLE;
          IF WhseItemTrkgLine.FINDFIRST THEN BEGIN
            CalcWhseItemTrkgLine(WhseItemTrkgLine);
            WhseItemTrkgLine.MODIFY;
          END;
        UNTIL TempWhseItemTrkgLine.NEXT = 0
    END;

    LOCAL PROCEDURE InsertWhseItemTrkgLines@48(PostedWhseReceiptLine@1000 : Record 7319;SourceType@1001 : Integer);
    VAR
      WhseItemTrkgLine@1003 : Record 6550;
      WhseItemEntryRelation@1002 : Record 6509;
      ItemLedgEntry@1005 : Record 32;
      EntryNo@1004 : Integer;
    BEGIN
      IF WhseItemTrkgLine.FINDLAST THEN
        EntryNo := WhseItemTrkgLine."Entry No." + 1
      ELSE
        EntryNo := 1;

      WITH PostedWhseReceiptLine DO BEGIN
        WhseItemEntryRelation.RESET;
        WhseItemEntryRelation.SETCURRENTKEY(
          "Source ID","Source Type","Source Subtype","Source Ref. No.");
        WhseItemEntryRelation.SETRANGE("Source ID","No.");
        WhseItemEntryRelation.SETRANGE("Source Type",SourceType);
        WhseItemEntryRelation.SETRANGE("Source Subtype",0);
        WhseItemEntryRelation.SETRANGE("Source Ref. No.","Line No.");
        IF WhseItemEntryRelation.FINDSET THEN BEGIN
          WhseItemTrkgLine.SETCURRENTKEY("Source ID","Source Type","Source Subtype");
          WhseItemTrkgLine.SETRANGE("Source ID","No.");
          WhseItemTrkgLine.SETRANGE("Source Type",SourceType);
          WhseItemTrkgLine.SETRANGE("Source Subtype",0);
          WhseItemTrkgLine.SETRANGE("Source Ref. No.","Line No.");
          WhseItemTrkgLine.DELETEALL;
          WhseItemTrkgLine.SETCURRENTKEY("Serial No.","Lot No.");
          REPEAT
            WhseItemTrkgLine.SETRANGE("Serial No.",WhseItemEntryRelation."Serial No.");
            WhseItemTrkgLine.SETRANGE("Lot No.",WhseItemEntryRelation."Lot No.");
            ItemLedgEntry.GET(WhseItemEntryRelation."Item Entry No.");
            IF NOT WhseItemTrkgLine.FINDFIRST THEN BEGIN
              WhseItemTrkgLine.INIT;
              WhseItemTrkgLine."Entry No." := EntryNo;
              EntryNo := EntryNo + 1;

              WhseItemTrkgLine."Item No." := ItemLedgEntry."Item No.";
              WhseItemTrkgLine."Location Code" := ItemLedgEntry."Location Code";
              WhseItemTrkgLine.Description := ItemLedgEntry.Description;
              WhseItemTrkgLine."Source Type" := WhseItemEntryRelation."Source Type";
              WhseItemTrkgLine."Source Subtype" := WhseItemEntryRelation."Source Subtype";
              WhseItemTrkgLine."Source ID" := WhseItemEntryRelation."Source ID";
              WhseItemTrkgLine."Source Batch Name" := WhseItemEntryRelation."Source Batch Name";
              WhseItemTrkgLine."Source Prod. Order Line" := WhseItemEntryRelation."Source Prod. Order Line";
              WhseItemTrkgLine."Source Ref. No." := WhseItemEntryRelation."Source Ref. No.";
              WhseItemTrkgLine."Serial No." := WhseItemEntryRelation."Serial No.";
              WhseItemTrkgLine."Lot No." := WhseItemEntryRelation."Lot No.";
              WhseItemTrkgLine."Qty. per Unit of Measure" := ItemLedgEntry."Qty. per Unit of Measure";
              WhseItemTrkgLine."Warranty Date" := ItemLedgEntry."Warranty Date";
              WhseItemTrkgLine."Expiration Date" := ItemLedgEntry."Expiration Date";
              WhseItemTrkgLine.VALIDATE("Quantity (Base)",ItemLedgEntry.Quantity);
              WhseItemTrkgLine.INSERT;
            END ELSE BEGIN
              WhseItemTrkgLine.VALIDATE("Quantity (Base)",WhseItemTrkgLine."Quantity (Base)" + ItemLedgEntry.Quantity);
              WhseItemTrkgLine.MODIFY;
            END;
          UNTIL WhseItemEntryRelation.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE ItemTrkgIsManagedByWhse@41(Type@1005 : Integer;Subtype@1004 : Integer;ID@1003 : Code[20];ProdOrderLine@1001 : Integer;RefNo@1000 : Integer;LocationCode@1008 : Code[10];ItemNo@1010 : Code[20]) : Boolean;
    VAR
      WhseShipmentLine@1002 : Record 7321;
      WhseWkshLine@1006 : Record 7326;
      WhseActivLine@1007 : Record 5767;
      WhseWkshTemplate@1013 : Record 7328;
      Location@1009 : Record 14;
      SNRequired@1011 : Boolean;
      LNRequired@1012 : Boolean;
    BEGIN
      IF NOT (Type IN [DATABASE::"Sales Line",
                       DATABASE::"Purchase Line",
                       DATABASE::"Transfer Line",
                       DATABASE::"Prod. Order Line",
                       DATABASE::"Prod. Order Component"])
      THEN
        EXIT(FALSE);

      IF NOT (Location.RequirePicking(LocationCode) OR Location.RequirePutaway(LocationCode)) THEN
        EXIT(FALSE);

      CheckWhseItemTrkgSetup(ItemNo,SNRequired,LNRequired,FALSE);
      IF NOT (SNRequired OR LNRequired) THEN
        EXIT(FALSE);

      WhseShipmentLine.SETCURRENTKEY(
        "Source Type","Source Subtype","Source No.","Source Line No.");
      WhseShipmentLine.SETRANGE("Source Type",Type);
      WhseShipmentLine.SETRANGE("Source Subtype",Subtype);
      WhseShipmentLine.SETRANGE("Source No.",ID);
      WhseShipmentLine.SETRANGE("Source Line No.",RefNo);
      IF NOT WhseShipmentLine.ISEMPTY THEN
        EXIT(TRUE);

      WhseWkshLine.SETCURRENTKEY(
        "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
      WhseWkshLine.SETRANGE("Source Type",Type);
      WhseWkshLine.SETRANGE("Source Subtype",Subtype);
      WhseWkshLine.SETRANGE("Source No.",ID);
      IF Type IN [DATABASE::"Prod. Order Component",DATABASE::"Prod. Order Line"] THEN BEGIN
        WhseWkshLine.SETRANGE("Source Line No.",ProdOrderLine);
        WhseWkshLine.SETRANGE("Source Subline No.",RefNo);
      END ELSE
        WhseWkshLine.SETRANGE("Source Line No.",RefNo);
      IF WhseWkshLine.FINDFIRST THEN
        IF WhseWkshTemplate.GET(WhseWkshLine."Worksheet Template Name") THEN
          IF WhseWkshTemplate.Type = WhseWkshTemplate.Type::Pick THEN
            EXIT(TRUE);

      WhseActivLine.SETCURRENTKEY(
        "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
      WhseActivLine.SETRANGE("Source Type",Type);
      WhseActivLine.SETRANGE("Source Subtype",Subtype);
      WhseActivLine.SETRANGE("Source No.",ID);
      IF Type IN [DATABASE::"Prod. Order Component",DATABASE::"Prod. Order Line"] THEN BEGIN
        WhseActivLine.SETRANGE("Source Line No.",ProdOrderLine);
        WhseActivLine.SETRANGE("Source Subline No.",RefNo);
      END ELSE
        WhseActivLine.SETRANGE("Source Line No.",RefNo);
      IF WhseActivLine.FINDFIRST THEN
        IF WhseActivLine."Activity Type" IN [WhseActivLine."Activity Type"::Pick,
                                             WhseActivLine."Activity Type"::"Invt. Put-away",
                                             WhseActivLine."Activity Type"::"Invt. Pick"]
        THEN
          EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE CheckWhseItemTrkgSetup@42(ItemNo@1000 : Code[20];VAR SNRequired@1002 : Boolean;VAR LNRequired@1003 : Boolean;ShowError@1005 : Boolean);
    VAR
      ItemTrackingCode@1001 : Record 6502;
      Item@1004 : Record 27;
    BEGIN
      SNRequired := FALSE;
      LNRequired := FALSE;
      IF Item."No." <> ItemNo THEN
        Item.GET(ItemNo);
      IF Item."Item Tracking Code" <> '' THEN BEGIN
        IF ItemTrackingCode.Code <> Item."Item Tracking Code" THEN
          ItemTrackingCode.GET(Item."Item Tracking Code");
        SNRequired := ItemTrackingCode."SN Warehouse Tracking";
        LNRequired := ItemTrackingCode."Lot Warehouse Tracking";
      END;
      IF NOT (SNRequired OR LNRequired) AND ShowError THEN
        ERROR(Text005,Item.FIELDCAPTION("No."),ItemNo);
    END;

    PROCEDURE SetGlobalParameters@44(SourceSpecification2@1000 : TEMPORARY Record 336;VAR TempTrackingSpecification2@1001 : TEMPORARY Record 336;DueDate2@1002 : Date);
    BEGIN
      SourceSpecification := SourceSpecification2;
      DueDate := DueDate2;
      IF TempTrackingSpecification2.FINDSET THEN
        REPEAT
          TempTrackingSpecification := TempTrackingSpecification2;
          TempTrackingSpecification.INSERT;
        UNTIL TempTrackingSpecification2.NEXT = 0;
    END;

    PROCEDURE AdjustQuantityRounding@45(NonDistrQuantity@1004 : Decimal;VAR QtyToBeHandled@1002 : Decimal;NonDistrQuantityBase@1001 : Decimal;QtyToBeHandledBase@1000 : Decimal);
    VAR
      FloatingFactor@1003 : Decimal;
    BEGIN
      // Used by CU80/90 for handling rounding differences during invoicing

      FloatingFactor := QtyToBeHandledBase / NonDistrQuantityBase;

      IF FloatingFactor < 1 THEN
        QtyToBeHandled := ROUND(FloatingFactor * NonDistrQuantity,0.00001)
      ELSE
        QtyToBeHandled := NonDistrQuantity;
    END;

    PROCEDURE SynchronizeItemTracking@47(FromRowID@1000 : Text[100];ToRowID@1001 : Text[100];DialogText@1006 : Text[250]);
    VAR
      ReservEntry1@1002 : Record 337;
      ReservMgt@1004 : Codeunit 99000845;
    BEGIN
      // Used for syncronizing between orders linked via Drop Shipment
      ReservEntry1.SetPointer(FromRowID);
      ReservMgt.SetPointerFilter(ReservEntry1);
      SynchronizeItemTracking2(ReservEntry1,ToRowID,DialogText);
    END;

    PROCEDURE SynchronizeItemTracking2@79(VAR FromReservEntry@1000 : Record 337;ToRowID@1001 : Text[250];DialogText@1006 : Text[250]);
    VAR
      ReservEntry2@1003 : Record 337;
      TempTrkgSpec1@1007 : TEMPORARY Record 336;
      TempTrkgSpec2@1008 : TEMPORARY Record 336;
      TempTrkgSpec3@1011 : TEMPORARY Record 336;
      TempSourceSpec@1010 : TEMPORARY Record 336;
      ItemTrackingForm@1014 : Form 6510;
      ItemTrackingMgt@1017 : Codeunit 6500;
      ReservMgt@1004 : Codeunit 99000845;
      CreateReservEntry@1009 : Codeunit 99000830;
      AvailabilityDate@1016 : Date;
      LastEntryNo@1005 : Integer;
      SignFactor1@1015 : Integer;
      SignFactor2@1012 : Integer;
      SecondSourceRowID@1013 : Text[250];
    BEGIN
      // Used for synchronizing between orders linked via Drop Shipment and for
      // synchronizing between invt. pick/put-away and parent line.
      ReservEntry2.SetPointer(ToRowID);
      SignFactor1 := CreateReservEntry.SignFactor(FromReservEntry);
      SignFactor2 := CreateReservEntry.SignFactor(ReservEntry2);
      ReservMgt.SetPointerFilter(ReservEntry2);

      IF ReservEntry2.ISEMPTY THEN BEGIN
        IF FromReservEntry.ISEMPTY THEN
          EXIT;
        IF DialogText <> '' THEN
          IF NOT CONFIRM(DialogText) THEN BEGIN
            MESSAGE(Text006);
            EXIT;
          END;
        CopyItemTracking3(FromReservEntry,ToRowID,SignFactor1 <> SignFactor2,FALSE);

        // Copy to inbound part of transfer.
        IF (FromReservEntry."Source Type" = DATABASE::"Transfer Line") AND
           (FromReservEntry."Source Subtype" = 0) THEN BEGIN
          SecondSourceRowID :=
            ItemTrackingMgt.ComposeRowID(FromReservEntry."Source Type",
              1,FromReservEntry."Source ID",
              FromReservEntry."Source Batch Name",FromReservEntry."Source Prod. Order Line",
              FromReservEntry."Source Ref. No.");
          IF ToRowID <> SecondSourceRowID THEN // Avoid copying to the line itself
            CopyItemTracking(ToRowID,SecondSourceRowID,TRUE);
        END;

      END ELSE BEGIN
        IF (FromReservEntry."Source Type" = DATABASE::"Transfer Line") AND
           (FromReservEntry."Source Subtype" = 0)
        THEN
          SynchronizeItemTrkgTransfer(ReservEntry2);    // synchronize transfer

        IF SumUpItemTracking(ReservEntry2,TempTrkgSpec2,FALSE,TRUE) THEN
          TempSourceSpec := TempTrkgSpec2  // TempSourceSpec is used for conveying source information to Form6510.
        ELSE
          TempSourceSpec.TRANSFERFIELDS(ReservEntry2);

        IF ReservEntry2."Quantity (Base)" > 0 THEN
          AvailabilityDate := ReservEntry2."Expected Receipt Date"
        ELSE
          AvailabilityDate := ReservEntry2."Shipment Date";

        SumUpItemTracking(FromReservEntry,TempTrkgSpec1,FALSE,TRUE);

        TempTrkgSpec1.RESET;
        TempTrkgSpec2.RESET;
        TempTrkgSpec1.SETCURRENTKEY("Lot No.","Serial No.");
        TempTrkgSpec2.SETCURRENTKEY("Lot No.","Serial No.");
        IF TempTrkgSpec1.FINDSET THEN
          REPEAT
            TempTrkgSpec2.SETRANGE("Lot No.",TempTrkgSpec1."Lot No.");
            TempTrkgSpec2.SETRANGE("Serial No.",TempTrkgSpec1."Serial No.");
            IF TempTrkgSpec2.FINDFIRST THEN BEGIN
              IF TempTrkgSpec2."Quantity (Base)" * SignFactor2 <> TempTrkgSpec1."Quantity (Base)" * SignFactor1 THEN BEGIN
                TempTrkgSpec3 := TempTrkgSpec2;
                TempTrkgSpec3.VALIDATE("Quantity (Base)",
                  (TempTrkgSpec1."Quantity (Base)" * SignFactor1 - TempTrkgSpec2."Quantity (Base)" * SignFactor2));
                TempTrkgSpec3."Entry No." := LastEntryNo + 1;
                TempTrkgSpec3.INSERT;
              END;
              TempTrkgSpec2.DELETE;
            END ELSE BEGIN
              TempTrkgSpec3 := TempTrkgSpec1;
              TempTrkgSpec3.VALIDATE("Quantity (Base)",TempTrkgSpec1."Quantity (Base)" * SignFactor1);
              TempTrkgSpec3."Entry No." := LastEntryNo + 1;
              TempTrkgSpec3.INSERT;
            END;
            LastEntryNo := TempTrkgSpec3."Entry No.";
            TempTrkgSpec1.DELETE;
          UNTIL TempTrkgSpec1.NEXT = 0;

        TempTrkgSpec2.RESET;

        IF TempTrkgSpec2.FINDFIRST THEN
          REPEAT
            TempTrkgSpec3 := TempTrkgSpec2;
            TempTrkgSpec3.VALIDATE("Quantity (Base)",-TempTrkgSpec2."Quantity (Base)" * SignFactor2);
            TempTrkgSpec3."Entry No." := LastEntryNo + 1;
            TempTrkgSpec3.INSERT;
            LastEntryNo := TempTrkgSpec3."Entry No.";
          UNTIL TempTrkgSpec2.NEXT = 0;

        TempTrkgSpec3.RESET;

        IF NOT TempTrkgSpec3.ISEMPTY THEN BEGIN
          IF DialogText <> '' THEN
            IF NOT CONFIRM(DialogText) THEN BEGIN
              MESSAGE(Text006);
              EXIT;
            END;
          TempSourceSpec."Quantity (Base)" := ReservMgt.GetSourceRecordValue(ReservEntry2,FALSE,1);
          IF TempTrkgSpec3."Source Type" = DATABASE::"Transfer Line" THEN BEGIN
            TempTrkgSpec3.MODIFYALL("Location Code",ReservEntry2."Location Code");
            ItemTrackingForm.SetFormRunMode(4);
          END ELSE
            IF FromReservEntry."Source Type" <> ReservEntry2."Source Type" THEN // If different it is drop shipment
              ItemTrackingForm.SetFormRunMode(3);
          ItemTrackingForm.RegisterItemTrackingLines(TempSourceSpec,AvailabilityDate,TempTrkgSpec3);
        END;
      END;
    END;

    PROCEDURE SetRegistering@49(Registering2@1000 : Boolean);
    BEGIN
      Registering := Registering2;
    END;

    PROCEDURE ModifyTemp337SetIfTransfer@50(VAR TempReservEntry@1001 : TEMPORARY Record 337);
    VAR
      TransLine@1000 : Record 5741;
    BEGIN
      IF TempReservEntry."Source Type" = DATABASE::"Transfer Line" THEN BEGIN
        TransLine.GET(TempReservEntry."Source ID",TempReservEntry."Source Ref. No.");
        TempReservEntry.MODIFYALL("Reservation Status",TempReservEntry."Reservation Status"::Surplus);
        IF TempReservEntry."Source Subtype" = 0 THEN BEGIN
          TempReservEntry.MODIFYALL("Location Code",TransLine."Transfer-from Code");
          TempReservEntry.MODIFYALL("Expected Receipt Date",0D);
          TempReservEntry.MODIFYALL("Shipment Date",TransLine."Shipment Date");
        END ELSE BEGIN
          TempReservEntry.MODIFYALL("Location Code",TransLine."Transfer-to Code");
          TempReservEntry.MODIFYALL("Expected Receipt Date",TransLine."Receipt Date");
          TempReservEntry.MODIFYALL("Shipment Date",0D);
        END;
      END;
    END;

    PROCEDURE SynchronizeWhseItemTracking@51(VAR TempTrackingSpecification@1002 : TEMPORARY Record 336;RegPickNo@1007 : Code[20]);
    VAR
      SourceSpec@1000 : Record 336;
      ReservEntry@1003 : Record 337;
      RegisteredWhseActLine@1004 : Record 5773;
      ItemTrackingForm@1001 : Form 6510;
      Qty@1102601000 : Decimal;
      ZeroQtyToHandle@1005 : Boolean;
    BEGIN
      IF TempTrackingSpecification.FINDSET THEN
        REPEAT
          IF TempTrackingSpecification.Correction THEN BEGIN
            IF IsPick THEN BEGIN
              ZeroQtyToHandle := FALSE;
              IF RegPickNo <> '' THEN BEGIN
                RegisteredWhseActLine.SETRANGE("Activity Type",RegisteredWhseActLine."Activity Type"::Pick);
                RegisteredWhseActLine.SETRANGE("Source No.",TempTrackingSpecification."Source ID");
                RegisteredWhseActLine.SETRANGE("Source Line No.",TempTrackingSpecification."Source Ref. No.");
                RegisteredWhseActLine.SETRANGE("Source Type",TempTrackingSpecification."Source Type");
                RegisteredWhseActLine.SETRANGE("Source Subtype",TempTrackingSpecification."Source Subtype");
                RegisteredWhseActLine.SETRANGE("Lot No.",TempTrackingSpecification."Lot No.");
                RegisteredWhseActLine.SETRANGE("Serial No.",TempTrackingSpecification."Serial No.");
                RegisteredWhseActLine.SETFILTER("No.",'<> %1',RegPickNo);

                ZeroQtyToHandle := RegisteredWhseActLine.ISEMPTY;
              END;

              ReservEntry.SETCURRENTKEY(
                "Source ID","Source Ref. No.","Source Type","Source Subtype",
                "Source Batch Name","Source Prod. Order Line");

              ReservEntry.SETRANGE("Source ID",TempTrackingSpecification."Source ID");
              ReservEntry.SETRANGE("Source Ref. No.",TempTrackingSpecification."Source Ref. No.");
              ReservEntry.SETRANGE("Source Type",TempTrackingSpecification."Source Type");
              ReservEntry.SETRANGE("Source Subtype",TempTrackingSpecification."Source Subtype");
              ReservEntry.SETRANGE("Source Batch Name",'');
              ReservEntry.SETRANGE("Source Prod. Order Line",TempTrackingSpecification."Source Prod. Order Line");
              ReservEntry.SETRANGE("Lot No.",TempTrackingSpecification."Lot No.");
              ReservEntry.SETRANGE("Serial No.",TempTrackingSpecification."Serial No.");

              IF ReservEntry.FINDSET(TRUE) THEN
                REPEAT
                  IF ZeroQtyToHandle THEN BEGIN
                    ReservEntry."Qty. to Handle (Base)" := 0;
                    ReservEntry."Qty. to Invoice (Base)" := 0;
                    ReservEntry.MODIFY;
                  END;
                UNTIL ReservEntry.NEXT = 0;

              Qty := - TempTrackingSpecification."Qty. to Handle (Base)";

              IF ReservEntry.FINDSET(TRUE) THEN
                REPEAT
                  IF RegPickNo <> '' THEN BEGIN
                    ReservEntry."Qty. to Handle (Base)" += Qty;
                    ReservEntry."Qty. to Invoice (Base)" += Qty;
                  END ELSE BEGIN
                    ReservEntry."Qty. to Handle (Base)" := Qty;
                    ReservEntry."Qty. to Invoice (Base)" := Qty;
                  END;
                  IF ABS(ReservEntry."Qty. to Handle (Base)") > ABS(ReservEntry."Quantity (Base)") THEN BEGIN
                    Qty := ReservEntry."Qty. to Handle (Base)" - ReservEntry."Quantity (Base)";
                    ReservEntry."Qty. to Handle (Base)" := ReservEntry."Quantity (Base)";
                    ReservEntry."Qty. to Invoice (Base)" := ReservEntry."Quantity (Base)";
                  END ELSE
                    Qty := 0;
                  ReservEntry.MODIFY;
                UNTIL (ReservEntry.NEXT = 0) OR (Qty = 0);
            END;
            TempTrackingSpecification.DELETE;
          END;
        UNTIL TempTrackingSpecification.NEXT = 0;

      IF TempTrackingSpecification.FINDSET THEN
        REPEAT
          TempTrackingSpecification.SETRANGE("Source ID",TempTrackingSpecification."Source ID");
          TempTrackingSpecification.SETRANGE("Source Type",TempTrackingSpecification."Source Type");
          TempTrackingSpecification.SETRANGE("Source Subtype",TempTrackingSpecification."Source Subtype");
          TempTrackingSpecification.SETRANGE("Source Prod. Order Line",TempTrackingSpecification."Source Prod. Order Line");
          TempTrackingSpecification.SETRANGE("Source Ref. No.",TempTrackingSpecification."Source Ref. No.");
          SourceSpec := TempTrackingSpecification;
          TempTrackingSpecification.CALCSUMS("Qty. to Handle (Base)");
          SourceSpec."Quantity (Base)" :=
            TempTrackingSpecification."Qty. to Handle (Base)" +
            ABS(ItemTrkgQtyPostedOnSource(SourceSpec));
          CLEAR(ItemTrackingForm);
          ItemTrackingForm.SetCalledFromSynchWhseItemTrkg(TRUE);
          ItemTrackingForm.SetPick(IsPick);
          ItemTrackingForm.RegisterItemTrackingLines(
            SourceSpec,
            SourceSpec."Creation Date",
            TempTrackingSpecification);
          TempTrackingSpecification.SETRANGE("Source ID");
          TempTrackingSpecification.SETRANGE("Source Type");
          TempTrackingSpecification.SETRANGE("Source Subtype");
          TempTrackingSpecification.SETRANGE("Source Prod. Order Line");
          TempTrackingSpecification.SETRANGE("Source Ref. No.");
        UNTIL TempTrackingSpecification.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckWhseItemTrkg@40(VAR TempWhseItemTrkgLine@1000 : Record 6550;WhseWkshLine@1002 : Record 7326);
    VAR
      SourceItemTrkgLine@1001 : Record 337;
      WhseItemTrackingLine@1003 : Record 6550;
      EntryNo@1004 : Integer;
    BEGIN
      WITH WhseWkshLine DO BEGIN
        IF WhseItemTrackingLine.FINDLAST THEN
          EntryNo := WhseItemTrackingLine."Entry No.";

        SourceItemTrkgLine.SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line");
        SourceItemTrkgLine.SETRANGE("Source ID","Source No.");
        SourceItemTrkgLine.SETRANGE("Source Ref. No.","Source Subline No.");
        SourceItemTrkgLine.SETRANGE("Source Type","Source Type");
        SourceItemTrkgLine.SETRANGE("Source Subtype","Source Subtype");
        SourceItemTrkgLine.SETRANGE("Source Batch Name",'');
        SourceItemTrkgLine.SETRANGE("Source Prod. Order Line","Source Line No.");
        IF SourceItemTrkgLine.FINDSET THEN
          REPEAT
            IF (SourceItemTrkgLine."Serial No." <> '') OR
               (SourceItemTrkgLine."Lot No." <> '')
            THEN BEGIN
              TempWhseItemTrkgLine.SETCURRENTKEY(
                "Source ID","Source Type","Source Subtype","Source Batch Name","Source Prod. Order Line","Source Ref. No.");
              TempWhseItemTrkgLine.SETRANGE("Source Type","Source Type");
              TempWhseItemTrkgLine.SETRANGE("Source Subtype","Source Subtype");
              TempWhseItemTrkgLine.SETRANGE("Source ID","Source No.");
              TempWhseItemTrkgLine.SETRANGE("Source Prod. Order Line","Source Line No.");
              TempWhseItemTrkgLine.SETRANGE("Source Ref. No.","Source Subline No.");
              TempWhseItemTrkgLine.SETRANGE("Serial No.",SourceItemTrkgLine."Serial No.");
              TempWhseItemTrkgLine.SETRANGE("Lot No.",SourceItemTrkgLine."Lot No.");

              IF TempWhseItemTrkgLine.FINDFIRST THEN
                TempWhseItemTrkgLine.DELETE
              ELSE BEGIN
                WhseItemTrackingLine.INIT;
                EntryNo += 1;
                WhseItemTrackingLine."Entry No." := EntryNo;
                WhseItemTrackingLine."Item No." := SourceItemTrkgLine."Item No.";
                WhseItemTrackingLine."Variant Code" := SourceItemTrkgLine."Variant Code";
                WhseItemTrackingLine."Location Code" := SourceItemTrkgLine."Location Code";
                WhseItemTrackingLine.Description := SourceItemTrkgLine.Description;
                WhseItemTrackingLine."Qty. per Unit of Measure" := SourceItemTrkgLine."Qty. per Unit of Measure";
                WhseItemTrackingLine."Source Type" := "Source Type";
                WhseItemTrackingLine."Source Subtype" := "Source Subtype";
                WhseItemTrackingLine."Source ID" := "Source No.";
                WhseItemTrackingLine."Source Prod. Order Line" := "Source Line No.";
                WhseItemTrackingLine."Source Ref. No." := "Source Subline No.";
                WhseItemTrackingLine."Serial No." := SourceItemTrkgLine."Serial No.";
                WhseItemTrackingLine."Lot No." := SourceItemTrkgLine."Lot No.";
                WhseItemTrackingLine."Warranty Date" := SourceItemTrkgLine."Warranty Date";
                WhseItemTrackingLine."Expiration Date" := SourceItemTrkgLine."Expiration Date";
                WhseItemTrackingLine."Quantity (Base)" := -SourceItemTrkgLine."Quantity (Base)";
                IF "Qty. (Base)" = "Qty. to Handle (Base)" THEN
                  WhseItemTrackingLine."Qty. to Handle (Base)" := WhseItemTrackingLine."Quantity (Base)";
                WhseItemTrackingLine."Qty. to Handle" :=
                  ROUND(WhseItemTrackingLine."Qty. to Handle (Base)" / WhseItemTrackingLine."Qty. per Unit of Measure",0.00001);
                WhseItemTrackingLine.INSERT;
              END;
            END;
          UNTIL SourceItemTrkgLine.NEXT = 0;

        TempWhseItemTrkgLine.RESET;
        IF TempWhseItemTrkgLine.FINDSET THEN
          REPEAT
            IF ((TempWhseItemTrkgLine."Serial No." <> '') OR
                (TempWhseItemTrkgLine."Lot No." <> '')) AND
               (TempWhseItemTrkgLine."Quantity Handled (Base)" = 0)
            THEN BEGIN
              WhseItemTrackingLine.GET(TempWhseItemTrkgLine."Entry No.");
              WhseItemTrackingLine.DELETE;
            END;
          UNTIL TempWhseItemTrkgLine.NEXT = 0;
      END;
    END;

    PROCEDURE CopyLotNoInformation@80(LotNoInfo@1000 : Record 6505;NewLotNo@1002 : Code[20]);
    VAR
      NewLotNoInfo@1001 : Record 6505;
      CommentType@1004 : ' ,Serial No.,Lot No.';
    BEGIN
      IF NewLotNoInfo.GET(LotNoInfo."Item No.",LotNoInfo."Variant Code",NewLotNo) THEN BEGIN
        IF NOT CONFIRM(text008,FALSE,LotNoInfo.TABLECAPTION,LotNoInfo.FIELDCAPTION("Lot No."),NewLotNo) THEN
          ERROR('');
        NewLotNoInfo.TRANSFERFIELDS(LotNoInfo,FALSE);
        NewLotNoInfo.MODIFY;
      END ELSE BEGIN
        NewLotNoInfo := LotNoInfo;
        NewLotNoInfo."Lot No." := NewLotNo;
        NewLotNoInfo.INSERT;
      END;

      CopyInfoComment(
        CommentType::"Lot No.",
        LotNoInfo."Item No.",
        LotNoInfo."Variant Code",
        LotNoInfo."Lot No.",
        NewLotNo);
    END;

    PROCEDURE CopySerialNoInformation@52(SerialNoInfo@1000 : Record 6504;NewSerialNo@1002 : Code[20]);
    VAR
      NewSerialNoInfo@1001 : Record 6504;
      CommentType@1004 : ' ,Serial No.,Lot No.';
    BEGIN
      IF NewSerialNoInfo.GET(SerialNoInfo."Item No.",SerialNoInfo."Variant Code",NewSerialNo) THEN BEGIN
        IF NOT CONFIRM(text008,FALSE,SerialNoInfo.TABLECAPTION,SerialNoInfo.FIELDCAPTION("Serial No."),NewSerialNo) THEN
          ERROR('');
        NewSerialNoInfo.TRANSFERFIELDS(SerialNoInfo,FALSE);
        NewSerialNoInfo.MODIFY;
      END ELSE BEGIN
        NewSerialNoInfo := SerialNoInfo;
        NewSerialNoInfo."Serial No." := NewSerialNo;
        NewSerialNoInfo.INSERT;
      END;

      CopyInfoComment(
        CommentType::"Serial No.",
        SerialNoInfo."Item No.",
        SerialNoInfo."Variant Code",
        SerialNoInfo."Serial No.",
        NewSerialNo);
    END;

    PROCEDURE CopyInfoComment@57(InfoType@1000 : ' ,Serial No.,Lot No.';ItemNo@1001 : Code[20];VariantCode@1002 : Code[10];SerialLotNo@1003 : Code[20];NewSerialLotNo@1004 : Code[20]);
    VAR
      ItemTrackingComment@1005 : Record 6506;
      ItemTrackingComment1@1006 : Record 6506;
    BEGIN
      IF SerialLotNo = NewSerialLotNo THEN
        EXIT;

      ItemTrackingComment1.SETRANGE(Type,InfoType);
      ItemTrackingComment1.SETRANGE("Item No.",ItemNo);
      ItemTrackingComment1.SETRANGE("Variant Code",VariantCode);
      ItemTrackingComment1.SETRANGE("Serial/Lot No.",NewSerialLotNo);

      IF NOT ItemTrackingComment1.ISEMPTY THEN
        ItemTrackingComment1.DELETEALL;

      ItemTrackingComment.SETRANGE(Type,InfoType);
      ItemTrackingComment.SETRANGE("Item No.",ItemNo);
      ItemTrackingComment.SETRANGE("Variant Code",VariantCode);
      ItemTrackingComment.SETRANGE("Serial/Lot No.",SerialLotNo);

      IF ItemTrackingComment.ISEMPTY THEN
        EXIT;

      IF ItemTrackingComment.FINDSET THEN BEGIN
        REPEAT
          ItemTrackingComment1 := ItemTrackingComment;
          ItemTrackingComment1."Serial/Lot No." := NewSerialLotNo;
          ItemTrackingComment1.INSERT;
        UNTIL ItemTrackingComment.NEXT = 0
      END;
    END;

    PROCEDURE GetLotSNDataSet@60(ItemNo@1000 : Code[20];Variant@1001 : Code[20];LotNo@1002 : Code[20];SerialNo@1006 : Code[20];VAR ItemLedgEntry@1003 : Record 32) OK : Boolean;
    BEGIN
      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,"Expiration Date");

      ItemLedgEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgEntry.SETRANGE(Open,TRUE);
      ItemLedgEntry.SETRANGE("Variant Code",Variant);
      IF LotNo <> '' THEN
        ItemLedgEntry.SETRANGE("Lot No.",LotNo)
      ELSE
        IF SerialNo <> '' THEN
          ItemLedgEntry.SETRANGE("Serial No.",SerialNo);
      ItemLedgEntry.SETRANGE(Positive,TRUE);

      IF ItemLedgEntry.ISEMPTY THEN
        EXIT;

      ItemLedgEntry.FINDSET;
      OK := TRUE;
    END;

    PROCEDURE ExistingExpirationDate@58(ItemNo@1002 : Code[20];Variant@1001 : Code[20];LotNo@1000 : Code[20];SerialNo@1005 : Code[20];TestMultiple@1004 : Boolean;VAR EntriesExist@1007 : Boolean) ExpDate : Date;
    VAR
      ItemLedgEntry@1003 : Record 32;
    BEGIN
      IF NOT GetLotSNDataSet(ItemNo,Variant,LotNo,SerialNo,ItemLedgEntry) THEN BEGIN
        EntriesExist := FALSE;
        EXIT;
      END;

      EntriesExist := TRUE;

      ExpDate := ItemLedgEntry."Expiration Date";

      IF TestMultiple THEN BEGIN
        ItemLedgEntry.SETFILTER("Expiration Date",'<>%1',ItemLedgEntry."Expiration Date");
        IF NOT ItemLedgEntry.ISEMPTY THEN
          ERROR(Text007,LotNo);
      END;
    END;

    PROCEDURE ExistingExpirationDateAndQty@20(ItemNo@1002 : Code[20];Variant@1001 : Code[20];LotNo@1000 : Code[20];SerialNo@1005 : Code[20];VAR SumOfEntries@1007 : Decimal) ExpDate : Date;
    VAR
      ItemLedgEntry@1003 : Record 32;
    BEGIN
      SumOfEntries := 0;
      IF NOT GetLotSNDataSet(ItemNo,Variant,LotNo,SerialNo,ItemLedgEntry) THEN
        EXIT;

      ExpDate := ItemLedgEntry."Expiration Date";
      IF ItemLedgEntry.FINDSET THEN
        REPEAT
          SumOfEntries += ItemLedgEntry."Remaining Quantity";
        UNTIL ItemLedgEntry.NEXT = 0;
    END;

    PROCEDURE ExistingWarrantyDate@1002(ItemNo@1002 : Code[20];Variant@1001 : Code[20];LotNo@1000 : Code[20];SerialNo@1005 : Code[20];VAR EntriesExist@1007 : Boolean) WarDate : Date;
    VAR
      ItemLedgEntry@1003 : Record 32;
    BEGIN
      IF NOT GetLotSNDataSet(ItemNo,Variant,LotNo,SerialNo,ItemLedgEntry) THEN
        EXIT;
      ItemLedgEntry.FINDFIRST;
      EntriesExist := TRUE;
      WarDate := ItemLedgEntry."Warranty Date";
    END;

    PROCEDURE WhseExistingExpirationDate@56(ItemNo@1002 : Code[20];VariantCode@1001 : Code[20];Location@1006 : Record 14;LotNo@1000 : Code[20];SerialNo@1005 : Code[20];VAR EntriesExist@1007 : Boolean) ExpDate : Date;
    VAR
      WhseEntry@1003 : Record 7312;
      SumOfEntries@1009 : Decimal;
    BEGIN
      ExpDate := 0D;
      SumOfEntries := 0;

      IF Location."Adjustment Bin Code" = '' THEN
        EXIT;

      WITH WhseEntry DO BEGIN
        RESET;
        SETCURRENTKEY("Item No.","Bin Code","Location Code","Variant Code","Unit of Measure Code","Lot No.","Serial No.");
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Bin Code",Location."Adjustment Bin Code");
        SETRANGE("Location Code",Location.Code);
        SETRANGE("Variant Code",VariantCode);
        IF LotNo <> '' THEN
          SETRANGE("Lot No.",LotNo)
        ELSE
          IF SerialNo <> '' THEN
            SETRANGE("Serial No.",SerialNo);
        IF ISEMPTY THEN
          EXIT;

        IF FINDSET THEN
          REPEAT
            SumOfEntries += "Qty. (Base)";
            IF ("Expiration Date" <> 0D) AND (("Expiration Date" < ExpDate) OR (ExpDate = 0D)) THEN
              ExpDate := "Expiration Date";
          UNTIL NEXT = 0;
      END;

      EntriesExist := SumOfEntries < 0;
    END;

    PROCEDURE WhseExistingWarrantyDate@94(ItemNo@1000 : Code[20];VariantCode@1001 : Code[20];Location@1002 : Record 14;LotNo@1003 : Code[20];SerialNo@1004 : Code[20];VAR EntriesExist@1005 : Boolean) WarDate : Date;
    VAR
      WhseEntry@1006 : Record 7312;
      SumOfEntries@1007 : Decimal;
    BEGIN
      WarDate := 0D;
      SumOfEntries := 0;

      IF Location."Adjustment Bin Code" = '' THEN
        EXIT;

      WITH WhseEntry DO BEGIN
        RESET;
        SETCURRENTKEY("Item No.","Bin Code","Location Code","Variant Code","Unit of Measure Code","Lot No.","Serial No.");
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Bin Code",Location."Adjustment Bin Code");
        SETRANGE("Location Code",Location.Code);
        SETRANGE("Variant Code",VariantCode);
        IF LotNo <> '' THEN
          SETRANGE("Lot No.",LotNo)
        ELSE
          IF SerialNo <> '' THEN
            SETRANGE("Serial No.",SerialNo);
        IF ISEMPTY THEN
          EXIT;

        IF FINDSET THEN
          REPEAT
            SumOfEntries += "Qty. (Base)";
            IF ("Warranty Date" <> 0D) AND (("Warranty Date" < WarDate) OR (WarDate = 0D)) THEN
              WarDate := "Warranty Date";
          UNTIL NEXT = 0;
      END;

      EntriesExist := SumOfEntries < 0;
    END;

    PROCEDURE GetWhseExpirationDate@73(ItemNo@1002 : Code[20];VariantCode@1001 : Code[20];Location@1006 : Record 14;LotNo@1000 : Code[20];SerialNo@1005 : Code[20];VAR ExpDate@1003 : Date) : Boolean;
    VAR
      EntriesExist@1004 : Boolean;
    BEGIN
      ExpDate := ExistingExpirationDate(ItemNo,VariantCode,LotNo,SerialNo,FALSE,EntriesExist);
      IF EntriesExist THEN
        EXIT(TRUE);

      ExpDate := WhseExistingExpirationDate(ItemNo,VariantCode,Location,LotNo,SerialNo,EntriesExist);
      IF EntriesExist THEN
        EXIT(TRUE);

      ExpDate := 0D;
      EXIT(FALSE);
    END;

    PROCEDURE GetWhseWarrantyDate@97(ItemNo@1000 : Code[20];VariantCode@1001 : Code[20];Location@1002 : Record 14;LotNo@1003 : Code[20];SerialNo@1004 : Code[20];VAR Wardate@1005 : Date) : Boolean;
    VAR
      EntriesExist@1006 : Boolean;
    BEGIN
      Wardate := ExistingWarrantyDate(ItemNo,VariantCode,LotNo,SerialNo,EntriesExist);
      IF EntriesExist THEN
        EXIT(TRUE);

      Wardate := WhseExistingWarrantyDate(ItemNo,VariantCode,Location,LotNo,SerialNo,EntriesExist);
      IF EntriesExist THEN
        EXIT(TRUE);

      Wardate := 0D;
      EXIT(FALSE);
    END;

    PROCEDURE SumNewLotOnTrackingSpec@81(VAR TempTrackingSpecification@1000 : TEMPORARY Record 336) : Decimal;
    VAR
      TempTrackingSpecification2@1001 : Record 336;
      SumLot@1002 : Decimal;
    BEGIN
      SumLot := 0;
      TempTrackingSpecification2 := TempTrackingSpecification;
      TempTrackingSpecification.SETRANGE("New Lot No.",TempTrackingSpecification."New Lot No.");
      IF TempTrackingSpecification.FINDSET THEN
        REPEAT
          SumLot += TempTrackingSpecification."Quantity (Base)";
        UNTIL TempTrackingSpecification.NEXT = 0;
      TempTrackingSpecification := TempTrackingSpecification2;
      EXIT(SumLot);
    END;

    PROCEDURE TestExpDateOnTrackingSpec@53(VAR TempTrackingSpecification@1000 : TEMPORARY Record 336);
    BEGIN
      IF (TempTrackingSpecification."Lot No." = '') OR (TempTrackingSpecification."Serial No." = '') THEN
        EXIT;
      TempTrackingSpecification.SETRANGE("Lot No.",TempTrackingSpecification."Lot No.");
      TempTrackingSpecification.SETFILTER("Expiration Date",'<>%1',TempTrackingSpecification."Expiration Date");
      IF NOT TempTrackingSpecification.ISEMPTY THEN
        ERROR(Text007,TempTrackingSpecification."Lot No.");
      TempTrackingSpecification.SETRANGE("Lot No.");
      TempTrackingSpecification.SETRANGE("Expiration Date");
    END;

    PROCEDURE TestExpDateOnTrackingSpecNew@54(VAR TempTrackingSpecification@1000 : TEMPORARY Record 336);
    BEGIN
      IF TempTrackingSpecification."New Lot No." = '' THEN
        EXIT;
      TempTrackingSpecification.SETRANGE("New Lot No.",TempTrackingSpecification."New Lot No.");
      TempTrackingSpecification.SETFILTER("New Expiration Date",'<>%1',TempTrackingSpecification."New Expiration Date");
      IF NOT TempTrackingSpecification.ISEMPTY THEN
        ERROR(Text007,TempTrackingSpecification."New Lot No.");
      TempTrackingSpecification.SETRANGE("New Lot No.");
      TempTrackingSpecification.SETRANGE("New Expiration Date");
    END;

    PROCEDURE ItemTrackingOption@66(LotNo@1000 : Code[20];SerialNo@1001 : Code[20]) OptionValue : Integer;
    BEGIN
      IF LotNo <> '' THEN
        OptionValue := 1;

      IF SerialNo <> '' THEN BEGIN
        IF LotNo <> '' THEN
          OptionValue := 2
        ELSE
          OptionValue := 3;
      END;
    END;

    PROCEDURE RetrieveDocumentItemTracking@82(VAR TrackingSpecBuffer@1003 : TEMPORARY Record 336;SourceID@1000 : Code[20];SourceType@1001 : Integer;SourceSubType@1002 : Option) : Integer;
    VAR
      PurchaseLine@1005 : Record 39;
      SalesLine@1007 : Record 37;
      ServLine@1013 : Record 5902;
      SalesShipLine@1009 : Record 111;
      SalesInvLines@1010 : Record 113;
      ServShptLine@1011 : Record 5991;
      ServInvLine@1012 : Record 5993;
      Item@1006 : Record 27;
      Descr@1004 : Text[50];
    BEGIN
      // retrieves Item Tracking for Purchase Header, Sales Header, Sales Shipment Header, Sales Invoice Header

      TrackingSpecBuffer.DELETEALL;

      CASE SourceType OF
        DATABASE::"Purchase Header":
          BEGIN
            PurchaseLine.SETRANGE("Document Type",SourceSubType);
            PurchaseLine.SETRANGE("Document No.",SourceID);
            IF NOT PurchaseLine.ISEMPTY THEN BEGIN
              PurchaseLine.FINDSET;
              REPEAT
                IF (PurchaseLine.Type = PurchaseLine.Type::Item) AND
                   (PurchaseLine."Quantity (Base)" <> 0) THEN BEGIN
                  IF Item.GET(PurchaseLine."No.") THEN
                    Descr := Item.Description;
                  FindReservEntries(TrackingSpecBuffer,DATABASE::"Purchase Line",PurchaseLine."Document Type",
                    PurchaseLine."Document No.",'',0,PurchaseLine."Line No.",Descr);
                  FindTrackingEntries(TrackingSpecBuffer,DATABASE::"Purchase Line",PurchaseLine."Document Type",
                    PurchaseLine."Document No.",'',0,PurchaseLine."Line No.",Descr);
                END;
              UNTIL PurchaseLine.NEXT = 0;
            END;
          END;
        DATABASE::"Sales Header":
          BEGIN
            SalesLine.SETRANGE("Document Type",SourceSubType);
            SalesLine.SETRANGE("Document No.",SourceID);
            IF NOT SalesLine.ISEMPTY THEN BEGIN
              SalesLine.FINDSET;
              REPEAT
                IF (SalesLine.Type = SalesLine.Type::Item) AND
                   (SalesLine."No." <> '') AND
                   (SalesLine."Quantity (Base)" <> 0) THEN BEGIN
                  IF Item.GET(SalesLine."No.") THEN
                    Descr := Item.Description;
                  FindReservEntries(TrackingSpecBuffer,DATABASE::"Sales Line",SalesLine."Document Type",
                    SalesLine."Document No.",'',0,SalesLine."Line No.",Descr);
                  FindTrackingEntries(TrackingSpecBuffer,DATABASE::"Sales Line",SalesLine."Document Type",
                    SalesLine."Document No.",'',0,SalesLine."Line No.",Descr);
                END;
              UNTIL SalesLine.NEXT = 0;
            END;
          END;
        DATABASE::"Service Header":
          BEGIN
            ServLine.SETRANGE("Document Type",SourceSubType);
            ServLine.SETRANGE("Document No.",SourceID);
            IF NOT ServLine.ISEMPTY THEN BEGIN
              ServLine.FINDSET;
              REPEAT
                IF (ServLine.Type = ServLine.Type::Item) AND
                   (ServLine."No." <> '') AND
                   (ServLine."Quantity (Base)" <> 0) THEN BEGIN
                  IF Item.GET(ServLine."No.") THEN
                    Descr := Item.Description;
                  FindReservEntries(TrackingSpecBuffer,DATABASE::"Service Line",ServLine."Document Type",
                    ServLine."Document No.",'',0,ServLine."Line No.",Descr);
                  FindTrackingEntries(TrackingSpecBuffer,DATABASE::"Service Line",ServLine."Document Type",
                    ServLine."Document No.",'',0,ServLine."Line No.",Descr);
                END;
              UNTIL ServLine.NEXT = 0;
            END;
          END;
        DATABASE::"Sales Shipment Header":
          BEGIN
            SalesShipLine.SETRANGE("Document No.",SourceID);
            IF NOT SalesShipLine.ISEMPTY THEN BEGIN
              SalesShipLine.FINDSET;
              REPEAT
                IF (SalesShipLine.Type = SalesShipLine.Type::Item) AND
                   (SalesShipLine."No." <> '') AND
                   (SalesShipLine."Quantity (Base)" <> 0) THEN BEGIN
                  IF Item.GET(SalesShipLine."No.") THEN
                    Descr := Item.Description;
                  FindItemEntries(TrackingSpecBuffer,DATABASE::"Sales Shipment Line",
                    0,SalesShipLine."Document No.",'',0,SalesShipLine."Line No.",Descr);
                END;
              UNTIL SalesShipLine.NEXT = 0;
            END;
          END;
        DATABASE::"Sales Invoice Header":
          BEGIN
            SalesInvLines.SETRANGE("Document No.",SourceID);
            IF NOT SalesInvLines.ISEMPTY THEN BEGIN
              SalesInvLines.FINDSET;
              REPEAT
                IF (SalesInvLines.Type = SalesInvLines.Type::Item) AND
                   (SalesInvLines."No." <> '') AND
                   (SalesInvLines."Quantity (Base)" <> 0) THEN BEGIN
                  IF Item.GET(SalesInvLines."No.") THEN
                    Descr := Item.Description;
                  FindValueEntries(TrackingSpecBuffer,DATABASE::"Sales Invoice Line",0,SalesInvLines."Document No.",
                    '',0,SalesInvLines."Line No.",Descr);
                END;
              UNTIL SalesInvLines.NEXT = 0;
            END;
          END;
        DATABASE::"Service Shipment Header":
          BEGIN
            ServShptLine.SETRANGE("Document No.",SourceID);
            IF NOT ServShptLine.ISEMPTY THEN BEGIN
              ServShptLine.FINDSET;
              REPEAT
                IF (ServShptLine.Type = ServShptLine.Type::Item) AND
                   (ServShptLine."No." <> '') AND
                   (ServShptLine."Quantity (Base)" <> 0) THEN BEGIN
                  IF Item.GET(ServShptLine."No.") THEN
                    Descr := Item.Description;
                  FindItemEntries(TrackingSpecBuffer,DATABASE::"Service Shipment Line",
                    0,ServShptLine."Document No.",'',0,ServShptLine."Line No.",Descr);
                END;
              UNTIL ServShptLine.NEXT = 0;
            END;
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            ServInvLine.SETRANGE("Document No.",SourceID);
            IF NOT ServInvLine.ISEMPTY THEN BEGIN
              ServInvLine.FINDSET;
              REPEAT
                IF (ServInvLine.Type = ServInvLine.Type::Item) AND
                   (ServInvLine."No." <> '') AND
                   (ServInvLine."Quantity (Base)" <> 0) THEN BEGIN
                  IF Item.GET(SalesInvLines."No.") THEN
                    Descr := Item.Description;
                  FindValueEntries(TrackingSpecBuffer,DATABASE::"Service Invoice Line",
                    0,ServInvLine."Document No.",'',0,ServInvLine."Line No.",Descr);
                END;
              UNTIL ServInvLine.NEXT = 0;
            END;
          END;
        ELSE
          ERROR(Text009,SourceType);
      END;

      TrackingSpecBuffer.RESET;
      EXIT(TrackingSpecBuffer.COUNT);
    END;

    PROCEDURE FindReservEntries@62(VAR TrackingSpecBuffer@1002 : TEMPORARY Record 336;Type@1010 : Integer;Subtype@1009 : Integer;ID@1008 : Code[20];BatchName@1007 : Code[10];ProdOrderLine@1006 : Integer;RefNo@1005 : Integer;Description@1004 : Text[50]);
    VAR
      ReservEntry@1001 : Record 337;
    BEGIN
      // finds Item Tracking for Quote, Order, Invoice, Credit Memo, Return Order

      FilterReservEntries(ReservEntry,Type,Subtype,ID,BatchName,ProdOrderLine,RefNo);
      IF ReservEntry.FINDSET THEN BEGIN
        REPEAT
          IF (ReservEntry."Lot No." <> '') OR (ReservEntry."Serial No." <> '') THEN
            FillTrackingSpecBuffer(TrackingSpecBuffer,Type,Subtype,ID,BatchName,
              ProdOrderLine,RefNo,Description,ReservEntry."Item No.",ReservEntry."Lot No.",
              ReservEntry."Serial No.",ReservEntry."Quantity (Base)");
        UNTIL ReservEntry.NEXT = 0;
      END;
    END;

    PROCEDURE FindTrackingEntries@85(VAR TrackingSpecBuffer@1002 : TEMPORARY Record 336;Type@1008 : Integer;Subtype@1007 : Integer;ID@1006 : Code[20];BatchName@1005 : Code[10];ProdOrderLine@1004 : Integer;RefNo@1003 : Integer;Description@1000 : Text[50]);
    VAR
      TrackingSpec@1001 : Record 336;
    BEGIN
      // finds Item Tracking for Quote, Order, Invoice, Credit Memo, Return Order when shipped/received

      FilterTrackingEntries(TrackingSpec,Type,Subtype,ID,BatchName,ProdOrderLine,RefNo);
      IF TrackingSpec.FINDSET THEN BEGIN
        REPEAT
          IF (TrackingSpec."Lot No." <> '') OR (TrackingSpec."Serial No." <> '') THEN
            FillTrackingSpecBuffer(TrackingSpecBuffer,Type,Subtype,ID,BatchName,
              ProdOrderLine,RefNo,Description,TrackingSpec."Item No.",TrackingSpec."Lot No.",
              TrackingSpec."Serial No.",TrackingSpec."Quantity (Base)");
        UNTIL TrackingSpec.NEXT = 0;
      END;
    END;

    PROCEDURE FindItemEntries@83(VAR TrackingSpecBuffer@1011 : TEMPORARY Record 336;Type@1005 : Integer;Subtype@1004 : Integer;ID@1003 : Code[20];BatchName@1002 : Code[10];ProdOrderLine@1001 : Integer;RefNo@1000 : Integer;Description@1009 : Text[50]);
    VAR
      TempItemLedgEntry@1007 : TEMPORARY Record 32;
    BEGIN
      // finds Item Tracking for Posted Shipments/Receipts

      RetrieveILEFromShptRcpt(TempItemLedgEntry,Type,Subtype,ID,BatchName,ProdOrderLine,RefNo);
      FillTrackingSpecBufferFromILE(TempItemLedgEntry,TrackingSpecBuffer,Type,Subtype,ID,BatchName,ProdOrderLine,RefNo,Description);
    END;

    PROCEDURE FindValueEntries@84(VAR TrackingSpecBuffer@1013 : TEMPORARY Record 336;Type@1008 : Integer;Subtype@1007 : Integer;ID@1006 : Code[20];BatchName@1005 : Code[10];ProdOrderLine@1004 : Integer;RefNo@1003 : Integer;Description@1002 : Text[50]);
    VAR
      TempItemLedgEntry@1010 : TEMPORARY Record 32;
      InvoiceRowID@1000 : Text[250];
    BEGIN
      // finds Item Tracking for Posted Invoices

      InvoiceRowID := ComposeRowID(Type,Subtype,ID,BatchName,ProdOrderLine,RefNo);
      RetrieveILEFromPostedInv(TempItemLedgEntry,InvoiceRowID);
      FillTrackingSpecBufferFromILE(TempItemLedgEntry,TrackingSpecBuffer,Type,Subtype,ID,BatchName,ProdOrderLine,RefNo,Description);
    END;

    LOCAL PROCEDURE ItemTrackingExistsInBuffer@65(VAR TrackingSpecBuffer@1008 : TEMPORARY Record 336;Type@1006 : Integer;Subtype@1005 : Integer;ID@1004 : Code[20];BatchName@1003 : Code[10];ProdOrderLine@1002 : Integer;RefNo@1001 : Integer;LN@1000 : Code[20];SN@1007 : Code[20]) : Boolean;
    BEGIN
      // searches after existing record in TrackingSpecBuffer

      TrackingSpecBuffer.SETCURRENTKEY("Source ID","Source Type","Source Subtype",
        "Source Batch Name","Source Prod. Order Line","Source Ref. No.");
      TrackingSpecBuffer.SETRANGE("Source ID",ID);
      TrackingSpecBuffer.SETRANGE("Source Type",Type);
      TrackingSpecBuffer.SETRANGE("Source Subtype",Subtype);
      TrackingSpecBuffer.SETRANGE("Source Batch Name",BatchName);
      TrackingSpecBuffer.SETRANGE("Source Prod. Order Line",ProdOrderLine);
      TrackingSpecBuffer.SETRANGE("Source Ref. No.",RefNo);
      TrackingSpecBuffer.SETRANGE("Serial No.",SN);
      TrackingSpecBuffer.SETRANGE("Lot No.",LN);

      IF NOT TrackingSpecBuffer.ISEMPTY THEN BEGIN
        TrackingSpecBuffer.FINDFIRST;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE InitTrackingSpecBuffer@64(VAR TrackingSpecBuffer@1010 : TEMPORARY Record 336;EntryNo@1011 : Integer;Type@1006 : Integer;Subtype@1005 : Integer;ID@1004 : Code[20];BatchName@1003 : Code[10];ProdOrderLine@1002 : Integer;RefNo@1000 : Integer;Description@1001 : Text[50];ItemNo@1007 : Code[20];LN@1009 : Code[20];SN@1008 : Code[20]);
    BEGIN
      // initializes a new record for TrackingSpecbuffer

      TrackingSpecBuffer.INIT;
      TrackingSpecBuffer."Source Type" := Type;
      TrackingSpecBuffer."Entry No." := EntryNo;
      TrackingSpecBuffer."Item No." := ItemNo;
      TrackingSpecBuffer.Description := Description;
      TrackingSpecBuffer."Source Subtype" := Subtype;
      TrackingSpecBuffer."Source ID" := ID;
      TrackingSpecBuffer."Source Batch Name" := BatchName;
      TrackingSpecBuffer."Source Prod. Order Line" := ProdOrderLine;
      TrackingSpecBuffer."Source Ref. No." := RefNo;
      TrackingSpecBuffer."Lot No." := LN;
      TrackingSpecBuffer."Serial No." := SN;
    END;

    LOCAL PROCEDURE FillTrackingSpecBuffer@69(VAR TrackingSpecBuffer@1011 : TEMPORARY Record 336;Type@1007 : Integer;Subtype@1006 : Integer;ID@1005 : Code[20];BatchName@1004 : Code[10];ProdOrderLine@1003 : Integer;RefNo@1002 : Integer;Description@1010 : Text[50];ItemNo@1009 : Code[20];LN@1001 : Code[20];SN@1000 : Code[20];Qty@1008 : Decimal);
    VAR
      LastEntryNo@1012 : Integer;
    BEGIN
      // creates or sums up a record in TrackingSpecBuffer

      TrackingSpecBuffer.RESET;
      IF TrackingSpecBuffer.FINDLAST THEN
        LastEntryNo := TrackingSpecBuffer."Entry No.";

      IF ItemTrackingExistsInBuffer(TrackingSpecBuffer,Type,Subtype,ID,BatchName,ProdOrderLine,RefNo,LN,SN) THEN BEGIN
        TrackingSpecBuffer."Quantity (Base)" += ABS(Qty);                      // Sum up Qty
        TrackingSpecBuffer.MODIFY;
      END
      ELSE BEGIN
        LastEntryNo += 1;
        InitTrackingSpecBuffer(TrackingSpecBuffer,LastEntryNo,Type,Subtype,ID,BatchName,
          ProdOrderLine,RefNo,Description,ItemNo,LN,SN);
        TrackingSpecBuffer."Quantity (Base)" := ABS(Qty);
        TrackingSpecBuffer.INSERT;
      END;
    END;

    LOCAL PROCEDURE FillTrackingSpecBufferFromILE@59(VAR TempItemLedgEntry@1000 : TEMPORARY Record 32;VAR TrackingSpecBuffer@1008 : TEMPORARY Record 336;Type@1007 : Integer;Subtype@1006 : Integer;ID@1005 : Code[20];BatchName@1004 : Code[10];ProdOrderLine@1003 : Integer;RefNo@1002 : Integer;Description@1001 : Text[50]);
    BEGIN
      // creates a new record in TrackingSpecBuffer (used for Posted Shipments/Receipts/Invoices)

      IF TempItemLedgEntry.FINDSET THEN BEGIN
        REPEAT
          IF (TempItemLedgEntry."Lot No." <> '') OR (TempItemLedgEntry."Serial No." <> '') THEN
            FillTrackingSpecBuffer(TrackingSpecBuffer,Type,Subtype,ID,BatchName,
              ProdOrderLine,RefNo,Description,TempItemLedgEntry."Item No.",TempItemLedgEntry."Lot No.",
              TempItemLedgEntry."Serial No.",TempItemLedgEntry.Quantity);
        UNTIL TempItemLedgEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FilterReservEntries@68(VAR ReservEntry@1002 : Record 337;Type@1010 : Integer;Subtype@1009 : Integer;ID@1008 : Code[20];BatchName@1007 : Code[10];ProdOrderLine@1006 : Integer;RefNo@1005 : Integer);
    BEGIN
      // retrieves a data set of Reservation Entries

      ReservEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype","Source Batch Name",
        "Source Prod. Order Line","Reservation Status","Shipment Date","Expected Receipt Date");
      ReservEntry.SETRANGE("Source ID",ID);
      ReservEntry.SETRANGE("Source Ref. No.",RefNo);
      ReservEntry.SETRANGE("Source Type",Type);
      ReservEntry.SETRANGE("Source Subtype",Subtype);
      ReservEntry.SETRANGE("Source Batch Name",BatchName);
      ReservEntry.SETRANGE("Source Prod. Order Line",ProdOrderLine);
    END;

    LOCAL PROCEDURE FilterTrackingEntries@67(VAR TrackingSpec@1002 : Record 336;Type@1008 : Integer;Subtype@1007 : Integer;ID@1006 : Code[20];BatchName@1005 : Code[10];ProdOrderLine@1004 : Integer;RefNo@1003 : Integer);
    BEGIN
      // retrieves a data set of Tracking Specification Entries

      TrackingSpec.SETCURRENTKEY("Source ID","Source Type","Source Subtype","Source Batch Name",
        "Source Prod. Order Line","Source Ref. No.");
      TrackingSpec.SETRANGE("Source ID",ID);
      TrackingSpec.SETRANGE("Source Type",Type);
      TrackingSpec.SETRANGE("Source Subtype",Subtype);
      TrackingSpec.SETRANGE("Source Batch Name",BatchName);
      TrackingSpec.SETRANGE("Source Prod. Order Line",ProdOrderLine);
      TrackingSpec.SETRANGE("Source Ref. No.",RefNo);
    END;

    LOCAL PROCEDURE RetrieveILEFromShptRcpt@61(VAR TempItemLedgEntry@1010 : TEMPORARY Record 32;Type@1009 : Integer;Subtype@1008 : Integer;ID@1007 : Code[20];BatchName@1006 : Code[10];ProdOrderLine@1005 : Integer;RefNo@1004 : Integer);
    VAR
      ItemEntryRelation@1003 : Record 6507;
      ItemLedgEntry@1002 : Record 32;
      SignFactor@1000 : Integer;
    BEGIN
      // retrieves a data set of Item Ledger Entries (Posted Shipments/Receipts)

      ItemEntryRelation.SETCURRENTKEY("Source ID","Source Type");
      ItemEntryRelation.SETRANGE("Source Type",Type);
      ItemEntryRelation.SETRANGE("Source Subtype",Subtype);
      ItemEntryRelation.SETRANGE("Source ID",ID);
      ItemEntryRelation.SETRANGE("Source Batch Name",BatchName);
      ItemEntryRelation.SETRANGE("Source Prod. Order Line",ProdOrderLine);
      ItemEntryRelation.SETRANGE("Source Ref. No.",RefNo);
      IF ItemEntryRelation.FINDSET THEN BEGIN
        SignFactor := TableSignFactor(Type);
        REPEAT
          ItemLedgEntry.GET(ItemEntryRelation."Item Entry No.");
          TempItemLedgEntry := ItemLedgEntry;
          AddTempRecordToSet(TempItemLedgEntry,SignFactor);
        UNTIL ItemEntryRelation.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE RetrieveILEFromPostedInv@63(VAR TempItemLedgEntry@1006 : TEMPORARY Record 32;InvoiceRowID@1000 : Text[250]);
    VAR
      ValueEntryRelation@1005 : Record 6508;
      ValueEntry@1004 : Record 5802;
      ItemLedgEntry@1002 : Record 32;
      SignFactor@1001 : Integer;
    BEGIN
      // retrieves a data set of Item Ledger Entries (Posted Invoices)

      ValueEntryRelation.SETCURRENTKEY("Source RowId");
      ValueEntryRelation.SETRANGE("Source RowId",InvoiceRowID);
      IF ValueEntryRelation.FIND('-') THEN BEGIN
        SignFactor := TableSignFactor2(InvoiceRowID);
        REPEAT
          ValueEntry.GET(ValueEntryRelation."Value Entry No.");
          ItemLedgEntry.GET(ValueEntry."Item Ledger Entry No.");
          TempItemLedgEntry := ItemLedgEntry;
          TempItemLedgEntry.Quantity := ValueEntry."Invoiced Quantity";
          IF TempItemLedgEntry.Quantity <> 0 THEN
            AddTempRecordToSet(TempItemLedgEntry,SignFactor);
        UNTIL ValueEntryRelation.NEXT = 0;
      END;
    END;

    PROCEDURE CopyItemLedgEntryTrkgToSalesLn@70(VAR ItemLedgEntryBuf@1000 : TEMPORARY Record 32;ToSalesLine@1001 : Record 37;FillExactCostRevLink@1015 : Boolean;VAR MissingExCostRevLink@1010 : Boolean;FromPricesInclVAT@1017 : Boolean;ToPricesInclVAT@1009 : Boolean;FromShptOrRcpt@1020 : Boolean);
    VAR
      TempReservEntry@1003 : TEMPORARY Record 337;
      ReservEntry@1004 : Record 337;
      CopyDocMgt@1019 : Codeunit 6620;
      ReservMgt@1007 : Codeunit 99000845;
      ReservEngineMgt@1008 : Codeunit 99000831;
      TotalCostLCY@1006 : Decimal;
      ItemLedgEntryQty@1011 : Decimal;
      LastEntryNo@1005 : Integer;
      SignFactor@1014 : Integer;
      LinkThisEntry@1002 : Boolean;
      EntriesExist@1012 : Boolean;
    BEGIN
      IF (ToSalesLine.Type <> ToSalesLine.Type::Item) OR
         (ToSalesLine.Quantity = 0)
      THEN
        EXIT;

      IF FillExactCostRevLink THEN
        FillExactCostRevLink := NOT ToSalesLine.IsShipment;

      WITH ItemLedgEntryBuf DO
        IF FINDSET THEN BEGIN
          IF Quantity / ToSalesLine.Quantity < 0 THEN
            SignFactor := 1
          ELSE
            SignFactor := -1;
          IF ToSalesLine."Document Type" IN
             [ToSalesLine."Document Type"::"Return Order",ToSalesLine."Document Type"::"Credit Memo"]
          THEN
            SignFactor := -SignFactor;

          IF ReservEntry.FINDLAST THEN
            LastEntryNo := ReservEntry."Entry No.";

          ReservMgt.SetSalesLine(ToSalesLine);
          ReservMgt.DeleteReservEntries(TRUE,0);

          REPEAT
            LinkThisEntry := "Entry No." > 0;
            ReservEntry.INIT;
            ReservEntry."Item No." := "Item No.";
            ReservEntry."Location Code" := "Location Code";
            ReservEntry."Serial No." := "Serial No.";
            ReservEntry."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
            ReservEntry."Lot No." := "Lot No.";
            ReservEntry."Variant Code" := "Variant Code";
            ReservEntry."Source Type" := DATABASE::"Sales Line";
            ReservEntry."Source Subtype" := ToSalesLine."Document Type";
            ReservEntry."Source ID" := ToSalesLine."Document No.";
            ReservEntry."Source Ref. No." := ToSalesLine."Line No.";
            IF ToSalesLine."Document Type" IN
               [ToSalesLine."Document Type"::Order,ToSalesLine."Document Type"::"Return Order"]
            THEN
              ReservEntry."Reservation Status" := ReservEntry."Reservation Status"::Surplus
            ELSE
              ReservEntry."Reservation Status" := ReservEntry."Reservation Status"::Prospect;
            ReservEntry."Quantity Invoiced (Base)" := 0;
            IF FillExactCostRevLink THEN
              ReservEntry.VALIDATE("Quantity (Base)","Shipped Qty. Not Returned" * SignFactor)
            ELSE
              ReservEntry.VALIDATE("Quantity (Base)",Quantity * SignFactor);
            ReservEntry.Positive := (ReservEntry."Quantity (Base)" > 0);
            ReservEntry."Entry No." := LastEntryNo + 1;
            IF ReservEntry.Positive THEN BEGIN
              ReservEntry."Warranty Date" := "Warranty Date";
              ReservEntry."Expiration Date" :=
                ExistingExpirationDate("Item No.","Variant Code","Lot No.","Serial No.",FALSE,EntriesExist);
              ReservEntry."Expected Receipt Date" := ToSalesLine."Shipment Date"
            END ELSE
              ReservEntry."Shipment Date" := ToSalesLine."Shipment Date";

            IF FillExactCostRevLink THEN BEGIN
              IF LinkThisEntry THEN BEGIN
                ReservEntry."Appl.-from Item Entry" := "Entry No.";
                IF NOT MissingExCostRevLink THEN BEGIN
                  CALCFIELDS("Cost Amount (Actual)","Cost Amount (Expected)");
                  TotalCostLCY :=
                    TotalCostLCY + "Cost Amount (Expected)" + "Cost Amount (Actual)";
                  ItemLedgEntryQty := ItemLedgEntryQty - Quantity;
                END;
              END ELSE
                MissingExCostRevLink := TRUE;
            END;

            ReservEntry.Description := ToSalesLine.Description;
            ReservEntry."Creation Date" := WORKDATE;
            ReservEntry."Created By" := USERID;
            ReservEntry.UpdateItemTracking;
            ReservEntry.INSERT;
            TempReservEntry := ReservEntry;
            TempReservEntry.INSERT;
            LastEntryNo := ReservEntry."Entry No.";
          UNTIL NEXT = 0;
          ReservEngineMgt.UpdateOrderTracking(TempReservEntry);

          IF FillExactCostRevLink AND NOT MissingExCostRevLink THEN BEGIN
            ToSalesLine.VALIDATE(
              "Unit Cost (LCY)",
              ABS(TotalCostLCY / ItemLedgEntryQty) * ToSalesLine."Qty. per Unit of Measure");
            IF NOT FromShptOrRcpt THEN BEGIN
              CopyDocMgt.CalculateRevSalesLineAmount(
                ToSalesLine,ItemLedgEntryQty,FromPricesInclVAT,ToPricesInclVAT);
            END;
            ToSalesLine.MODIFY;
          END;
        END;
    END;

    PROCEDURE CopyItemLedgEntryTrkgToPurchLn@71(VAR ItemLedgEntryBuf@1000 : Record 32;ToPurchLine@1001 : Record 39;FillExactCostRevLink@1015 : Boolean;VAR MissingExCostRevLink@1010 : Boolean;FromPricesInclVAT@1017 : Boolean;ToPricesInclVAT@1013 : Boolean;FromShptOrRcpt@1018 : Boolean);
    VAR
      ReservEntry@1004 : Record 337;
      CopyDocMgt@1011 : Codeunit 6620;
      ReservMgt@1007 : Codeunit 99000845;
      TotalCostLCY@1006 : Decimal;
      ItemLedgEntryQty@1002 : Decimal;
      LastEntryNo@1005 : Integer;
      SignFactor@1003 : Integer;
      LinkThisEntry@1009 : Boolean;
      EntriesExist@1008 : Boolean;
    BEGIN
      IF (ToPurchLine.Type <> ToPurchLine.Type::Item) OR
         (ToPurchLine.Quantity = 0)
      THEN
        EXIT;

      IF FillExactCostRevLink THEN
        FillExactCostRevLink := ToPurchLine.Signed(ToPurchLine."Quantity (Base)") < 0;

      IF FillExactCostRevLink THEN
        IF ToPurchLine."Document Type" IN
           [ToPurchLine."Document Type"::Invoice,ToPurchLine."Document Type"::"Credit Memo"]
        THEN BEGIN
          FillExactCostRevLink := FALSE;
          MissingExCostRevLink := TRUE;
        END;

      WITH ItemLedgEntryBuf DO
        IF FINDSET THEN BEGIN
          IF Quantity / ToPurchLine.Quantity > 0 THEN
            SignFactor := 1
          ELSE
            SignFactor := -1;

          IF ReservEntry.FINDLAST THEN
            LastEntryNo := ReservEntry."Entry No.";

          IF ToPurchLine."Expected Receipt Date" = 0D THEN
            ToPurchLine."Expected Receipt Date" := WORKDATE;
          ToPurchLine."Outstanding Qty. (Base)" := ToPurchLine."Quantity (Base)";
          ReservMgt.SetPurchLine(ToPurchLine);
          ReservMgt.DeleteReservEntries(TRUE,0);

          REPEAT
            LinkThisEntry := "Entry No." > 0;
            ReservEntry.INIT;
            ReservEntry."Item No." := "Item No.";
            ReservEntry."Location Code" := "Location Code";
            ReservEntry."Serial No." := "Serial No.";
            ReservEntry."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
            ReservEntry."Lot No." := "Lot No.";
            ReservEntry."Variant Code" := "Variant Code";
            ReservEntry."Source Type" := DATABASE::"Purchase Line";
            ReservEntry."Source Subtype" := ToPurchLine."Document Type";
            ReservEntry."Source ID" := ToPurchLine."Document No.";
            ReservEntry."Source Ref. No." := ToPurchLine."Line No.";
            IF ToPurchLine."Document Type" IN
               [ToPurchLine."Document Type"::Order,ToPurchLine."Document Type"::"Return Order"]
            THEN
              ReservEntry."Reservation Status" := ReservEntry."Reservation Status"::Surplus
            ELSE
              ReservEntry."Reservation Status" := ReservEntry."Reservation Status"::Prospect;
            ReservEntry."Quantity Invoiced (Base)" := 0;
            IF LinkThisEntry THEN
              "Remaining Quantity" := Quantity;
            IF ToPurchLine."Document Type" IN
               [ToPurchLine."Document Type"::"Return Order",ToPurchLine."Document Type"::"Credit Memo"]
            THEN
              ReservEntry.VALIDATE("Quantity (Base)","Remaining Quantity" * -SignFactor)
            ELSE
              ReservEntry.VALIDATE("Quantity (Base)","Remaining Quantity" * SignFactor);
            ReservEntry.Positive := (ReservEntry."Quantity (Base)" > 0);
            ReservEntry."Entry No." := LastEntryNo + 1;
            IF ReservEntry.Positive THEN BEGIN
              ReservEntry."Warranty Date" := "Warranty Date";
              ReservEntry."Expiration Date" :=
                ExistingExpirationDate("Item No.","Variant Code","Lot No.","Serial No.",FALSE,EntriesExist);
              ReservEntry."Expected Receipt Date" := ToPurchLine."Expected Receipt Date"
            END ELSE
              ReservEntry."Shipment Date" := ToPurchLine."Expected Receipt Date";

            IF FillExactCostRevLink THEN BEGIN
              IF LinkThisEntry THEN BEGIN
                IF NOT MissingExCostRevLink THEN BEGIN
                  CALCFIELDS("Cost Amount (Actual)","Cost Amount (Expected)");
                  TotalCostLCY :=
                    TotalCostLCY + "Cost Amount (Expected)" + "Cost Amount (Actual)";
                  ItemLedgEntryQty := ItemLedgEntryQty - Quantity;
                END;
              END ELSE
                MissingExCostRevLink := TRUE;
            END;

            ReservEntry.Description := ToPurchLine.Description;
            ReservEntry."Creation Date" := WORKDATE;
            ReservEntry."Created By" := USERID;
            ReservEntry.UpdateItemTracking;
            ReservEntry.INSERT;
            LastEntryNo := ReservEntry."Entry No.";

            IF FillExactCostRevLink AND NOT LinkThisEntry THEN
              MissingExCostRevLink := TRUE;
          UNTIL NEXT = 0;

          IF FillExactCostRevLink AND NOT MissingExCostRevLink THEN BEGIN
            ToPurchLine.VALIDATE(
              "Unit Cost (LCY)",
              ABS(TotalCostLCY / ItemLedgEntryQty) * ToPurchLine."Qty. per Unit of Measure");
            IF NOT FromShptOrRcpt THEN BEGIN
              CopyDocMgt.CalculateRevPurchLineAmount(
                ToPurchLine,ItemLedgEntryQty,FromPricesInclVAT,ToPricesInclVAT);
            END;
            ToPurchLine.MODIFY;
          END;
        END;
    END;

    PROCEDURE CollectItemTrkgPerPstdDocLine@72(VAR TempItemLedgEntry@1000 : TEMPORARY Record 32;VAR ItemLedgEntry@1003 : Record 32);
    BEGIN
      TempItemLedgEntry.RESET;
      TempItemLedgEntry.DELETEALL;

      IF ItemLedgEntry.FINDSET THEN
        REPEAT
          TempItemLedgEntry := ItemLedgEntry;
          AddTempRecordToSet(TempItemLedgEntry,1);
        UNTIL ItemLedgEntry.NEXT = 0;

      TempItemLedgEntry.RESET;
    END;

    PROCEDURE SynchronizeWhseActivItemTrkg@74(WhseActivLine@1000 : Record 5767);
    VAR
      TempTrackingSpec@1002 : TEMPORARY Record 336;
      TempReservEntry@1005 : TEMPORARY Record 337;
      ReservEntry@1008 : Record 337;
      ItemTrackingMgt@1007 : Codeunit 6500;
      ReservMgt@1009 : Codeunit 99000845;
      SignFactor@1001 : Integer;
      ToRowID@1006 : Text[250];
      IsTransferReceipt@1012 : Boolean;
    BEGIN
      // Used for carrying the item tracking from the invt. pick/put-away to the parent line.
      WITH WhseActivLine DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
        SETRANGE("Source Type","Source Type");
        SETRANGE("Source Subtype","Source Subtype");
        SETRANGE("Source No.","Source No.");
        SETRANGE("Source Line No.","Source Line No.");
        SETRANGE("Source Subline No.","Source Subline No.");
        SETRANGE("Source Document","Source Document");
        IF FINDSET THEN BEGIN
          // Transfer receipt needs special treatment:
          IsTransferReceipt := ("Source Type" = DATABASE::"Transfer Line") AND ("Source Subtype" = 1);
          IF ("Source Type" IN [DATABASE::"Prod. Order Line",DATABASE::"Prod. Order Component"]) OR IsTransferReceipt THEN
            ToRowID :=
              ItemTrackingMgt.ComposeRowID(
                "Source Type","Source Subtype","Source No.",'',"Source Line No.","Source Subline No.")
          ELSE
            ToRowID :=
              ItemTrackingMgt.ComposeRowID(
                "Source Type","Source Subtype","Source No.",'',"Source Subline No.","Source Line No.");
          TempReservEntry.SetPointer(ToRowID);
          SignFactor := WhseActivitySignFactor(WhseActivLine);
          REPEAT
            IF ("Serial No." <> '') OR ("Lot No." <> '') THEN BEGIN
              TempReservEntry."Entry No." += 1;
              IF SignFactor > 0 THEN
                TempReservEntry.Positive := TRUE
              ELSE
                TempReservEntry.Positive := FALSE;
              TempReservEntry."Item No." := "Item No.";
              TempReservEntry."Location Code" := "Location Code";
              TempReservEntry.Description := Description;
              TempReservEntry."Variant Code" := "Variant Code";
              TempReservEntry."Quantity (Base)" := "Qty. Outstanding (Base)" * SignFactor;
              TempReservEntry.Quantity := "Qty. Outstanding" * SignFactor;
              TempReservEntry."Qty. to Handle (Base)" := "Qty. to Handle (Base)" * SignFactor;
              TempReservEntry."Qty. to Invoice (Base)" := "Qty. to Handle (Base)" * SignFactor;
              TempReservEntry."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
              TempReservEntry."Lot No." := "Lot No.";
              TempReservEntry."Serial No." := "Serial No.";
              TempReservEntry."Expiration Date" := "Expiration Date";
              TempReservEntry.INSERT;
            END;
          UNTIL NEXT = 0;

          IF TempReservEntry.ISEMPTY THEN
            EXIT;
        END;
      END;

      SumUpItemTracking(TempReservEntry,TempTrackingSpec,FALSE,TRUE);
      IF NOT IsTransferReceipt THEN // Item Tracking on transfer receipt cannot be changed
        SynchronizeItemTracking2(TempReservEntry,ToRowID,'');
      ReservEntry.SetPointer(ToRowID);
      ReservMgt.SetPointerFilter(ReservEntry);

      IF IsTransferReceipt THEN
        ReservEntry.SETRANGE("Source Ref. No.");

      IF ReservEntry.FINDSET THEN BEGIN
        REPEAT
          TempTrackingSpec.SETRANGE("Lot No.",ReservEntry."Lot No.");
          TempTrackingSpec.SETRANGE("Serial No.",ReservEntry."Serial No.");
          IF TempTrackingSpec.FINDFIRST THEN BEGIN
            IF ABS(TempTrackingSpec."Qty. to Handle (Base)") > ABS(ReservEntry."Quantity (Base)") THEN
              ReservEntry.VALIDATE("Qty. to Handle (Base)",ReservEntry."Quantity (Base)")
            ELSE
              ReservEntry.VALIDATE("Qty. to Handle (Base)",TempTrackingSpec."Qty. to Handle (Base)");

            IF ABS(TempTrackingSpec."Qty. to Invoice (Base)") > ABS(ReservEntry."Quantity (Base)") THEN
              ReservEntry.VALIDATE("Qty. to Invoice (Base)",ReservEntry."Quantity (Base)")
            ELSE
              ReservEntry.VALIDATE("Qty. to Invoice (Base)",TempTrackingSpec."Qty. to Invoice (Base)");

            TempTrackingSpec."Qty. to Handle (Base)" -= ReservEntry."Qty. to Handle (Base)";
            TempTrackingSpec."Qty. to Invoice (Base)" -= ReservEntry."Qty. to Invoice (Base)";
            TempTrackingSpec.MODIFY;

            WITH WhseActivLine DO BEGIN
              RESET;
              SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
              SETRANGE("Source Type","Source Type");
              SETRANGE("Source Subtype","Source Subtype");
              SETRANGE("Source No.","Source No.");
              SETRANGE("Source Line No.","Source Line No.");
              SETRANGE("Source Subline No.","Source Subline No.");
              SETRANGE("Source Document","Source Document");
              SETRANGE("Lot No.",ReservEntry."Lot No.");
              SETRANGE("Serial No.",ReservEntry."Serial No.");
              IF FINDFIRST THEN
                ReservEntry."Expiration Date" := "Expiration Date";
            END;

            ReservEntry.MODIFY;
          END ELSE BEGIN
            IF IsTransferReceipt THEN BEGIN
              ReservEntry.VALIDATE("Qty. to Handle (Base)",0);
              ReservEntry.VALIDATE("Qty. to Invoice (Base)",0);
              ReservEntry.MODIFY;
            END;
          END;
        UNTIL ReservEntry.NEXT = 0;
      END;

      TempTrackingSpec.RESET;
      TempTrackingSpec.CALCSUMS("Qty. to Handle (Base)","Qty. to Invoice (Base)");
      IF (TempTrackingSpec."Qty. to Handle (Base)" <> 0) OR (TempTrackingSpec."Qty. to Invoice (Base)" <> 0) THEN
        ERROR(Text002);
    END;

    PROCEDURE WhseActivitySignFactor@1102601000(WhseActivityLine@1102601000 : Record 5767) : Integer;
    BEGIN
      IF WhseActivityLine."Activity Type" = WhseActivityLine."Activity Type"::"Invt. Pick" THEN
        EXIT(-1);

      IF WhseActivityLine."Activity Type" = WhseActivityLine."Activity Type"::"Invt. Put-away" THEN
        EXIT(1);

      ERROR(Text011,WhseActivityLine.FIELDCAPTION("Activity Type"),WhseActivityLine."Activity Type");
    END;

    PROCEDURE RetrieveAppliedExpirationDate@77(VAR TempItemLedgEntry@1000 : TEMPORARY Record 32);
    VAR
      ItemLedgEntry@1002 : Record 32;
      ItemApplnEntry@1001 : Record 339;
    BEGIN
      WITH TempItemLedgEntry DO BEGIN
        IF Positive THEN
          EXIT;

        ItemApplnEntry.RESET;
        ItemApplnEntry.SETCURRENTKEY("Outbound Item Entry No.","Item Ledger Entry No.","Cost Application");
        ItemApplnEntry.SETRANGE("Outbound Item Entry No.","Entry No.");
        ItemApplnEntry.SETRANGE("Item Ledger Entry No.","Entry No.");
        IF ItemApplnEntry.FINDFIRST THEN BEGIN
          ItemLedgEntry.GET(ItemApplnEntry."Inbound Item Entry No.");
          "Expiration Date" := ItemLedgEntry."Expiration Date";
        END;
      END;
    END;

    PROCEDURE ItemTrkgQtyPostedOnSource@78(SourceTrackingSpec@1001 : Record 336) Qty : Decimal;
    VAR
      TrackingSpecification@1000 : Record 336;
      ReservEntry@1002 : Record 337;
    BEGIN
      WITH SourceTrackingSpec DO BEGIN
        TrackingSpecification.SETCURRENTKEY(
          "Source ID","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line","Source Ref. No.");

        TrackingSpecification.SETRANGE("Source ID","Source ID");
        TrackingSpecification.SETRANGE("Source Type","Source Type");
        TrackingSpecification.SETRANGE("Source Subtype","Source Subtype");
        TrackingSpecification.SETRANGE("Source Batch Name","Source Batch Name");
        TrackingSpecification.SETRANGE("Source Prod. Order Line","Source Prod. Order Line");
        TrackingSpecification.SETRANGE("Source Ref. No.","Source Ref. No.");
        IF NOT TrackingSpecification.ISEMPTY THEN BEGIN
          TrackingSpecification.FINDSET;
          REPEAT
            Qty += TrackingSpecification."Quantity (Base)";
          UNTIL TrackingSpecification.NEXT = 0;
        END;

        ReservEntry.SETRANGE("Source ID","Source ID");
        ReservEntry.SETRANGE("Source Ref. No.","Source Ref. No.");
        ReservEntry.SETRANGE("Source Type","Source Type");
        ReservEntry.SETRANGE("Source Subtype","Source Subtype");
        ReservEntry.SETRANGE("Source Batch Name",'');
        ReservEntry.SETRANGE("Source Prod. Order Line","Source Prod. Order Line");
        IF NOT ReservEntry.ISEMPTY THEN BEGIN
          ReservEntry.FINDSET;
          REPEAT
            Qty += ReservEntry."Qty. to Handle (Base)";
          UNTIL ReservEntry.NEXT = 0;

        END;
      END;
    END;

    PROCEDURE SynchronizeItemTrkgTransfer@88(VAR ToReservEntry@1000 : Record 337);
    VAR
      FromReservEntry@1001 : Record 337;
    BEGIN
      FromReservEntry.COPY(ToReservEntry);
      FromReservEntry.SETRANGE("Source Subtype",0);
      IF ToReservEntry.FINDSET(TRUE) THEN
        REPEAT
          FromReservEntry.SETRANGE("Lot No.",ToReservEntry."Lot No.");
          FromReservEntry.SETRANGE("Serial No.",ToReservEntry."Serial No.");
          IF FromReservEntry.FINDFIRST THEN
            IF ABS(FromReservEntry."Qty. to Handle (Base)") <> ABS(ToReservEntry."Qty. to Handle (Base)") THEN BEGIN
              ToReservEntry."Qty. to Handle (Base)" := -FromReservEntry."Qty. to Handle (Base)";
              ToReservEntry."Qty. to Invoice (Base)" := -FromReservEntry."Qty. to Invoice (Base)";
              ToReservEntry.MODIFY;
            END;
        UNTIL ToReservEntry.NEXT = 0;
    END;

    PROCEDURE InitCollectItemTrkgInformation@87();
    BEGIN
      TempGlobalWhseItemTrkgLine.DELETEALL;
    END;

    PROCEDURE CollectItemTrkgInfWhseJnlLine@86(WhseJnlLine@1000 : Record 7311);
    VAR
      WhseItemTrkgLinLocal@1001 : Record 6550;
    BEGIN
      CLEAR(WhseItemTrkgLinLocal);
      WhseItemTrkgLinLocal.SETCURRENTKEY(
        "Source ID",
        "Source Type",
        "Source Subtype",
        "Source Batch Name",
        "Source Prod. Order Line",
        "Source Ref. No.",
        "Location Code");
      WhseItemTrkgLinLocal.SETRANGE("Source ID",WhseJnlLine."Journal Batch Name");
      WhseItemTrkgLinLocal.SETRANGE("Source Type",DATABASE::"Warehouse Journal Line");
      WhseItemTrkgLinLocal.SETRANGE("Source Batch Name",WhseJnlLine."Journal Template Name");
      WhseItemTrkgLinLocal.SETRANGE("Source Ref. No.",WhseJnlLine."Line No.");
      WhseItemTrkgLinLocal.SETRANGE("Location Code",WhseJnlLine."Location Code");
      WhseItemTrkgLinLocal.SETRANGE("Item No.",WhseJnlLine."Item No.");
      WhseItemTrkgLinLocal.SETRANGE("Variant Code",WhseJnlLine."Variant Code");
      WhseItemTrkgLinLocal.SETRANGE("Qty. per Unit of Measure",WhseJnlLine."Qty. per Unit of Measure");

      IF WhseItemTrkgLinLocal.FINDSET THEN
        REPEAT
          CLEAR(TempGlobalWhseItemTrkgLine);
          TempGlobalWhseItemTrkgLine := WhseItemTrkgLinLocal;
          IF TempGlobalWhseItemTrkgLine.INSERT THEN;
        UNTIL WhseItemTrkgLinLocal.NEXT = 0;
    END;

    PROCEDURE CheckItemTrkgInfBeforePost@89();
    VAR
      TempItemLotInfo@1000 : TEMPORARY Record 6505;
      CheckExpDate@1001 : Date;
      ErrorFound@1002 : Boolean;
      EndLoop@1003 : Boolean;
      ErrMsgTxt@1004 : Text[160];
    BEGIN
      // Check for different expiration dates within one Lot no.
      IF TempGlobalWhseItemTrkgLine.FIND('-') THEN BEGIN
        TempItemLotInfo.DELETEALL;
        REPEAT
          IF TempGlobalWhseItemTrkgLine."New Lot No." <> '' THEN BEGIN
            CLEAR(TempItemLotInfo);
            TempItemLotInfo."Item No." := TempGlobalWhseItemTrkgLine."Item No.";
            TempItemLotInfo."Variant Code" := TempGlobalWhseItemTrkgLine."Variant Code";
            TempItemLotInfo."Lot No." := TempGlobalWhseItemTrkgLine."New Lot No.";
            IF TempItemLotInfo.INSERT THEN;
          END;
        UNTIL TempGlobalWhseItemTrkgLine.NEXT = 0;

        IF TempItemLotInfo.FIND('-') THEN
          REPEAT
            ErrorFound := FALSE;
            EndLoop := FALSE;
            IF TempGlobalWhseItemTrkgLine.FIND('-') THEN BEGIN
              CheckExpDate := 0D;
              REPEAT
                IF (TempGlobalWhseItemTrkgLine."Item No." = TempItemLotInfo."Item No.") AND
                   (TempGlobalWhseItemTrkgLine."Variant Code" = TempItemLotInfo."Variant Code") AND
                   (TempGlobalWhseItemTrkgLine."New Lot No." = TempItemLotInfo."Lot No.")
                THEN BEGIN
                  IF CheckExpDate = 0D THEN
                    CheckExpDate := TempGlobalWhseItemTrkgLine."New Expiration Date"
                  ELSE
                    IF TempGlobalWhseItemTrkgLine."New Expiration Date" <> CheckExpDate THEN BEGIN
                      ErrorFound := TRUE;
                      ErrMsgTxt :=
                        STRSUBSTNO(Text012,
                          TempGlobalWhseItemTrkgLine."Lot No.",
                          TempGlobalWhseItemTrkgLine."New Expiration Date",
                          CheckExpDate);
                    END;
                END;
                IF NOT ErrorFound THEN
                  IF TempGlobalWhseItemTrkgLine.NEXT = 0 THEN
                    EndLoop := TRUE;
              UNTIL EndLoop OR ErrorFound;
            END;
          UNTIL (TempItemLotInfo.NEXT = 0) OR ErrorFound;
        IF ErrorFound THEN
          ERROR(ErrMsgTxt);
      END;
    END;

    PROCEDURE SetPick@90(IsPick2@1000 : Boolean);
    BEGIN
      IsPick := IsPick2;
    END;

    BEGIN
    END.
  }
}
