OBJECT Codeunit 7009737 Facturar ingresos transfer
{
  OBJECT-PROPERTIES
  {
    Date=09/07/15;
    Time=12:37:08;
    Modified=Yes;
    Version List=AIC2009,COM;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1103355044 : TextConst 'ENU=&Proforma invoice,&Proforma invoice all,&Invoice;ESP=&Prefacturar,&Prefacturar todo,&Facturar';
      Text001@1103355045 : TextConst 'ENU=&Create proforma invoice,&Reprint;ESP=&Crear prefactura,&Reimprimir';
      Text002@1103355046 : TextConst 'ENU=PROFORMA INVOICE TO PRINT;ESP=PREFACTURA A IMPRIMIR';
      Text003@1103355047 : TextConst 'ENU=TRNI;ESP=TRNI';
      Text004@1103355048 : TextConst 'ENU=Service %1 of date %2 is already invoiced.;ESP=La agrupacion %1 de fecha %2 esta facturada.';
      Text005@1103355049 : TextConst 'ENU=Unable to proforma invoice if total amount is 0;ESP=No se puede prefacturar si el importe total es 0.';
      Text006@1103355050 : TextConst 'ENU=TOTAL PROFORMA INVOICE IS NULL, MARK AS INVOICED;ESP=EL TOTAL DE LA PREFACTURA ES CERO, DESEA MARCAR COMO FACTURADO';
      Text007@1103355051 : TextConst 'ENU=INVOICERO;ESP=FACTURACERO';
      Text008@1103355052 : TextConst 'ENU=PROFOR;ESP=PREFAC';
      Text010@1103355054 : TextConst 'ENU=PROFORMA TO INVOICE;ESP=PREFACTURA A FACTURAR';
      Text011@1103355055 : TextConst 'ENU=Would you like to invoice the proforma no.;ESP=Desea facturar la prefactura n§';
      Text012@1103355056 : TextConst 'ENU=Transfers;ESP=Traslados de';
      Text013@1103355057 : TextConst 'ENU=from;ESP=desde';
      Text014@1103355058 : TextConst 'ENU=to;ESP=hasta';
      Text015@1103355059 : TextConst 'ENU=GENERATING TRANSFER SALE INVOICE\;ESP=GENERANDO FACTURA DE VENTA TRANSFER\';
      Text016@1103355060 : TextConst 'ENU=INVOICE NO.: #1########\;ESP=N§ FACTURA: #1########\';
      Text017@1103355061 : TextConst 'ENU=LINE NO..: #2########;ESP=N§ LINEA..: #2########';
      Text018@1103355062 : TextConst 'ENU=Sales and receivables configuration file does not exist;ESP=No existe el fichero de configuraci¢n de ventas y cobros';
      Text021@1103355065 : TextConst 'ENU=Must set transfer sale invoice in agency parameters;ESP=Tiene que definir la factura de venta transfer en par metros agencia';
      Text022@1103355066 : TextConst 'ENU=TRNC;ESP=TRNC';
      Text023@1103355067 : TextConst 'ENU=IBR Inv. #1########, Pro. #2######################;ESP=FPR Fra. #1########, Pro. #2######################';
      Text025@1103355069 : TextConst 'ENU=%1-IBR;ESP=%1-FPR';
      Text028@1103355072 : TextConst 'ENU=Credit memo;ESP=Abono';
      Text031@1103355075 : TextConst 'ENU=INV-;ESP=FRA-';
      Text032@1103355076 : TextConst 'ENU=Transfer;ESP=Transfer';
      Text035@1103355079 : TextConst 'ENU=Accounts setup for Touroperator %1 does not exist \;ESP=No existe configuraci¢n de Cuentas para el Touroperador %1';
      Text036@1103355080 : TextConst 'ENU=in Destination %2.;ESP=en la Delegacion %2.';
      Text037@1103355081 : TextConst 'ENU=Transfer Ledger entries in destination;ESP=Asientos de Transfer en delegacion';
      Text041@1103355085 : TextConst 'ENU=Touroperator %1 does not exist;ESP=No existe el Touroperador %1.';
      Text042@1103355086 : TextConst 'ENU=Supplier posting group %1 does not exist;ESP=No existe el Grupo contable proveedor %1.';
      Text043@1103355087 : TextConst 'ENU=Supplier %1 does not exist;ESP=No existe el proveedor %1';
      Text044@1103355088 : TextConst 'ENU=Carrier %1 does not exist;ESP=No existe el transportista %1';
      Text046@1103355090 : TextConst 'ENU=PROFORME TO BE UNDONE;ESP=PREFACTURA A DESHACER';
      Text047@1103355091 : TextConst 'ENU=Hotel;ESP=Hotel';
      Text048@1103355092 : TextConst 'ENU=PERSON_GOC;ESP=PERSONA_GOC';
      Text049@1103355093 : TextConst 'ENU=PERSON;ESP=PERSONA';
      Text050@1103355094 : TextConst 'ENU=#1############################ AD: #2# NI: #3#;ESP=#1############################ AD: #2# NI: #3#';
      Text051@1103355095 : TextConst 'ENU=Location;ESP=Zona';
      importe_linea_circuito@1103355000 : Decimal;
      importe_linea@1103355001 : Decimal;
      ant_precio_pax@1103355002 : Decimal;
      ant_precio_vehiculo@1103355003 : Decimal;
      ant_fecha@1103355004 : Date;
      ant_zona@1103355005 : Code[25];
      opcion@1103355007 : Integer;
      cantidad_linea@1103355008 : Integer;
      vehiculos_linea@1103355009 : Integer;
      numero_asiento@1103355010 : Integer;
      ventana@1103355011 : Dialog;
      aux_touroperador@1103355012 : Code[10];
      aux_fecha_desde@1103355013 : Date;
      aux_fecha_hasta@1103355014 : Date;
      proxima_prefactura@1103355015 : Code[10];
      prefactura_impresion@1103355016 : Code[10];
      prefactura_deshacer@1103355017 : Code[10];
      prefactura_facturar@1103355018 : Code[10];
      ant_tipo_pax@1103355019 : Code[10];
      ant_tipo_vehiculo@1103355020 : Code[10];
      ok@1103355024 : Boolean;
      ant_si_abono@1103355042 : Boolean;
      rLin@1103355025 : Record 7009805;
      rConV@1103355026 : Record 7009788;
      rCli@1103355027 : Record 18;
      rLinFra@1103355029 : Record 37;
      rLinFra2@1103355030 : Record 37;
      rPar@1103355031 : Record 7009700;
      rCtas@1103355033 : Record 7009705;
      rSeccion@1103355034 : Record 232;
      rProv@1103355038 : Record 23;
      rGrup@1103355039 : Record 93;
      rSerie@1103355040 : Record 7009921;
      rDatosIns@1100217003 : Record 7009768;
      cNom@1103355041 : Codeunit 7009702;
      cPrefacAgrup@1103355097 : Codeunit 7009905;
      Text052@1103355098 : TextConst 'ENU=Final date belongs to month %1 and current month is %2.\Continue and use the serial %2?;ESP=La fecha final pertenece al mes de %1 y el mes de trabajo es el %2.\¨Desea continuar y usar la serie de %2?';
      Text053@1100253000 : TextConst 'ENU=Confirmed sale contract for touroperator % in the day %2;ESP=No existe contrato de venta confirmado para el touroperador % en el dia %2.';
      cFunSeg@1100217000 : Codeunit 7009751;
      cCalculo@1100217001 : Codeunit 7009734;
      Signo@1100253001 : Integer;
      wLineaFactura@1100253004 : Integer;
      wDiarioGeneral@1100217002 : Code[10];
      rAgrTMP@1100217004 : TEMPORARY Record 7009796;
      rProvTMP@1100217005 : TEMPORARY Record 23;
      Text0012@1100217007 : TextConst 'ENU=INVOICERO;ESP=FACTURACERO';
      Text0013@1100217006 : TextConst 'ENU=Total of proforma is 0./Would you like to mark it as invoiced?;ESP=El total de la prefactura es 0./¨Desea marcarla como facturada?';
      Text0014@1000000000 : TextConst 'ENU=TRANSFER PROFORMA;ESP=PREFACTURAS TRANSFER';
      Text0015@1000000001 : TextConst 'ENU=OFFSHORE PURCHASE DOCUMENT;ESP=DOCS. COMPRA COMERCIALIZADORA';

    PROCEDURE menu_facturar_transfer@1(VAR par_rLin@1103355000 : Record 7009805);
    VAR
      rLin@1103355001 : Record 7009805;
    BEGIN
      cFunSeg.TienePermiso('TRF-FAC-AGR', TRUE); //$007

      rDatosIns.FINDFIRST;

      rLin.COPY(par_rLin);
      IF rLin."N§ Prefactura" <> '' THEN
      BEGIN
        //-$024opcion := STRMENU(Text000, 3)

        //+$024 <
        _facturar_transfer(rLin);
        EXIT;
        //+$024 >
      END
      ELSE
        opcion := STRMENU(Text000, 1);

      CASE opcion OF
        0: EXIT;
        //-$0241: _prefacturar_transfer(rLin);
        1: _crear_prefactura(rLin); //+$024
        2: cPrefacAgrup.AgruparIngresosPrefacturar(rLin); // AJF 24/03/10
        3: _facturar_transfer(rLin);
      END;
    END;

    LOCAL PROCEDURE _prefacturar_transfer@4(VAR par_rLin@1103355000 : Record 7009805);
    VAR
      rCond@1103355001 : Record 7010085;
      rLin@1103355002 : Record 7009805;
    BEGIN
      // _prefacturar_transfer

      rLin.COPY(par_rLin);

      opcion := STRMENU(Text001, 1);
      CASE opcion OF
        0, 3: EXIT;
        1: _crear_prefactura(rLin);
        2:
        BEGIN
          IF NOT rCond.GET(USERID()) THEN BEGIN
            rCond.INIT;
            rCond.Usuario := USERID();
            rCond.INSERT;
          END;
          rCond.INIT;
          rCond.Usuario         := USERID();
          rCond."N§ Prefactura" := rLin."N§ Prefactura";
          rCond.Correcto        := FALSE;
          rCond.Texto           := Text002;
          rCond.MODIFY;
          rCond.SETRANGE(Usuario, USERID());
          COMMIT;
          FORM.RUNMODAL(FORM::"Ficha Condicion Prefactura", rCond);
          rCond.GET(USERID);
          prefactura_impresion := rCond."N§ Prefactura";
          IF (prefactura_impresion = '') OR NOT rCond.Correcto THEN
            EXIT;
          reimprimir_prefactura(prefactura_impresion);
        END;
      END;
    END;

    LOCAL PROCEDURE _crear_prefactura@7(VAR par_linea@1103355000 : Record 7009805);
    VAR
      rCond@1103355001 : Record 7010087;
      lwImporteTotal@1103355003 : Decimal;
      texto_confirm@1103355002 : Text[250];
    BEGIN
      // _crear_prefactura

      IF NOT rCond.GET(USERID()) THEN BEGIN
        rCond.INIT;
        rCond.Usuario := USERID();
        rCond.INSERT;
      END;

      // Buscar la primera y ultima fecha en las lineas filtradas

      aux_fecha_desde  := par_linea.GETRANGEMIN(Fecha);
      aux_fecha_hasta  := par_linea.GETRANGEMAX(Fecha);

      // Pedir los datos al usuario

      rCond.INIT;
      rCond.Usuario := USERID();
      rCond.Delegacion   := rPar.Delegacion;
      rCond.Touroperador := par_linea.TourOperador;
      rCond."Fecha desde":= aux_fecha_desde;
      rCond."Fecha hasta":= aux_fecha_hasta;
      rCond.Correcto     := FALSE;

      // AJS 23.10.2003
      // Se incluye la posibilidad de filtrar por aeropuerto

      rCond.Origen       := par_linea."Origen/Destino transfer";

      // AJS 14.03.2007
      // Posibilitar facturar un codigo de suplemento por separado

      rCond."Cod. Suplemento" := '';

      rCond.MODIFY;
      rCond.SETRECFILTER;
      COMMIT;

      FORM.RUNMODAL(FORM::"Condiciones Prefactura Transfe", rCond);
      rCond.GET(USERID);

      IF NOT rCond.Correcto THEN
        EXIT;

      aux_touroperador := rCond.Touroperador;
      aux_fecha_desde  := rCond."Fecha desde";
      aux_fecha_hasta  := rCond."Fecha hasta";

      IF (aux_touroperador = '') OR (aux_fecha_desde = 0D) THEN
        EXIT;

      IF aux_fecha_hasta = 0D THEN
        aux_fecha_hasta := aux_fecha_desde;

      proxima_prefactura := busca_ultima_prefactura;

      rLin.RESET;
      rLin.SETCURRENTKEY(Concepto,
                         TourOperador,
                         Fecha,
                         "Origen/Destino transfer",
                         "N§ Prefactura");
      rLin.SETRANGE(Concepto       , Text003);
      rLin.SETRANGE(TourOperador   , aux_touroperador);
      rLin.SETRANGE(Fecha          , aux_fecha_desde, aux_fecha_hasta);
      rLin.SETRANGE("N§ Prefactura", '');

      // AJS 23.10.2003
      // Si se ha indicado un aeropuerto se filtran solo las lineas de ese aeropuerto

      IF rCond.Origen <> '' THEN
        rLin.SETRANGE("Origen/Destino transfer", rCond.Origen);

      // AJS 14.03.2007
      // Si se ha indicado un suplemento se facturaran solo las lineas de ese suplemento

      IF rCond."Cod. Suplemento" <> '' THEN BEGIN
        rLin.SETRANGE("Tipo linea", rLin."Tipo linea"::Suplemento);
        rLin.SETRANGE("Tipo Pax"     , rCond."Cod. Suplemento");
      END;

      // Comprobar si alguna linea esta facturada

      IF rLin.FINDSET THEN BEGIN
        REPEAT
          IF rLin."N§ Factura" <> '' THEN
            ERROR(Text004, rLin.Agrupacion, rLin.Fecha);
        UNTIL rLin.NEXT = 0;
      END;

      // Grabamos el n§ de Prefactura en las lineas

      IF rLin.FINDSET(TRUE) THEN
      BEGIN

        // AJS 14.03.2007
        // Totalizar las lineas con una funcion, porque al incluir mas campos en el filtro el campo calculado
        // seria demasiado costoso
        //rLin.CALCSUMS("Importe con impuesto");

        lwImporteTotal := _sumar_importes(rLin);

        // AJS 04.12.2003
        // Si el total de la prefactura es 0 marcamos como prefacturado y como facturado
        //ERROR(Text005);

        IF lwImporteTotal = 0 THEN BEGIN
          IF NOT CONFIRM(Text006) THEN
            EXIT;

          rLin.MODIFYALL("N§ Factura"   , Text007);
          rLin.MODIFYALL("N§ Prefactura", Text008);

          _crear_fpr(rLin.TourOperador, Text007, rCond.Delegacion); //+$023
        END
        ELSE
          rLin.MODIFYALL("N§ Prefactura", proxima_prefactura);

      END;

      COMMIT;

      reimprimir_prefactura(proxima_prefactura);
    END;

    LOCAL PROCEDURE _sumar_importes@1103355000(VAR prLin@1103355000 : Record 7009805) : Decimal;
    VAR
      lwImporteTotal@1103355001 : Decimal;
    BEGIN
      // _sumar_importes

      //+$023 <
      rProvTMP.RESET;
      rProvTMP.DELETEALL;

      rAgrTMP.RESET;
      rAgrTMP.DELETEALL;
      //+$023 >

      lwImporteTotal := 0;
      IF prLin.FINDSET THEN
      BEGIN
        REPEAT
          lwImporteTotal += prLin."Importe con impuesto";

          _busca_servicio(prLin.Agrupacion, prLin.TourOperador); //+$023
        UNTIL prLin.NEXT = 0;
      END;

      EXIT(lwImporteTotal);
    END;

    PROCEDURE reimprimir_prefactura@8(prefactura@1103355000 : Code[10]);
    BEGIN
      // reimprimir_prefactura

      rLin.RESET;
      rLin.SETCURRENTKEY(Concepto,
                         "N§ Prefactura",
                         Fecha,
                         Destino,
                         "Tipo Vehiculo",
                         "Tipo linea",
                         "Tipo Pax");
      rLin.SETRANGE(Concepto       , Text003);
      rLin.SETRANGE("N§ Prefactura", prefactura);
      IF rLin.FINDFIRST THEN
        REPORT.RUN(7009923, TRUE, TRUE, rLin);
      rLin.RESET;
    END;

    PROCEDURE busca_ultima_prefactura@2() : Code[10];
    VAR
      lcNoSeriesMgt@1000000002 : Codeunit 396;
      lcPar@1000000003 : Codeunit 7009700;
    BEGIN
      // busca_ultima_prefactura

      //-$032rPar.LOCKTABLE;
      //-$032rPar.FINDFIRST;
      //-$032IF rPar."Prefactura transfer" = '' THEN
      //-$032  rPar."Prefactura transfer" := '0';
      //-$032rPar."Prefactura transfer" := INCSTR(rPar."Prefactura transfer");
      //-$032rPar.MODIFY;
      //-$032EXIT(rPar."Prefactura transfer");

      lcPar.CrearSerieEstandar('ATTRANSPRE', Text0014, '', FALSE, FALSE);

      EXIT(lcNoSeriesMgt.GetNextNo('ATTRANSPRE', TODAY, TRUE));
    END;

    LOCAL PROCEDURE _facturar_transfer@5(VAR rLin2@1103355000 : Record 7009805);
    VAR
      texto_confirmar@1103355001 : Text[80];
      text_factura@1103355002 : Text[80];
      rCond@1103355003 : Record 7010085;
      lrCabFraInc@1103355005 : Record 7009908;
      lrCabFra@1100217000 : Record 36;
      nSerie@1103355006 : Code[10];
      rCom@1103355007 : Record 44;
      auxiliar_importe@1103355008 : Decimal;
      lcRelease@1000000000 : Codeunit 414;
    BEGIN
      // _facturar_transfer

      rPar.FINDFIRST;

      rDatosIns.FINDFIRST;

      IF NOT rCond.GET(USERID()) THEN BEGIN
        rCond.INIT;
        rCond.Usuario := USERID();
        rCond.INSERT;
      END;

      rCond.INIT;
      rCond.Usuario         := USERID();
      rCond."N§ Prefactura" := rLin2."N§ Prefactura";
      rCond.Texto           := Text010;
      rCond.Correcto        := FALSE;
      rCond.Delegacion      := rPar.Delegacion;
      rCond.MODIFY;
      rCond.SETRANGE(Usuario, USERID());
      COMMIT;
      FORM.RUNMODAL(FORM::"Ficha Condicion Prefactura", rCond);
      rCond.GET(USERID);
      IF rCond.Delegacion = '' THEN
        rCond.Delegacion := rPar.Delegacion;
      prefactura_facturar := rCond."N§ Prefactura";
      IF (prefactura_facturar = '') OR NOT rCond.Correcto THEN
        EXIT;
      texto_confirmar := Text011 + ' ' + prefactura_facturar;
      IF NOT CONFIRM(texto_confirmar, TRUE) THEN
        EXIT;

      // Comprobar si las lineas no estan facturadas y obtener las fechas de facturacion.

      aux_fecha_desde := 0D;
      aux_fecha_hasta := 0D;

      //+$017 <
      rAgrTMP.RESET;
      rAgrTMP.DELETEALL;

      rProvTMP.RESET;
      rProvTMP.DELETEALL;
      //+$017 >

      //-$017CLEAR(TabServicios);
      //-$017CLEAR(TabProveedores);

      rLin2.RESET;
      rLin2.SETCURRENTKEY(Concepto,
                         "N§ Prefactura");
      rLin2.SETRANGE(Concepto       , Text003);
      rLin2.SETRANGE("N§ Prefactura", prefactura_facturar);
      IF rLin2.FINDSET THEN
      BEGIN
        ok := comprobar_cuentas(rLin2);
        IF NOT ok THEN
          EXIT;
        aux_fecha_desde := rLin2.Fecha;
        aux_fecha_hasta := rLin2.Fecha;
        auxiliar_importe := 0;
        REPEAT
          _busca_servicio(rLin2.Agrupacion, rLin2.TourOperador);

          IF rLin2."N§ Factura" <> '' THEN
            ERROR(Text004, rLin2.Agrupacion, rLin2.Fecha);

          IF (rLin2.Fecha < aux_fecha_desde) AND (rLin2.Fecha <> 0D) THEN
            aux_fecha_desde := rLin2.Fecha;

          IF (rLin2.Fecha > aux_fecha_hasta) THEN
            aux_fecha_hasta := rLin2.Fecha;

          //+$029 <
          IF rConV."Impuestos incluidos" THEN
            auxiliar_importe += rLin2."Importe con impuesto"
          ELSE
            auxiliar_importe += rLin2."Importe sin impuesto";
          //+$029 >
        UNTIL rLin2.NEXT = 0;
      END;

      //+$020 <
      IF auxiliar_importe = 0 THEN
      BEGIN
        IF NOT CONFIRM(Text0013) THEN
          EXIT;

        lrCabFra."No." := Text0012;
      END
      ELSE
      BEGIN
        IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN
          _ComprobarFechaFacturacion(aux_fecha_hasta); // AJF 24/03/10

        // Crear la factura de venta

        text_factura := Text012 + ' ' + rLin2.TourOperador + ' ' + Text013 + ' ' + STRSUBSTNO('%1', aux_fecha_desde) + ' ' +
                        Text014 + ' ' + STRSUBSTNO('%1', aux_fecha_hasta);

        ventana.OPEN(Text015 +
                     Text016 +
                     Text017);

        CLEAR(lrCabFra);
        IF auxiliar_importe < 0 THEN
        BEGIN
          lrCabFra.VALIDATE("Document Type", lrCabFra."Document Type"::"Credit Memo");
          Signo := -1;

          //-$027nSerie := rConfVta."Posted Credit Memo Nos.";
          nSerie := rSerie."Serie abonos"; //+$027
        END
        ELSE
        BEGIN
          lrCabFra.VALIDATE("Document Type", lrCabFra."Document Type"::Invoice);
          Signo := 1;

          //-$027nSerie := rConV."Cod. Serie";
          nSerie := rSerie."Serie facturas"; //+$027
        END;
        lrCabFra.VALIDATE("No. Series", nSerie);
        _CheckReasonCode;
        lrCabFra.INSERT(TRUE);

        ventana.UPDATE(1,  lrCabFra."No.");

        lrCabFra.VALIDATE("Posting No. Series"  , nSerie);
        lrCabFra.VALIDATE("Sell-to Customer No.", rCli."No.");

        IF rPar."Fecha registro agencia" = rPar."Fecha registro agencia"::"Fecha servicio" THEN BEGIN
          lrCabFra.VALIDATE("Posting Date" , aux_fecha_hasta);
          lrCabFra.VALIDATE("Document Date", aux_fecha_hasta);
        END
        ELSE BEGIN
          lrCabFra.VALIDATE("Posting Date" , WORKDATE);
          lrCabFra.VALIDATE("Document Date", WORKDATE);
        END;

        lrCabFra.VALIDATE("Payment Terms Code"       , rConV."Cod. Terminos Pago");
        lrCabFra.VALIDATE("Payment Method Code"      , rConV."Cod. Formas Pago");
        lrCabFra.VALIDATE("Shortcut Dimension 1 Code", rCond.Delegacion);
        lrCabFra.VALIDATE("Shortcut Dimension 2 Code", rLin2.TourOperador);
        lrCabFra.VALIDATE("Posting Description"      , text_factura);
        lrCabFra.VALIDATE("Prices Including VAT"     , rConV."Impuestos incluidos");
        lrCabFra.MODIFY;

        // Crea la Cabecera Factura Incoming

        CLEAR(lrCabFraInc);
        lrCabFraInc.SetInf(lrCabFra);

        // Rellenar el touroperador y la fecha de servicio para despues obtener el contrato
        lrCabFraInc.Modulo           := lrCabFraInc.Modulo::Transfer;
        lrCabFraInc.Touroperador     := rLin2.TourOperador;
        lrCabFraInc."Fecha servicio" := aux_fecha_desde;
        lrCabFraInc."Periodo Desde"  := aux_fecha_desde;
        lrCabFraInc."Periodo Hasta"  := aux_fecha_hasta;
        lrCabFraInc."Fecha creacion" := CURRENTDATETIME; //+$011
        lrCabFraInc.INSERT;

        wLineaFactura := 0; //+$004

        IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN
        BEGIN
          _CrearLineasImpresion(prefactura_facturar, lrCabFra."Document Type", lrCabFra."No.", lrCabFra."Shortcut Dimension 1 Code");
          _crear_lineas(prefactura_facturar, lrCabFra);
        END
        ELSE
        BEGIN
          _CrearLineasImpresion(prefactura_facturar, lrCabFra."Document Type", lrCabFra."No.", lrCabFra."Shortcut Dimension 1 Code");
          _LineaContableResumen(auxiliar_importe, lrCabFra);
        END;

        // Obtenemos los totales de los importes en cabecera
        lrCabFraInc.GetImportes;
        lrCabFraInc.MODIFY;

        //+$031 <
        //. Recuperamos la cabecera de factura para lanzarla
        IF lrCabFra.GET(lrCabFra."Document Type", lrCabFra."No.") THEN
          lcRelease.RUN(lrCabFra);

        IF lrCabFra.GET(lrCabFra."Document Type", lrCabFra."No.") THEN
        BEGIN
          lrCabFra."Reason Code" := 'ATENNEA';
          lrCabFra.MODIFY;
        END;
        //+$031 >
      END;
      //+$020 >

      _crear_fpr(rLin2.TourOperador, lrCabFra."No.", lrCabFra."Shortcut Dimension 1 Code");

      IF rLin2.FINDSET(TRUE) THEN
        rLin2.MODIFYALL("N§ Factura", lrCabFra."No.");
      rLin2.SETRANGE("N§ Prefactura");

      //. Vamos a crear un registro de factura compra comercilizadora
      _FacturaCompraCOM(lrCabFra, auxiliar_importe, rLin2.TourOperador);

      ventana.CLOSE;
      COMMIT;

      IF auxiliar_importe <> 0 THEN
      BEGIN
        lrCabFraInc.SETRECFILTER;

        //. Pedir comentarios antes de imprimir la factura
        IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN //+$033
        BEGIN
          rCom.RESET;
          rCom.SETRANGE("Document Type", lrCabFra."Document Type");
          rCom.SETRANGE("No."          , lrCabFra."No.");
          FORM.RUNMODAL(67, rCom);
          rCom.RESET;
          COMMIT;
        END;

        //. Lanzamos el informe parametrizado para las facturas
        REPORT.RUNMODAL(rPar."Factura Venta Transfer", TRUE, FALSE, lrCabFraInc);
      END;
    END;

    LOCAL PROCEDURE _crear_lineas@10(aux_prefactura@1103355000 : Code[10];prCabFra@1100217000 : Record 36);
    BEGIN
      // crear_lineas

      //-$018CLEAR(servicios_linea);

      // La rutina rellena_linea crea las lineas para la contabilizacion

      rLin.RESET;
      rLin.SETCURRENTKEY(Concepto,
                         "N§ Prefactura",
                         Fecha,
                         Destino,
                         "Tipo Vehiculo",
                         "Tipo linea",
                         "Tipo Pax");
      rLin.SETRANGE(Concepto       , Text003);
      rLin.SETRANGE("N§ Prefactura", aux_prefactura);
      IF rLin.FINDSET THEN
      BEGIN
        importe_linea       := 0;
        cantidad_linea      := 0;
        vehiculos_linea     := 0;
        ant_tipo_pax        := rLin."Tipo Pax";
        ant_tipo_vehiculo   := rLin."Tipo Vehiculo";
        ant_precio_pax      := rLin."Precio x Pax";
        ant_precio_vehiculo := rLin."Precio x Vehiculo";
        ant_fecha           := rLin.Fecha;
        ant_si_abono        := rLin.Abono;
        ant_zona            := rLin.Destino;
        REPEAT
          IF (rLin."Tipo Pax" <> ant_tipo_pax) OR
             (rLin."Tipo Vehiculo" <> ant_tipo_vehiculo) OR
             (rLin."Precio x Pax" <> ant_precio_pax) OR
             (rLin."Precio x Vehiculo" <> ant_precio_vehiculo) OR
             (rLin.Fecha <> ant_fecha) OR
             (rLin.Abono <> ant_si_abono) OR
             ((rLin.Destino <> ant_zona) AND
              (rPar."Tipo Desglose Transfer" = rPar."Tipo Desglose Transfer"::Zona)) THEN BEGIN

            IF importe_linea <> 0 THEN
              _rellena_linea(prCabFra);

            importe_linea       := 0;
            cantidad_linea      := 0;
            vehiculos_linea     := 0;

            ant_tipo_pax        := rLin."Tipo Pax";
            ant_tipo_vehiculo   := rLin."Tipo Vehiculo";
            ant_precio_pax      := rLin."Precio x Pax";
            ant_precio_vehiculo := rLin."Precio x Vehiculo";
            ant_fecha           := rLin.Fecha;
            ant_zona            := rLin.Destino;
            ant_si_abono        := rLin.Abono;

            //-$018CLEAR(servicios_linea);
          END;

          IF (rConV."Tipo de Facturacion" = rConV."Tipo de Facturacion"::Separado) OR
             ((rConV."Tipo de Facturacion" = rConV."Tipo de Facturacion"::Llegada) AND
              (rLin."Tipo transfer" = rLin."Tipo transfer"::Entrada)) THEN BEGIN
            cantidad_linea := cantidad_linea + rLin."Cantidad aplicada";
            vehiculos_linea := vehiculos_linea + rLin."N§ Vehiculos";
            //-$018_busca_servicio_linea(rLin);
          END;

          IF rConV."Impuestos incluidos" THEN
            importe_linea := importe_linea + (Signo * rLin."Importe con impuesto")
          ELSE
            importe_linea := importe_linea + (Signo * rLin."Importe sin impuesto");
        UNTIL rLin.NEXT = 0;

        IF ((ant_tipo_pax <> '') OR (ant_tipo_vehiculo <> '')) AND (importe_linea <> 0) THEN
          _rellena_linea(prCabFra);
      END;
    END;

    LOCAL PROCEDURE _crear_fpr@11(par_touroperador@1103355000 : Code[10];pwNumFactura@1100217000 : Code[20];pwDepartamento@1100217001 : Code[10]);
    VAR
      lCval_tran@1103355002 : Codeunit 7009738;
      lcSincroCOM@1000000001 : Codeunit 7009793;
      lrCurrExchange@1000000000 : Record 330;
      lw_texto@1103355004 : Text[50];
    BEGIN
      // _crear_fpr

      //. Hay un parametro para indicar cuando se registra FPR con impuesto y cuando sin impuestos

      rPar.FINDFIRST;

      rLin.RESET;
      rLin.SETCURRENTKEY(Agrupacion,
                         TourOperador,
                         Concepto,
                         "Pendiente FPR");
      //-$017ind_proveedor := 1;
      //-$017WHILE TabProveedores[ind_proveedor] <> '' DO

      //+$017 <
      rProvTMP.RESET;
      IF rProvTMP.FINDSET THEN
      //+$017 >
      BEGIN
        REPEAT
          //-$017indice        := 1;

          importe_linea          := 0;
          importe_linea_circuito := 0;

          //-$017WHILE TabServicios[indice] <> 0 DO BEGIN

          //+$017 <
          rAgrTMP.RESET;
          IF rAgrTMP.FINDSET THEN
          BEGIN
            REPEAT
          //+$017 >

              //-$017rLin.SETRANGE(Transportista  , TabProveedores[ind_proveedor]);
              //-$017rLin.SETRANGE(Agrupacion     , TabServicios[indice]);
              rLin.SETRANGE("Proveedor contable", rProvTMP."No.");
              rLin.SETRANGE(Agrupacion          , rAgrTMP."N§ Agrupacion"); //+$017
              rLin.SETRANGE(TourOperador        , par_touroperador);
              rLin.SETRANGE(Concepto            , Text022);
              rLin.SETRANGE("Pendiente FPR"     , TRUE);
              IF rLin.FINDSET THEN
              BEGIN
                REPEAT
                  //+$028
                  IF rLin."Cod. divisa" = '' THEN
                  BEGIN
                    rLin."Tipo cambio FPR" := 1;

                    rLin."Importe sin impuestos (DL)" := rLin."Importe sin impuesto";
                    rLin."Importe con impuestos (DL)" := rLin."Importe con impuesto";
                  END
                  ELSE BEGIN
                    rLin."Tipo cambio FPR" := lCval_tran.TipoCambioDivisa(rLin."Cod. divisa", WORKDATE);

                    rLin."Importe sin impuestos (DL)" := ROUND(lrCurrExchange.ExchangeAmtFCYToFCY(WORKDATE,
                                                                                                  rLin."Cod. divisa",
                                                                                                  '',
                                                                                                  rLin."Importe sin impuesto"));
                    rLin."Importe con impuestos (DL)" := ROUND(lrCurrExchange.ExchangeAmtFCYToFCY(WORKDATE,
                                                                                                  rLin."Cod. divisa",
                                                                                                  '',
                                                                                                  rLin."Importe con impuesto"));
                  END;
                  //+$028 >

                  //. Separamos los costes de circuitos de los costes de los traslados normales

                  IF rLin.Circuito THEN BEGIN
                    IF rPar."Registrar FPR con impuestos" THEN
                      importe_linea_circuito := importe_linea_circuito + rLin."Importe con impuestos (DL)"
                    ELSE
                      importe_linea_circuito := importe_linea_circuito + rLin."Importe sin impuestos (DL)";
                  END
                  ELSE
                  BEGIN
                    IF rPar."Registrar FPR con impuestos" THEN
                      importe_linea := importe_linea + rLin."Importe con impuestos (DL)"
                    ELSE
                      importe_linea := importe_linea + rLin."Importe sin impuestos (DL)";
                  END;

                  rLin."Marca FPR" := USERID;
                  rLin.MODIFY;
                UNTIL rLin.NEXT = 0;
              END;

              rLin.SETRANGE("Proveedor contable");
              rLin.SETRANGE(Agrupacion);
              rLin.SETRANGE(TourOperador);
              rLin.SETRANGE(Concepto);
              rLin.SETRANGE("Pendiente FPR");
            UNTIL rAgrTMP.NEXT = 0;
            //-$017indice := indice + 1;
          END;

          importe_linea          := ROUND(importe_linea);
          importe_linea_circuito := ROUND(importe_linea_circuito);

          //-$017asegurar_cuentas(TabProveedores[ind_proveedor]);
          asegurar_cuentas(rProvTMP."No.");

          lw_texto := STRSUBSTNO(Text023, pwNumFactura, COPYSTR(rProv.Name, 1, 24));

          IF importe_linea <> 0 THEN
          BEGIN
            numero_asiento := asiento_diario;
            lCval_tran.genera_asiento(0, rCtas."Cta. compra transfer", (-importe_linea),
                                      pwDepartamento, aux_fecha_desde, numero_asiento,
                                      rLin.TourOperador, lw_texto,
                                      STRSUBSTNO(Text025, pwNumFactura), rProv."No."); //+$008
            lCval_tran.genera_asiento(1, rGrup."Cta. FPR Transfer", (-importe_linea),
                                      pwDepartamento, aux_fecha_desde, numero_asiento,
                                      rLin.TourOperador,  lw_texto,
                                      STRSUBSTNO(Text025, pwNumFactura), rProv."No."); //+$008

            //+$037 <
            IF rPar."Registrar costes en comerciali" THEN
              lcSincroCOM.SincronizaDiario(rPar.GetLibroDiarioGeneral, 'TRANSFER', '', rLin.TourOperador);
            //+$037 >
          END;

          IF importe_linea_circuito <> 0 THEN
          BEGIN
            numero_asiento := asiento_diario;
            lCval_tran.genera_asiento(0, rCtas."Cta. compra circuito", (-importe_linea_circuito),
                                      pwDepartamento, aux_fecha_desde, numero_asiento,
                                      rLin.TourOperador, lw_texto,
                                      STRSUBSTNO(Text025, pwNumFactura), rProv."No."); //+$008
            lCval_tran.genera_asiento(1, rGrup."Cta. FPR Circuito", (-importe_linea_circuito),
                                      pwDepartamento, aux_fecha_desde, numero_asiento,
                                      rLin.TourOperador, lw_texto,
                                      STRSUBSTNO(Text025, pwNumFactura), rProv."No."); //+$008

            //+$037 <
            IF rPar."Registrar costes en comerciali" THEN
              lcSincroCOM.SincronizaDiario(rPar.GetLibroDiarioGeneral, 'TRANSFER', '', rLin.TourOperador);
            //+$037 >
          END;

          rLin.SETRANGE(Transportista);
          rLin.SETRANGE(Agrupacion);
          rLin.SETRANGE(TourOperador);
          rLin.SETRANGE(Concepto);
          rLin.SETRANGE("Pendiente FPR");

          // Marcar las lineas con el numero de factura de venta asociado al coste
          _MarcarLineasFPR(pwNumFactura);

        UNTIL rProvTMP.NEXT = 0;
        //-$017ind_proveedor += 1;
      END;
    END;

    LOCAL PROCEDURE _rellena_linea@20(prCabFra@1100217000 : Record 36);
    VAR
      aux_agrupacion@1103355000 : Record 7009796;
      aux_hotel@1103355008 : Code[20];
      aux_usuario@1103355009 : Code[10];
      lwTotalPax@1103355010 : Integer;
    BEGIN
      // rellena_linea

      rPar.FINDFIRST;

      //+$004
      wLineaFactura += 10000;

      CLEAR(rLinFra);
      rLinFra.VALIDATE("Document Type", prCabFra."Document Type");
      rLinFra.VALIDATE("Document No." , prCabFra."No.");
      rLinFra.VALIDATE(Type           , rLinFra.Type::"G/L Account");
      rLinFra.VALIDATE("Line No."     , wLineaFactura);
      rLinFra.INSERT;

      ventana.UPDATE(2, rLinFra."Line No.");

      rLinFra.VALIDATE("No."                      , rCtas."Cta. venta transfer");
      rLinFra.VALIDATE("Shortcut Dimension 1 Code", prCabFra."Shortcut Dimension 1 Code");
      rLinFra.VALIDATE("Shortcut Dimension 2 Code", prCabFra."Shortcut Dimension 2 Code");
      rLinFra.VALIDATE("Allow Invoice Disc."      , FALSE);
      rLinFra.VALIDATE(Quantity                   , 1);
      rLinFra.VALIDATE("VAT Bus. Posting Group"   , rCli."VAT Bus. Posting Group");
      rLinFra.VALIDATE("VAT Prod. Posting Group"  , rConV."Gr. Registro IVA Producto");

      IF ant_precio_pax <> 0 THEN
        rLinFra.VALIDATE(Description, STRSUBSTNO('#1##### #2######## #3######## #4######', cantidad_linea, ant_tipo_pax,
                         ant_precio_pax, ant_fecha))
      ELSE
        rLinFra.VALIDATE(Description, STRSUBSTNO('#1##### #2######## #3######## #4######', vehiculos_linea, ant_tipo_vehiculo,
                         ant_precio_vehiculo, ant_fecha));
      IF ant_si_abono THEN BEGIN
        rLinFra.Description     := Text028 + rLinFra.Description;
        rLinFra."Description 2" := Text028;
      END;

      IF rPar."Desglose factura transfer" AND
         (rPar."Tipo Desglose Transfer" = rPar."Tipo Desglose Transfer"::Zona) THEN
        rLinFra."Description 2" := STRSUBSTNO('#1######## #2######## #3#######################',
                                              rLinFra."Description 2", ant_tipo_vehiculo, ant_zona);

      rLinFra.VALIDATE("Unit Price", importe_linea);

      //+$003
      IF rConV."Impuestos incluidos" THEN BEGIN
        rLinFra."Amount Including VAT" := rLinFra."Line Amount";
        rLinFra.Amount                 := ROUND(rLinFra."Line Amount" / (1 + ((rLinFra."VAT %" + rLinFra."EC %") / 100) ) );
      END
      ELSE BEGIN
        rLinFra.Amount                 := rLinFra."Line Amount";
        rLinFra."Amount Including VAT" := ROUND(rLinFra."Line Amount" * (1 + ((rLinFra."VAT %" + rLinFra."EC %") / 100) ) );
      END;
      //+$003

      rLinFra."Line Discount %" := 0;
      rLinFra.MODIFY(TRUE);


      // generamos las lineas de comentario para cada reserva

      //-$014IF (rPar."Desglose factura transfer") THEN BEGIN
      //-$014  CASE rPar."Tipo Desglose Transfer" OF
      //-$014    rPar."Tipo Desglose Transfer"::Persona : BEGIN
      //-$014      rParPer.FINDFIRST;

      //-$014      indice := 1;
      //-$014      aux_usuario := Text031 + COPYSTR(USERID(), 1, 6);
      //-$014      WHILE servicios_linea[indice] <> 0 DO BEGIN
      //-$014        IF aux_agrupacion.GET(servicios_linea[indice]) THEN BEGIN
      //-$014          IF aux_agrupacion."Tipo transfer" = aux_agrupacion."Tipo transfer"::Salida THEN BEGIN
      //-$014            aux_rsv.SETCURRENTKEY("Marca cambios",
      //-$014                                  "Hotel salida",
      //-$014                                  "Tipo Persona",
      //-$014                                  Nombre);
      //-$014            aux_rsv.SETRANGE("Marca cambios", aux_usuario);
      //-$014            aux_hotel := '';
      //-$014          END
      //-$014          ELSE BEGIN
      //-$014            aux_rsv.SETCURRENTKEY("Marca cambios",
      //-$014                                  "Hotel entrada",
      //-$014                                  "Tipo Persona",
      //-$014                                  Nombre);
      //-$014            aux_rsv.SETRANGE("Marca cambios", aux_usuario);
      //-$014            aux_hotel := '';
      //-$014          END;
      //-$014          IF aux_rsv.FINDSET THEN BEGIN
      //-$014            REPEAT
      //-$014              IF Signo = 1 THEN BEGIN
      //-$014                IF aux_agrupacion."Tipo transfer" = aux_agrupacion."Tipo transfer"::Salida THEN BEGIN
      //-$014                  IF aux_hotel <> aux_rsv."Hotel salida" THEN BEGIN
      //-$014                    aux_hotel := aux_rsv."Hotel salida";
      //-$014                    _linea_hotel(aux_hotel);
      //-$014                  END;
      //-$014                END
      //-$014                ELSE BEGIN
      //-$014                  IF aux_hotel <> aux_rsv."Hotel entrada" THEN BEGIN
      //-$014                    aux_hotel := aux_rsv."Hotel entrada";
      //-$014                    _linea_hotel(aux_hotel);
      //-$014                  END;
      //-$014                END;
      //-$014                IF aux_rsv."Tipo Persona" <> rParPer."Codigo Infant" THEN
      //-$014                  _linea_persona(aux_rsv, aux_agrupacion);
      //-$014              END;
      //-$014              aux_rsv2 := aux_rsv;
      //-$014              aux_rsv2."Marca cambios" := '';
      //-$014              aux_rsv2.MODIFY;
      //-$014            UNTIL aux_rsv.NEXT = 0;
      //-$014          END;
      //-$014        END;
      //-$014        indice := indice + 1;
      //-$014      END;
      //-$014    END;
      //-$014  END;
      //-$014END;
    END;

    PROCEDURE comprobar_cuentas@6(VAR rLin2@1103355000 : Record 7009805) : Boolean;
    VAR
      w_to@1103355001 : Code[10];
      rTo@1103355002 : Record 7009717;
      lrAgr@1103355003 : Record 7009796;
      lwNumAgrupacion@1100217000 : Integer;
    BEGIN
      // Comprobar_cuentas

      rPar.FINDFIRST;
      wDiarioGeneral := rPar.GetLibroDiarioGeneral;

      IF NOT rCtas.GET(rPar.Delegacion, rLin2.TourOperador) THEN BEGIN
        IF NOT rCtas.GET(rPar.Delegacion, '') THEN
          ERROR(Text035 + ' ' + Text036, rLin2.TourOperador, rPar.Delegacion);
      END;

      rCtas.TESTFIELD("Cta. venta transfer");
      rCtas.TESTFIELD("Cta. compra transfer");
      rCtas.TESTFIELD("Cta. compra circuito");

      IF NOT rSeccion.GET(wDiarioGeneral, Text032) THEN BEGIN
        CLEAR(rSeccion);
        rSeccion."Journal Template Name" := wDiarioGeneral;
        rSeccion.Name                    := Text032;
        rSeccion.Description             := Text037;
        rSeccion.INSERT;
      END;

      // Buscar el contrato de venta con el TourOperador

      IF NOT rTo.GET(rLin2.TourOperador) THEN
        ERROR(Text041, rLin2.TourOperador);

      //-$001IF rTo."Grupo Touroperador" = '' THEN
      //-$001  w_to := rLin2.TourOperador
      //-$001ELSE
      //-$001  w_to := rTo."Grupo Touroperador";

      w_to := rLin2.TourOperador; //+$001

      //+$021 <
      IF rLin2.Abono THEN
        lwNumAgrupacion := rLin2.Agrupacion - 1000000000
      ELSE
        lwNumAgrupacion := rLin2.Agrupacion;
      //+$021 >

      //+$025 <
      IF NOT lrAgr.GET(lwNumAgrupacion) THEN
      BEGIN
        lrAgr.Fecha := rLin2.Fecha;
        lrAgr."Origen/Destino transfer" := rLin2."Origen/Destino transfer";
      END;
      //+$025 >

      IF NOT cCalculo.busca_contrato_venta(lrAgr, rConV, w_to, FALSE) THEN
      BEGIN
        MESSAGE(Text053, w_to, rLin2.Fecha); //+$002
        EXIT(FALSE);
      END;

      IF rCli.GET(rConV.Cliente) THEN
        rCli.TESTFIELD("VAT Bus. Posting Group")
      ELSE
        EXIT(FALSE);

      rConV.TESTFIELD("Gr. Registro IVA Producto");
      //-$027rConV.TESTFIELD("Cod. Serie");

      //-$027IF NOT rConfVta.FINDFIRST THEN
      //-$027  ERROR(Text018);
      //-$027rConfVta.TESTFIELD("Posted Credit Memo Nos.");

      //+$027 <
      rSerie.GET(rSerie.Modulo::Transfer);
      rSerie.CheckSeries;
      //+$027 >

      EXIT(TRUE);
    END;

    PROCEDURE asegurar_cuentas@18(par_proveedor@1103355000 : Code[20]);
    BEGIN
      // asegurar_cuentas

      //-$017IF rTrans.GET(par_proveedor) THEN BEGIN
      //-$017  rTrans.TESTFIELD(Proveedor);

        IF rProv.GET(par_proveedor) THEN
        BEGIN
          rProv.TESTFIELD("Vendor Posting Group");
          IF rGrup.GET(rProv."Vendor Posting Group") THEN
          BEGIN
            rGrup.TESTFIELD("Cta. FPR Transfer");
            rGrup.TESTFIELD("Cta. FPR Circuito");
          END
          ELSE
            ERROR(Text042, rProv."Vendor Posting Group");
        END
        ELSE
          ERROR(Text043, par_proveedor);

      //-$017END
      //-$017ELSE
      //-$017  ERROR(Text044, par_proveedor);

      rPar.FINDFIRST;
    END;

    PROCEDURE deshacer_prefactura@3(par_lin@1103355000 : Record 7009805);
    VAR
      rLin2@1103355001 : Record 7009805;
      rCond@1103355002 : Record 7010085;
    BEGIN
      // deshacer_prefactura

      IF NOT rCond.GET(USERID()) THEN BEGIN
        rCond.INIT;
        rCond.Usuario := USERID();
        rCond.INSERT;
      END;
      rCond.INIT;
      rCond.Usuario := USERID();
      rCond."N§ Prefactura" := par_lin."N§ Prefactura";
      rCond.Texto    := Text046;
      rCond.Correcto := FALSE;
      rCond.MODIFY;
      rCond.SETRANGE(Usuario, USERID());
      COMMIT;
      FORM.RUNMODAL(FORM::"Ficha Condicion Prefactura", rCond);
      rCond.GET(USERID);

      prefactura_deshacer := rCond."N§ Prefactura";
      IF (prefactura_deshacer = '') OR NOT rCond.Correcto THEN
        EXIT;

      rLin.RESET;
      rLin.SETCURRENTKEY(Concepto,
                         "N§ Prefactura");
      rLin.SETRANGE(Concepto       , Text003);
      rLin.SETRANGE("N§ Prefactura", prefactura_deshacer);
      IF rLin.FINDSET THEN
        REPEAT
          IF rLin."N§ Factura" = '' THEN BEGIN
            rLin2 := rLin;
            rLin2."N§ Prefactura" := '';
            rLin2.MODIFY;
          END;
        UNTIL rLin.NEXT = 0;
      rLin.RESET;
    END;

    LOCAL PROCEDURE _busca_servicio@19(pwAgrupacion@1103355000 : Integer;pwTouroperador@1100217000 : Code[10]);
    VAR
      lrCoste@1103355001 : Record 7009805;
    BEGIN
      // busca_servicio

      //+$017 <
      rAgrTMP.RESET;
      IF NOT rAgrTMP.GET(pwAgrupacion) THEN
      BEGIN
        lrCoste.RESET;
        lrCoste.SETRANGE(Agrupacion     , pwAgrupacion);
        lrCoste.SETRANGE(Concepto       , Text022);
        lrCoste.SETRANGE("Pendiente FPR", TRUE);
        lrCoste.SETRANGE(TourOperador   , pwTouroperador);
        IF lrCoste.FINDSET THEN
        BEGIN
          REPEAT
            _busca_proveedor(lrCoste."Proveedor contable");
          UNTIL lrCoste.NEXT = 0;
        END;

        rAgrTMP.INIT;
        rAgrTMP."N§ Agrupacion" := pwAgrupacion;
        rAgrTMP.INSERT;
      END;
      //+$017 >

      //-$017indice := 0;
      //-$017REPEAT
      //-$017  indice := indice + 1;
      //-$017  IF TabServicios[indice] = 0 THEN
      //-$017  BEGIN
      //-$017    TabServicios[indice] := aux_agrupacion;

      //-$017    CLEAR(rLinea);
      //-$017    rLinea.SETRANGE(Agrupacion, aux_agrupacion);
      //-$017    rLinea.SETRANGE(Concepto  , Text022);
      //-$017    IF rLinea.FINDSET THEN BEGIN
      //-$017      REPEAT
      //-$017        _busca_proveedor(rLinea.Transportista);
      //-$017      UNTIL rLinea.NEXT = 0;
      //-$017    END;
      //-$017  END;
      //-$017UNTIL TabServicios[indice] = aux_agrupacion;
    END;

    LOCAL PROCEDURE _busca_proveedor@14(pwProveedor@1103355000 : Code[20]);
    VAR
      lw_indice@1103355001 : Integer;
    BEGIN
      // busca_proveedor

      //+$017 <
      rProvTMP.RESET;
      IF NOT rProvTMP.GET(pwProveedor) THEN
      BEGIN
        rProvTMP.INIT;
        rProvTMP."No." := pwProveedor;
        rProvTMP.INSERT;
      END;
      //+$017 >

      //-$017lw_indice := 0;
      //-$017REPEAT
      //-$017  lw_indice := lw_indice + 1;
      //-$017  IF TabProveedores[lw_indice] = '' THEN
      //-$017    TabProveedores[lw_indice] := aux_proveedor;
      //-$017UNTIL TabProveedores[lw_indice] = aux_proveedor;
    END;

    PROCEDURE asiento_diario@33() : Integer;
    VAR
      lrLinDir@1100217000 : Record 81;
    BEGIN
      // asiento_diario

      lrLinDir.RESET;
      //-$016rLinDiario2.SETCURRENTKEY("Journal Template Name", "Journal Batch Name", "Posting Date", "Transaction No.");
      lrLinDir.SETCURRENTKEY("Journal Template Name", "Journal Batch Name", "Transaction No."); //+$016
      lrLinDir.SETRANGE("Journal Template Name", wDiarioGeneral);
      lrLinDir.SETRANGE("Journal Batch Name"   , Text032);
      IF rPar."Fecha registro agencia" = rPar."Fecha registro agencia"::"Fecha servicio" THEN
        lrLinDir.SETRANGE("Posting Date"       , aux_fecha_desde)
      ELSE
        lrLinDir.SETRANGE("Posting Date"       , WORKDATE);
      IF lrLinDir.FINDLAST THEN
        EXIT(lrLinDir."Transaction No." + 1)
      ELSE
        EXIT(1);
    END;

    LOCAL PROCEDURE _linea_bono@16(wTipoDoc@1103355012 : Integer;wNumDoc@1103355007 : Code[20]);
    VAR
      aux_rsv@1103355001 : Record 7009744;
      aux_rsv2@1103355002 : Record 7009744;
      rParPer@1103355003 : Record 7009701;
      lrLinFraInc@1103355004 : Record 7009909;
      lrLinFraInc2@1103355005 : Record 7009909;
      lrPer@1103355008 : Record 7009742;
      aux_hotel@1103355009 : Code[20];
      aux_usuario@1103355010 : Code[10];
      lwTotalPax@1103355011 : Integer;
    BEGIN
      // linea_Bono

      // ----  De las lineas que no tienen importe no queremos el desglose  ----

      IF rLin."Importe con impuesto" = 0 THEN
        EXIT;

      IF rLin.Abono THEN BEGIN
        // Las lineas de abono tienen que tratarse aparte, ya no podemos ir a buscar la reserva
        // Las insertamos tal y como estan en la tabla de ingresos

        CLEAR(lrLinFraInc);
        lrLinFraInc."Tipo documento"     := wTipoDoc;
        lrLinFraInc."N§ documento"       := wNumDoc;
        lrLinFraInc."Line No."           := lrLinFraInc.NewLineNo;
        lrLinFraInc."Tipo Pax"           := rLin."Tipo Pax";
        lrLinFraInc.Zona                 := rLin.Destino;
        lrLinFraInc.NoPrefactura         := rLin."N§ Prefactura";
        lrLinFraInc.Agrupacion           := rLin.Agrupacion;
        lrLinFraInc."Impuesto Incluidos" := rLin."Impuestos Incluido";
        lrLinFraInc."% IVA"              := rLin."% Impuestos";
        lrLinFraInc.Fecha                := rLin.Fecha;
        lrLinFraInc.TourOperador         := rLin.TourOperador;

        IF rLin."Tipo linea" = rLin."Tipo linea"::Vehiculo THEN
        BEGIN
          lwTotalPax := _TotalAgrupacion(rLin.Agrupacion, rLin.Destino, rLin."Tipo transfer");
          lrLinFraInc."Precio x vehiculo" := TRUE;
        END;

        CASE rLin."Tipo linea" OF
          rLin."Tipo linea"::Persona:
          BEGIN
            lrLinFraInc.Precio              := rLin."Precio x Pax";
            lrLinFraInc.Cantidad            := rLin."Cantidad aplicada";
            lrLinFraInc."Precio x vehiculo" := FALSE;
          END;
          rLin."Tipo linea"::Vehiculo:
          BEGIN
            lrLinFraInc.Precio              := rLin."Precio x Vehiculo";
            lrLinFraInc.Cantidad            := 1;
            lrLinFraInc."Precio x vehiculo" := TRUE;
          END;
        END;
        lrLinFraInc.VALIDATE(Importe, lrLinFraInc.Precio * lrLinFraInc.Cantidad);
        lrLinFraInc.SetImportes;
        lrLinFraInc."Tipo Linea" := lrLinFraInc."Tipo Linea"::Abono;
        lrLinFraInc.INSERT(TRUE);

        EXIT; // No pasamos a la siguiente
      END;

      // Si no es una linea de abono

      // Crea lineas de factura impresi¢n

      aux_rsv.RESET;
      CASE rLin."Tipo transfer" OF
        rLin."Tipo transfer"::Entrada: BEGIN
          aux_rsv.SETCURRENTKEY("Agrupacion entrada",
                                     "Hotel entrada",
                                                Bono,
                                     "Vuelo entrada",
                                      "Tipo Persona",
                                             Nombre);
          aux_rsv.SETRANGE("Agrupacion entrada"      , rLin.Agrupacion);
          aux_rsv.SETRANGE("Zona venta entrada"      , rLin.Destino);
          aux_rsv.SETRANGE("TourOperador facturacion", rLin.TourOperador);
        END;

        rLin."Tipo transfer"::Salida: BEGIN
          aux_rsv.SETCURRENTKEY("Agrupacion salida",
                                     "Hotel salida",
                                               Bono,
                                     "Vuelo salida",
                                     "Tipo Persona",
                                             Nombre);
          aux_rsv.SETRANGE("Agrupacion salida"       , rLin.Agrupacion);
          aux_rsv.SETRANGE("Zona venta salida"       , rLin.Destino);
          aux_rsv.SETRANGE("TourOperador facturacion", rLin.TourOperador);
        END;
      END;

      // Para la misma agrupaci¢n, touroperador y zona el tipo de precio sera igual

      IF rLin."Tipo linea" = rLin."Tipo linea"::Vehiculo THEN
        lwTotalPax := _TotalAgrupacion(rLin.Agrupacion, rLin.Destino, rLin."Tipo transfer")
      ELSE BEGIN
        CLEAR(lwTotalPax);
        IF rLin."Tipo linea" = rLin."Tipo linea"::Persona THEN
          aux_rsv.SETRANGE("Tipo Persona", rLin."Tipo Pax");
      END;

      // AJS 08.02.2007
      // No hay que crear una linea para los invitados

      aux_rsv.SETRANGE("Invitado TourOperador", FALSE);

      IF (rLin."Tipo linea" = rLin."Tipo linea"::Persona) OR
         (rLin."Tipo linea" = rLin."Tipo linea"::Vehiculo) THEN BEGIN

        IF aux_rsv.FINDSET THEN BEGIN
          REPEAT
            lrLinFraInc.RESET;
            lrLinFraInc.SETRANGE("Tipo documento", wTipoDoc);
            lrLinFraInc.SETRANGE("N§ documento"  , wNumDoc);
            lrLinFraInc.SETRANGE(Bono            , aux_rsv.Bono);

            IF rLin."Tipo transfer" = rLin."Tipo transfer"::Entrada THEN
              lrLinFraInc.SETRANGE(Fecha , aux_rsv."Fecha entrada")
            ELSE
              lrLinFraInc.SETRANGE(Fecha , aux_rsv."Fecha salida");

            IF rLin."Tipo linea" <> rLin."Tipo linea"::Vehiculo THEN
              lrLinFraInc.SETRANGE("Tipo Pax", aux_rsv."Tipo Persona");

            lrLinFraInc.SETRANGE(Agrupacion, rLin.Agrupacion);
            lrLinFraInc.SETRANGE(Zona      , rLin.Destino);
            IF NOT lrLinFraInc.FINDFIRST THEN BEGIN
              CLEAR(lrLinFraInc);
              lrLinFraInc."Tipo documento"     := wTipoDoc;
              lrLinFraInc."N§ documento"       := wNumDoc;
              lrLinFraInc."Line No."           := lrLinFraInc.NewLineNo;
              lrLinFraInc."Tipo Pax"           := rLin."Tipo Pax";
              lrLinFraInc.Zona                 := rLin.Destino;
              lrLinFraInc.TourOperador         := rLin.TourOperador;
              lrLinFraInc."N§ Reserva"         := aux_rsv."N§ Reserva";

              //+$009 <
              IF rLin."Tipo transfer" = rLin."Tipo transfer"::Salida THEN
                lrLinFraInc.Vuelo := aux_rsv."Compa¤ia salida" + ' ' + aux_rsv."Vuelo salida" + ' ' +
                                     aux_rsv."IATA origen salida" + '-' + aux_rsv."IATA destino salida"
              ELSE
                lrLinFraInc.Vuelo := aux_rsv."Compa¤ia entrada" + ' ' + aux_rsv."Vuelo entrada" + ' ' +
                                     aux_rsv."IATA origen entrada" + '-' + aux_rsv."IATA destino entrada";
              //+$009 >

              // Buscar el codigo de hotel del touroperador en funcion del indicado en el periodo de la reserva

              IF lrPer.GET(aux_rsv.Delegacion, aux_rsv."N§ Interno", aux_rsv."N§ Periodo") THEN BEGIN
                IF lrPer."Hotel TO" <> '' THEN
                  lrLinFraInc.Hotel := lrPer."Hotel TO"
                ELSE
                  lrLinFraInc.Hotel := lrPer."Hotel reservado"
              END;

              lrLinFraInc."Tipo vehiculo"      := rLin."Tipo Vehiculo";
              lrLinFraInc.NoPrefactura         := rLin."N§ Prefactura";
              lrLinFraInc.Agrupacion           := rLin.Agrupacion;
              lrLinFraInc."Impuesto Incluidos" := rLin."Impuestos Incluido";
              lrLinFraInc."% IVA"              := rLin."% Impuestos";
              lrLinFraInc.Bono                 := aux_rsv.Bono;
              IF rLin."Tipo transfer" = rLin."Tipo transfer"::Entrada THEN
                lrLinFraInc.Fecha := aux_rsv."Fecha entrada"
              ELSE
                lrLinFraInc.Fecha := aux_rsv."Fecha salida";
              lrLinFraInc.INSERT(TRUE);
            END;

            CASE rLin."Tipo linea" OF
              rLin."Tipo linea"::Persona: BEGIN
                lrLinFraInc.Precio   := rLin."Precio x Pax";
                lrLinFraInc.Cantidad += 1;
                lrLinFraInc.VALIDATE(Importe, lrLinFraInc.Precio * lrLinFraInc.Cantidad);
                lrLinFraInc."Tipo Linea" := lrLinFraInc."Tipo Linea"::Persona;
              END;
              rLin."Tipo linea"::Vehiculo: BEGIN
                lrLinFraInc.Cantidad := 1;
                lrLinFraInc.Precio := rLin."Precio x Vehiculo";

                // ----  Si el precio es por vehiculo, solo pondremos el importe en una linea por cada agrupacion - zona
                // ----  el resto de los bonos solo figuran a efectos informativos del touroperador

                lrLinFraInc2.RESET;
                lrLinFraInc2.SETRANGE ("Tipo documento", wTipoDoc);
                lrLinFraInc2.SETRANGE ("N§ documento"  , wNumDoc);
                lrLinFraInc2.SETRANGE ("Tipo Linea"    , lrLinFraInc2."Tipo Linea"::Persona);
                lrLinFraInc2.SETRANGE (Agrupacion      , rLin.Agrupacion);
                lrLinFraInc2.SETRANGE (Zona            , rLin.Destino);
                lrLinFraInc2.SETFILTER("Line No."      , '<>%1', lrLinFraInc."Line No.");
                IF NOT lrLinFraInc2.FINDFIRST THEN BEGIN
                  lrLinFraInc.VALIDATE(Importe , lrLinFraInc.Precio * lrLinFraInc.Cantidad);
                  lrLinFraInc."Tipo Linea"     := lrLinFraInc2."Tipo Linea"::Persona;

                  // AJS 23.02.2005
                  // Marcamos las lineas que tienen precio x vehiculo para mostrar aviso en la impresion de la factura

                  lrLinFraInc."Precio x vehiculo" := TRUE;
                END
                ELSE BEGIN
                  lrLinFraInc.Cantidad := 0;
                  lrLinFraInc.Precio   := 0;
                END;
              END;
            END;
            lrLinFraInc.SetImportes;
            lrLinFraInc.MODIFY;
          UNTIL aux_rsv.NEXT = 0;
        END;
      END;

      // Tomamos las lineas no HUMANO para el precio de los suplementos

      CASE rLin."Tipo linea" OF
        rLin."Tipo linea"::Suplemento:
        BEGIN
          // Desglosamos los suplementos por cada Booking

          _desglose_suplemento(aux_rsv, rLin, wTipoDoc, wNumDoc);
        END;
      END;
    END;

    LOCAL PROCEDURE _comp_aplicacion_suplemento@1103355002(prRsv@1103355000 : Record 7009744;pwCodSuplemento@1103355001 : Code[10];VAR pwCantidad@1103355003 : Decimal) : Boolean;
    VAR
      lrElemTransfer@1103355002 : Record 7009792;
    BEGIN
      // comp_aplicacion_suplemento

      lrElemTransfer.RESET;
      lrElemTransfer.SETRANGE (Delegacion        , prRsv.Delegacion);
      lrElemTransfer.SETRANGE ("N§ Reserva"      , prRsv."N§ Reserva");
      lrElemTransfer.SETRANGE ("Tipo elemento"   , pwCodSuplemento);
      lrElemTransfer.SETFILTER("Numero elementos", '<>%1', 0);
      lrElemTransfer.SETRANGE (Humano            , FALSE);
      IF lrElemTransfer.FINDFIRST THEN
      BEGIN
        pwCantidad := lrElemTransfer."Numero elementos";
        EXIT(TRUE);
      END
      ELSE
      BEGIN
        pwCantidad := 0;
        EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE _desglose_suplemento@1103355006(VAR prRsv@1103355000 : Record 7009744;prLin@1103355001 : Record 7009805;wTipoDoc@1103355006 : Integer;wNumDoc@1103355004 : Code[20]);
    VAR
      lwCantidadSupl@1103355003 : Decimal;
      lwOkSuplemento@1103355002 : Boolean;
      lrLinFraInc@1103355005 : Record 7009909;
    BEGIN
      // desglose_suplemento

      IF prRsv.FINDSET THEN
      BEGIN
        REPEAT

          // Comprobar si la linea de suplemento aplica en esta reserva

          lwOkSuplemento := _comp_aplicacion_suplemento(prRsv, rLin."Tipo Pax", lwCantidadSupl);

          IF lwOkSuplemento THEN
          BEGIN
            CLEAR(lrLinFraInc);
            lrLinFraInc.SETRANGE("Tipo documento", wTipoDoc);
            lrLinFraInc.SETRANGE("N§ documento"  , wNumDoc);
            lrLinFraInc.SETRANGE("Tipo Pax"      , prLin."Tipo Pax");
            lrLinFraInc.SETRANGE("Tipo Linea"    , lrLinFraInc."Tipo Linea"::Suplemento);
            lrLinFraInc.SETRANGE(Precio          , prLin."Precio x Pax");
            lrLinFraInc.SETRANGE(Bono            , prRsv.Bono);
            lrLinFraInc.SETRANGE(Agrupacion      , prLin.Agrupacion);
            IF rLin.Destino <> '' THEN
              lrLinFraInc.SETRANGE(Zona, rLin.Destino);
            IF NOT lrLinFraInc.FINDFIRST THEN BEGIN
              lrLinFraInc.INIT;
              lrLinFraInc."Tipo documento"     := wTipoDoc;
              lrLinFraInc."N§ documento"       := wNumDoc;
              lrLinFraInc."Line No."           := lrLinFraInc.NewLineNo;
              lrLinFraInc.Zona                 := rLin.Destino;
              lrLinFraInc."Tipo Pax"           := rLin."Tipo Pax";
              lrLinFraInc."Tipo Linea"         := lrLinFraInc."Tipo Linea"::Suplemento;
              lrLinFraInc.Agrupacion           := rLin.Agrupacion;
              lrLinFraInc.Bono                 := prRsv.Bono;
              lrLinFraInc."Impuesto Incluidos" := rLin."Impuestos Incluido";
              lrLinFraInc."% IVA"              := rLin."% Impuestos";
              lrLinFraInc.Precio               := rLin."Precio x Pax";
              lrLinFraInc.INSERT(TRUE);
            END;
            lrLinFraInc.Cantidad += lwCantidadSupl;
            lrLinFraInc.VALIDATE(Importe , lrLinFraInc.Precio * lrLinFraInc.Cantidad);
            lrLinFraInc.SetImportes;
            lrLinFraInc.MODIFY;
          END;
        UNTIL prRsv.NEXT = 0;
      END
    END;

    LOCAL PROCEDURE _TotalAgrupacion@38(pwAgrupacion@1103355000 : Integer;pwZona@1103355001 : Code[10];pwOrden@1103355002 : 'Entrada,Salida') : Integer;
    VAR
      lrReserva@1103355003 : Record 7009744;
    BEGIN
      // Total Agrupacion
      // Devuelve el total de pax para una agrupaci¢n dada segun una zona de entrada o salida
      // Utilizado para prorratear el precio por vehiculo entre todos las paxes

      lrReserva.RESET;
      CASE pwOrden OF
        pwOrden::Entrada: BEGIN
          lrReserva.SETCURRENTKEY("Agrupacion entrada");
          lrReserva.SETRANGE("Agrupacion entrada" , pwAgrupacion);
          lrReserva.SETRANGE("Zona venta entrada" , pwZona);
        END;
        pwOrden::Salida: BEGIN
          lrReserva.SETCURRENTKEY("Agrupacion salida");
          lrReserva.SETRANGE("Agrupacion salida" , pwAgrupacion);
          lrReserva.SETRANGE("Zona venta salida" , pwZona);
        END;
      END;
      EXIT(lrReserva.COUNT);
    END;

    LOCAL PROCEDURE _CrearLineasImpresion@1103355001(aux_prefactura@1103355000 : Code[20];wTipoDoc@1103355002 : Integer;wNumDoc@1103355001 : Code[20];pwDestino@1000000000 : Code[20]);
    BEGIN
      // CrearLineasImpresion

      // La rutina linea_bono crea las lineas de factura para impresion

      rLin.RESET;
      rLin.SETCURRENTKEY(Concepto,
                         "N§ Prefactura",
                         Agrupacion);
      rLin.SETRANGE(Concepto       , Text003);
      rLin.SETRANGE("N§ Prefactura", aux_prefactura);
      IF rLin.FINDSET THEN BEGIN
        REPEAT
          IF rPar."Tipo Desglose Transfer" = rPar."Tipo Desglose Transfer"::Zona THEN
            _LineaFacturaZona(rLin, wTipoDoc, wNumDoc)
          ELSE
            _linea_bono(wTipoDoc, wNumDoc);

          //. Con este bucle traspasamos las reservas a la empresa comercializadora
          TraspasarCOM(rLin, 1, pwDestino);
        UNTIL rLin.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _ComprobarFechaFacturacion@1103355003(pwUltFecha@1103355000 : Date);
    BEGIN
      // ComprobarFechaFacturacion.
      //: Comprueba que la £ltima fecha de la facturaci¢n pertenezca al ms de trabajo

      IF (DATE2DMY(pwUltFecha, 2) <> DATE2DMY(WORKDATE, 2)) OR
         (DATE2DMY(pwUltFecha, 3) <> DATE2DMY(WORKDATE, 3))
      THEN
        IF NOT CONFIRM(Text052, FALSE, FORMAT(pwUltFecha,0,'<Month Text> de <Year4,4>'),
                                       FORMAT(WORKDATE,0,'<Month Text> de <Year4,4>'))
        THEN
          ERROR('');
    END;

    LOCAL PROCEDURE _LineaFacturaZona@12(prLin@1100217000 : Record 7009805;pwTipoDocumento@1100217001 : Integer;pwNumDocumento@1100217002 : Code[20]);
    VAR
      lrLinFac@1100217003 : Record 7009909;
      lrCodSupl@1100217004 : Record 7009715;
    BEGIN
      // _LineaFacturaZona

      //. De las lineas de calculo con importe cero no se generan lineas de factura impresion

      IF prLin."Importe con impuesto" = 0 THEN
        EXIT;

      CLEAR(lrLinFac);
      lrLinFac."Tipo documento" := pwTipoDocumento;
      lrLinFac."N§ documento"   := pwNumDocumento;
      lrLinFac.INSERT(TRUE);

      lrLinFac."Tipo Pax"           := prLin."Tipo Pax";
      lrLinFac.Zona                 := prLin.Destino;
      lrLinFac.NoPrefactura         := prLin."N§ Prefactura";
      lrLinFac.Agrupacion           := prLin.Agrupacion;
      lrLinFac."Impuesto Incluidos" := prLin."Impuestos Incluido";
      lrLinFac."% IVA"              := prLin."% Impuestos";
      lrLinFac.Fecha                := prLin.Fecha;
      lrLinFac.Cantidad             := prLin."Cantidad aplicada";
      lrLinFac.TourOperador         := prLin.TourOperador;
      lrLinFac.Vuelo                := COPYSTR(prLin.Vuelos, 1, MAXSTRLEN(lrLinFac.Vuelo)); //+$019
      lrLinFac."Tipo vehiculo"      := prLin."Tipo Vehiculo";
      lrLinFac.NoPrefactura         := prLin."N§ Prefactura";
      lrLinFac.Agrupacion           := prLin.Agrupacion;

      CASE prLin."Tipo linea" OF
        prLin."Tipo linea"::Persona: lrLinFac.Precio  := prLin."Precio x Pax";
        prLin."Tipo linea"::Vehiculo: lrLinFac.Precio := prLin."Precio x Vehiculo";
        prLin."Tipo linea"::Suplemento: lrLinFac.Precio  := prLin."Precio x Pax";
      END;

      //-$026lrLinFac.Concepto     := lrLinFac.NomConcepto(prLin.Concepto);
      lrLinFac.Concepto     := prLin.Concepto; //+$026

      lrLinFac.TourOperador := prLin.TourOperador;
      CASE prLin."Tipo linea" OF
        prLin."Tipo linea"::Persona:
        BEGIN
          lrLinFac.Subconcepto  := prLin."Tipo Pax";
          lrLinFac.Descripcion  :=
            prLin."Origen/Destino transfer" + ' ' + lrLinFac.NomConcepto(prLin.Concepto) + ' ' + prLin.Destino + ' ' + prLin."Tipo Pax";
        END;
        prLin."Tipo linea"::Vehiculo:
        BEGIN
          lrLinFac.Cantidad := 1;
          lrLinFac."Precio x vehiculo" := TRUE;
          lrLinFac.Descripcion  :=
            prLin."Origen/Destino transfer" + ' ' + lrLinFac.NomConcepto(prLin.Concepto) + ' ' + prLin.Destino;
        END;
        prLin."Tipo linea"::Suplemento:
        BEGIN
          IF NOT lrCodSupl.GET(prLin."Tipo Pax") THEN
            CLEAR(lrCodSupl);

          lrLinFac.Subconcepto := prLin."Tipo Pax";
          lrLinFac.Descripcion := prLin."Origen/Destino transfer" + ' ' + lrCodSupl.Descripcion + ' ' + prLin.Destino;
        END;
      END;

      IF prLin.Abono THEN
        lrLinFac."Tipo Linea" := lrLinFac."Tipo Linea"::Abono;

      lrLinFac.VALIDATE(Importe, lrLinFac.Precio * lrLinFac.Cantidad);
      lrLinFac.SetImportes;

      lrLinFac.MODIFY;
    END;

    LOCAL PROCEDURE _LineaContableResumen@1100217005(pwImporte@1100217001 : Decimal;prCabFra@1100217000 : Record 36);
    BEGIN
      // _LineaContableResumen

      //. Esta funci¢n la vamos a utilizar cuando solo nos interesa crear una linea de factura por el total
      //. de la factura

      wLineaFactura += 10000;

      CLEAR(rLinFra);
      rLinFra.VALIDATE("Document Type", prCabFra."Document Type");
      rLinFra.VALIDATE("Document No." , prCabFra."No.");
      rLinFra.VALIDATE(Type           , rLinFra.Type::"G/L Account");
      rLinFra.VALIDATE("Line No."     , wLineaFactura);
      rLinFra.INSERT;

      ventana.UPDATE(2, rLinFra."Line No.");

      rLinFra.VALIDATE("No."                      , rCtas."Cta. venta transfer");
      rLinFra.VALIDATE("Shortcut Dimension 1 Code", prCabFra."Shortcut Dimension 1 Code");
      rLinFra.VALIDATE("Shortcut Dimension 2 Code", prCabFra."Shortcut Dimension 2 Code");
      rLinFra.VALIDATE("Allow Invoice Disc."      , FALSE);
      rLinFra.VALIDATE(Quantity                   , 1);
      rLinFra.VALIDATE("VAT Bus. Posting Group"   , rCli."VAT Bus. Posting Group");
      rLinFra.VALIDATE("VAT Prod. Posting Group"  , rConV."Gr. Registro IVA Producto");
      rLinFra.VALIDATE("Unit Price"               , pwImporte);

      //+$003
      IF rConV."Impuestos incluidos" THEN BEGIN
        rLinFra."Amount Including VAT" := rLinFra."Line Amount";
        rLinFra.Amount                 := ROUND(rLinFra."Line Amount" / (1 + ((rLinFra."VAT %" + rLinFra."EC %") / 100) ) );
      END
      ELSE BEGIN
        rLinFra.Amount                 := rLinFra."Line Amount";
        rLinFra."Amount Including VAT" := ROUND(rLinFra."Line Amount" * (1 + ((rLinFra."VAT %" + rLinFra."EC %") / 100) ) );
      END;
      //+$003

      rLinFra."Line Discount %" := 0;
      rLinFra.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE _MarcarLineasFPR@1100217002(pwNumFra@1100217002 : Code[20]);
    VAR
      lrLin@1100217000 : Record 7009805;
      aux_lin@1100217001 : Record 7009805;
    BEGIN
      // _MarcarLineasFPR

      lrLin.RESET;
      lrLin.SETCURRENTKEY("Marca FPR");
      lrLin.SETRANGE("Marca FPR"    , USERID);
      lrLin.SETRANGE("Pendiente FPR", TRUE);
      IF lrLin.FINDSET THEN
      BEGIN
        REPEAT
          aux_lin := lrLin;
          aux_lin."Pendiente FPR" := FALSE;
          aux_lin."Factura FPR"   := pwNumFra;
          aux_lin."Fecha FPR"     := TODAY;
          aux_lin."Hora FPR"      := TIME;
          aux_lin."Usuario FPR"   := USERID;
          aux_lin."Marca FPR"     := '';
          aux_lin.MODIFY;
        UNTIL lrLin.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _CheckReasonCode@1000000008();
    VAR
      lrReason@1000000000 : Record 231;
      TextCodAu@1000000001 : TextConst 'ENU=ATENNEA;ESP=ATENNEA';
    BEGIN
      // _CheckReasonCode

      IF NOT lrReason.GET(TextCodAu) THEN
      BEGIN
        lrReason.INIT;
        lrReason.Code        := TextCodAu;
        lrReason.Description := lrReason.Code;
        lrReason.INSERT;
      END;
    END;

    PROCEDURE TraspasarCOM@1000000001(prLin@1000000000 : Record 7009805;pwSigno@1000000002 : Integer;pwDestino@1000000003 : Code[20]);
    VAR
      lrTO@1000000001 : Record 7009717;
    BEGIN
      // _TraspasarCOM

      //. Las lineas de importe cero o de abono no van a generar informaci¢n en comercializadora
      IF (prLin.Importe = 0) OR (prLin.Abono) THEN
        EXIT;

      //. Solo los touroperadores configurados traspasan informaci¢n a la comercializadora
      lrTO.GET(prLin.TourOperador);
      IF lrTO."Empresa comercializadora" = '' THEN
        EXIT;

      IF prLin."Tipo transfer" = prLin."Tipo transfer"::Entrada THEN
        _TraspasarCOM_E(prLin, lrTO."Empresa comercializadora", pwSigno, pwDestino)
      ELSE
        _TraspasarCOM_S(prLin, lrTO."Empresa comercializadora", pwSigno, pwDestino);
    END;

    LOCAL PROCEDURE _TraspasarCOM_E@1000000002(prLin@1000000000 : Record 7009805;pwEmpresa@1000000001 : Text[30];pwSigno@1000000003 : Integer;pwDestino@1000000005 : Code[20]);
    VAR
      lrRsv@1000000004 : Record 7009744;
      lwCantidadSupl@1000000002 : Decimal;
    BEGIN
      // _TraspasarCOM_E

      //. Recorremos las reservas asociadas con la linea de ingreso que estamos facturando
      lrRsv.RESET;
      lrRsv.SETCURRENTKEY("Agrupacion entrada");
      lrRsv.SETRANGE("Agrupacion entrada"      , prLin.Agrupacion);
      lrRsv.SETRANGE("Zona venta entrada"      , prLin.Destino);
      lrRsv.SETRANGE("TourOperador facturacion", prLin.TourOperador);
      IF prLin."Tipo linea" = prLin."Tipo linea"::Persona THEN
        lrRsv.SETRANGE("Tipo Persona", prLin."Tipo Pax");
      IF lrRsv.FINDSET THEN
      BEGIN
        REPEAT
          IF prLin."Tipo linea" = prLin."Tipo linea"::Suplemento THEN
          BEGIN
            IF _comp_aplicacion_suplemento(lrRsv, prLin."Tipo Pax", lwCantidadSupl) THEN
              _TraspasarSuplementoCOM(lrRsv, lrRsv."Fecha entrada", lrRsv."Agrupacion entrada", rLin."Tipo Pax",
                                      lwCantidadSupl, pwEmpresa, pwSigno, pwDestino);
          END
          ELSE
          BEGIN
            _TraspasarReservaCOM(lrRsv, lrRsv."Fecha entrada", TRUE, prLin.Origen, pwEmpresa, pwSigno, pwDestino);
          END;
        UNTIL lrRsv.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _TraspasarCOM_S@1000000003(prLin@1000000000 : Record 7009805;pwEmpresa@1000000001 : Text[30];pwSigno@1000000004 : Integer;pwDestino@1000000005 : Code[20]);
    VAR
      lrRsv@1000000002 : Record 7009744;
      lwCantidadSupl@1000000003 : Decimal;
    BEGIN
      // _TraspasarCOM_S

      //. Recorremos las reservas asociadas con la linea de ingreso que estamos facturando
      lrRsv.RESET;
      lrRsv.SETCURRENTKEY("Agrupacion salida");
      lrRsv.SETRANGE("Agrupacion salida"       , prLin.Agrupacion);
      lrRsv.SETRANGE("Zona venta salida"       , prLin.Destino);
      lrRsv.SETRANGE("TourOperador facturacion", prLin.TourOperador);
      IF prLin."Tipo linea" = prLin."Tipo linea"::Persona THEN
        lrRsv.SETRANGE("Tipo Persona", prLin."Tipo Pax");
      IF lrRsv.FINDSET THEN
      BEGIN
        REPEAT
          IF prLin."Tipo linea" = prLin."Tipo linea"::Suplemento THEN
          BEGIN
            IF _comp_aplicacion_suplemento(lrRsv, prLin."Tipo Pax", lwCantidadSupl) THEN
              _TraspasarSuplementoCOM(lrRsv, lrRsv."Fecha salida", lrRsv."Agrupacion salida", rLin."Tipo Pax",
                                      lwCantidadSupl, pwEmpresa, pwSigno, pwDestino);
          END
          ELSE
          BEGIN
            _TraspasarReservaCOM(lrRsv, lrRsv."Fecha salida", FALSE, prLin.Origen, pwEmpresa, pwSigno, pwDestino);
          END;
        UNTIL lrRsv.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _TraspasarReservaCOM@1000000006(prRsv@1000000003 : Record 7009744;pwFechaServicio@1000000006 : Date;pwEntrada@1000000007 : Boolean;pwOrigen@1000000008 : Code[10];pwEmpresa@1000000005 : Text[30];pwSigno@1000000000 : Integer;pwDestino@1000000013 : Code[20]);
    VAR
      lrRsvCOM@1000000002 : Record 7009931;
      lrRsvCOMDet@1000000001 : Record 7009932;
      lrRsvCOMDet2@1000000004 : Record 7009932;
      lrParPer@1000000010 : Record 7009701;
      lrCabRsv@1000000012 : Record 7009741;
      lrTO@1000000009 : Record 7009717;
      lwIdDetalle@1000000011 : Integer;
      lwTouroperador@1000000014 : Code[10];
    BEGIN
      // _TraspasarReservaCOM

      //. Pasar la informacion relevante de la reserva transfer a la empresa comercializadora

      lrParPer.FINDFIRST;

      //+$038 <
      lrTO.GET(prRsv."TourOperador facturacion");
      IF lrTO."Codigo en comercializadora" <> '' THEN
        lwTouroperador := lrTO."Codigo en comercializadora"
      ELSE
        lwTouroperador := prRsv."TourOperador facturacion";
      //+$038 >

      lrRsvCOM.RESET;
      lrRsvCOM.CHANGECOMPANY(pwEmpresa);
      //-$038lrRsvCOM.SETRANGE(Delegacion      , prRsv.Delegacion);
      //-$038lrRsvCOM.SETRANGE(Touroperador    , prRsv."TourOperador facturacion");
      lrRsvCOM.SETRANGE(Destino         , pwDestino);
      lrRsvCOM.SETRANGE(Touroperador    , lwTouroperador);
      lrRsvCOM.SETRANGE("Num. Bono"     , prRsv.Bono);
      lrRsvCOM.SETRANGE("Fecha servicio", pwFechaServicio);
      IF pwEntrada THEN
        lrRsvCOM.SETRANGE("ID Servicio", prRsv."Agrupacion entrada")
      ELSE
        lrRsvCOM.SETRANGE("ID Servicio", prRsv."Agrupacion salida");
      IF NOT lrRsvCOM.FINDFIRST THEN
      BEGIN
        lrCabRsv.GET(prRsv.Delegacion, prRsv."N§ Interno");

        lrRsvCOM.INIT;

        //-$039lrRsvCOM.Delegacion       := prRsv.Delegacion;
        lrRsvCOM.Destino              := pwDestino; //+$039
        lrRsvCOM.Touroperador         := lwTouroperador; //+$038
        lrRsvCOM."Num. Bono"          := prRsv.Bono;
        lrRsvCOM."Fecha servicio"     := pwFechaServicio;
        lrRsvCOM."Nombre cliente"     := prRsv.Nombre;
        lrRsvCOM."Canal venta"        := prRsv."Canal venta";
        lrRsvCOM."Tipo operacion"     := lrCabRsv."Tipo Operacion";
        lrRsvCOM."Delegacion Atennea" := prRsv.Delegacion; //+$040
        IF pwEntrada THEN
        BEGIN
          lrRsvCOM."ID Servicio"         := prRsv."Agrupacion entrada";
          lrRsvCOM."Direccion transfer"  := lrRsvCOM."Direccion transfer"::Llegada;
          lrRsvCOM."Aeropuerto local"    := prRsv."IATA destino entrada";
          lrRsvCOM."Zona aeropuerto"     := pwOrigen;
          lrRsvCOM.Hotel                 := prRsv."Hotel entrada";
          lrRsvCOM."Zona hotel"          := prRsv."Zona entrada";
          lrRsvCOM."Tipo servicio venta" := prRsv."Servicio transfer entrada";
          lrRsvCOM."Compa¤ia aerea"      := prRsv."Compa¤ia entrada";
          lrRsvCOM."Num. Vuelo"          := prRsv."Vuelo entrada";
        END
        ELSE
        BEGIN
          lrRsvCOM."ID Servicio"         := prRsv."Agrupacion salida";
          lrRsvCOM."Direccion transfer"  := lrRsvCOM."Direccion transfer"::Salida;
          lrRsvCOM."Aeropuerto local"    := prRsv."IATA origen salida";
          lrRsvCOM."Zona aeropuerto"     := pwOrigen;
          lrRsvCOM.Hotel                 := prRsv."Hotel salida";
          lrRsvCOM."Zona hotel"          := prRsv."Zona salida";
          lrRsvCOM."Tipo servicio venta" := prRsv."Servicio transfer salida";
          lrRsvCOM."Compa¤ia aerea"      := prRsv."Compa¤ia salida";
          lrRsvCOM."Num. Vuelo"          := prRsv."Vuelo salida";
        END;

        lrRsvCOM.INSERT(TRUE);
      END
      ELSE
      BEGIN
        lrRsvCOM.Calculada := FALSE;
        lrRsvCOM.MODIFY;
      END;

      //. Buscamos el ID de detalle
      lrRsvCOMDet2.RESET;
      lrRsvCOMDet2.CHANGECOMPANY(pwEmpresa);
      lrRsvCOMDet2.SETRANGE(Destino         , lrRsvCOM.Destino);
      lrRsvCOMDet2.SETRANGE(Touroperador    , lrRsvCOM.Touroperador);
      lrRsvCOMDet2.SETRANGE("Num. Bono"     , lrRsvCOM."Num. Bono");
      lrRsvCOMDet2.SETRANGE("Fecha servicio", lrRsvCOM."Fecha servicio");
      lrRsvCOMDet2.SETRANGE("ID Servicio"   , lrRsvCOM."ID Servicio");
      IF lrRsvCOMDet2.FINDLAST THEN
        lwIdDetalle := lrRsvCOMDet2."ID Detalle" + 1
      ELSE
        lwIdDetalle := 1;

      //. Insertamos un registro de detalle para cada persona o cancelacion de persona
      lrRsvCOMDet.RESET;
      lrRsvCOMDet.CHANGECOMPANY(pwEmpresa);
      lrRsvCOMDet.Destino                 := lrRsvCOM.Destino;
      lrRsvCOMDet.Touroperador            := lrRsvCOM.Touroperador;
      lrRsvCOMDet."Num. Bono"             := lrRsvCOM."Num. Bono";
      lrRsvCOMDet."Fecha servicio"        := lrRsvCOM."Fecha servicio";
      lrRsvCOMDet."ID Servicio"           := lrRsvCOM."ID Servicio";
      lrRsvCOMDet."ID Detalle"            := lwIdDetalle;
      lrRsvCOMDet.Nombre                  := prRsv.Nombre;
      lrRsvCOMDet."Invitado touroperador" := prRsv."Invitado TourOperador";
      CASE prRsv."Tipo Persona" OF
        lrParPer."Codigo Adulto":
        BEGIN
          lrRsvCOMDet."Tipo persona" := lrRsvCOMDet."Tipo persona"::Adulto;
          lrRsvCOMDet.Adulto         := pwSigno * 1;
        END;
        lrParPer."Codigo Ni¤o":
        BEGIN
          lrRsvCOMDet."Tipo persona" := lrRsvCOMDet."Tipo persona"::Ni¤o;
          lrRsvCOMDet.Ni¤o           := pwSigno * 1;
        END;
        lrParPer."Codigo Infant":
        BEGIN
          lrRsvCOMDet."Tipo persona" := lrRsvCOMDet."Tipo persona"::Infant;
          lrRsvCOMDet.Infant         := pwSigno * 1;
        END;
      END;

      lrRsvCOMDet.INSERT(TRUE);

      _SincronizaMaestrosCOM(prRsv, pwEntrada, pwEmpresa);
    END;

    LOCAL PROCEDURE _TraspasarSuplementoCOM@1000000013(prRsv@1000000006 : Record 7009744;pwFechaServicio@1000000005 : Date;pwServicio@1000000009 : Integer;pwCodigoSuplemento@1000000004 : Code[10];pwCantidad@1000000001 : Decimal;pwEmpresa@1000000000 : Text[30];pwSigno@1000000010 : Integer;pwDestino@1000000013 : Code[20]);
    VAR
      lrSuplCOM@1000000008 : Record 7009933;
      lrSuplemento@1000000002 : Record 7009715;
      lrTO@1000000011 : Record 7009717;
      lcSincroCOM@1000000007 : Codeunit 7009793;
      lrRecRef@1000000003 : RecordRef;
      lwTouroperador@1000000012 : Code[10];
    BEGIN
      // _TraspasarSuplementoCOM

      //+$038 <
      lrTO.GET(prRsv."TourOperador facturacion");
      IF lrTO."Codigo en comercializadora" <> '' THEN
        lwTouroperador := lrTO."Codigo en comercializadora"
      ELSE
        lwTouroperador := prRsv."TourOperador facturacion";
      //+$038 >

      //. Pasar la informaci¢n del suplemento de la reserva a comercializadora

      lrSuplCOM.RESET;
      lrSuplCOM.CHANGECOMPANY(pwEmpresa);
      //-$039lrSuplCOM.SETRANGE(Delegacion         , prRsv.Delegacion);
      lrSuplCOM.SETRANGE(Destino         , pwDestino); //+$039
      //-$038lrSuplCOM.SETRANGE(Touroperador       , prRsv."TourOperador facturacion");
      lrSuplCOM.SETRANGE(Touroperador       , lwTouroperador); //+$038
      lrSuplCOM.SETRANGE("Num. Bono"        , prRsv.Bono);
      lrSuplCOM.SETRANGE("Fecha servicio"   , pwFechaServicio);
      lrSuplCOM.SETRANGE("ID Servicio"      , pwServicio);
      lrSuplCOM.SETRANGE("Codigo suplemento", pwCodigoSuplemento);
      IF NOT lrSuplCOM.FINDFIRST THEN
      BEGIN
        lrSuplCOM.INIT;
        //-$039lrSuplCOM.Delegacion          := prRsv.Delegacion;
        lrSuplCOM.Destino := pwDestino;
        //-$038lrSuplCOM.Touroperador        := prRsv."TourOperador facturacion";
        lrSuplCOM.Touroperador         := lwTouroperador; //+$038
        lrSuplCOM."Num. Bono"          := prRsv.Bono;
        lrSuplCOM."Fecha servicio"     := pwFechaServicio;
        lrSuplCOM."ID Servicio"        := pwServicio;
        lrSuplCOM."Codigo suplemento"  := pwCodigoSuplemento;
        lrSuplCOM.INSERT;
      END;

      lrSuplCOM.Cantidad += (pwSigno * pwCantidad);

      lrSuplCOM.MODIFY;

      //. Sincronizamos el codigo de suplemento
      lrSuplemento.GET(pwCodigoSuplemento);
      lrRecRef.GETTABLE(lrSuplemento);
      lcSincroCOM.SincronizaTabla(lrRecRef, lrRecRef, lcSincroCOM.OpInsert, pwEmpresa);
    END;

    LOCAL PROCEDURE _SincronizaMaestrosCOM@1000000005(prRsv@1000000000 : Record 7009744;pwEntrada@1000000002 : Boolean;pwEmpresa@1000000001 : Text[30]);
    VAR
      lrRecRef@1000000003 : RecordRef;
      lcSincroCOM@1000000004 : Codeunit 7009793;
      lrHotel@1000000005 : Record 7009724;
      lrCompa¤ia@1000000006 : Record 7009753;
      lrAeropuerto@1000000007 : Record 7009704;
    BEGIN
      // _SincronizaMaestrosCOM

      //. Esta funci¢n sincroniza los registros de las tablas maestras necesarias con la empresa comercializadora

      IF pwEntrada THEN
      BEGIN
        IF lrHotel.GET(prRsv."Hotel entrada") THEN
        BEGIN
          lrRecRef.GETTABLE(lrHotel);
          lcSincroCOM.SincronizaTabla(lrRecRef, lrRecRef, lcSincroCOM.OpInsert, pwEmpresa);
        END;

        IF lrCompa¤ia.GET(prRsv."Compa¤ia entrada") THEN
        BEGIN
          lrRecRef.GETTABLE(lrCompa¤ia);
          lcSincroCOM.SincronizaTabla(lrRecRef, lrRecRef, lcSincroCOM.OpInsert, pwEmpresa);
        END;

        IF lrAeropuerto.GET(prRsv."IATA destino entrada") THEN
        BEGIN
          lrRecRef.GETTABLE(lrAeropuerto);
          lcSincroCOM.SincronizaTabla(lrRecRef, lrRecRef, lcSincroCOM.OpInsert, pwEmpresa);
        END;
      END
      ELSE
      BEGIN
        IF lrHotel.GET(prRsv."Hotel salida") THEN
        BEGIN
          lrRecRef.GETTABLE(lrHotel);
          lcSincroCOM.SincronizaTabla(lrRecRef, lrRecRef, lcSincroCOM.OpInsert, pwEmpresa);
        END;

        IF lrCompa¤ia.GET(prRsv."Compa¤ia salida") THEN
        BEGIN
          lrRecRef.GETTABLE(lrCompa¤ia);
          lcSincroCOM.SincronizaTabla(lrRecRef, lrRecRef, lcSincroCOM.OpInsert, pwEmpresa);
        END;

        IF lrAeropuerto.GET(prRsv."IATA origen salida") THEN
        BEGIN
          lrRecRef.GETTABLE(lrAeropuerto);
          lcSincroCOM.SincronizaTabla(lrRecRef, lrRecRef, lcSincroCOM.OpInsert, pwEmpresa);
        END;
      END;


    END;

    LOCAL PROCEDURE _FacturaCompraCOM@1000000000(prCabVenta@1000000005 : Record 36;pwImporte@1000000006 : Decimal;pwTouroperador@1000000000 : Code[10]);
    VAR
      lcPar@1000000001 : Codeunit 7009700;
      lcNoSeriesMgt@1000000004 : Codeunit 396;
      lrCabCOM@1000000002 : Record 7009934;
      lrLinCOM@1000000003 : Record 7009935;
      lrTO@1000000007 : Record 7009717;
      lrDel@1000000008 : Record 7009718;
    BEGIN
      // _CrearCompraCOM

      IF NOT lrTO.GET(pwTouroperador) THEN
        EXIT;

      IF lrTO."Empresa comercializadora" = '' THEN
        EXIT;

      //. Creamos una serie para numerar estos documentos que luego traspasaremos a la comercializadora
      lcPar.CrearSerieEstandar('ATFACCOMER', Text0015, 'TR', TRUE, TRUE);

      //. Buscar la delegacion
      lrDel.GET(rPar.Delegacion);
      lrDel.TESTFIELD("Proveedor comercializadora");

      lrCabCOM.RESET;
      lrCabCOM.INIT;
      lrCabCOM.CHANGECOMPANY(lrTO."Empresa comercializadora");
      lrCabCOM."Tipo Documento"           := prCabVenta."Document Type";
      lrCabCOM."Num. Documento"           := lcNoSeriesMgt.GetNextNo('ATFACCOMER', TODAY, TRUE);
      lrCabCOM."Cod. Proveedor"           := lrDel."Proveedor comercializadora";
      lrCabCOM."Fecha registro"           := prCabVenta."Posting Date";
      lrCabCOM."Fecha emision"            := prCabVenta."Document Date";
      lrCabCOM."Texto registro"           := prCabVenta."Posting Description";
      lrCabCOM."Num. Documento proveedor" := prCabVenta."No.";
      lrCabCOM.Destino                    := prCabVenta."Shortcut Dimension 1 Code";

      //+$038 <
      IF lrTO."Codigo en comercializadora" <> '' THEN
        lrCabCOM.Touroperador := lrTO."Codigo en comercializadora"
      ELSE
        lrCabCOM.Touroperador := prCabVenta."Shortcut Dimension 2 Code";
      //+$038 >

      lrCabCOM."Precios impuestos incl."  := prCabVenta."Prices Including VAT";
      lrCabCOM.INSERT(TRUE);

      lrLinCOM.RESET;
      lrLinCOM.INIT;
      lrLinCOM.CHANGECOMPANY(lrTO."Empresa comercializadora");
      lrLinCOM."Tipo Documento" := lrCabCOM."Tipo Documento";
      lrLinCOM."Num. Documento" := lrCabCOM."Num. Documento";
      lrLinCOM."Num. Linea"     := 10000;
      lrLinCOM."Num. Cuenta"    := rCtas."Cta. compra transfer COM";
      lrLinCOM.Importe          := pwImporte;
      lrLinCOM.INSERT;
    END;

    BEGIN
    {
      $001 AJS 22092010 Elimino la posibilidad de buscar contratos de venta con el touroperador de grupo

      $002 AJS 22092010 En la funcion de comprobar cuentas incluyo un mensaje si no se encuentra contrato

      $003 AJS 26102011 En la funcion Rellena_Linea rellenamos los campos rLinFra.Amount y rLinFra."Amount Including VAT"

      $004 AJS 26102011 Para mejorar el rendimiento del proceso, utilizamos una variable global para mantener el numero de linea
                        de la factura

      $005 AJS 24012012 Ampliar el numero de factura a 20 caracteres para cumplir con el estandar

      $006 JPT 25/07/12 Cambiamos las tablas de facturas Incoming para unificar

      $007 AJS 23082012 Control de seguridad por usuario

      $008 AJS 22102012 Rellenar el codigo de procedencia en los movimientos de FPR

      $009 AJS 14122012 Agregar la informacion de vuelo en la linea de factura

      $010 AJS 12072013 He creado una nueva funcion para crear una sola linea de factura contable por el total, si quieren el
                        detalle lo tienen en las tablas de Incoming, de momento solo para CNT

      $011 AJS 17072013 He a¤adido la fecha de creacion en las facturas de atennea

      $012 AJS 26082013 Elimino las referencias a la tabla de Maestro de claves porque es obsoleta

      $013 AJS 04112013 Modifico la funcion _linea_Persona para que no rellene cantidad

      $014 AJS 04112013 Modifico para que dejen de crearse las lineas en Lin. Venta (Table 37) por hotel y por persona

      $015 AJS 04112013 Modifico la funcion _busca_servicio_linea para que no se marquen las reservas porque ya no es necesario

      $016 AJS 19112013 Sustituyo la clave a la hora de buscar el ultimo numero de asiento

      $017 AJS 21112013 Eliminar las variables TabServicios y TabProveedores por Temporaries

      $018 AJS 21112013 Elimino la funcion _busca_servicio_linea porque su funcionalidad es obsoleta

      $019 AJS 04122013 El campo vuelos lo recortamos para evitar error

      $020 AJS 12122013 Si el total de la prefactura suma cero no se genera documento contable

      $021 AJS 03032014 Corregir un error al trabajar con facturas que tiene lineas de abono

      $022 AJS 14042014 La tabla de elementos transportar transfer solo se utiliza para contar suplementos

      $023 AJS 08052014 Al crear una factura que suma cero creamos su prevision de coste para evitar un paso mas

      $024 AJS 14052014 Simplificar el proceso para que el usuario pueda reimprimir una prefactura desde la ventana de facturacion

      $025 AJS 15052014 Corregir un error cuando se ha eliminado la agrupacion abonada

      $026 AJS 04062014 En las lineas de factura, guardar el codigo del concepto, no la descripcion

      $027 AJS 23062014 He a¤adido una tabla de series de facturacion

      $028 AJS 11092014 El importe DL se recalcula antes de hacer el asiento de FPR y guardamos la tasa de cambio por si hay
                        diferencias en el momento de validar

      $029 AJS 05102014 Corregir error al crear la linea de resumen contable con impuestos y sin impuestos

      $030 AJS 28102014 Recortar el nombre del cliente a 30 caracteres cuando lo pasamos a la linea de factura

      $031 AJS 21012015 Ejecutar el proceso estandar Lanzar factura

      $032 AJS 04022015 Las prefacturas se numeran con una serie en Busca_ultima_prefactura

      $033 AJS 09032015 Los comentarios antes de imprimir solo se le muestran a los usuarios de Go Caribic

      $034 AJS 16032015 CNT-CAR-14096, cuando facturamos a touroperadores que trabajan con comercializadora pasamos la informacion
                                       de las reservas a esa empresa, tambien le creamos un factura compra

      $035 AJS 16032015 CNT-CAR-14096, Nueva funcion en las lineas de factura del estandar para controlar la edicion manual

      $036 AJS 25032015 CNT-CAR-14096, El campo Reason code se rellena al final del proceso de facturacion

      $037 AJS 07052015 CNT-OC-15134, Algunas empresas no tienen costes, sus costes se registran en la comercializadora

      $038 AJS 08062015 Algunos codigos de Touroperador pasan convertidos a la empresa comercializadora

      $039 AJS 08062015 La dimension departamento tiene que ser la delegacion en comercializadora

      $040 AJS 26062015 Modifico la funcion _TraspasarReservaCOM para rellenar nuevo campo Delegacion Atennea que utilizaremos
                        para buscar los contratos en comercializadora

      $041 AJS 09072015 Modifico la funcion _SincronizaMaestrosCOM para evitar problemas de sincronizacion cuando falta un dato
    }
    END.
  }
}
