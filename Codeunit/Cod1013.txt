OBJECT Codeunit 1013 Job Jnl.-Post Batch
{
  OBJECT-PROPERTIES
  {
    Date=13/02/07;
    Time=12:00:00;
    Version List=NAVW15.00;
  }
  PROPERTIES
  {
    TableNo=210;
    Permissions=TableData 237=imd;
    OnRun=BEGIN
            JobJnlLine.COPY(Rec);
            Code;
            Rec := JobJnlLine;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=cannot exceed %1 characters.;ESP=no puede superar %1 caracteres.';
      Text001@1001 : TextConst 'ENU=Journal Batch Name    #1##########\\;ESP=Nombre secci¢n diario #1##########\\';
      Text002@1002 : TextConst 'ENU=Checking lines        #2######\;ESP=Comprobando l¡neas    #2######\';
      Text003@1003 : TextConst 'ENU=Posting lines         #3###### @4@@@@@@@@@@@@@\;ESP=Registrando l¡neas    #3###### @4@@@@@@@@@@@@@\';
      Text004@1004 : TextConst 'ENU=Updating lines        #5###### @6@@@@@@@@@@@@@;ESP=Actualizando l¡ns.    #5###### @6@@@@@@@@@@@@@';
      Text005@1005 : TextConst 'ENU=Posting lines         #3###### @4@@@@@@@@@@@@@;ESP=Registrando l¡neas    #3###### @4@@@@@@@@@@@@@';
      Text006@1006 : TextConst 'ENU=A maximum of %1 posting number series can be used in each journal.;ESP=Se puede utilizar un m ximo de %1 n£meros de serie de registro en cada diario.';
      Text007@1007 : TextConst 'ENU=<Month Text>;ESP=<Month Text>';
      AccountingPeriod@1008 : Record 50;
      JobJnlTemplate@1009 : Record 209;
      JobJnlBatch@1010 : Record 237;
      JobJnlLine@1011 : Record 210;
      JobJnlLine2@1012 : Record 210;
      JobJnlLine3@1013 : Record 210;
      LedgEntryDim@1014 : Record 355;
      JobLedgEntry@1015 : Record 169;
      JobReg@1016 : Record 241;
      NoSeries@1017 : TEMPORARY Record 308;
      JobJnlCheckLine@1018 : Codeunit 1011;
      JobJnlPostLine@1019 : Codeunit 1012;
      NoSeriesMgt@1020 : Codeunit 396;
      NoSeriesMgt2@1021 : ARRAY [10] OF Codeunit 396;
      DimMgt@1022 : Codeunit 408;
      Window@1023 : Dialog;
      JobRegNo@1024 : Integer;
      StartLineNo@1025 : Integer;
      Day@1026 : Integer;
      Week@1027 : Integer;
      Month@1028 : Integer;
      MonthText@1029 : Text[30];
      LineCount@1030 : Integer;
      NoOfRecords@1031 : Integer;
      LastDocNo@1032 : Code[20];
      LastDocNo2@1033 : Code[20];
      LastPostedDocNo@1034 : Code[20];
      NoOfPostingNoSeries@1035 : Integer;
      PostingNoSeriesNo@1036 : Integer;

    LOCAL PROCEDURE Code@1();
    VAR
      JnlLineDim@1000 : Record 356;
      TempJnlLineDim@1001 : TEMPORARY Record 356;
      UpdateAnalysisView@1002 : Codeunit 410;
      UpdateItemAnalysisView@1003 : Codeunit 7150;
    BEGIN
      WITH JobJnlLine DO BEGIN
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        IF RECORDLEVELLOCKING THEN
          LOCKTABLE;

        JobJnlTemplate.GET("Journal Template Name");
        JobJnlBatch.GET("Journal Template Name","Journal Batch Name");
        IF STRLEN(INCSTR(JobJnlBatch.Name)) > MAXSTRLEN(JobJnlBatch.Name) THEN
          JobJnlBatch.FIELDERROR(
            Name,
            STRSUBSTNO(
              Text000,
              MAXSTRLEN(JobJnlBatch.Name)));

        IF JobJnlTemplate.Recurring THEN BEGIN
          SETRANGE("Posting Date",0D,WORKDATE);
          SETFILTER("Expiration Date",'%1 | %2..',0D,WORKDATE);
        END;

        IF NOT FIND('=><') THEN BEGIN
          "Line No." := 0;
          COMMIT;
          EXIT;
        END;

        IF JobJnlTemplate.Recurring THEN
          Window.OPEN(
            Text001 +
            Text002 +
            Text003 +
            Text004)
        ELSE
          Window.OPEN(
            Text001 +
            Text002 +
            Text005);
        Window.UPDATE(1,"Journal Batch Name");

        // Check lines
        LineCount := 0;
        StartLineNo := "Line No.";
        REPEAT
          LineCount := LineCount + 1;
          Window.UPDATE(2,LineCount);
          CheckRecurringLine(JobJnlLine);
          JnlLineDim.SETRANGE("Table ID",DATABASE::"Job Journal Line");
          JnlLineDim.SETRANGE("Journal Template Name","Journal Template Name");
          JnlLineDim.SETRANGE("Journal Batch Name","Journal Batch Name");
          JnlLineDim.SETRANGE("Journal Line No.","Line No.");
          JnlLineDim.SETRANGE("Allocation Line No.",0);
          TempJnlLineDim.DELETEALL;
          DimMgt.CopyJnlLineDimToJnlLineDim(JnlLineDim,TempJnlLineDim);
          JobJnlCheckLine.RunCheck(JobJnlLine,TempJnlLineDim);
          IF NEXT = 0 THEN
            FIND('-');
        UNTIL "Line No." = StartLineNo;
        NoOfRecords := LineCount;

        // Find next register no.
        LedgEntryDim.LOCKTABLE;
        JobLedgEntry.LOCKTABLE;
        IF RECORDLEVELLOCKING THEN
          IF JobLedgEntry.FIND('+') THEN;
        JobReg.LOCKTABLE;
        IF JobReg.FIND('+') AND (JobReg."To Entry No." = 0) THEN
          JobRegNo := JobReg."No."
        ELSE
          JobRegNo := JobReg."No." + 1;

        // Post lines
        LineCount := 0;
        LastDocNo := '';
        LastDocNo2 := '';
        LastPostedDocNo := '';
        FIND('-');
        REPEAT
          LineCount := LineCount + 1;
          Window.UPDATE(3,LineCount);
          Window.UPDATE(4,ROUND(LineCount / NoOfRecords * 10000,1));
          IF NOT EmptyLine AND
             (JobJnlBatch."No. Series" <> '') AND
             ("Document No." <> LastDocNo2)
          THEN
            TESTFIELD("Document No.",NoSeriesMgt.GetNextNo(JobJnlBatch."No. Series","Posting Date",FALSE));
          LastDocNo2 := "Document No.";
          MakeRecurringTexts(JobJnlLine);
          IF "Posting No. Series" = '' THEN BEGIN
            "Posting No. Series" := JobJnlBatch."No. Series";
            TESTFIELD("Document No.");
          END ELSE
            IF NOT EmptyLine THEN
              IF ("Document No." = LastDocNo) AND ("Document No." <> '') THEN
                "Document No." := LastPostedDocNo
              ELSE BEGIN
                IF NOT NoSeries.GET("Posting No. Series") THEN BEGIN
                  NoOfPostingNoSeries := NoOfPostingNoSeries + 1;
                  IF NoOfPostingNoSeries > ARRAYLEN(NoSeriesMgt2) THEN
                    ERROR(
                      Text006,
                      ARRAYLEN(NoSeriesMgt2));
                  NoSeries.Code := "Posting No. Series";
                  NoSeries.Description := FORMAT(NoOfPostingNoSeries);
                  NoSeries.INSERT;
                END;
                LastDocNo := "Document No.";
                EVALUATE(PostingNoSeriesNo,NoSeries.Description);
                "Document No." := NoSeriesMgt2[PostingNoSeriesNo].GetNextNo("Posting No. Series","Posting Date",FALSE);
                LastPostedDocNo := "Document No.";
              END;
          JnlLineDim.SETRANGE("Table ID",DATABASE::"Job Journal Line");
          JnlLineDim.SETRANGE("Journal Template Name","Journal Template Name");
          JnlLineDim.SETRANGE("Journal Batch Name","Journal Batch Name");
          JnlLineDim.SETRANGE("Journal Line No.","Line No.");
          JnlLineDim.SETRANGE("Allocation Line No.",0);
          TempJnlLineDim.DELETEALL;
          DimMgt.CopyJnlLineDimToJnlLineDim(JnlLineDim,TempJnlLineDim);
          JobJnlPostLine.RunWithCheck(JobJnlLine,TempJnlLineDim);
        UNTIL NEXT = 0;

        // Copy register no. and current journal batch name to the job journal
        IF NOT JobReg.FIND('+') OR (JobReg."No." <> JobRegNo) THEN
          JobRegNo := 0;

        INIT;
        "Line No." := JobRegNo;

        // Update/delete lines
        IF JobRegNo <> 0 THEN BEGIN
          IF NOT RECORDLEVELLOCKING THEN BEGIN
            JnlLineDim.LOCKTABLE(TRUE,TRUE);
            LOCKTABLE(TRUE,TRUE);
          END;
          IF JobJnlTemplate.Recurring THEN BEGIN
            // Recurring journal
            LineCount := 0;
            JobJnlLine2.COPYFILTERS(JobJnlLine);
            JobJnlLine2.FIND('-');
            REPEAT
              LineCount := LineCount + 1;
              Window.UPDATE(5,LineCount);
              Window.UPDATE(6,ROUND(LineCount / NoOfRecords * 10000,1));
              IF JobJnlLine2."Posting Date" <> 0D THEN
                JobJnlLine2.VALIDATE("Posting Date",CALCDATE(JobJnlLine2."Recurring Frequency",JobJnlLine2."Posting Date"));
              IF (JobJnlLine2."Recurring Method" = JobJnlLine2."Recurring Method"::Variable) AND
                 (JobJnlLine2."No." <> '')
              THEN
                JobJnlLine2.DeleteAmounts;
              JobJnlLine2.MODIFY;
            UNTIL JobJnlLine2.NEXT = 0;
          END ELSE BEGIN
            // Not a recurring journal
            JobJnlLine2.COPYFILTERS(JobJnlLine);
            JobJnlLine2.SETFILTER("No.",'<>%1','');
            IF JobJnlLine2.FIND THEN; // Remember the last line
            JnlLineDim.SETRANGE("Table ID",DATABASE::"Job Journal Line");
            JnlLineDim.COPYFILTER("Journal Template Name","Journal Template Name");
            JnlLineDim.COPYFILTER("Journal Batch Name","Journal Batch Name");
            JnlLineDim.SETRANGE("Allocation Line No.",0);
            JobJnlLine3.COPY(JobJnlLine);
            IF JobJnlLine3.FIND('-') THEN
              REPEAT
                JnlLineDim.SETRANGE("Journal Line No.",JobJnlLine3."Line No.");
                JnlLineDim.DELETEALL;
                JobJnlLine3.DELETE;
              UNTIL JobJnlLine3.NEXT = 0;
            JobJnlLine3.RESET;
            JobJnlLine3.SETRANGE("Journal Template Name","Journal Template Name");
            JobJnlLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
            IF NOT JobJnlLine3.FIND('+') THEN
              IF INCSTR("Journal Batch Name") <> '' THEN BEGIN
                JobJnlBatch.DELETE;
                JobJnlBatch.Name := INCSTR("Journal Batch Name");
                IF JobJnlBatch.INSERT THEN;
                "Journal Batch Name" := JobJnlBatch.Name;
              END;

            JobJnlLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
            IF (JobJnlBatch."No. Series" = '') AND NOT JobJnlLine3.FIND('+') THEN BEGIN
              JobJnlLine3.INIT;
              JobJnlLine3."Journal Template Name" := "Journal Template Name";
              JobJnlLine3."Journal Batch Name" := "Journal Batch Name";
              JobJnlLine3."Line No." := 10000;
              JobJnlLine3.INSERT;
              JobJnlLine3.SetUpNewLine(JobJnlLine2);
              JobJnlLine3.MODIFY;
            END;
          END;
        END;
        IF JobJnlBatch."No. Series" <> '' THEN
          NoSeriesMgt.SaveNoSeries;
        IF NoSeries.FIND('-') THEN
          REPEAT
            EVALUATE(PostingNoSeriesNo,NoSeries.Description);
            NoSeriesMgt2[PostingNoSeriesNo].SaveNoSeries;
          UNTIL NoSeries.NEXT = 0;

        COMMIT;
      END;
      UpdateAnalysisView.UpdateAll(0,TRUE);
      UpdateItemAnalysisView.UpdateAll(0,TRUE);
      COMMIT;
    END;

    LOCAL PROCEDURE CheckRecurringLine@2(VAR JobJnlLine2@1000 : Record 210);
    VAR
      TempDateFormula@1001 : DateFormula;
    BEGIN
      WITH JobJnlLine2 DO BEGIN
        IF "No." <> '' THEN
          IF JobJnlTemplate.Recurring THEN BEGIN
            TESTFIELD("Recurring Method");
            TESTFIELD("Recurring Frequency");
            IF "Recurring Method" = "Recurring Method"::Variable THEN
              TESTFIELD(Quantity);
          END ELSE BEGIN
            TESTFIELD("Recurring Method",0);
            TESTFIELD("Recurring Frequency",TempDateFormula);
          END;
      END;
    END;

    LOCAL PROCEDURE MakeRecurringTexts@3(VAR JobJnlLine2@1000 : Record 210);
    BEGIN
      WITH JobJnlLine2 DO BEGIN
        IF ("No." <> '') AND ("Recurring Method" <> 0) THEN BEGIN // Not recurring
          Day := DATE2DMY("Posting Date",1);
          Week := DATE2DWY("Posting Date",2);
          Month := DATE2DMY("Posting Date",2);
          MonthText := FORMAT("Posting Date",0,Text007);
          AccountingPeriod.SETRANGE("Starting Date",0D,"Posting Date");
          IF NOT AccountingPeriod.FIND('+') THEN
            AccountingPeriod.Name := '';
          "Document No." :=
            DELCHR(
              PADSTR(
                STRSUBSTNO("Document No.",Day,Week,Month,MonthText,AccountingPeriod.Name),
                MAXSTRLEN("Document No.")),
              '>');
          Description :=
            DELCHR(
              PADSTR(
                STRSUBSTNO(Description,Day,Week,Month,MonthText,AccountingPeriod.Name),
                MAXSTRLEN(Description)),
              '>');
        END;
      END;
    END;

    BEGIN
    END.
  }
}
