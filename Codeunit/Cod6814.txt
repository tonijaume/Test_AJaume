OBJECT Codeunit 6814 EP Encode XML
{
  OBJECT-PROPERTIES
  {
    Date=13/02/07;
    Time=12:00:00;
    Version List=NAVW15.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      XMLDOMMgt@1000000000 : Codeunit 6812;
      SupportFunctions@1000000001 : Codeunit 6815;
      FormatFunctions@1000000002 : Codeunit 6817;
      Text001@1000 : TextConst 'ENU=No tabs have been defined for %1 %2.;ESP=No se definieron fichas para %1 %2.';
      Text002@1001 : TextConst 'ENU=No fields have been defined for Table %1 in %2 %3.;ESP=No se definieron campos para la tabla %1 en %2 %3.';
      Text003@1000000003 : TextConst 'ENU=Error receving Backend private key.;ESP=Error al recibir clave privada servidor.';

    PROCEDURE CreateLayout@1000000000(VAR XMLDocLayout@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GroupCode@1000000001 : Code[20];RequestType@1000000002 : Code[20]);
    VAR
      EPGroupRequestType@1000000006 : Record 6805;
      EPGrpReqTypeTable@1000000007 : Record 6811;
      EPGrpReqTypeTable2@1000000008 : Record 6811;
      EPGrpReqTypeTableTab@1000000009 : Record 6806;
      EPGrpReqTypeTableTabFields@1000000010 : Record 6807;
      EPGrpRTTableTabFieldSortKey@1000000019 : Record 6822;
      EPGrpReqTypeActions@1000000015 : Record 6809;
      EPGrpReqTypeActionNewHeadCrit@1000000020 : Record 6824;
      EPGrpReqTypeActionFields@1000000016 : Record 6813;
      EPGrpReqTypeActionKeys@1000000017 : Record 6813;
      EPGrpRTTableTabFldLookup@1005 : Record 6827;
      EPGRTTTableTabFldLookupCond@1004 : Record 6828;
      EPGRTTTableTabFldLookupMap@1003 : Record 6829;
      XMLCurrNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNewChild@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      DocNameSpace@1000 : Text[50];
      OptionString@1000000012 : Text[1024];
      OptionElement@1000000013 : Text[1024];
      tmpString@1006 : Text[80];
      OptionCounter@1000000014 : Integer;
      FieldType@1000000018 : 'TableFilter,RecordID,Text,Date,Time,DateFormula,Decimal,Binary,BLOB,Boolean,Integer,Code,Option,BigInteger,Duration,GUID,DateTime';
    BEGIN
      // Build the Layoutpart of the outgoing XML document
      XMLDocLayout.loadXML('<LAYOUT/>');
      XMLCurrNode := XMLDocLayout.documentElement;

      SupportFunctions.GetGrpReqTypeRec(GroupCode,RequestType,EPGroupRequestType);

      SupportFunctions.GetGrpReqTypeTableRec(GroupCode,RequestType,EPGrpReqTypeTable);

      WITH XMLDOMMgt DO BEGIN
        // Add basic part
        IF AddElement(
          XMLCurrNode,'DISPLAYNAME',
          SupportFunctions.GetMultilangDescription(6805,GLOBALLANGUAGE,EPGroupRequestType."Caption ID"),
          DocNameSpace,XMLNewChild) > 0
        THEN
          EXIT;

        IF AddElement(
          XMLCurrNode,'EDITABLE',
          FormatFunctions.BooleanToText(EPGroupRequestType.Editable),DocNameSpace,XMLNewChild) > 0
        THEN
          EXIT;

        // Add Head Layout Part
        IF SupportFunctions.CheckForGrpReqTypeTableHead(EPGrpReqTypeTable) THEN BEGIN
          IF AddElement(
            XMLCurrNode,'LAYOUT_HEAD',
            '',DocNameSpace,XMLNewChild) > 0
          THEN
            EXIT;
          XMLCurrNode := XMLNewChild; // <LAYOUT_HEAD>
            IF AddElement(
              XMLCurrNode,'TABS',
              '',DocNameSpace,XMLNewChild) > 0
            THEN
              EXIT;
            XMLCurrNode := XMLNewChild; // <TABS>
              SupportFunctions.GetGrpReqTypeTableHeadRec(EPGrpReqTypeTable,EPGrpReqTypeTable2);
              SupportFunctions.GetGrpReqTypeTableTabsRec(GroupCode,RequestType,EPGrpReqTypeTable2."Table No.",EPGrpReqTypeTableTab);
              IF EPGrpReqTypeTableTab.COUNT = 0 THEN
                ERROR(Text001,EPGroupRequestType.TABLECAPTION,RequestType);
              REPEAT
                IF AddElement(
                  XMLCurrNode,'TAB',
                  '',DocNameSpace,XMLNewChild) > 0
                THEN
                  EXIT;
                XMLCurrNode := XMLNewChild; // <TAB>
                  IF AddElement(
                    XMLCurrNode,'POSITION',
                    FormatFunctions.IntegerToText(EPGrpReqTypeTableTab.Position),DocNameSpace,XMLNewChild) > 0
                  THEN
                    EXIT;
                  IF AddElement(
                    XMLCurrNode,'COLUMN',
                    FormatFunctions.IntegerToText(EPGrpReqTypeTableTab."No. of Columns"),DocNameSpace,XMLNewChild) > 0
                  THEN
                    EXIT;
                  IF AddElement(
                    XMLCurrNode,'CAPTION',
                    SupportFunctions.GetMultilangDescription(6806, GLOBALLANGUAGE,
                      EPGrpReqTypeTableTab."Caption ID"),DocNameSpace,XMLNewChild) > 0
                  THEN
                    EXIT;
                  IF AddElement(
                    XMLCurrNode,'FIELDS_LAYOUTHEAD',
                    '',DocNameSpace,XMLNewChild) > 0
                  THEN
                    EXIT;
                  XMLCurrNode := XMLNewChild; // <FIELDS_LAYOUTHEAD>
                    SupportFunctions.GetGrpReqTypeTableTabsFieldRec(GroupCode,RequestType,
                      EPGrpReqTypeTableTab."Table No.",EPGrpReqTypeTableTab.Code,EPGrpReqTypeTableTabFields);
                    IF EPGrpReqTypeTableTabFields.COUNT = 0 THEN
                      ERROR(Text002,EPGrpReqTypeTableTab."Table No.",EPGroupRequestType.TABLECAPTION,RequestType);
                    REPEAT
                      IF AddElement(
                        XMLCurrNode,'FIELD_LAYOUTHEAD',
                        '',DocNameSpace,XMLNewChild) > 0
                      THEN
                        EXIT;
                      XMLCurrNode := XMLNewChild; // <FIELD_LAYOUTHEAD>
                        IF AddElement(
                          XMLCurrNode,'POSITION',
                          FormatFunctions.IntegerToText(EPGrpReqTypeTableTabFields."Line No."),DocNameSpace,XMLNewChild) > 0
                        THEN
                          EXIT;
                        IF AddElement(
                          XMLCurrNode,'ID',
                          FormatFunctions.IntegerToText(EPGrpReqTypeTableTabFields."Field No."),DocNameSpace,XMLNewChild) > 0
                        THEN
                          EXIT;
                        SupportFunctions.GetFieldType(EPGrpReqTypeTableTabFields."Table No.",
                          EPGrpReqTypeTableTabFields."Field No.",FieldType);
                        IF AddElement(
                          XMLCurrNode,'TYPE',
                          FormatFunctions.OptionToText(FieldType),DocNameSpace,XMLNewChild) > 0
                        THEN
                          EXIT;
                        IF AddElement(
                          XMLCurrNode,'HTML_TYPE',
                          FormatFunctions.OptionToText(EPGrpReqTypeTableTabFields."HTML Layout"),DocNameSpace,XMLNewChild) > 0
                        THEN
                          EXIT;
                        SupportFunctions.GetFieldCaption(EPGrpReqTypeTableTabFields."Table No.",
                          EPGrpReqTypeTableTabFields."Field No.",tmpString);
                        IF AddElement(
                          XMLCurrNode,'CAPTION',
                          tmpString,DocNameSpace,XMLNewChild) > 0
                        THEN
                          EXIT;
                        IF AddElement(
                          XMLCurrNode,'LENGTH',
                          FormatFunctions.IntegerToText(EPGrpReqTypeTableTabFields.Length),DocNameSpace,XMLNewChild) > 0
                        THEN
                          EXIT;
                        IF AddElement(
                          XMLCurrNode,'MAXLENGTH',
                          FormatFunctions.IntegerToText(SupportFunctions.GetDefaultFieldLen(EPGrpReqTypeTableTabFields."Table No.",
                            EPGrpReqTypeTableTabFields."Field No.")),DocNameSpace,XMLNewChild) > 0
                        THEN
                          EXIT;

                        // Create Field-Lookupdescriptions
                        SupportFunctions.GetGrpRTTableTabsFldLookupRec(GroupCode,RequestType,
                          EPGrpReqTypeTableTab."Table No.",EPGrpReqTypeTableTab.Code,EPGrpReqTypeTableTabFields."Line No.",
                          EPGrpRTTableTabFldLookup);
                        IF EPGrpRTTableTabFldLookup.FIND('-') THEN BEGIN
                          IF AddElement(
                            XMLCurrNode,'LOOKUPS_LAYOUTHEAD',
                            '',DocNameSpace,XMLNewChild) > 0
                          THEN
                            EXIT;
                          XMLCurrNode := XMLNewChild; // <LOOKUPS_LAYOUTHEAD>
                          REPEAT
                            IF AddElement(
                              XMLCurrNode,'LOOKUP_LAYOUTHEAD',
                              '',DocNameSpace,XMLNewChild) > 0
                            THEN
                              EXIT;
                            XMLCurrNode := XMLNewChild; // <LOOKUP_LAYOUTHEAD>
                            IF AddElement(
                              XMLCurrNode,'POSITION',
                              FormatFunctions.IntegerToText(EPGrpRTTableTabFldLookup.Position), DocNameSpace, XMLNewChild) > 0
                            THEN
                              EXIT;
                            IF AddElement(
                              XMLCurrNode,'REQUESTTYPE',
                              EPGrpRTTableTabFldLookup."Lookup WP Request Code", DocNameSpace, XMLNewChild) > 0
                            THEN
                              EXIT;

                            SupportFunctions.GetGRTTTabFldLookupCondRec(GroupCode,RequestType,
                              EPGrpReqTypeTableTab."Table No.",EPGrpReqTypeTableTab.Code,EPGrpReqTypeTableTabFields."Line No.",
                              EPGrpRTTableTabFldLookup."Lookup WP Request Code", EPGRTTTableTabFldLookupCond);
                            IF EPGRTTTableTabFldLookupCond.FIND('-') THEN BEGIN
                              REPEAT
                                IF AddElement(
                                  XMLCurrNode,'PARENTS_LAYOUTHEAD',
                                  '', DocNameSpace, XMLNewChild) > 0
                                THEN
                                  EXIT;
                                XMLCurrNode := XMLNewChild; // <PARENTS_LAYOUTHEAD>
                                IF AddElement(
                                  XMLCurrNode,'PARENTFIELDID',
                                  FormatFunctions.IntegerToText(EPGRTTTableTabFldLookupCond."Field No."),
                                  DocNameSpace, XMLNewChild) > 0
                                THEN
                                  EXIT;
                                IF AddElement(
                                  XMLCurrNode,'PARENTFIELDVALUE',
                                  EPGRTTTableTabFldLookupCond."Field Value",
                                  DocNameSpace, XMLNewChild) > 0
                                THEN
                                  EXIT;
                                XMLCurrNode := XMLCurrNode.parentNode; // </PARENTS_LAYOUTHEAD>
                              UNTIL EPGRTTTableTabFldLookupCond.NEXT = 0;
                            END;

                            SupportFunctions.GetGRTTTabFldLookupMapRec(GroupCode,RequestType,
                              EPGrpReqTypeTableTab."Table No.",EPGrpReqTypeTableTab.Code,EPGrpReqTypeTableTabFields."Line No.",
                              EPGrpRTTableTabFldLookup."Lookup WP Request Code", EPGRTTTableTabFldLookupMap);
                            IF EPGRTTTableTabFldLookupMap.FIND('-') THEN BEGIN
                              IF AddElement(
                                XMLCurrNode,'FIELDMAPPINGS_LAYOUTHEAD',
                                '', DocNameSpace, XMLNewChild) > 0
                              THEN
                                EXIT;
                              XMLCurrNode := XMLNewChild; // <FIELDMAPPINGS_LAYOUTHEAD>
                              REPEAT
                                IF AddElement(
                                  XMLCurrNode,'FIELDMAPPING_LAYOUTHEAD',
                                  '', DocNameSpace, XMLNewChild) > 0
                                THEN
                                  EXIT;
                                XMLCurrNode := XMLNewChild; // <FIELDMAPPING_LAYOUTHEAD>
                                IF AddElement(
                                  XMLCurrNode,'DESTINATIONID',
                                  FormatFunctions.IntegerToText(EPGRTTTableTabFldLookupMap."Target Field No."),
                                  DocNameSpace, XMLNewChild) > 0
                                THEN
                                  EXIT;
                                IF AddElement(
                                  XMLCurrNode,'SOURCEID',
                                  FormatFunctions.IntegerToText(EPGRTTTableTabFldLookupMap."Source Field No."),
                                  DocNameSpace, XMLNewChild) > 0
                                THEN
                                  EXIT;
                                XMLCurrNode := XMLCurrNode.parentNode; // </FIELDMAPPING_LAYOUTHEAD>
                              UNTIL EPGRTTTableTabFldLookupMap.NEXT = 0;
                              XMLCurrNode := XMLCurrNode.parentNode; // </FIELDMAPPINGS_LAYOUTHEAD>
                            END;
                            XMLCurrNode := XMLCurrNode.parentNode; // </LOOKUP_LAYOUTHEAD>
                          UNTIL EPGrpRTTableTabFldLookup.NEXT = 0;
                          XMLCurrNode := XMLCurrNode.parentNode; // </LOOKUPS_LAYOUTHEAD>
                        END;

                        IF AddElement(
                          XMLCurrNode,'VALIDATION_LAYOUTHEAD',
                          '',DocNameSpace,XMLNewChild) > 0
                        THEN
                          EXIT;
                        XMLCurrNode := XMLNewChild; // <VALIDATION_LAYOUTHEAD>
                          IF AddElement(
                            XMLCurrNode,'VAL_LAYOUTHEAD',
                            '',DocNameSpace,XMLNewChild) > 0
                          THEN
                            EXIT;
                          XMLCurrNode := XMLNewChild; // <VAL_LAYOUTHEAD>
                            // Not used yet+
                            IF AddElement(
                              XMLCurrNode,'TYP',
                              '0',DocNameSpace,XMLNewChild) > 0
                            THEN
                              EXIT;
                            // Not used yet-
                            IF AddElement(
                              XMLCurrNode,'REQUIRED',
                              FormatFunctions.BooleanToText(EPGrpReqTypeTableTabFields.Required),DocNameSpace,XMLNewChild) > 0
                            THEN
                              EXIT;
                          XMLCurrNode := XMLCurrNode.parentNode; // </VAL_LAYOUTHEAD>
                        XMLCurrNode := XMLCurrNode.parentNode; // </VALIDATION_LAYOUTHEAD>
                        IF AddElement(
                          XMLCurrNode,'APPEARANCE',
                          FormatFunctions.OptionToText(EPGrpReqTypeTableTabFields.Appearance),DocNameSpace,XMLNewChild) > 0
                        THEN
                          EXIT;

                        IF SupportFunctions.CheckIfOptionField(EPGrpReqTypeTableTabFields."Table No.",
                         EPGrpReqTypeTableTabFields."Field No.") THEN BEGIN
                          OptionCounter := 0;
                          IF AddElement(
                            XMLCurrNode,'OPTIONS_LAYOUTHEAD',
                            '',DocNameSpace,XMLNewChild) > 0
                          THEN
                            EXIT;
                          XMLCurrNode := XMLNewChild; // <OPTIONS_LAYOUTHEAD>
                            SupportFunctions.GetOptionCaption(EPGrpReqTypeTableTabFields."Table No.",
                              EPGrpReqTypeTableTabFields."Field No.",OptionString);

                            REPEAT
                              SupportFunctions.GetOptionStringElements(OptionString,OptionElement);
                              IF NOT ((OptionCounter > 0) AND (OptionElement = '')) THEN BEGIN
                                IF AddElement(
                                  XMLCurrNode,'OPTION_LAYOUTHEAD',
                                  '',DocNameSpace,XMLNewChild) > 0
                                THEN
                                  EXIT;
                                XMLCurrNode := XMLNewChild; // <OPTION_LAYOUTHEAD>
                                  IF AddElement(
                                    XMLCurrNode,'VALUE',
                                    FormatFunctions.IntegerToText(OptionCounter),DocNameSpace,XMLNewChild) > 0
                                  THEN
                                    EXIT;

                                  IF AddElement(
                                    XMLCurrNode,'CAPTION',
                                    OptionElement,DocNameSpace,XMLNewChild) > 0
                                  THEN
                                    EXIT;
                                XMLCurrNode := XMLCurrNode.parentNode; // </OPTION_LAYOUTHEAD>
                              END;
                              OptionCounter := OptionCounter + 1;
                            UNTIL STRLEN(OptionString) <= 0;
                          XMLCurrNode := XMLCurrNode.parentNode; // </OPTIONS_LAYOUTHEAD>
                        END;
                      XMLCurrNode := XMLCurrNode.parentNode; // </FIELD_LAYOUTHEAD>
                    UNTIL EPGrpReqTypeTableTabFields.NEXT = 0;
                  XMLCurrNode := XMLCurrNode.parentNode; // </FIELDS_LAYOUTHEAD>
                XMLCurrNode := XMLCurrNode.parentNode; // </TAB>
              UNTIL EPGrpReqTypeTableTab.NEXT = 0;
            XMLCurrNode := XMLCurrNode.parentNode; // </TABS>

            // Add HEAD-Actions Part
            SupportFunctions.GetActions(EPGrpReqTypeTable2,EPGrpReqTypeActions);
              IF AddElement(
                XMLCurrNode,'ACTIONS_HEAD',
                '',DocNameSpace,XMLNewChild) > 0
              THEN
                EXIT;
               XMLCurrNode := XMLNewChild; // <ACTIONS_HEAD>
               IF EPGrpReqTypeActions.COUNT > 0 THEN BEGIN
                 REPEAT
                   IF AddElement(
                     XMLCurrNode,'ACTION_HEAD',
                     '',DocNameSpace,XMLNewChild) > 0
                   THEN
                     EXIT;
                   XMLCurrNode := XMLNewChild; // <ACTION_HEAD>
                     // SHOWINLEVEL in ACTION_HEAD is only to prevent errors
                     IF AddElement(
                       XMLCurrNode,'SHOWINLEVEL',
                       '',DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;
                     IF AddElement(
                       XMLCurrNode,'POSITION',
                       FormatFunctions.OptionToText(EPGrpReqTypeActions.Position),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;
                     IF AddElement(
                       XMLCurrNode,'TARGET',
                       FormatFunctions.OptionToText(EPGrpReqTypeActions."Target WP Request"),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;
                     IF AddElement(
                       XMLCurrNode,'ACTIONTYPE',
                       FormatFunctions.IntegerToText(EPGrpReqTypeActions."Type ID"),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;

                     // print action, modify request type name before sending to frontend
                     IF EPGrpReqTypeActions.Code = 'PRINTDOCUMENT' THEN BEGIN
                       IF AddElement(
                         XMLCurrNode,'REQUESTTYPE',
                         'PRINTHEAD',DocNameSpace,XMLNewChild) > 0
                       THEN
                         EXIT;
                     END ELSE BEGIN // no print action, send unmodified request type-name to frontend
                       IF AddElement(
                         XMLCurrNode,'REQUESTTYPE',
                         EPGrpReqTypeActions.Code,DocNameSpace,XMLNewChild) > 0
                       THEN
                         EXIT;
                     END;

                     IF AddElement(
                       XMLCurrNode,'CAPTION',
                       SupportFunctions.GetMultilangDescription
                         (DATABASE::"EP WP Request Table Action",
                         GLOBALLANGUAGE, EPGrpReqTypeActions."Caption ID"),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;
                     IF AddElement(
                       XMLCurrNode,'DISPLAYSTYLE',
                       FormatFunctions.OptionToText(EPGrpReqTypeActions."HTML Layout"),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;
                     IF AddElement(
                       XMLCurrNode,'FIELD_VALIDATION_REQ',
                       FormatFunctions.BooleanToText(EPGrpReqTypeActions."Field Validation Required"),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;
                     IF AddElement(
                       XMLCurrNode,'ONLY_IF_EDITABLE',
                       FormatFunctions.BooleanToText(EPGrpReqTypeActions."Restrict to Editable"),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;
                     IF AddElement(
                       XMLCurrNode,'TABLE_NO',
                       FormatFunctions.IntegerToText(EPGrpReqTypeActions."Target Table No."),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;
                     IF AddElement(
                       XMLCurrNode,'REPORT_NO',
                       FormatFunctions.IntegerToText(EPGrpReqTypeActions."Report ID"),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;
                     IF AddElement(
                       XMLCurrNode,'IMAGEPATH',
                       SupportFunctions.GetPicturePath(EPGrpReqTypeActions."Picture Code"),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;

                     // Description to build the Filter that is used to get the next record
                     // e.g. From Customer to get the Sales Orders
                     SupportFunctions.GetGrpReqTypeActionFieldRec(EPGrpReqTypeActions,EPGrpReqTypeActionFields);
                     IF EPGrpReqTypeActionFields.COUNT > 0 THEN BEGIN
                       IF AddElement(
                         XMLCurrNode,'FILTERFIELDS_HEAD',
                         '',DocNameSpace,XMLNewChild) > 0
                       THEN
                         EXIT;
                       XMLCurrNode := XMLNewChild; // <FILTERFIELDS_HEAD>
                         REPEAT
                           IF AddElement(
                             XMLCurrNode,'FILTERFIELD_HEAD',
                             '',DocNameSpace,XMLNewChild) > 0
                           THEN
                             EXIT;
                           XMLCurrNode := XMLNewChild; // <FILTERFIELD_HEAD>
                             IF AddElement(
                               XMLCurrNode,'SOURCE_FIELD_ID',
                               FormatFunctions.IntegerToText(EPGrpReqTypeActionFields."Source Field No."),
                               DocNameSpace,XMLNewChild) > 0
                             THEN
                               EXIT;
                             IF AddElement(
                               XMLCurrNode,'TARGET_FIELD_ID',
                               FormatFunctions.IntegerToText(EPGrpReqTypeActionFields."Target Field No."),
                               DocNameSpace,XMLNewChild) > 0
                             THEN
                               EXIT;
                             IF EPGrpReqTypeActionFields."Target Field Default Value" <> '' THEN
                               IF AddElement(
                                 XMLCurrNode,'TARGET_FIELD_DEFAULT',
                                 EPGrpReqTypeActionFields."Target Field Default Value",DocNameSpace,XMLNewChild) > 0
                               THEN
                                 EXIT;
                            XMLCurrNode := XMLCurrNode.parentNode; // </FILTERFIELD_HEAD>
                         UNTIL EPGrpReqTypeActionFields.NEXT = 0;
                       XMLCurrNode := XMLCurrNode.parentNode; // </FILTERFIELDS_HEAD>
                     END ELSE BEGIN
                       IF AddElement(
                         XMLCurrNode,'FILTERFIELDS_HEAD',
                         '',DocNameSpace,XMLNewChild) > 0
                       THEN
                         EXIT;
                     END;

                     // Description to build the Key that is used to get the next record
                     // e.g. From Customer to get the Sales Orders
                     SupportFunctions.GetGrpReqTypeActionKeyRec(EPGrpReqTypeActions,EPGrpReqTypeActionKeys);
                     IF EPGrpReqTypeActionKeys.COUNT > 0 THEN BEGIN
                       IF AddElement(
                         XMLCurrNode,'FILTERKEYFIELDS_HEAD',
                         '',DocNameSpace,XMLNewChild) > 0
                       THEN
                         EXIT;
                       XMLCurrNode := XMLNewChild; // <FILTERKEYFIELDS_HEAD>
                         REPEAT
                           IF AddElement(
                             XMLCurrNode,'FILTERKEYFIELD_HEAD',
                             '',DocNameSpace,XMLNewChild) > 0
                           THEN
                             EXIT;
                           XMLCurrNode := XMLNewChild; // <FILTERKEYFIELD_HEAD>
                             IF AddElement(
                               XMLCurrNode,'POS',
                               FormatFunctions.IntegerToText(EPGrpReqTypeActionKeys."Line No."),
                               DocNameSpace,XMLNewChild) > 0
                             THEN
                               EXIT;
                             IF AddElement(
                               XMLCurrNode,'KEYFIELDVALUE',
                               FormatFunctions.IntegerToText(EPGrpReqTypeActionKeys."Key Field No."),
                               DocNameSpace,XMLNewChild) > 0
                             THEN
                               EXIT;
                           XMLCurrNode := XMLCurrNode.parentNode; // </FILTERKEYFIELD_HEAD>
                         UNTIL EPGrpReqTypeActionKeys.NEXT = 0;
                       XMLCurrNode := XMLCurrNode.parentNode; // </FILTERKEYFIELDS_HEAD>
                     END ELSE BEGIN
                       IF AddElement(
                         XMLCurrNode,'FILTERKEYFIELDS_HEAD',
                         '',DocNameSpace,XMLNewChild) > 0
                       THEN
                         EXIT;
                     END;

                     // If the Action = INSERTHEAD then add the Description with internal Fields for the new head record
                     // e.g. Creating an Order -> the New Head Standard Field is 1 with value 'ORDER' (Document Type=Order)
                     IF EPGrpReqTypeActions."Type ID" = 1 THEN BEGIN // Action = INSERTHEAD
                       SupportFunctions.GetActionNewHeadCriteria(EPGrpReqTypeActions,EPGrpReqTypeActionNewHeadCrit);
                       IF EPGrpReqTypeActionNewHeadCrit.COUNT > 0 THEN BEGIN
                         IF AddElement(
                           XMLCurrNode,'NEW_HEAD_STANDARD_FIELDS',
                           '',DocNameSpace,XMLNewChild) > 0
                         THEN
                           EXIT;
                         XMLCurrNode := XMLNewChild; // <NEW_HEAD_STANDARD_FIELDS>
                           REPEAT
                             IF AddElement(
                               XMLCurrNode,'NEW_HEAD_STANDARD_FIELD',
                               '',DocNameSpace,XMLNewChild) > 0
                             THEN
                               EXIT;
                             XMLCurrNode := XMLNewChild; // <NEW_HEAD_STANDARD_FIELD>
                               IF AddElement(
                                 XMLCurrNode,'FIELD_ID',
                                 FormatFunctions.IntegerToText(EPGrpReqTypeActionNewHeadCrit."Field No."),
                                 DocNameSpace,XMLNewChild) > 0
                               THEN
                                 EXIT;
                               IF AddElement(
                                 XMLCurrNode,'FIELD_VALUE',
                                 EPGrpReqTypeActionNewHeadCrit."Default Value",DocNameSpace,XMLNewChild) > 0
                               THEN
                                 EXIT;
                             XMLCurrNode := XMLCurrNode.parentNode; // </NEW_HEAD_STANDARD_FIELD>
                           UNTIL EPGrpReqTypeActionNewHeadCrit.NEXT = 0;
                         XMLCurrNode := XMLCurrNode.parentNode; // </NEW_HEAD_STANDARD_FIELDS>
                       END ELSE BEGIN
                         IF AddElement(
                           XMLCurrNode,'NEW_HEAD_STANDARD_FIELDS',
                           '',DocNameSpace,XMLNewChild) > 0
                         THEN
                           EXIT;
                       END;
                     END;
                   XMLCurrNode := XMLCurrNode.parentNode; // </ACTION_HEAD>
                 UNTIL EPGrpReqTypeActions.NEXT = 0;
               END;
               XMLCurrNode := XMLCurrNode.parentNode; // </ACTIONS_HEAD>
          XMLCurrNode := XMLCurrNode.parentNode; // </LAYOUT_HEAD>
        END;

        // Add Line Layout Part
        IF SupportFunctions.CheckForGrpReqTypeTableLine(EPGrpReqTypeTable) THEN BEGIN
          IF AddElement(
            XMLCurrNode,'LAYOUT_LINE',
            '',DocNameSpace,XMLNewChild) > 0
          THEN
            EXIT;
          XMLCurrNode := XMLNewChild; // <LAYOUT_LINE>
            IF AddElement(
              XMLCurrNode,'FIELDS_LAYOUTLINE',
              '',DocNameSpace,XMLNewChild) > 0
            THEN
              EXIT;
            XMLCurrNode := XMLNewChild; // <FIELDS_LAYOUTLINE>
              SupportFunctions.GetGrpReqTypeTableLineRec(EPGrpReqTypeTable,EPGrpReqTypeTable2);
              SupportFunctions.GetGrpReqTypeTableTabsRec(GroupCode,RequestType,EPGrpReqTypeTable2."Table No.",EPGrpReqTypeTableTab);
              IF EPGrpReqTypeTableTab.COUNT = 0 THEN
                ERROR(Text001,EPGroupRequestType.TABLECAPTION,RequestType);

              SupportFunctions.GetGrpReqTypeTableTabsFieldRec(GroupCode,RequestType,
                EPGrpReqTypeTableTab."Table No.",EPGrpReqTypeTableTab.Code,EPGrpReqTypeTableTabFields);
              IF EPGrpReqTypeTableTabFields.COUNT = 0 THEN
                ERROR(Text002,EPGrpReqTypeTableTab."Table No.",EPGroupRequestType.TABLECAPTION,RequestType);

              REPEAT
                IF AddElement(
                  XMLCurrNode,'FIELD_LAYOUTLINE',
                  '',DocNameSpace,XMLNewChild) > 0
                THEN
                  EXIT;
                XMLCurrNode := XMLNewChild; // <FIELD_LAYOUTLINE>
                  IF AddElement(
                    XMLCurrNode,'POSITION',
                    FormatFunctions.IntegerToText(EPGrpReqTypeTableTabFields."Line No."),DocNameSpace,XMLNewChild) > 0
                  THEN
                    EXIT;
                  IF AddElement(
                    XMLCurrNode,'ID',
                    FormatFunctions.IntegerToText(EPGrpReqTypeTableTabFields."Field No."),DocNameSpace,XMLNewChild) > 0
                  THEN
                    EXIT;
                  SupportFunctions.GetFieldType(EPGrpReqTypeTableTabFields."Table No.",
                    EPGrpReqTypeTableTabFields."Field No.",FieldType);
                  IF AddElement(
                    XMLCurrNode,'TYPE',
                    FormatFunctions.OptionToText(FieldType),DocNameSpace,XMLNewChild) > 0
                  THEN
                    EXIT;
                  IF AddElement(
                    XMLCurrNode,'HTML_TYPE',
                    FormatFunctions.OptionToText(EPGrpReqTypeTableTabFields."HTML Layout"),DocNameSpace,XMLNewChild) > 0
                  THEN
                    EXIT;
                  SupportFunctions.GetFieldCaption(EPGrpReqTypeTableTabFields."Table No.",EPGrpReqTypeTableTabFields."Field No.",
                    tmpString);
                  IF AddElement(
                    XMLCurrNode,'CAPTION',
                    tmpString,DocNameSpace,XMLNewChild) > 0
                  THEN
                    EXIT;
                  IF AddElement(
                    XMLCurrNode,'LENGTH',
                    FormatFunctions.IntegerToText(EPGrpReqTypeTableTabFields.Length),DocNameSpace,XMLNewChild) > 0
                  THEN
                    EXIT;
                  IF AddElement(
                    XMLCurrNode,'MAXLENGTH',
                    FormatFunctions.IntegerToText(SupportFunctions.GetDefaultFieldLen(EPGrpReqTypeTableTabFields."Table No.",
                      EPGrpReqTypeTableTabFields."Field No.")),DocNameSpace,XMLNewChild) > 0
                  THEN
                    EXIT;

                  IF AddElement(
                    XMLCurrNode,'VALIDATION_LAYOUTLINE',
                    '',DocNameSpace,XMLNewChild) > 0
                  THEN
                    EXIT;
                  XMLCurrNode := XMLNewChild; // <VALIDATION_LAYOUTLINE>
                  IF AddElement(
                    XMLCurrNode,'VAL_LAYOUTLINE',
                    '',DocNameSpace,XMLNewChild) > 0
                  THEN
                    EXIT;
                  XMLCurrNode := XMLNewChild; // <VAL_LAYOUTLINE>
                  // Not used yet+
                  IF AddElement(
                    XMLCurrNode,'TYP',
                    '0',DocNameSpace,XMLNewChild) > 0
                  THEN
                    EXIT;
                  // Not used yet-
                  IF AddElement(
                    XMLCurrNode,'REQUIRED',
                    FormatFunctions.BooleanToText(EPGrpReqTypeTableTabFields.Required),DocNameSpace,XMLNewChild) > 0
                  THEN
                    EXIT;
                  XMLCurrNode := XMLCurrNode.parentNode; // </VAL_LAYOUTLINE>
                  XMLCurrNode := XMLCurrNode.parentNode; // </VALIDATION_LAYOUTLINE>

                  IF AddElement(
                    XMLCurrNode,'APPEARANCE',
                    FormatFunctions.OptionToText(EPGrpReqTypeTableTabFields.Appearance),DocNameSpace,XMLNewChild) > 0
                  THEN
                    EXIT;

                  // Create Field-Lookupdescriptions
                  SupportFunctions.GetGrpRTTableTabsFldLookupRec(GroupCode,RequestType,
                    EPGrpReqTypeTableTab."Table No.",EPGrpReqTypeTableTab.Code,EPGrpReqTypeTableTabFields."Line No.",
                    EPGrpRTTableTabFldLookup);
                  IF EPGrpRTTableTabFldLookup.FIND('-') THEN BEGIN
                    IF AddElement(
                      XMLCurrNode,'LOOKUPS_LAYOUTLINE',
                      '',DocNameSpace,XMLNewChild) > 0
                    THEN
                      EXIT;
                    XMLCurrNode := XMLNewChild; // <LOOKUPS_LAYOUTLINE>
                    REPEAT
                      IF AddElement(
                        XMLCurrNode,'LOOKUP_LAYOUTLINE',
                        '',DocNameSpace,XMLNewChild) > 0
                      THEN
                        EXIT;
                      XMLCurrNode := XMLNewChild; // <LOOKUP_LAYOUTLINE>
                      IF AddElement(
                        XMLCurrNode,'POSITION',
                        FormatFunctions.IntegerToText(EPGrpRTTableTabFldLookup.Position), DocNameSpace, XMLNewChild) > 0
                      THEN
                        EXIT;
                      IF AddElement(
                        XMLCurrNode,'REQUESTTYPE',
                        EPGrpRTTableTabFldLookup."Lookup WP Request Code", DocNameSpace, XMLNewChild) > 0
                      THEN
                        EXIT;

                      SupportFunctions.GetGRTTTabFldLookupCondRec(GroupCode,RequestType,
                        EPGrpReqTypeTableTab."Table No.",EPGrpReqTypeTableTab.Code,EPGrpReqTypeTableTabFields."Line No.",
                        EPGrpRTTableTabFldLookup."Lookup WP Request Code", EPGRTTTableTabFldLookupCond);
                      IF EPGRTTTableTabFldLookupCond.FIND('-') THEN BEGIN
                        REPEAT
                          IF AddElement(
                            XMLCurrNode,'PARENTS_LAYOUTLINE',
                            '', DocNameSpace, XMLNewChild) > 0
                          THEN
                            EXIT;
                          XMLCurrNode := XMLNewChild; // <PARENTS_LAYOUTLINE>
                          IF AddElement(
                            XMLCurrNode,'PARENTFIELDID',
                            FormatFunctions.IntegerToText(EPGRTTTableTabFldLookupCond."Field No."),
                            DocNameSpace, XMLNewChild) > 0
                          THEN
                            EXIT;
                          IF AddElement(
                            XMLCurrNode,'PARENTFIELDVALUE',
                            EPGRTTTableTabFldLookupCond."Field Value",
                            DocNameSpace, XMLNewChild) > 0
                          THEN
                            EXIT;
                          XMLCurrNode := XMLCurrNode.parentNode; // </PARENTS_LAYOUTLINE>
                        UNTIL EPGRTTTableTabFldLookupCond.NEXT = 0;
                      END;

                      SupportFunctions.GetGRTTTabFldLookupMapRec(GroupCode,RequestType,
                        EPGrpReqTypeTableTab."Table No.",EPGrpReqTypeTableTab.Code,EPGrpReqTypeTableTabFields."Line No.",
                        EPGrpRTTableTabFldLookup."Lookup WP Request Code", EPGRTTTableTabFldLookupMap);
                      IF EPGRTTTableTabFldLookupMap.FIND('-') THEN BEGIN
                        IF AddElement(
                          XMLCurrNode,'FIELDMAPPINGS_LAYOUTLINE',
                          '', DocNameSpace, XMLNewChild) > 0
                        THEN
                          EXIT;
                        XMLCurrNode := XMLNewChild; // <FIELDMAPPINGS_LAYOUTLINE>
                        REPEAT
                          IF AddElement(
                            XMLCurrNode,'FIELDMAPPING_LAYOUTLINE',
                            '', DocNameSpace, XMLNewChild) > 0
                          THEN
                            EXIT;
                          XMLCurrNode := XMLNewChild; // <FIELDMAPPING_LAYOUTLINE>
                          IF AddElement(
                            XMLCurrNode,'DESTINATIONID',
                            FormatFunctions.IntegerToText(EPGRTTTableTabFldLookupMap."Target Field No."),
                            DocNameSpace, XMLNewChild) > 0
                          THEN
                            EXIT;
                          IF AddElement(
                            XMLCurrNode,'SOURCEID',
                            FormatFunctions.IntegerToText(EPGRTTTableTabFldLookupMap."Source Field No."),
                            DocNameSpace, XMLNewChild) > 0
                          THEN
                            EXIT;
                          XMLCurrNode := XMLCurrNode.parentNode; // </FIELDMAPPING_LAYOUTLINE>
                        UNTIL EPGRTTTableTabFldLookupMap.NEXT = 0;
                        XMLCurrNode := XMLCurrNode.parentNode; // </FIELDMAPPINGS_LAYOUTLINE>
                      END;
                      XMLCurrNode := XMLCurrNode.parentNode; // </LOOKUP_LAYOUTLINE>
                    UNTIL EPGrpRTTableTabFldLookup.NEXT = 0;
                    XMLCurrNode := XMLCurrNode.parentNode; // </LOOKUPS_LAYOUTLINE>
                  END;

                  EPGrpReqTypeTableTabFields.CALCFIELDS(Sortable);
                  IF AddElement(
                    XMLCurrNode,'SORTABLE',
                    FormatFunctions.BooleanToText(EPGrpReqTypeTableTabFields.Sortable),DocNameSpace,XMLNewChild) > 0
                  THEN
                    EXIT;
                  // Add Option String if necessary
                  IF SupportFunctions.CheckIfOptionField(EPGrpReqTypeTableTabFields."Table No.",
                    EPGrpReqTypeTableTabFields."Field No.") THEN BEGIN
                    OptionCounter := 0;
                    IF AddElement(
                      XMLCurrNode,'OPTIONS_LAYOUTLINE',
                      '',DocNameSpace,XMLNewChild) > 0
                    THEN
                      EXIT;
                    XMLCurrNode := XMLNewChild; // <OPTIONS_LAYOUTLINE>
                      SupportFunctions.GetOptionCaption(EPGrpReqTypeTableTabFields."Table No.",
                       EPGrpReqTypeTableTabFields."Field No.",OptionString);
                      REPEAT
                        IF AddElement(
                          XMLCurrNode,'OPTION_LAYOUTLINE',
                          '',DocNameSpace,XMLNewChild) > 0
                        THEN
                          EXIT;
                        XMLCurrNode := XMLNewChild; // <OPTION_LAYOUTLINE>
                          SupportFunctions.GetOptionStringElements(OptionString,OptionElement);
                          IF AddElement(
                            XMLCurrNode,'VALUE',
                            FormatFunctions.IntegerToText(OptionCounter),DocNameSpace,XMLNewChild) > 0
                          THEN
                            EXIT;
                          IF AddElement(
                            XMLCurrNode,'CAPTION',
                            OptionElement,DocNameSpace,XMLNewChild) > 0
                          THEN
                            EXIT;
                          OptionCounter := OptionCounter + 1;
                        XMLCurrNode := XMLCurrNode.parentNode; // </OPTION_LAYOUTLINE>
                      UNTIL STRLEN(OptionString) <= 0;
                    XMLCurrNode := XMLCurrNode.parentNode; // </OPTIONS_LAYOUTLINE>
                  END;
                  // Add Key Values for List Sorting
                  IF EPGrpReqTypeTableTabFields.Sortable THEN BEGIN
                    SupportFunctions.GetGrpRTTableTabsFieldSortKRec(GroupCode,RequestType,
                      EPGrpReqTypeTableTabFields."Table No.",EPGrpReqTypeTableTabFields."Tab Code",EPGrpReqTypeTableTabFields."Line No."
      ,
                      EPGrpRTTableTabFieldSortKey);
                    IF AddElement(
                      XMLCurrNode,'SORT_KEY_LAYOUTLINE',
                      '',DocNameSpace,XMLNewChild) > 0
                    THEN
                      EXIT;
                    XMLCurrNode := XMLNewChild; // <SORT_KEY_LAYOUTLINE>
                      REPEAT
                        IF AddElement(
                          XMLCurrNode,'SORT_KEYS',
                          '',DocNameSpace,XMLNewChild) > 0
                        THEN
                          EXIT;
                        XMLCurrNode := XMLNewChild; // <SORT_KEYS>
                          IF AddElement(
                            XMLCurrNode,'POS',
                            FormatFunctions.IntegerToText(EPGrpRTTableTabFieldSortKey."Line No."),DocNameSpace,XMLNewChild) > 0
                          THEN
                            EXIT;
                          IF AddElement(
                            XMLCurrNode,'SORT_KEY',
                            FormatFunctions.IntegerToText(EPGrpRTTableTabFieldSortKey."Key Field No."),DocNameSpace,XMLNewChild) > 0
                          THEN
                            EXIT;
                        XMLCurrNode := XMLCurrNode.parentNode; // </SORT_KEYS>
                      UNTIL EPGrpRTTableTabFieldSortKey.NEXT = 0;
                    XMLCurrNode := XMLCurrNode.parentNode; // </SORT_KEY_LAYOUTLINE>
                  END;
                XMLCurrNode := XMLCurrNode.parentNode; // </FIELD_LAYOUTLINE>
              UNTIL EPGrpReqTypeTableTabFields.NEXT = 0;
            XMLCurrNode := XMLCurrNode.parentNode; // </FIELDS_LAYOUTLINE>

            // Add Line-Actions Part
            SupportFunctions.GetActions(EPGrpReqTypeTable2,EPGrpReqTypeActions);
              IF AddElement(
                XMLCurrNode,'ACTIONS_LINE',
                '',DocNameSpace,XMLNewChild) > 0
              THEN
                EXIT;
               XMLCurrNode := XMLNewChild; // <ACTIONS_LINE>
               IF EPGrpReqTypeActions.COUNT > 0 THEN BEGIN
                 REPEAT
                   IF AddElement(
                     XMLCurrNode,'ACTION_LINE',
                     '',DocNameSpace,XMLNewChild) > 0
                   THEN
                     EXIT;
                   XMLCurrNode := XMLNewChild; // <ACTION_LINE>
                     IF AddElement(
                       XMLCurrNode,'SHOWINLEVEL',
                       FormatFunctions.OptionToText(EPGrpReqTypeActions."Show in Mode"),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;
                     IF AddElement(
                       XMLCurrNode,'POSITION',
                       FormatFunctions.OptionToText(EPGrpReqTypeActions.Position),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;
                     IF AddElement(
                       XMLCurrNode,'TARGET',
                       FormatFunctions.OptionToText(EPGrpReqTypeActions."Target WP Request"),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;
                     IF AddElement(
                       XMLCurrNode,'ACTIONTYPE',
                       FormatFunctions.IntegerToText(EPGrpReqTypeActions."Type ID"),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;

                     // print action, modify request type name before sending to frontend
                     IF EPGrpReqTypeActions.Code = 'PRINTDOCUMENT' THEN BEGIN
                       IF AddElement(
                         XMLCurrNode,'REQUESTTYPE',
                         'PRINTLINE',DocNameSpace,XMLNewChild) > 0
                       THEN
                         EXIT;
                     END ELSE BEGIN // no print action, send unmodified request type-name to frontend
                       IF AddElement(
                         XMLCurrNode,'REQUESTTYPE',
                         EPGrpReqTypeActions.Code,DocNameSpace,XMLNewChild) > 0
                       THEN
                         EXIT;
                     END;

                     IF AddElement(
                       XMLCurrNode,'CAPTION',
                       SupportFunctions.GetMultilangDescription(DATABASE::"EP WP Request Table Action",
                       GLOBALLANGUAGE,EPGrpReqTypeActions."Caption ID"),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;
                     IF AddElement(
                       XMLCurrNode,'DISPLAYSTYLE',
                       FormatFunctions.OptionToText(EPGrpReqTypeActions."HTML Layout"),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;
                     IF AddElement(
                       XMLCurrNode,'FIELD_VALIDATION_REQ',
                       FormatFunctions.BooleanToText(EPGrpReqTypeActions."Field Validation Required"),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;
                     IF AddElement(
                       XMLCurrNode,'ONLY_IF_EDITABLE',
                       FormatFunctions.BooleanToText(EPGrpReqTypeActions."Restrict to Editable"),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;
                     IF AddElement(
                       XMLCurrNode,'TABLE_NO',
                       FormatFunctions.IntegerToText(EPGrpReqTypeActions."Target Table No."),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;
                     IF AddElement(
                       XMLCurrNode,'REPORT_NO',
                       FormatFunctions.IntegerToText(EPGrpReqTypeActions."Report ID"),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;
                     IF AddElement(
                       XMLCurrNode,'IMAGEPATH',
                       SupportFunctions.GetPicturePath(EPGrpReqTypeActions."Picture Code"),DocNameSpace,XMLNewChild) > 0
                     THEN
                       EXIT;

                     // Description to build the Filter that is used to get the next record
                     // e.g. From Customer to get the Sales Orders
                     SupportFunctions.GetGrpReqTypeActionFieldRec(EPGrpReqTypeActions,EPGrpReqTypeActionFields);
                     SupportFunctions.GetGrpReqTypeActionKeyRec(EPGrpReqTypeActions,EPGrpReqTypeActionKeys);
                     IF EPGrpReqTypeActionFields.COUNT > 0 THEN BEGIN
                       IF AddElement(
                         XMLCurrNode,'FILTERFIELDS_LINE',
                         '',DocNameSpace,XMLNewChild) > 0
                       THEN
                         EXIT;
                       XMLCurrNode := XMLNewChild; // <FILTERFIELDS_LINE>
                         REPEAT
                           IF AddElement(
                             XMLCurrNode,'FILTERFIELD_LINE',
                             '',DocNameSpace,XMLNewChild) > 0
                           THEN
                             EXIT;
                           XMLCurrNode := XMLNewChild; // <FILTERFIELD_LINE>
                             IF AddElement(
                               XMLCurrNode,'SOURCE_FIELD_ID',
                               FormatFunctions.IntegerToText(EPGrpReqTypeActionFields."Source Field No."),
                               DocNameSpace,XMLNewChild) > 0
                             THEN
                               EXIT;
                             IF AddElement(
                               XMLCurrNode,'TARGET_FIELD_ID',
                               FormatFunctions.IntegerToText(EPGrpReqTypeActionFields."Target Field No."),
                               DocNameSpace,XMLNewChild) > 0
                             THEN
                               EXIT;
                             IF EPGrpReqTypeActionFields."Target Field Default Value" <> '' THEN
                               IF AddElement(
                                 XMLCurrNode,'TARGET_FIELD_DEFAULT',
                                 EPGrpReqTypeActionFields."Target Field Default Value",DocNameSpace,XMLNewChild) > 0
                               THEN
                                 EXIT;
                            XMLCurrNode := XMLCurrNode.parentNode; // </FILTERFIELD_LINE>
                         UNTIL EPGrpReqTypeActionFields.NEXT = 0;
                       XMLCurrNode := XMLCurrNode.parentNode; // </FILTERFIELDS_LINE>
                     END ELSE BEGIN
                       IF AddElement(
                         XMLCurrNode,'FILTERFIELDS_LINE',
                         '',DocNameSpace,XMLNewChild) > 0
                       THEN
                         EXIT;
                     END;

                     IF EPGrpReqTypeActionKeys.COUNT > 0 THEN BEGIN
                       IF AddElement(
                         XMLCurrNode,'FILTERKEYFIELDS_LINE',
                         '',DocNameSpace,XMLNewChild) > 0
                       THEN
                         EXIT;
                       XMLCurrNode := XMLNewChild; // <FILTERKEYFIELDS_LINE>
                         REPEAT
                           IF AddElement(
                             XMLCurrNode,'FILTERKEYFIELD_LINE',
                             '',DocNameSpace,XMLNewChild) > 0
                           THEN
                             EXIT;
                           XMLCurrNode := XMLNewChild; // <FILTERKEYFIELD_LINE>
                             IF AddElement(
                               XMLCurrNode,'POS',
                               FormatFunctions.IntegerToText(EPGrpReqTypeActionKeys."Line No."),
                               DocNameSpace,XMLNewChild) > 0
                             THEN
                               EXIT;
                             IF AddElement(
                               XMLCurrNode,'KEYFIELDVALUE',
                               FormatFunctions.IntegerToText(EPGrpReqTypeActionKeys."Key Field No."),
                               DocNameSpace,XMLNewChild) > 0
                             THEN
                               EXIT;
                           XMLCurrNode := XMLCurrNode.parentNode; // </FILTERKEYFIELD_LINE>
                         UNTIL EPGrpReqTypeActionKeys.NEXT = 0;
                       XMLCurrNode := XMLCurrNode.parentNode; // </FILTERKEYFIELDS_LINE>
                     END ELSE BEGIN
                       IF AddElement(
                         XMLCurrNode,'FILTERKEYFIELDS_LINE',
                         '',DocNameSpace,XMLNewChild) > 0
                       THEN
                         EXIT;
                     END;
                   XMLCurrNode := XMLCurrNode.parentNode; // </ACTION_LINE>
                 UNTIL EPGrpReqTypeActions.NEXT = 0;
               END;
               XMLCurrNode := XMLCurrNode.parentNode; // </ACTIONS_LINE>
          XMLCurrNode := XMLCurrNode.parentNode; // </LAYOUT_LINE>
        END;
      END; // WITH XMLDOMMgt
    END;

    PROCEDURE CreateData@1000000001(VAR XMLDocData@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GroupCode@1000000001 : Code[20];RequestType@1000000000 : Code[20];RecordsToShow@1000000014 : Integer;StartRecord@1000000015 : Integer;VAR FilterdRecordCount@1000000016 : Integer;VAR MyRecordRefHead@1000000006 : RecordRef;VAR MyRecordRefLine@1000000007 : RecordRef);
    VAR
      EPGroupRequestType@1009 : Record 6805;
      EPGrpReqTypeTable@1008 : Record 6811;
      EPGrpReqTypeTable2@1007 : Record 6811;
      EPGrpReqTypeTableTab@1006 : Record 6806;
      EPGrpReqTypeTableTabFields@1005 : Record 6807;
      MyFieldRef@1004 : FieldRef;
      XMLCurrNode@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNewChild@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      PicNode@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      KeyNode@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      Counter@1000000017 : Integer;
      PicReturnCode@1000 : Integer;
      TmpPicValue@1002 : Text[10];
      DocNameSpace@1010 : Text[50];
      Listing@1102601000 : Boolean;
    BEGIN
      // Build the Layoutpart of the outgoing XML document
      XMLDocData.loadXML('<DATA/>');
      XMLCurrNode := XMLDocData.documentElement;

      FilterdRecordCount := 0;

      SupportFunctions.GetGrpReqTypeRec(GroupCode,RequestType,EPGroupRequestType);
      SupportFunctions.GetGrpReqTypeTableRec(GroupCode,RequestType,EPGrpReqTypeTable);

      WITH XMLDOMMgt DO BEGIN
        // Add Head Data Part
        IF SupportFunctions.CheckForGrpReqTypeTableHead(EPGrpReqTypeTable) THEN BEGIN
          IF AddElement(
            XMLCurrNode,'HEADDATA',
            '',DocNameSpace,XMLNewChild) > 0
          THEN
            EXIT;
          XMLCurrNode := XMLNewChild; // <HEADDATA>
            IF AddElement(
              XMLCurrNode,'HASHVALUE',
              FormatFunctions.IntegerToText(SupportFunctions.BuildRecCheckSum(MyRecordRefHead)),
              DocNameSpace,XMLNewChild) > 0
            THEN
              EXIT;
            IF AddElement(
              XMLCurrNode,'FIELDS_HEADDATA',
              '',DocNameSpace,XMLNewChild) > 0
            THEN
              EXIT;
            XMLCurrNode := XMLNewChild; // <FIELDS_HEADDATA>
              SupportFunctions.GetGrpReqTypeTableHeadRec(EPGrpReqTypeTable,EPGrpReqTypeTable2);
              SupportFunctions.GetGrpReqTypeTableTabsRec(GroupCode,RequestType,EPGrpReqTypeTable2."Table No.",EPGrpReqTypeTableTab);
              REPEAT
                SupportFunctions.GetGrpReqTypeTableTabsFieldRec(GroupCode,RequestType,
                  EPGrpReqTypeTableTab."Table No.",EPGrpReqTypeTableTab.Code,EPGrpReqTypeTableTabFields);
                REPEAT
                  IF AddElement(
                    XMLCurrNode,'FIELD_HEADDATA',
                    '',DocNameSpace,XMLNewChild) > 0
                  THEN
                    EXIT;
                  XMLCurrNode := XMLNewChild; // <FIELD_HEADDATA>
                    MyFieldRef := MyRecordRefHead.FIELD(EPGrpReqTypeTableTabFields."Field No.");
                    IF AddElement(
                      XMLCurrNode,'ID',
                      FormatFunctions.IntegerToText(EPGrpReqTypeTableTabFields."Field No."),DocNameSpace,XMLNewChild) > 0
                    THEN
                      EXIT;

                    IF SupportFunctions.CheckCalculate(MyRecordRefHead.NUMBER,EPGrpReqTypeTableTabFields."Field No.") THEN
                      MyFieldRef.CALCFIELD;

                    IF NOT SupportFunctions.CheckIfBlobField(MyRecordRefHead.NUMBER,EPGrpReqTypeTableTabFields."Field No.") THEN BEGIN
                      IF AddElement(
                        XMLCurrNode,'VALUE',
                        FormatFunctions.GetValueFromFieldRef(EPGrpReqTypeTableTabFields."Table No.",
                          EPGrpReqTypeTableTabFields."Field No.",MyFieldRef),DocNameSpace,XMLNewChild) > 0
                      THEN
                        EXIT;
                    END ELSE BEGIN
                      CASE EPGrpReqTypeTableTabFields."HTML Layout" OF
                        EPGrpReqTypeTableTabFields."HTML Layout"::"Picture Indicator":
                          BEGIN
                            TmpPicValue := '0';
                            PicReturnCode := FormatFunctions.GetValueFromBLOB(MyRecordRefHead,MyFieldRef.NUMBER,
                              EPGrpReqTypeTableTabFields."Scale Ratio",'VALUE',PicNode);
                            IF PicReturnCode = 0 THEN
                              TmpPicValue := '1';
                            IF AddElement(
                              XMLCurrNode,'VALUE',TmpPicValue,DocNameSpace,XMLNewChild) > 0
                            THEN
                              EXIT;
                          END;
                        EPGrpReqTypeTableTabFields."HTML Layout"::Picture:
                          BEGIN
                            PicReturnCode := FormatFunctions.GetValueFromBLOB(MyRecordRefHead,MyFieldRef.NUMBER,
                              EPGrpReqTypeTableTabFields."Scale Ratio",'VALUE',PicNode);

                            IF PicReturnCode <> 0 THEN BEGIN
                              IF AddElement(
                                XMLCurrNode,'VALUE','',DocNameSpace,XMLNewChild) > 0
                              THEN
                                EXIT;
                            END ELSE BEGIN
                              XMLNewChild := PicNode.selectSingleNode('/BLOB/VALUE');
                              XMLCurrNode.appendChild(XMLNewChild);
                              XMLNewChild := PicNode.selectSingleNode('/BLOB/CONTENTTYPE');
                              XMLCurrNode.appendChild(XMLNewChild);
                            END;
                          END;
                      END;
                    END;
                  XMLCurrNode := XMLCurrNode.parentNode; // </FIELD_HEADDATA>
                UNTIL EPGrpReqTypeTableTabFields.NEXT = 0;
              UNTIL EPGrpReqTypeTableTab.NEXT = 0;

              CreateKey(MyRecordRefHead,KeyNode,0);
              XMLCurrNode.appendChild(KeyNode);

              IF AddElement(
                XMLCurrNode,'TABLE_NO',
                FormatFunctions.IntegerToText(MyRecordRefHead.NUMBER),DocNameSpace,XMLNewChild) > 0
              THEN
                EXIT;
            XMLCurrNode := XMLCurrNode.parentNode; // </FIELDS_HEADDATA>
          XMLCurrNode := XMLCurrNode.parentNode; // </HEADDATA>
        END;

        // Add LineDataPart
        IF SupportFunctions.CheckForGrpReqTypeTableLine(EPGrpReqTypeTable) THEN BEGIN
          // Get the Number of Records within the Filter
          // IF MyRecordRefLine.RECORDLEVELLOCKING THEN
          // FilterdRecordCount := MyRecordRefLine.COUNTAPPROX // Use this on SQL-Option. Periodic SQL Statistic Update req.
          // ELSE
            FilterdRecordCount := MyRecordRefLine.COUNT; // Use this on Native-Option.
          IF AddElement(
            XMLCurrNode,'LINEDATA',
            '',DocNameSpace,XMLNewChild) > 0
          THEN
            EXIT;
         IF MyRecordRefLine.COUNT > 0 THEN BEGIN
          XMLCurrNode := XMLNewChild; // <LINEDATA>
            IF AddElement(
              XMLCurrNode,'DATALINES',
              '',DocNameSpace,XMLNewChild) > 0
            THEN
              EXIT;
            XMLCurrNode := XMLNewChild; // <DATALINES>
              Counter := 0;

              Listing := (StartRecord <> 0) AND (RecordsToShow <> 0); // This is a list Request
              IF Listing THEN BEGIN
                MyRecordRefLine.FINDFIRST;
                MyRecordRefLine.NEXT(StartRecord-1);
              END;

              REPEAT
                Counter := Counter + 1;
                IF ((StartRecord = 0) AND (RecordsToShow = 0)) OR Listing THEN BEGIN
                 // If both values are 0 then we are in an Head/Line Request ->
                 // Show all Lines (no Paging)

                  IF AddElement(
                    XMLCurrNode,'DATALINE',
                    '',DocNameSpace,XMLNewChild) > 0
                  THEN
                    EXIT;
                  XMLCurrNode := XMLNewChild; // <DATALINE>
                    IF AddElement(
                      XMLCurrNode,'HASHVALUE',
                      FormatFunctions.IntegerToText(SupportFunctions.BuildRecCheckSum(MyRecordRefLine)),
                      DocNameSpace,XMLNewChild) > 0
                    THEN
                      EXIT;
                    IF AddElement(
                      XMLCurrNode,'FIELDS_LINEDATA',
                      '',DocNameSpace,XMLNewChild) > 0
                    THEN
                      EXIT;
                    XMLCurrNode := XMLNewChild; // <FIELDS_LINEDATA>
                      SupportFunctions.GetGrpReqTypeTableLineRec(EPGrpReqTypeTable,EPGrpReqTypeTable2);
                      SupportFunctions.GetGrpReqTypeTableTabsRec(GroupCode,RequestType,EPGrpReqTypeTable2."Table No.",
                        EPGrpReqTypeTableTab);
                      SupportFunctions.GetGrpReqTypeTableTabsFieldRec(GroupCode,RequestType,
                        EPGrpReqTypeTableTab."Table No.",EPGrpReqTypeTableTab.Code,EPGrpReqTypeTableTabFields);
                      REPEAT
                        IF AddElement(
                          XMLCurrNode,'FIELD_LINEDATA',
                          '',DocNameSpace,XMLNewChild) > 0
                        THEN
                          EXIT;
                        XMLCurrNode := XMLNewChild; // <FIELD_LINEDATA>
                          MyFieldRef := MyRecordRefLine.FIELD(EPGrpReqTypeTableTabFields."Field No.");
                          IF AddElement(
                            XMLCurrNode,'ID',
                            FormatFunctions.IntegerToText(EPGrpReqTypeTableTabFields."Field No."),DocNameSpace,XMLNewChild) > 0
                          THEN
                            EXIT;

                          IF SupportFunctions.CheckCalculate(MyRecordRefLine.NUMBER,EPGrpReqTypeTableTabFields."Field No.") THEN
                            MyFieldRef.CALCFIELD;

                          IF NOT SupportFunctions.CheckIfBlobField(MyRecordRefLine.NUMBER,
                           EPGrpReqTypeTableTabFields."Field No.") THEN BEGIN
                            IF AddElement(
                              XMLCurrNode,'VALUE',
                              FormatFunctions.GetValueFromFieldRef(EPGrpReqTypeTableTabFields."Table No.",
                              EPGrpReqTypeTableTabFields."Field No.",MyFieldRef),DocNameSpace,XMLNewChild) > 0
                            THEN
                             EXIT;
                          END ELSE BEGIN
                            CASE EPGrpReqTypeTableTabFields."HTML Layout" OF
                              EPGrpReqTypeTableTabFields."HTML Layout"::"Picture Indicator":
                                BEGIN
                                  TmpPicValue := '0';
                                  PicReturnCode := FormatFunctions.GetValueFromBLOB(MyRecordRefLine,MyFieldRef.NUMBER,
                                    10,'VALUE',PicNode);
                                  IF PicReturnCode = 0 THEN
                                    TmpPicValue := '1';
                                  IF AddElement(
                                    XMLCurrNode,'VALUE',TmpPicValue,DocNameSpace,XMLNewChild) > 0
                                  THEN
                                    EXIT;
                                END;
                              EPGrpReqTypeTableTabFields."HTML Layout"::Picture:
                                BEGIN
                                  PicReturnCode := FormatFunctions.GetValueFromBLOB(MyRecordRefLine,MyFieldRef.NUMBER,
                                    10,'VALUE',PicNode);

                                  IF PicReturnCode <> 0 THEN BEGIN
                                    IF AddElement(
                                      XMLCurrNode,'VALUE','',DocNameSpace,XMLNewChild) > 0
                                    THEN
                                      EXIT;
                                  END ELSE BEGIN
                                    XMLNewChild := PicNode.selectSingleNode('/BLOB/VALUE');
                                    XMLCurrNode.appendChild(XMLNewChild);
                                    XMLNewChild := PicNode.selectSingleNode('/BLOB/CONTENTTYPE');
                                    XMLCurrNode.appendChild(XMLNewChild);
                                  END;
                                END;
                            END;
                          END;
                        XMLCurrNode := XMLCurrNode.parentNode; // </FIELD_LINEDATA>
                      UNTIL EPGrpReqTypeTableTabFields.NEXT = 0;
                    XMLCurrNode := XMLCurrNode.parentNode; // </FIELDS_LINEDATA>

                    CreateKey(MyRecordRefLine,KeyNode,1);
                    XMLCurrNode.appendChild(KeyNode);


                    IF AddElement(
                      XMLCurrNode,'TABLE_NO',
                      FormatFunctions.IntegerToText(MyRecordRefLine.NUMBER),DocNameSpace,XMLNewChild) > 0
                    THEN
                      EXIT;
                  XMLCurrNode := XMLCurrNode.parentNode; // </DATALINE>
                END;
              UNTIL (MyRecordRefLine.NEXT = 0) OR (Listing AND (Counter = RecordsToShow));
            XMLCurrNode := XMLCurrNode.parentNode; // </DATALINES>
          XMLCurrNode := XMLCurrNode.parentNode; // </LINEDATA>
         END;
        END;
      END;
    END;

    PROCEDURE CreateErrors@1000000003(VAR XMLDocErrors@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    BEGIN
      // Create the Errors Part for Outgoing document
      XMLDocErrors.loadXML('<ERRORS/>');
    END;

    PROCEDURE AddErrors@1000000005(VAR XMLDocErrors@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";ErrorCode@1000000004 : Integer;AdditionalValue1@1000000006 : Text[100];AdditionalValue2@1000000007 : Text[100];AdditionalValue3@1000000008 : Text[100]);
    VAR
      EPErrorManagement@1000 : Codeunit 6820;
      XMLCurrNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNewChild@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      DocNameSpace@1000000001 : Text[50];
    BEGIN
      // Add an Error to the Errors document
      XMLCurrNode := XMLDocErrors.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF AddElement(
          XMLCurrNode,'ERROR',
          '',DocNameSpace,XMLNewChild) > 0
        THEN
          EXIT;
        XMLCurrNode := XMLNewChild; // <ERROR>
          IF AddElement(
            XMLCurrNode,'ERRID',
            FormatFunctions.IntegerToText(ErrorCode),DocNameSpace,XMLNewChild) > 0
          THEN
            EXIT;
          IF AddElement(
            XMLCurrNode,'ERRTITLES',
            EPErrorManagement.GetErrorTitle(ErrorCode),DocNameSpace,XMLNewChild) > 0
          THEN
            EXIT;
          IF AddElement(
            XMLCurrNode,'ERRMESSAGE',
            EPErrorManagement.GetErrorMessage(ErrorCode,AdditionalValue1,AdditionalValue2),DocNameSpace,XMLNewChild) >
      0
          THEN
            EXIT;
        XMLCurrNode := XMLCurrNode.parentNode; // </ERROR>
      END;
    END;

    PROCEDURE AddGUID@1000000002(VAR XMLDocOut@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000004 : Text[50]);
    VAR
      XMLCurrNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNewChild@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      DocNameSpace@1000000001 : Text[50];
    BEGIN
      XMLCurrNode := XMLDocOut.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF AddElement(
          XMLCurrNode,'GUID',
          GUID,DocNameSpace,XMLNewChild) > 0
        THEN
          EXIT;
      END;
    END;

    PROCEDURE AddCurrentLanguageID@1000000013(VAR XMLDocInStatic@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";LanguageID@1000000005 : Integer);
    VAR
      XMLCurrNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNewChild@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      DocNameSpace@1000000001 : Text[50];
    BEGIN
      XMLCurrNode := XMLDocInStatic.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF AddElement(
          XMLCurrNode,'LANGUAGE_ID',
          FormatFunctions.IntegerToText(LanguageID),DocNameSpace,XMLNewChild) > 0
        THEN
          EXIT;
      END;
    END;

    PROCEDURE ModifyEditableTag@1000000004(VAR XMLDocLayout@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";Editable@1000000001 : Boolean);
    VAR
      XMLNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // If the table marked as editable, the result of the editable check is then the value of the EDITABLE Tag
      XMLNode := XMLDocLayout.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNode,'../LAYOUT/EDITABLE',XMLNodeFound) THEN
          IF STRLEN(XMLNodeFound.text) > 0 THEN
            IF FormatFunctions.TextToBoolean(XMLNodeFound.text) THEN
              XMLNodeFound.text(FormatFunctions.BooleanToText(Editable));
      END;
    END;

    PROCEDURE CreateFilterHeadLine@1000000006(VAR XMLDocFilters@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR HeadRecordRef@1000000001 : RecordRef;GroupCode@1000000003 : Code[20];RequestType@1000000004 : Code[20]);
    VAR
      EPConnHeadLine@1001 : Record 6815;
      MyFieldRef@1000 : FieldRef;
      XMLCurrNode@1000000007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNewChild@1000000006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      DocNameSpace@1000000005 : Text[50];
    BEGIN
      // Create Filter document to get Line Records depending on the Head Record
      XMLDocFilters.loadXML('<FILTERS/>');
      XMLCurrNode := XMLDocFilters.documentElement;

      IF HeadRecordRef.FIND('-') THEN;

      WITH XMLDOMMgt DO BEGIN
        IF AddElement(
          XMLCurrNode,'FILTERGROUP',
          '',DocNameSpace,XMLNewChild) > 0
        THEN
          EXIT;
        XMLCurrNode := XMLNewChild; // <FILTERGROUP>
          // Create the Filterkey part
          SupportFunctions.GetConnectionHeadLine(GroupCode,RequestType,HeadRecordRef.NUMBER,TRUE,EPConnHeadLine);
          IF EPConnHeadLine.FIND('-') THEN BEGIN
            REPEAT
              IF AddElement(
                XMLCurrNode,'KEYS',
                '',DocNameSpace,XMLNewChild) > 0
              THEN
                EXIT;
              XMLCurrNode := XMLNewChild; // <KEYS>
                IF AddElement(
                  XMLCurrNode,'KEY',
                  FormatFunctions.IntegerToText(EPConnHeadLine."Line Key Field No."),DocNameSpace,XMLNewChild) > 0
                THEN
                  EXIT;
              XMLCurrNode := XMLCurrNode.parentNode; // </KEYS>
            UNTIL EPConnHeadLine.NEXT = 0;
          END;
          // Create the Filter part
          SupportFunctions.GetConnectionHeadLine(GroupCode,RequestType,HeadRecordRef.NUMBER,FALSE,EPConnHeadLine);
          IF EPConnHeadLine.FIND('-') THEN BEGIN
            REPEAT
              IF AddElement(
                XMLCurrNode,'FILTER',
                '',DocNameSpace,XMLNewChild) > 0
              THEN
                EXIT;
              XMLCurrNode := XMLNewChild; // <FILTER>
                IF EPConnHeadLine."Line Field No." > 0 THEN BEGIN
                  IF (EPConnHeadLine."Header Field No." > 0) AND (EPConnHeadLine."Line Field Default Value" = '') THEN BEGIN
                    IF AddElement(
                      XMLCurrNode,'FIELD',
                      FormatFunctions.IntegerToText(EPConnHeadLine."Line Field No."),DocNameSpace,XMLNewChild) > 0
                    THEN
                      EXIT;
                    MyFieldRef := HeadRecordRef.FIELD(EPConnHeadLine."Header Field No.");
                    IF AddElement(
                      XMLCurrNode,'VALUE',
                      FormatFunctions.GetValueFromFieldRef(HeadRecordRef.NUMBER,MyFieldRef.NUMBER,MyFieldRef),
                      DocNameSpace,XMLNewChild) > 0
                    THEN
                      EXIT;
                  END ELSE BEGIN
                    IF AddElement(
                      XMLCurrNode,'FIELD',
                      FormatFunctions.IntegerToText(EPConnHeadLine."Line Field No."),DocNameSpace,XMLNewChild) > 0
                    THEN
                      EXIT;
                    IF AddElement(
                      XMLCurrNode,'VALUE',
                      EPConnHeadLine."Line Field Default Value",
                      DocNameSpace,XMLNewChild) > 0
                    THEN
                      EXIT;
                  END;
                END;
              XMLCurrNode := XMLCurrNode.parentNode; // </FILTER>
            UNTIL EPConnHeadLine.NEXT = 0;
          END;

        XMLCurrNode := XMLCurrNode.parentNode; // </FILTERGROUP>
      END;
    END;

    PROCEDURE AddRecordCountToStatic@1000000007(VAR XMLDocStatic@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";FilterdRecordCount@1000000000 : Integer);
    VAR
      XMLCurrNode@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNewChild@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      DocNameSpace@1000000002 : Text[50];
    BEGIN
      // Add the Number of Record within the filterd Record to the Static Part
      XMLCurrNode := XMLDocStatic.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF AddElement(
          XMLCurrNode,'RECORDCOUNT',
          FormatFunctions.IntegerToText(FilterdRecordCount),DocNameSpace,XMLNewChild) > 0
        THEN
          EXIT;
      END;
    END;

    PROCEDURE ModifyPagingOptionsInStatic@1000000015(VAR XMLDocStatic@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";InitCount@1000000000 : Integer;RowCount@1000000005 : Integer);
    VAR
      XMLNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFound@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // Modify the InitCount and RowCount within the Static Part
      XMLNode := XMLDocStatic.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNode,'ROWCOUNT',XMLNodeFound) THEN
          XMLNodeFound.text(FormatFunctions.IntegerToText(RowCount));
        IF FindNode(XMLNode,'INITCOUNT',XMLNodeFound) THEN
          XMLNodeFound.text(FormatFunctions.IntegerToText(InitCount));
      END;
    END;

    PROCEDURE CreateDummyXMLDocIn@1000000008(VAR DummyXMLDocIn@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000004 : Text[50]);
    VAR
      XMLCurrNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNewChild@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      DocNameSpace@1000000001 : Text[50];
    BEGIN
      // Create an new dummy XMLDocIn to RequestData after an Insert, Modify or Delete Action
      DummyXMLDocIn.loadXML('<EMPLOYEEPORTAL/>');
      XMLCurrNode := DummyXMLDocIn.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF AddElement(
          XMLCurrNode,'GUID',
          GUID,DocNameSpace,XMLNewChild) > 0
        THEN
          EXIT;
      END;
    END;

    PROCEDURE CreateDummyDOCUMENTINFO@1000000009(VAR DummyXMLDOCUMENTINFO@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocInStatic@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      XMLNodeStatic@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeFoundStatic@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLCurrNodeDocInfo@1000000006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNewChildDocInfo@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      DocNameSpace@1000000003 : Text[50];
    BEGIN
      // Build a new DOCUMENTINFO Part and use the Values from the Inbound Request (Insert, Modify, Delete)
      DummyXMLDOCUMENTINFO.loadXML('<DOCUMENTINFO/>');
      XMLCurrNodeDocInfo := DummyXMLDOCUMENTINFO.documentElement;

      XMLNodeStatic := XMLDocInStatic.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF FindNode(XMLNodeStatic,'USERID',XMLNodeFoundStatic) THEN
          IF STRLEN(XMLNodeFoundStatic.text) > 0 THEN BEGIN
            IF AddElement(
              XMLCurrNodeDocInfo,'USERID',
              XMLNodeFoundStatic.text,DocNameSpace,XMLNewChildDocInfo) > 0
            THEN
              EXIT;
          END;

        IF FindNode(XMLNodeStatic,'GROUP',XMLNodeFoundStatic) THEN
          IF STRLEN(XMLNodeFoundStatic.text) > 0 THEN BEGIN
            IF AddElement(
              XMLCurrNodeDocInfo,'GROUP',
              XMLNodeFoundStatic.text,DocNameSpace,XMLNewChildDocInfo) > 0
            THEN
              EXIT;
          END;

        IF FindNode(XMLNodeStatic,'ORG_REQUESTTYPE',XMLNodeFoundStatic) THEN
          IF STRLEN(XMLNodeFoundStatic.text) > 0 THEN BEGIN
            IF AddElement(
              XMLCurrNodeDocInfo,'REQUESTTYPE',
              XMLNodeFoundStatic.text,DocNameSpace,XMLNewChildDocInfo) > 0
            THEN
              EXIT;
          END;
      END;
    END;

    PROCEDURE CreateDummyFiltersPart@1000000010(VAR DummyXMLFilters@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000000 : Text[50]);
    VAR
      EPTempNewHeadFilter@1000000001 : Record 6825;
      EPTempNewHeadKey@1000000006 : Record 6825;
      XMLCurrNode@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNewChild@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      DocNameSpace@1000000003 : Text[50];
    BEGIN
      DummyXMLFilters.loadXML('<FILTERS/>');
      XMLCurrNode := DummyXMLFilters.documentElement;

      EPTempNewHeadFilter.RESET;
      EPTempNewHeadFilter.SETRANGE("Apply-to XML Element",EPTempNewHeadFilter."Apply-to XML Element"::BuildFilter);
      EPTempNewHeadFilter.SETRANGE(GUID,GUID);
      IF EPTempNewHeadFilter.FIND('-') THEN;

      EPTempNewHeadKey.RESET;
      EPTempNewHeadKey.SETRANGE("Apply-to XML Element",EPTempNewHeadKey."Apply-to XML Element"::Key);
      EPTempNewHeadKey.SETRANGE(GUID,GUID);
      IF EPTempNewHeadKey.FIND('-') THEN;

      WITH XMLDOMMgt DO BEGIN
        IF AddElement(
          XMLCurrNode,'FILTERGROUP',
          '',DocNameSpace,XMLNewChild) > 0
        THEN
          EXIT;
        XMLCurrNode := XMLNewChild; // <FILTERGROUP>
          IF AddElement(
            XMLCurrNode,'KEYS',
            '',DocNameSpace,XMLNewChild) > 0
          THEN
            EXIT;
          XMLCurrNode := XMLNewChild; // <KEYS>
            REPEAT
              IF AddElement(
                XMLCurrNode,'KEY',
                FormatFunctions.IntegerToText(EPTempNewHeadKey."Field No."),DocNameSpace,XMLNewChild) > 0
              THEN
                EXIT;
            UNTIL EPTempNewHeadKey.NEXT = 0;
          XMLCurrNode := XMLCurrNode.parentNode; // </KEYS>

          REPEAT
            IF AddElement(
              XMLCurrNode,'FILTER',
              '',DocNameSpace,XMLNewChild) > 0
            THEN
              EXIT;
            XMLCurrNode := XMLNewChild; // <FILTER>
              IF AddElement(
                XMLCurrNode,'FIELD',
                FormatFunctions.IntegerToText(EPTempNewHeadFilter."Field No."),DocNameSpace,XMLNewChild) > 0
              THEN
                EXIT;
              IF AddElement(
                XMLCurrNode,'VALUE',
                EPTempNewHeadFilter.Value,DocNameSpace,XMLNewChild) > 0
              THEN
                EXIT;
            XMLCurrNode := XMLCurrNode.parentNode; // </FILTER>
          UNTIL EPTempNewHeadFilter.NEXT = 0;
        XMLCurrNode := XMLCurrNode.parentNode; // </FILTERGROUP>
      END;
    END;

    PROCEDURE CreateDummyDataPart@1000000012(VAR DummyXMLData@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    BEGIN
      DummyXMLData.loadXML('<DATA/>');
    END;

    PROCEDURE MergeInfoForDummyXMLDocIn@1000000011(VAR DummyXMLDocIn@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR DummyXMLDOCUMENTINFO@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR DummyXMLFilters@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocDummyData@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      XMLNodeDummy@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNode@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      XMLNodeDummy := DummyXMLDocIn.documentElement;

      XMLNode := DummyXMLDOCUMENTINFO.documentElement;
      XMLNodeDummy.appendChild(XMLNode);

      XMLNode := DummyXMLFilters.documentElement;
      XMLNodeDummy.appendChild(XMLNode);

      XMLNode := XMLDocDummyData.documentElement;
      XMLNodeDummy.appendChild(XMLNode);
    END;

    PROCEDURE CreateRequestTypeList@1(VAR XMLDocData@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR UserGroups@1000000001 : Record 6840;Type@1000000006 : Integer);
    VAR
      GroupRequestType@1000 : Record 6805;
      XMLCurrNode@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNewChild@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      DocNameSpace@1000000004 : Text[50];
    BEGIN
      XMLDocData.loadXML('<DATA/>');
      XMLCurrNode := XMLDocData.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF AddElement(
          XMLCurrNode,'GROUPS',
          '', DocNameSpace, XMLNewChild) > 0
        THEN
          EXIT;
        XMLCurrNode := XMLNewChild; // <GROUPS>

        REPEAT
          IF AddElement(
            XMLCurrNode,'GROUP',
            '', DocNameSpace, XMLNewChild) > 0
          THEN
            EXIT;
          XMLCurrNode := XMLNewChild; // <GROUP>
          IF AddElement(
            XMLCurrNode,'NAME',
            UserGroups."Group Code",DocNameSpace,XMLNewChild) > 0
          THEN
            EXIT;
          IF AddElement(
            XMLCurrNode,'CAPTION',
            SupportFunctions.GetMultilangDescription(DATABASE::"EP Group",GLOBALLANGUAGE,
            SupportFunctions.GetGroupTranEPationID(UserGroups."Group Code")),
            DocNameSpace,XMLNewChild) > 0
          THEN
            EXIT;
          SupportFunctions.GetReqTypesRec(UserGroups."Group Code",Type,GroupRequestType);
            IF AddElement(
              XMLCurrNode,'GROUPITEMS',
              '', DocNameSpace, XMLNewChild) > 0
            THEN
              EXIT;
            XMLCurrNode := XMLNewChild; // <GROUPITEMS>
              IF GroupRequestType.FIND('-') THEN BEGIN
                REPEAT
                  IF AddElement(
                    XMLCurrNode,'GROUPITEM',
                    '', DocNameSpace, XMLNewChild) > 0
                  THEN
                    EXIT;
                  XMLCurrNode := XMLNewChild; // <GROUPITEM>
                    IF AddElement(
                      XMLCurrNode,'VALUE',
                      GroupRequestType.Code,DocNameSpace,XMLNewChild) > 0
                    THEN
                      EXIT;
                    IF AddElement(
                      XMLCurrNode,'CAPTION',
                      SupportFunctions.GetMultilangDescription(DATABASE::"EP Web Part Request",GLOBALLANGUAGE,
                      GroupRequestType."Caption ID"),
                      DocNameSpace,XMLNewChild) > 0
                    THEN
                      EXIT;
                  XMLCurrNode := XMLCurrNode.parentNode; // </GROUPITEM>
                UNTIL GroupRequestType.NEXT = 0;
              END;
            XMLCurrNode := XMLCurrNode.parentNode; // </GROUPITEMS>
          XMLCurrNode := XMLCurrNode.parentNode; // </GROUP>
        UNTIL UserGroups.NEXT = 0;
        XMLCurrNode := XMLNewChild; // </GROUPS>
      END;
    END;

    PROCEDURE CreateLayoutForWebSetup@1000000016(VAR XmlDocLayout@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      Setup@1000 : Record 6800;
      XMLCurrNode@1000000103 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNewChild@1000000102 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      DocNameSpace@1000000101 : Text[50];
    BEGIN
      XmlDocLayout.loadXML('<LAYOUT/>');
      XMLCurrNode := XmlDocLayout.documentElement;

      IF NOT Setup.GET THEN
        EXIT;

      WITH XMLDOMMgt DO BEGIN
        // add title for web setup to layout xml fragment
        IF AddElement(
          XMLCurrNode,'TITLE',
          SupportFunctions.GetMultilangDescription(DATABASE::"Employee Portal Setup",GLOBALLANGUAGE,
            Setup."Config Tool Pane Caption ID"),
          DocNameSpace, XMLNewChild) > 0
        THEN
          EXIT;

        IF AddElement(
          XMLCurrNode,'GROUP_LABEL',
          SupportFunctions.GetMultilangDescription(DATABASE::"Employee Portal Setup",GLOBALLANGUAGE,
            Setup."Config TP Group Capt ID"),
          DocNameSpace, XMLNewChild) > 0
        THEN
          EXIT;

        // add "req. type selection text" for web setup to layout xml fragment
        IF AddElement(
          XMLCurrNode,'REQUEST_LABEL',
          SupportFunctions.GetMultilangDescription(DATABASE::"Employee Portal Setup",GLOBALLANGUAGE,
            Setup."Config TP WP Request Capt ID"),
          DocNameSpace, XMLNewChild) > 0
        THEN
          EXIT;

        // add "no init request text" for web setup to layout xml fragment
        IF AddElement(
          XMLCurrNode,'NO_INIT_REQUEST',
          SupportFunctions.GetMultilangDescription(DATABASE::"Employee Portal Setup",GLOBALLANGUAGE,
          Setup."Config TP Initial Req. Capt ID"),
          DocNameSpace, XMLNewChild) > 0
        THEN
          EXIT;
      END;
    END;

    PROCEDURE CreateValidationDoc@1000000018(VAR XMLDocValiField@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    BEGIN
      IF NOT ISCLEAR(XMLDocValiField) THEN
        EXIT;

      CREATE(XMLDocValiField);
      XMLDocValiField.loadXML('<VALIFIELDS/>');
    END;

    PROCEDURE AddFieldToValidationDoc@1000000017(VAR XMLDocValiField@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";FieldNo@1000000004 : Integer);
    VAR
      XMLCurrNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNewChild@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      DocNameSpace@1000000001 : Text[50];
    BEGIN
      XMLCurrNode := XMLDocValiField.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF AddElement(
          XMLCurrNode,'FIELD',
          FormatFunctions.IntegerToText(FieldNo),
          DocNameSpace,XMLNewChild) > 0
        THEN
          EXIT;
      END;
    END;

    PROCEDURE ClearValidationDoc@1000000019(VAR XMLDocValiField@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    BEGIN
      IF ISCLEAR(XMLDocValiField) THEN
        EXIT;

      CLEAR(XMLDocValiField);
    END;

    PROCEDURE CreateKey@2(VAR RecordRef@1000 : RecordRef;VAR KeyNode@1010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";Type@1008 : 'Head,Line,None');
    VAR
      FieldRef@1002 : FieldRef;
      KeyRef@1001 : KeyRef;
      XMLCurrNode@1007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNewChild@1006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLDocKey@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      DocNameSpace@1005 : Text[50];
      NodePrefix@1009 : Code[5];
      i@1003 : Integer;
    BEGIN
      CASE Type OF
        Type::Head: NodePrefix := 'HEAD_';
        Type::Line: NodePrefix := 'LINE_';
        Type::None: NodePrefix := '';
      END;

      KeyRef := RecordRef.KEYINDEX(1);

      IF ISCLEAR(XMLDocKey) THEN
        CREATE(XMLDocKey);

      XMLDocKey.loadXML(STRSUBSTNO('<%1PRIMKEYVALUES/>',NodePrefix));
      XMLCurrNode := XMLDocKey.documentElement;

      FOR i := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(i);
        WITH XMLDOMMgt DO BEGIN
          IF AddElement(
            XMLCurrNode,STRSUBSTNO('%1PRIMKEYVALUE',NodePrefix),'',
            DocNameSpace,XMLNewChild) > 0
          THEN
            EXIT;
          XMLCurrNode := XMLNewChild;
            IF AddElement(
              XMLCurrNode,STRSUBSTNO('%1PRIMKEYFIELD',NodePrefix),FormatFunctions.IntegerToText(FieldRef.NUMBER),
              DocNameSpace,XMLNewChild) > 0
            THEN
              EXIT;
            IF AddElement(
              XMLCurrNode,STRSUBSTNO('%1PRIMKEYFIELDVALUE',NodePrefix),
              FormatFunctions.GetValueFromFieldRef(RecordRef.NUMBER,FieldRef.NUMBER,FieldRef),
              DocNameSpace,XMLNewChild) > 0
            THEN
              EXIT;
          XMLCurrNode := XMLCurrNode.parentNode;
        END;
      END;

      KeyNode := XMLDocKey.documentElement;
    END;

    PROCEDURE CreateSearchTableList@4(VAR XMLDocData@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      SearchTables@1001 : Record 6836;
      XMLCurrNode@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNewChild@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      DocNameSpace@1000000004 : Text[50];
    BEGIN
      SearchTables.RESET;
      IF SearchTables.FIND('-') THEN;

      XMLDocData.loadXML('<DATA/>');
      XMLCurrNode := XMLDocData.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF AddElement(
          XMLCurrNode,'SEARCHTABLES',
          '', DocNameSpace, XMLNewChild) > 0
        THEN
          EXIT;
        XMLCurrNode := XMLNewChild;
        REPEAT
          IF AddElement(
            XMLCurrNode,'SEARCHTABLE',
            '', DocNameSpace, XMLNewChild) > 0
          THEN
            EXIT;
          XMLCurrNode := XMLNewChild;
          IF AddElement(
            XMLCurrNode,'TABLE_NO',FormatFunctions.IntegerToText(SearchTables."Table No."),
            DocNameSpace,XMLNewChild) > 0
          THEN
            EXIT;
          IF AddElement(
            XMLCurrNode,'CAPTION',SearchTables."Table Caption",
            DocNameSpace,XMLNewChild) > 0
          THEN
            EXIT;
          XMLCurrNode := XMLCurrNode.parentNode;
        UNTIL SearchTables.NEXT = 0;
        XMLCurrNode := XMLNewChild;
      END;
    END;

    PROCEDURE CreateSearchLayout@3(VAR XmlDocLayout@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      Setup@1000 : Record 6800;
      XMLCurrNode@1000000103 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNewChild@1000000102 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      DocNameSpace@1000000101 : Text[50];
    BEGIN
      XmlDocLayout.loadXML('<LAYOUT/>');
      XMLCurrNode := XmlDocLayout.documentElement;

      IF NOT Setup.GET THEN
        EXIT;

      WITH XMLDOMMgt DO BEGIN
        IF AddElement(
          XMLCurrNode,'TITLE',
          SupportFunctions.GetMultilangDescription(DATABASE::"Employee Portal Setup",GLOBALLANGUAGE,
            Setup."Search Tool Pane Caption ID"),
          DocNameSpace, XMLNewChild) > 0
        THEN
          EXIT;
        IF AddElement(
          XMLCurrNode,'SEARCH_LABEL',
          SupportFunctions.GetMultilangDescription(DATABASE::"Employee Portal Setup",GLOBALLANGUAGE,
            Setup."Search Config Table ID"),
          DocNameSpace, XMLNewChild) > 0
        THEN
          EXIT;
        IF AddElement(
          XMLCurrNode,'CAPTION_ALL_TABLES',
          SupportFunctions.GetMultilangDescription(DATABASE::"Employee Portal Setup",GLOBALLANGUAGE,
            Setup."Search TP All Tables Capt ID"),
          DocNameSpace, XMLNewChild) > 0
        THEN
          EXIT;
      END;
    END;

    PROCEDURE CreateSearchResult@5(VAR XMLDocData@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1004 : Code[50];UserID@1006 : Code[50];TableNo@1011 : Integer);
    VAR
      SearchResult@1007 : Record 6843;
      SearchConfig@1005 : Record 6839;
      XMLCurrNode@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNewChild@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLKey@1008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      KeyNode@1010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      OutStream@1009 : OutStream;
      DocNameSpace@1001 : Text[50];
    BEGIN
      XMLDocData.loadXML('<DATA/>');
      XMLCurrNode := XMLDocData.documentElement;


      WITH XMLDOMMgt DO BEGIN
        IF AddElement(
          XMLCurrNode,'SEARCHRESULTS',
          '', DocNameSpace, XMLNewChild) > 0
        THEN
          EXIT;
        XMLCurrNode := XMLNewChild;
        SearchConfig.RESET;
        SearchConfig.SETRANGE("User ID",UserID);
        IF TableNo > 0 THEN
          SearchConfig.SETRANGE("Table No.",TableNo);
        IF SearchConfig.FIND('-') THEN BEGIN
          REPEAT
            IF AddElement(
              XMLCurrNode,'RESULTSET','',
              DocNameSpace, XMLNewChild) > 0
            THEN
              EXIT;
            XMLCurrNode := XMLNewChild;
              IF AddElement(
                XMLCurrNode,'TABLE_NO',FormatFunctions.IntegerToText(SearchConfig."Table No."),
                DocNameSpace, XMLNewChild) > 0
              THEN
                EXIT;
              IF AddElement(
                XMLCurrNode,'TARGET_LINK',SearchConfig."Target Link",
                DocNameSpace, XMLNewChild) > 0
              THEN
                EXIT;
              IF AddElement(
                XMLCurrNode,'REQUESTTYPE',SearchConfig."WP Request Code",
                DocNameSpace, XMLNewChild) > 0
              THEN
                EXIT;
              IF AddElement(
                XMLCurrNode,'GROUP',SearchConfig."Group Code",
                DocNameSpace, XMLNewChild) > 0
              THEN
                EXIT;
              IF AddElement(
                XMLCurrNode,'WEBPART_TYPE',FormatFunctions.OptionToText(SearchConfig."WP Request Type"),
                DocNameSpace, XMLNewChild) > 0
              THEN
                EXIT;

              SearchResult.RESET;
              SearchResult.SETRANGE(GUID,GUID);
              SearchResult.SETRANGE("Table No.",SearchConfig."Table No.");
              IF SearchResult.FIND('-') THEN BEGIN
                IF AddElement(
                  XMLCurrNode,'RECORDCOUNT',FormatFunctions.IntegerToText(SearchResult.COUNT),
                  DocNameSpace, XMLNewChild) > 0
                THEN
                  EXIT;

                IF AddElement(
                  XMLCurrNode,'RESULTVALUES','',
                  DocNameSpace, XMLNewChild) > 0
                THEN
                  EXIT;

                XMLCurrNode := XMLNewChild;
                  REPEAT
                    IF AddElement(
                      XMLCurrNode,'RESULTVALUE','',
                      DocNameSpace, XMLNewChild) > 0
                    THEN
                      EXIT;
                    XMLCurrNode := XMLNewChild;
                      IF AddElement(
                        XMLCurrNode,'DISPLAYFIELD1',SearchResult."Display Field 1",
                        DocNameSpace, XMLNewChild) > 0
                      THEN
                        EXIT;
                      IF AddElement(
                        XMLCurrNode,'DISPLAYFIELD2',SearchResult."Display Field 2",
                        DocNameSpace, XMLNewChild) > 0
                      THEN
                        EXIT;
                      IF AddElement(
                        XMLCurrNode,'DISPLAYFIELD3',SearchResult."Display Field 3",
                        DocNameSpace, XMLNewChild) > 0
                      THEN
                        EXIT;
                      IF AddElement(
                        XMLCurrNode,'DISPLAYFIELD4',SearchResult."Display Field 4",
                        DocNameSpace, XMLNewChild) > 0
                      THEN
                        EXIT;
                      IF AddElement(
                        XMLCurrNode,'DISPLAYFIELD5',SearchResult."Display Field 5",
                        DocNameSpace, XMLNewChild) > 0
                      THEN
                        EXIT;
                      SearchResult.CALCFIELDS("Primary Key BLOB");
                      IF SearchResult."Primary Key BLOB".HASVALUE THEN BEGIN
                        SearchResult."Primary Key BLOB".CREATEOUTSTREAM(OutStream);
                        CREATE(XMLKey);
                        XMLKey.load(OutStream);
                        KeyNode := XMLKey.documentElement;
                        XMLCurrNode.appendChild(KeyNode);
                        CLEAR(XMLKey);
                      END;
                    XMLCurrNode := XMLCurrNode.parentNode;
                  UNTIL SearchResult.NEXT = 0;
                XMLCurrNode := XMLCurrNode.parentNode;
              END ELSE BEGIN
                IF AddElement(
                  XMLCurrNode,'RECORDCOUNT','0',
                  DocNameSpace, XMLNewChild) > 0
                THEN
                  EXIT;
              END;
            XMLCurrNode := XMLCurrNode.parentNode;
          UNTIL SearchConfig.NEXT = 0;
        END;
        XMLCurrNode := XMLCurrNode.parentNode;
      END;
    END;

    PROCEDURE CreateSearchResultLayout@6(VAR XMLDocLayout@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";UserId@1008 : Code[50];TableNo@1002 : Integer);
    VAR
      SearchDisplay@1007 : Record 6838;
      SearchConfig@1001 : Record 6839;
      XMLCurrNode@1005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNewChild@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      DocNameSpace@1003 : Text[50];
      TableCaption@1006 : Text[80];
    BEGIN
      SearchConfig.RESET;
      SearchConfig.SETRANGE("User ID",UserId);
      IF TableNo > 0 THEN
        SearchConfig.SETRANGE("Table No.",TableNo);
      IF NOT SearchConfig.FIND('-') THEN
        EXIT;

      XMLDocLayout.loadXML('<LAYOUT_LINE/>');
      XMLCurrNode := XMLDocLayout.documentElement;

      WITH XMLDOMMgt DO BEGIN
        REPEAT
          SupportFunctions.GetTableCaption(SearchConfig."Table No.",TableCaption);
          IF AddElement(
            XMLCurrNode,'FIELDS_LAYOUTLINE',
            '', DocNameSpace, XMLNewChild) > 0
          THEN
            EXIT;
          XMLCurrNode := XMLNewChild;
            IF AddElement(
              XMLCurrNode,'TABLE_NO',
              FormatFunctions.IntegerToText(SearchConfig."Table No."),DocNameSpace,XMLNewChild) > 0
            THEN
              EXIT;
            IF AddElement(
              XMLCurrNode,'TABLE_CAPTION',
              TableCaption,DocNameSpace,XMLNewChild) > 0
            THEN
              EXIT;
            SearchDisplay.RESET;
            SearchDisplay.SETRANGE("Table No.",SearchConfig."Table No.");
            IF SearchDisplay.FIND('-') THEN BEGIN
              REPEAT
                CreateSearchResultLayoutField(XMLCurrNode,SearchDisplay);
              UNTIL SearchDisplay.NEXT = 0;
            END;
          XMLCurrNode := XMLCurrNode.parentNode;
        UNTIL SearchConfig.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateSearchResultLayoutField@11(VAR XMLNode@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";VAR SearchDisplay@1002 : Record 6838);
    VAR
      XMLNewChild@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      DocNameSpace@1003 : Text[50];
      Position@1006 : Integer;
      OptionString@1007 : Text[1024];
      OptionElement@1005 : Text[1024];
      OptionCounter@1001 : Integer;
    BEGIN
      Position := SearchDisplay."Display Field" + 1;
      SearchDisplay.CALCFIELDS("Field Caption");

      WITH XMLDOMMgt DO BEGIN
        IF AddElement(
          XMLNode,'FIELD_LAYOUTLINE',
          '',DocNameSpace,XMLNewChild) > 0
        THEN
          EXIT;
        XMLNode := XMLNewChild;
          IF AddElement(
            XMLNode,'POSITION',
            FormatFunctions.IntegerToText(Position),DocNameSpace,XMLNewChild) > 0
          THEN
            EXIT;
          IF AddElement(
            XMLNode,'CAPTION',
            SearchDisplay."Field Caption",DocNameSpace,XMLNewChild) > 0
          THEN
            EXIT;
          IF AddElement(
            XMLNode,'HTML_TYPE',
            FormatFunctions.IntegerToText(SearchDisplay."HTML Layout"),DocNameSpace,XMLNewChild) > 0
          THEN
            EXIT;
          IF AddElement(
            XMLNode,'TYPE',
            FormatFunctions.IntegerToText(SearchDisplay."Field Type"),DocNameSpace,XMLNewChild) > 0
          THEN
            EXIT;
          IF SupportFunctions.CheckIfOptionField(SearchDisplay."Table No.",SearchDisplay."Field No.") THEN BEGIN
            OptionCounter := 0;
            IF AddElement(
              XMLNode,'OPTIONS',
              '',DocNameSpace,XMLNewChild) > 0
            THEN
              EXIT;
            XMLNode := XMLNewChild; // <OPTIONS>
              SupportFunctions.GetOptionCaption(SearchDisplay."Table No.",
                SearchDisplay."Field No.",OptionString);

              REPEAT
                SupportFunctions.GetOptionStringElements(OptionString,OptionElement);
                IF NOT ((OptionCounter > 0) AND (OptionElement = '')) THEN BEGIN
                  IF AddElement(
                    XMLNode,'OPTION',
                    '',DocNameSpace,XMLNewChild) > 0
                  THEN
                    EXIT;
                  XMLNode := XMLNewChild; // <OPTION>
                    IF AddElement(
                      XMLNode,'VALUE',
                      FormatFunctions.IntegerToText(OptionCounter),DocNameSpace,XMLNewChild) > 0
                    THEN
                      EXIT;
                    IF AddElement(
                      XMLNode,'CAPTION',
                      OptionElement,DocNameSpace,XMLNewChild) > 0
                    THEN
                      EXIT;
                   XMLNode := XMLNode.parentNode; // </OPTION>
                END;
                OptionCounter := OptionCounter + 1;
              UNTIL STRLEN(OptionString) <= 0;
            XMLNode := XMLNode.parentNode; // </OPTIONS>
          END;
        XMLNode := XMLNode.parentNode;
      END;
    END;

    PROCEDURE MergeOutboundParts@1000000020(VAR XMLDoc@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocMsg@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocSign@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocSymKey@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocInitVector@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1001 : Text[50]);
    VAR
      XMLNode@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNode2@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNewChild@1000000007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNode3@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      IF NOT ISCLEAR(XMLDoc) THEN
        CLEAR(XMLDoc);

      CREATE(XMLDoc);
      XMLDoc.loadXML('<EMPLOYEEPORTAL/>');
      XMLNode := XMLDoc.documentElement;

      IF XMLDOMMgt.AddElement(XMLNode,'GUID',GUID,'',XMLNewChild) > 0 THEN
        EXIT;

      XMLNode2 := XMLDocMsg.documentElement;
      XMLNode.appendChild(XMLNode2);

      XMLNode2 := XMLDocSign.documentElement;
      XMLNode.appendChild(XMLNode2);

      XMLNode3 := XMLDoc.createElement('SYM');
      XMLNode.appendChild(XMLNode3);

      XMLNode2 := XMLDocSymKey.documentElement;
      XMLNode3.appendChild(XMLNode2);

      XMLNode2 := XMLDocInitVector.documentElement;
      XMLNode3.appendChild(XMLNode2);
    END;

    PROCEDURE CreateListenerConfig@1000000014(VAR XMLDoc@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";NASID@1001 : Code[20];RunAsTrustHandler@1000 : Boolean);
    VAR
      XMLNewChild@1011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      DocNameSpace@1010 : Text[50];
      XMLNode@1009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      OutStream@1008 : OutStream;
      XMLDocKey@1007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLNodeKey@1006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      NASSetup@1005 : Record 6870;
      EPSetup@1004 : Record 6800;
      TrustedSites@1003 : Record 6872;
      RequestHandler@1012 : Codeunit 6810;
    BEGIN
      NASSetup.GET(NASID);
      IF NOT RunAsTrustHandler THEN BEGIN
        NASSetup.TESTFIELD("Request Queue");
        NASSetup.TESTFIELD("Reply Queue");
      END ELSE BEGIN
        NASSetup.TESTFIELD("Key Exchange Request Queue");
        NASSetup.TESTFIELD("Key Exchange Reply Queue");
      END;

      EPSetup.GET;
      IF TrustedSites.FIND('-') THEN;

      XMLDoc.loadXML('<EMPLOYEEPORTAL/>');
      XMLNode := XMLDoc.documentElement;

      WITH XMLDOMMgt DO BEGIN
        IF AddElement(
          XMLNode,'LISTENERCONFIG',
          '',DocNameSpace,XMLNewChild) > 0
        THEN
          EXIT;
        XMLNode := XMLNewChild;
          IF AddElement(
            XMLNode,'VERSION',
            RequestHandler.Version,DocNameSpace,XMLNewChild) > 0
          THEN
            EXIT;
          IF NOT RunAsTrustHandler THEN BEGIN
            IF AddElement(
              XMLNode,'JOBQUEUE',
              NASSetup."Request Queue",DocNameSpace,XMLNewChild) > 0
            THEN
              EXIT;
            IF AddElement(
              XMLNode,'REPLYQUEUE',
              NASSetup."Reply Queue",DocNameSpace,XMLNewChild) > 0
            THEN
              EXIT;
            IF AddElement(
              XMLNode,'ENCRYPTION',
              FormatFunctions.BooleanToText(NASSetup."Use Encryption"),DocNameSpace,XMLNewChild) > 0
            THEN
              EXIT;
            IF AddElement(
              XMLNode,'COMPRESSION',
              FormatFunctions.BooleanToText(NASSetup."Use Compression"),DocNameSpace,XMLNewChild) > 0
            THEN
              EXIT;
          END ELSE BEGIN //For the Trust Handler: The COM Object handles the compression an encryption
            IF AddElement(
              XMLNode,'JOBQUEUE',
              NASSetup."Key Exchange Request Queue",DocNameSpace,XMLNewChild) > 0
            THEN
              EXIT;
            IF AddElement(
              XMLNode,'REPLYQUEUE',
              NASSetup."Key Exchange Reply Queue",DocNameSpace,XMLNewChild) > 0
            THEN
              EXIT;
            IF AddElement(
              XMLNode,'ENCRYPTION',
              FormatFunctions.BooleanToText(FALSE),DocNameSpace,XMLNewChild) > 0
            THEN
              EXIT;
            IF AddElement(
              XMLNode,'COMPRESSION',
              FormatFunctions.BooleanToText(FALSE),DocNameSpace,XMLNewChild) > 0
            THEN
              EXIT;
          END;
          EPSetup.CALCFIELDS("Back End Private Key");
          IF NOT EPSetup."Back End Private Key".HASVALUE THEN
            ERROR(Text003);
          IF AddElement(
            XMLNode,'PRIVATEBACKEND',
            '',DocNameSpace,XMLNewChild) > 0
          THEN
            EXIT;
          XMLNode := XMLNewChild;
            EPSetup."Back End Private Key".CREATEOUTSTREAM(OutStream);
            CREATE(XMLDocKey);
            XMLDocKey.load(OutStream);
            XMLNodeKey := XMLDocKey.documentElement;
            XMLNode.appendChild(XMLNodeKey);
            CLEAR(XMLDocKey);
          XMLNode := XMLNode.parentNode;
          IF AddElement(
            XMLNode,'PUBLICFRONTEND',
            '',DocNameSpace,XMLNewChild) > 0
          THEN
            EXIT;
          XMLNode := XMLNewChild;
            IF AddElement(
              XMLNode,'KEYS',
              '',DocNameSpace,XMLNewChild) > 0
            THEN
              EXIT;
            IF TrustedSites.COUNT > 0 THEN
              REPEAT
                TrustedSites.CALCFIELDS("Partner Public Key");
                IF TrustedSites."Partner Public Key".HASVALUE AND TrustedSites."Answer Sent" THEN BEGIN
                  XMLNode := XMLNewChild;
                    IF AddElement(
                      XMLNode,'KEY',
                      '',DocNameSpace,XMLNewChild) > 0
                    THEN
                      EXIT;
                    XMLNode := XMLNewChild;
                      IF AddElement(
                        XMLNode,'ID',
                        TrustedSites."Site Identifier",DocNameSpace,XMLNewChild) > 0
                      THEN
                        EXIT;
                      TrustedSites."Partner Public Key".CREATEOUTSTREAM(OutStream);
                      CREATE(XMLDocKey);
                      XMLDocKey.load(OutStream);
                      XMLNodeKey := XMLDocKey.documentElement;
                      XMLNode.appendChild(XMLNodeKey);
                      CLEAR(XMLDocKey);
                    XMLNode := XMLNode.parentNode;
                  XMLNode := XMLNode.parentNode;
                END;
              UNTIL TrustedSites.NEXT = 0;
          XMLNode := XMLNode.parentNode;
          IF AddElement(
            XMLNode,'RUNASTRUSTHANDLER',
            FormatFunctions.BooleanToText(RunAsTrustHandler),DocNameSpace,XMLNewChild) > 0
          THEN
            EXIT;
        XMLNode := XMLNode.parentNode;
      END;
    END;

    BEGIN
    END.
  }
}
