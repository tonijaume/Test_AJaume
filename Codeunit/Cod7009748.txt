OBJECT Codeunit 7009748 Gestion interface reservas
{
  OBJECT-PROPERTIES
  {
    Date=25/04/15;
    Time=10:03:32;
    Modified=Yes;
    Version List=AIC2009;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text010@1103355013 : TextConst 'ENU=Separate &Current,Separate &Filters;ESP=Apartar &Actual,Apartar &Filtradas';
      Text011@1103355014 : TextConst 'ENU=Apply to &Current,Apply to &Filtereds;ESP=Desapartar &Actual,Desapartar &Filtradas';
      Text013@1103355016 : TextConst 'ENU=DELETING PREVIOUS ERRORS\;ESP=ELIMINADO ERRORES ANTERIORES\';
      Text014@1103355017 : TextConst 'ENU=REVIEWING HEADERS\;ESP=REVISANDO CABECERAS\';
      Text016@1103355019 : TextConst 'ENU=Wrong Registration type;ESP=Tipo de Registro erroneo';
      Text017@1103355020 : TextConst 'ENU=Touroperator %1 does not exist;ESP=No existe el Touroperador %1.';
      Text018@1103355021 : TextConst 'ENU=Exchange for touroperator %1 was not found;ESP=No se ha encontrado conversi¢n para el touroperador %1.';
      Text019@1103355022 : TextConst 'ENU=Booking does not have voucher no.;ESP=La reserva no lleva n§ de Bono.';
      Text020@1103355023 : TextConst 'ENU=Booking does not have seasson;ESP=La reserva no lleva la temporada.';
      Text021@1103355024 : TextConst 'ENU=Booking does not have creation date.;ESP=La reserva no tiene fecha de creacion.';
      Text022@1103355025 : TextConst 'ENU=Booking does not have cancellation date;ESP=La reserva no tiene fecha de cancelacion.';
      Text023@1103355026 : TextConst 'ENU=Booking does not have modification date;ESP=La reserva no tiene fecha de modificacion.';
      Text024@1103355027 : TextConst 'ENU=Wrong type of booking;ESP=Tipo de Booking erroneo';
      Text025@1103355028 : TextConst 'ENU=Booking without package;ESP=Reserva sin paquete.';
      Text026@1103355029 : TextConst 'ENU=ONLYFLIGHT;ESP=SOLOVUELO';
      Text027@1103355030 : TextConst 'ENU=Booking only flight;ESP=Reserva de solo vuelo';
      Text028@1103355031 : TextConst 'ENU=Package %1 does not exist;ESP=No existe el paquete %1.';
      Text029@1103355032 : TextConst 'ENU=Booking is not cancelled but it has cancellation date;ESP=La reserva no es de baja pero tiene fecha de cancelacion.';
      Text030@1103355033 : TextConst 'ENU=Booking  %1 %2 %3 in system does not exist.;ESP=No existe en el sistema la reserva %1 %2 %3.';
      Text031@1103355034 : TextConst 'ENU=Booking %1 %2 is in the system with seasson %3;ESP=La reserva %1 %2 esta en el sistema con temporada %3.';
      Text032@1103355035 : TextConst 'ENU=Bookign %1 %2 %3 is grouped of check-in, cannot be modified;ESP=La reserva %1 %2 %3 ya esta agrupada de entrada, no se puede modificar.';
      Text033@1103355036 : TextConst 'ENU=Bookign %1 %2 %3 is grouped of check-out, cannot be modified;ESP=La reserva %1 %2 %3 ya esta agrupada de salida, no se puede modificar.';
      Text034@1103355037 : TextConst 'ENU=Booking  %1 %2 in system does not exist.;ESP=No existe en el sistema la reserva %1 %2.';
      Text035@1103355038 : TextConst 'ENU=Bookign %1 %2 %3 is grouped of check-in, cannot be erased;ESP=La reserva %1 %2 %3 ya esta agrupada de entrada, no se puede borrar.';
      Text036@1103355039 : TextConst 'ENU=Wrong type of registration in pax %1;ESP=Tipo de registro erroneo en el pax %1.';
      Text037@1103355040 : TextConst 'ENU=Person type %1 is not cleared for touroperator %2 in pax %3;ESP=No esta definido el tipo de persona %1 para el touroperador %2 en el pax %3.';
      Text038@1103355041 : TextConst 'ENU=Person %1 does not have cleared name;ESP=La persona %1 no tiene nombre definido.';
      Text039@1103355042 : TextConst 'ENU=Person to modify into does not exist in system;ESP=No existe en el sistema la persona a modificar dentro';
      Text040@1103355043 : TextConst 'ENU=of booking %1 %2 %3;ESP=de la reserva %1 %2 %3.';
      Text041@1103355044 : TextConst 'ENU=Paxes registrations associated to this header do not exist;ESP=No existen registros de paxes asociados a esta cabecera.';
      Text043@1103355046 : TextConst 'ENU=3D1100L;ESP=3D1100L';
      Text044@1103355047 : TextConst 'ENU=3D1100L1;ESP=3D1100L1';
      Text045@1103355048 : TextConst 'ENU=3D1100L2;ESP=3D1100L2';
      Text046@1103355049 : TextConst 'ENU=3D1100L3;ESP=3D1100L3';
      Text047@1103355050 : TextConst 'ENU=3D1100L4;ESP=3D1100L4';
      Text048@1103355051 : TextConst 'ENU=3D1100L5;ESP=3D1100L5';
      Text049@1103355052 : TextConst 'ENU=3D1100L6;ESP=3D1100L6';
      Text050@1103355053 : TextConst 'ENU=3D3002;ESP=3D3002';
      Text051@1103355054 : TextConst 'ENU=3D3002ZIEL;ESP=3D3002ZIEL';
      Text053@1103355056 : TextConst 'ENU=No correct package type in hotel line %1;ESP=Tipo de paquete incorrecto en linea de hotel %1';
      Text054@1103355057 : TextConst 'ENU=Hotel line %1 has not check-in date;ESP=La linea del hotel %1 no tiene fecha de entrada.';
      Text055@1103355058 : TextConst 'ENU=Hotel line %1 has check-in date after check-out date;ESP=La linea del hotel %1 tiene fecha de entrada posterior a la fecha de salida.';
      Text056@1103355059 : TextConst 'ENU=Hotel %1 for touroperator %2 is not cleared;ESP=No esta definido el hotel %1 para el touroperador %2.';
      Text057@1103355060 : TextConst 'ENU=Board %1 for touroperator %2 is not cleared;ESP=No esta definido el regimen %1 para el touroperador %2.';
      Text058@1103355061 : TextConst 'ENU=Hotel line %1 does not have check-out date;ESP=La linea del hotel %1 no tiene fecha de salida.';
      Text059@1103355062 : TextConst 'ENU=Any hotel service corresponding to dates of local flight exists;ESP=No existe ningun servicio de hotel que corresponda con las fechas del vuelo local.';
      Text060@1103355063 : TextConst 'ENU=Hotel line %1 service number %2 does not have associated services;ESP=La linea del hotel %1 n§ de servicio %2 no tiene servicios asociados.';
      Text061@1103355064 : TextConst 'ENU="Booking in the system does not have Term Hotel= %1 Roo=%2";ESP="La reserva en el sistema no tiene el Periodo  Hotel= %1 Hab=%2"';
      Text062@1103355065 : TextConst 'ENU=Airline %1 does not date;ESP=La linea de vuelo %1 no tiene fecha.';
      Text063@1103355066 : TextConst 'ENU=Airline %1 does not exist;ESP=No existe la compa¤ia aerea %1.';
      Text064@1103355067 : TextConst 'ENU=Airport associated to hotel %1 does not exist;ESP=No existe aeropuerto asociado en Hotel: %1';
      Text065@1103355068 : TextConst 'ENU="Flight plan does not exist Date: %1 %2-%3 Origin=%4 Destination=%5";ESP="No existe plan de vuelo Fecha: %1 %2-%3 Origen=%4 Destino=%5"';
      Text066@1103355069 : TextConst 'ENU=Airport %1 does not exist;ESP=No existe el aeropuerto %1.';
      Text067@1103355070 : TextConst 'ENU=Any service associated to booking exists;ESP=No existe ningun servicio asociado a la reserva.';
      Text068@1103355071 : TextConst 'ENU=Service no. %1 is referring to pax no. %2 which does not exist;ESP=El servicio n§ %1 hace referencia al pax n§ %2 que no existe.';
      Text069@1103355072 : TextConst 'ENU=Booking is not higher than the minimum of stays of contract %1.;ESP=La reserva no supera el minimo de estancias del contrato %1.';
      Text070@1103355073 : TextConst 'ENU=Room %1 in contract %2 is not cleared;ESP=No esta definida la habitacion %1 en el contrato %2.';
      Text071@1103355074 : TextConst 'ENU="There are more than one cleared exchanges for the type %1, enter the booking manually ";ESP=Hay mas de una conversion definida para el tipo %1, introduzca manualmente la reserva.';
      Text072@1103355075 : TextConst 'ENU=There is no purchase allotment for room %1 in contract %2-%3;ESP=No existe cupo de compra para la habitacion %1 en el contrato %2-%3';
      Text073@1103355076 : TextConst 'ENU=for the date %4;ESP=para la fecha %4.';
      Text074@1103355077 : TextConst 'ENU=There is no purchase price for the room %1 in contract %2-%3;ESP=No existe precio de compra para la habitacion %1 en el contrato %2-%3';
      Text075@1103355078 : TextConst 'ENU=There is no purchase price for the board %1 in contract %2-%3;ESP=No existe precio de compra para el regimen %1 en el contrato %2-%3';
      Text076@1103355079 : TextConst 'ENU=There is no hotel purchase contract for the TourOperator %1;ESP=No existe contrato de compra hotel para el TourOperador %1';
      Text077@1103355080 : TextConst 'ENU=in hotel %2 for the date %3;ESP=en el hotel %2 para la fecha %3.';
      Text078@1103355081 : TextConst 'ENU=Sale allotment for the room %1 in contract %2-%3 does not exist;ESP=No existe cupo de venta para la habitacion %1 en el contrato %2-%3';
      Text079@1103355082 : TextConst 'ENU=Sale price for the room %1 in contract %2-%3 does not exist;ESP=No existe precio de venta para la habitacion %1 en el contrato %2-%3';
      Text080@1103355083 : TextConst 'ENU=Sale price for the board %1 in contract %2-%3 does not exist;ESP=No existe precio de venta para el regimen %1 en el contrato %2-%3';
      Text081@1103355084 : TextConst 'ENU=Hotel sale contract for the Touroperator %1 does not exist;ESP=No existe contrato de venta hotel para el TourOperador %1';
      Text082@1103355085 : TextConst 'ENU=ERASE FILE DATA\;ESP=BORRAR DATOS FICHERO\';
      Text083@1103355086 : TextConst 'ENU=NUMBER #1#####;ESP=NUMERO #1#####';
      Text084@1103355087 : TextConst 'ENU=Are you sure to delete the file %1;ESP=Esta seguro de que desea borrar el fichero %1.';
      Text085@1103355088 : TextConst 'ENU=DELETING NON-PROCESSED DATA\;ESP=BORRANDO DATOS NO PROCESADOS\';
      Text086@1103355089 : TextConst 'ENU=File #1#####\;ESP=Fichero #1#####\';
      Text087@1103355090 : TextConst 'ENU=&Current,&Filtered;ESP=&Actual,&Filtrados';
      Text088@1103355091 : TextConst 'ENU=ERASING SEPARATED DATA\;ESP=BORRANDO DATOS APARTADOS\';
      Text089@1103355092 : TextConst 'ENU=FOLDER #1####\;ESP=FICHERO #1####\';
      Text090@1103355093 : TextConst 'ENU=Voucher    #2########;ESP=Bono    #2########';
      rConvTO@1103355000 : Record 7010161;
      wTTOO@1103355001 : Code[10];
      rPar@1103355002 : Record 7010081;
      Text091@1103355094 : TextConst 'ENU=Flights information was not found;ESP=No se ha encontrado informaci¢n de Vuelos';
      Text092@1103355095 : TextConst 'ENU=Extra code %1 is not found;ESP=No se encuentra codigo extra %1';
      Text093@1103355096 : TextConst 'ENU=Any hotel for extra %1 was found;ESP=No se ha encontrado ning£n hotel para el extra %1';
      Text094@1103355097 : TextConst 'ENU=Purchase price for extra %1 in contract %2-%3 does not exist;ESP=No existe precio de compra para el extra %1 en el contrato %2-%3';
      Text095@1103355098 : TextConst 'ENU=Sale price for extra %1 in contract %2-%3 does not exist;ESP=No existe precio de venta para el extra %1 en el contrato %2-%3';
      Text096@1103355099 : TextConst 'ENU=Any real stay exists in the booking;ESP=No existe ninguna estancia real en la reserva';
      Text097@1103355100 : TextConst 'ENU=Check-in and check-out date cannot be the same in a stay;ESP=Fecha de Entrada y Salida no puede ser la misma en una estancia';
      Text098@1100253000 : TextConst 'ESP=¨Desea traspasar las reservas seleccionadas?';
      rDatosIns@1100217000 : Record 7009768;
      Text099@1100217001 : TextConst 'ENU=The stay with ID %1 overlaps with the stay with ID %2;ESP=La estancia con ID %1 se solapa con la estancia con ID %2';
      Text100@1100217002 : TextConst 'ENU=There is flight information in a Hotel Only reservation;ESP=Existe informacion de vuelos en una reserva de solo hotel.';
      Text101@1100217003 : TextConst 'ENU=You must set a filter in the touroperator field;ESP=Especifique un filtro de Touroperador';
      Text102@1100217004 : TextConst 'ENU=Specify physical zone in the hotel %1.;ESP=Especifique zona fisica en el hotel %1.';
      Text103@1000000000 : TextConst 'ENU=There is no transfer sale contract for the touroperator %1 in day %2.;ESP=No existe contrato de venta transfer para el touroperador %1 el dia %2.';
      Text104@1000000001 : TextConst 'ENU=There is no transfer sale price for day %1 in the contract %2.;ESP=No existe precio de venta transfer para el dia %1 en el contrato %2.';

    PROCEDURE SeleccionarTipoProceso@1100217002(VAR prCab@1100217000 : Record 7010076);
    VAR
      lrCab@1100217001 : Record 7010076;
      lrFich@1100217002 : Record 7009899;
      lcProcWS@1100217003 : Codeunit 7009777;
    BEGIN
      // SeleccionarTipoProceso

      rPar.FINDFIRST;
      CASE rPar."Tipo proceso reservas" OF

        rPar."Tipo proceso reservas"::Texto:
        BEGIN
          CLEAR(lrCab);
          lrCab.COPY(prCab);
          IF lrCab.FINDFIRST THEN
            comprobar_errores(lrCab);
        END;

        rPar."Tipo proceso reservas"::WS:
        BEGIN
          CLEAR(lrCab);
          lrCab.COPY(prCab);
          IF lrCab.FINDFIRST THEN
            lcProcWS.comprobar_errores(lrCab);
        END;

        rPar."Tipo proceso reservas"::Ambos:
        BEGIN
          IF (prCab.GETFILTER(TourOperador) = '') AND
             (prCab.GETFILTER(Bono) = '') AND
             (prCab.GETFILTER(Fichero) = '') THEN
            ERROR(Text101);

          CLEAR(lrCab);
          lrCab.COPY(prCab);
          IF lrCab.FINDFIRST THEN
          BEGIN
            lrFich.GET(lrCab.Fichero);
            CASE lrFich.Type OF
              lrFich.Type::"Web Service": lcProcWS.comprobar_errores(lrCab);

              lrFich.Type::TXT: comprobar_errores(lrCab);
            END;
          END;
        END;
      END;
    END;

    PROCEDURE apartar_datos@2(VAR par_cab@1103355000 : Record 7010076);
    VAR
      w_opcion@1103355001 : Integer;
      lrCab@1100217000 : Record 7010076;
    BEGIN
      // apartar_datos

      w_opcion := STRMENU(Text010, 1);
      IF w_opcion = 0 THEN
        EXIT;

      IF w_opcion = 1 THEN
      BEGIN
        lrCab        := par_cab;
        lrCab.Estado := lrCab.Estado::Apartada;
        lrCab.MODIFY;
      END;

      IF w_opcion = 2 THEN
      BEGIN
        //+$017 <
        IF par_cab.FINDSET(TRUE) THEN
        BEGIN
          REPEAT
            lrCab := par_cab;
            lrCab.Estado := lrCab.Estado::Apartada;
            lrCab.MODIFY;
          UNTIL par_cab.NEXT = 0;
        END;
        //+$017 >
        //-$017par_cab.MODIFYALL(Estado, par_cab.Estado::Apartada);
      END;
    END;

    PROCEDURE desapartar_datos@8(VAR par_cab@1103355000 : Record 7010076);
    VAR
      w_opcion@1103355001 : Integer;
      lrCab@1100217000 : Record 7010076;
    BEGIN
      // Desapartar_datos

      w_opcion := STRMENU(Text011,1);
      IF w_opcion = 0 THEN
        EXIT;

      IF w_opcion = 1 THEN
      BEGIN
        lrCab                  := par_cab;
        lrCab.Estado           := lrCab.Estado::"No procesada";
        lrCab."Pasado errores" := FALSE;
        lrCab.MODIFY;
      END;

      IF w_opcion = 2 THEN
      BEGIN
        //+$017 <
        IF par_cab.FINDSET THEN
        BEGIN
          REPEAT
            lrCab := par_cab;
            lrCab.Estado           := lrCab.Estado::"No procesada";
            lrCab."Pasado errores" := FALSE;
            lrCab.MODIFY;
          UNTIL par_cab.NEXT = 0;
        END;
        //+$017 >
        //-$017par_cab.MODIFYALL(Estado          , par_cab.Estado::"No procesada");
        //-$017par_cab.MODIFYALL("Pasado errores", FALSE);
      END;
    END;

    PROCEDURE comprobar_errores@3(VAR par_cab@1103355000 : Record 7010076);
    VAR
      rCab@1103355001 : Record 7010076;
      rCab2@1103355002 : Record 7010076;
      rError@1103355003 : Record 7010083;
      lcGestionWS@1100217000 : Codeunit 7009777;
      w_total@1103355004 : Integer;
      w_linea@1103355005 : Integer;
      ventana@1103355006 : Dialog;
    BEGIN
      // comprobar_errores

      rPar.FINDFIRST;

      rDatosIns.FINDFIRST; //$005

      CLEAR(rCab);
      rCab.COPY(par_cab);
      w_total := rCab.COUNT;
      w_linea := 0;

      //. Eliminar los mensajes de error de anteriores revisiones

      IF rCab.FINDSET THEN BEGIN
        ventana.OPEN(Text013 +
                     '\' +
                     '@1@@@@@@@@@@@@@@@@@@@@@@@@@@');
        REPEAT
          w_linea := w_linea + 1;

          ventana.UPDATE(1, ROUND((w_linea * 10000) / w_total, 1));

          rError.RESET;
          rError.SETRANGE("ID Fichero", rCab.Fichero);
          rError.SETRANGE("ID Linea"  , rCab."ID Cabecera");
          IF rError.FINDSET(TRUE) THEN
            rError.DELETEALL;
        UNTIL rCab.NEXT = 0;

        //$006 <

        //-$016CLEAR(wTTOO);
        //-$016IF rCovTO.GET(rCab.TourOperador) THEN
        //-$016  wTTOO := rCovTO."Touroperador Atennea";
        wTTOO := rConvTO.ConversionTouroperador(rCab.TourOperador, rCab.Destino); //+$016

        _RevisaPaqueteReserva(par_cab);
        //$006 >
      END;

      //. Revisar en busca de errores

      w_linea := 0;
      IF rCab.FINDSET THEN
      BEGIN
        ventana.OPEN(Text014 +
                     '\' +
                     '#2####                #3####\' +
                     '\' +
                     '@1@@@@@@@@@@@@@@@@@@@@@@@@@@');

        REPEAT
          //-$016CLEAR(wTTOO);
          //-$016IF rCovTO.GET(rCab.TourOperador) THEN
          //-$016  wTTOO := rCovTO."Touroperador Atennea";
          wTTOO := rConvTO.ConversionTouroperador(rCab.TourOperador, rCab.Destino); //+$016

          w_linea := w_linea + 1;

          ventana.UPDATE(2, w_linea);
          ventana.UPDATE(3, w_total);
          ventana.UPDATE(1, ROUND((w_linea * 10000) / w_total, 1));


          repasa_cabecera(rCab);
          repasa_paxes(rCab);
          repasa_hotel(rCab);
          repasa_servicio(rCab);
          IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::CNT THEN
            lcGestionWS.repasa_vuelos(rCab)
          ELSE
            repasa_vuelos(rCab);

          rCab.CALCFIELDS(Errores);
          IF rCab.Errores <> 0 THEN
            pasar_a_error(rCab)
          ELSE BEGIN
            rCab2 := rCab;
            rCab2."Pasado errores"  := TRUE;
            rCab2.Estado            := par_cab.Estado::"No procesada";
            rCab2."Usuario proceso" := USERID;
            rCab2.MODIFY;
          END;
        UNTIL rCab.NEXT = 0;
        ventana.CLOSE;
      END;
    END;

    PROCEDURE repasa_cabecera@6(par_cab@1103355000 : Record 7010076);
    VAR
      rTO@1103355001 : Record 7009717;
      rPaq@1103355002 : Record 7009709;
      rCab@1103355003 : Record 7009741;
      rPar@1103355004 : Record 7010081;
      rRsvTra@1103355005 : Record 7009744;
      aux_cab@1103355006 : Record 7010076;
      rAgr@1103355007 : Record 7009796;
    BEGIN
      // repasa_cabecera

      rPar.FINDFIRST;

      // Comprobar Tipo Registro
      IF par_cab."Tipo Registro" = par_cab."Tipo Registro"::Error THEN
        inserta_error(par_cab, Text016);

      // Comprobar el TourOperador
      //-$016CLEAR(rCovTO);
      //-$016IF NOT rCovTO.GET(par_cab.TourOperador) THEN
      IF rConvTO.ConversionTouroperador(par_cab.TourOperador, par_cab.Destino) = '' THEN //+$016
        inserta_error(par_cab, STRSUBSTNO(Text018, par_cab.TourOperador));

      // Comprobar el Bono
      IF par_cab.Bono = '' THEN
        inserta_error(par_cab, Text019);

      // Comprobar la temporada
      IF par_cab.Temporada = '' THEN
        inserta_error(par_cab, Text020);

      // Comprobar la fecha de creacion
      IF par_cab."Fecha creacion" = 0D THEN
        inserta_error(par_cab, Text021);

      // Comprobar la fecha de cancelacion en caso de borrado
      IF (par_cab."Tipo Registro" = par_cab."Tipo Registro"::Borrado) AND
         (par_cab."Fecha cancelacion" = 0D) THEN
        inserta_error(par_cab, Text022);

      // Comprobar la fecha de modificacion en caso de modificacion
      IF (par_cab."Tipo Registro" = par_cab."Tipo Registro"::Modificacion) AND
         (par_cab."Fecha modificacion" = 0D) THEN
        inserta_error(par_cab, Text023);

      // Comprobamos si no es un borrado de reserva
      IF par_cab."Tipo Registro" <> par_cab."Tipo Registro"::Borrado THEN BEGIN
        // Comprobar el Tipo de Booking

        IF par_cab."Tipo Booking" = par_cab."Tipo Booking"::Error THEN
          inserta_error(par_cab, Text024);

        // Comprobar el paquete salvo que se trate de un borrado

        IF par_cab.Paquete = '' THEN
          inserta_error(par_cab, Text025);
        IF par_cab.Paquete = Text026 THEN
          inserta_error(par_cab, Text027);
        IF NOT rPaq.GET(par_cab.Paquete) THEN
          inserta_error(par_cab, STRSUBSTNO(Text028, par_cab.Paquete));
        IF rPar."Importacion diaria" THEN BEGIN
          IF par_cab."Fecha cancelacion" <> 0D THEN
            inserta_error(par_cab, Text029);
        END;
      END;


      IF par_cab."Tipo Registro" = par_cab."Tipo Registro"::Borrado THEN BEGIN
        rCab.RESET;
        rCab.SETCURRENTKEY(TourOperador,
                           Bono,
                           Temporada);

        //-$002rCab.SETRANGE(TourOperador, rPar."Touroperador importacion");
        rCab.SETRANGE(Bono        , par_cab.Bono);
        rCab.SETRANGE(Temporada   , par_cab.Temporada); //+$001
        IF NOT rCab.FIND('-') THEN
        BEGIN
          inserta_error(par_cab, STRSUBSTNO(Text034,
                                 par_cab.TourOperador, par_cab.Bono)); //+$005
        END
        ELSE BEGIN
          rRsvTra.RESET;
          rRsvTra.SETCURRENTKEY(Delegacion,
                                "N§ Interno");
          rRsvTra.SETRANGE (Delegacion          , rCab.Delegacion);
          rRsvTra.SETRANGE ("N§ Interno"        , rCab."N§ Interno");
          rRsvTra.SETFILTER("Agrupacion entrada", '<>0');
          IF rRsvTra.FIND('-') THEN BEGIN
            REPEAT
              IF (rAgr.GET(rRsvTra."Agrupacion entrada")) AND (rAgr.Estado = rAgr.Estado::Confirmado) THEN
                inserta_error(par_cab, STRSUBSTNO(Text035,
                                                  par_cab.TourOperador, par_cab.Bono, par_cab.Temporada)); //+$005
            UNTIL rRsvTra.NEXT = 0;
          END;
          rRsvTra.SETRANGE("Agrupacion entrada");
          rRsvTra.SETFILTER("Agrupacion salida", '<>0');
          IF rRsvTra.FIND('-') THEN BEGIN
            REPEAT
              IF (rAgr.GET(rRsvTra."Agrupacion salida")) AND (rAgr.Estado = rAgr.Estado::Confirmado) THEN
                inserta_error(par_cab, STRSUBSTNO(Text033,
                                                  par_cab.TourOperador, par_cab.Bono, par_cab.Temporada)); //+$005
            UNTIL rRsvTra.NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE repasa_paxes@4(par_cab@1103355000 : Record 7010076);
    VAR
      rPax@1103355001 : Record 7010079;
      rConv@1103355002 : Record 7009722;
      rCab@1103355003 : Record 7009741;
      rPar@1103355004 : Record 7010081;
      paxes_interfase@1103355005 : Integer;
    BEGIN
      // repasa_paxes

      IF par_cab."Fecha cancelacion" <> 0D THEN
        EXIT;

      rPar.FINDFIRST;

      rPax.RESET;
      rPax.SETCURRENTKEY(Fichero,
                         TourOperador,
                         Bono,
                         Temporada);
      rPax.SETRANGE(Fichero     , par_cab.Fichero);
      rPax.SETRANGE(TourOperador, par_cab.TourOperador);
      rPax.SETRANGE(Bono        , par_cab.Bono);
      rPax.SETRANGE(Temporada   , par_cab.Temporada);
      IF rPax.FINDSET THEN BEGIN
        REPEAT
          // Comprobar el tipo de registro

          IF rPax."Tipo Registro" = rPax."Tipo Registro"::Error THEN
            inserta_error(par_cab, STRSUBSTNO(Text036, rPax.Contador));

          // Comprobar conversion de tipo de persona

          //+$005
          IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN
          BEGIN
            CLEAR(rConv);
            IF (NOT rConv.GET(rPar."Touroperador importacion", rPax."Tipo Persona")) OR
               (rConv."Tipo Persona" = '') THEN
              inserta_error(par_cab, STRSUBSTNO(Text037,
                                                rPax."Tipo Persona" , rPar."Touroperador importacion" , rPax.Contador));
          END
          ELSE
          BEGIN
            CLEAR(rConv);
            IF (NOT rConv.GET(wTTOO, rPax."Tipo Persona")) OR
               (rConv."Tipo Persona" = '') THEN
              inserta_error(par_cab, STRSUBSTNO(Text037,
                                                rPax."Tipo Persona" , wTTOO, rPax.Contador));
          END;
          //+$005

          // Comprobar que tiene nombre

          IF rPax.Nombre = '' THEN
            inserta_error(par_cab, STRSUBSTNO(Text038, rPax.Contador));

        UNTIL rPax.NEXT = 0;
      END
      ELSE
        inserta_error(par_cab, Text041);
    END;

    PROCEDURE repasa_hotel@7(par_cab@1103355000 : Record 7010076);
    VAR
      rHot@1103355001 : Record 7010078;
      lrHot2@1103355013 : Record 7010078;
      rConv@1103355002 : Record 7009725;
      rConvReg@1103355003 : Record 7009719;
      rPar@1103355004 : Record 7010081;
      rSer@1103355005 : Record 7010080;
      rPer@1103355006 : Record 7009742;
      rHot2@1103355007 : Record 7010078;
      lrHotel@1103355008 : Record 7009724;
      lrExtra@1103355012 : Record 7009760;
      lrExcl@1103355015 : Record 7009865;
      lrRsvTra@1000000000 : Record 7009744;
      lrConTra@1000000001 : Record 7009788;
      paxes_interfase@1103355009 : Integer;
      lwPos@1103355010 : Integer;
      lwEsVuelo@1103355011 : Boolean;
      lwOk@1103355014 : Boolean;
      lwEstancia@1103355016 : Boolean;
    BEGIN
      // repasa_hotel

      // Sucede que cuando en el codigo de hotel se encuentra una serie de subcadenas no es un hotel real
      // si no un vuelo de posicionamiento. En estos casos no deben producirse errores cuando no
      // conste habitaci¢n, fecha de salida, etc...
      // La variable que indica estos casos es lwEsVuelo.

      rPar.FINDFIRST;
      IF (par_cab."Fecha cancelacion" <> 0D) AND (rPar."Importacion diaria") THEN
        EXIT;

      CLEAR(lwEstancia);

      rHot.RESET;
      rHot.SETCURRENTKEY(Fichero,
                         Touroperador,
                         Bono,
                         Temporada);
      rHot.SETRANGE(Fichero     , par_cab.Fichero);
      rHot.SETRANGE(Touroperador, par_cab.TourOperador);
      rHot.SETRANGE(Bono        , par_cab.Bono);
      rHot.SETRANGE(Temporada   , par_cab.Temporada);
      IF rHot.FINDSET THEN
      BEGIN
        REPEAT
          CLEAR(rConv);
          // JPT 18/11/08 Comprobamos que no est excluido
          CLEAR(lrExcl);
          rHot.Excluido := lrExcl.GET(rHot.Hotel);

          IF NOT rHot.Excluido THEN BEGIN
            // JPT 11/05/09 Elimino la funcionalidad "Servicio extra" ya que no da m s que problemas.
            // Se trata de un campo obsoleto que fue sustituido por el valor "Hotel Ficticio" de la Ficha de Hotel
            rHot."Servicio extra" := FALSE;

            // Comprobamos que es una hotel real o un vuelo de posicionamiento

            IF rHot.Hotel IN [Text044, Text045, Text046, Text047, Text048, Text049] THEN
              lwPos := 1;

            lwEsVuelo := lwPos <> 0;

            // Tambien lo consideraremos igual si se trata de cruceros
            // lwEsVuelo := lwEsVuelo OR (UPPERCASE(rHot.Hotel) IN [Text050,Text051]);

            //. Comprobar el Tipo de Registro
            IF rHot."Tipo Registro" = rHot."Tipo Registro"::Error THEN
              inserta_error(par_cab, Text016);

            //. Comprobar el Tipo de Paquete
            IF rHot."Paquete asociado" = '' THEN
              inserta_error(par_cab, STRSUBSTNO(Text053, rHot."ID Hotel"));

            //. Comprobar que tiene fecha de entrada en hotel
            IF rHot."Fecha entrada" = 0D THEN
              inserta_error(par_cab, STRSUBSTNO(Text054, rHot.Hotel));

            //. Comprobar la conversion de hotel, siempre que no se trate de un servicio extra
            IF NOT rHot."Servicio extra" THEN BEGIN
              _ConversionHotel(rConv, par_cab, rHot.Hotel);

              IF NOT lrHotel.GET(rConv."Hotel estancia") THEN
                CLEAR(lrHotel)
              ELSE
              BEGIN
                IF lrHotel."Zona Fisica" = '' THEN
                  inserta_error(par_cab, STRSUBSTNO(Text102, lrHotel.Hotel))
              END;
            END;

            // JPT 31/10/08 Actualizamos los siguientes campos en hotel interfase
            rHot."Hotel Ficticio"  := lrHotel."Hotel Ficticio";
            rHot."Transfer Privado" := rConv."Transfer Privado";
            // +$013

            lwEstancia := lwEstancia OR (NOT rHot."Hotel Ficticio");

            //. Comprobar si la fecha de entrada es posterior a la de salida
            IF NOT (rHot."Servicio extra" OR rHot."Hotel Ficticio") THEN BEGIN
              IF (rHot."Fecha entrada" <> 0D) AND (rHot."Fecha salida" <> 0D) THEN BEGIN
                IF rHot."Fecha entrada" >= rHot."Fecha salida" THEN
                  inserta_error(par_cab, STRSUBSTNO(Text055,
                                rHot.Hotel));
              END;
            END;

            IF (NOT lwEsVuelo) THEN
            BEGIN // Solo si se trata de un hotel real

              //. Comprobar que tiene fecha de salida
              IF rHot."Fecha salida" = 0D THEN
                inserta_error(par_cab, STRSUBSTNO(Text058, rHot.Hotel));

              //. Comprobar la conversion de regimen
              IF NOT (rHot."Servicio extra" OR rHot."Hotel Ficticio" OR rConv."Solo Transfer") AND
                 _PaqueteTieneHotel(rHot."Paquete asociado") THEN //+$014
              BEGIN
                CLEAR(rConvReg);
                //+$005
                IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN
                BEGIN
                  IF (NOT rConvReg.GET(rPar."Touroperador importacion", rHot.Regimen)) OR
                     (rConvReg.Regimen = '') THEN
                    inserta_error(par_cab, STRSUBSTNO(Text057,
                                                      rHot.Regimen, rPar."Touroperador importacion"));
                END
                ELSE
                BEGIN
                  IF (NOT rConvReg.GET(wTTOO, rHot.Regimen)) OR
                     (rConvReg.Regimen = '') THEN
                    inserta_error(par_cab, STRSUBSTNO(Text057,
                                                      rHot.Regimen, wTTOO));
                END;
                //+$005

                //. JPT 30/03/09 No permitimos que la fecha de entrada y la de salida sean la misma
                IF rHot."Fecha entrada" = rHot."Fecha salida" THEN
                  inserta_error(par_cab, Text097);

                //. Comprobar si existe contrato de compra para el hotel, habitacion, cupo y precio
                IF (rHot."Fecha entrada" <> 0D) AND (rHot."Fecha salida" <> 0D) THEN BEGIN
                  busca_contrato(rHot, rConv."Hotel estancia", rConvReg.Regimen, par_cab,'', 0D, 0D);

                  //.  Si en la conversion se ha indicado un hotel precios hay que comprobar que tambien tiene contrato
                  IF rConv."Hotel precios" <> '' THEN
                    busca_contrato(rHot, rConv."Hotel precios", rConvReg.Regimen, par_cab,'', 0D, 0D);
                END;

              END;

              // En este caso el hotel ficticio es un extra
              IF rHot."Hotel Ficticio" AND (NOT rHot."Transfer Privado") AND
                 _PaqueteTieneHotel(rHot."Paquete asociado") THEN //+$014
              BEGIN
                IF NOT lrExtra.GET(rHot.Hotel) THEN
                  inserta_error(par_cab, STRSUBSTNO(Text092, rHot.Hotel));

                // Buscamos si existe precio para el extra. Para eso hemos de buscar el hotel al que
                // va ligado y su contrato
                CLEAR(lrHot2);
                lrHot2.SETCURRENTKEY(Fichero,Touroperador,Bono,Temporada,"Fecha entrada","Fecha salida");
                lrHot2.SETRANGE(Fichero     , rHot.Fichero);
                lrHot2.SETRANGE(Touroperador, rHot.Touroperador);
                lrHot2.SETRANGE(Bono        , rHot.Bono);
                lrHot2.SETRANGE(Temporada   , rHot.Temporada);
                lrHot2.SETRANGE("Hotel Ficticio", FALSE);
                lrHot2.SETFILTER("Fecha entrada",'<=%1', rHot."Fecha salida");
                lrHot2.SETFILTER("Fecha salida" ,'>=%1', rHot."Fecha entrada");
                IF lrHot2.FINDFIRST THEN
                BEGIN
                  _ConversionHotel(rConv, par_cab, lrHot2.Hotel);
                  IF rConv."Hotel estancia" <> '' THEN
                    busca_contrato(lrHot2, rConv."Hotel estancia", '', par_cab, rHot.Hotel, rHot."Fecha entrada", rHot."Fecha salida");

                END
                ELSE
                  inserta_error(par_cab, STRSUBSTNO(Text093, rHot.Hotel));
              END;

              //. Si la reserva tiene servicio de transfer hay que comprobar que tengamos contrato
              IF (rHot."Servicio transfer llegada" <> 'N') AND
                 _PaqueteTieneTransfer(rHot."Paquete asociado") THEN //+$015
              BEGIN
                CLEAR(lrConTra);
                IF NOT lrRsvTra.CheckContratoVenta(lrConTra, wTTOO, rHot."Fecha entrada", '', FALSE) THEN
                  inserta_error(par_cab, STRSUBSTNO(Text103, wTTOO, rHot."Fecha entrada"));

                _BuscaPreciosTransfer(par_cab, lrConTra, rHot, 0, lrHotel.Hotel);
              END;
              IF (rHot."Servicio transfer salida" <> 'N') AND
                 _PaqueteTieneTransfer(rHot."Paquete asociado") THEN //+$015
              BEGIN
                CLEAR(lrConTra);
                IF NOT lrRsvTra.CheckContratoVenta(lrConTra, wTTOO, rHot."Fecha salida", '', FALSE) THEN
                  inserta_error(par_cab, STRSUBSTNO(Text103, wTTOO, rHot."Fecha salida"));

                _BuscaPreciosTransfer(par_cab, lrConTra, rHot, 0, lrHotel.Hotel);
              END;

            END // Final del tratamiento si se trata de un hotel real

            ELSE
            BEGIN  // Solo si se trata de un vuelo local

              //. Se tienen que importar los servicios de hotel antes de los vuelos locales

              rPer.RESET;
              rPer.SETCURRENTKEY("TourOperador Venta",
                                 Bono,
                                 Temporada);
              rPer.SETRANGE ("TourOperador Venta", wTTOO);
              rPer.SETRANGE (Bono                , rHot.Bono);
              IF rHot."Orden Vuelo" = rHot."Orden Vuelo"::Entrada THEN
                rPer.SETRANGE("Fecha entrada", rHot."Fecha entrada")
              ELSE
                rPer.SETRANGE("Fecha salida", rHot."Fecha entrada");
              IF NOT rPer.FINDFIRST THEN
              BEGIN
                rHot2.RESET;
                rHot2.SETRANGE(Fichero     , rHot.Fichero);
                rHot2.SETRANGE(Touroperador, rHot.Touroperador);
                rHot2.SETRANGE(Bono        , rHot.Bono);
                IF rHot."Orden Vuelo" = rHot."Orden Vuelo"::Entrada THEN
                  rHot2.SETRANGE("Fecha entrada", rHot."Fecha entrada")
                ELSE
                  rHot2.SETRANGE("Fecha salida", rHot."Fecha entrada");
                // Si es un crucero ser  por la fecha de salida del hotel
                IF NOT rHot2.FINDFIRST THEN
                  rHot2.SETRANGE("Fecha salida", rHot."Fecha salida");

                IF NOT rHot2.FINDFIRST THEN
                  inserta_error(par_cab, STRSUBSTNO(Text059, rHot."N§ Servicio"));
              END;
            END;

            //. Comprobar si existen lineas de servicio de hotel asociadas solo en los casos de no
            //. cancelacion.

            IF rHot."Tipo Registro" <> rHot."Tipo Registro"::Cancelacion THEN
            BEGIN
              CLEAR(rSer);
              rSer.SETCURRENTKEY(Fichero,
                                 Touroperador,
                                 Bono,
                                 Temporada);
              rSer.SETRANGE(Fichero        , rHot.Fichero);
              rSer.SETRANGE(Touroperador   , rHot.Touroperador);
              rSer.SETRANGE(Bono           , rHot.Bono);
              rSer.SETRANGE(Temporada      , rHot.Temporada);
              rSer.SETRANGE("N§ Servicio"  , rHot."N§ Servicio");
              rSer.SETRANGE("Tipo Servicio", rSer."Tipo Servicio"::Hotel);
              IF NOT rSer.FINDFIRST THEN
                inserta_error(par_cab, STRSUBSTNO(Text060,
                              rHot.Hotel, rHot."N§ Servicio"));

              //. Vamos a comprobar que esta estancia no se solape con otras dentro de este mismo fichero
              IF NOT rHot."Hotel Ficticio" THEN
                _EstanciaSolapada(par_cab, rHot);
            END;

            //. Comprobar que el servicio exista en caso de que no se trate de una cancelacion dentro
            //. de una modificacion.

            IF par_cab."Tipo Registro" = par_cab."Tipo Registro"::Modificacion THEN
            BEGIN
             IF (rHot."Tipo Registro" = rHot."Tipo Registro"::Cancelacion) AND (NOT rHot."Hotel Ficticio") THEN
             BEGIN
               rPer.RESET;
               rPer.SETCURRENTKEY("TourOperador Venta",
                                  Bono,
                                  Temporada);
               rPer.SETRANGE("TourOperador Venta"       , wTTOO);
               rPer.SETRANGE(Bono               , rHot.Bono);
               rPer.SETRANGE(Temporada          , rHot.Temporada); //+$001
               rPer.SETRANGE("Hotel TO"         , rHot.Hotel);
               rPer.SETRANGE("Habitacion TO"    , rHot.Habitacion);
                // rPer.SETRANGE("N§ Servicio hotel", rHot."N§ Servicio");
               IF NOT rPer.FINDFIRST THEN
                 inserta_error(par_cab, STRSUBSTNO(Text061, rHot.Hotel,rHot.Habitacion));
              END;
            END;
          END;
          rHot.MODIFY;
        UNTIL rHot.NEXT = 0;

        IF NOT lwEstancia THEN
           inserta_error(par_cab, Text096);

      END;
    END;

    PROCEDURE repasa_vuelos@10(par_cab@1103355000 : Record 7010076);
    VAR
      rVue@1103355001 : Record 7010077;
      rCom@1103355002 : Record 7009753;
      rAer@1103355003 : Record 7009704;
      rPlan@1103355004 : Record 7009754;
      rPar@1103355005 : Record 7010081;
      lrPlanVue@1103355006 : Record 7009754;
      rHot@1103355007 : Record 7010078;
      rConvH@1103355008 : Record 7009725;
      lrHotel@1103355009 : Record 7009724;
    BEGIN
      // repasa_vuelos

      IF par_cab."Fecha cancelacion" <> 0D THEN
        EXIT;

      rPar.FINDFIRST;

      rVue.RESET;
      rVue.SETCURRENTKEY(Fichero,
                         TourOperador,
                         Bono,
                         Temporada);
      rVue.SETRANGE(Fichero     , par_cab.Fichero);
      rVue.SETRANGE(TourOperador, par_cab.TourOperador);
      rVue.SETRANGE(Bono        , par_cab.Bono);
      rVue.SETRANGE(Temporada   , par_cab.Temporada);
      IF rVue.FINDSET THEN
      BEGIN
        //. Inhabilitado control
        //IF par_cab.Paquete = rPar."Paquete Solo Hotel" THEN
        //BEGIN
        //  inserta_error(par_cab, Text100);
        //  EXIT;
        //END;

        REPEAT
          // Comprobar si tiene fecha de vuelo
          IF rVue.Fecha = 0D THEN
            inserta_error(par_cab, STRSUBSTNO(Text062, rVue.Contador));

          // Comprobar si existe la compa¤ia
          IF rVue.Compa¤ia <> '' THEN BEGIN
            IF NOT rCom.GET(rVue.Compa¤ia) THEN
              inserta_error(par_cab, STRSUBSTNO(Text063, rVue.Compa¤ia));
          END;

          lrPlanVue.RESET;
          lrPlanVue.SETRANGE(Fecha   , rVue.Fecha);
          lrPlanVue.SETRANGE(Compa¤ia, rVue.Compa¤ia);
          lrPlanVue.SETRANGE(Vuelo   , rVue.Vuelo);

          //. Buscamos el primer o ultimo hotel para poder filtrar por el nuevo campo "Aeropuerto asociado"
          CLEAR(rHot);
          rHot.SETCURRENTKEY(Fichero, Touroperador, Bono, Temporada, "Fecha entrada", "Fecha salida");
          rHot.SETRANGE(Fichero     , par_cab.Fichero);
          rHot.SETRANGE(Touroperador, par_cab.TourOperador);
          rHot.SETRANGE(Bono        , par_cab.Bono);
          rHot.SETRANGE(Temporada   , par_cab.Temporada);
          IF rVue."Tipo Vuelo" = rVue."Tipo Vuelo"::Entrada THEN BEGIN
            IF NOT rHot.FINDFIRST THEN
              CLEAR(rHot);
          END
          ELSE  BEGIN
            IF NOT rHot.FINDLAST THEN
              CLEAR(rHot);
          END;

          _ConversionHotel(rConvH, par_cab, rHot.Hotel);
          IF rConvH."Hotel estancia" <> '' THEN
            IF lrHotel.GET(rConvH."Hotel estancia") THEN
              IF lrHotel."Aeropuerto Asociado" = '' THEN
                inserta_error(par_cab, STRSUBSTNO(Text064,
                                              lrHotel.Hotel));

          CASE rVue."Tipo Vuelo" OF
            rVue."Tipo Vuelo"::Entrada : BEGIN
              IF rVue."IATA destino"='' THEN
                rVue."IATA destino"  := lrHotel."Aeropuerto Asociado";
              lrPlanVue.SETRANGE("Entrada/Salida", lrPlanVue."Entrada/Salida"::Entrada);
            END;
            rVue."Tipo Vuelo"::Salida : BEGIN
              IF rVue."IATA origen"='' THEN
                rVue."IATA origen"  := lrHotel."Aeropuerto Asociado";
              lrPlanVue.SETRANGE("Entrada/Salida", lrPlanVue."Entrada/Salida"::Salida);
            END;
          END;
          rVue.MODIFY;

          IF rVue."IATA destino" <> '' THEN
            lrPlanVue.SETRANGE(Destino         , rVue."IATA destino");
          IF rVue."IATA origen" <> '' THEN
            lrPlanVue.SETRANGE(Origen          , rVue."IATA origen");

          IF NOT lrPlanVue.FIND('-') THEN
            inserta_error(par_cab, STRSUBSTNO(Text065,
                                              rVue.Fecha, rVue.Compa¤ia, rVue.Vuelo,
                                              rVue."IATA origen", rVue."IATA destino"))
          ELSE BEGIN
            IF rVue."IATA origen"= '' THEN
              rVue."IATA origen"  := lrPlanVue.Origen;
            IF rVue."IATA destino"= '' THEN
              rVue."IATA destino" := lrPlanVue.Destino;
            IF rVue."Tipo Vuelo" = rVue."Tipo Vuelo"::Entrada THEN
              rVue.Hora := lrPlanVue."Hora Entrada"
            ELSE
              rVue.Hora := lrPlanVue."Hora Salida";
            rVue.MODIFY;
          END;

          // Comprobar si existe el aeropuerto de origen
          IF rVue."IATA origen" <> '' THEN BEGIN
            IF NOT rAer.GET(rVue."IATA origen") THEN
              inserta_error(par_cab, STRSUBSTNO(Text066, rVue."IATA origen"));
          END;

          // Comprobar si existe el aeropuerto de destino
          IF rVue."IATA destino" <> '' THEN BEGIN
            IF NOT rAer.GET(rVue."IATA destino") THEN
              inserta_error(par_cab, STRSUBSTNO(Text066, rVue."IATA destino"));
          END;
        UNTIL rVue.NEXT = 0;
      END
      ELSE BEGIN // JPT 10/03/08 Si no se encuentran vuelos se genera error si est  as¡ parametrizado
        IF rPar."Requiere datos vuelo" THEN BEGIN
          inserta_error(par_cab, Text091);
        END;
      END;
    END;

    PROCEDURE repasa_servicio@12(par_cab@1103355000 : Record 7010076);
    VAR
      rSer@1103355001 : Record 7010080;
      rPax@1103355002 : Record 7010079;
    BEGIN
      // repasa_servicio

      IF par_cab."Tipo Registro" = par_cab."Tipo Registro"::Borrado THEN
        EXIT;

      CLEAR(rSer);
      rSer.SETCURRENTKEY(Fichero,
                         Touroperador,
                         Bono,
                         Temporada,
                         Persona);
      rSer.SETRANGE(Fichero     , par_cab.Fichero);
      rSer.SETRANGE(Touroperador, par_cab.TourOperador);
      rSer.SETRANGE(Bono        , par_cab.Bono);
      rSer.SETRANGE(Temporada   , par_cab.Temporada);
      IF NOT rSer.FINDSET THEN
        inserta_error(par_cab, Text067)
      ELSE BEGIN
        rPax.RESET; rPax.INIT;
        rPax.SETCURRENTKEY(Fichero,
                           TourOperador,
                           Bono,
                           Temporada);
        REPEAT
          rPax.SETRANGE(Fichero     , rSer.Fichero);
          rPax.SETRANGE(TourOperador, rSer.Touroperador);
          rPax.SETRANGE(Bono        , rSer.Bono);
          rPax.SETRANGE(Temporada   , rSer.Temporada);
          rPax.SETRANGE(Contador    , rSer.Persona);
          IF NOT rPax.FINDFIRST THEN
            inserta_error(par_cab, STRSUBSTNO(Text068, rSer."N§ Servicio", rSer.Persona));
        UNTIL rSer.NEXT = 0;
      END;
    END;

    PROCEDURE inserta_error@9(VAR par_cab@1103355000 : Record 7010076;par_texto@1103355001 : Text[250]);
    VAR
      rError@1103355002 : Record 7010083;
      rError2@1103355003 : Record 7010083;
    BEGIN
      // inserta_error

      CLEAR(rError);
      CLEAR(rError2);
      rError."ID Fichero" := par_cab.Fichero;
      rError."ID Linea" := par_cab."ID Cabecera";
      rError2.SETRANGE("ID Fichero", par_cab.Fichero);
      rError2.SETRANGE("ID Linea"  , par_cab."ID Cabecera");
      IF rError2.FINDLAST THEN
        rError."ID Error" := rError2."ID Error" + 1
      ELSE
        rError."ID Error" := 1;

      rError.Texto   := par_texto;
      rError.Fecha   := TODAY;
      rError.Hora    := TIME;
      rError.Usuario := USERID;
      rError.INSERT;
    END;

    PROCEDURE pasar_a_error@5(par_cab@1103355000 : Record 7010076);
    VAR
      aux_cab@1103355001 : Record 7010076;
      lrCab@1000000000 : Record 7010076;
    BEGIN
      // pasar_a_error

      aux_cab.RESET;
      aux_cab.SETCURRENTKEY(Estado,
                            Fichero);
      aux_cab.SETFILTER(Estado      , '<>%1', aux_cab.Estado::Apartada);
      aux_cab.SETRANGE (Fichero     , par_cab.Fichero);
      aux_cab.SETRANGE (TourOperador, par_cab.TourOperador);
      aux_cab.SETRANGE (Bono        , par_cab.Bono);
      aux_cab.SETRANGE (Temporada   , par_cab.Temporada);
      IF aux_cab.FINDSET THEN
      BEGIN
        //+$017 <
        REPEAT
          lrCab := aux_cab;
          lrCab.Estado            := lrCab.Estado::Erronea;
          lrCab."Pasado errores"  := TRUE;
          lrCab."Usuario proceso" := USERID;
          lrCab.MODIFY;
        UNTIL aux_cab.NEXT = 0;
        //+$017 >
        //-$017aux_cab.MODIFYALL(Estado           , aux_cab.Estado::Erronea);
        //-$017aux_cab.MODIFYALL("Pasado errores" , TRUE);
        //-$017aux_cab.MODIFYALL("Usuario proceso", USERID);
      END;
    END;

    PROCEDURE busca_contrato@13(VAR par_hot@1103355000 : Record 7010078;par_hotel@1103355001 : Code[20];par_regimen@1103355002 : Code[10];par_cab@1103355003 : Record 7010076;pwExtra@1103355016 : Code[10];pwIniExtra@1103355017 : Date;pwFinExtra@1103355018 : Date);
    VAR
      rConC@1103355004 : Record 7009723;
      rHab@1103355005 : Record 7009731;
      rPreC@1103355006 : Record 7009738;
      rCupoC@1103355007 : Record 7009739;
      rConv@1103355008 : Record 7009731;
      fecha_trabajo@1103355009 : Date;
      rConVta@1103355010 : Record 7009727;
      rPreV@1103355011 : Record 7009732;
      rCupoV@1103355012 : Record 7009730;
      rPar@1103355013 : Record 7010081;
      ant_conversion@1103355014 : Code[10];
      aux_estancia@1103355015 : Integer;
      lwFechaIni@1103355019 : Date;
      lwFechaFin@1103355020 : Date;
    BEGIN
      // busca_contrato

      rPar.FINDFIRST;

      CLEAR(ant_conversion);
      aux_estancia := par_hot."Fecha salida" - par_hot."Fecha entrada";
      rConC.RESET;
      rConC.SETCURRENTKEY(Delegacion,
                          TourOperador,
                          Hotel,
                          "Fecha inicio contrato",
                          "Fecha final contrato");
      //+$005
      IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN
        rConC.SETRANGE (TourOperador, rPar."Touroperador importacion")
      ELSE
        rConC.SETRANGE (TourOperador, wTTOO);
      //+$005
      rConC.SETRANGE (Hotel                  , par_hotel);
      rConC.SETRANGE (Confirmado             , TRUE);

      // AJF 09/12/08
      // Si buscamos un contrato para una extra solo debemos usar el rango de
      // fechas del extra.

      IF pwExtra = '' THEN
      BEGIN
        lwFechaIni := par_hot."Fecha entrada";
        lwFechaFin := par_hot."Fecha salida" - 1;
      END
      ELSE
      BEGIN
        lwFechaIni := pwIniExtra;
        lwFechaFin := pwFinExtra; // no le restamos el dia...
      END;

      FOR fecha_trabajo := lwFechaIni TO lwFechaFin DO BEGIN
        rConC.SETFILTER("Fecha inicio contrato", '<=%1', fecha_trabajo);
        rConC.SETFILTER("Fecha final contrato" , '>=%1', fecha_trabajo);
        IF rConC.FINDFIRST THEN BEGIN
          IF pwExtra='' THEN BEGIN // Si buscamos extras no miramos estancias ni regimen
            IF aux_estancia < rConC."Minimo estancias" THEN
              inserta_error(par_cab, STRSUBSTNO(Text069, rConC."N§ Contrato compra"));


            CLEAR(rConv);
            rConv.SETRANGE(Delegacion     , rConC.Delegacion);
            rConv.SETRANGE("N§ Contrato"  , rConC."N§ Contrato compra");
            rConv.SETRANGE("Tipo contrato", rConv."Tipo contrato"::Compra);
            rConv.SETRANGE("Habitacion TO", par_hot.Habitacion);
            IF (NOT rConv.FINDFIRST) OR
               (rConv."Habitacion cupo" = '') THEN
              inserta_error(par_cab, STRSUBSTNO(Text070, par_hot.Habitacion, rConC."N§ Contrato compra"));

            IF par_hot."Hab. Contrato" = '' THEN BEGIN // Introducimos ya lo que sera el tipo de habitacion de reserva JPT-06/10/03
              par_hot."Hab. Contrato":= rConv."Habitacion cupo";
              par_hot.MODIFY;
            END;
            IF ant_conversion = '' THEN
              ant_conversion := rConv."Habitacion cupo"
            ELSE BEGIN
              IF ant_conversion <> rConv."Habitacion cupo" THEN
                inserta_error(par_cab, STRSUBSTNO(Text071,
                                                  par_hot.Habitacion));
            END;
            // buscar el cupo para la habitacion
            //
            rCupoC.RESET;
            rCupoC.SETRANGE (Delegacion          , rConC.Delegacion);
            rCupoC.SETRANGE ("N§ Contrato compra", rConC."N§ Contrato compra");
            rCupoC.SETRANGE ("Habitacion cupo"   , rConv."Habitacion cupo");
            rCupoC.SETFILTER("Fecha desde"      , '<=%1', fecha_trabajo);
            rCupoC.SETFILTER("Fecha hasta"      , '>=%1', fecha_trabajo);
            rCupoC.SETRANGE (Activo             , TRUE);
            IF NOT rCupoC.FINDFIRST THEN BEGIN
              inserta_error(par_cab, STRSUBSTNO(Text072+
                                                Text073, rConv."Habitacion cupo", rConC.Delegacion,
                                                rConC."N§ Contrato compra", fecha_trabajo));
            END;

            // buscar el precio de habitacion

            rPreC.RESET;
            rPreC.SETRANGE(Delegacion     , rConC.Delegacion);
            rPreC.SETRANGE("N§ Contrato"  , rConC."N§ Contrato compra");
            rPreC.SETRANGE("Codigo Precio", rPreC."Codigo Precio"::Habitacion);
            rPreC.SETRANGE(Codigo         , rConv."Habitacion cupo");
            rPreC.SETFILTER("Fecha desde" , '<=%1', fecha_trabajo);
            rPreC.SETFILTER("Fecha hasta" , '>=%1', fecha_trabajo);
            rPreC.SETRANGE(Activo         , TRUE);
            IF NOT rPreC.FINDFIRST THEN
              inserta_error(par_cab, STRSUBSTNO(Text074+
                                                Text073, rConv."Habitacion cupo", rConC.Delegacion,
                                                rConC."N§ Contrato compra", fecha_trabajo));
            // buscar el precio de regimen

            rPreC.RESET;
            rPreC.SETRANGE(Delegacion     , rConC.Delegacion);
            rPreC.SETRANGE("N§ Contrato"  , rConC."N§ Contrato compra");
            rPreC.SETRANGE("Codigo Precio", rPreC."Codigo Precio"::Regimen);
            rPreC.SETRANGE(Codigo         , par_regimen);
            rPreC.SETFILTER("Fecha desde" , '<=%1', fecha_trabajo);
            rPreC.SETFILTER("Fecha hasta" , '>=%1', fecha_trabajo);
            rPreC.SETRANGE(Activo         , TRUE);
            IF NOT rPreC.FINDFIRST THEN
              inserta_error(par_cab, STRSUBSTNO(Text075+
                                                Text073, par_regimen, rConC.Delegacion,
                                                rConC."N§ Contrato compra", fecha_trabajo));
          END
          ELSE BEGIN // Busca precio del Extra
            rPreC.RESET;
            rPreC.SETRANGE(Delegacion     , rConC.Delegacion);
            rPreC.SETRANGE("N§ Contrato"  , rConC."N§ Contrato compra");
            rPreC.SETRANGE("Codigo Precio", rPreC."Codigo Precio"::Extras);
            rPreC.SETRANGE(Codigo         , pwExtra);
            rPreC.SETFILTER("Fecha desde" , '<=%1', fecha_trabajo);
            rPreC.SETFILTER("Fecha hasta" , '>=%1', fecha_trabajo);
            rPreC.SETRANGE(Activo         , TRUE);
            IF NOT rPreC.FINDFIRST THEN
              inserta_error(par_cab, STRSUBSTNO(Text094 + Text073, pwExtra, rConC.Delegacion,
                                                rConC."N§ Contrato compra", fecha_trabajo));
          END;
        END
        ELSE BEGIN
          //-$003inserta_error(par_cab, STRSUBSTNO(Text076 +
          //-$003                                  Text077, rPar."Touroperador importacion",
          //-$003                                  par_hotel, fecha_trabajo));

          //+$003

          //+$005
          IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN
            inserta_error(par_cab, STRSUBSTNO(Text076 + ' ' +
                                              Text077, rPar."Touroperador importacion",
                                              par_hotel, fecha_trabajo))
          ELSE
            inserta_error(par_cab, STRSUBSTNO(Text076 + ' ' +
                                              Text077, wTTOO,
                                              par_hotel, fecha_trabajo))
        END;
      END;

      IF rConC."Tipo de Contrato" = rConC."Tipo de Contrato"::"En nombre propio" THEN
      BEGIN
        ant_conversion := '';

        rConVta.RESET;
        rConVta.SETCURRENTKEY(Delegacion,
                              TourOperador,
                              Hotel,
                              "Fecha inicio contrato",
                              "Fecha final contrato");
        rConVta.SETRANGE (TourOperador           , rConvTO."Touroperador Atennea");
        rConVta.SETRANGE (Hotel                  , par_hotel);
        rConVta.SETRANGE (Confirmado             , TRUE);
        FOR fecha_trabajo := par_hot."Fecha entrada" TO par_hot."Fecha salida" - 1 DO BEGIN
          rConVta.SETFILTER("Fecha inicio contrato", '<=%1', fecha_trabajo);
          rConVta.SETFILTER("Fecha final contrato" , '>=%1', fecha_trabajo);
          IF rConVta.FINDFIRST THEN BEGIN
            IF pwExtra='' THEN BEGIN // Si buscamos extras no miramos estancias ni regimen
              CLEAR(rConv);
              rConv.SETRANGE(Delegacion     , rConVta.Delegacion);
              rConv.SETRANGE("N§ Contrato"  , rConVta."N§ Contrato venta");
              rConv.SETRANGE("Tipo contrato", rConv."Tipo contrato"::Venta);
              rConv.SETRANGE("Habitacion TO", par_hot.Habitacion);
              IF NOT rConv.FIND('-') THEN
                inserta_error(par_cab, STRSUBSTNO(Text070,
                                                  par_hot.Habitacion, rConVta."N§ Contrato venta"));
              IF ant_conversion = '' THEN
                ant_conversion := rConv."Habitacion cupo"
              ELSE BEGIN
                IF ant_conversion <> rConv."Habitacion cupo" THEN
                 inserta_error(par_cab, STRSUBSTNO(Text071,
                                                  par_hot.Habitacion));
              END;
              // buscar el cupo para la habitacion
              //
              rCupoV.RESET;
              rCupoV.SETRANGE (Delegacion         , rConVta.Delegacion);
              rCupoV.SETRANGE ("N§ Contrato venta", rConVta."N§ Contrato venta");
              rCupoV.SETRANGE ("Habitacion cupo"  , rConv."Habitacion cupo");
              rCupoV.SETFILTER("Fecha desde"      , '<=%1', fecha_trabajo);
              rCupoV.SETFILTER("Fecha hasta"      , '>=%1', fecha_trabajo);
              rCupoV.SETRANGE (Activo             , TRUE);
              IF NOT rCupoV.FINDFIRST THEN BEGIN
                inserta_error(par_cab, STRSUBSTNO(Text078+
                                                  Text073, rConv."Habitacion cupo", rConVta.Delegacion,
                                                  rConVta."N§ Contrato venta", fecha_trabajo));
              END;
              // buscar el precio de habitacion
              //
              rPreV.RESET;
              rPreV.SETRANGE(Delegacion     , rConVta.Delegacion);
              rPreV.SETRANGE("N§ Contrato"  , rConVta."N§ Contrato venta");
              rPreV.SETRANGE("Codigo Precio", rPreV."Codigo Precio"::Habitacion);
              rPreV.SETRANGE(Codigo         , rConv."Habitacion cupo");
              rPreV.SETFILTER("Fecha desde" , '<=%1', fecha_trabajo);
              rPreV.SETFILTER("Fecha hasta" , '>=%1', fecha_trabajo);
              rPreV.SETRANGE(Activo         , TRUE);
              IF NOT rPreV.FINDFIRST THEN
                inserta_error(par_cab, STRSUBSTNO(Text079+
                                                  Text073, rConv."Habitacion cupo", rConVta.Delegacion,
                                                  rConVta."N§ Contrato venta", fecha_trabajo));
              // buscar el precio de regimen
              //
              rPreV.RESET;
              rPreV.SETRANGE(Delegacion     , rConVta.Delegacion);
              rPreV.SETRANGE("N§ Contrato"  , rConVta."N§ Contrato venta");
              rPreV.SETRANGE("Codigo Precio", rPreV."Codigo Precio"::Regimen);
              rPreV.SETRANGE(Codigo         , par_regimen);
              rPreV.SETFILTER("Fecha desde" , '<=%1', fecha_trabajo);
              rPreV.SETFILTER("Fecha hasta" , '>=%1', fecha_trabajo);
              rPreV.SETRANGE(Activo         , TRUE);
              IF NOT rPreV.FINDFIRST THEN
                inserta_error(par_cab, STRSUBSTNO(Text080+
                                                  Text073, par_regimen, rConVta.Delegacion,
                                                  rConVta."N§ Contrato venta", fecha_trabajo));
            END
            ELSE BEGIN // Busca el precio del extra
              rPreV.RESET;
              rPreV.SETRANGE(Delegacion     , rConVta.Delegacion);
              rPreV.SETRANGE("N§ Contrato"  , rConVta."N§ Contrato venta");
              rPreV.SETRANGE("Codigo Precio", rPreV."Codigo Precio"::Extras);
              rPreV.SETRANGE(Codigo         , pwExtra);
              rPreV.SETFILTER("Fecha desde" , '<=%1', fecha_trabajo);
              rPreV.SETFILTER("Fecha hasta" , '>=%1', fecha_trabajo);
              rPreV.SETRANGE(Activo         , TRUE);
              IF NOT rPreV.FINDFIRST THEN
                inserta_error(par_cab, STRSUBSTNO(Text095 + Text073, pwExtra, rConVta.Delegacion,
                                                  rConVta."N§ Contrato venta", fecha_trabajo));
            END;
          END
          ELSE BEGIN
            inserta_error(par_cab, STRSUBSTNO(Text081+
                                              Text077, rConvTO."Touroperador Atennea",
                                              par_hotel, fecha_trabajo));
          END;
        END;
      END;
    END;

    PROCEDURE borra_fichero_importado@11();
    VAR
      rCab@1103355000 : Record 7010076;
      rCab2@1103355001 : Record 7010076;
      rFic@1103355002 : Record 7010082;
      ventana@1103355003 : Dialog;
      num_fic@1103355004 : Integer;
      total@1103355005 : Integer;
      linea@1103355006 : Integer;
      text_conf@1103355007 : Text[250];
    BEGIN
      // borra_fichero_importado

      ventana.OPEN(Text082 +
                   '\' +
                   Text083);
      ventana.INPUT(1, num_fic);
      ventana.CLOSE;
      IF num_fic = 0 THEN
        EXIT;

      text_conf := STRSUBSTNO(Text084, num_fic);
      IF NOT CONFIRM(text_conf) THEN
        EXIT;

      rCab.RESET;
      rCab.SETRANGE (Fichero, num_fic);
      rCab.SETFILTER(Estado , '<>%1', rCab.Estado::Procesada);
      IF rCab.FINDSET THEN BEGIN
        total := rCab.COUNT;
        linea := 1;
        ventana.OPEN(Text085 +
                     '\' +
                     Text086 +
                     '\' +
                     '#2####                #3####');
        ventana.UPDATE(1, num_fic);
        ventana.UPDATE(2, total);
        REPEAT
          ventana.UPDATE(3, linea);
          linea := linea + 1;
          rCab2 := rCab;
          rCab2.DELETE(TRUE);
        UNTIL rCab.NEXT = 0;
        ventana.CLOSE;
      END;

      rFic.RESET;
      IF rFic.GET(num_fic) THEN
        rFic.DELETE(TRUE);
      rFic.RESET;
    END;

    PROCEDURE borra_apartados@14(VAR par_cab@1103355000 : Record 7010076);
    VAR
      opcion@1103355001 : Integer;
      rCab@1103355002 : Record 7010076;
      rCab2@1103355003 : Record 7010076;
      ventana@1103355004 : Dialog;
    BEGIN
      // borra_apartados
      //
      opcion := STRMENU(Text087, 2);
      CLEAR(rCab);
      rCab.COPY(par_cab);
      IF opcion = 1 THEN
        rCab.SETRECFILTER;
      IF rCab.FIND('-') THEN BEGIN
        ventana.OPEN(Text088 +
                     '\' +
                     Text089 +
                     Text090);
        REPEAT
          ventana.UPDATE(1, rCab.Fichero);
          ventana.UPDATE(2, rCab.Bono);
          rCab2 := rCab;
          rCab2.DELETE;
        UNTIL rCab.NEXT = 0;
      END;
    END;

    PROCEDURE TraspasaEmpresaPorDestino@1100253000(VAR prCab@1100253000 : Record 7010076);
    VAR
      lrCab@1100253001 : Record 7010076;
      lrEmpImp@1100253002 : Record 7009859;
    BEGIN
      // TraspasaEmpresaPorDestino

      IF NOT CONFIRM(Text098) THEN
        EXIT;

      CLEAR(lrCab);
      lrCab.COPY(prCab);
      IF lrCab.FINDSET THEN BEGIN
        REPEAT
          CLEAR(lrEmpImp);
          lrEmpImp.SETRANGE(Tipo      , lrEmpImp.Tipo::"Reserva WS");
          lrEmpImp.SETRANGE(Destino, lrCab.Destino);
          IF lrEmpImp.FINDFIRST THEN BEGIN
            TraspasaReserva(lrCab, lrEmpImp.Empresa);
          END;
        UNTIL lrCab.NEXT=0;
      END;
    END;

    PROCEDURE TraspasaReserva@1100253001(VAR prCab@1100253000 : Record 7010076;pwEmp@1100253001 : Text[30]);
    VAR
      lrCabI@1100253007 : Record 7010076;
      lrVuelosI@1100253006 : Record 7010077;
      lrVuelosI2@1100253011 : Record 7010077;
      lrHotelI@1100253005 : Record 7010078;
      lrHotelI2@1100253010 : Record 7010078;
      lrPaxI@1100253004 : Record 7010079;
      lrPaxI2@1100253009 : Record 7010079;
      lrServI@1100253003 : Record 7010080;
      lrServI2@1100253008 : Record 7010080;
      lrComI@1100253002 : Record 7009858;
      lrComI2@1100253012 : Record 7009858;
    BEGIN
      // TraspasaReserva

      IF pwEmp = '' THEN
        EXIT;

      lrCabI:= prCab;
      lrCabI.DELETE;
      lrCabI.CHANGECOMPANY(pwEmp);
      lrCabI."Pendiente Destino" := FALSE;
      lrCabI.INSERT;

      //$007 <
      IF COMPANYNAME = pwEmp THEN
        EXIT;
      //$007 >

      CLEAR(lrHotelI);
      lrHotelI.SETCURRENTKEY(Fichero,Touroperador,Bono,Temporada);
      lrHotelI.SETRANGE(Fichero     , prCab.Fichero);
      lrHotelI.SETRANGE(Touroperador, prCab.TourOperador);
      lrHotelI.SETRANGE(Bono        , prCab.Bono);
      lrHotelI.SETRANGE(Temporada   , prCab.Temporada);
      IF lrHotelI.FINDSET THEN BEGIN
        REPEAT
          lrHotelI2 := lrHotelI;
          lrHotelI2.CHANGECOMPANY(pwEmp);
          lrHotelI2.INSERT;
        UNTIL lrHotelI.NEXT=0;
        lrHotelI.DELETEALL;
      END;

      CLEAR(lrPaxI);
      lrPaxI.SETCURRENTKEY(Fichero,TourOperador,Bono,Temporada);
      lrPaxI.SETRANGE(Fichero     , prCab.Fichero);
      lrPaxI.SETRANGE(TourOperador, prCab.TourOperador);
      lrPaxI.SETRANGE(Bono        , prCab.Bono);
      lrPaxI.SETRANGE(Temporada   , prCab.Temporada);
      IF lrPaxI.FINDSET THEN BEGIN
        REPEAT
          lrPaxI2 := lrPaxI;
          lrPaxI2.CHANGECOMPANY(pwEmp);
          lrPaxI2.INSERT;

          CLEAR(lrComI);
          lrComI.SETRANGE(Fichero     , prCab.Fichero);
          lrComI.SETRANGE(IDPax       , lrPaxI."ID Pax");
          IF lrComI.FINDSET THEN BEGIN
            REPEAT
              lrComI2 := lrComI;
              lrComI2.CHANGECOMPANY(pwEmp);
              lrComI2.INSERT;
            UNTIL lrComI.NEXT=0;
            lrComI.DELETEALL;
          END;

        UNTIL lrPaxI.NEXT=0;
        lrPaxI.DELETEALL;
      END;

      CLEAR(lrVuelosI);
      lrVuelosI.SETCURRENTKEY(Fichero,TourOperador,Bono,Temporada);
      lrVuelosI.SETRANGE(Fichero     , prCab.Fichero);
      lrVuelosI.SETRANGE(TourOperador, prCab.TourOperador);
      lrVuelosI.SETRANGE(Bono        , prCab.Bono);
      lrVuelosI.SETRANGE(Temporada   , prCab.Temporada);
      IF lrVuelosI.FINDSET THEN BEGIN
        REPEAT
          lrVuelosI2 := lrVuelosI;
          lrVuelosI2.CHANGECOMPANY(pwEmp);
          lrVuelosI2.INSERT;
        UNTIL lrVuelosI.NEXT=0;
        lrVuelosI.DELETEALL;
      END;

      CLEAR(lrServI);
      lrServI.SETCURRENTKEY(Fichero,Touroperador,Bono,Temporada);
      lrServI.SETRANGE(Fichero     , prCab.Fichero);
      lrServI.SETRANGE(Touroperador, prCab.TourOperador);
      lrServI.SETRANGE(Bono        , prCab.Bono);
      lrServI.SETRANGE(Temporada   , prCab.Temporada);
      IF lrServI.FINDSET THEN BEGIN
        REPEAT
          lrServI2 := lrServI;
          lrServI2.CHANGECOMPANY(pwEmp);
          lrServI2.INSERT;
        UNTIL lrServI.NEXT=0;
        lrServI.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE _RevisaPaqueteReserva@1100217000(VAR prCab@1100217000 : Record 7010076);
    VAR
      lrCabIfs@1100217001 : Record 7010076;
      lrHotIfs@1100217002 : Record 7010078;
      lrConvHotel@1100217003 : Record 7009725;
    BEGIN
      // _RevisaPaqueteReserva

      lrCabIfs.RESET;
      lrCabIfs.COPY(prCab);
      IF lrCabIfs.FINDSET THEN
      BEGIN
        REPEAT

          //-$016IF rCovTO.GET(lrCabIfs.TourOperador) THEN
          //-$016  wTTOO := rCovTO."Touroperador Atennea"
          wTTOO := rConvTO.ConversionTouroperador(lrCabIfs.TourOperador, lrCabIfs.Destino);

          IF wTTOO = '' THEN
            inserta_error(lrCabIfs, STRSUBSTNO(Text018, lrCabIfs.TourOperador));

          lrHotIfs.SETRANGE(Fichero     , lrCabIfs.Fichero);
          lrHotIfs.SETRANGE(Touroperador, lrCabIfs.TourOperador);
          lrHotIfs.SETRANGE(Bono        , lrCabIfs.Bono);
          lrHotIfs.SETRANGE(Temporada   , lrCabIfs.Temporada);
          IF lrHotIfs.FINDSET THEN
          BEGIN
            REPEAT
              //. Buscamos la conversion del hotel
              _ConversionHotel(lrConvHotel, lrCabIfs, lrHotIfs.Hotel);
              //. Comprobamos que se haya encontrado conversion
              IF lrConvHotel."Hotel estancia" <> '' THEN
              BEGIN
                IF lrConvHotel."Solo Transfer" THEN
                BEGIN
                  lrHotIfs."Paquete asociado" := rPar."Paquete Solo Transfer";
                  lrHotIfs.MODIFY;
                END;
              END;
            UNTIL lrHotIfs.NEXT = 0;
          END;
        UNTIL lrCabIfs.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _ConversionHotel@1100217004(VAR prConv@1100217001 : Record 7009725;prCab@1100217000 : Record 7010076;pwHotel@1100217002 : Code[20]) : Code[20];
    BEGIN
      // _ConversionHotel

      CLEAR(prConv);
      IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN
        prConv.SETRANGE(TourOperador, rPar."Touroperador importacion")
      ELSE
        prConv.SETRANGE(TourOperador, wTTOO);
      prConv.SETRANGE("Touroperador venta", wTTOO);
      prConv.SETRANGE("Hotel TO"          , pwHotel);
      IF (NOT prConv.FINDFIRST) OR
         (prConv."Hotel estancia" = '') THEN
      BEGIN
        prConv.SETRANGE("Touroperador venta", '');
        IF (NOT prConv.FINDFIRST) OR
           (prConv."Hotel estancia" = '') THEN
        BEGIN
          //+$005
          IF rDatosIns."Empresa Real" = rDatosIns."Empresa Real"::GOC THEN
            inserta_error(prCab, STRSUBSTNO(Text056, pwHotel, rPar."Touroperador importacion"))
          ELSE
            inserta_error(prCab, STRSUBSTNO(Text056, pwHotel, wTTOO));
          //+$005
        END;
      END;
    END;

    LOCAL PROCEDURE _EstanciaSolapada@1100217001(prCabIfs@1100217003 : Record 7010076;prHotIfs@1100217000 : Record 7010078);
    VAR
      lrHotIfs@1100217001 : Record 7010078;
      lrHotel@1100217002 : Record 7009724;
      lrConv@1100217004 : Record 7009725;
      lrSerIfs@1100217005 : Record 7010080;
      lrSerIfs2@1100217006 : Record 7010080;
    BEGIN
      // _EstanciaSolapada

      lrHotIfs.RESET;
      lrHotIfs.SETRANGE (Fichero        , prHotIfs.Fichero);
      lrHotIfs.SETRANGE (Touroperador   , prHotIfs.Touroperador);
      lrHotIfs.SETRANGE (Bono           , prHotIfs.Bono);
      lrHotIfs.SETRANGE (Temporada      , prHotIfs.Temporada);
      lrHotIfs.SETFILTER("ID Hotel"     , '<>%1', prHotIfs."ID Hotel");
      lrHotIfs.SETFILTER("Fecha entrada", '<%1', prHotIfs."Fecha salida");
      lrHotIfs.SETFILTER("Fecha salida" , '>%1', prHotIfs."Fecha entrada");
      lrHotIfs.SETRANGE ("Tipo Registro", prHotIfs."Tipo Registro"::Ok);
      //-$008lrHotIfs.SETRANGE (Habitacion     , prHotIfs.Habitacion);
      IF lrHotIfs.FINDSET THEN
      BEGIN
        REPEAT
          _ConversionHotel(lrConv, prCabIfs, prHotIfs.Hotel);

          IF NOT lrHotel.GET(lrConv."Hotel estancia") THEN
            CLEAR(lrHotel);

          IF NOT lrHotIfs."Hotel Ficticio" THEN
          BEGIN
            //. Comprobamos que se solapen personas
            //. Buscar los servicios del primer hotel

            lrSerIfs.RESET;
            lrSerIfs.SETRANGE(Fichero        , prHotIfs.Fichero);
            lrSerIfs.SETRANGE(Touroperador   , prHotIfs.Touroperador);
            lrSerIfs.SETRANGE(Bono           , prHotIfs.Bono);
            lrSerIfs.SETRANGE(Temporada      , prHotIfs.Temporada);
            lrSerIfs.SETRANGE("N§ Servicio"  , prHotIfs."N§ Servicio");
            lrSerIfs.SETRANGE("Tipo Servicio", lrSerIfs."Tipo Servicio"::Hotel);
            IF lrSerIfs.FINDSET THEN
            BEGIN
              REPEAT
                //. Buscamos si esta persona tiene tambien servicio en el hotel solapado
                lrSerIfs2.RESET;
                lrSerIfs2.SETRANGE(Fichero        , lrHotIfs.Fichero);
                lrSerIfs2.SETRANGE(Touroperador   , lrHotIfs.Touroperador);
                lrSerIfs2.SETRANGE(Bono           , lrHotIfs.Bono);
                lrSerIfs2.SETRANGE(Temporada      , lrHotIfs.Temporada);
                lrSerIfs2.SETRANGE("N§ Servicio"  , lrHotIfs."N§ Servicio");
                lrSerIfs2.SETRANGE(Persona       , lrSerIfs.Persona);
                lrSerIfs2.SETRANGE("Tipo Servicio", lrSerIfs."Tipo Servicio"::Hotel);
                IF lrSerIfs2.FINDFIRST THEN
                  inserta_error(prCabIfs,
                                STRSUBSTNO(Text099, prHotIfs."ID Hotel", lrHotIfs."ID Hotel"));
              UNTIL lrSerIfs.NEXT = 0;
            END;
          END;
        UNTIL lrHotIfs.NEXT = 0;
      END;
    END;

    PROCEDURE CrearServiciosHotel@1100217003(prHot@1100217000 : Record 7010078);
    VAR
      lrPax@1100217001 : Record 7010079;
      lrSer@1100217002 : Record 7010080;
      lrSer2@1100217004 : Record 7010080;
      lrFicheroWS@1100217005 : Record 7009899;
      lrFicheroGOC@1100217006 : Record 7010082;
      lwID@1100217003 : Integer;
      lwTipoProceso@1100217007 : 'WS,Texto';
    BEGIN
      // CrearServiciosHotel

      IF NOT lrFicheroWS.GET(prHot.Fichero) THEN
      BEGIN
        lrFicheroGOC.GET(prHot.Fichero);
        lwTipoProceso := lwTipoProceso::Texto;
      END
      ELSE
      BEGIN
        IF lrFicheroWS.Type = lrFicheroWS.Type::"Web Service" THEN
          lwTipoProceso := lwTipoProceso::WS
        ELSE
          lwTipoProceso := lwTipoProceso::Texto;
      END;

      CLEAR(lrPax);
      lrPax.RESET;
      lrPax.SETRANGE(Fichero     , prHot.Fichero);
      lrPax.SETRANGE(TourOperador, prHot.Touroperador);
      lrPax.SETRANGE(Bono        , prHot.Bono);
      lrPax.SETRANGE(Temporada   , prHot.Temporada);
      IF lrPax.FINDSET THEN BEGIN
        REPEAT
          CLEAR(lrSer2);
          lrSer2.RESET;
          lrSer2.SETRANGE(Fichero, prHot.Fichero);
          IF lrSer2.FINDLAST THEN
            lwID := lrSer2."ID Servicio" + 1
          ELSE
            lwID := 1;

          CLEAR(lrSer);
          lrSer."ID Servicio"   := lwID;
          lrSer.Fichero         := lrPax.Fichero;
          lrSer.Touroperador    := lrPax.TourOperador;
          lrSer.Bono            := lrPax.Bono;
          lrSer.Temporada       := lrPax.Temporada;
          IF lwTipoProceso = lwTipoProceso::Texto THEN
            lrSer.Persona        := lrPax.Contador
          ELSE
            lrSer.Persona        := lrPax."ID Pax";
          lrSer."N§ Servicio"   := prHot."N§ Servicio";
          lrSer."Tipo Servicio" := lrSer."Tipo Servicio"::Hotel;
          lrSer.INSERT;
        UNTIL lrPax.NEXT = 0;
      END;
    END;

    PROCEDURE CrearServiciosTransfer@1100217005(prVue@1100217000 : Record 7010077);
    VAR
      lrPax@1100217007 : Record 7010079;
      lrSer@1100217006 : Record 7010080;
      lrSer2@1100217005 : Record 7010080;
      lrFicheroWS@1100217004 : Record 7009899;
      lrFicheroGOC@1100217003 : Record 7010082;
      lwID@1100217002 : Integer;
      lwTipoProceso@1100217001 : 'WS,Texto';
    BEGIN
      // CrearServiciosTransfer

      IF NOT lrFicheroWS.GET(prVue.Fichero) THEN
      BEGIN
        lrFicheroGOC.GET(prVue.Fichero);
        lwTipoProceso := lwTipoProceso::Texto;
      END
      ELSE
      BEGIN
        IF lrFicheroWS.Type = lrFicheroWS.Type::"Web Service" THEN
          lwTipoProceso := lwTipoProceso::WS
        ELSE
          lwTipoProceso := lwTipoProceso::Texto;
      END;

      CLEAR(lrPax);
      lrPax.RESET;
      lrPax.SETRANGE(Fichero     , prVue.Fichero);
      lrPax.SETRANGE(TourOperador, prVue.TourOperador);
      lrPax.SETRANGE(Bono        , prVue.Bono);
      lrPax.SETRANGE(Temporada   , prVue.Temporada);
      IF lrPax.FINDSET THEN BEGIN
        REPEAT
          CLEAR(lrSer2);
          lrSer2.RESET;
          lrSer2.SETRANGE(Fichero, prVue.Fichero);
          IF lrSer2.FINDLAST THEN
            lwID := lrSer2."ID Servicio" + 1
          ELSE
            lwID := 1;

          CLEAR(lrSer);
          lrSer."ID Servicio"   := lwID;
          lrSer.Fichero         := lrPax.Fichero;
          lrSer.Touroperador    := lrPax.TourOperador;
          lrSer.Bono            := lrPax.Bono;
          lrSer.Temporada       := lrPax.Temporada;
          IF lwTipoProceso = lwTipoProceso::Texto THEN
            lrSer.Persona        := lrPax.Contador
          ELSE
            lrSer.Persona        := lrPax."ID Pax";
          lrSer."N§ Servicio"   := prVue."N§ Servicio";
          lrSer."Tipo Servicio" := lrSer."Tipo Servicio"::Transfer;
          lrSer.INSERT;
        UNTIL lrPax.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE _BuscaPreciosTransfer@1000000000(prCabInterface@1000000012 : Record 7010076;prCont@1000000000 : Record 7009788;prHotelInterface@1000000003 : Record 7010078;pwTipoVuelo@1000000002 : Integer;pwCodigoHotel@1000000004 : Code[20]);
    VAR
      lrVueloInterface@1000000001 : Record 7010077;
      lrPaxInterface@1000000006 : Record 7010079;
      lwPersonas@1000000005 : Integer;
    BEGIN
      // _PrecioVentaTransfer

      //. Buscamos la cantidad de personas
      lwPersonas := 0;

      lrPaxInterface.RESET;
      lrPaxInterface.SETRANGE(Fichero     , prCabInterface.Fichero);
      lrPaxInterface.SETRANGE(TourOperador, prCabInterface.TourOperador);
      lrPaxInterface.SETRANGE(Bono        , prCabInterface.Bono);
      lrPaxInterface.SETRANGE(Temporada   , prCabInterface.Temporada);
      IF lrPaxInterface.FINDSET THEN
        lwPersonas := lrPaxInterface.COUNT;

      lrVueloInterface.RESET;
      lrVueloInterface.SETRANGE(Fichero     , prCabInterface.Fichero);
      lrVueloInterface.SETRANGE(TourOperador, prCabInterface.TourOperador);
      lrVueloInterface.SETRANGE(Bono        , prCabInterface.Bono);
      lrVueloInterface.SETRANGE(Temporada   , prCabInterface.Temporada);
      lrVueloInterface.SETRANGE("Tipo Vuelo", pwTipoVuelo);
      IF lrVueloInterface.FINDSET THEN
      BEGIN
        REPEAT
          IF lrVueloInterface."Tipo Vuelo" = lrVueloInterface."Tipo Vuelo"::Entrada THEN
          BEGIN
            IF NOT _ExistePrecioTransfer(prCont, lrVueloInterface.Fecha, prHotelInterface."Servicio transfer llegada",
                                         prCabInterface."Tipo operacion", lrVueloInterface."IATA destino", pwCodigoHotel,
                                         lwPersonas) THEN
              inserta_error(prCabInterface, STRSUBSTNO(Text104, lrVueloInterface.Fecha, prCont."N§ Contrato Venta"));
          END
          ELSE
          BEGIN
            IF NOT _ExistePrecioTransfer(prCont, lrVueloInterface.Fecha, prHotelInterface."Servicio transfer salida",
                                         prCabInterface."Tipo operacion", lrVueloInterface."IATA origen", pwCodigoHotel,
                                         lwPersonas) THEN
              inserta_error(prCabInterface, STRSUBSTNO(Text104, lrVueloInterface.Fecha, prCont."N§ Contrato Venta"));
          END;
        UNTIL lrVueloInterface.NEXT = 0;
      END;
    END;

    PROCEDURE _ExistePrecioTransfer@1000000002(prCont@1000000005 : Record 7009788;pwFecha@1000000004 : Date;pwTipoTraslado@1000000003 : Text[1];pwTipoOperacion@1000000002 : Integer;pwAeropuerto@1000000001 : Code[10];pwHotel@1000000008 : Code[20];pwPersonas@1000000014 : Integer) : Boolean;
    VAR
      lrPre@1000000011 : Record 7009790;
      lrAeropuerto@1000000010 : Record 7009704;
      lrZona@1000000009 : Record 7009791;
      lrHotel@1000000012 : Record 7009724;
      lwZonaDesde@1000000007 : Code[10];
      lwZonaHasta@1000000006 : Code[10];
    BEGIN
      // _ExistePrecioTransfer

      IF NOT lrAeropuerto.GET(pwAeropuerto) THEN
        EXIT(FALSE);

      IF lrAeropuerto."Zona fisica" = '' THEN
        EXIT(FALSE);

      //. Buscamos las zonas que componen la ruta
      lrZona.RESET;
      lrZona.SETRANGE(Contrato       , prCont."N§ Contrato Venta");
      lrZona.SETRANGE("Tipo contrato", lrZona."Tipo contrato"::Venta);
      lrZona.SETRANGE("Zona fisica"  , lrAeropuerto."Zona fisica");
      IF NOT lrZona.FINDFIRST THEN
        EXIT;
      lwZonaDesde := lrZona.Zona;

      IF NOT lrHotel.GET(pwHotel) THEN
        EXIT(FALSE);
      lrZona.SETRANGE("Zona fisica"  , lrHotel."Zona Fisica");
      IF NOT lrZona.FINDFIRST THEN
        EXIT;
      lwZonaHasta := lrZona.Zona;

      lrPre.RESET;
      lrPre.SETRANGE (Delegacion      , prCont.Delegacion);
      lrPre.SETRANGE ("N§ Contrato"   , prCont."N§ Contrato Venta");
      lrPre.SETRANGE ("Codigo precio" , lrPre."Codigo precio"::"Precio Base");
      lrPre.SETFILTER("Fecha desde"   , '<=%1', pwFecha);
      lrPre.SETFILTER("Fecha hasta"   , '>=%1', pwFecha);
      CASE pwTipoTraslado OF
        'S': lrPre.SETRANGE ("Tipo Traslado" , lrPre."Tipo Traslado"::Compartido);
        'P': lrPre.SETRANGE ("Tipo Traslado" , lrPre."Tipo Traslado"::Privado);
      END;
      lrPre.SETFILTER("Tipo operacion", '%1|%2', pwTipoOperacion + 1, lrPre."Tipo operacion"::Ambos);
      lrPre.SETRANGE (Origen          , lwZonaDesde);
      lrPre.SETRANGE (Destino         , lwZonaHasta);
      lrPre.SETFILTER("Rango desde"   , '<=%1', pwPersonas);
      lrPre.SETFILTER("Rango hasta"   , '>=%1', pwPersonas);
      IF NOT lrPre.FINDFIRST THEN
      BEGIN
        lrPre.SETRANGE(Destino, lwZonaDesde);
        lrPre.SETRANGE(Origen, lwZonaHasta);
        EXIT(lrPre.FINDFIRST);
      END
      ELSE
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE _PaqueteTieneTransfer@1000000001(pwPaquete@1000000000 : Code[10]) : Boolean;
    VAR
      lrPaqPro@1000000001 : Record 7009752;
    BEGIN
      // _PaqueteTieneTransfer

      lrPaqPro.RESET;
      lrPaqPro.SETRANGE(Paquete        , pwPaquete);
      lrPaqPro.SETRANGE("Tipo Producto", lrPaqPro."Tipo Producto"::Transfer);
      EXIT(lrPaqPro.FINDFIRST);
    END;

    LOCAL PROCEDURE _PaqueteTieneHotel@1100217010(pwPaquete@1100217000 : Code[10]) : Boolean;
    VAR
      lrPaqProd@1100217001 : Record 7009752;
    BEGIN
      // _PaqueteTieneHotel

      lrPaqProd.RESET;
      lrPaqProd.SETRANGE(Paquete        , pwPaquete);
      lrPaqProd.SETRANGE("Tipo Producto", lrPaqProd."Tipo Producto"::Hotel);
      EXIT(lrPaqProd.FINDFIRST);
    END;

    BEGIN
    {
      ## JPT 11/05/09

        .- Elimina la funcionalidad de "Servicio extra" que es un campo obsoleto que no da m s que problemas
           Su funci¢n fue sustituida por el valor "Hotel Ficticio" de la ficha de hotel

      ## AJF 29/06/09

        .- (09/00319) cambio c¢digos de hotel de code10 a code20.

      $001 AJS 21102011 Agrego el campo Temporada a la hora de localizar la cabecera de reserva

      $002 AJS 15112011 Temporalmente inhabilito el filtro por Touroperador al localizar la cabecera de reserva

      $003 AJS 15112011 A la hora de buscar los contratos de compra a partir del 010512D se hacen sobre REWE

      $004 AJS 13092012 Se deshace la modificacion para forzar las busquedas sobre REWE

      $005 AJS 14092012 En CNT el touroperador de venta y compra son el mismo, conservar el parametro Touroperador importacion
                        en Go Caribic

      $006 AJS 24092012 Nueva funcion para revisar si alguno de los hoteles empleados esta marcado como solo transfer y modificar
                        el paquete asociado en las lineas de hotel interfase

      $007 AJS 02102012 Modifico la funcion TraspasaReserva para evitar un error si la empresa destino es la empresa del usuario

      $008 AJS 26102012 Mejoramos la funcion que comprueba que se solapen estancias, ahora lo hace persona por persona

      $009 AJS 07102013 Los hoteles de SOLO TRANSFER no tienen que buscar contrato

      $010 AJS 14052014 Hay que comprobar que las conversiones no se dejen en blanco

      $011 AJS 14052014 Verificar que el hotel tenga una zona fisica asignada

      $012 AJS 09092014 CNT-OC-14080, Incluyo el control de que la reserva tiene precio de transfer

      $013 ARM 30092014 CNT-CAR-14063 Nuevos campos Sericio transfer entrada y salida

      $014 AJS 12112014 Las comprobaciones de contrato hotel de hay que hacerlas solo si el paquete tiene un producto hotel

      $015 AJS 12112014 Las comprobaciones de contrato transfer de hay que hacerlas solo si el paquete tiene un producto transfer

      $016 AJS 15012015 Usar la funcion de conversion touroperador que esta en la propia tabla

      $017 AJS 16022015 Cambio los ModifyAll the cabecera por REPEAT UNTIL para tratar de evitar algunos bloqueos en la importacion
    }
    END.
  }
}
