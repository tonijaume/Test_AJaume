OBJECT Codeunit 6811 EP XML Document Receive
{
  OBJECT-PROPERTIES
  {
    Date=25/05/05;
    Time=12:00:00;
    Version List=NAVW14.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DecodeXML@1000000000 : Codeunit 6813;
      ReadData@1000000001 : Codeunit 6816;
      ModifyData@1000000002 : Codeunit 6819;
      SupportFunctions@1000000003 : Codeunit 6815;

    PROCEDURE ProcessXMLDocument@1(VAR XMLDocIn@1000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocOut@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      RequestType@1005 : Code[20];
      UserID@1000000000 : Code[50];
      GroupCode@1000000001 : Code[20];
      lType@1000000002 : ' ,List,Detail,Head+Line,System';
      PermissionError@1002 : Boolean;
    BEGIN
      // Get UserID and Group to Set GLOBALLANGUAGE
      DecodeXML.GetUserIDFromIn(XMLDocIn,UserID);
      DecodeXML.GetGroupFromIn(XMLDocIn,GroupCode);

      // Get Request Type From Document
      DecodeXML.GetRequestTypeFromIn(XMLDocIn,RequestType);

      // Switch Global Language to User or Group Language
      SetGlobalLanguage(UserID,GroupCode);

      // Check User/Group Permission
      CASE RequestType OF
        'GETREQUESTTYPES':
          PermissionError := FALSE;
        'GETSEARCHTABLELIST':
          PermissionError := FALSE;
        'GETSEARCHRESULT':
          PermissionError := FALSE;
        ELSE
          IF NOT CheckUser(UserID,GroupCode) THEN BEGIN
            SetError(1,UserID,'','',XMLDocOut,XMLDocIn);
            PermissionError := TRUE;
            END
          ELSE
            PermissionError := FALSE;
      END;

      IF NOT PermissionError THEN BEGIN
        // Get the Type of the Request (e.g. List etc.)
        SupportFunctions.GetReqTypeFunctions(GroupCode,RequestType,lType);

        CASE RequestType OF
          // Core System Functions - Start
          // Do not delete!!!
          'GETREQUESTTYPES':
            ReadData.GetRequestTypes(XMLDocIn,XMLDocOut);
          'INSERTHEAD':
            ModifyData.InsertHead(XMLDocIn,XMLDocOut);
          'INSERTLINE':
            ModifyData.InsertLine(XMLDocIn,XMLDocOut);
          'MODIFYHEAD':
            ModifyData.ModifyHead(XMLDocIn,XMLDocOut);
          'MODIFYLINE':
            ModifyData.ModifyLine(XMLDocIn,XMLDocOut);
          'DELETEHEAD':
            ModifyData.DeleteHead(XMLDocIn,XMLDocOut);
          'DELETELINE':
            ModifyData.DeleteLine(XMLDocIn,XMLDocOut);
          'SHOWPICTURE':
            ReadData.ShowPicture(XMLDocIn,XMLDocOut);
          'GETSEARCHTABLELIST':
            ReadData.GetSearchTables(XMLDocIn,XMLDocOut);
          'GETSEARCHRESULT':
            ReadData.GetSearchResult(XMLDocIn,XMLDocOut);
          'SHOWREPORT':
            ReadData.ShowReport(XMLDocIn,XMLDocOut);
          // Core System Functions - End
          ELSE
            CASE lType OF
              lType::List:
                ReadData.GetLists(XMLDocIn,XMLDocOut);
              lType::Detail:
                ReadData.GetDetail(XMLDocIn,XMLDocOut);
              lType::"Head+Line":
                ReadData.GetHeadLine(XMLDocIn,XMLDocOut);
              ELSE
                SetError(999,RequestType,'','',XMLDocOut,XMLDocIn);
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE SetError@1000000001(ErrorCode@1000 : Integer;AdditionalValue1@1000000006 : Text[100];AdditionalValue2@1000000007 : Text[100];AdditionalValue3@1000000008 : Text[100];VAR XMLDocOut@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocIn@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      EncodeXML@1011 : Codeunit 6814;
      SupportFunctions@1009 : Codeunit 6815;
      XMLNode@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeDocOut@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeDocInfo@1008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLDocOutData@1013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocOutErrors@1012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      XMLDocDocInfo@1007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      GUID@1006 : Text[50];
    BEGIN
      IF ISCLEAR(XMLDocOutData) THEN
        CREATE(XMLDocOutData);
      IF ISCLEAR(XMLDocOutErrors) THEN
        CREATE(XMLDocOutErrors);
      IF ISCLEAR(XMLDocDocInfo) THEN
        CREATE(XMLDocDocInfo);

      DecodeXML.GetGUIDFromIn(XMLDocIn,GUID);
      DecodeXML.GetStaticXML(XMLDocIn,XMLDocDocInfo);
      XMLNodeDocInfo := XMLDocDocInfo.documentElement;

      EncodeXML.CreateErrors(XMLDocOutErrors);
      EncodeXML.AddErrors(XMLDocOutErrors,ErrorCode,AdditionalValue1,AdditionalValue2,AdditionalValue3);

      XMLDocOut.loadXML('<EMPLOYEEPORTAL/>');
      EncodeXML.AddGUID(XMLDocOut,GUID);
      XMLNodeDocOut := XMLDocOut.documentElement;
      XMLNodeDocOut.appendChild(XMLNodeDocInfo);

      XMLDocOutData.loadXML('<DATA/>');
      SupportFunctions.MergeErrorsPartToData(XMLDocOutData,XMLDocOutErrors);
      XMLNode := XMLDocOutData.documentElement;
      XMLNodeDocOut.appendChild(XMLNode);

      CLEAR(XMLDocOutData);
      CLEAR(XMLDocOutErrors);
      CLEAR(XMLDocDocInfo);
    END;

    PROCEDURE SetGlobalLanguage@1000000003(UserID@1000000002 : Code[50];GroupCode@1000000001 : Code[20]);
    VAR
      User@1000 : Record 6842;
      Group@1000000000 : Record 6804;
      LangSet@1000000004 : Boolean;
    BEGIN
      LangSet := FALSE;

      // Check Language for User
      IF User.GET(UserID) THEN BEGIN
        IF User."Language ID" > 0 THEN BEGIN
          GLOBALLANGUAGE(User."Language ID");
          LangSet := TRUE;
        END;
      END;

      // Check Language for Group
      IF NOT LangSet THEN BEGIN
        IF Group.GET(GroupCode) THEN BEGIN
          IF Group."Language ID" > 0 THEN BEGIN
            GLOBALLANGUAGE(Group."Language ID");
            LangSet := TRUE;
          END;
        END;
      END;

      // If no Language defined use current Windows Language
      IF NOT LangSet THEN
        GLOBALLANGUAGE(WINDOWSLANGUAGE);
    END;

    PROCEDURE CheckUser@2(UserID@1000 : Code[50];GroupCode@1001 : Code[20]) : Boolean;
    VAR
      User@1003 : Record 6842;
      Group@1004 : Record 6804;
      UserGroup@1005 : Record 6840;
    BEGIN
      // Check if User exists
      IF NOT User.GET(UserID) THEN
        EXIT(FALSE);

      // Check if Group exists
      IF NOT Group.GET(GroupCode) THEN
        EXIT(FALSE);

      // Check if User is in Group
      IF NOT UserGroup.GET(GroupCode,UserID) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}
