OBJECT Codeunit 7009739 Conciliacion tarjetas excursio
{
  OBJECT-PROPERTIES
  {
    Date=10/07/13;
    Time=12:15:17;
    Modified=Yes;
    Version List=AIC2009,EXC-CNT;
  }
  PROPERTIES
  {
    Permissions=TableData 271=rimd,
                TableData 274=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      tLinExtracto@1100244000 : Record 7009915;
      tMovPagos@1100244001 : Record 7010240;
      numConciliacio@1100244002 : Integer;
      importTotalMB@1100244003 : Decimal;
      importTotalLE@1100244004 : Decimal;
      wMargenPermitido@1100217000 : Decimal;
      IDLiq@1100244005 : Code[40];
      Text001@1103355000 : TextConst 'ESP=Los movimientos han sido conciliados.';
      Text002@1103355001 : TextConst 'ESP=La suma de importes a conciliar no es correcta.';
      Text003@1103355002 : TextConst 'ESP=Se ha desconciliado la conciliaci¢n n£mero %1.';

    PROCEDURE ConciliarSeleccio@1(tBanc@1100244000 : Record 270;tipusConciliaci¢@1100244001 : ' ,Autom†tica,Manual');
    VAR
      lwDiferencia@1100217000 : Decimal;
    BEGIN
      importTotalMB := 0;
      importTotalLE := 0;

      wMargenPermitido := 0.5; //+$001

      // Obtenir segÅent n£mero de conciliai¢
      WITH tLinExtracto DO BEGIN
        RESET;
        SETCURRENTKEY("Nß conciliaci¢n");
        IF FINDLAST THEN
          numConciliacio := "Nß conciliaci¢n" + 1
        ELSE
          numConciliacio := 1
      END;

      // Obtenir id de per conciliar
      IDLiq := USERID;
      IF IDLiq = '' THEN
        IDLiq := '***';

      WITH tLinExtracto DO BEGIN
        RESET;
        SETCURRENTKEY(Banco,"Liq. por Id.");
        SETRANGE(Banco, tBanc."No."); //para que s¢lo liquide los del banco activo
        SETRANGE("Liq. por Id.", IDLiq);
        IF FINDSET(TRUE) THEN
          REPEAT
            TESTFIELD(Banco            , tBanc."No.");
            TESTFIELD("Nß conciliaci¢n", 0);

            importTotalLE := importTotalLE + tLinExtracto.Importe;
            "Nß conciliaci¢n" := numConciliacio;
            "Tipo conciliaci¢n" := tipusConciliaci¢;
            MODIFY
          UNTIL NEXT = 0;
          MODIFYALL("Liq. por Id.", '')
      END;

      // Conciliar
      WITH tMovPagos DO BEGIN
        RESET;
        SETRANGE("Liq. por Id.", IDLiq);
        IF FINDSET THEN
          REPEAT
            TESTFIELD("Nß conciliaci¢n", 0);
            importTotalMB := importTotalMB + "Importe Recibido";

            "Nß conciliaci¢n"        := numConciliacio;
            "Tipo conciliaci¢n"      := tipusConciliaci¢;
            "Autorizacion operacion" := tLinExtracto.Operacion;
            MODIFY
          UNTIL NEXT = 0;
        MODIFYALL("Liq. por Id.", '')
      END;

      //-$001IF importTotalMB <> importTotalLE THEN
      lwDiferencia := ABS(importTotalMB - importTotalLE); //+$001
      IF lwDiferencia > wMargenPermitido THEN //+$001
        ERROR(Text002);

      IF tipusConciliaci¢ <> tipusConciliaci¢::Autom†tica THEN
        MESSAGE(Text001);
    END;

    PROCEDURE Desconciliar@2(numero@1100244000 : Integer);
    BEGIN
      WITH tMovPagos DO BEGIN
        RESET;
        SETCURRENTKEY("Nß conciliaci¢n");
        SETRANGE("Nß conciliaci¢n", numero);
        IF FINDSET(TRUE) THEN
          REPEAT
            "Nß conciliaci¢n" := 0;
            "Tipo conciliaci¢n" := "Tipo conciliaci¢n"::" "; // Sense tipus
            MODIFY;
          UNTIL NEXT = 0
      END;

      WITH tLinExtracto DO BEGIN
        RESET;
        SETCURRENTKEY("Nß conciliaci¢n");
        SETRANGE("Nß conciliaci¢n", numero);
        MODIFYALL("Tipo conciliaci¢n", "Tipo conciliaci¢n"::" "); // Sense tipus
        MODIFYALL("Nß conciliaci¢n", 0);
      END;

      MESSAGE(Text003,numero);
    END;

    BEGIN
    {
      $001 AJS 10072013 Se incluye una nueva opcion para indicar un margen de diferencia que se va a permitir
                        a la hora de conciliar 2 importes, es la variable wMargenPermitido
    }
    END.
  }
}
