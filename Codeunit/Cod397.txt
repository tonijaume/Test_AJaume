OBJECT Codeunit 397 Mail
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      OApplication@1004 : Automation "{03BC4F50-2ABB-48B3-B2A6-3F08EB1D013E} 1.7:{4DD4A3AB-B2FB-4852-A2C8-7C4691C536EA}:Unknown Automation Server.Unknown Class";
      OAttachment@1005 : Automation "{03BC4F50-2ABB-48B3-B2A6-3F08EB1D013E} 1.7:{3FEDE949-33CB-4EE0-8FA2-309003459254}:Unknown Automation Server.Unknown Class";
      OAttachments@1006 : Automation "{03BC4F50-2ABB-48B3-B2A6-3F08EB1D013E} 1.7:{355ADBA4-2CE8-417A-B4F6-75A76E36C284}:Unknown Automation Server.Unknown Class";
      OSendMail@1007 : Automation "{03BC4F50-2ABB-48B3-B2A6-3F08EB1D013E} 1.7:{F3B45F48-1F4A-40C9-8DE6-5CC377BF4F82}:Unknown Automation Server.Unknown Class";
      BSTRConverterBody@1008 : Automation "{A378E78B-5DB6-45E9-B598-9ED74A7CCCE1} 1.0:{30E9A1F9-9B22-4D26-91CF-C6CC2D9BC2D9}:Unknown Automation Server.Unknown Class";
      BSTRConverterAttachFileName@1009 : Automation "{A378E78B-5DB6-45E9-B598-9ED74A7CCCE1} 1.0:{30E9A1F9-9B22-4D26-91CF-C6CC2D9BC2D9}:Unknown Automation Server.Unknown Class";
      HideDialog@1002 : Boolean;
      ErrorNo@1003 : Integer;
      Text001@1000 : TextConst 'ENU=No registered e-mail addresses found for this %1.;ESP=No se encontraron direcciones de correo electr¢nico registradas para %1.';
      MailGUIDValue@1001 : GUID;

    PROCEDURE OpenNewMessage@1(ToName@1000 : Text[80]) : Boolean;
    BEGIN
      NewMessage(ToName,'','','','',TRUE);
    END;

    PROCEDURE NewMessage@2(ToName@1001 : Text[80];CCName@1002 : Text[80];Subject@1003 : Text[260];Body@1004 : Text[260];AttachFileName@1005 : Text[260];OpenDialog@1006 : Boolean) MailSent : Boolean;
    BEGIN
      IF ISCLEAR(OApplication) THEN
        CREATE(OApplication,TRUE,TRUE);

      IF (NOT OApplication.Logon(TRUE,'','',FALSE,FALSE)) THEN BEGIN
        OApplication.Logoff;
        EXIT
      END;

      IF ISCLEAR(OSendMail) THEN
        CREATE(OSendMail,TRUE,TRUE);

      ErrorNo := 0;

      OSendMail."To" := ToName;
      OSendMail.CC := CCName;
      OSendMail.Subject := Subject;
      OSendMail.BodyFormat := 2;
      MailGUIDValue := CREATEGUID;
      OSendMail.SetUserProperty(GetMailGUIDFieldName,1,FORMAT(MailGUIDValue));

      IF ISCLEAR(BSTRConverterBody) THEN
        CREATE(BSTRConverterBody,TRUE,TRUE);

      IF Body <> '' THEN BEGIN
        BSTRConverterBody.ResetBSTR;
        BSTRConverterBody.AppendNextStringPortion(Body);
      END;
      OSendMail.Body := BSTRConverterBody;

      IF ISCLEAR(BSTRConverterAttachFileName) THEN
        CREATE(BSTRConverterAttachFileName,TRUE,TRUE);

      IF AttachFileName <> '' THEN BEGIN
        BSTRConverterAttachFileName.ResetBSTR;
        BSTRConverterAttachFileName.AppendNextStringPortion(AttachFileName);
        OAttachments := OSendMail.Attachments;
        OAttachment := OAttachments.Add(BSTRConverterAttachFileName);
      END;

      OSendMail.OpenDialog := OpenDialog;

      MailSent := OSendMail.Send;
      ErrorNo := OSendMail.ErrorStatus;
      OApplication.Logoff;
    END;

    PROCEDURE AddBodyline@5(TextLine@1000 : Text[260]) : Boolean;
    BEGIN
      IF ISCLEAR(BSTRConverterBody) THEN
        CREATE(BSTRConverterBody,TRUE,TRUE);
      IF TextLine <>'' THEN
        BSTRConverterBody.AppendNextStringPortion(TextLine);
      EXIT(TRUE);
    END;

    PROCEDURE Send@4() MailSent : Boolean;
    BEGIN
      MailSent := OSendMail.Send;
      ErrorNo := OSendMail.ErrorStatus;
    END;

    PROCEDURE GetErrorCode@6() : Integer;
    BEGIN
      EXIT(OSendMail.ErrorStatus);
    END;

    PROCEDURE GetErrorDesc@7() : Text[260];
    BEGIN
      EXIT(OSendMail.ErrorDescription);
    END;

    PROCEDURE SetDialogState@3(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    PROCEDURE CollectAddresses@9(ContactNo@1000 : Code[20];VAR ContactThrough@1002 : Record 5100;ShowAddresses@1008 : Boolean) : Text[260];
    VAR
      Contact@1003 : Record 5050;
    BEGIN
      ContactThrough.RESET;
      ContactThrough.DELETEALL;
      IF NOT Contact.GET(ContactNo) THEN
        EXIT;

      CollectContactAddresses(ContactThrough,ContactNo);

      // Get linked Company Addresses
      IF (Contact.Type = Contact.Type::Person) AND (Contact."Company No." <> '') THEN
        CollectContactAddresses(ContactThrough,Contact."Company No.");

      IF ShowAddresses THEN
        IF ContactThrough.FIND('-') THEN BEGIN
          IF FORM.RUNMODAL(FORM::"Contact Through",ContactThrough) = ACTION::LookupOK THEN
            EXIT(ContactThrough."E-Mail");
        END ELSE
          ERROR(Text001,Contact.TABLECAPTION);
    END;

    LOCAL PROCEDURE TrimCode@8(Code@1001 : Code[20]) TrimString : Text[20];
    BEGIN
      TrimString := COPYSTR(Code,1,1) + LOWERCASE(COPYSTR(Code,2,STRLEN(Code) - 1))
    END;

    PROCEDURE MailContCustVendBank@10(TableNo@1000 : Integer;No@1001 : Code[20];Email@1002 : Text[80]);
    VAR
      InteractionTmplSetup@1003 : Record 5122;
      ContBusRel@1004 : Record 5054;
      Contact@1005 : Record 5050;
      TempSegmentLine@1006 : TEMPORARY Record 5077;
      Mail@1007 : Codeunit 397;
    BEGIN
      InteractionTmplSetup.GET;

      IF InteractionTmplSetup."E-Mails" = '' THEN BEGIN
        Mail.OpenNewMessage(Email);
        EXIT;
      END;

      IF TableNo = DATABASE::Contact THEN
        Contact.GET(No)
      ELSE BEGIN
        ContBusRel.RESET;
        ContBusRel.SETCURRENTKEY("Link to Table","No.");
        CASE TableNo OF
          DATABASE::Customer:
            ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
          DATABASE::Vendor:
            ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
          DATABASE::"Bank Account":
            ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::"Bank Account");
        END;
        ContBusRel.SETRANGE("No.",No);
        IF ContBusRel.FIND('-') THEN
          Contact.GET(ContBusRel."Contact No.")
        ELSE BEGIN
          Mail.OpenNewMessage(Email);
          EXIT;
        END;
      END;

      TempSegmentLine.CreateMailFromContact(Contact,Email);
    END;

    PROCEDURE ValidateEmail@12(VAR ContactThrough@1000 : Record 5100;EMail@1001 : Text[80]) EMailExists : Boolean;
    BEGIN
      WITH ContactThrough DO BEGIN
        RESET;
        IF FIND('-') THEN BEGIN
          SETRANGE("E-Mail",EMail);
          EMailExists := FIND('-');
        END;
      END;
    END;

    PROCEDURE GetMailGUIDValue@13() : GUID;
    BEGIN
      EXIT(MailGUIDValue);
    END;

    PROCEDURE GetMailGUIDFieldName@27() : Text[30];
    BEGIN
      EXIT('Mail GUID');
    END;

    LOCAL PROCEDURE CollectContactAddresses@14(VAR ContactThrough@1000 : Record 5100;ContactNo@1001 : Code[20]);
    VAR
      Contact@1007 : Record 5050;
      ContAltAddr@1005 : Record 5051;
      ContAltAddrDateRange@1004 : Record 5052;
      KeyNo@1002 : Integer;
    BEGIN
      IF NOT Contact.GET(ContactNo) THEN
        EXIT;
      WITH ContactThrough DO BEGIN
        IF FINDLAST THEN
          KeyNo := Key + 1
        ELSE
          KeyNo := 1;

        IF Contact."E-Mail" <> '' THEN BEGIN
          Key := KeyNo;
          "Contact No." := ContactNo;
          Name := Contact.Name;
          Description := COPYSTR(Contact.FIELDCAPTION("E-Mail"),1,MAXSTRLEN(Description));
          "E-Mail" := Contact."E-Mail";
          Type := Contact.Type;
          INSERT;
          KeyNo := KeyNo + 1;
        END;

        // Alternative address
        ContAltAddrDateRange.SETCURRENTKEY("Contact No.","Starting Date");
        ContAltAddrDateRange.SETRANGE("Contact No.", ContactNo);
        ContAltAddrDateRange.SETRANGE("Starting Date",0D,TODAY);
        ContAltAddrDateRange.SETFILTER("Ending Date",'>=%1|%2',TODAY,0D);
        IF ContAltAddrDateRange.FINDSET THEN
          REPEAT
            IF ContAltAddr.GET(Contact."No.",ContAltAddrDateRange."Contact Alt. Address Code") THEN
              IF ContAltAddr."E-Mail" <> '' THEN BEGIN
                Key := KeyNo;
                Description := TrimCode(ContAltAddr.Code) + ' - ' + ContAltAddr.FIELDCAPTION("E-Mail");
                "E-Mail" := ContAltAddr."E-Mail";
                Type := Contact.Type;
                INSERT;
                KeyNo := KeyNo + 1;
              END;
          UNTIL ContAltAddrDateRange.NEXT = 0;
      END;
    END;

    PROCEDURE FindMailGUID@23(VAR CDOQueueMessage@1002 : Automation "{3FA7DEA7-6438-101B-ACC1-00AA00423326} 1.33:{3FA7DEAA-6438-101B-ACC1-00AA00423326}:Unknown Automation Server.Unknown Class";VAR MailGUID@1000 : GUID);
    VAR
      CDOFields@1007 : Automation "{3FA7DEA7-6438-101B-ACC1-00AA00423326} 1.33:{000662A0-68DC-101B-ACC1-00AA00423326}:Unknown Automation Server.Unknown Class";
      CDOField@1006 : Automation "{3FA7DEA7-6438-101B-ACC1-00AA00423326} 1.33:{3FA7DEB0-6438-101B-ACC1-00AA00423326}:Unknown Automation Server.Unknown Class";
      FieldCount@1005 : Integer;
      FieldNumber@1004 : Integer;
      FieldFound@1003 : Boolean;
      FieldName@1001 : Text[30];
    BEGIN
      CDOFields := CDOQueueMessage.Fields;
      EVALUATE(FieldCount,FORMAT(CDOFields.Count));
      FieldName := GetMailGUIDFieldName;
      WHILE NOT FieldFound AND (FieldNumber < FieldCount) DO BEGIN
        FieldNumber := FieldNumber + 1;
        CDOField := CDOFields.Item(FieldNumber);
        IF FORMAT(CDOField.Name) = FieldName THEN BEGIN
          MailGUID := FORMAT(CDOField.Value);
          IF NOT ISNULLGUID(MailGUID) THEN
            FieldFound := TRUE;
        END;
      END;
    END;

    BEGIN
    END.
  }
}
