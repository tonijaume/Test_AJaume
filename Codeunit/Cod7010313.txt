OBJECT Codeunit 7010313 Rutinas Conductores
{
  OBJECT-PROPERTIES
  {
    Date=26/01/15;
    Time=11:44:40;
    Modified=Yes;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1100244003 : TextConst 'ESP=ZZ';
      Text001@1100244004 : TextConst 'ESP=Z';
      Text002@1100244005 : TextConst 'ESP=G+N';
      Text003@1100244006 : TextConst 'ESP=G+TA+N';
      Text004@1100244007 : TextConst 'ESP=G+TA+A+N';
      Text005@1100244008 : TextConst 'ESP=G+GR+TA+A+N';
      Text006@1100244009 : TextConst 'ESP=COPIANDO CONDICIONES VARIABLES\';
      err1@1100244000 : TextConst 'ESP=No se realiz¢ ninguna copia al estar las fechas destino en blanco';
      err2@1100244001 : TextConst 'ESP=Las Fechas Desde Origen y Destino no pueden ser iguales';
      err3@1100244002 : TextConst 'ESP=Las Fechas Hasta Origen y Destino no pueden ser iguales';
      rPar@1103350000 : Record 7010311;

    PROCEDURE CalcularDatosContrato@1(pConductor@1100244000 : Code[10];VAR vTipoContrato@1100244001 : Code[10];VAR vTipoAcuerdo@1100244002 : Code[10];VAR vFechaAlta@1100244003 : Date;VAR vFechaBaja@1100244004 : Date;VAR vNumOrden@1100244005 : Integer;VAR vStatus@1100244006 : Integer;pID@1100244007 : Integer);
    VAR
      rH@1100244008 : Record 7010331;
      rTC@1100244009 : Record 7010328;
      vOldStatus@1100244010 : Integer;
    BEGIN
      // CalcularDatosContrato
      //
      // C lculo de los datos del contrato vigente o del m s pr¢ximo.

      //Inicios.
      vFechaAlta   := 0D;
      vFechaBaja   := 0D;
      vTipoContrato:= '';
      vTipoAcuerdo := '';
      vNumOrden    := 0;
      vStatus := 4;

      rH.SETCURRENTKEY(Conductor,"Fecha Alta");
      rH.SETRANGE(Conductor,pConductor);
      rH.SETRANGE(Confirmado,TRUE);
      IF pID > 0 THEN
        rH.SETFILTER(ID,'<> %1',pID);

      IF rH.FINDSET THEN REPEAT

        vOldStatus := vStatus;

        //Contrato ya pasado (4 grado optimo, preferiblemente el m s cercano (>2))
        IF (vStatus > 2) AND (TODAY > rH."Fecha Baja") AND (rH."Fecha Alta" > vFechaAlta) THEN BEGIN
          vOldStatus := 4;
          vStatus    := 3;
        END
        ELSE
          //Contrato en vigor (el ¢ptimo)
          IF (TODAY >= rH."Fecha Alta") AND (TODAY <= rH."Fecha Baja") THEN
            vStatus := 0
          ELSE
            //Contrato posiblemente en vigor (el 2 ¢ptimo)
            IF (vStatus > 1) AND (TODAY >= rH."Fecha Alta") AND (rH."Fecha Baja" = 0D) THEN
              vStatus := 1
            ELSE
              //Contrato futuro (3 grado optimo, preferiblemente el m s cercano (>2) )
              IF ( vStatus > 2) AND (TODAY < rH."Fecha Alta") THEN
                vStatus := 2;

        //Si ha habido un cambio de estado (mejora) lo registramos)
        IF vOldStatus <> vStatus THEN BEGIN
          vFechaAlta    :=rH."Fecha Alta";
          vFechaBaja    :=rH."Fecha Baja";
          vTipoContrato :=rH."Tipo Contrato";
          vTipoAcuerdo  :=rH."Tipo Acuerdo";
          IF rTC.GET(vTipoContrato) THEN
            vNumOrden := rTC.Orden;
        END;

      UNTIL (rH.NEXT = 0) OR ( vStatus = 0) OR (vStatus = 1) OR (vStatus = 2);
    END;

    PROCEDURE InterseccionFechas@2(a1@1100244000 : Date;a2@1100244001 : Date;b1@1100244002 : Date;b2@1100244003 : Date) : Boolean;
    VAR
      Result@1100244004 : Boolean;
    BEGIN
      // InteraseccionFechas
      //
      // Funci¢n de prop¢sito general, para averiguar si entre dos intervalos de fechas hay
      // o no intersecci¢n.

      IniciarValor(a1,0);
      IniciarValor(a2,1);
      IniciarValor(b1,0);
      IniciarValor(b2,1);
      Result := FALSE;

      // Condicion para detectar la interseccion.
      //    a1--------a2                   a1---------a2
      //         b1--------b2        b1--------b2

      IF ( (a1 >= b1) AND (a1 <= b2) ) OR ( (a2 >= b1) AND (a2 <= b2) ) OR
         ( (b1 >= a1) AND (b1 <= a2) ) OR ( (b2 >= a1) AND (b2 <= a2) ) THEN
        Result := TRUE;

      EXIT(Result);
    END;

    PROCEDURE IniciarValor@3(VAR vValor@1100244000 : Date;Tipo@1100244001 : Integer);
    BEGIN
      // IniciarValor
      //
      // Para simplificar del algoritmo de intersecci¢n, si las variables tipo fecha, llegan con valor
      // OD, mediante el parametro Tipo decidiremos si le ponemos un valor m¡nimo, o un valor m ximo.

      IF vValor=0D THEN
         IF Tipo=0 THEN
            vValor := 01011900D
         ELSE
            vValor := 31129999D;
    END;

    PROCEDURE ObtenerDatosConductor@5(pConductor@1100244000 : Code[10];VAR vNombreAbr@1100244001 : Code[20];VAR vNombre@1100244002 : Text[30];VAR vApellidos@1100244003 : Text[30]);
    VAR
      rCond@1100244004 : Record 7010327;
    BEGIN
      // ObtenerDatosConductor()
      //
      // Dado el c¢digo del conductor, queremos obtener el nombre,apellidos,nombre abreviado.
      vNombreAbr   :='';
      vNombre   :='';
      vApellidos:='';

      IF rCond.GET(pConductor) THEN BEGIN
        vNombreAbr:=rCond."Nombre Abreviado";
        vNombre   :=rCond.Nombre;
        vApellidos:=rCond.Apellidos;
      END;
    END;

    PROCEDURE InterseccionHoras@4(a1@1100244000 : Date;a2@1100244001 : Date;b1@1100244002 : Date;b2@1100244003 : Date;ha1@1100244004 : Time;ha2@1100244005 : Time;hb1@1100244006 : Time;hb2@1100244007 : Time) : Boolean;
    VAR
      Result@1100244008 : Boolean;
      vha1@1100244009 : Decimal;
      vha2@1100244010 : Decimal;
      vhb1@1100244011 : Decimal;
      vhb2@1100244012 : Decimal;
    BEGIN
      // InteraseccionHoras
      //
      // Funci¢n de prop¢sito general, para averiguar si entre dos intervalos de fechas+Horas hay
      // o no intersecci¢n.

      // AJS 15.07.2005
      // Solo para Ultramar, si la hora de final es anterior a la hora de inicio hay que hacer que la fecha de fin sea
      // la del dia siguiente

      rPar.FINDFIRST;
      CASE rPar."Empresa Real" OF
        rPar."Empresa Real"::UEX:
        BEGIN
          IF ha1 > ha2 THEN BEGIN
            a2 := a2 + 1;
            b2 := b2 + 1;
          END;
        END;
      END;

      IniciarValor(a1,0);
      IniciarValor(a2,1);
      IniciarValor(b1,0);
      IniciarValor(b2,1);
      Result := FALSE;

      // Condicion para detectar la interseccion.
      //    a1--------a2                   a1---------a2
      //         b1--------b2        b1--------b2

      IF ( (a1 >= b1) AND (a1 <= b2) ) OR ( (a2 >= b1) AND (a2 <= b2) ) OR
         ( (b1 >= a1) AND (b1 <= a2) ) OR ( (b2 >= a1) AND (b2 <= a2) ) THEN BEGIN

        vha1 := Convertir(a1,ha1);
        vha2 := Convertir(a2,ha2);
        vhb1 := Convertir(b1,hb1);
        vhb2 := Convertir(b2,hb2);

        IF ( (vha1 >= vhb1) AND (vha1 <= vhb2) ) OR ( (vha2 >= vhb1) AND (vha2 <= vhb2) ) OR
           ( (vhb1 >= vha1) AND (vhb1 <= vha2) ) OR ( (vhb2 >= vha1) AND (vhb2 <= vha2) ) THEN
          Result := TRUE;

      END;

      EXIT(Result);
    END;

    PROCEDURE DatosUltimoContrato@6(pConductor@1100244000 : Code[10];VAR vTipoContrato@1100244001 : Text[10];VAR vConvenio@1100244002 : Text[10];VAR vFechaAlta@1100244003 : Date;VAR vFechaBaja@1100244004 : Date);
    VAR
      rHist@1100244005 : Record 7010331;
    BEGIN
      // DatosUltimoContrato
      //
      vFechaAlta   := 0D;
      vFechaBaja   := 0D;
      vTipoContrato:='';
      vConvenio    :='';


      rHist.RESET;
      rHist.SETCURRENTKEY(Conductor,"Fecha Alta");
      rHist.SETRANGE(Conductor,pConductor);
      rHist.SETFILTER("Fecha Alta",'<=%1',TODAY);
      IF rHist.FINDFIRST THEN BEGIN
         vFechaAlta   := rHist."Fecha Alta";
         vFechaBaja   := rHist."Fecha Baja";
         vTipoContrato:= rHist."Tipo Contrato";
         vConvenio    := rHist."Tipo Acuerdo";
      END;
    END;

    PROCEDURE Convertir@7(pFecha@1100244000 : Date;pHora@1100244001 : Time) : Decimal;
    VAR
      vMes@1100244002 : Decimal;
      vA¤o@1100244003 : Decimal;
      vDia@1100244004 : Decimal;
      Result@1100244005 : Decimal;
      vHora@1100244006 : Decimal;
      vStr@1100244007 : Text[12];
    BEGIN
      //Convertir(pFecha,pHora);

      vA¤o:=DATE2DMY(pFecha,3);
      vMes:=DATE2DMY(pFecha,2);
      vDia:=DATE2DMY(pFecha,1);
      vHora:= ROUND( (pHora - 000000T) / 3600000,0.01);
      vHora:= vHora * 100;

      vStr := FORMAT(vA¤o,4,4);
      vStr := vStr + CONVERTSTR(FORMAT(vMes,2),' ','0');
      vStr := vStr + CONVERTSTR(FORMAT(vDia,2),' ','0');

      IF vHora < 1000 THEN
        vStr := vStr + CONVERTSTR(FORMAT(vHora,4),' ','0')
      ELSE
        vStr := vStr + CONVERTSTR(FORMAT(vHora,4,4),' ','0');

      EVALUATE(Result,vStr);
      EXIT(Result);
    END;

    PROCEDURE ObtenerFiltroConductor@8(VAR vConductor@1100244000 : Code[20];pGaraje@1100244001 : Code[10]) : Boolean;
    VAR
      rCond@1100244002 : Record 7010327;
      AuxConductor@1100244003 : Code[20];
      vEncontrado@1100244004 : Boolean;
    BEGIN
      //ObtenerFiltroConductor(AuxConductor,AuxGaraje)
      //Se utiliza, cuando se utiliza un FlowFilter para Conductor. Es un intento de simulaci¢n
      //del funcionamiento normal del campo Conductor, con la busqueda por Nombre Abreviado.
      //La restricci¢n de este FlowFilter est  en que s¢lo sirve para que se introduzca un conductor.
      //De todas maneras como est  definido como Code10,....

      IF vConductor<>'' THEN BEGIN
        IF STRLEN(vConductor) <= 18 THEN
          AuxConductor:=vConductor+Text000
        ELSE BEGIN
          IF STRLEN(vConductor)=19 THEN
            AuxConductor:=vConductor+Text001
          ELSE
            AuxConductor:=vConductor;
        END;

        rCond.RESET;
        rCond.SETCURRENTKEY("Nombre Abreviado",Garaje);
        rCond.SETFILTER("Nombre Abreviado",'>=%1 & <=%2',vConductor,AuxConductor);
        IF pGaraje<>'' THEN
          rCond.SETRANGE(Garaje,pGaraje);

        IF rCond.FINDFIRST THEN BEGIN
          vConductor:=rCond."Nombre Abreviado";
          EXIT(TRUE);
        END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE BorrarAsociacionPartes@9(pFecha@1100244000 : Date;pConductor@1100244001 : Code[10]);
    VAR
      lrParte@1100244002 : Record 7010360;
      lrParte2@1000000000 : Record 7010360;
    BEGIN
      //Borramos las marcas de fecha conductor que correspondan al d¡a.
      lrParte.RESET;
      lrParte.SETCURRENTKEY(Fecha,
                           "Cod Conductor",
                           "Dia siguiente",
                           "Hora inicio");
      lrParte.SETRANGE (Fecha            , pFecha-1, pFecha+1);
      lrParte.SETRANGE ("Cod Conductor"  , pConductor);
      lrParte.SETFILTER("Fecha conductor", '%1', pFecha);
      IF lrParte.FINDSET(TRUE) THEN
        REPEAT //+$001
          lrParte2 := lrParte;
          lrParte2."Fecha conductor" := 0D;
          lrParte2.MODIFY;
        UNTIL lrParte.NEXT = 0;
    END;

    PROCEDURE CambioRegistroActividad@10(pValor@1100244000 : Boolean);
    VAR
      rCT@1100244001 : Record 7010420;
    BEGIN
      //CambioRegistroActividad(pValor);
      //Lo usamos para saber si debemos refrescar la pantalla gr fica.

      rCT.RESET;
      IF NOT rCT.GET(USERID) THEN
      BEGIN
        rCT.INIT;
        rCT.Usuario := USERID;
        rCT.INSERT(TRUE);
      END;

      IF rCT."Cambio Registro Actividad" <> pValor THEN
      BEGIN
        rCT."Cambio Registro Actividad" := pValor;
        rCT.MODIFY(TRUE);
      END;
    END;

    PROCEDURE TestSolapePeriodo@11(rPeriodo@1100244000 : Record 7010338;VAR vPeriodoSolape@1100244001 : Text[40]) : Boolean;
    VAR
      vAuxFechaFin@1100244002 : Date;
      vFechaFin@1100244003 : Date;
      rAuxPeriodo@1100244004 : Record 7010338;
    BEGIN
      //TestSolapePeriodo(rPeriodo,vPeriodoSolape);

      // AJS 15.07.2005
      // Ultramar trabaja con cada dia de manera aislada, no se pueden solapar periodos de dias distintos.

      rPar.FINDFIRST;
      IF rPar."Empresa Real" = rPar."Empresa Real"::UEX THEN
        EXIT(FALSE);

      //Revisamos que el registro que pasamos por parametro no solape con algun otro periodo de
      //otro registro de actividad.

      vPeriodoSolape := '';

      IF rPeriodo."Hora Inicio" <= rPeriodo."Hora Fin" THEN
        vFechaFin := rPeriodo."Fecha Real"
      ELSE BEGIN
        // AJS 15.07.2005
        // Ultramar solo trabaja con los partes del dia ya que para los madrugones utiliza el concepto del dia
        // siguiente

        rPar.FIND('-');
        CASE rPar."Empresa Real" OF
          rPar."Empresa Real"::UEX:
          BEGIN
            vFechaFin := rPeriodo."Fecha Real";
          END
          ELSE BEGIN
            vFechaFin := rPeriodo."Fecha Real" + 1;
          END;
        END;
      END;

      //Hacemos una validaci¢n para que no haya solapamiento con otros periodos ya validados.
      //Realizaremos la validaci¢n con 2 d¡as de margen por detras y 2 por delante para estar
      //bien seguros.
      rAuxPeriodo.RESET;
      rAuxPeriodo.SETCURRENTKEY(Conductor,"Fecha Real","Hora Inicio");
      rAuxPeriodo.SETRANGE(Conductor,rPeriodo.Conductor);
      rAuxPeriodo.SETRANGE("Fecha Real",rPeriodo."Fecha Real" - 2, rPeriodo."Fecha Real" + 2);
      rAuxPeriodo.SETFILTER(Fecha,'<>%1',rPeriodo.Fecha);
      rAuxPeriodo.SETRANGE(Validado,TRUE);

      IF rAuxPeriodo.FINDSET THEN REPEAT

        IF rAuxPeriodo."Hora Inicio" <= rAuxPeriodo."Hora Fin" THEN
          vAuxFechaFin := rAuxPeriodo."Fecha Real"
        ELSE
          vAuxFechaFin := rAuxPeriodo."Fecha Real" + 1;

        IF InterseccionHoras(rPeriodo."Fecha Real",vFechaFin,rAuxPeriodo."Fecha Real",
                             vAuxFechaFin,rPeriodo."Hora Inicio",rPeriodo."Hora Fin",
                             rAuxPeriodo."Hora Inicio",rAuxPeriodo."Hora Fin") THEN BEGIN

          //Hay Solape.
          vPeriodoSolape := '<'+FORMAT(rAuxPeriodo.Fecha)+'> '+FORMAT(rAuxPeriodo."Fecha Real")+' '+
                            FORMAT(rAuxPeriodo."Hora Inicio",5)+'-'+FORMAT(rAuxPeriodo."Hora Fin",5);

          EXIT(TRUE);
        END;

      UNTIL rAuxPeriodo.NEXT = 0;

      EXIT(FALSE);
    END;

    PROCEDURE TestSolapePeriodosHermanos@12(rPeriodo@1100244000 : Record 7010338;VAR vPeriodoSolape@1100244001 : Text[40]) : Boolean;
    VAR
      vAuxFechaFin@1100244002 : Date;
      vFechaFin@1100244003 : Date;
      rAuxPeriodo@1100244004 : Record 7010338;
    BEGIN
      //HaySolape(rPeriodo);

      //Revisamos que el registro que pasamos por parametro no solape con alg£n otro.

      vPeriodoSolape:='';

      IF rPeriodo."Hora Inicio" <= rPeriodo."Hora Fin" THEN
        vFechaFin := rPeriodo."Fecha Real"
      ELSE BEGIN
        // AJS 15.07.2005
        // Ultramar solo trabaja con los partes del dia ya que para los madrugones utiliza el concepto del dia
        // siguiente

        rPar.FINDFIRST;
        CASE rPar."Empresa Real" OF
          rPar."Empresa Real"::UEX:
          BEGIN
            vFechaFin := rPeriodo."Fecha Real";
          END
          ELSE BEGIN
            vFechaFin := rPeriodo."Fecha Real" + 1;
          END;
        END
      END;

      //Validaci¢n con los otros registros que son hijos del mismo registro de actividad.
      rAuxPeriodo.RESET;
      rAuxPeriodo.SETCURRENTKEY(Conductor,Fecha,"Fecha Real","Hora Inicio");
      rAuxPeriodo.SETRANGE(Conductor,rPeriodo.Conductor);
      rAuxPeriodo.SETRANGE(Fecha,rPeriodo.Fecha);
      rAuxPeriodo.SETFILTER("N§ Linea",'<> %1',rPeriodo."N§ Linea");

      IF rAuxPeriodo.FINDSET THEN REPEAT

        IF rAuxPeriodo."Hora Inicio" <= rAuxPeriodo."Hora Fin" THEN
          vAuxFechaFin := rAuxPeriodo."Fecha Real"
        ELSE
          vAuxFechaFin := rAuxPeriodo."Fecha Real" + 1;

        IF InterseccionHoras(rPeriodo."Fecha Real",vFechaFin,rAuxPeriodo."Fecha Real",
                                   vAuxFechaFin,rPeriodo."Hora Inicio",rPeriodo."Hora Fin",
                                   rAuxPeriodo."Hora Inicio",rAuxPeriodo."Hora Fin") THEN BEGIN

          //Hemos visto un solape.
          vPeriodoSolape := '<'+FORMAT(rAuxPeriodo.Fecha)+'> '+FORMAT(rAuxPeriodo."Fecha Real")+' '+
                            FORMAT(rAuxPeriodo."Hora Inicio",5)+'-'+FORMAT(rAuxPeriodo."Hora Fin",5);
          EXIT(TRUE);
        END;
      UNTIL rAuxPeriodo.NEXT = 0;

      EXIT(FALSE);
    END;

    PROCEDURE CreaRegistroError@14(pMensaje@1100244000 : Text[60];pConductor@1100244001 : Code[10];pNomAbr@1100244002 : Code[20];pParte@1100244003 : Code[10];pFecParte@1100244004 : Date;pFecActividad@1100244005 : Date;pPeriodoSolape@1100244006 : Text[40];pError@1100244007 : Boolean);
    VAR
      rError@1100244008 : Record 7010341;
    BEGIN
      //CreaRegistroError.
      rError.INIT;
      rError.Mensaje            := pMensaje;
      rError.Conductor          := pConductor;
      rError."Nombre Abreviado" := pNomAbr;
      rError."N§ Parte"         := pParte;
      rError."Fecha Parte"      := pFecParte;
      rError."Fecha Actividad"  := pFecActividad;
      rError."Periodo Solape"   := pPeriodoSolape;
      rError.Error              := pError;

      rError.Fecha              := TODAY;
      rError.Hora               := TIME;
      rError.Usuario            := USERID;
      rError.INSERT(TRUE);
    END;

    PROCEDURE BorraRegError@13(pConductor@1100244000 : Code[10];pFecha@1100244001 : Date);
    VAR
      rErr@1100244002 : Record 7010341;
    BEGIN
      //BorraRegError(pConductor)
      rErr.RESET;
      rErr.SETCURRENTKEY(Conductor, "Fecha Actividad");
      rErr.SETRANGE(Conductor        , pConductor);
      rErr.SETRANGE("Fecha Actividad", pFecha);
      IF rErr.FINDSET(TRUE) THEN
        rErr.DELETEALL;
    END;

    PROCEDURE TestContiguidad@15(rP@1100244000 : Record 7010338;VAR vPeriodoSolape@1100244001 : Text[40]) : Boolean;
    VAR
      rP2@1100244002 : Record 7010338;
    BEGIN
      //TestContiguidad.

      //... Buscamos fecha actividad anterior con periodo cronologicamente posterior
      //... al actual.
      rP2.RESET;
      rP2.SETCURRENTKEY(Conductor,Fecha,"Fecha Real","Hora Inicio");
      rP2.SETRANGE(Conductor,rP.Conductor);
      rP2.SETRANGE(Fecha,rP.Fecha -2,rP.Fecha-1);
      rP2.SETRANGE(Validado,TRUE);
      rP2.SETFILTER("Fecha Real",'>= %1',rP."Fecha Real");
      rP2.SETFILTER("Hora Inicio",'>= %1',rP."Hora Inicio");
      IF rP2.FINDFIRST THEN BEGIN
        vPeriodoSolape := '<'+FORMAT(rP2.Fecha)+'> '+FORMAT(rP2."Fecha Real")+' '+
                          FORMAT(rP2."Hora Inicio",5)+'-'+FORMAT(rP2."Hora Fin",5);
        EXIT(FALSE);
      END;

      //... Buscamos fecha actividad posterior con periodo cronologicamente anterior
      //... al actual.
      rP2.RESET;
      rP2.SETCURRENTKEY(Conductor,Fecha,"Fecha Real","Hora Inicio");
      rP2.SETRANGE(Conductor,rP.Conductor);
      rP2.SETRANGE(Fecha,rP.Fecha +1,rP.Fecha+2);
      rP2.SETRANGE(Validado,TRUE);
      rP2.SETFILTER("Fecha Real",'<= %1',rP."Fecha Real");
      rP2.SETFILTER("Hora Inicio",'<= %1',rP."Hora Inicio");
      IF rP2.FINDFIRST THEN BEGIN
        vPeriodoSolape := '<'+FORMAT(rP2.Fecha)+'> '+FORMAT(rP2."Fecha Real")+' '+
                          FORMAT(rP2."Hora Inicio",5)+'-'+FORMAT(rP2."Hora Fin",5);
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE DesvalidarPeriodos@16(pConductor@1100244000 : Code[10];pFecha@1100244001 : Date);
    VAR
      lrPeriodo@1100244002 : Record 7010338;
      lrPeriodo2@1000000000 : Record 7010338;
    BEGIN
      //Desvalidar_Periodos();
      //Paralelamente tambien desvalidaremos todos los periodos correspondientes al mismo registro
      //de actividad.

      lrPeriodo.RESET;
      lrPeriodo.SETCURRENTKEY(Conductor, Fecha);
      lrPeriodo.SETRANGE(Conductor, pConductor);
      lrPeriodo.SETRANGE(Fecha    , pFecha);
      lrPeriodo.SETRANGE(Validado , TRUE);
      IF lrPeriodo.FINDSET(TRUE) THEN
        REPEAT //+$001
          lrPeriodo2 := lrPeriodo;
          lrPeriodo2.Validado := FALSE;
          lrPeriodo2.MODIFY;
        UNTIL lrPeriodo.NEXT = 0;
    END;

    PROCEDURE DesvalidarActividad@18(pConductor@1100244000 : Code[10];pFecha@1100244001 : Date) : Boolean;
    VAR
      rRA@1100244002 : Record 7010332;
    BEGIN
      //DesvalidarActividad()

      //Si modificamos los periodos, borraremos la marca de Calculo Realizado de la tabla
      //Periodos Trabajados. Eso nos dir  que los periodos trabajados para un d¡a/conductor son
      //sensibles de estar mal.

      rRA.RESET;
      rRA.SETCURRENTKEY(Conductor, Fecha);
      rRA.SETRANGE(Conductor, pConductor);
      rRA.SETRANGE(Fecha    , pFecha);
      IF rRA.FINDSET(TRUE) THEN
      BEGIN
        IF rRA.Validado THEN
        BEGIN
          rRA.Validado := FALSE;
          rRA.MODIFY;
          EXIT(TRUE);
        END;
      END;

      EXIT(FALSE);
    END;

    PROCEDURE ObtenerOrden@17() : Text[20];
    VAR
      rUser@1100244000 : Record 7010420;
      rPar@1100244001 : Record 7010311;
    BEGIN
      //ObtenerOrden.
      //[Ninguno],
      //Garaje+Nombre
      //Garaje+Tipo Acuerdo+Nombre
      //Garaje+Tipo Acuerdo+Antiguedad+Nombre
      //Garaje+Grupo+Tipo Acuerdo+Antiguedad+Nombre

      IF rUser.GET(USERID) THEN
        IF rUser."Orden en Conductores" <> rUser."Orden en Conductores"::Ninguno THEN
          CASE rUser."Orden en Conductores" OF
            1: EXIT(Text002);
            2: EXIT(Text003);
            3: EXIT(Text004);
            4: EXIT(Text005);
          END;

      rPar.FINDFIRST;
      CASE rPar."Orden Conductores" OF
        0: EXIT(Text002);
        1: EXIT(Text003);
        2: EXIT(Text004);
        3: EXIT(Text005);
      END;
    END;

    PROCEDURE copiar_condiciones@19(prCodVar@1100244000 : Record 7010330);
    VAR
      lrCond@1100244001 : Record 7010420;
      lrCondVar@1100244002 : Record 7010330;
      lrCondVar_destino@1100244003 : Record 7010330;
      lrZonCondOrg@1103350001 : Record 7010396;
      lrZonCondDest@1103350002 : Record 7010396;
      lfCondiciones@1100244004 : Form 7035356;
      ventana@1100244005 : Dialog;
      lw_actual@1100244006 : Integer;
      lwIncre@1103350000 : Decimal;
    BEGIN
      // copiar_condiciones
      //

      // ----  Utilizar el fichero de condiciones variables para pedir parametros al usuario  ----

      lrCond.RESET;
      IF NOT lrCond.GET(USERID) THEN BEGIN
        lrCond.Usuario := USERID;
        lrCond.INSERT;
      END;

      lrCond.LimpiaRegistro;
      lrCond."Fecha desde" := prCodVar."Fecha desde";
      lrCond."Fecha hasta" := prCodVar."Fecha hasta";
      IF prCodVar."Asociado a" = prCodVar."Asociado a"::"Tipo Acuerdo" THEN
        lrCond."Tipo acuerdo" := prCodVar.Valor
      ELSE
        lrCond.Conductor := prCodVar.Valor;
      lrCond.MODIFY;
      COMMIT;

      // ----  Llamar a una ventana para pedir los datos al usuario, si las fechas de destino  ----
      // ----  estan en blanco hay que abandonar el proceso y lo mismo si coinciden con las    ----
      // ----  de origen                                                                       ----

      lrCond.SETRECFILTER;
      CLEAR(lfCondiciones);
      lfCondiciones.SETTABLEVIEW(lrCond);
      IF lfCondiciones.RUNMODAL <> ACTION::OK THEN
        EXIT;
      lfCondiciones.GETRECORD(lrCond);

      lrCond.TESTFIELD ("Fecha desde");
      lrCond.TESTFIELD ("Fecha hasta");
      IF lrCond."Garaje Grafico" = '' THEN BEGIN // Si no se va modificar el garaje de destino

        IF (lrCond."Fecha desde destino" = 0D) OR (lrCond."Fecha hasta destino" = 0D) THEN
          ERROR(err1);

        IF lrCond."Fecha desde destino" = lrCond."Fecha desde" THEN
          ERROR(err2);

        IF lrCond."Fecha hasta destino" = lrCond."Fecha hasta" THEN
          ERROR(err3);
      END;

      // ----  Establecemos filtros sobre el registro de condiciones variables para hacer el  ----
      // ----  recorrido y la copia a las nuevas fechas, solo se copian las confirmadas       ----

      lrCondVar.RESET;
      lrCondVar.SETRANGE("Fecha desde", lrCond."Fecha desde");
      lrCondVar.SETRANGE("Fecha hasta", lrCond."Fecha hasta");
      IF lrCond.Garaje <> '' THEN
        lrCondVar.SETRANGE(Garaje, lrCond.Garaje);
      IF lrCond."Tipo acuerdo" <> '' THEN
        lrCondVar.SETRANGE(Valor, lrCond."Tipo acuerdo");

      // ----  AJS 7.12.2001  ----
      // ----  Se tiene que filtrar por conductor solo cuando asi venga rellenado en condiciones  ----

      IF lrCond.Conductor <> '' THEN
        lrCondVar.SETRANGE(Valor, lrCond.Conductor);

      // ----  FIN AJS 7.12.2001  ----

      lrCondVar.SETRANGE(Confirmado, TRUE);
      IF lrCondVar.FINDSET THEN BEGIN
        ventana.OPEN(Text006 +
                     '\' +
                     '#1#####                #2#####');
        lw_actual := 0;
        ventana.UPDATE(2, lrCondVar.COUNT);
        REPEAT
          lw_actual += 1;
          ventana .UPDATE(1, lw_actual);

          // ----  Hacer el insert true para que numere la condicion variable y luego tengo que  ----
          // ----  asignar los campos uno a uno                                                  ----

          CLEAR(lrCondVar_destino);
          lrCondVar_destino.INSERT(TRUE);
          WITH lrCondVar_destino DO BEGIN
            Descripcion         := lrCondVar.Descripcion;
            IF lrCond."Fecha desde destino" <> 0D THEN
              "Fecha desde"     := lrCond."Fecha desde destino"
            ELSE
              "Fecha desde"     := lrCondVar."Fecha desde";
            IF lrCond."Fecha hasta destino" <> 0D THEN
              "Fecha hasta"     := lrCond."Fecha hasta destino"
            ELSE
              "Fecha hasta"     := lrCondVar."Fecha hasta";
            "Cod. Divisa"       := lrCondVar."Cod. Divisa";
            lwIncre := ROUND(lrCondVar.Precio /100 * lrCond."% Variacion");
            VALIDATE(Precio     , lrCondVar.Precio + lwIncre);
            // JPT 25/08/04 ya que incrementamos hacemos que el precio DL se calcule solo
            // "Precio (DL)"       := lrCondVar."Precio (DL)";
            "Concepto variable" := lrCondVar."Concepto variable";
            "Asociado a"        := lrCondVar."Asociado a";

            // ----  AJS 19.12.2001  ----
            // ----  A¤adir un tipo servicio destino a la copia  ----

            IF ("Asociado a" = "Asociado a"::"Tipo Acuerdo") AND (lrCond."Tipo acuerdo destino" <> '') THEN
              Valor := lrCond."Tipo acuerdo destino"
            ELSE
              Valor := lrCondVar.Valor;

           // ----  FIN AJS 19.12.2001  ----

            IF lrCond."Garaje Grafico" <> '' THEN
              Garaje            := lrCond."Garaje Grafico"
            ELSE
              Garaje            := lrCondVar.Garaje;

            "Tipo Vehiculo"     := lrCondVar."Tipo Vehiculo";
            "Tipo Servicio"     := lrCondVar."Tipo Servicio";
            "C¢digo Servicio"   := lrCondVar."C¢digo Servicio";
            "Rango M¡nimo"      := lrCondVar."Rango M¡nimo";
            "Rango M ximo"      := lrCondVar."Rango M ximo";
            "Zona fisica"       := lrCondVar."Zona fisica";
            Conductor           := lrCondVar.Conductor;
            Confirmado          := FALSE;
            "Zona Independiente":= lrCondVar."Zona Independiente";
            MODIFY(TRUE);
          END;

          // Copia las zonas x condicion
          CLEAR(lrZonCondOrg);
          CLEAR(lrZonCondDest);
          lrZonCondOrg.SETRANGE(Condicion, lrCondVar."N§");
          IF lrZonCondOrg.FINDSET THEN BEGIN
            REPEAT
              lrZonCondDest := lrZonCondOrg;
              lrZonCondDest.Condicion := lrCondVar_destino."N§";
              lrZonCondDest.INSERT(TRUE);
            UNTIL lrZonCondOrg.NEXT=0;
          END;
        UNTIL lrCondVar.NEXT = 0;
        ventana.CLOSE;
      END;
    END;

    PROCEDURE ActTemporalCalculo@20(pConductor@1100244000 : Code[10];pFecha@1100244001 : Date;pModo@1100244002 : Integer) : Integer;
    VAR
      rCond@1100244003 : Record 7010327;
      rParte@1100244004 : Record 7010360;
      rTParte@1100244006 : Record 7010343;
      SIN_PARTE_ASOCIADO@1100244007 : TextConst 'ESP=No se ha encontrado el parte %1 en la tabla Partes';
      BAD_HORA_INICIO@1100244008 : TextConst 'ESP=No se ha puesto la hora de inicio';
      vAuxParte@1100244009 : Code[10];
    BEGIN
      //ActTemporalCalculo(pConductor,pFecha);
      //pModo = 0 -> Si es invocado desde la generaci¢n de actividad: Creaci¢n de periodos.
      //pModo = 1 -> Si es invocado desde la funci¢n de ligar Partes.
      //..............
      //Devuelve 0 Si no se ha encontrado error.
      //Devuelve 1 Si no se ha podido determinar alguna hora de inicio.
      //Devuelve 2 Si no hay ning£n parte.
      //..............

      //En primer lugar borramos los registros del temporal.
      rTParte.RESET;
      rTParte.SETCURRENTKEY(Usuario);
      rTParte.SETRANGE(Usuario,USERID);
      rTParte.DELETEALL;

      //Vamos a llenarlo con los partes relacionados.
      rParte.RESET;
      rParte.SETCURRENTKEY("Cod Conductor",Fecha,"Dia siguiente","Hora inicio");
      rParte.SETRANGE("Cod Conductor",pConductor);

      // ----  AJS 4.2.2002  ----
      // ----  Solo interesan los partes del dia, no los del dia siguiente  ----

      rPar.FINDFIRST;
      IF rPar."Empresa Real" IN [rPar."Empresa Real"::IBZ, rPar."Empresa Real"::SJO] THEN
        rParte.SETRANGE(Fecha,pFecha,pFecha+1)
      ELSE
        rParte.SETRANGE(Fecha, pFecha);

      // ----  FIN AJS 4.2.2002  ----

      IF pModo = 0 THEN
        rParte.SETRANGE("Fecha conductor",0D);

      IF rParte.FINDSET THEN REPEAT
        rTParte.INIT;
        rTParte."Cod Conductor"   := rParte."Cod Conductor";
        IF rCond.GET(rParte."Cod Conductor") THEN
          rTParte.Conductor       := rCond."Nombre Abreviado";

        rTParte.Fecha             := rParte.Fecha;
        rTParte."Hora Inicio"     := rParte."Hora inicio";
        rTParte."Hora final"      := rParte."Hora final";
        rTParte."N§ Parte"        := rParte."N§ Parte";
        rTParte."Fecha Conductor" := rParte."Fecha conductor";
        rTParte."Tipo Servicio"   := rParte."Tipo Servicio";
        rTParte."Codigo Servicio" := rParte."Codigo Servicio";
        rTParte."Tipo Vehiculo"   := rParte."Tipo Vehiculo";
        rTParte.Matricula         := rParte.Vehiculo;

        // ----  AJS 26.08.2002 Trabajar con los campos calculados en lugar de con los campos de soporte porque a veces  ----
        // ----  no se actualizan bien.                                                                                  ----
        //  rTParte.Adultos           := rParte."Adultos trans. soporte";
        //  rTParte.Ni¤os             := rParte."Ni¤os trans. soporte";

        rParte.CALCFIELDS("Adultos transportados", "Ni¤os transportados");
        rTParte.Adultos := rParte."Adultos transportados";
        rTParte.Ni¤os   := rParte."Ni¤os transportados";

        // ----  Fin AJS 26.08.2002  ----

        rTParte.Garaje            := rParte.Garaje;
        rTParte."N§ Viajes"       := rParte."N§ viajes";
        rTParte.INSERT(TRUE);
      UNTIL rParte.NEXT=0;

      rParte.RESET;

      rTParte.RESET;
      rTParte.SETRANGE(Usuario);
      rTParte.SETRANGE(Usuario,USERID);
      IF NOT rTParte.FINDFIRST THEN
        EXIT(2);

      rTParte.SETRANGE("Hora Inicio",0T);
      IF rTParte.FINDFIRST THEN BEGIN
        rParte.GET(rTParte."N§ Parte");
        IF pModo=0 THEN
          CreaRegistroError(BAD_HORA_INICIO,rTParte."Cod Conductor",rTParte.Conductor,
                            rTParte."N§ Parte",rTParte.Fecha,pFecha,'',TRUE);

        EXIT(1);
      END;
      EXIT(0);
    END;

    PROCEDURE ActualizarSeleccionConductores@1103350000();
    VAR
      rSel@1103350001 : Record 7035378;
      rCond@1103350000 : Record 7010327;
    BEGIN

      // ActualizarSeleccionConductores().
      //Vemos si hay que borrar de la tabla Selecci¢n alg£n Registro.
      rSel.RESET;
      rSel.SETRANGE(Usuario,USERID);
      IF rSel.FINDFIRST THEN REPEAT
        IF NOT rCond.GET(rSel."Id Conductor") THEN
          rSel.DELETE(TRUE);
      UNTIL rSel.NEXT=0;

      //Vemos si hay que a¤adir a la tabla Selecci¢n, o cambiar el numero del vehiculo.
      rCond.RESET;
      IF rCond.FINDSET THEN REPEAT

        IF NOT rSel.GET(USERID,rCond.Conductor) THEN BEGIN
          rSel.INIT;
          rSel.Usuario           := USERID;
          rSel."Id Conductor"    := rCond.Conductor;
          rSel.Garaje            := rCond.Garaje;
          rSel."Nombre Abreviado":= rCond."Nombre Abreviado";
          rSel."Grupo Vehiculo"  := rCond."Grupo Vehiculo";
          rSel.Bloqueado         := rCond.Bloqueado;
          rSel.Externo           := rCond.Externo;
          rSel.Seleccion:= TRUE;
          rSel.INSERT;
        END
        ELSE BEGIN
          //Mirar si ha cambiado alg£n valor.
          IF (rCond.Garaje <> rSel.Garaje) OR
             (rCond."Nombre Abreviado" <> rSel."Nombre Abreviado") OR
             (rCond."Grupo Vehiculo" <> rSel."Grupo Vehiculo") OR
             (rCond.Bloqueado <> rSel.Bloqueado) OR
             (rCond.Externo <> rSel.Externo) THEN BEGIN
            rSel.Garaje            := rCond.Garaje;
            rSel."Nombre Abreviado":= rCond."Nombre Abreviado";
            rSel."Grupo Vehiculo"  := rCond."Grupo Vehiculo";
            rSel.Externo           := rCond.Externo;
            rSel.Bloqueado         := rCond.Bloqueado;
            rSel.MODIFY;
          END;

        END;
      UNTIL rCond.NEXT=0;
    END;

    BEGIN
    {
      // AJS  En la rutina ActTemporalCalculo he puesto un filtro para que solo considere los partes
      //      del dia de calculo y no los del siguiente. Asi se trabaja en UEX.

      // AJS  En la rutina ActTemporalCalculo he hecho que los campos de adultos y ni¤os partes se rellenen a partir
      //      de los campos calculados porque a veces los de soporte no se rellenan bien.

      $001 AJS 26012015 He modificado las funciones que modifican registros para que trabajen con dos apuntadores
    }
    END.
  }
}
