OBJECT Codeunit 6827 EP Delete Line Data Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=25/05/05;
    Time=12:00:00;
    Version List=NAVW14.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DecodeXML@1000000000 : Codeunit 6813;
      SupportFunctions@1000000001 : Codeunit 6815;
      FormatFunctions@1000000002 : Codeunit 6817;

    PROCEDURE DeleteLine@1000000000(VAR XMLDocInLine@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";TableNo@1000000000 : Integer;GUID@1000000002 : Text[50];UserID@1000000005 : Code[20]) ReturnCode : Integer;
    VAR
      ChangeLogMgt@1000 : Codeunit 423;
      LineRecordRef@1000000003 : RecordRef;
    BEGIN
      CASE TableNo OF
        DATABASE::"Sales Line":
          ReturnCode := DeleteSalesLine(XMLDocInLine,GUID,LineRecordRef);
        DATABASE::"Purchase Line":
          ReturnCode := DeletePurchaseLine(XMLDocInLine,GUID,LineRecordRef);
        DATABASE::"Production BOM Line":
          ReturnCode := DeleteProdBOMLine(XMLDocInLine,GUID,LineRecordRef);
        DATABASE::"Routing Line":
          ReturnCode := DeleteRoutingLine(XMLDocInLine,GUID,LineRecordRef);
      END;

      // Make ChangeLog Entry
      IF SupportFunctions.CheckChangeLogInLic THEN
        IF ChangeLogMgt.GetTableTriggerMask(LineRecordRef.NUMBER) IN [4,5,14,15] THEN BEGIN // All Maskvalues for Delete
          ChangeLogMgt.SetLogEmployeePortalActivity(UserID);
          ChangeLogMgt.LogDeletion(LineRecordRef);
        END;
    END;

    LOCAL PROCEDURE DeleteSalesLine@1000000002(VAR XMLDocInLine@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000000 : Text[50];VAR LineRecordRef@1000000004 : RecordRef) ReturnCode : Integer;
    VAR
      SalesLine@1000 : Record 37;
      LineFieldRef@1000000003 : FieldRef;
      FilterString@1000000001 : Text[1024];
      TempText@1000000005 : Text[200];
      TempOption@1000000006 : Option;
    BEGIN
      ReturnCode := 0;

      FilterString :=
        STRSUBSTNO('WHERE(1=CONST(%1),3=CONST(%2),4=CONST(%3))',
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,SalesLine.FIELDNO("Document Type")),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,SalesLine.FIELDNO("Document No.")),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,SalesLine.FIELDNO("Line No.")));

      LineRecordRef.OPEN(DATABASE::"Sales Line",FALSE);
      LineRecordRef.SETVIEW(FilterString);
      IF LineRecordRef.FIND('-') THEN BEGIN
        LineFieldRef := LineRecordRef.FIELD(SalesLine.FIELDNO("Document Type"));
        TempOption := LineFieldRef.VALUE;
        TempText := FormatFunctions.OptionToText(TempOption);
        SupportFunctions.CreateTempHeadFilterTable(SalesLine.FIELDNO("Document Type"),TempText,GUID);
        LineFieldRef := LineRecordRef.FIELD(SalesLine.FIELDNO("Document No."));
        TempText := LineFieldRef.VALUE;
        SupportFunctions.CreateTempHeadFilterTable(SalesLine.FIELDNO("Document No."),TempText,GUID);

        SupportFunctions.CreateTempHeadFilterKeys(SalesLine.FIELDNO("Document Type"),GUID);
        SupportFunctions.CreateTempHeadFilterKeys(SalesLine.FIELDNO("Document No."),GUID);

        IF SupportFunctions.CompareHashValues(DecodeXML.GetHashValue(XMLDocInLine),LineRecordRef) THEN
          LineRecordRef.DELETE(TRUE)
        ELSE
          ReturnCode := 20;
      END ELSE BEGIN
        SupportFunctions.CreateTempHeadFilterTable(SalesLine.FIELDNO("Document Type"),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,SalesLine.FIELDNO("Document Type")),GUID);
        SupportFunctions.CreateTempHeadFilterTable(SalesLine.FIELDNO("Document No."),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,SalesLine.FIELDNO("Document No.")),GUID);

        SupportFunctions.CreateTempHeadFilterKeys(SalesLine.FIELDNO("Document Type"),GUID);
        SupportFunctions.CreateTempHeadFilterKeys(SalesLine.FIELDNO("Document No."),GUID);
      END;
    END;

    LOCAL PROCEDURE DeletePurchaseLine@1(VAR XMLDocInLine@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000000 : Text[50];VAR LineRecordRef@1000000004 : RecordRef) ReturnCode : Integer;
    VAR
      PurchaseLine@1000 : Record 39;
      LineFieldRef@1000000003 : FieldRef;
      FilterString@1000000001 : Text[1024];
      TempText@1000000005 : Text[200];
      TempOption@1000000006 : Option;
    BEGIN
      ReturnCode := 0;

      FilterString :=
        STRSUBSTNO('WHERE(1=CONST(%1),3=CONST(%2),4=CONST(%3))',
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,PurchaseLine.FIELDNO("Document Type")),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,PurchaseLine.FIELDNO("Document No.")),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,PurchaseLine.FIELDNO("Line No.")));

      LineRecordRef.OPEN(DATABASE::"Purchase Line",FALSE);
      LineRecordRef.SETVIEW(FilterString);
      IF LineRecordRef.FIND('-') THEN BEGIN
        LineFieldRef := LineRecordRef.FIELD(PurchaseLine.FIELDNO("Document Type"));
        TempOption := LineFieldRef.VALUE;
        TempText := FormatFunctions.OptionToText(TempOption);
        SupportFunctions.CreateTempHeadFilterTable(PurchaseLine.FIELDNO("Document Type"),TempText,GUID);
        LineFieldRef := LineRecordRef.FIELD(PurchaseLine.FIELDNO("Document No."));
        TempText := LineFieldRef.VALUE;
        SupportFunctions.CreateTempHeadFilterTable(PurchaseLine.FIELDNO("Document No."),TempText,GUID);

        SupportFunctions.CreateTempHeadFilterKeys(PurchaseLine.FIELDNO("Document Type"),GUID);
        SupportFunctions.CreateTempHeadFilterKeys(PurchaseLine.FIELDNO("Document No."),GUID);

        IF SupportFunctions.CompareHashValues(DecodeXML.GetHashValue(XMLDocInLine),LineRecordRef) THEN
          LineRecordRef.DELETE(TRUE)
        ELSE
          ReturnCode := 20;

      END ELSE BEGIN
        SupportFunctions.CreateTempHeadFilterTable(PurchaseLine.FIELDNO("Document Type"),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,PurchaseLine.FIELDNO("Document Type")),GUID);
        SupportFunctions.CreateTempHeadFilterTable(PurchaseLine.FIELDNO("Document No."),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,PurchaseLine.FIELDNO("Document No.")),GUID);

        SupportFunctions.CreateTempHeadFilterKeys(PurchaseLine.FIELDNO("Document Type"),GUID);
        SupportFunctions.CreateTempHeadFilterKeys(PurchaseLine.FIELDNO("Document No."),GUID);
      END;
    END;

    LOCAL PROCEDURE DeleteProdBOMLine@2(VAR XMLDocInLine@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000000 : Text[50];VAR LineRecordRef@1000000004 : RecordRef) ReturnCode : Integer;
    VAR
      ProdBOMVersion@1001 : Record 99000779;
      ProdBOMLine@1000 : Record 99000772;
      LineFieldRef@1000000003 : FieldRef;
      FilterString@1000000001 : Text[1024];
      TempText@1000000005 : Text[200];
    BEGIN
      ReturnCode := 0;

      FilterString :=
        STRSUBSTNO('WHERE(1=CONST(%1),3=CONST(%2),2=CONST(%3))',
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,ProdBOMLine.FIELDNO("Production BOM No.")),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,ProdBOMLine.FIELDNO("Version Code")),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,ProdBOMLine.FIELDNO("Line No.")));

      LineRecordRef.OPEN(DATABASE::"Production BOM Line",FALSE);
      LineRecordRef.SETVIEW(FilterString);
      IF LineRecordRef.FIND('-') THEN BEGIN
        LineFieldRef := LineRecordRef.FIELD(ProdBOMLine.FIELDNO("Production BOM No."));
        TempText := LineFieldRef.VALUE;
        SupportFunctions.CreateTempHeadFilterTable(ProdBOMVersion.FIELDNO("Production BOM No."),TempText,GUID);
        LineFieldRef := LineRecordRef.FIELD(ProdBOMLine.FIELDNO("Version Code"));
        TempText := LineFieldRef.VALUE;
        SupportFunctions.CreateTempHeadFilterTable(ProdBOMVersion.FIELDNO("Version Code"),TempText,GUID);

        SupportFunctions.CreateTempHeadFilterKeys(ProdBOMVersion.FIELDNO("Production BOM No."),GUID);
        SupportFunctions.CreateTempHeadFilterKeys(ProdBOMVersion.FIELDNO("Version Code"),GUID);

        IF SupportFunctions.CompareHashValues(DecodeXML.GetHashValue(XMLDocInLine),LineRecordRef) THEN
          LineRecordRef.DELETE(TRUE)
        ELSE
          ReturnCode := 20;
      END ELSE BEGIN
        SupportFunctions.CreateTempHeadFilterTable(ProdBOMVersion.FIELDNO("Production BOM No."),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,ProdBOMLine.FIELDNO("Production BOM No.")),GUID);
        SupportFunctions.CreateTempHeadFilterTable(ProdBOMVersion.FIELDNO("Version Code"),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,ProdBOMLine.FIELDNO("Version Code")),GUID);

        SupportFunctions.CreateTempHeadFilterKeys(ProdBOMVersion.FIELDNO("Production BOM No."),GUID);
        SupportFunctions.CreateTempHeadFilterKeys(ProdBOMVersion.FIELDNO("Version Code"),GUID);
      END;
    END;

    LOCAL PROCEDURE DeleteRoutingLine@4(VAR XMLDocInLine@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";GUID@1000000000 : Text[50];VAR LineRecordRef@1000000004 : RecordRef) ReturnCode : Integer;
    VAR
      RoutingVersion@1001 : Record 99000786;
      RoutingLine@1000 : Record 99000764;
      LineFieldRef@1000000003 : FieldRef;
      FilterString@1000000001 : Text[1024];
      TempText@1000000005 : Text[200];
    BEGIN
      ReturnCode := 0;

      FilterString :=
        STRSUBSTNO('WHERE(1=CONST(%1),2=CONST(%2),4=CONST(%3))',
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,RoutingLine.FIELDNO("Routing No.")),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,RoutingLine.FIELDNO("Version Code")),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,RoutingLine.FIELDNO("Operation No.")));

      LineRecordRef.OPEN(DATABASE::"Routing Line",FALSE);
      LineRecordRef.SETVIEW(FilterString);
      IF LineRecordRef.FIND('-') THEN BEGIN
        LineFieldRef := LineRecordRef.FIELD(RoutingLine.FIELDNO("Routing No."));
        TempText := LineFieldRef.VALUE;
        SupportFunctions.CreateTempHeadFilterTable(RoutingLine.FIELDNO("Routing No."),TempText,GUID);
        LineFieldRef := LineRecordRef.FIELD(RoutingLine.FIELDNO("Version Code"));
        TempText := LineFieldRef.VALUE;
        SupportFunctions.CreateTempHeadFilterTable(RoutingVersion.FIELDNO("Version Code"),TempText,GUID);

        SupportFunctions.CreateTempHeadFilterKeys(RoutingVersion.FIELDNO("Routing No."),GUID);
        SupportFunctions.CreateTempHeadFilterKeys(RoutingVersion.FIELDNO("Version Code"),GUID);

        IF SupportFunctions.CompareHashValues(DecodeXML.GetHashValue(XMLDocInLine),LineRecordRef) THEN
          LineRecordRef.DELETE(TRUE)
        ELSE
          ReturnCode := 20;

      END ELSE BEGIN
        SupportFunctions.CreateTempHeadFilterTable(RoutingVersion.FIELDNO("Routing No."),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,RoutingLine.FIELDNO("Routing No.")),GUID);
        SupportFunctions.CreateTempHeadFilterTable(RoutingVersion.FIELDNO("Version Code"),
          DecodeXML.GetValueByFieldIDFromLineData(XMLDocInLine,RoutingLine.FIELDNO("Version Code")),GUID);

        SupportFunctions.CreateTempHeadFilterKeys(RoutingVersion.FIELDNO("Routing No."),GUID);
        SupportFunctions.CreateTempHeadFilterKeys(RoutingVersion.FIELDNO("Version Code"),GUID);
      END;
    END;

    BEGIN
    END.
  }
}
