OBJECT Codeunit 5777 Whse. Validate Source Line
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU="must not be changed when a %1 for this %2 exists: ";ESP="no debe cambiarse cuando existe %1 para este %2. "';
      Text001@1002 : TextConst 'ENU=The %1 cannot be deleted when a related %2 exists.;ESP=El %1 no se puede eliminar porque existe un %2 relacionado.';
      WhseActivLine@1003 : Record 5767;
      TableCaptionValue@1001 : Text[100];

    PROCEDURE SalesLineVerifyChange@1(VAR NewSalesLine@1000 : Record 37;VAR OldSalesLine@1001 : Record 37);
    BEGIN
      WITH NewSalesLine DO BEGIN
        IF WhseLinesExist(
             DATABASE::"Sales Line",
             "Document Type",
             "Document No.",
             "Line No.",
             0,
             Quantity)
        THEN BEGIN
          IF Type <> OldSalesLine.Type THEN
            FIELDERROR(
              Type,
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "No." <> OldSalesLine."No." THEN
            FIELDERROR(
              "No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Variant Code" <> OldSalesLine."Variant Code" THEN
            FIELDERROR(
              "Variant Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Location Code" <> OldSalesLine."Location Code" THEN
            FIELDERROR(
              "Location Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Unit of Measure Code" <> OldSalesLine."Unit of Measure Code" THEN
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Drop Shipment" <> OldSalesLine."Drop Shipment" THEN
            FIELDERROR(
              "Drop Shipment",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Purchase Order No." <> OldSalesLine."Purchase Order No." THEN
            FIELDERROR(
              "Purchase Order No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Purch. Order Line No." <> OldSalesLine."Purch. Order Line No." THEN
            FIELDERROR(
              "Purch. Order Line No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Job No." <> OldSalesLine."Job No." THEN
            FIELDERROR(
              "Job No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF Quantity <> OldSalesLine.Quantity THEN
            FIELDERROR(
              Quantity,
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));
        END;
      END;
    END;

    PROCEDURE SalesLineDelete@2(VAR SalesLine@1000 : Record 37);
    BEGIN
      IF WhseLinesExist(
           DATABASE::"Sales Line",
           SalesLine."Document Type",
           SalesLine."Document No.",
           SalesLine."Line No.",
           0,
           SalesLine.Quantity)
      THEN
        ERROR(
          Text001,
          SalesLine.TABLECAPTION,
          TableCaptionValue);
    END;

    PROCEDURE PurchaseLineVerifyChange@3(VAR NewPurchLine@1000 : Record 39;VAR OldPurchLine@1001 : Record 39);
    BEGIN
      WITH NewPurchLine DO BEGIN
        IF WhseLinesExist(
             DATABASE::"Purchase Line",
             "Document Type",
             "Document No.",
             "Line No.",
             0,
             Quantity)
        THEN BEGIN
          IF Type <> OldPurchLine.Type THEN
            FIELDERROR(
              Type,
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "No." <> OldPurchLine."No." THEN
            FIELDERROR(
              "No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Variant Code" <> OldPurchLine."Variant Code" THEN
            FIELDERROR(
              "Variant Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Location Code" <> OldPurchLine."Location Code" THEN
            FIELDERROR(
              "Location Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Unit of Measure Code" <> OldPurchLine."Unit of Measure Code" THEN
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Drop Shipment" <> OldPurchLine."Drop Shipment" THEN
            FIELDERROR(
              "Drop Shipment",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Sales Order No." <> OldPurchLine."Sales Order No." THEN
            FIELDERROR(
              "Sales Order No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Sales Order Line No." <> OldPurchLine."Sales Order Line No." THEN
            FIELDERROR(
              "Sales Order Line No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Special Order" <> OldPurchLine."Special Order" THEN
            FIELDERROR(
              "Special Order",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Special Order Sales No." <> OldPurchLine."Special Order Sales No." THEN
            FIELDERROR(
              "Special Order Sales No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Special Order Sales Line No." <> OldPurchLine."Special Order Sales Line No." THEN
            FIELDERROR(
              "Special Order Sales Line No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Job No." <> OldPurchLine."Job No." THEN
            FIELDERROR(
              "Job No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF Quantity <> OldPurchLine.Quantity THEN
            FIELDERROR(
              Quantity,
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));
        END;
      END;
    END;

    PROCEDURE PurchaseLineDelete@4(VAR PurchLine@1000 : Record 39);
    BEGIN
      IF WhseLinesExist(
           DATABASE::"Purchase Line",
           PurchLine."Document Type",
           PurchLine."Document No.",
           PurchLine."Line No.",
           0,
           PurchLine.Quantity)
      THEN
        ERROR(
          Text001,
          PurchLine.TABLECAPTION,
          TableCaptionValue);
    END;

    PROCEDURE TransLineVerifyChange@5(VAR NewTransLine@1000 : Record 5741;VAR OldTransLine@1001 : Record 5741);
    VAR
      WhseLineFound@1002 : Boolean;
    BEGIN
      WITH NewTransLine DO BEGIN
        WhseLineFound := WhseLinesExist(DATABASE::"Transfer Line",0,"Document No.","Line No.",0,Quantity);
        IF NOT WhseLineFound THEN
          WhseLineFound := WhseLinesExist(DATABASE::"Transfer Line",1,"Document No.","Line No.",0,Quantity);
        IF WhseLineFound THEN BEGIN
          IF "Item No." <> OldTransLine."Item No." THEN
            FIELDERROR(
              "Item No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Variant Code" <> OldTransLine."Variant Code" THEN
            FIELDERROR(
              "Variant Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF "Unit of Measure Code" <> OldTransLine."Unit of Measure Code" THEN
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF Quantity <> OldTransLine.Quantity THEN
            FIELDERROR(
              Quantity,
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));
        END;
      END;
    END;

    PROCEDURE TransLineDelete@10(VAR NewTransLine@1000 : Record 5741);
    BEGIN
      WITH NewTransLine DO BEGIN
        IF WhseLinesExist(DATABASE::"Transfer Line",0,"Document No.","Line No.",0,Quantity) THEN
          ERROR(
            Text001,
            TABLECAPTION,
            TableCaptionValue);
        IF WhseLinesExist(DATABASE::"Transfer Line",1,"Document No.","Line No.",0,Quantity) THEN
          ERROR(
            Text001,
            TABLECAPTION,
            TableCaptionValue);
      END;
    END;

    PROCEDURE WhseLinesExist@6(SourceType@1000 : Integer;SourceSubType@1001 : Option;SourceNo@1002 : Code[20];SourceLineNo@1003 : Integer;SourceSublineNo@1004 : Integer;SourceQty@1007 : Decimal) : Boolean;
    VAR
      WhseRcptLine@1006 : Record 7317;
      WhseShptLine@1005 : Record 7321;
    BEGIN
      IF ((SourceType = DATABASE::"Purchase Line") AND (SourceSubType = 1) AND (SourceQty >= 0)) OR
         ((SourceType = DATABASE::"Purchase Line") AND (SourceSubType = 5) AND (SourceQty < 0)) OR
         ((SourceType = DATABASE::"Sales Line") AND (SourceSubType = 1) AND (SourceQty < 0)) OR
         ((SourceType = DATABASE::"Sales Line") AND (SourceSubType = 5) AND (SourceQty >= 0)) OR
         ((SourceType = DATABASE::"Transfer Line") AND (SourceSubType = 1))
      THEN BEGIN
        WhseRcptLine.SETCURRENTKEY(
          "Source Type","Source Subtype","Source No.","Source Line No.");
        WhseRcptLine.SETRANGE("Source Type",SourceType);
        WhseRcptLine.SETRANGE("Source Subtype",SourceSubType);
        WhseRcptLine.SETRANGE("Source No.",SourceNo);
        WhseRcptLine.SETRANGE("Source Line No.",SourceLineNo);
        IF NOT WhseRcptLine.ISEMPTY THEN BEGIN
          TableCaptionValue := WhseRcptLine.TABLECAPTION;
          EXIT(TRUE);
        END;
      END;

      IF ((SourceType = DATABASE::"Purchase Line") AND (SourceSubType = 1) AND (SourceQty < 0)) OR
         ((SourceType = DATABASE::"Purchase Line") AND (SourceSubType = 5) AND (SourceQty >= 0)) OR
         ((SourceType = DATABASE::"Sales Line") AND (SourceSubType = 1) AND (SourceQty >= 0)) OR
         ((SourceType = DATABASE::"Sales Line") AND (SourceSubType = 5) AND (SourceQty < 0)) OR
         ((SourceType = DATABASE::"Transfer Line") AND (SourceSubType = 0))
      THEN BEGIN
        WhseShptLine.SETCURRENTKEY(
          "Source Type","Source Subtype","Source No.","Source Line No.");
        WhseShptLine.SETRANGE("Source Type",SourceType);
        WhseShptLine.SETRANGE("Source Subtype",SourceSubType);
        WhseShptLine.SETRANGE("Source No.",SourceNo);
        WhseShptLine.SETRANGE("Source Line No.",SourceLineNo);
        IF NOT WhseShptLine.ISEMPTY THEN BEGIN
          TableCaptionValue := WhseShptLine.TABLECAPTION;
          EXIT(TRUE);
        END;
      END;

      WhseActivLine.SETCURRENTKEY(
        "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
      WhseActivLine.SETRANGE("Source Type",SourceType);
      WhseActivLine.SETRANGE("Source Subtype",SourceSubType);
      WhseActivLine.SETRANGE("Source No.",SourceNo);
      WhseActivLine.SETRANGE("Source Line No.",SourceLineNo);
      WhseActivLine.SETRANGE("Source Subline No.",SourceSublineNo);
      IF NOT WhseActivLine.ISEMPTY THEN BEGIN
        TableCaptionValue := WhseActivLine.TABLECAPTION;
        EXIT(TRUE);
      END;

      TableCaptionValue := '';
      EXIT(FALSE);
    END;

    PROCEDURE ProdComponentVerifyChange@9(VAR NewProdOrderComp@1000 : Record 5407;VAR OldProdOrderComp@1001 : Record 5407);
    BEGIN
      WITH NewProdOrderComp DO BEGIN
        IF WhseLinesExist(
             DATABASE::"Prod. Order Component",
             Status,
             "Prod. Order No.",
             "Prod. Order Line No.",
             "Line No.",
             Quantity)
        THEN BEGIN

          IF Status <> OldProdOrderComp.Status THEN
            FIELDERROR(
              Status,
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Prod. Order No." <> OldProdOrderComp."Prod. Order No." THEN
            FIELDERROR(
              "Prod. Order No.",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Prod. Order Line No." <> OldProdOrderComp."Prod. Order Line No." THEN
            FIELDERROR(
              "Prod. Order Line No.",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Line No." <> OldProdOrderComp."Line No." THEN
            FIELDERROR(
              "Line No.",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Item No." <> OldProdOrderComp."Item No." THEN
            FIELDERROR(
              "Item No.",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Variant Code" <> OldProdOrderComp."Variant Code" THEN
            FIELDERROR(
              "Variant Code",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Location Code" <> OldProdOrderComp."Location Code" THEN
            FIELDERROR(
              "Location Code",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Unit of Measure Code" <> OldProdOrderComp."Unit of Measure Code" THEN
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Due Date" <> OldProdOrderComp."Due Date" THEN
            FIELDERROR(
              "Due Date",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF Quantity <> OldProdOrderComp.Quantity THEN
            FIELDERROR(
              Quantity,
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Quantity per" <> OldProdOrderComp."Quantity per" THEN
            FIELDERROR(
              "Quantity per",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          IF "Expected Quantity" <> OldProdOrderComp."Expected Quantity" THEN
            FIELDERROR(
              "Expected Quantity",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));
        END;
      END;
    END;

    PROCEDURE ProdComponentDelete@7(VAR ProdOrderComp@1000 : Record 5407);
    BEGIN
      IF WhseLinesExist(
           DATABASE::"Prod. Order Component",
           ProdOrderComp.Status,
           ProdOrderComp."Prod. Order No.",
           ProdOrderComp."Prod. Order Line No.",
           ProdOrderComp."Line No.",
           ProdOrderComp.Quantity)
      THEN
        ERROR(
          Text001,
          ProdOrderComp.TABLECAPTION,
          TableCaptionValue);
    END;

    PROCEDURE ItemLineVerifyChange@11(VAR NewItemJnlLine@1000 : Record 83;VAR OldItemJnlLine@1001 : Record 83);
    VAR
      ProdOrderComp@1003 : Record 5407;
      Location@1005 : Record 14;
      LinesExist@1002 : Boolean;
      QtyChecked@1004 : Boolean;
    BEGIN
      WITH NewItemJnlLine DO BEGIN
        CASE "Entry Type" OF
          "Entry Type"::Consumption:
            BEGIN
              IF Location.GET("Location Code") AND Location."Require Pick" AND Location."Require Shipment" THEN
                IF ProdOrderComp.GET(
                     ProdOrderComp.Status::Released,
                     "Prod. Order No.","Prod. Order Line No.","Prod. Order Comp. Line No.") AND
                   (ProdOrderComp."Flushing Method" = ProdOrderComp."Flushing Method"::Manual) AND
                   (Quantity >= 0)
                THEN BEGIN
                  IF Quantity > ProdOrderComp."Qty. Picked" -
                     (ProdOrderComp."Expected Quantity" - ProdOrderComp."Remaining Quantity")
                  THEN
                    FIELDERROR(Quantity);
                  QtyChecked := TRUE;
                END;

              LinesExist :=
                WhseLinesExist(
                  DATABASE::"Prod. Order Component",
                  3,
                  "Prod. Order No.",
                  "Prod. Order Line No.",
                  "Prod. Order Comp. Line No.",
                  Quantity);
            END;
          "Entry Type"::Output:
            LinesExist :=
              WhseLinesExist(
                DATABASE::"Prod. Order Line",
                3,
                "Prod. Order No.",
                "Prod. Order Line No.",
                0,
                Quantity);
          ELSE
            LinesExist := FALSE;
        END;

        IF LinesExist THEN BEGIN
          IF ("Item No." <> OldItemJnlLine."Item No.") AND
             (OldItemJnlLine."Item No." <> '')
          THEN
            FIELDERROR(
              "Item No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF ("Variant Code" <> OldItemJnlLine."Variant Code") AND
             (OldItemJnlLine."Variant Code" <> '')
          THEN
            FIELDERROR(
              "Variant Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF ("Location Code" <> OldItemJnlLine."Location Code") AND
             (OldItemJnlLine."Location Code" <> '')
          THEN
            FIELDERROR(
              "Location Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF ("Unit of Measure Code" <> OldItemJnlLine."Unit of Measure Code") AND
             (OldItemJnlLine."Unit of Measure Code" <> '')
          THEN
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          IF (Quantity <> OldItemJnlLine.Quantity) AND
             (OldItemJnlLine.Quantity <> 0) AND
             NOT QtyChecked
          THEN
            FIELDERROR(
              Quantity,
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));
        END;
      END;
    END;

    PROCEDURE ProdOrderLineVerifyChange@12(VAR NewProdOrderLine@1000 : Record 5406;VAR OldProdOrderLine@1001 : Record 5406);
    BEGIN
      WITH NewProdOrderLine DO BEGIN
        IF WhseLinesExist(
             DATABASE::"Prod. Order Line",
             Status,
             "Prod. Order No.",
             "Line No.",
             0,
             Quantity)
        THEN BEGIN
          IF Status <> OldProdOrderLine.Status THEN
            FIELDERROR(
              Status,
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          IF "Prod. Order No." <> OldProdOrderLine."Prod. Order No." THEN
            FIELDERROR(
              "Prod. Order No.",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          IF "Line No." <> OldProdOrderLine."Line No." THEN
            FIELDERROR(
              "Line No.",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          IF "Item No." <> OldProdOrderLine."Item No." THEN
            FIELDERROR(
              "Item No.",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          IF "Variant Code" <> OldProdOrderLine."Variant Code" THEN
            FIELDERROR(
              "Variant Code",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          IF "Location Code" <> OldProdOrderLine."Location Code" THEN
            FIELDERROR(
              "Location Code",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          IF "Unit of Measure Code" <> OldProdOrderLine."Unit of Measure Code" THEN
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          IF "Due Date" <> OldProdOrderLine."Due Date" THEN
            FIELDERROR(
              "Due Date",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          IF Quantity <> OldProdOrderLine.Quantity THEN
            FIELDERROR(
              Quantity,
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));
        END;
      END;
    END;

    PROCEDURE ProdOrderLineDelete@8(VAR ProdOrderLine@1000 : Record 5406);
    BEGIN
      WITH ProdOrderLine DO
        IF WhseLinesExist(
             DATABASE::"Prod. Order Line",
             Status,
             "Prod. Order No.",
             "Line No.",
             0,
             Quantity)
        THEN
          ERROR(
            Text001,
            TABLECAPTION,
            TableCaptionValue);
    END;

    BEGIN
    END.
  }
}
