OBJECT Codeunit 6815 EP Support Functions
{
  OBJECT-PROPERTIES
  {
    Date=13/02/07;
    Time=12:00:00;
    Version List=NAVW15.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EPFormatFunctions@1000000000 : Codeunit 6817;
      Text001@1002 : TextConst 'ENU=The following record types are related to this table:\\;ESP=Los siguientes tipos de registro est n relacionados con esta tabla:\\';
      Text002@1003 : TextConst 'ENU=\Would you like to delete them?;ESP=\¨Desea eliminarlos?';
      Text003@1004 : TextConst 'ENU=- tab strips;ESP=- bandas de pesta¤as';
      Text004@1005 : TextConst 'ENU=- actions;ESP=- acciones';
      Text005@1006 : TextConst 'ENU=- head-line-connection-criteria;ESP=- criterios-conexi¢n-cabecera-l¡nea';
      Text006@1007 : TextConst 'ENU=- default filters;ESP=- filtros predeterminados';
      Text007@1008 : TextConst 'ENU=- recordset-editable-check-criteria;ESP=- criterios-comprobaci¢n-registro-editable';
      Text008@1009 : TextConst 'ENU=Renaming interrupted.;ESP=Se interrumpi¢ el renombramiento.';
      Text009@1000000001 : TextConst 'ENU=Field %1 has already been declared in Tab %2.;ESP=El campo %1 ya se ha declarado en la ficha %2.';
      Text011@1000 : TextConst 'ENU=Option values for Field %1 in Table %2.;ESP=Valores opci¢n para el campo %1 en la tabla %2.';
      Text012@1001 : TextConst 'ENU=%1 for %2.;ESP=%1 para %2.';
      Text013@1010 : TextConst 'ENU=The following record types are related to this field:\\;ESP=Los siguientes tipos de registro est n relacionados con este campo:\\';
      Text015@1012 : TextConst 'ENU=- sort key;ESP=- criterio de ordenaci¢n';
      Text016@1013 : TextConst 'ENU=- lookup;ESP=- b£squedas';
      Text017@1014 : TextConst 'ENU=The following data element types are indicated to this action:\\;ESP=Los siguientes tipos de elementos de datos est n indicados para esta acci¢n:\\';
      Text019@1016 : TextConst 'ENU=- new-head-criteria;ESP=- criterios nueva cabecera';
      Text020@1017 : TextConst 'ENU=- connection data to next request;ESP=- datos de conexi¢n a la siguiente solicitud';

    PROCEDURE GetTableNos@1000000001(GroupCode@1000000003 : Code[20];RequestType@1000000001 : Code[20];HeadOrLine@1000000004 : ' ,Head,Line';VAR TableNo@1000000000 : Integer);
    VAR
      EPGrpReqTypeTable@1000000002 : Record 6811;
    BEGIN
      EPGrpReqTypeTable.RESET;
      EPGrpReqTypeTable.SETRANGE("Group Code",GroupCode);
      EPGrpReqTypeTable.SETRANGE("WP Request Code",RequestType);
      EPGrpReqTypeTable.SETRANGE("Header or Line",HeadOrLine); // had to be "line" -> lookup appears only as listing
      IF EPGrpReqTypeTable.FIND('-') THEN
        TableNo := EPGrpReqTypeTable."Table No."
      ELSE
        TableNo := 0;
    END;

    PROCEDURE GetUserGroups@1000000074(UserID@1000000000 : Code[50];VAR UserGroups@1000000002 : Record 6840) : Boolean;
    BEGIN
      UserGroups.RESET;
      UserGroups.SETCURRENTKEY("User ID","Group Code");
      UserGroups.SETRANGE("User ID",UserID);
      IF UserGroups.FIND('-') THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE GetFieldCaption@1000000004(TableNo@1000000000 : Integer;FieldNo@1000000001 : Integer;VAR FieldCaption@1000000002 : Text[80]);
    VAR
      Fields@1000000003 : Record 2000000041;
    BEGIN
      IF Fields.GET(TableNo,FieldNo) THEN
        FieldCaption := Fields."Field Caption"
      ELSE
        FieldCaption := '';
    END;

    PROCEDURE GetTableCaption@1000000066(TableNo@1000000000 : Integer;VAR TableCaption@1000000002 : Text[80]);
    VAR
      Object@1000000003 : Record 2000000001;
    BEGIN
      Object.RESET;
      Object.SETRANGE(Type,Object.Type::Table);
      Object.SETRANGE(ID,TableNo);
      IF Object.FIND('-') THEN BEGIN
        Object.CALCFIELDS(Caption);
        TableCaption := Object.Caption;
      END ELSE
        TableCaption := '';
    END;

    PROCEDURE GetOptionCaption@1000000005(TableNo@1000000000 : Integer;FieldNo@1000000001 : Integer;VAR OptionCaption@1000000002 : Text[1024]);
    VAR
      MyrecRef@1000000004 : RecordRef;
      MyFieldRef@1000000003 : FieldRef;
    BEGIN
      MyrecRef.OPEN(TableNo,TRUE);
      MyFieldRef := MyrecRef.FIELD(FieldNo);
      OptionCaption := MyFieldRef.OPTIONCAPTION;
    END;

    PROCEDURE GetDefaultFieldLen@1000000006(TableNo@1000000000 : Integer;FieldNo@1000000001 : Integer) FieldLen : Integer;
    VAR
      Fields@1000000003 : Record 2000000041;
    BEGIN
      Fields.GET(TableNo,FieldNo);
      IF (Fields.Type = Fields.Type::Text) OR (Fields.Type = Fields.Type::Code) THEN
        FieldLen := Fields.Len
      ELSE
       IF (Fields.Type = Fields.Type::Decimal) THEN
         FieldLen := 30
       ELSE
         FieldLen := 14;
    END;

    PROCEDURE GetPicturePath@2(Code@1000 : Code[20]) ReturnValue : Text[100];
    VAR
      ImagePath@1001 : Record 6835;
    BEGIN
      IF NOT ImagePath.GET(Code) THEN
        EXIT('');

      ReturnValue := ImagePath.Path;
    END;

    PROCEDURE GetActions@1000000018(EPGrpReqTypeTables@1000000005 : Record 6811;VAR EPGrpReqTypeActions@1000000000 : Record 6809);
    BEGIN
      EPGrpReqTypeActions.RESET;
      EPGrpReqTypeActions.SETRANGE("Group Code",EPGrpReqTypeTables."Group Code");
      EPGrpReqTypeActions.SETRANGE("WP Request Code",EPGrpReqTypeTables."WP Request Code");
      EPGrpReqTypeActions.SETRANGE("Table No.",EPGrpReqTypeTables."Table No.");
      EPGrpReqTypeActions.SETRANGE("Header or Line",EPGrpReqTypeTables."Header or Line");
      IF EPGrpReqTypeActions.FIND('-') THEN;
    END;

    PROCEDURE GetActionNewHeadCriteria@1000000035(EPGrpReqTypeActions@1000000000 : Record 6809;VAR EPGrpReqTypeActionNewHeadCrit@1000000002 : Record 6824);
    BEGIN
      EPGrpReqTypeActionNewHeadCrit.RESET;
      EPGrpReqTypeActionNewHeadCrit.SETRANGE("Group Code",EPGrpReqTypeActions."Group Code");
      EPGrpReqTypeActionNewHeadCrit.SETRANGE("WP Request Code",EPGrpReqTypeActions."WP Request Code");
      EPGrpReqTypeActionNewHeadCrit.SETRANGE("Table No.",EPGrpReqTypeActions."Table No.");
      EPGrpReqTypeActionNewHeadCrit.SETRANGE("Header or Line",EPGrpReqTypeActions."Header or Line");
      EPGrpReqTypeActionNewHeadCrit.SETRANGE("Action Type",EPGrpReqTypeActions.Type);
      EPGrpReqTypeActionNewHeadCrit.SETRANGE(Position,EPGrpReqTypeActions.Position);
      IF EPGrpReqTypeActionNewHeadCrit.FIND('-') THEN;
    END;

    PROCEDURE GetGrpReqTypeActionFieldRec@1000000019(EPGrpReqTypeActions@1000000006 : Record 6809;VAR EPGrpReqTypeActionFilter@1000000000 : Record 6813);
    BEGIN
      EPGrpReqTypeActionFilter.RESET;
      EPGrpReqTypeActionFilter.SETRANGE("Group Code",EPGrpReqTypeActions."Group Code");
      EPGrpReqTypeActionFilter.SETRANGE("WP Request Code",EPGrpReqTypeActions."WP Request Code");
      EPGrpReqTypeActionFilter.SETRANGE("Table No.",EPGrpReqTypeActions."Table No.");
      EPGrpReqTypeActionFilter.SETRANGE("Header or Line",EPGrpReqTypeActions."Header or Line");
      EPGrpReqTypeActionFilter.SETRANGE("Action Type",EPGrpReqTypeActions.Type);
      EPGrpReqTypeActionFilter.SETRANGE(Position,EPGrpReqTypeActions.Position);
      EPGrpReqTypeActionFilter.SETRANGE("Apply Filter to",EPGrpReqTypeActionFilter."Apply Filter to"::Field);
      IF EPGrpReqTypeActionFilter.FIND('-') THEN;
    END;

    PROCEDURE GetGrpReqTypeActionKeyRec@1000000020(EPGrpReqTypeActions@1000000006 : Record 6809;VAR EPGrpReqTypeActionFilter@1000000000 : Record 6813);
    BEGIN
      EPGrpReqTypeActionFilter.RESET;
      EPGrpReqTypeActionFilter.RESET;
      EPGrpReqTypeActionFilter.SETRANGE("Group Code",EPGrpReqTypeActions."Group Code");
      EPGrpReqTypeActionFilter.SETRANGE("WP Request Code",EPGrpReqTypeActions."WP Request Code");
      EPGrpReqTypeActionFilter.SETRANGE("Table No.",EPGrpReqTypeActions."Table No.");
      EPGrpReqTypeActionFilter.SETRANGE("Header or Line",EPGrpReqTypeActions."Header or Line");
      EPGrpReqTypeActionFilter.SETRANGE("Action Type",EPGrpReqTypeActions.Type);
      EPGrpReqTypeActionFilter.SETRANGE(Position,EPGrpReqTypeActions.Position);
      EPGrpReqTypeActionFilter.SETRANGE("Apply Filter to",EPGrpReqTypeActionFilter."Apply Filter to"::Key);
      IF EPGrpReqTypeActionFilter.FIND('-') THEN;
    END;

    LOCAL PROCEDURE CheckIfNormalField@9(TableNo@1000000001 : Integer;FieldNo@1000000000 : Integer) : Boolean;
    VAR
      Fields@1000000002 : Record 2000000041;
    BEGIN
      Fields.GET(TableNo,FieldNo);

      IF Fields.Class = Fields.Class::Normal THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE CheckIfOptionField@1000000013(TableNo@1000000000 : Integer;FieldNo@1000000001 : Integer) : Boolean;
    VAR
      Fields@1000000003 : Record 2000000041;
    BEGIN
      Fields.GET(TableNo,FieldNo);
      IF Fields.Type = Fields.Type::Option THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE CheckIfBlobField@5(TableNo@1000000001 : Integer;FieldNo@1000000000 : Integer) : Boolean;
    VAR
      Fields@1000000002 : Record 2000000041;
    BEGIN
      Fields.GET(TableNo,FieldNo);
      IF Fields.Type = Fields.Type::BLOB THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE CheckCalculate@1(TableNo@1000000001 : Integer;FieldNo@1000000000 : Integer) : Boolean;
    VAR
      Fields@1000000002 : Record 2000000041;
    BEGIN
      Fields.GET(TableNo,FieldNo);

      IF Fields.Class = Fields.Class::FlowField THEN
        EXIT(TRUE);

      IF Fields.Type = Fields.Type::BLOB THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE BuildFilterString@1000000003(VAR FilterString@1000000000 : Text[1024];FilterType@1000000001 : ' ,Sorting,Order,Const,Filter,AddEnd';Fieldname@1000000002 : Text[80];Value@1000000003 : Text[1024]);
    VAR
      TempStr1@1000000004 : Text[1024];
      TempStr2@1000000005 : Text[1024];
      FinalStr@1000000006 : Text[1024];
      SepPos@1000000007 : Integer;
    BEGIN
      IF FilterType=FilterType::Const THEN BEGIN
        TempStr1 := '';
        TempStr2 := '';
        FinalStr := '';
        SepPos := STRPOS(Value,'"');
        WHILE (SepPos <> 0) DO BEGIN
          TempStr1 := COPYSTR(Value,1,(SepPos - 1));
          TempStr2 := COPYSTR(Value,(SepPos + 1));
          Value := TempStr2;
          FinalStr += TempStr1 + '""';
          SepPos := STRPOS(Value,'"');
        END;
        FinalStr+=Value;
        Value := FinalStr;
        Value := '"' + Value + '"';
      END;

      CASE FilterType OF
        FilterType::Sorting:
          BEGIN
            FilterString := FilterString + STRSUBSTNO('SORTING(%1) ',Value);
          END;
        FilterType::Order:
          BEGIN
            CASE Value OF
              'ASC':  FilterString := FilterString + 'ORDER(Ascending) ';
              'DESC': FilterString := FilterString + 'ORDER(Descending) ';
            END;
          END;
        FilterType::Const:
          BEGIN
            IF STRPOS(FilterString, 'WHERE') <= 0 THEN
              FilterString := FilterString + 'WHERE(';

            // change F7-Filter format to form filter format for empty string condition ('' or ='')
            IF (Value = '''''') OR (Value = '=''''') THEN
              Value := '';

            FilterString := FilterString + STRSUBSTNO('%1=CONST(%2),',Fieldname,Value);
          END;
        FilterType::Filter:
          BEGIN
            IF STRPOS(FilterString, 'WHERE') <= 0 THEN
              FilterString := FilterString + 'WHERE(';
            FilterString := FilterString + STRSUBSTNO('%1=FILTER(%2),',Fieldname,Value);
          END;
        FilterType::AddEnd:
          BEGIN
            IF STRPOS(FilterString, 'WHERE') > 0 THEN BEGIN
              IF COPYSTR(FilterString,STRLEN(FilterString),1) = ',' THEN
                FilterString := COPYSTR(FilterString,1,(STRLEN(FilterString) - 1));
              FilterString := FilterString + ')';
            END;
          END;
      END;
    END;

    PROCEDURE CheckStringForFilter@1000000051(ValueFromXML@1000000000 : Text[1024]) : Boolean;
    BEGIN
      // Check if one of the following character combinations is in the FilterValue
      IF (STRPOS(ValueFromXML,'..') > 0) OR
        (STRPOS(ValueFromXML,'<>') > 0) OR
        (STRPOS(ValueFromXML,'>') > 0) OR
        (STRPOS(ValueFromXML,'<') > 0) OR
        (STRPOS(ValueFromXML,'<=') > 0) OR
        (STRPOS(ValueFromXML,'>=') > 0) OR
        (STRPOS(ValueFromXML,'=<') > 0) OR
        (STRPOS(ValueFromXML,'=>') > 0) OR
        (STRPOS(ValueFromXML,'|') > 0) OR
        (STRPOS(ValueFromXML,'&') > 0) OR
        (STRPOS(ValueFromXML,'*') > 0) OR
        (STRPOS(ValueFromXML,'@') > 0) THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE GetGrpReqTypeRec@1000000007(GroupCode@1000000000 : Code[20];RequestType@1000000001 : Code[20];VAR EPGrpReqType@1000000002 : Record 6805);
    BEGIN
      EPGrpReqType.GET(GroupCode,RequestType);
    END;

    PROCEDURE GetGrpReqTypeTableRec@1000000008(GroupCode@1000000000 : Code[20];RequestType@1000000001 : Code[20];VAR EPGrpReqTypeTable@1000000002 : Record 6811);
    BEGIN
      EPGrpReqTypeTable.RESET;
      EPGrpReqTypeTable.SETRANGE("Group Code",GroupCode);
      EPGrpReqTypeTable.SETRANGE("WP Request Code",RequestType);
      IF EPGrpReqTypeTable.FIND('-') THEN;
    END;

    PROCEDURE GetGrpReqTypeTableTabsRec@1000000011(GroupCode@1000000000 : Code[20];RequestType@1000000001 : Code[20];TableNo@1000000003 : Integer;VAR EPGrpReqTypeTableTab@1000000002 : Record 6806);
    BEGIN
      EPGrpReqTypeTableTab.RESET;
      EPGrpReqTypeTableTab.SETRANGE("Group Code",GroupCode);
      EPGrpReqTypeTableTab.SETRANGE("WP Request Code",RequestType);
      EPGrpReqTypeTableTab.SETRANGE("Table No.",TableNo);
      IF EPGrpReqTypeTableTab.FIND('-') THEN;
    END;

    PROCEDURE GetGrpReqTypeTableTabsFieldRec@1000000012(GroupCode@1000000003 : Code[20];RequestType@1000000001 : Code[20];TableNo@1000000000 : Integer;Tabcode@1000000004 : Code[20];VAR EPGrpReqTypeTableTabFields@1000000002 : Record 6807);
    BEGIN
      EPGrpReqTypeTableTabFields.RESET;
      EPGrpReqTypeTableTabFields.SETRANGE("Group Code",GroupCode);
      EPGrpReqTypeTableTabFields.SETRANGE("WP Request Code",RequestType);
      EPGrpReqTypeTableTabFields.SETRANGE("Table No.",TableNo);
      EPGrpReqTypeTableTabFields.SETRANGE("Tab Code",Tabcode);
      IF EPGrpReqTypeTableTabFields.FIND('-') THEN;
    END;

    PROCEDURE GetGrpRTTableTabsFieldSortKRec@1000000033(GroupCode@1000000003 : Code[20];RequestType@1000000001 : Code[20];TableNo@1000000000 : Integer;Tabcode@1000000004 : Code[20];FieldLineNo@1000000005 : Integer;VAR EPGrpRTTableTabFieldSortKey@1000000002 : Record 6822);
    BEGIN
      EPGrpRTTableTabFieldSortKey.RESET;
      EPGrpRTTableTabFieldSortKey.SETRANGE("Group Code",GroupCode);
      EPGrpRTTableTabFieldSortKey.SETRANGE("WP Request Code",RequestType);
      EPGrpRTTableTabFieldSortKey.SETRANGE("Table No.",TableNo);
      EPGrpRTTableTabFieldSortKey.SETRANGE("Tab Code",Tabcode);
      EPGrpRTTableTabFieldSortKey.SETRANGE("Field Line No.",FieldLineNo);
      IF EPGrpRTTableTabFieldSortKey.FIND('-') THEN;
    END;

    PROCEDURE CheckForGrpReqTypeTableHead@1000000016(VAR EPGrpReqTypeTable@1000000002 : Record 6811) Exist : Boolean;
    BEGIN
      Exist := FALSE;
      REPEAT
        IF NOT Exist THEN
          IF EPGrpReqTypeTable."Header or Line" = EPGrpReqTypeTable."Header or Line"::Header THEN
            Exist := TRUE;
      UNTIL EPGrpReqTypeTable.NEXT = 0;
      IF EPGrpReqTypeTable.FIND('-') THEN;
    END;

    PROCEDURE CheckForGrpReqTypeTableLine@1000000017(VAR EPGrpReqTypeTable@1000000002 : Record 6811) Exist : Boolean;
    BEGIN
      Exist := FALSE;
      REPEAT
        IF NOT Exist THEN
          IF EPGrpReqTypeTable."Header or Line" = EPGrpReqTypeTable."Header or Line"::Line THEN
            Exist := TRUE;
      UNTIL EPGrpReqTypeTable.NEXT = 0;
      IF EPGrpReqTypeTable.FIND('-') THEN;
    END;

    PROCEDURE GetGrpReqTypeTableHeadRec@1000000010(EPGrpReqTypeTableIn@1000000000 : Record 6811;VAR EPGrpReqTypeTableOut@1000000002 : Record 6811);
    BEGIN
      EPGrpReqTypeTableOut.RESET;
      EPGrpReqTypeTableOut.SETRANGE("Group Code",EPGrpReqTypeTableIn."Group Code");
      EPGrpReqTypeTableOut.SETRANGE("WP Request Code",EPGrpReqTypeTableIn."WP Request Code");
      EPGrpReqTypeTableOut.SETRANGE("Header or Line",EPGrpReqTypeTableOut."Header or Line"::Header);
      IF EPGrpReqTypeTableOut.FIND('-') THEN;
    END;

    PROCEDURE GetGrpReqTypeTableLineRec@1000000015(EPGrpReqTypeTableIn@1000000000 : Record 6811;VAR EPGrpReqTypeTableOut@1000000002 : Record 6811);
    BEGIN
      EPGrpReqTypeTableOut.RESET;
      EPGrpReqTypeTableOut.SETRANGE("Group Code",EPGrpReqTypeTableIn."Group Code");
      EPGrpReqTypeTableOut.SETRANGE("WP Request Code",EPGrpReqTypeTableIn."WP Request Code");
      EPGrpReqTypeTableOut.SETRANGE("Header or Line",EPGrpReqTypeTableOut."Header or Line"::Line);
      IF EPGrpReqTypeTableOut.FIND('-') THEN;
    END;

    PROCEDURE GetOptionStringElements@1000000014(VAR CompleteOptionString@1000000000 : Text[1024];VAR FirstOptionElement@1000000001 : Text[1024]);
    BEGIN
      // Returns the first option from an optionstring (seperated by comma) an removes this option from the String
      IF STRPOS(CompleteOptionString,',') > 0 THEN BEGIN
        FirstOptionElement := COPYSTR(CompleteOptionString,1,(STRPOS(CompleteOptionString,',') - 1));
        CompleteOptionString := COPYSTR(CompleteOptionString,(STRPOS(CompleteOptionString,',') + 1));
      END ELSE BEGIN
        FirstOptionElement := CompleteOptionString;
        CompleteOptionString := '';
      END;
    END;

    PROCEDURE ModifylFieldRef@1000000021(TableNo@1000000001 : Integer;FieldNo@1000000000 : Integer;ValueFromXML@1000 : Text[1024];GroupCode@1000000003 : Code[20];RequestType@1000000006 : Code[20];VAR MyFieldRef@1000000002 : FieldRef);
    VAR
      Fields@1000000005 : Record 2000000041;
    BEGIN
      IF NOT CheckIsEditable(GroupCode,RequestType,TableNo,FieldNo) THEN BEGIN
        EXIT;
      END;

      Fields.GET(TableNo,FieldNo);

      CASE Fields.Type OF
        Fields.Type::TableFilter:
          BEGIN
          END;
        Fields.Type::RecordID:
          BEGIN
          END;
        Fields.Type::Text:
          BEGIN
            MyFieldRef.VALIDATE(ValueFromXML);
          END;
        Fields.Type::Date:
          BEGIN
            MyFieldRef.VALIDATE(EPFormatFunctions.TextToDate(ValueFromXML));
          END;
        Fields.Type::Time:
          BEGIN
            MyFieldRef.VALIDATE(EPFormatFunctions.TextToTime(ValueFromXML));
          END;
        Fields.Type::DateFormula:
          BEGIN
          END;
        Fields.Type::Decimal:
          BEGIN
            MyFieldRef.VALIDATE(EPFormatFunctions.TextToDecimal(ValueFromXML));
          END;
        Fields.Type::Binary:
          BEGIN
          END;
        Fields.Type::BLOB:
          BEGIN
          END;
        Fields.Type::Boolean:
          BEGIN
            MyFieldRef.VALIDATE(EPFormatFunctions.TextToBoolean(ValueFromXML));
          END;
        Fields.Type::Integer:
          BEGIN
            MyFieldRef.VALIDATE(EPFormatFunctions.TextToInteger(ValueFromXML));
          END;
        Fields.Type::Code:
          BEGIN
            MyFieldRef.VALIDATE(ValueFromXML);
          END;
        Fields.Type::Option:
          BEGIN
            MyFieldRef.VALIDATE(EPFormatFunctions.TextToInteger(ValueFromXML));
          END;
        Fields.Type::BigInteger:
          BEGIN
          END;
        Fields.Type::Duration:
          BEGIN
          END;
        Fields.Type::GUID:
          BEGIN
          END;
        Fields.Type::DateTime:
          BEGIN
          END;
      END;
    END;

    PROCEDURE ModifylFieldRefWithoutValidate@1000000057(TableNo@1000000001 : Integer;FieldNo@1000000000 : Integer;ValueFromXML@1000000004 : Text[1024];GroupCode@1000000003 : Code[20];RequestType@1000000006 : Code[20];VAR MyFieldRef@1000000002 : FieldRef);
    VAR
      Fields@1000000005 : Record 2000000041;
    BEGIN
      // HERE
      IF NOT CheckIsEditable(GroupCode,RequestType,TableNo,FieldNo) THEN BEGIN
        EXIT;
      END;

      Fields.GET(TableNo,FieldNo);

      CASE Fields.Type OF
        Fields.Type::TableFilter:
          BEGIN
          END;
        Fields.Type::RecordID:
          BEGIN
          END;
        Fields.Type::Text:
          BEGIN
            MyFieldRef.VALUE(ValueFromXML);
          END;
        Fields.Type::Date:
          BEGIN
            MyFieldRef.VALUE(EPFormatFunctions.TextToDate(COPYSTR(ValueFromXML,1,10)));
          END;
        Fields.Type::Time:
          BEGIN
            MyFieldRef.VALUE(EPFormatFunctions.TextToTime(COPYSTR(ValueFromXML,1,8)));
          END;
        Fields.Type::DateFormula:
          BEGIN
          END;
        Fields.Type::Decimal:
          BEGIN
            MyFieldRef.VALUE(EPFormatFunctions.TextToDecimal(COPYSTR(ValueFromXML,1,250)));
          END;
        Fields.Type::Binary:
          BEGIN
          END;
        Fields.Type::BLOB:
          BEGIN
          END;
        Fields.Type::Boolean:
          BEGIN
            MyFieldRef.VALUE(EPFormatFunctions.TextToBoolean(COPYSTR(ValueFromXML,1,1)));
          END;
        Fields.Type::Integer:
          BEGIN
            MyFieldRef.VALUE(EPFormatFunctions.TextToInteger(COPYSTR(ValueFromXML,1,250)));
          END;
        Fields.Type::Code:
          BEGIN
            MyFieldRef.VALUE(ValueFromXML);
          END;
        Fields.Type::Option:
          BEGIN
            MyFieldRef.VALUE(EPFormatFunctions.TextToInteger(COPYSTR(ValueFromXML,1,250)));
          END;
        Fields.Type::BigInteger:
          BEGIN
          END;
        Fields.Type::Duration:
          BEGIN
          END;
        Fields.Type::GUID:
          BEGIN
          END;
        Fields.Type::DateTime:
          BEGIN
          END;
      END;
    END;

    PROCEDURE ModifylFieldRefOnInsert@1000000040(TableNo@1000000001 : Integer;FieldNo@1000000000 : Integer;ValueAsText@1000000004 : Text[200];VAR MyFieldRef@1000000002 : FieldRef);
    VAR
      Fields@1000000005 : Record 2000000041;
    BEGIN
      Fields.GET(TableNo,FieldNo);

      CASE Fields.Type OF
        Fields.Type::TableFilter:
          BEGIN
          END;
        Fields.Type::RecordID:
          BEGIN
          END;
        Fields.Type::Text:
          BEGIN
            MyFieldRef.VALIDATE(ValueAsText);
          END;
        Fields.Type::Date:
          BEGIN
            MyFieldRef.VALIDATE(EPFormatFunctions.TextToDate(ValueAsText));
          END;
        Fields.Type::Time:
          BEGIN
            MyFieldRef.VALIDATE(EPFormatFunctions.TextToTime(ValueAsText));
          END;
        Fields.Type::DateFormula:
          BEGIN
          END;
        Fields.Type::Decimal:
          BEGIN
            MyFieldRef.VALIDATE(EPFormatFunctions.TextToDecimal(ValueAsText));
          END;
        Fields.Type::Binary:
          BEGIN
          END;
        Fields.Type::BLOB:
          BEGIN
          END;
        Fields.Type::Boolean:
          BEGIN
            MyFieldRef.VALIDATE(EPFormatFunctions.TextToBoolean(ValueAsText));
          END;
        Fields.Type::Integer:
          BEGIN
            MyFieldRef.VALIDATE(EPFormatFunctions.TextToInteger(ValueAsText));
          END;
        Fields.Type::Code:
          BEGIN
            MyFieldRef.VALIDATE(ValueAsText);
          END;
        Fields.Type::Option:
          BEGIN
            MyFieldRef.VALIDATE(EPFormatFunctions.TextToInteger(ValueAsText));
          END;
        Fields.Type::BigInteger:
          BEGIN
          END;
        Fields.Type::Duration:
          BEGIN
          END;
        Fields.Type::GUID:
          BEGIN
          END;
        Fields.Type::DateTime:
          BEGIN
          END;
      END;
    END;

    PROCEDURE MergeErrorsPartToData@1000000022(VAR XMLDocData@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";VAR XMLDocErrors@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument");
    VAR
      XMLNodeData@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLNodeErrors@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      // Add the Error Document to the Data Docuemnt
      XMLNodeData := XMLDocData.documentElement;
      XMLNodeErrors := XMLDocErrors.documentElement;

      XMLNodeData.appendChild(XMLNodeErrors);
    END;

    PROCEDURE GetFieldType@1000000024(TableNo@1000000000 : Integer;FieldNo@1000000001 : Integer;VAR FieldType@1000000002 : 'TableFilter,RecordID,Text,Date,Time,DateFormula,Decimal,Binary,BLOB,Boolean,Integer,Code,Option,BigInteger,Duration,GUID,DateTime');
    VAR
      Fields@1000000003 : Record 2000000041;
    BEGIN
      Fields.GET(TableNo,FieldNo);

      CASE Fields.Type OF
        Fields.Type::TableFilter:
          BEGIN
            FieldType := FieldType::TableFilter;
          END;
        Fields.Type::RecordID:
          BEGIN
            FieldType := FieldType::RecordID;
          END;
        Fields.Type::Text:
          BEGIN
            FieldType := FieldType::Text;
          END;
        Fields.Type::Date:
          BEGIN
            FieldType := FieldType::Date;
          END;
        Fields.Type::Time:
          BEGIN
            FieldType := FieldType::Time;
          END;
        Fields.Type::DateFormula:
          BEGIN
            FieldType := FieldType::DateFormula;
          END;
        Fields.Type::Decimal:
          BEGIN
            FieldType := FieldType::Decimal;
          END;
        Fields.Type::Binary:
          BEGIN
            FieldType := FieldType::Binary;
          END;
        Fields.Type::BLOB:
          BEGIN
            FieldType := FieldType::BLOB;
          END;
        Fields.Type::Boolean:
          BEGIN
            FieldType := FieldType::Boolean;
          END;
        Fields.Type::Integer:
          BEGIN
            FieldType := FieldType::Integer;
          END;
        Fields.Type::Code:
          BEGIN
            FieldType := FieldType::Code;
          END;
        Fields.Type::Option:
          BEGIN
            FieldType := FieldType::Option;
          END;
        Fields.Type::BigInteger:
          BEGIN
            FieldType := FieldType::BigInteger;
          END;
        Fields.Type::Duration:
          BEGIN
            FieldType := FieldType::Duration;
          END;
        Fields.Type::GUID:
          BEGIN
            FieldType := FieldType::GUID;
          END;
        Fields.Type::DateTime:
          BEGIN
            FieldType := FieldType::DateTime;
          END;
      END;
    END;

    PROCEDURE CheckIsEditable@1000000025(GroupCode@1000000001 : Code[20];RequestType@1000000000 : Code[20];TableNo@1000000002 : Integer;FieldNo@1000000003 : Integer) : Boolean;
    VAR
      EPGrpReqTypeTableField@1000000004 : Record 6807;
    BEGIN
      EPGrpReqTypeTableField.RESET;
      EPGrpReqTypeTableField.SETRANGE("Group Code",GroupCode);
      EPGrpReqTypeTableField.SETRANGE("WP Request Code",RequestType);
      EPGrpReqTypeTableField.SETRANGE("Table No.",TableNo);
      EPGrpReqTypeTableField.SETRANGE("Field No.",FieldNo);
      IF NOT EPGrpReqTypeTableField.FIND('-') THEN
        EXIT(FALSE);
      IF (EPGrpReqTypeTableField.Appearance = EPGrpReqTypeTableField.Appearance::Editable)
        OR (EPGrpReqTypeTableField.Appearance = EPGrpReqTypeTableField.Appearance::"Editable (Indirect)") THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE CheckFieldAlreadyExist@1000000026(VAR EPReqTypeTabelTabField@1000000000 : Record 6807);
    VAR
      EPReqTypeTabelTabField2@1000000001 : Record 6807;
    BEGIN
      EPReqTypeTabelTabField2.RESET;
      EPReqTypeTabelTabField2.SETRANGE("WP Request Code",EPReqTypeTabelTabField."WP Request Code");
      EPReqTypeTabelTabField2.SETRANGE("Group Code",EPReqTypeTabelTabField."Group Code");
      EPReqTypeTabelTabField2.SETRANGE("Table No.",EPReqTypeTabelTabField."Table No.");
      EPReqTypeTabelTabField2.SETRANGE("Field No.",EPReqTypeTabelTabField."Field No.");
      IF EPReqTypeTabelTabField2.FIND('-') THEN
        ERROR(Text009,EPReqTypeTabelTabField."Field No.",EPReqTypeTabelTabField2."Tab Code");
    END;

    PROCEDURE CheckGrpRecEditAccess@1000000028(GroupCode@1000000001 : Code[20];RequestType@1000000002 : Code[20];TableNo@1000000003 : Integer;VAR MyRecordRef@1000000004 : RecordRef) : Boolean;
    VAR
      EPGrpReqTypeTableEditExp@1000000000 : Record 6810;
      MyFieldRef@1000000005 : FieldRef;
      Values@1000000006 : ARRAY [3] OF Text[1024];
    BEGIN
      IF MyRecordRef.FIND('-') THEN;

      EPGrpReqTypeTableEditExp.RESET;
      EPGrpReqTypeTableEditExp.SETRANGE("Group Code",GroupCode);
      EPGrpReqTypeTableEditExp.SETRANGE("WP Request Code",RequestType);
      EPGrpReqTypeTableEditExp.SETRANGE("Table No.",TableNo);
      IF NOT EPGrpReqTypeTableEditExp.FIND('-') THEN
        EXIT(TRUE); // If there are no entrys to check the record edit is allowed

      REPEAT
        Values[1] := '';
        Values[2] := '';
        Values[3] := '';
        MyFieldRef := MyRecordRef.FIELD(EPGrpReqTypeTableEditExp."Field No.");
        CASE EPGrpReqTypeTableEditExp.Comparison OF
          EPGrpReqTypeTableEditExp.Comparison::"<":
            BEGIN
              Values[1] := EPFormatFunctions.GetValueFromFieldRef(MyRecordRef.NUMBER,
                MyFieldRef.NUMBER,MyFieldRef);
              Values[2] := EPGrpReqTypeTableEditExp."Comparison Value 1";
              IF NOT CheckVALUELowerThan(TableNo,MyFieldRef.NUMBER,Values) THEN
                EXIT(FALSE);
            END;
          EPGrpReqTypeTableEditExp.Comparison::">":
            BEGIN
              Values[1] := EPFormatFunctions.GetValueFromFieldRef(MyRecordRef.NUMBER,
                MyFieldRef.NUMBER,MyFieldRef);
              Values[2] := EPGrpReqTypeTableEditExp."Comparison Value 1";
              IF NOT CheckVALUEHigherThan(TableNo,MyFieldRef.NUMBER,Values) THEN
                EXIT(FALSE);
            END;
          EPGrpReqTypeTableEditExp.Comparison::"=":
            BEGIN
              Values[1] := EPFormatFunctions.GetValueFromFieldRef(MyRecordRef.NUMBER,
                MyFieldRef.NUMBER,MyFieldRef);
              Values[2] := EPGrpReqTypeTableEditExp."Comparison Value 1";
              IF NOT CheckVALUEEqualTo(TableNo,MyFieldRef.NUMBER,Values) THEN
                EXIT(FALSE);
            END;
          EPGrpReqTypeTableEditExp.Comparison::"<>":
            BEGIN
              Values[1] := EPFormatFunctions.GetValueFromFieldRef(MyRecordRef.NUMBER,
                MyFieldRef.NUMBER,MyFieldRef);
              Values[2] := EPGrpReqTypeTableEditExp."Comparison Value 1";
              IF NOT CheckVALUENotEqualTo(TableNo,MyFieldRef.NUMBER,Values) THEN
                EXIT(FALSE);
            END;
          EPGrpReqTypeTableEditExp.Comparison::"..":
            BEGIN
              Values[1] := EPFormatFunctions.GetValueFromFieldRef(MyRecordRef.NUMBER,
                MyFieldRef.NUMBER,MyFieldRef);
              Values[2] := EPGrpReqTypeTableEditExp."Comparison Value 1";
              Values[3] := EPGrpReqTypeTableEditExp."Comparsion Value 2";
              IF NOT CheckVALUEBetween(TableNo,MyFieldRef.NUMBER,Values) THEN
                EXIT(FALSE);
            END;
        END;
      UNTIL EPGrpReqTypeTableEditExp.NEXT = 0;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckVALUELowerThan@1000000029(TableNo@1000000002 : Integer;FieldNo@1000000001 : Integer;Values@1000000003 : ARRAY [3] OF Text[1024]) : Boolean;
    VAR
      FieldType@1000000000 : 'TableFilter,RecordID,Text,Date,Time,DateFormula,Decimal,Binary,BLOB,Boolean,Integer,Code,Option,BigInteger,Duration,GUID,DateTime';
    BEGIN
      GetFieldType(TableNo,FieldNo,FieldType);

      CASE FieldType OF
        FieldType::TableFilter:
          BEGIN
          END;
        FieldType::RecordID:
          BEGIN
          END;
        FieldType::Text:
          BEGIN
            IF Values[1] < Values[2] THEN
              EXIT(TRUE);
          END;
        FieldType::Date:
          BEGIN
            IF EPFormatFunctions.TextToDate(COPYSTR(Values[1],1,10)) <
             EPFormatFunctions.TextToDate(COPYSTR(Values[2],1,10)) THEN
              EXIT(TRUE);
          END;
        FieldType::Time:
          BEGIN
            IF EPFormatFunctions.TextToTime(COPYSTR(Values[1],1,8)) <
             EPFormatFunctions.TextToTime(COPYSTR(Values[2],1,8)) THEN
              EXIT(TRUE);
          END;
        FieldType::DateFormula:
          BEGIN
          END;
        FieldType::Decimal:
          BEGIN
            IF EPFormatFunctions.TextToDecimal(COPYSTR(Values[1],1,250)) <
             EPFormatFunctions.TextToDecimal(COPYSTR(Values[2],1,250)) THEN
              EXIT(TRUE);
          END;
        FieldType::Binary:
          BEGIN
          END;
        FieldType::BLOB:
          BEGIN
          END;
        FieldType::Boolean:
          BEGIN
            IF EPFormatFunctions.TextToBoolean(COPYSTR(Values[1],1,1)) <
             EPFormatFunctions.TextToBoolean(COPYSTR(Values[2],1,1)) THEN
              EXIT(TRUE);
          END;
        FieldType::Integer:
          BEGIN
            IF EPFormatFunctions.TextToInteger(COPYSTR(Values[1],1,250)) <
             EPFormatFunctions.TextToInteger(COPYSTR(Values[2],1,250)) THEN
              EXIT(TRUE);
          END;
        FieldType::Code:
          BEGIN
            IF Values[1] < Values[2] THEN
              EXIT(TRUE);
          END;
        FieldType::Option:
          BEGIN
            IF EPFormatFunctions.TextToInteger(COPYSTR(Values[1],1,250)) <
             EPFormatFunctions.TextToInteger(COPYSTR(Values[2],1,250)) THEN
              EXIT(TRUE);
          END;
        FieldType::BigInteger:
          BEGIN
          END;
        FieldType::Duration:
          BEGIN
          END;
        FieldType::GUID:
          BEGIN
          END;
        FieldType::DateTime:
          BEGIN
          END;
      END;
    END;

    LOCAL PROCEDURE CheckVALUEHigherThan@1000000041(TableNo@1000000002 : Integer;FieldNo@1000000001 : Integer;Values@1000000003 : ARRAY [3] OF Text[1024]) : Boolean;
    VAR
      FieldType@1000000000 : 'TableFilter,RecordID,Text,Date,Time,DateFormula,Decimal,Binary,BLOB,Boolean,Integer,Code,Option,BigInteger,Duration,GUID,DateTime';
    BEGIN
      GetFieldType(TableNo,FieldNo,FieldType);

      CASE FieldType OF
        FieldType::TableFilter:
          BEGIN
          END;
        FieldType::RecordID:
          BEGIN
          END;
        FieldType::Text:
          BEGIN
            IF Values[1] > Values[2] THEN
              EXIT(TRUE);
          END;
        FieldType::Date:
          BEGIN
            IF EPFormatFunctions.TextToDate(COPYSTR(Values[1],1,10)) >
             EPFormatFunctions.TextToDate(COPYSTR(Values[2],1,10)) THEN
              EXIT(TRUE);
          END;
        FieldType::Time:
          BEGIN
            IF EPFormatFunctions.TextToTime(COPYSTR(Values[1],1,8)) >
             EPFormatFunctions.TextToTime(COPYSTR(Values[2],1,8)) THEN
              EXIT(TRUE);
          END;
        FieldType::DateFormula:
          BEGIN
          END;
        FieldType::Decimal:
          BEGIN
            IF EPFormatFunctions.TextToDecimal(COPYSTR(Values[1],1,250)) >
             EPFormatFunctions.TextToDecimal(COPYSTR(Values[2],1,250)) THEN
              EXIT(TRUE);
          END;
        FieldType::Binary:
          BEGIN
          END;
        FieldType::BLOB:
          BEGIN
          END;
        FieldType::Boolean:
          BEGIN
            IF EPFormatFunctions.TextToBoolean(COPYSTR(Values[1],1,1)) >
             EPFormatFunctions.TextToBoolean(COPYSTR(Values[2],1,1)) THEN
              EXIT(TRUE);
          END;
        FieldType::Integer:
          BEGIN
            IF EPFormatFunctions.TextToInteger(COPYSTR(Values[1],1,250)) >
             EPFormatFunctions.TextToInteger(COPYSTR(Values[2],1,250)) THEN
              EXIT(TRUE);
          END;
        FieldType::Code:
          BEGIN
            IF Values[1] > Values[2] THEN
              EXIT(TRUE);
          END;
        FieldType::Option:
          BEGIN
            IF EPFormatFunctions.TextToInteger(COPYSTR(Values[1],1,250)) >
             EPFormatFunctions.TextToInteger(COPYSTR(Values[2],1,250)) THEN
              EXIT(TRUE);
          END;
        FieldType::BigInteger:
          BEGIN
          END;
        FieldType::Duration:
          BEGIN
          END;
        FieldType::GUID:
          BEGIN
          END;
        FieldType::DateTime:
          BEGIN
          END;
      END;
    END;

    LOCAL PROCEDURE CheckVALUEEqualTo@1000000043(TableNo@1000000002 : Integer;FieldNo@1000000001 : Integer;Values@1000000003 : ARRAY [3] OF Text[1024]) : Boolean;
    VAR
      FieldType@1000000000 : 'TableFilter,RecordID,Text,Date,Time,DateFormula,Decimal,Binary,BLOB,Boolean,Integer,Code,Option,BigInteger,Duration,GUID,DateTime';
    BEGIN
      GetFieldType(TableNo,FieldNo,FieldType);

      CASE FieldType OF
        FieldType::TableFilter:
          BEGIN
          END;
        FieldType::RecordID:
          BEGIN
          END;
        FieldType::Text:
          BEGIN
            IF Values[1] = Values[2] THEN
              EXIT(TRUE);
          END;
        FieldType::Date:
          BEGIN
            IF EPFormatFunctions.TextToDate(COPYSTR(Values[1],1,10)) =
             EPFormatFunctions.TextToDate(COPYSTR(Values[2],1,10)) THEN
              EXIT(TRUE);
          END;
        FieldType::Time:
          BEGIN
            IF EPFormatFunctions.TextToTime(COPYSTR(Values[1],1,8)) =
             EPFormatFunctions.TextToTime(COPYSTR(Values[2],1,8)) THEN
              EXIT(TRUE);
          END;
        FieldType::DateFormula:
          BEGIN
          END;
        FieldType::Decimal:
          BEGIN
            IF EPFormatFunctions.TextToDecimal(COPYSTR(Values[1],1,250)) =
             EPFormatFunctions.TextToDecimal(COPYSTR(Values[2],1,250)) THEN
              EXIT(TRUE);
          END;
        FieldType::Binary:
          BEGIN
          END;
        FieldType::BLOB:
          BEGIN
          END;
        FieldType::Boolean:
          BEGIN
            IF EPFormatFunctions.TextToBoolean(COPYSTR(Values[1],1,1)) =
             EPFormatFunctions.TextToBoolean(COPYSTR(Values[2],1,1)) THEN
              EXIT(TRUE);
          END;
        FieldType::Integer:
          BEGIN
            IF EPFormatFunctions.TextToInteger(COPYSTR(Values[1],1,250)) =
             EPFormatFunctions.TextToInteger(COPYSTR(Values[2],1,250)) THEN
              EXIT(TRUE);
          END;
        FieldType::Code:
          BEGIN
            IF Values[1] = Values[2] THEN
              EXIT(TRUE);
          END;
        FieldType::Option:
          BEGIN
            IF EPFormatFunctions.TextToInteger(COPYSTR(Values[1],1,250)) =
             EPFormatFunctions.TextToInteger(COPYSTR(Values[2],1,250)) THEN
              EXIT(TRUE);
          END;
        FieldType::BigInteger:
          BEGIN
          END;
        FieldType::Duration:
          BEGIN
          END;
        FieldType::GUID:
          BEGIN
          END;
        FieldType::DateTime:
          BEGIN
          END;
      END;
    END;

    LOCAL PROCEDURE CheckVALUENotEqualTo@1000000044(TableNo@1000000002 : Integer;FieldNo@1000000001 : Integer;Values@1000000003 : ARRAY [3] OF Text[1024]) : Boolean;
    VAR
      FieldType@1000000000 : 'TableFilter,RecordID,Text,Date,Time,DateFormula,Decimal,Binary,BLOB,Boolean,Integer,Code,Option,BigInteger,Duration,GUID,DateTime';
    BEGIN
      GetFieldType(TableNo,FieldNo,FieldType);

      CASE FieldType OF
        FieldType::TableFilter:
          BEGIN
          END;
        FieldType::RecordID:
          BEGIN
          END;
        FieldType::Text:
          BEGIN
            IF Values[1] <> Values[2] THEN
              EXIT(TRUE);
          END;
        FieldType::Date:
          BEGIN
            IF EPFormatFunctions.TextToDate(COPYSTR(Values[1],1,10)) <>
             EPFormatFunctions.TextToDate(COPYSTR(Values[2],1,10)) THEN
              EXIT(TRUE);
          END;
        FieldType::Time:
          BEGIN
            IF EPFormatFunctions.TextToTime(COPYSTR(Values[1],1,8)) <>
             EPFormatFunctions.TextToTime(COPYSTR(Values[2],1,8)) THEN
              EXIT(TRUE);
          END;
        FieldType::DateFormula:
          BEGIN
          END;
        FieldType::Decimal:
          BEGIN
            IF EPFormatFunctions.TextToDecimal(COPYSTR(Values[1],1,250)) <>
             EPFormatFunctions.TextToDecimal(COPYSTR(Values[2],1,250)) THEN
              EXIT(TRUE);
          END;
        FieldType::Binary:
          BEGIN
          END;
        FieldType::BLOB:
          BEGIN
          END;
        FieldType::Boolean:
          BEGIN
            IF EPFormatFunctions.TextToBoolean(COPYSTR(Values[1],1,1)) <>
             EPFormatFunctions.TextToBoolean(COPYSTR(Values[2],1,1)) THEN
              EXIT(TRUE);
          END;
        FieldType::Integer:
          BEGIN
            IF EPFormatFunctions.TextToInteger(COPYSTR(Values[1],1,250)) <>
             EPFormatFunctions.TextToInteger(COPYSTR(Values[2],1,250)) THEN
              EXIT(TRUE);
          END;
        FieldType::Code:
          BEGIN
            IF Values[1] <> Values[2] THEN
              EXIT(TRUE);
          END;
        FieldType::Option:
          BEGIN
            IF EPFormatFunctions.TextToInteger(COPYSTR(Values[1],1,250)) <>
             EPFormatFunctions.TextToInteger(COPYSTR(Values[2],1,250)) THEN
              EXIT(TRUE);
          END;
        FieldType::BigInteger:
          BEGIN
          END;
        FieldType::Duration:
          BEGIN
          END;
        FieldType::GUID:
          BEGIN
          END;
        FieldType::DateTime:
          BEGIN
          END;
      END;
    END;

    LOCAL PROCEDURE CheckVALUEBetween@1000000045(TableNo@1000000002 : Integer;FieldNo@1000000001 : Integer;Values@1000000003 : ARRAY [3] OF Text[1024]) : Boolean;
    VAR
      FieldType@1000000000 : 'TableFilter,RecordID,Text,Date,Time,DateFormula,Decimal,Binary,BLOB,Boolean,Integer,Code,Option,BigInteger,Duration,GUID,DateTime';
    BEGIN
      GetFieldType(TableNo,FieldNo,FieldType);

      CASE FieldType OF
        FieldType::TableFilter:
          BEGIN
          END;
        FieldType::RecordID:
          BEGIN
          END;
        FieldType::Text:
          BEGIN
            IF (Values[2] <= Values[1]) AND (Values[3] >= Values[1]) THEN
              EXIT(TRUE);
          END;
        FieldType::Date:
          BEGIN
            IF (EPFormatFunctions.TextToDate(COPYSTR(Values[2],1,10)) <=
             EPFormatFunctions.TextToDate(COPYSTR(Values[1],1,10))) AND
             (EPFormatFunctions.TextToDate(COPYSTR(Values[3],1,10)) >=
             EPFormatFunctions.TextToDate(COPYSTR(Values[1],1,10))) THEN
              EXIT(TRUE);
          END;
        FieldType::Time:
          BEGIN
            IF (EPFormatFunctions.TextToTime(COPYSTR(Values[2],1,8)) <=
             EPFormatFunctions.TextToTime(COPYSTR(Values[1],1,8))) AND
             (EPFormatFunctions.TextToTime(COPYSTR(Values[3],1,8)) >=
             EPFormatFunctions.TextToTime(COPYSTR(Values[1],1,8))) THEN
              EXIT(TRUE);
          END;
        FieldType::DateFormula:
          BEGIN
          END;
        FieldType::Decimal:
          BEGIN
            IF (EPFormatFunctions.TextToDecimal(COPYSTR(Values[2],1,250)) <=
             EPFormatFunctions.TextToDecimal(COPYSTR(Values[1],1,250))) AND
             (EPFormatFunctions.TextToDecimal(COPYSTR(Values[3],1,250)) >=
             EPFormatFunctions.TextToDecimal(COPYSTR(Values[1],1,250))) THEN
              EXIT(TRUE);
          END;
        FieldType::Binary:
          BEGIN
          END;
        FieldType::BLOB:
          BEGIN
          END;
        FieldType::Boolean:
          BEGIN
            IF (EPFormatFunctions.TextToBoolean(COPYSTR(Values[2],1,1)) <=
             EPFormatFunctions.TextToBoolean(COPYSTR(Values[1],1,1))) AND
             (EPFormatFunctions.TextToBoolean(COPYSTR(Values[3],1,1)) >=
             EPFormatFunctions.TextToBoolean(COPYSTR(Values[1],1,1))) THEN
              EXIT(TRUE);
          END;
        FieldType::Integer:
          BEGIN
            IF (EPFormatFunctions.TextToInteger(COPYSTR(Values[2],1,250)) <=
             EPFormatFunctions.TextToInteger(COPYSTR(Values[1],1,250))) AND
             (EPFormatFunctions.TextToInteger(COPYSTR(Values[3],1,250)) >=
             EPFormatFunctions.TextToInteger(COPYSTR(Values[1],1,250))) THEN
              EXIT(TRUE);
          END;
        FieldType::Code:
          BEGIN
            IF (Values[2] <= Values[1]) AND (Values[3] >= Values[1]) THEN
              EXIT(TRUE);
          END;
        FieldType::Option:
          BEGIN
            IF (EPFormatFunctions.TextToInteger(COPYSTR(Values[2],1,250)) <=
             EPFormatFunctions.TextToInteger(COPYSTR(Values[1],1,250))) AND
             (EPFormatFunctions.TextToInteger(COPYSTR(Values[3],1,250)) >=
             EPFormatFunctions.TextToInteger(COPYSTR(Values[1],1,250))) THEN
              EXIT(TRUE);
          END;
        FieldType::BigInteger:
          BEGIN
          END;
        FieldType::Duration:
          BEGIN
          END;
        FieldType::GUID:
          BEGIN
          END;
        FieldType::DateTime:
          BEGIN
          END;
      END;
    END;

    PROCEDURE GetConnectionHeadLine@1000000030(GroupCode@1000000000 : Code[20];RequestType@1000000001 : Code[20];HeadTableNo@1000000002 : Integer;FieldOrKey@1000000003 : Boolean;VAR EPConnHeadLine@1000000004 : Record 6815);
    BEGIN
      EPConnHeadLine.RESET;
      EPConnHeadLine.SETRANGE("Group Code",GroupCode);
      EPConnHeadLine.SETRANGE("WP Request Code",RequestType);
      EPConnHeadLine.SETRANGE("Header Table No.",HeadTableNo);
      IF NOT FieldOrKey THEN
        EPConnHeadLine.SETRANGE("Apply Filter to",EPConnHeadLine."Apply Filter to"::Field)
      ELSE
        EPConnHeadLine.SETRANGE("Apply Filter to",EPConnHeadLine."Apply Filter to"::Key);

      IF EPConnHeadLine.FIND('-') THEN;
    END;

    PROCEDURE CheckIfDebug@1000000034() : Boolean;
    VAR
      EPSetup@1000000000 : Record 6800;
    BEGIN
      EPSetup.GET;
      EXIT(EPSetup."Write Debugging Info.");
    END;

    PROCEDURE DeleteTempNewHeadFieldTable@1000000036(GUID@1000000001 : Text[50]);
    VAR
      EPTempNewHeadFields@1000000000 : Record 6825;
    BEGIN
      // Delete the Fields that necessary for a new Head Record
      EPTempNewHeadFields.RESET;
      EPTempNewHeadFields.SETRANGE("Apply-to XML Element",EPTempNewHeadFields."Apply-to XML Element"::NewHead);
      EPTempNewHeadFields.SETRANGE(GUID,GUID);
      IF EPTempNewHeadFields.FIND('-') THEN BEGIN
        REPEAT
          EPTempNewHeadFields.DELETE;
        UNTIL EPTempNewHeadFields.NEXT = 0;
      END;
    END;

    PROCEDURE CreateTempHeadFilterTable@1000000037(FieldNo@1000000000 : Integer;Value@1000000001 : Text[200];GUID@1000000002 : Text[50]);
    VAR
      EPTempNewHeadFields@1000000003 : Record 6825;
      NextEntryNo@1000000004 : Integer;
    BEGIN
      // Create List with Fields that are used to build an Filter
      EPTempNewHeadFields.RESET;
      EPTempNewHeadFields.SETRANGE("Apply-to XML Element",EPTempNewHeadFields."Apply-to XML Element"::BuildFilter);
      EPTempNewHeadFields.SETRANGE(GUID,GUID);
      IF EPTempNewHeadFields.FIND('+') THEN
        NextEntryNo := EPTempNewHeadFields."Entry No." + 1
      ELSE
        NextEntryNo := 1;

      EPTempNewHeadFields.INIT;
      EPTempNewHeadFields."Apply-to XML Element" := EPTempNewHeadFields."Apply-to XML Element"::BuildFilter;
      EPTempNewHeadFields.GUID := GUID;
      EPTempNewHeadFields."Entry No." := NextEntryNo;
      EPTempNewHeadFields."Field No." := FieldNo;
      EPTempNewHeadFields.Value := Value;
      EPTempNewHeadFields.INSERT;
    END;

    PROCEDURE DeleteTempHeadFilterTable@1000000038(GUID@1000000002 : Text[50]);
    VAR
      EPTempNewHeadFields@1000000003 : Record 6825;
    BEGIN
      // Delete List with Fields that are used to build an Filter
      EPTempNewHeadFields.RESET;
      EPTempNewHeadFields.SETRANGE("Apply-to XML Element",EPTempNewHeadFields."Apply-to XML Element"::BuildFilter);
      EPTempNewHeadFields.SETRANGE(GUID,GUID);
      IF EPTempNewHeadFields.FIND('-') THEN BEGIN
        REPEAT
          EPTempNewHeadFields.DELETE;
        UNTIL EPTempNewHeadFields.NEXT = 0;
      END;
    END;

    PROCEDURE CreateTempHeadFilterKeys@1000000042(FieldNo@1000000000 : Integer;GUID@1000000002 : Text[50]);
    VAR
      EPTempNewHeadFields@1000000003 : Record 6825;
      NextEntryNo@1000000004 : Integer;
    BEGIN
      // Create List with Fields that are used to build an Filter
      EPTempNewHeadFields.RESET;
      EPTempNewHeadFields.SETRANGE("Apply-to XML Element",EPTempNewHeadFields."Apply-to XML Element"::Key);
      EPTempNewHeadFields.SETRANGE(GUID,GUID);
      IF EPTempNewHeadFields.FIND('+') THEN
        NextEntryNo := EPTempNewHeadFields."Entry No." + 1
      ELSE
        NextEntryNo := 1;

      EPTempNewHeadFields.INIT;
      EPTempNewHeadFields."Apply-to XML Element" := EPTempNewHeadFields."Apply-to XML Element"::Key;
      EPTempNewHeadFields.GUID := GUID;
      EPTempNewHeadFields."Entry No." := NextEntryNo;
      EPTempNewHeadFields."Field No." := FieldNo;
      EPTempNewHeadFields.INSERT;
    END;

    PROCEDURE DeleteTempHeadFilterKeys@1000000048(GUID@1000000002 : Text[50]);
    VAR
      EPTempNewHeadFields@1000000003 : Record 6825;
    BEGIN
      // Delete List with Key Fields that are used to build an Filter
      EPTempNewHeadFields.RESET;
      EPTempNewHeadFields.SETRANGE("Apply-to XML Element",EPTempNewHeadFields."Apply-to XML Element"::Key);
      EPTempNewHeadFields.SETRANGE(GUID,GUID);
      IF EPTempNewHeadFields.FIND('-') THEN BEGIN
        REPEAT
          EPTempNewHeadFields.DELETE;
        UNTIL EPTempNewHeadFields.NEXT = 0;
      END;
    END;

    PROCEDURE GetGrpRTTableTabsFldLookupRec@1000000046(GroupCode@1000000000 : Code[20];RequestType@1000000001 : Code[20];TableNo@1000000002 : Integer;TabCode@1000000003 : Code[20];LineNo@1000000004 : Integer;VAR EPGrpRTTableTabFldLookup@1000000005 : Record 6827);
    BEGIN
      EPGrpRTTableTabFldLookup.RESET;
      EPGrpRTTableTabFldLookup.SETRANGE("Group Code",GroupCode);
      EPGrpRTTableTabFldLookup.SETRANGE("WP Request Code",RequestType);
      EPGrpRTTableTabFldLookup.SETRANGE("Table No.",TableNo);
      EPGrpRTTableTabFldLookup.SETRANGE("Tab Code",TabCode);
      EPGrpRTTableTabFldLookup.SETRANGE("Line No.",LineNo);
    END;

    PROCEDURE GetGRTTTabFldLookupCondRec@1000000049(GroupCode@1000000000 : Code[20];RequestType@1000000001 : Code[20];TableNo@1000000002 : Integer;TabCode@1000000003 : Code[20];LineNo@1000000004 : Integer;LookupRequestType@1000000005 : Code[20];VAR EPGRTTTableTabFldLookupCond@1000000006 : Record 6828);
    BEGIN
      EPGRTTTableTabFldLookupCond.RESET;
      EPGRTTTableTabFldLookupCond.SETRANGE("Group Code",GroupCode);
      EPGRTTTableTabFldLookupCond.SETRANGE("WP Request Code",RequestType);
      EPGRTTTableTabFldLookupCond.SETRANGE("Table No.",TableNo);
      EPGRTTTableTabFldLookupCond.SETRANGE("Tab Code",TabCode);
      EPGRTTTableTabFldLookupCond.SETRANGE("Line No.",LineNo);
      EPGRTTTableTabFldLookupCond.SETRANGE("Lookup WP Request Code",LookupRequestType);
    END;

    PROCEDURE GetGRTTTabFldLookupMapRec@1000000047(GroupCode@1000000000 : Code[20];RequestType@1000000001 : Code[20];TableNo@1000000002 : Integer;TabCode@1000000003 : Code[20];LineNo@1000000004 : Integer;LookupRequestType@1000000005 : Code[20];VAR EPGRTTTableTabFldLookupMap@1000000006 : Record 6829);
    BEGIN
      EPGRTTTableTabFldLookupMap.RESET;
      EPGRTTTableTabFldLookupMap.SETRANGE("Group Code",GroupCode);
      EPGRTTTableTabFldLookupMap.SETRANGE("WP Request Code",RequestType);
      EPGRTTTableTabFldLookupMap.SETRANGE("Table No.",TableNo);
      EPGRTTTableTabFldLookupMap.SETRANGE("Tab Code",TabCode);
      EPGRTTTableTabFldLookupMap.SETRANGE("Line No.",LineNo);
      EPGRTTTableTabFldLookupMap.SETRANGE("Lookup WP Request Code",LookupRequestType);
    END;

    PROCEDURE GetReqTypesRec@1000000050(GroupCode@1000000000 : Code[50];RTLType@1000000002 : Integer;VAR EPGrpReqType@1000000003 : Record 6805);
    BEGIN
      EPGrpReqType.RESET;
      EPGrpReqType.SETRANGE("Group Code",GroupCode);

      CASE RTLType OF
        0:
          EPGrpReqType.SETRANGE(Type,EPGrpReqType.Type::Card);
        1:
          EPGrpReqType.SETRANGE(Type,EPGrpReqType.Type::List);
        2:
          EPGrpReqType.SETRANGE(Type,EPGrpReqType.Type::"Header + Line");
      END;

      IF EPGrpReqType.FIND('-') THEN;
    END;

    PROCEDURE GetGroupTranEPationID@1000000032(GroupCode@1000000000 : Code[20]) : Integer;
    VAR
      Groups@1000000001 : Record 6804;
    BEGIN
      IF NOT Groups.GET(GroupCode) THEN
        EXIT(0);

      EXIT(Groups."Caption ID");
    END;

    PROCEDURE GetMultilangDescription@1000000052(TableNo@1000000000 : Integer;LanguageID@1000000001 : Integer;TranslationID@1000000002 : Integer) ReturnValue : Text[250];
    VAR
      EPTranslation@1000000003 : Record 6850;
    BEGIN
      EPTranslation.RESET;
      EPTranslation.SETRANGE("Table No.", TableNo);
      EPTranslation.SETRANGE("Language ID", LanguageID);
      EPTranslation.SETRANGE("Caption ID", TranslationID);

      IF EPTranslation.FIND('-') THEN BEGIN
        ReturnValue := EPTranslation.Caption;
      END ELSE BEGIN
        ReturnValue := '';
      END;
    END;

    PROCEDURE GetStandGrpReqTypeFilterKeys@1000000053(VAR EPGrpRTFilterKeys@1000000001 : Record 6833;GroupCode@1000000000 : Code[20];ReqType@1000000002 : Code[20];TableNo@1000000003 : Integer);
    BEGIN
      EPGrpRTFilterKeys.RESET;
      EPGrpRTFilterKeys.SETRANGE("Group Code",GroupCode);
      EPGrpRTFilterKeys.SETRANGE("WP Request Code",ReqType);
      EPGrpRTFilterKeys.SETRANGE("Table No.",TableNo);
      IF EPGrpRTFilterKeys.FIND('-') THEN;
    END;

    PROCEDURE GetStandGrpReqTypeFilterFields@1000000054(VAR EPGrpRTFilterFields@1000000000 : Record 6832;GroupCode@1000000002 : Code[20];ReqType@1000000001 : Code[20];TableNo@1000000003 : Integer);
    BEGIN
      EPGrpRTFilterFields.RESET;
      EPGrpRTFilterFields.SETRANGE("Group Code",GroupCode);
      EPGrpRTFilterFields.SETRANGE("WP Request Code",ReqType);
      EPGrpRTFilterFields.SETRANGE("Table No.",TableNo);
      IF EPGrpRTFilterFields.FIND('-') THEN;
    END;

    PROCEDURE GetPagingOptionsFromConfig@1000000055(GroupCode@1000000003 : Code[20];RequestType@1000000004 : Code[20];TableNo@1000000005 : Integer;VAR StartRecord@1000000000 : Integer;VAR RecordsToShow@1000000001 : Integer;RecordCount@1000000006 : Integer);
    VAR
      EPGrpReqTypeTable@1000000002 : Record 6811;
    BEGIN
      StartRecord := 0;
      RecordsToShow := 0;

      EPGrpReqTypeTable.RESET;
      EPGrpReqTypeTable.SETRANGE("Group Code",GroupCode);
      EPGrpReqTypeTable.SETRANGE("WP Request Code",RequestType);
      EPGrpReqTypeTable.SETRANGE("Table No.",TableNo);
      EPGrpReqTypeTable.SETRANGE("Header or Line",EPGrpReqTypeTable."Header or Line"::Line); // We only need LineTables (eq. List)
      IF EPGrpReqTypeTable.FIND('-') THEN BEGIN
        StartRecord := EPGrpReqTypeTable."First Record Shown";
        RecordsToShow := EPGrpReqTypeTable."No. of Records Shown";
        IF (RecordsToShow <> 0) AND (StartRecord <> 0) THEN BEGIN
          IF RecordCount < StartRecord THEN
            StartRecord := RecordCount;

          IF StartRecord > RecordsToShow THEN BEGIN
            IF (StartRecord MOD RecordsToShow) = 0 THEN
              StartRecord := (StartRecord / RecordsToShow - 1) * RecordsToShow + 1
            ELSE
              StartRecord := ROUND(StartRecord / RecordsToShow,1,'<') * RecordsToShow + 1;
          END ELSE
            StartRecord := 1;
        END ELSE BEGIN
          RecordsToShow := 0;
          StartRecord := 0;
        END;
      END;
    END;

    PROCEDURE GetSortOrderFromConfig@1000000056(GroupCode@1000000003 : Code[20];RequestType@1000000004 : Code[20];TableNo@1000000005 : Integer) SortOrder : Code[10];
    VAR
      EPGrpReqTypeTable@1000000002 : Record 6811;
    BEGIN
      SortOrder := '';

      EPGrpReqTypeTable.RESET;
      EPGrpReqTypeTable.SETRANGE("Group Code",GroupCode);
      EPGrpReqTypeTable.SETRANGE("WP Request Code",RequestType);
      EPGrpReqTypeTable.SETRANGE("Table No.",TableNo);
      EPGrpReqTypeTable.SETRANGE("Header or Line",EPGrpReqTypeTable."Header or Line"::Line); // We only need LineTables (eq. List)
      IF EPGrpReqTypeTable.FIND('-') THEN BEGIN
        CASE EPGrpReqTypeTable."Sorting Order" OF
          EPGrpReqTypeTable."Sorting Order"::Ascending: SortOrder := 'ASC';
          EPGrpReqTypeTable."Sorting Order"::Descending: SortOrder := 'DESC';
        END;
      END;
    END;

    PROCEDURE GetReqTypeFunctions@1000000031(GroupCode@1000000000 : Code[20];RequestType@1000000001 : Code[20];VAR Type@1000000002 : ' ,List,Detail,Head+Line,System');
    VAR
      EPGrpReqType@1000000003 : Record 6805;
    BEGIN
      IF NOT EPGrpReqType.GET(GroupCode,RequestType) THEN
        Type := Type::" "
      ELSE
        Type := EPGrpReqType.Type;
    END;

    PROCEDURE GetTableKeys@1000000059(TableNo@1000000001 : Integer) CurrKeyIndex : Integer;
    VAR
      TempTable@1000000008 : TEMPORARY Record 6800;
      frmTempTable@1000000007 : Form 6860;
      MyRecRef@1000000006 : RecordRef;
      MyKeyRef@1000000005 : KeyRef;
      MyFieldRef@1000000004 : FieldRef;
      i@1000000003 : Integer;
      j@1000000002 : Integer;
      DummyKeyString@1000000000 : Text[250];
    BEGIN
      CurrKeyIndex := 0;
      MyRecRef.OPEN(TableNo,FALSE);

      FOR i := 1 TO MyRecRef.KEYCOUNT DO BEGIN
        DummyKeyString := '';
        MyKeyRef := MyRecRef.KEYINDEX(i);
        IF MyKeyRef.ACTIVE THEN BEGIN
          FOR j := 1 TO MyKeyRef.FIELDCOUNT DO BEGIN
            MyFieldRef := MyKeyRef.FIELDINDEX(j);
            IF STRLEN(DummyKeyString) <= 250 THEN
              DummyKeyString := DummyKeyString + MyFieldRef.CAPTION + ',';
          END;
        END;

        IF MyKeyRef.ACTIVE THEN
          IF DummyKeyString <> '' THEN
            IF COPYSTR(DummyKeyString,STRLEN(DummyKeyString)) = ',' THEN
              DummyKeyString := COPYSTR(DummyKeyString,1,(STRLEN(DummyKeyString) - 1));

        IF MyKeyRef.ACTIVE THEN BEGIN
          IF DummyKeyString <> '' THEN BEGIN
            TempTable.INIT;
            TempTable."Primary Key" := STRSUBSTNO('%1',i);
            TempTable."Temp. Key Index" := i;
            TempTable."Temp. Table No." := TableNo;
            TempTable."Temp. Key String" := DummyKeyString;
            TempTable.INSERT;
          END;
        END;
      END;

      frmTempTable.SetTempTable(TempTable);
      frmTempTable.CAPTION(STRSUBSTNO(Text012,frmTempTable.CAPTION,MyRecRef.CAPTION));
      frmTempTable.LOOKUPMODE(TRUE);
      IF ACTION::LookupOK = frmTempTable.RUNMODAL THEN BEGIN
        CurrKeyIndex := frmTempTable.GetCurrKeyIndex;
      END;

      MyRecRef.CLOSE;
    END;

    PROCEDURE MakeActionFilterKeyEntry@1000000060(VAR EPActionFilterKeys@1000000000 : Record 6813;TableNo@1000000002 : Integer;KeyIndex@1000000003 : Integer);
    VAR
      EPActionFilterKeys2@1000000001 : TEMPORARY Record 6813;
      MyRecRef@1000000005 : RecordRef;
      MyKeyRef@1000000004 : KeyRef;
      MyFieldRef@1000000007 : FieldRef;
      i@1000000006 : Integer;
      NextLineNo@1000000008 : Integer;
    BEGIN
      MyRecRef.OPEN(TableNo,FALSE);

      EPActionFilterKeys2.COPY(EPActionFilterKeys);
      IF EPActionFilterKeys2.FIND('-') THEN;
      EPActionFilterKeys.DELETEALL;

      MyKeyRef := MyRecRef.KEYINDEX(KeyIndex);
      FOR i := 1 TO MyKeyRef.FIELDCOUNT DO BEGIN
        NextLineNo := NextLineNo + 10000;
        MyFieldRef := MyKeyRef.FIELDINDEX(i);
        EPActionFilterKeys.INIT;
        EPActionFilterKeys.TRANSFERFIELDS(EPActionFilterKeys2);
        EPActionFilterKeys."Line No." := NextLineNo;
        EPActionFilterKeys."Key Field No." := MyFieldRef.NUMBER;
        EPActionFilterKeys."Key Field Name" := MyFieldRef.CAPTION;
        EPActionFilterKeys.INSERT;
      END;
    END;

    PROCEDURE MakeConnHeadLineFilterKeyEntry@1000000062(VAR EPConnHeadLineFilterKeys@1000000000 : Record 6815;TableNo@1000000002 : Integer;KeyIndex@1000000003 : Integer);
    VAR
      EPConnHeadLineFilterKeys2@1000000001 : TEMPORARY Record 6815;
      MyRecRef@1000000005 : RecordRef;
      MyKeyRef@1000000004 : KeyRef;
      MyFieldRef@1000000007 : FieldRef;
      i@1000000006 : Integer;
      NextLineNo@1000000008 : Integer;
    BEGIN
      MyRecRef.OPEN(TableNo,FALSE);

      EPConnHeadLineFilterKeys2.COPY(EPConnHeadLineFilterKeys);
      IF EPConnHeadLineFilterKeys2.FIND('-') THEN;
      EPConnHeadLineFilterKeys.DELETEALL;

      MyKeyRef := MyRecRef.KEYINDEX(KeyIndex);
      FOR i := 1 TO MyKeyRef.FIELDCOUNT DO BEGIN
        NextLineNo := NextLineNo + 10000;
        MyFieldRef := MyKeyRef.FIELDINDEX(i);
        EPConnHeadLineFilterKeys.INIT;
        EPConnHeadLineFilterKeys.TRANSFERFIELDS(EPConnHeadLineFilterKeys2);
        EPConnHeadLineFilterKeys."Line No." := NextLineNo;
        EPConnHeadLineFilterKeys."Line Key Field No." := MyFieldRef.NUMBER;
        EPConnHeadLineFilterKeys."Line Key Field Name" := MyFieldRef.CAPTION;
        EPConnHeadLineFilterKeys.INSERT;
      END;
    END;

    PROCEDURE MakeSortKeyEntry@1000000063(VAR EPSortKeys@1000000000 : Record 6822;TableNo@1000000002 : Integer;KeyIndex@1000000003 : Integer);
    VAR
      EPSortKeys2@1000000009 : TEMPORARY Record 6822;
      MyRecRef@1000000005 : RecordRef;
      MyKeyRef@1000000004 : KeyRef;
      MyFieldRef@1000000007 : FieldRef;
      i@1000000006 : Integer;
      NextLineNo@1000000008 : Integer;
    BEGIN
      MyRecRef.OPEN(TableNo,FALSE);

      EPSortKeys2.COPY(EPSortKeys);
      IF EPSortKeys2.FIND('-') THEN;
      EPSortKeys.DELETEALL;

      MyKeyRef := MyRecRef.KEYINDEX(KeyIndex);
      FOR i := 1 TO MyKeyRef.FIELDCOUNT DO BEGIN
        NextLineNo := NextLineNo + 10000;
        MyFieldRef := MyKeyRef.FIELDINDEX(i);
        EPSortKeys.INIT;
        EPSortKeys.TRANSFERFIELDS(EPSortKeys2);
        EPSortKeys."Line No." := NextLineNo;
        EPSortKeys."Key Field No." := MyFieldRef.NUMBER;
        EPSortKeys."Key Field Name" := MyFieldRef.CAPTION;
        EPSortKeys.INSERT;
      END;
    END;

    PROCEDURE MakeStandardFilterKeyEntry@1000000064(VAR EPStandardFilterKeys@1000000000 : Record 6833;TableNo@1000000002 : Integer;KeyIndex@1000000003 : Integer);
    VAR
      EPStandardFilterKeys2@1000000001 : TEMPORARY Record 6833;
      MyRecRef@1000000005 : RecordRef;
      MyKeyRef@1000000004 : KeyRef;
      MyFieldRef@1000000007 : FieldRef;
      i@1000000006 : Integer;
      NextLineNo@1000000008 : Integer;
    BEGIN
      MyRecRef.OPEN(TableNo,FALSE);

      EPStandardFilterKeys2.COPY(EPStandardFilterKeys);
      IF EPStandardFilterKeys2.FIND('-') THEN;
      EPStandardFilterKeys.DELETEALL;

      MyKeyRef := MyRecRef.KEYINDEX(KeyIndex);
      FOR i := 1 TO MyKeyRef.FIELDCOUNT DO BEGIN
        NextLineNo := NextLineNo + 10000;
        MyFieldRef := MyKeyRef.FIELDINDEX(i);
        EPStandardFilterKeys.INIT;
        EPStandardFilterKeys.TRANSFERFIELDS(EPStandardFilterKeys2);
        EPStandardFilterKeys.Position := NextLineNo;
        EPStandardFilterKeys."Key Field No." := MyFieldRef.NUMBER;
        EPStandardFilterKeys."Key Field Name" := MyFieldRef.CAPTION;
        EPStandardFilterKeys.INSERT;
      END;
    END;

    PROCEDURE GetOptionValueList@1000000065(TableNo@1000000005 : Integer;FieldNo@1000000006 : Integer;OldValue@1000000007 : Text[30]) strOptionValue : Text[30];
    VAR
      TempOptionValues@1000 : TEMPORARY Record 6800;
      frmTempOptionValues@1001 : Form 6861;
      OptionCaptions@1000000004 : Text[1024];
      OptionCaption@1000000003 : Text[1024];
      OptionCounter@1000000001 : Integer;
      FieldCaption@1000000009 : Text[80];
      TableCaption@1000000010 : Text[80];
    BEGIN
      strOptionValue := '';
      GetOptionCaption(TableNo,FieldNo,OptionCaptions);

      OptionCounter := 0;
      REPEAT
        GetOptionStringElements(OptionCaptions,OptionCaption);
        IF NOT ((OptionCounter > 0 ) AND (OptionCaption = '')) THEN BEGIN
          TempOptionValues.INIT;
          TempOptionValues."Primary Key" := STRSUBSTNO('%1',OptionCounter);
          TempOptionValues."Temp. Option Value" := OptionCounter;
          TempOptionValues."Temp. Option Caption" := COPYSTR(OptionCaption,1,250);
          TempOptionValues.INSERT;
        END;
        OptionCounter := OptionCounter + 1;
      UNTIL STRLEN(OptionCaptions) <= 0;

      GetFieldCaption(TableNo,FieldNo,FieldCaption);
      GetTableCaption(TableNo,TableCaption);
      frmTempOptionValues.SetTempTable(TempOptionValues);
      frmTempOptionValues.CAPTION := STRSUBSTNO(Text011,FieldCaption,TableCaption);
      frmTempOptionValues.LOOKUPMODE(TRUE);
      IF ACTION::LookupOK = frmTempOptionValues.RUNMODAL THEN
        strOptionValue := EPFormatFunctions.IntegerToText(frmTempOptionValues.GetCurrOptionValue)
      ELSE
        strOptionValue := OldValue;
    END;

    PROCEDURE CutWSSUserIDto20@1000000067(WSSUserID@1000000000 : Code[50]) UserID : Code[20];
    BEGIN
      WSSUserID := COPYSTR(WSSUserID,STRPOS(WSSUserID,'\') + 1); // Cut Domainname from UserID
      IF STRLEN(WSSUserID) > 20 THEN
        WSSUserID := COPYSTR(WSSUserID,1,20);

      UserID := WSSUserID;
    END;

    PROCEDURE CheckChangeLogInLic@1000000068() : Boolean;
    VAR
      Lic@1000000000 : Record 2000000043;
    BEGIN
      IF NOT Lic.GET(Lic."Object Type"::Codeunit,423) THEN
        EXIT(FALSE);

      IF Lic."Execute Permission" = Lic."Execute Permission"::" " THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE RenameTableNo@1000000071(VAR TableRec@1000000000 : Record 6811;VAR xTableRec@1000000001 : Record 6811);
    VAR
      TableTab@1005 : Record 6806;
      TableAction@1004 : Record 6809;
      TableHeadLine@1003 : Record 6815;
      TableDefaultFilterFields@1002 : Record 6832;
      TableDefaultFilterKeys@1001 : Record 6833;
      TableEditableCheck@1000 : Record 6810;
      ConfirmText@1000000016 : Text[1024];
      ConfirmationRequired@1000000015 : Boolean;
      HasTabStrips@1000000014 : Boolean;
      HasActions@1000000013 : Boolean;
      HasHLC@1000000012 : Boolean;
      HasDefaultFilter@1000000011 : Boolean;
      HasRSEditCheck@1000000010 : Boolean;
      HasDefaultFilterKeys@1000000003 : Boolean;
      HasDefaultFilterFields@1000000002 : Boolean;
    BEGIN
      ConfirmText := '';
      ConfirmationRequired := FALSE;
      HasTabStrips := FALSE;
      HasActions := FALSE;
      HasHLC := FALSE;
      HasDefaultFilter := FALSE;
      HasDefaultFilterKeys := FALSE;
      HasDefaultFilterFields := FALSE;
      HasRSEditCheck := FALSE;

      IF xTableRec."Table No." <> 0 THEN // check for insert

        IF TableRec."Table No." <> xTableRec."Table No." THEN BEGIN // rename-action for table-no, check for indicated data elements
          // check for related tab strips
          TableTab.RESET;
          TableTab.SETRANGE("Group Code", TableRec."Group Code");
          TableTab.SETRANGE("WP Request Code", TableRec."WP Request Code");
          TableTab.SETRANGE("Table No.", xTableRec."Table No.");
          TableTab.SETRANGE("Header or Line", TableRec."Header or Line");
          IF TableTab.FIND('-') THEN BEGIN
            HasTabStrips := TRUE;
            ConfirmText := ConfirmText + Text003 + '\';
            ConfirmationRequired := TRUE;
          END;

          // check for related actions (only if not template-request type)
          IF TableRec."Group Code" <> '' THEN BEGIN
            TableAction.RESET;
            TableAction.SETRANGE("Group Code", TableRec."Group Code");
            TableAction.SETRANGE("WP Request Code", TableRec."WP Request Code");
            TableAction.SETRANGE("Table No.", xTableRec."Table No.");
            TableAction.SETRANGE("Header or Line", TableRec."Header or Line");
            IF TableAction.FIND('-') THEN BEGIN
              HasActions := TRUE;
              ConfirmText := ConfirmText + Text004 + '\';
              ConfirmationRequired := TRUE;
            END;
          END;

          // check for related head-line-connection (keys and fields are stored in one table)
          TableHeadLine.RESET;
          TableHeadLine.SETRANGE("Group Code", TableRec."Group Code");
          TableHeadLine.SETRANGE("WP Request Code", TableRec."WP Request Code");
          TableHeadLine.SETRANGE("Header Table No.", xTableRec."Table No.");
          IF TableHeadLine.FIND('-') THEN BEGIN
            HasHLC := TRUE;
            ConfirmText := ConfirmText + Text005 + '\';
            ConfirmationRequired := TRUE;
          END;

          // check for related default filter (keys and fields are stored in separate tables)
          TableDefaultFilterKeys.RESET;
          TableDefaultFilterKeys.SETRANGE("Group Code", TableRec."Group Code");
          TableDefaultFilterKeys.SETRANGE("WP Request Code", TableRec."WP Request Code");
          TableDefaultFilterKeys.SETRANGE("Table No.", xTableRec."Table No.");
          IF TableDefaultFilterKeys.FIND('-') THEN BEGIN
            HasDefaultFilter := TRUE;
            HasDefaultFilterKeys := TRUE;
          END;

          TableDefaultFilterFields.RESET;
          TableDefaultFilterFields.SETRANGE("Group Code", TableRec."Group Code");
          TableDefaultFilterFields.SETRANGE("WP Request Code", TableRec."WP Request Code");
          TableDefaultFilterFields.SETRANGE("Table No.", xTableRec."Table No.");
          IF TableDefaultFilterFields.FIND('-') THEN BEGIN
            HasDefaultFilter := TRUE;
            HasDefaultFilterFields := TRUE;
          END;

          IF HasDefaultFilter THEN BEGIN
            ConfirmText := ConfirmText + Text006 + '\';
            ConfirmationRequired := TRUE;
          END;

          // check for related recordset-editable-check
          TableEditableCheck.RESET;
          TableEditableCheck.SETRANGE("Group Code", TableRec."Group Code");
          TableEditableCheck.SETRANGE("WP Request Code", TableRec."WP Request Code");
          TableEditableCheck.SETRANGE("Table No.", xTableRec."Table No.");
          IF TableEditableCheck.FIND('-') THEN BEGIN
            HasRSEditCheck := TRUE;
            ConfirmText := ConfirmText + Text007 + '\';
            ConfirmationRequired := TRUE;
          END;

          // ask user for confirmation
          IF ConfirmationRequired THEN
            IF CONFIRM(Text001 + ConfirmText + Text002) THEN BEGIN // user has confirmed -> proceed with deleting
              IF HasTabStrips THEN
                REPEAT
                  TableTab.DELETE(TRUE);
                UNTIL TableTab.NEXT = 0;

              IF HasActions THEN
                REPEAT
                  TableAction.DELETE(TRUE);
                UNTIL TableAction.NEXT = 0;

              IF HasHLC THEN
                REPEAT
                  TableHeadLine.DELETE(TRUE);
                UNTIL TableHeadLine.NEXT = 0;

              IF HasDefaultFilter THEN BEGIN
                IF HasDefaultFilterFields THEN
                  REPEAT
                    TableDefaultFilterFields.DELETE(TRUE);
                  UNTIL TableDefaultFilterFields.NEXT = 0;

                IF HasDefaultFilterKeys THEN
                  REPEAT
                    TableDefaultFilterKeys.DELETE(TRUE);
                  UNTIL TableDefaultFilterKeys.NEXT = 0;
              END;

              IF HasRSEditCheck THEN
                REPEAT
                  TableEditableCheck.DELETE(TRUE);
                UNTIL TableEditableCheck.NEXT = 0;

            END ELSE
              ERROR(Text008);
        END;
    END;

    PROCEDURE RenameFieldNo@1000000072(VAR TableRec@1000000000 : Record 6807;VAR xTableRec@1000000001 : Record 6807);
    VAR
      TableSortKey@1001 : Record 6822;
      TableLookUp@1000 : Record 6827;
      ConfirmText@1000000007 : Text[1024];
      ConfirmationRequired@1000000006 : Boolean;
      HasSortKey@1000000005 : Boolean;
      HasLookUp@1000000004 : Boolean;
    BEGIN
      ConfirmText := '';
      ConfirmationRequired := FALSE;
      HasSortKey := FALSE;
      HasLookUp := FALSE;

      IF xTableRec."Field No." <> 0 THEN // check for insert
        IF TableRec."Field No." <> xTableRec."Field No." THEN BEGIN // rename-action on field no, check for indicated data elements

          // check for related sort keys
          TableSortKey.RESET;
          TableSortKey.SETRANGE("Group Code", TableRec."Group Code");
          TableSortKey.SETRANGE("WP Request Code", TableRec."WP Request Code");
          TableSortKey.SETRANGE("Table No.", TableRec."Table No.");
          TableSortKey.SETRANGE("Tab Code", TableRec."Tab Code");
          TableSortKey.SETRANGE("Field Line No.", xTableRec."Line No.");
          IF TableSortKey.FIND('-') THEN BEGIN
            HasSortKey := TRUE;
            ConfirmText := ConfirmText + Text015 + '\';
            ConfirmationRequired := TRUE;
          END;

          // check for related lookups
          TableLookUp.RESET;
          TableLookUp.SETRANGE("Group Code", TableRec."Group Code");
          TableLookUp.SETRANGE("WP Request Code", TableRec."WP Request Code");
          TableLookUp.SETRANGE("Table No.", TableRec."Table No.");
          TableLookUp.SETRANGE("Tab Code", TableRec."Tab Code");
          TableLookUp.SETRANGE("Line No.", xTableRec."Line No.");
          IF TableLookUp.FIND('-') THEN BEGIN
            HasLookUp := TRUE;
            ConfirmText := ConfirmText + Text016 + '\';
            ConfirmationRequired := TRUE;
          END;

          // get user's confirmation
          IF ConfirmationRequired THEN
            IF CONFIRM(Text013 + ConfirmText + Text002) THEN BEGIN // user has confirmed -> proceed with deleting
              IF HasSortKey THEN
                REPEAT
                  TableSortKey.DELETE(TRUE);
                UNTIL TableSortKey.NEXT = 0;

              IF HasLookUp THEN
                REPEAT
                  TableLookUp.DELETE(TRUE);
                UNTIL TableLookUp.NEXT = 0;
            END ELSE
              ERROR(Text008);
        END;
    END;

    PROCEDURE RenameActionType@1000000073(VAR TableRec@1000000000 : Record 6809;VAR xTableRec@1000000001 : Record 6809);
    VAR
      TableNewHeadCriteria@1001 : Record 6824;
      TableConnToNextRequest@1000 : Record 6813;
      ConfirmText@1000000007 : Text[1024];
      ConfirmationRequired@1000000006 : Boolean;
      HasNewHeadCriteria@1000000005 : Boolean;
      HasConnectionToNextRequest@1000000004 : Boolean;
    BEGIN
      ConfirmText := '';
      ConfirmationRequired := FALSE;
      HasNewHeadCriteria := FALSE;
      HasConnectionToNextRequest := FALSE;

      IF xTableRec.Type <> TableRec.Type::" " THEN // check for insert
        IF TableRec.Type <> xTableRec.Type THEN BEGIN // rename-action on action-type, check for indicated data elements

          // check for related tab strips
          TableNewHeadCriteria.RESET;
          TableNewHeadCriteria.SETRANGE("Group Code", TableRec."Group Code");
          TableNewHeadCriteria.SETRANGE("WP Request Code", TableRec."WP Request Code");
          TableNewHeadCriteria.SETRANGE("Table No.", TableRec."Table No.");
          TableNewHeadCriteria.SETRANGE("Header or Line", TableRec."Header or Line");
          TableNewHeadCriteria.SETRANGE("Action Type", xTableRec.Type);
          TableNewHeadCriteria.SETRANGE(Position, TableRec.Position);
          IF TableNewHeadCriteria.FIND('-') THEN BEGIN
            HasNewHeadCriteria := TRUE;
            ConfirmText := ConfirmText + Text019 + '\';
            ConfirmationRequired := TRUE;
          END;

          // check for related actions (only if not template-request type)
          TableConnToNextRequest.RESET;
          TableConnToNextRequest.SETRANGE("Group Code", TableRec."Group Code");
          TableConnToNextRequest.SETRANGE("WP Request Code", TableRec."WP Request Code");
          TableConnToNextRequest.SETRANGE("Table No.", TableRec."Table No.");
          TableConnToNextRequest.SETRANGE("Header or Line", TableRec."Header or Line");
          TableConnToNextRequest.SETRANGE("Action Type", xTableRec.Type);
          TableConnToNextRequest.SETRANGE(Position, TableRec.Position);
          IF TableConnToNextRequest.FIND('-') THEN BEGIN
            HasConnectionToNextRequest := TRUE;
            ConfirmText := ConfirmText + Text020 + '\';
            ConfirmationRequired := TRUE;
          END;

          // get user's confirmation
          IF ConfirmationRequired THEN
            IF CONFIRM(Text017 + ConfirmText + Text002) THEN BEGIN // user has confirmed -> proceed with deleting
              IF HasNewHeadCriteria THEN
                REPEAT
                  TableNewHeadCriteria.DELETE(TRUE);
                UNTIL TableNewHeadCriteria.NEXT = 0;

              IF HasConnectionToNextRequest THEN
                REPEAT
                  TableConnToNextRequest.DELETE(TRUE);
                UNTIL TableConnToNextRequest.NEXT = 0;
            END ELSE
              ERROR(Text008);
        END;
    END;

    PROCEDURE MakeSearchResult@4(GUID@1000 : Code[50];UserID@1001 : Code[50];TableNo@1005 : Integer;Lines@1006 : Integer;SearchValue@1002 : Text[80]) ReturnValue : Boolean;
    VAR
      SearchConfig@1016 : Record 6839;
      SearchFields@1015 : Record 6837;
      SearchDisplay@1014 : Record 6838;
      SearchResult@1011 : Record 6843;
      EncodeXML@1007 : Codeunit 6814;
      SearchRecord@1012 : RecordRef;
      DisplayField@1010 : FieldRef;
      InStream@1017 : InStream;
      KeyNode@1004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      KeyDoc@1003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      FilterString@1008 : Text[1024];
      BuildFilter@1009 : Boolean;
      Lines2@1018 : Integer;
      LineCheck@1013 : Integer;
    BEGIN
      ReturnValue := TRUE;

      SearchConfig.RESET;
      SearchConfig.SETRANGE("User ID",UserID);
      IF TableNo > 0 THEN
        SearchConfig.SETRANGE("Table No.",TableNo);
      IF NOT SearchConfig.FIND('-') THEN
        EXIT(FALSE);

      BuildFilter := CheckStringForFilter(SearchValue);

      REPEAT
        SearchRecord.OPEN(SearchConfig."Table No.",FALSE);
        SearchFields.RESET;
        SearchFields.SETRANGE("Table No.",SearchConfig."Table No.");
        IF SearchFields.FIND('-') THEN BEGIN
          REPEAT
            FilterString := '';
            SearchRecord.RESET;
            SearchFields.CALCFIELDS("Field Caption");

            IF CheckSearchValue(SearchValue,SearchFields."Table No.",SearchFields."Field No.") THEN BEGIN
              IF BuildFilter THEN
                BuildFilterString(FilterString,4,SearchFields."Field Caption",SearchValue)
              ELSE
                BuildFilterString(FilterString,3,SearchFields."Field Caption",SearchValue);

              BuildFilterString(FilterString,5,'','');

              SearchRecord.SETVIEW(FilterString);
              IF SearchRecord.FIND('-') THEN BEGIN
                IF Lines = 0 THEN
                  Lines2 := SearchRecord.COUNT
                ELSE
                  Lines2 := Lines;
                LineCheck := 0;
                REPEAT
                  LineCheck := LineCheck + 1;
                  SearchDisplay.RESET;
                  SearchDisplay.SETRANGE("Table No.",SearchConfig."Table No.");
                  IF SearchDisplay.FIND('-') THEN BEGIN
                    SearchResult.INIT;
                    SearchResult.GUID := GUID;
                    SearchResult."Table No." := SearchConfig."Table No.";
                    SearchResult."Primary Key CheckSum" := BuildKeyCheckSum(SearchRecord,1);
                    EncodeXML.CreateKey(SearchRecord,KeyNode,2);
                    IF NOT ISCLEAR(KeyNode) THEN BEGIN
                      CREATE(KeyDoc);
                      KeyDoc.documentElement(KeyNode);
                      SearchResult."Primary Key BLOB".CREATEINSTREAM(InStream);
                      KeyDoc.save(InStream);
                      CLEAR(KeyDoc);
                    END;
                    REPEAT
                      CASE SearchDisplay."Display Field" OF
                        SearchDisplay."Display Field"::"Field 1":
                          BEGIN
                            DisplayField := SearchRecord.FIELD(SearchDisplay."Field No.");
                            IF CheckCalculate(SearchConfig."Table No.",SearchDisplay."Field No.") THEN
                              DisplayField.CALCFIELD;
                            SearchResult."Display Field 1" :=
                              EPFormatFunctions.GetValueFromFieldRef(
                                SearchConfig."Table No.",SearchDisplay."Field No.",DisplayField);
                          END;
                        SearchDisplay."Display Field"::"Field 2":
                          BEGIN
                            DisplayField := SearchRecord.FIELD(SearchDisplay."Field No.");
                            IF CheckCalculate(SearchConfig."Table No.",SearchDisplay."Field No.") THEN
                              DisplayField.CALCFIELD;
                            SearchResult."Display Field 2" :=
                              EPFormatFunctions.GetValueFromFieldRef(
                                SearchConfig."Table No.",SearchDisplay."Field No.",DisplayField);
                          END;
                        SearchDisplay."Display Field"::"Field 3":
                          BEGIN
                            DisplayField := SearchRecord.FIELD(SearchDisplay."Field No.");
                            IF CheckCalculate(SearchConfig."Table No.",SearchDisplay."Field No.") THEN
                              DisplayField.CALCFIELD;
                            SearchResult."Display Field 3" :=
                              EPFormatFunctions.GetValueFromFieldRef(
                                SearchConfig."Table No.",SearchDisplay."Field No.",DisplayField);
                          END;
                        SearchDisplay."Display Field"::"Field 4":
                          BEGIN
                            DisplayField := SearchRecord.FIELD(SearchDisplay."Field No.");
                            IF CheckCalculate(SearchConfig."Table No.",SearchDisplay."Field No.") THEN
                              DisplayField.CALCFIELD;
                            SearchResult."Display Field 4" :=
                              EPFormatFunctions.GetValueFromFieldRef(
                                SearchConfig."Table No.",SearchDisplay."Field No.",DisplayField);
                          END;
                        SearchDisplay."Display Field"::"Field 5":
                          BEGIN
                            DisplayField := SearchRecord.FIELD(SearchDisplay."Field No.");
                            IF CheckCalculate(SearchConfig."Table No.",SearchDisplay."Field No.") THEN
                              DisplayField.CALCFIELD;
                            SearchResult."Display Field 5" :=
                              EPFormatFunctions.GetValueFromFieldRef(
                                SearchConfig."Table No.",SearchDisplay."Field No.",DisplayField);
                          END;
                      END;
                    UNTIL SearchDisplay.NEXT = 0;
                    IF SearchResult.INSERT THEN;
                  END;
                UNTIL (SearchRecord.NEXT = 0) OR (LineCheck = Lines2);
              END;
            END;
          UNTIL SearchFields.NEXT = 0;
        END;
        SearchRecord.CLOSE;
      UNTIL SearchConfig.NEXT = 0;
    END;

    PROCEDURE DeleteSearchResult@6(GUID@1000 : Code[50]);
    VAR
      SearchResult@1001 : Record 6843;
    BEGIN
      SearchResult.RESET;
      SearchResult.SETRANGE(GUID,GUID);
      IF SearchResult.FIND('-') THEN
        SearchResult.DELETEALL;
    END;

    PROCEDURE BuildKeyCheckSum@3(VAR RecordRef@1000 : RecordRef;KeyIndex@1001 : Integer) KeyCheckSum : Integer;
    VAR
      KeyRef@1002 : KeyRef;
      FieldRef@1003 : FieldRef;
      CheckSum@1005 : Automation "{4EF67977-E272-4BB9-A9E2-B136F555EF54} 1.0:{A60BFCD0-F812-4D2B-BC13-AAB0B9ABD6E8}:Unknown Automation Server.Unknown Class";
      i@1004 : Integer;
    BEGIN
      KeyRef := RecordRef.KEYINDEX(KeyIndex);
      KeyCheckSum := 0;

      CREATE(CheckSum);

      FOR i := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FieldRef := KeyRef.FIELDINDEX(i);
        CheckSum.AddValueToString(
          EPFormatFunctions.GetValueFromFieldRef(RecordRef.NUMBER,FieldRef.NUMBER,FieldRef));
      END;

      KeyCheckSum := CheckSum.GetStringHashCode;
      CLEAR(CheckSum);
    END;

    PROCEDURE BuildRecCheckSum@7(VAR RecordRef@1000 : RecordRef) KeyCheckSum : Integer;
    VAR
      FieldRef@1003 : FieldRef;
      CheckSum@1001 : Automation "{4EF67977-E272-4BB9-A9E2-B136F555EF54} 1.0:{A60BFCD0-F812-4D2B-BC13-AAB0B9ABD6E8}:Unknown Automation Server.Unknown Class";
      i@1004 : Integer;
    BEGIN
      KeyCheckSum := 0;

      CREATE(CheckSum);

      FOR i := 1 TO RecordRef.FIELDCOUNT DO BEGIN
        FieldRef := RecordRef.FIELDINDEX(i);
        IF CheckIfNormalField(RecordRef.NUMBER,FieldRef.NUMBER) THEN BEGIN
          IF CheckIfBlobField(RecordRef.NUMBER,FieldRef.NUMBER) THEN
            FieldRef.CALCFIELD;
          CheckSum.AddValueToString(
            EPFormatFunctions.GetValueFromFieldRef(RecordRef.NUMBER,FieldRef.NUMBER,FieldRef));
        END;
      END;

      KeyCheckSum := CheckSum.GetStringHashCode;
      CLEAR(CheckSum);
    END;

    PROCEDURE CompareHashValues@8(HashValue1@1000 : Integer;VAR RecordRef@1001 : RecordRef) : Boolean;
    VAR
      HashValue2@1003 : Integer;
    BEGIN
      IF NOT RecordRef.FIND('-') THEN
        EXIT(FALSE);

      HashValue2 := BuildRecCheckSum(RecordRef);

      IF HashValue1 = HashValue2 THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE CheckSearchValue@1000000000(SearchValue@1000000002 : Text[80];TableNo@1000000001 : Integer;FieldNo@1000000000 : Integer) : Boolean;
    VAR
      Field@1000000003 : Record 2000000041;
      TmpString@1000000004 : Text[80];
      TmpSearchValue@1000000005 : Text[80];
      SpecialCharacter@1000000006 : Boolean;
      i@1000000007 : Integer;
      InnerString@1000000008 : Text[80];
      TestInteger@1000000009 : Integer;
      TestDecimal@1000000010 : Decimal;
      ValidForNumeric@1000000011 : Boolean;
    BEGIN
      IF NOT Field.GET(TableNo,FieldNo) THEN
        EXIT(FALSE);

      TmpString := SearchValue;

      FOR i:=1 TO STRLEN(TmpString) DO BEGIN
        SpecialCharacter := FALSE;
        ValidForNumeric := FALSE;
        TmpSearchValue := COPYSTR(TmpString,i,1);
        CASE TmpSearchValue OF
          '&','|','>','<','(',')','=':
            BEGIN
              SpecialCharacter := TRUE;
              ValidForNumeric := TRUE;
            END;
          '*','@','?':
            BEGIN
              SpecialCharacter := TRUE;
              ValidForNumeric := FALSE;
            END;
        END;
        IF (TmpSearchValue = '.') THEN BEGIN
          IF i <> STRLEN(TmpString) THEN
            IF (COPYSTR(TmpString,i+1,1)='.') OR (COPYSTR(TmpString,i-1,1)='.') THEN
              SpecialCharacter := TRUE;
        END;

        IF NOT SpecialCharacter THEN
          InnerString += TmpSearchValue;
        IF (SpecialCharacter) OR (i = STRLEN(TmpString)) THEN BEGIN
          CASE Field.Type OF
            Field.Type::Text,Field.Type::Code:
              BEGIN
                IF STRLEN(InnerString) > Field.Len THEN
                  EXIT(FALSE);
              END;
            Field.Type::Integer:
              BEGIN
                IF InnerString <> '' THEN
                  IF NOT EVALUATE(TestInteger,InnerString) OR NOT ValidForNumeric THEN
                    EXIT(FALSE);
              END;
            Field.Type::Decimal:
              BEGIN
                IF InnerString <> '' THEN
                  IF NOT EVALUATE(TestDecimal,InnerString) OR NOT ValidForNumeric THEN
                    EXIT(FALSE);
              END;
          END;
          InnerString := '';
        END;
      END;
      EXIT(TRUE);
    END;

    BEGIN
    END.
  }
}
