OBJECT Codeunit 99000832 Sales Line-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 337=rimd,
                TableData 99000850=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Reserved quantity cannot be greater than %1;ESP=La cantidad reservada no puede ser mayor que %1';
      Text002@1001 : TextConst 'ENU=must be filled in when a quantity is reserved;ESP=se debe rellenar cuando se ha reservado una cantidad';
      Text003@1002 : TextConst 'ENU=must not be filled in when a quantity is reserved;ESP=no se debe rellenar cuando se ha reservado una cantidad';
      Text004@1003 : TextConst 'ENU=must not be changed when a quantity is reserved;ESP=no se debe modificar cuando se ha reservado una cantidad';
      Text005@1004 : TextConst 'ENU=Codeunit is not initialized correctly.;ESP=Codeunit no iniciada correctamente.';
      Location@1017 : Record 14;
      CreateReservEntry@1005 : Codeunit 99000830;
      ReservEngineMgt@1006 : Codeunit 99000831;
      ReservMgt@1007 : Codeunit 99000845;
      ItemTrackingMgt@1021 : Codeunit 6500;
      CreatePick@1024 : Codeunit 7312;
      Blocked@1008 : Boolean;
      SetFromType@1009 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry';
      SetFromSubtype@1010 : Integer;
      SetFromID@1011 : Code[20];
      SetFromBatchName@1012 : Code[10];
      SetFromProdOrderLine@1013 : Integer;
      SetFromRefNo@1014 : Integer;
      SetFromVariantCode@1015 : Code[10];
      SetFromLocationCode@1016 : Code[10];
      SetFromSerialNo@1018 : Code[20];
      SetFromLotNo@1019 : Code[20];
      SetFromQtyPerUOM@1020 : Decimal;
      ApplySpecificItemTracking@1022 : Boolean;
      OverruleItemTracking@1023 : Boolean;
      DeleteItemTracking@1026 : Boolean;
      ItemTrkgAlreadyOverruled@1025 : Boolean;

    PROCEDURE CreateReservation@1(VAR SalesLine@1000 : Record 37;Description@1001 : Text[50];ExpectedReceiptDate@1002 : Date;Quantity@1003 : Decimal;ForSerialNo@1005 : Code[20];ForLotNo@1004 : Code[20]);
    VAR
      ShipmentDate@1007 : Date;
      OutBoundQty@1009 : Decimal;
      SignFactor@1006 : Integer;
    BEGIN
      IF SetFromType = 0 THEN
        ERROR(Text005);

      SalesLine.TESTFIELD(Type,SalesLine.Type::Item);
      SalesLine.TESTFIELD("No.");
      SalesLine.TESTFIELD("Shipment Date");
      SalesLine.CALCFIELDS("Reserved Qty. (Base)");
      IF ABS(SalesLine."Outstanding Qty. (Base)") < ABS(SalesLine."Reserved Qty. (Base)") + Quantity THEN
        ERROR(
          Text000,
          ABS(SalesLine."Outstanding Qty. (Base)") - ABS(SalesLine."Reserved Qty. (Base)"));

      SalesLine.TESTFIELD("Variant Code",SetFromVariantCode);
      SalesLine.TESTFIELD("Location Code",SetFromLocationCode);

      IF (SalesLine."Document Type" = SalesLine."Document Type"::"Return Order") THEN
        SignFactor := 1
      ELSE
        SignFactor := -1;

      IF Quantity * SignFactor < 0 THEN
        ShipmentDate := SalesLine."Shipment Date"
      ELSE BEGIN
        ShipmentDate := ExpectedReceiptDate;
        ExpectedReceiptDate := SalesLine."Shipment Date";
      END;

      CreateReservEntry.CreateReservEntryFor(
        DATABASE::"Sales Line",SalesLine."Document Type",
        SalesLine."Document No.",'',0,SalesLine."Line No.",SalesLine."Qty. per Unit of Measure",
        Quantity,ForSerialNo,ForLotNo);
      CreateReservEntry.CreateReservEntryFrom(
        SetFromType,SetFromSubtype,SetFromID,SetFromBatchName,SetFromProdOrderLine,SetFromRefNo,
        SetFromQtyPerUOM,SetFromSerialNo,SetFromLotNo);
      CreateReservEntry.CreateReservEntry(
        SalesLine."No.",SalesLine."Variant Code",SalesLine."Location Code",
        Description,ExpectedReceiptDate,ShipmentDate,0);

      IF Location.GET(SalesLine."Location Code") AND
         (Location."Bin Mandatory" OR Location."Require Pick")
      THEN BEGIN
        OutBoundQty :=
          CreatePick.CheckOutBound(
            DATABASE::"Sales Line",SalesLine."Document Type",
            SalesLine."Document No.",SalesLine."Line No.",0);
        IF (OutBoundQty <> 0) AND
           (OutBoundQty >= (SalesLine."Reserved Qty. (Base)" + Quantity))
        THEN
          CreatePick.AdjustReservation(
            OutBoundQty,DATABASE::"Sales Line",SalesLine."Document Type",
            SalesLine."Document No.",SalesLine."Line No.",0,0);
      END;

      SetFromType := 0;
    END;

    PROCEDURE CreateReservationSetFrom@7(FromType@1000 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry';FromSubtype@1001 : Integer;FromID@1002 : Code[20];FromBatchName@1003 : Code[10];FromProdOrderLine@1004 : Integer;FromRefNo@1005 : Integer;FromVariantCode@1006 : Code[10];FromLocationCode@1007 : Code[10];FromSerialNo@1009 : Code[20];FromLotNo@1010 : Code[20];FromQtyPerUOM@1011 : Decimal);
    BEGIN
      SetFromType := FromType;
      SetFromSubtype := FromSubtype;
      SetFromID := FromID;
      SetFromBatchName := FromBatchName;
      SetFromProdOrderLine := FromProdOrderLine;
      SetFromRefNo := FromRefNo;
      SetFromVariantCode := FromVariantCode;
      SetFromLocationCode := FromLocationCode;
      SetFromSerialNo := FromSerialNo;
      SetFromLotNo := FromLotNo;
      SetFromQtyPerUOM := FromQtyPerUOM;
    END;

    PROCEDURE SetBinding@8(Binding@1000 : ' ,Order-to-Order');
    BEGIN
      CreateReservEntry.SetBinding(Binding);
    END;

    PROCEDURE FilterReservFor@12(VAR FilterReservEntry@1000 : Record 337;SalesLine@1001 : Record 37);
    BEGIN
      FilterReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
      FilterReservEntry.SETRANGE("Source Subtype",SalesLine."Document Type");
      FilterReservEntry.SETRANGE("Source ID",SalesLine."Document No.");
      FilterReservEntry.SETRANGE("Source Batch Name",'');
      FilterReservEntry.SETRANGE("Source Prod. Order Line",0);
      FilterReservEntry.SETRANGE("Source Ref. No.",SalesLine."Line No.");
    END;

    PROCEDURE ReservQuantity@21(SalesLine@1001 : Record 37) QtyToReserve@1000 : Decimal;
    BEGIN
      CASE SalesLine."Document Type" OF
        SalesLine."Document Type"::Quote,
        SalesLine."Document Type"::Order,
        SalesLine."Document Type"::Invoice,
        SalesLine."Document Type"::"Blanket Order":
          QtyToReserve := SalesLine."Outstanding Qty. (Base)";
        SalesLine."Document Type"::"Return Order",
        SalesLine."Document Type"::"Credit Memo":
          QtyToReserve := -SalesLine."Outstanding Qty. (Base)"
      END;
    END;

    PROCEDURE Caption@30(SalesLine@1001 : Record 37) CaptionText@1000 : Text[80];
    BEGIN
      CaptionText :=
        STRSUBSTNO('%1 %2 %3',SalesLine."Document Type",SalesLine."Document No.",SalesLine."No.");
    END;

    PROCEDURE FindReservEntry@4(SalesLine@1000 : Record 37;VAR ReservEntry@1001 : Record 337) : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,SalesLine);
      EXIT(ReservEntry.FINDLAST);
    END;

    PROCEDURE ReservEntryExist@17(SalesLine@1000 : Record 37) : Boolean;
    VAR
      ReservEntry@1001 : Record 337;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,SalesLine);
      EXIT(NOT ReservEntry.ISEMPTY);
    END;

    PROCEDURE VerifyChange@59(VAR NewSalesLine@1000 : Record 37;VAR OldSalesLine@1001 : Record 37);
    VAR
      SalesLine@1005 : Record 37;
      TempReservEntry@1002 : Record 337;
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
    BEGIN
      IF (NewSalesLine.Type <> NewSalesLine.Type::Item) AND (OldSalesLine.Type <> OldSalesLine.Type::Item) THEN
        EXIT;
      IF Blocked THEN
        EXIT;
      IF NewSalesLine."Line No." = 0 THEN
        IF NOT SalesLine.GET(
                 NewSalesLine."Document Type",NewSalesLine."Document No.",NewSalesLine."Line No.")
        THEN
          EXIT;

      NewSalesLine.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewSalesLine."Reserved Qty. (Base)" <> 0;

      IF (NewSalesLine."Shipment Date" = 0D) AND (OldSalesLine."Shipment Date" <> 0D) THEN
        IF ShowError THEN
          NewSalesLine.FIELDERROR("Shipment Date",Text002)
        ELSE
          HasError := TRUE;

      IF (NewSalesLine."Job No." <> '') THEN
        IF ShowError THEN
          NewSalesLine.FIELDERROR("Job No.",Text003)
        ELSE
          HasError := TRUE;

      IF (NewSalesLine."Purchase Order No." <> '') THEN
        IF ShowError THEN
          NewSalesLine.FIELDERROR("Purchase Order No.",Text003)
        ELSE
          HasError := NewSalesLine."Purchase Order No." <> OldSalesLine."Purchase Order No.";

      IF (NewSalesLine."Purch. Order Line No." <> 0) THEN
        IF ShowError THEN
          NewSalesLine.FIELDERROR(
            "Purch. Order Line No.",Text003)
        ELSE
          HasError := NewSalesLine."Purch. Order Line No." <> OldSalesLine."Purch. Order Line No.";

      IF NewSalesLine."Drop Shipment" <> OldSalesLine."Drop Shipment" THEN
        IF ShowError AND NewSalesLine."Drop Shipment" THEN
          NewSalesLine.FIELDERROR("Drop Shipment",Text003)
        ELSE
          HasError := TRUE;

      IF (NewSalesLine."No." <> OldSalesLine."No.") THEN
        IF ShowError THEN
          NewSalesLine.FIELDERROR("No.",Text004)
        ELSE
          HasError := TRUE;

      IF (NewSalesLine."Variant Code" <> OldSalesLine."Variant Code") THEN
        IF ShowError THEN
          NewSalesLine.FIELDERROR("Variant Code",Text004)
        ELSE
          HasError := TRUE;

      IF (NewSalesLine."Location Code" <> OldSalesLine."Location Code") THEN
        IF ShowError THEN
          NewSalesLine.FIELDERROR("Location Code",Text004)
        ELSE
          HasError := TRUE;
      IF (NewSalesLine."Bin Code" <> OldSalesLine."Bin Code") THEN
        IF ShowError THEN
          NewSalesLine.FIELDERROR("Bin Code",Text004)
        ELSE
          HasError := TRUE;

      IF NewSalesLine."Line No." <> OldSalesLine."Line No." THEN
        HasError := TRUE;

      IF NewSalesLine.Type <> OldSalesLine.Type THEN
        HasError := TRUE;

      IF HasError THEN
        IF (NewSalesLine."No." <> OldSalesLine."No.") OR
           FindReservEntry(NewSalesLine,TempReservEntry)
        THEN BEGIN
          IF (NewSalesLine."No." <> OldSalesLine."No.") OR (NewSalesLine.Type <> OldSalesLine.Type) THEN BEGIN
            ReservMgt.SetSalesLine(OldSalesLine);
            ReservMgt.DeleteReservEntries(TRUE,0);
            ReservMgt.SetSalesLine(NewSalesLine);
          END ELSE BEGIN
            ReservMgt.SetSalesLine(NewSalesLine);
            ReservMgt.DeleteReservEntries(TRUE,0);
          END;
          ReservMgt.AutoTrack(NewSalesLine."Outstanding Qty. (Base)");
        END;

      IF HasError OR (NewSalesLine."Shipment Date" <> OldSalesLine."Shipment Date")
      THEN BEGIN
        AssignForPlanning(NewSalesLine);
        IF (NewSalesLine."No." <> OldSalesLine."No.") OR
           (NewSalesLine."Variant Code" <> OldSalesLine."Variant Code") OR
           (NewSalesLine."Location Code" <> OldSalesLine."Location Code")
        THEN
          AssignForPlanning(OldSalesLine);
      END;
    END;

    PROCEDURE VerifyQuantity@2(VAR NewSalesLine@1000 : Record 37;VAR OldSalesLine@1001 : Record 37);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      IF Blocked THEN
        EXIT;

      WITH NewSalesLine DO BEGIN
        IF ("Document Type" = "Document Type"::Invoice) AND ("Shipment No." = '') THEN
          EXIT;
        IF ("Document Type" = "Document Type"::"Credit Memo") AND ("Return Receipt No." = '') THEN
          EXIT;

        IF Type <> Type::Item THEN
          EXIT;
        IF "Document Type" = OldSalesLine."Document Type" THEN
          IF "Line No." = OldSalesLine."Line No." THEN
            IF "Quantity (Base)" = OldSalesLine."Quantity (Base)" THEN
              EXIT;
        IF "Line No." = 0 THEN
          IF NOT SalesLine.GET("Document Type","Document No.","Line No.") THEN
            EXIT;
        ReservMgt.SetSalesLine(NewSalesLine);
        IF "Qty. per Unit of Measure" <> OldSalesLine."Qty. per Unit of Measure" THEN
          ReservMgt.ModifyUnitOfMeasure;
        IF "Outstanding Qty. (Base)" * OldSalesLine."Outstanding Qty. (Base)" < 0 THEN
          ReservMgt.DeleteReservEntries(TRUE,0)
        ELSE
          ReservMgt.DeleteReservEntries(FALSE,"Outstanding Qty. (Base)");
        ReservMgt.ClearSurplus;
        ReservMgt.AutoTrack("Outstanding Qty. (Base)");
        AssignForPlanning(NewSalesLine);
      END;
    END;

    PROCEDURE TransferSalesLineToItemJnlLine@35(VAR SalesLine@1000 : Record 37;VAR ItemJnlLine@1001 : Record 83;TransferQty@1002 : Decimal;VAR CheckApplFromItemEntry@1004 : Boolean) : Decimal;
    VAR
      OldReservEntry@1003 : Record 337;
    BEGIN
      IF NOT FindReservEntry(SalesLine,OldReservEntry) THEN
        EXIT(TransferQty);
      OldReservEntry.Lock;
      // Handle Item Tracking on drop shipment:
      CLEAR(CreateReservEntry);
      IF ApplySpecificItemTracking AND (ItemJnlLine."Applies-to Entry" <> 0) THEN BEGIN
        CreateReservEntry.SetApplyToEntryNo(ItemJnlLine."Applies-to Entry");
        CheckApplFromItemEntry := FALSE;
      END;

      IF OverruleItemTracking THEN
        IF (ItemJnlLine."Serial No." <> '') OR (ItemJnlLine."Lot No." <> '') THEN BEGIN
          CreateReservEntry.SetNewSerialLotNo(ItemJnlLine."Serial No.",ItemJnlLine."Lot No.");
          CreateReservEntry.SetOverruleItemTracking(NOT ItemTrkgAlreadyOverruled);
          // Try to match against Item Tracking on the sales order line:
          OldReservEntry.SETRANGE("Serial No.",ItemJnlLine."Serial No.");
          OldReservEntry.SETRANGE("Lot No.",ItemJnlLine."Lot No.");
          IF OldReservEntry.ISEMPTY THEN
            EXIT(TransferQty);
        END;

      ItemJnlLine.TESTFIELD("Item No.",SalesLine."No.");
      ItemJnlLine.TESTFIELD("Variant Code",SalesLine."Variant Code");
      ItemJnlLine.TESTFIELD("Location Code",SalesLine."Location Code");

      IF TransferQty = 0 THEN
        EXIT;

      IF ItemJnlLine."Invoiced Quantity" <> 0 THEN
        CreateReservEntry.SetUseQtyToInvoice(TRUE);

      IF ReservEngineMgt.InitRecordSet(OldReservEntry) THEN BEGIN
        REPEAT
          OldReservEntry.TESTFIELD("Item No.",SalesLine."No.");
          OldReservEntry.TESTFIELD("Variant Code",SalesLine."Variant Code");
          OldReservEntry.TESTFIELD("Location Code",SalesLine."Location Code");

          IF CheckApplFromItemEntry THEN BEGIN
            OldReservEntry.TESTFIELD("Appl.-from Item Entry");
            CreateReservEntry.SetApplyFromEntryNo(OldReservEntry."Appl.-from Item Entry");
          END;

          TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Item Journal Line",
            ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",
            ItemJnlLine."Journal Batch Name",0,ItemJnlLine."Line No.",
            ItemJnlLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

        UNTIL (ReservEngineMgt.NEXTRecord(OldReservEntry) = 0) OR (TransferQty = 0);
        CheckApplFromItemEntry := FALSE;
      END;
      EXIT(TransferQty);
    END;

    PROCEDURE TransferSaleLineToSalesLine@31(VAR OldSalesLine@1000 : Record 37;VAR NewSalesLine@1001 : Record 37;TransferQty@1002 : Decimal);
    VAR
      OldReservEntry@1003 : Record 337;
      Status@1004 : 'Reservation,Tracking,Surplus,Prospect';
    BEGIN
      // Used for sales quote and blanket order when transferred to order
      IF NOT FindReservEntry(OldSalesLine,OldReservEntry) THEN
        EXIT;

      OldReservEntry.Lock;

      NewSalesLine.TESTFIELD("No.",OldSalesLine."No.");
      NewSalesLine.TESTFIELD("Variant Code",OldSalesLine."Variant Code");
      NewSalesLine.TESTFIELD("Location Code",OldSalesLine."Location Code");

      FOR Status := Status::Reservation TO Status::Prospect DO BEGIN
        IF TransferQty = 0 THEN
          EXIT;
        OldReservEntry.SETRANGE("Reservation Status",Status);
        IF OldReservEntry.FINDSET THEN
          REPEAT
            OldReservEntry.TESTFIELD("Item No.",OldSalesLine."No.");
            OldReservEntry.TESTFIELD("Variant Code",OldSalesLine."Variant Code");
            OldReservEntry.TESTFIELD("Location Code",OldSalesLine."Location Code");

            TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Sales Line",
              NewSalesLine."Document Type",NewSalesLine."Document No.",'',0,
              NewSalesLine."Line No.",NewSalesLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

          UNTIL (OldReservEntry.NEXT = 0) OR (TransferQty = 0);
      END; // DO
    END;

    PROCEDURE RenameLine@16(VAR NewSalesLine@1001 : Record 37;VAR OldSalesLine@1000 : Record 37);
    BEGIN
      ReservEngineMgt.RenamePointer(DATABASE::"Sales Line",
        OldSalesLine."Document Type",
        OldSalesLine."Document No.",
        '',
        0,
        OldSalesLine."Line No.",
        NewSalesLine."Document Type",
        NewSalesLine."Document No.",
        '',
        0,
        NewSalesLine."Line No.");
    END;

    PROCEDURE DeleteLineConfirm@20(VAR SalesLine@1000 : Record 37) : Boolean;
    BEGIN
      WITH SalesLine DO BEGIN
        IF NOT ReservEntryExist(SalesLine) THEN
          EXIT(TRUE);

        ReservMgt.SetSalesLine(SalesLine);
        IF ReservMgt.DeleteItemTrackingConfirm THEN
          DeleteItemTracking := TRUE;
      END;

      EXIT(DeleteItemTracking);
    END;

    PROCEDURE DeleteLine@3(VAR SalesLine@1000 : Record 37);
    BEGIN
      WITH SalesLine DO BEGIN
        ReservMgt.SetSalesLine(SalesLine);
        IF DeleteItemTracking THEN
          ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
        ReservMgt.DeleteReservEntries(TRUE,0);
        DeleteInvoiceSpecFromLine(SalesLine);
        CALCFIELDS("Reserved Qty. (Base)");
        AssignForPlanning(SalesLine);
      END;
    END;

    PROCEDURE AssignForPlanning@5(VAR SalesLine@1000 : Record 37);
    VAR
      PlanningAssignment@1001 : Record 99000850;
    BEGIN
      WITH SalesLine DO BEGIN
        IF "Document Type" <> "Document Type"::Order THEN
          EXIT;
        IF Type <> Type::Item THEN
          EXIT;
        IF SalesLine."No." <> '' THEN
          PlanningAssignment.ChkAssignOne("No.","Variant Code","Location Code","Shipment Date");
      END;
    END;

    PROCEDURE CallItemTracking@6(VAR SalesLine@1000 : Record 37);
    VAR
      TrackingSpecification@1001 : Record 336;
      ItemTrackingForm@1002 : Form 6510;
    BEGIN
      InitTrackingSpecification(SalesLine,TrackingSpecification);
      IF ((SalesLine."Document Type" = SalesLine."Document Type"::Invoice) AND
          (SalesLine."Shipment No." <> '')) OR
         ((SalesLine."Document Type" = SalesLine."Document Type"::"Credit Memo") AND
          (SalesLine."Return Receipt No." <> ''))
      THEN
        ItemTrackingForm.SetFormRunMode(2); // Combined shipment/receipt
      IF SalesLine."Drop Shipment" THEN BEGIN
        ItemTrackingForm.SetFormRunMode(3); // Drop Shipment
        IF SalesLine."Purchase Order No." <> '' THEN
          ItemTrackingForm.SetSecondSourceRowID(ItemTrackingMgt.ComposeRowID(DATABASE::"Purchase Line",
            1,SalesLine."Purchase Order No.",'',0,SalesLine."Purch. Order Line No."));
      END;
      ItemTrackingForm.SetSource(TrackingSpecification,SalesLine."Shipment Date");

      ItemTrackingForm.SetInbound(
        ((SalesLine."Document Type" IN
          [SalesLine."Document Type"::"Return Order",SalesLine."Document Type"::"Credit Memo"]) AND
         (SalesLine."Quantity (Base)" > 0)) OR
        ((SalesLine."Document Type" IN
          [SalesLine."Document Type"::Order,SalesLine."Document Type"::Invoice]) AND
         (SalesLine."Quantity (Base)" < 0)));

      ItemTrackingForm.RUNMODAL;
    END;

    PROCEDURE CallItemTracking2@13(VAR SalesLine@1000 : Record 37;VAR SecondSourceQuantityArray@1001 : ARRAY [3] OF Decimal);
    VAR
      TrackingSpecification@1002 : Record 336;
      ItemTrackingForm@1003 : Form 6510;
    BEGIN
      InitTrackingSpecification(SalesLine,TrackingSpecification);
      ItemTrackingForm.SetSource(TrackingSpecification,SalesLine."Shipment Date");
      ItemTrackingForm.SetSecondSourceQuantity(SecondSourceQuantityArray);
      ItemTrackingForm.RUNMODAL;
    END;

    PROCEDURE InitTrackingSpecification@10(VAR SalesLine@1000 : Record 37;VAR TrackingSpecification@1003 : Record 336);
    BEGIN
      TrackingSpecification.INIT;
      TrackingSpecification."Source Type" := DATABASE::"Sales Line";
      WITH SalesLine DO BEGIN
        TrackingSpecification."Item No." := "No.";
        TrackingSpecification."Location Code" := "Location Code";
        TrackingSpecification.Description := Description;
        TrackingSpecification."Variant Code" := "Variant Code";
        TrackingSpecification."Source Subtype" := "Document Type";
        TrackingSpecification."Source ID" := "Document No.";
        TrackingSpecification."Source Batch Name" := '';
        TrackingSpecification."Source Prod. Order Line" := 0;
        TrackingSpecification."Source Ref. No." := "Line No.";
        TrackingSpecification."Quantity (Base)" := "Quantity (Base)";
        TrackingSpecification."Qty. to Invoice (Base)" := "Qty. to Invoice (Base)";
        TrackingSpecification."Qty. to Invoice" := "Qty. to Invoice";
        TrackingSpecification."Quantity Invoiced (Base)" := "Qty. Invoiced (Base)";
        TrackingSpecification."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        TrackingSpecification."Bin Code" := "Bin Code";

        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
          TrackingSpecification."Qty. to Handle (Base)" := "Return Qty. to Receive (Base)";
          TrackingSpecification."Quantity Handled (Base)" := "Return Qty. Received (Base)";
          TrackingSpecification."Qty. to Handle" := "Return Qty. to Receive";
        END ELSE BEGIN
          TrackingSpecification."Qty. to Handle (Base)" := "Qty. to Ship (Base)";
          TrackingSpecification."Quantity Handled (Base)" := "Qty. Shipped (Base)";
          TrackingSpecification."Qty. to Handle" := "Qty. to Ship";
        END;
      END;
    END;

    PROCEDURE RetrieveInvoiceSpecification@9(VAR SalesLine@1002 : Record 37;VAR TempInvoicingSpecification@1001 : TEMPORARY Record 336) OK@1003 : Boolean;
    VAR
      SourceSpecification@1000 : Record 336;
    BEGIN
      IF SalesLine.Type <> SalesLine.Type::Item THEN
        EXIT;
      IF ((SalesLine."Document Type" = SalesLine."Document Type"::Invoice) AND
          (SalesLine."Shipment No." <> '')) OR
         ((SalesLine."Document Type" = SalesLine."Document Type"::"Credit Memo") AND
          (SalesLine."Return Receipt No." <> ''))
      THEN
        OK := RetrieveInvoiceSpecification2(SalesLine,TempInvoicingSpecification)
      ELSE BEGIN
        InitTrackingSpecification(SalesLine,SourceSpecification);
        OK := ItemTrackingMgt.RetrieveInvoiceSpecification(SourceSpecification,
          TempInvoicingSpecification);
      END;
    END;

    LOCAL PROCEDURE RetrieveInvoiceSpecification2@1013(VAR SalesLine@1002 : Record 37;VAR TempInvoicingSpecification@1001 : TEMPORARY Record 336) OK@1003 : Boolean;
    VAR
      TrackingSpecification@1000 : Record 336;
      ReservEntry@1004 : Record 337;
    BEGIN
      // Used for combined shipment/return:
      IF SalesLine.Type <> SalesLine.Type::Item THEN
        EXIT;
      IF NOT FindReservEntry(SalesLine,ReservEntry) THEN
        EXIT;
      ReservEntry.FINDSET;
      REPEAT
        ReservEntry.TESTFIELD("Reservation Status",ReservEntry."Reservation Status"::Prospect);
        ReservEntry.TESTFIELD("Appl.-to Item Entry");
        TrackingSpecification.GET(ReservEntry."Appl.-to Item Entry");
        TempInvoicingSpecification := TrackingSpecification;
        TempInvoicingSpecification."Qty. to Invoice (Base)" :=
          ReservEntry."Qty. to Invoice (Base)";
        TempInvoicingSpecification."Qty. to Invoice" :=
          ROUND(ReservEntry."Qty. to Invoice (Base)"/ReservEntry."Qty. per Unit of Measure",0.00001);
        TempInvoicingSpecification."Buffer Status" := TempInvoicingSpecification."Buffer Status"::MODIFY;
        TempInvoicingSpecification.INSERT;
        ReservEntry.DELETE;
      UNTIL ReservEntry.NEXT = 0;

      OK := TempInvoicingSpecification.FINDFIRST;
    END;

    PROCEDURE DeleteInvoiceSpecFromHeader@14(VAR SalesHeader@1002 : Record 36);
    VAR
      TrackingSpecification@1001 : Record 336;
    BEGIN
      TrackingSpecification.SETCURRENTKEY("Source ID","Source Type",
        "Source Subtype","Source Batch Name","Source Prod. Order Line","Source Ref. No.");
      TrackingSpecification.SETRANGE("Source Type",DATABASE::"Sales Line");
      TrackingSpecification.SETRANGE("Source Subtype",SalesHeader."Document Type");
      TrackingSpecification.SETRANGE("Source ID",SalesHeader."No.");
      TrackingSpecification.SETRANGE("Source Batch Name",'');
      TrackingSpecification.SETRANGE("Source Prod. Order Line",0);
      IF TrackingSpecification.FINDSET THEN
        REPEAT
          TrackingSpecification.DELETE;
        UNTIL TrackingSpecification.NEXT = 0;
    END;

    LOCAL PROCEDURE DeleteInvoiceSpecFromLine@19(SalesLine@1002 : Record 37);
    VAR
      TrackingSpecification@1001 : Record 336;
    BEGIN
      TrackingSpecification.SETCURRENTKEY("Source ID","Source Type",
        "Source Subtype","Source Batch Name","Source Prod. Order Line","Source Ref. No.");
      TrackingSpecification.SETRANGE("Source ID",SalesLine."Document No.");
      TrackingSpecification.SETRANGE("Source Type",DATABASE::"Sales Line");
      TrackingSpecification.SETRANGE("Source Subtype",SalesLine."Document Type");
      TrackingSpecification.SETRANGE("Source Batch Name",'');
      TrackingSpecification.SETRANGE("Source Prod. Order Line",0);
      TrackingSpecification.SETRANGE("Source Ref. No.",SalesLine."Line No.");
      IF TrackingSpecification.FINDSET THEN
        REPEAT
          TrackingSpecification.DELETE;
        UNTIL TrackingSpecification.NEXT = 0;
    END;

    PROCEDURE UpdateItemTrackingAfterPosting@11(SalesHeader@1000 : Record 36);
    VAR
      ReservEntry@1003 : Record 337;
      CreateReservEntry@1001 : Codeunit 99000830;
    BEGIN
      // Used for updating Quantity to Handle and Quantity to Invoice after posting
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      ReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
      ReservEntry.SETRANGE("Source Subtype",SalesHeader."Document Type");
      ReservEntry.SETRANGE("Source ID",SalesHeader."No.");
      ReservEntry.SETRANGE("Source Batch Name",'');
      ReservEntry.SETRANGE("Source Prod. Order Line",0);
      CreateReservEntry.UpdateItemTrackingAfterPosting(ReservEntry);
    END;

    PROCEDURE SetApplySpecificItemTracking@15(ApplySpecific@1000 : Boolean);
    BEGIN
      ApplySpecificItemTracking := ApplySpecific;
    END;

    PROCEDURE SetOverruleItemTracking@18(Overrule@1000 : Boolean);
    BEGIN
      OverruleItemTracking := Overrule;
    END;

    PROCEDURE Block@22(SetBlocked@1000 : Boolean);
    BEGIN
      Blocked := SetBlocked;
    END;

    PROCEDURE SetItemTrkgAlreadyOverruled@23(HasBeenOverruled@1000 : Boolean);
    BEGIN
      ItemTrkgAlreadyOverruled := HasBeenOverruled;
    END;

    BEGIN
    END.
  }
}
