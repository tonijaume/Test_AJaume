OBJECT Codeunit 7307 Whse.-Activity-Register
{
  OBJECT-PROPERTIES
  {
    Date=11/12/10;
    Time=12:00:00;
    Version List=NAVW16.00.10;
  }
  PROPERTIES
  {
    TableNo=5767;
    Permissions=TableData 5772=i,
                TableData 5773=i,
                TableData 6550=rim,
                TableData 7310=imd,
                TableData 7318=m,
                TableData 7319=m;
    OnRun=BEGIN
            WhseActivLine.COPY(Rec);
            Code;
            Rec := WhseActivLine;
          END;

  }
  CODE
  {
    VAR
      Text000@1001 : TextConst 'ENU=Warehouse Activity    #1##########\\;ESP=Actividad almac‚n    #1##########\\';
      Text001@1002 : TextConst 'ENU=Checking lines        #2######\;ESP=Comprobando l¡neas   #2######\';
      Text002@1005 : TextConst 'ENU=Registering lines     #3###### @4@@@@@@@@@@@@@;ESP=Registrando l¡neas   #3###### @4@@@@@@@@@@@@@';
      Location@1006 : Record 14;
      Item@1029 : Record 27;
      WhseActivHeader@1000 : Record 5766;
      WhseActivLine@1010 : Record 5767;
      RegisteredWhseActivHeader@1008 : Record 5772;
      RegisteredWhseActivLine@1009 : Record 5773;
      WhseShptHeader@1015 : Record 7320;
      PostedWhseRcptHeader@1014 : Record 7318;
      WhseInternalPickHeader@1017 : Record 7333;
      WhseInternalPutAwayHeader@1021 : Record 7331;
      WhseShptLine@1011 : Record 7321;
      PostedWhseRcptLine@1013 : Record 7319;
      WhseInternalPickLine@1018 : Record 7334;
      WhseInternalPutAwayLine@1022 : Record 7332;
      ProdCompLine@1019 : Record 5407;
      ProdOrder@1020 : Record 5405;
      ItemUnitOfMeasure@1004 : Record 5404;
      TempBinContentBuffer@1016 : TEMPORARY Record 7330;
      SourceCodeSetup@1007 : Record 242;
      Cust@1026 : Record 18;
      TempTrackingSpecification@1030 : TEMPORARY Record 336;
      ItemTrackingMgt@1023 : Codeunit 6500;
      WhseJnlRegisterLine@1012 : Codeunit 7301;
      NoSeriesMgt@1025 : Codeunit 396;
      Window@1027 : Dialog;
      NoOfRecords@1034 : Integer;
      LineCount@1035 : Integer;
      HideDialog@1036 : Boolean;
      Text003@1003 : TextConst 'ENU=There is nothing to register.;ESP=No hay nada que registrar.';
      Text004@1024 : TextConst 'ENU=Item tracking defined for the source line accounts for more than the quantity you have entered.\You must adjust the existing item tracking and then reenter the new quantity.;ESP=Seguim. prod. definido para l¡n. origen tiene una cantidad mayor que la que ha introducido.\Debe ajustar el seguim. prod. actual y volver a introducir la nueva cdad.';
      Text005@1028 : TextConst 'ENU=%1 %2 is not available on inventory or it has already been reserved for another document.;ESP=%1 %2 no est  disponible en el inventario o fue reservado para otro documento.';

    LOCAL PROCEDURE Code@3();
    VAR
      OldWhseActivLine@1000 : Record 5767;
      LastLine@1001 : Boolean;
    BEGIN
      WITH WhseActivHeader DO BEGIN
        WhseActivLine.SETRANGE("Activity Type",WhseActivLine."Activity Type");
        WhseActivLine.SETRANGE("No.",WhseActivLine."No.");
        WhseActivLine.SETFILTER("Qty. to Handle (Base)",'<>0');
        IF NOT WhseActivLine.FIND('-') THEN
          ERROR(Text003);
        CheckWhseItemTrkgLine(WhseActivLine);

        GET(WhseActivLine."Activity Type",WhseActivLine."No.");
        LocationGet("Location Code");

        IF NOT HideDialog THEN BEGIN
          Window.OPEN(
            Text000 +
            Text001 +
            Text002);

          Window.UPDATE(1,"No.");
        END;

        // Check Lines
        TempBinContentBuffer.DELETEALL;
        LineCount := 0;
        IF WhseActivLine.FIND('-') THEN
          REPEAT
            LineCount := LineCount + 1;
            IF NOT HideDialog THEN
              Window.UPDATE(2,LineCount);
            WhseActivLine.TESTFIELD("Item No.");
            IF (WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::Pick) AND
               (WhseActivLine."Destination Type" = WhseActivLine."Destination Type"::Customer)
            THEN BEGIN
              WhseActivLine.TESTFIELD("Destination No.");
              Cust.GET(WhseActivLine."Destination No.");
              Cust.CheckBlockedCustOnDocs(Cust,"Source Document",FALSE,FALSE);
            END;
            IF Location."Bin Mandatory" THEN BEGIN
              WhseActivLine.TESTFIELD("Unit of Measure Code");
              WhseActivLine.TESTFIELD("Bin Code");
              WhseActivLine.CheckWhseDocLine;
              UpdateTempBinContentBuffer(WhseActivLine);
            END;
            IF ((WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::Pick) OR
                (WhseActivLine."Activity Type" = WhseActivLine."Activity Type"::"Invt. Pick")) AND
               (WhseActivLine."Action Type" = WhseActivLine."Action Type"::Take)
            THEN
              CheckItemTrackingInfoBlocked(
                WhseActivLine."Item No.",WhseActivLine."Variant Code",WhseActivLine."Serial No.",WhseActivLine."Lot No.");
          UNTIL WhseActivLine.NEXT = 0;
        NoOfRecords := LineCount;

        IF Location."Bin Mandatory" THEN BEGIN
          CheckBinContent;
          CheckBin;
        END;


        EnsureAuthorizationOfSourceDoc;

        IF "Registering No." = '' THEN BEGIN
          TESTFIELD("Registering No. Series");
          "Registering No." := NoSeriesMgt.GetNextNo("Registering No. Series","Assignment Date",TRUE);
          MODIFY;
          COMMIT;
        END;

        // Register lines
        SourceCodeSetup.GET;
        LineCount := 0;
        IF RECORDLEVELLOCKING THEN
          WhseActivLine.LOCKTABLE;
        IF WhseActivLine.FIND('-') THEN BEGIN
          CreateRegActivHeader(WhseActivHeader);
          REPEAT
            LineCount := LineCount + 1;
            IF NOT HideDialog THEN BEGIN
              Window.UPDATE(3,LineCount);
              Window.UPDATE(4,ROUND(LineCount / NoOfRecords * 10000,1));
            END;
            IF Location."Bin Mandatory" THEN
              RegisterWhseJnlLine(WhseActivLine);
            CreateRegActivLine(WhseActivLine);
          UNTIL WhseActivLine.NEXT = 0;
        END;

        // Modify/delete activity header and activity lines
        IF NOT RECORDLEVELLOCKING THEN BEGIN
          WhseActivLine.LOCKTABLE(TRUE,TRUE);
          CASE WhseActivLine."Whse. Document Type" OF
            WhseActivLine."Whse. Document Type"::Shipment:
              BEGIN
                WhseShptLine.LOCKTABLE(TRUE,TRUE);
                WhseShptHeader.LOCKTABLE(TRUE,TRUE);
              END;
            WhseActivLine."Whse. Document Type"::Receipt:
              BEGIN
                PostedWhseRcptLine.LOCKTABLE(TRUE,TRUE);
                PostedWhseRcptHeader.LOCKTABLE(TRUE,TRUE);
              END;
            WhseActivLine."Whse. Document Type"::"Internal Pick":
              BEGIN
                WhseInternalPickLine.LOCKTABLE(TRUE,TRUE);
                WhseInternalPickHeader.LOCKTABLE(TRUE,TRUE);
              END;
            WhseActivLine."Whse. Document Type"::"Internal Put-away":
              BEGIN
                WhseInternalPutAwayLine.LOCKTABLE(TRUE,TRUE);
                WhseInternalPutAwayHeader.LOCKTABLE(TRUE,TRUE);
              END;
            WhseActivLine."Whse. Document Type"::Production:
              BEGIN
                ProdCompLine.LOCKTABLE(TRUE,TRUE);
              END;
          END;
        END;
        WhseActivLine.SETCURRENTKEY(
          "Activity Type","No.","Whse. Document Type","Whse. Document No.");
        IF WhseActivLine.FIND('-') THEN
          REPEAT
            IF Type <> Type::Movement THEN
              UpdateWhseSourceDocLine(WhseActivLine);
            IF WhseActivLine."Qty. Outstanding" = WhseActivLine."Qty. to Handle" THEN
              WhseActivLine.DELETE
            ELSE BEGIN
              WhseActivLine.VALIDATE(
                "Qty. Outstanding",
                WhseActivLine."Qty. Outstanding" - WhseActivLine."Qty. to Handle");
              IF HideDialog THEN
                WhseActivLine.VALIDATE("Qty. to Handle",0);
              WhseActivLine.VALIDATE(
                WhseActivLine."Qty. Handled",
                WhseActivLine.Quantity - WhseActivLine."Qty. Outstanding");
              WhseActivLine.MODIFY;
            END;

            OldWhseActivLine := WhseActivLine;

            LastLine := WhseActivLine.NEXT = 0;

            IF LastLine OR
               (OldWhseActivLine."Whse. Document Type" <> WhseActivLine."Whse. Document Type") OR
               (OldWhseActivLine."Whse. Document No." <> WhseActivLine."Whse. Document No.") OR
               (OldWhseActivLine."Action Type" <> WhseActivLine."Action Type")
            THEN
              UpdateWhseDocHeader(OldWhseActivLine);

            IF OldWhseActivLine."Action Type" = OldWhseActivLine."Action Type"::Take THEN
              DeleteBinContent(OldWhseActivLine);
          UNTIL LastLine;
        ItemTrackingMgt.SetPick(OldWhseActivLine."Activity Type" = OldWhseActivLine."Activity Type"::Pick);
        ItemTrackingMgt.SynchronizeWhseItemTracking(TempTrackingSpecification,RegisteredWhseActivLine."No.");

        IF Location."Bin Mandatory" THEN BEGIN
          LineCount := 0;
          CLEAR(OldWhseActivLine);
          WhseActivLine.RESET;
          WhseActivLine.SETCURRENTKEY(
            "Activity Type","No.","Whse. Document Type","Whse. Document No.");
          WhseActivLine.SETRANGE("Activity Type",Type);
          WhseActivLine.SETRANGE("No.","No.");
          IF WhseActivLine.FIND('-') THEN
            REPEAT
              IF ((LineCount = 1) AND
                  ((OldWhseActivLine."Whse. Document Type" <> WhseActivLine."Whse. Document Type") OR
                  (OldWhseActivLine."Whse. Document No." <> WhseActivLine."Whse. Document No.")))
              THEN BEGIN
                LineCount := 0;
                OldWhseActivLine.DELETE;
              END;
              OldWhseActivLine := WhseActivLine;
              LineCount := LineCount + 1;
            UNTIL WhseActivLine.NEXT = 0;
            IF LineCount = 1 THEN
              OldWhseActivLine.DELETE;
        END;
        WhseActivLine.RESET;
        WhseActivLine.SETRANGE("Activity Type",Type);
        WhseActivLine.SETRANGE("No.","No.");
        WhseActivLine.SETFILTER("Qty. Outstanding",'<>%1',0);
        IF NOT WhseActivLine.FIND('-') THEN
          DELETE(TRUE)
        ELSE BEGIN
          "Last Registering No." := "Registering No.";
          "Registering No." := '';
          MODIFY;
          IF NOT HideDialog THEN
            WhseActivLine.AutofillQtyToHandle(WhseActivLine);
        END;
        IF NOT HideDialog THEN
          Window.CLOSE;
        COMMIT;
        CLEAR(WhseJnlRegisterLine);
      END;
    END;

    LOCAL PROCEDURE RegisterWhseJnlLine@5(WhseActivLine@1000 : Record 5767);
    VAR
      WhseJnlLine@1001 : Record 7311;
      WMSMgt@1002 : Codeunit 7302;
    BEGIN
      WITH WhseActivLine DO BEGIN
        WhseJnlLine.INIT;
        WhseJnlLine."Location Code" := "Location Code";
        WhseJnlLine."Item No." := "Item No.";
        WhseJnlLine."Registering Date" := WORKDATE;
        WhseJnlLine."User ID" := USERID;
        WhseJnlLine."Variant Code" := "Variant Code";
        WhseJnlLine."Entry Type" := WhseJnlLine."Entry Type"::Movement;
        IF "Action Type" = "Action Type"::Take THEN BEGIN
          WhseJnlLine."From Zone Code" := "Zone Code";
          WhseJnlLine."From Bin Code" := "Bin Code";
        END ELSE BEGIN
          WhseJnlLine."To Zone Code" := "Zone Code";
          WhseJnlLine."To Bin Code" := "Bin Code";
        END;
        WhseJnlLine.Description := Description;

        LocationGet("Location Code");
        IF Location."Directed Put-away and Pick" THEN BEGIN
          WhseJnlLine.Quantity := "Qty. to Handle";
          WhseJnlLine."Unit of Measure Code" := "Unit of Measure Code";
          WhseJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
          GetItemUnitOfMeasure2("Item No.","Unit of Measure Code");
          WhseJnlLine.Cubage :=
            ABS(WhseJnlLine.Quantity) * ItemUnitOfMeasure.Cubage;
          WhseJnlLine.Weight :=
            ABS(WhseJnlLine.Quantity) * ItemUnitOfMeasure.Weight;
        END ELSE BEGIN
          WhseJnlLine.Quantity := "Qty. to Handle (Base)";
          WhseJnlLine."Unit of Measure Code" := WMSMgt.GetBaseUOM("Item No.");
          WhseJnlLine."Qty. per Unit of Measure" := 1;
        END;
        WhseJnlLine."Qty. (Base)" := "Qty. to Handle (Base)";
        WhseJnlLine."Qty. (Absolute)" := WhseJnlLine.Quantity;
        WhseJnlLine."Qty. (Absolute, Base)" := "Qty. to Handle (Base)";

        WhseJnlLine."Source Type" := "Source Type";
        WhseJnlLine."Source Subtype" := "Source Subtype";
        WhseJnlLine."Source No." := "Source No.";
        WhseJnlLine."Source Line No." := "Source Line No.";
        WhseJnlLine."Source Subline No." := "Source Subline No.";
        WhseJnlLine."Source Document" := "Source Document";
        WhseJnlLine."Reference No." := RegisteredWhseActivHeader."No.";
        CASE "Activity Type" OF
          "Activity Type"::"Put-away":
            BEGIN
              WhseJnlLine."Source Code" := SourceCodeSetup."Whse. Put-away";
              WhseJnlLine."Whse. Document Type" := "Whse. Document Type";
              WhseJnlLine."Whse. Document No." := "Whse. Document No.";
              WhseJnlLine."Whse. Document Line No." := "Whse. Document Line No.";
              WhseJnlLine."Reference Document" :=
                WhseJnlLine."Reference Document"::"Put-away";
            END;
          "Activity Type"::Pick:
            BEGIN
              WhseJnlLine."Source Code" := SourceCodeSetup."Whse. Pick";
              WhseJnlLine."Whse. Document Type" := "Whse. Document Type";
              WhseJnlLine."Whse. Document No." := "Whse. Document No.";
              WhseJnlLine."Whse. Document Line No." := "Whse. Document Line No.";
              WhseJnlLine."Reference Document" :=
                WhseJnlLine."Reference Document"::Pick;
            END;
          "Activity Type"::Movement:
            BEGIN
              WhseJnlLine."Source Code" := SourceCodeSetup."Whse. Movement";
              WhseJnlLine."Whse. Document Type" :=
                WhseJnlLine."Whse. Document Type"::" ";
              WhseJnlLine."Reference Document" :=
                WhseJnlLine."Reference Document"::Movement;
            END;
        END;
        IF "Serial No." <> '' THEN
          TESTFIELD("Qty. per Unit of Measure",1);
        WhseJnlLine."Serial No." := "Serial No.";
        WhseJnlLine."Lot No." := "Lot No.";
        WhseJnlLine."Warranty Date" := "Warranty Date";
        WhseJnlLine."Expiration Date" := "Expiration Date";
        WhseJnlRegisterLine.RUN(WhseJnlLine);
      END;
    END;

    LOCAL PROCEDURE CreateRegActivHeader@2(WhseActivHeader@1000 : Record 5766);
    VAR
      WhseComment@1001 : Record 5770;
      WhseComment2@1002 : Record 5770;
    BEGIN
      RegisteredWhseActivHeader.INIT;
      RegisteredWhseActivHeader.TRANSFERFIELDS(WhseActivHeader);
      RegisteredWhseActivHeader.Type := WhseActivHeader.Type;
      RegisteredWhseActivHeader."No." := WhseActivHeader."Registering No.";
      RegisteredWhseActivHeader."Whse. Activity No." := WhseActivHeader."No.";
      RegisteredWhseActivHeader."Registering Date" := WORKDATE;
      RegisteredWhseActivHeader.INSERT;

      WhseComment.SETRANGE("Table Name",WhseComment."Table Name"::"Whse. Activity Header");
      WhseComment.SETRANGE(Type,WhseActivHeader.Type);
      WhseComment.SETRANGE("No.",WhseActivHeader."No.");
      WhseComment.LOCKTABLE;
        IF WhseComment.FIND('-') THEN BEGIN
          REPEAT
            WhseComment2.INIT;
            WhseComment2 := WhseComment;
            WhseComment2."Table Name" := WhseComment2."Table Name"::"Rgstrd. Whse. Activity Header";
            WhseComment2.Type := RegisteredWhseActivHeader.Type;
            WhseComment2."No." := RegisteredWhseActivHeader."No.";
            WhseComment2.INSERT;
          UNTIL WhseComment.NEXT = 0;
        END;
    END;

    LOCAL PROCEDURE CreateRegActivLine@6(WhseActivLine@1000 : Record 5767);
    BEGIN
      RegisteredWhseActivLine.INIT;
      RegisteredWhseActivLine.TRANSFERFIELDS(WhseActivLine);
      RegisteredWhseActivLine."Activity Type" := RegisteredWhseActivHeader.Type;
      RegisteredWhseActivLine."No." := RegisteredWhseActivHeader."No.";
      RegisteredWhseActivLine.Quantity := WhseActivLine."Qty. to Handle";
      RegisteredWhseActivLine."Qty. (Base)" := WhseActivLine."Qty. to Handle (Base)";
      RegisteredWhseActivLine.INSERT;
    END;

    LOCAL PROCEDURE UpdateWhseSourceDocLine@11(WhseActivLine@1000 : Record 5767);
    BEGIN
      WITH WhseActivLine DO BEGIN
        IF "Original Breakbulk" THEN
          EXIT;
        CASE "Whse. Document Type" OF
          "Whse. Document Type"::Shipment:
            IF ("Action Type" <> "Action Type"::Take) AND ("Breakbulk No." = 0) THEN BEGIN
              UpdateWhseShptLine(
                "Whse. Document No.","Whse. Document Line No.",
                "Qty. to Handle","Qty. to Handle (Base)","Qty. per Unit of Measure");
              RegisterWhseItemTrkgLine(WhseActivLine);
            END;
          "Whse. Document Type"::"Internal Pick":
            IF ("Action Type" <> "Action Type"::Take) AND ("Breakbulk No." = 0) THEN BEGIN
              UpdateWhseIntPickLine(
                "Whse. Document No.","Whse. Document Line No.",
                "Qty. to Handle","Qty. to Handle (Base)","Qty. per Unit of Measure");
              RegisterWhseItemTrkgLine(WhseActivLine);
            END;
          "Whse. Document Type"::Production:
            IF ("Action Type" <> "Action Type"::Take) AND ("Breakbulk No." = 0) THEN BEGIN
              UpdateProdCompLine(
                "Source Subtype","Source No.","Source Line No.","Source Subline No.",
                "Qty. to Handle","Qty. to Handle (Base)","Qty. per Unit of Measure");
              RegisterWhseItemTrkgLine(WhseActivLine);
            END;
          "Whse. Document Type"::Receipt:
            IF "Action Type" <> "Action Type"::Place THEN BEGIN
              UpdatePostedWhseRcptLine(
                "Whse. Document No.","Whse. Document Line No.",
                "Qty. to Handle","Qty. to Handle (Base)","Qty. per Unit of Measure");
              RegisterWhseItemTrkgLine(WhseActivLine);
            END;
          "Whse. Document Type"::"Internal Put-away":
            IF "Action Type" <> "Action Type"::Take THEN BEGIN
              UpdateWhseIntPutAwayLine(
                "Whse. Document No.","Whse. Document Line No.",
                "Qty. to Handle","Qty. to Handle (Base)","Qty. per Unit of Measure");
              RegisterWhseItemTrkgLine(WhseActivLine);
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateWhseDocHeader@7(WhseActivLine@1000 : Record 5767);
    VAR
      WhsePutAwayRqst@1003 : Record 7324;
      WhsePickRqst@1001 : Record 7325;
    BEGIN
      WITH WhseActivLine DO BEGIN
        CASE "Whse. Document Type" OF
          "Whse. Document Type"::Shipment:
            IF "Action Type" <> "Action Type"::Take THEN BEGIN
              WhseShptHeader.GET("Whse. Document No.");
              WhseShptHeader.VALIDATE(
                "Document Status",WhseShptHeader.GetDocumentStatus(0));
              WhseShptHeader.MODIFY;
            END;
          "Whse. Document Type"::Receipt:
            IF "Action Type" <> "Action Type"::Place THEN BEGIN
              PostedWhseRcptHeader.GET("Whse. Document No.");
              PostedWhseRcptLine.RESET;
              PostedWhseRcptLine.SETRANGE("No.",PostedWhseRcptHeader."No.");
              IF PostedWhseRcptLine.FIND('-') THEN BEGIN
                PostedWhseRcptHeader."Document Status" := PostedWhseRcptHeader.GetHeaderStatus(0);
                PostedWhseRcptHeader.MODIFY;
              END;
              IF PostedWhseRcptHeader."Document Status" =
                 PostedWhseRcptHeader."Document Status"::"Completely Put Away"
              THEN BEGIN
                WhsePutAwayRqst.SETRANGE("Document Type",WhsePutAwayRqst."Document Type"::Receipt);
                WhsePutAwayRqst.SETRANGE("Document No.",PostedWhseRcptHeader."No.");
                WhsePutAwayRqst.DELETEALL;
                ItemTrackingMgt.DeleteWhseItemTrkgLines(
                  DATABASE::"Posted Whse. Receipt Line",0,PostedWhseRcptHeader."No.",'',0,0,'',FALSE);
              END;
            END;
          "Whse. Document Type"::"Internal Pick":
            IF "Action Type" <> "Action Type"::Take THEN BEGIN
              WhseInternalPickHeader.GET("Whse. Document No.");
              WhseInternalPickLine.RESET;
              WhseInternalPickLine.SETRANGE(WhseInternalPickLine."No.","Whse. Document No.");
              IF WhseInternalPickLine.FIND('-') THEN BEGIN
                WhseInternalPickHeader."Document Status" :=
                  WhseInternalPickHeader.GetDocumentStatus(0);
                WhseInternalPickHeader.MODIFY;
                IF WhseInternalPickHeader."Document Status" =
                   WhseInternalPickHeader."Document Status"::"Completely Picked"
                THEN BEGIN
                  WhseInternalPickHeader.DeleteRelatedLines;
                  WhseInternalPickHeader.DELETE;
                END;
              END ELSE BEGIN
                WhseInternalPickHeader.DeleteRelatedLines;
                WhseInternalPickHeader.DELETE;
              END;
            END;
          "Whse. Document Type"::"Internal Put-away":
            IF "Action Type" <> "Action Type"::Take THEN BEGIN
              WhseInternalPutAwayHeader.GET("Whse. Document No.");
              WhseInternalPutAwayLine.RESET;
              WhseInternalPutAwayLine.SETRANGE(WhseInternalPutAwayLine."No.","Whse. Document No.");
              IF WhseInternalPutAwayLine.FIND('-') THEN BEGIN
                WhseInternalPutAwayHeader."Document Status" :=
                  WhseInternalPutAwayHeader.GetDocumentStatus(0);
                WhseInternalPutAwayHeader.MODIFY;
                IF WhseInternalPutAwayHeader."Document Status" =
                   WhseInternalPutAwayHeader."Document Status"::"Completely Put Away"
                THEN BEGIN
                  WhseInternalPutAwayHeader.DeleteRelatedLines;
                  WhseInternalPutAwayHeader.DELETE;
                END;
              END ELSE BEGIN
                WhseInternalPutAwayHeader.DeleteRelatedLines;
                WhseInternalPutAwayHeader.DELETE;
              END;
            END;
          "Whse. Document Type"::Production:
            IF "Action Type" <> "Action Type"::Take THEN BEGIN
              ProdOrder.GET("Source Subtype","Source No.");
              ProdOrder.CALCFIELDS("Completely Picked");
              IF ProdOrder."Completely Picked" THEN BEGIN
                WhsePickRqst.SETRANGE("Document Type",WhsePickRqst."Document Type"::Production);
                WhsePickRqst.SETRANGE("Document No.",ProdOrder."No.");
                WhsePickRqst.MODIFYALL("Completely Picked",TRUE);
                ItemTrackingMgt.DeleteWhseItemTrkgLines(
                  DATABASE::"Prod. Order Component","Source Subtype","Source No.",'',0,0,'',FALSE);
              END;
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateWhseShptLine@8(WhseDocNo@1000 : Code[20];WhseDocLineNo@1001 : Integer;QtyToHandle@1002 : Decimal;QtyToHandleBase@1003 : Decimal;QtyPerUOM@1004 : Decimal);
    BEGIN
      WhseShptLine.GET(WhseDocNo,WhseDocLineNo);
      WhseShptLine."Qty. Picked (Base)" :=
        WhseShptLine."Qty. Picked (Base)" + QtyToHandleBase;
      IF QtyPerUOM = WhseShptLine."Qty. per Unit of Measure" THEN
        WhseShptLine."Qty. Picked" := WhseShptLine."Qty. Picked" + QtyToHandle
      ELSE
        WhseShptLine."Qty. Picked" :=
          ROUND(WhseShptLine."Qty. Picked" + QtyToHandleBase / QtyPerUOM);

      WhseShptLine."Completely Picked" :=
        (WhseShptLine."Qty. Picked" = WhseShptLine.Quantity) OR (WhseShptLine."Qty. Picked (Base)" = WhseShptLine."Qty. (Base)");
      // Handle rounding residual when completely picked
      IF WhseShptLine."Completely Picked" AND (WhseShptLine."Qty. Picked" <> WhseShptLine.Quantity) THEN
        WhseShptLine."Qty. Picked" := WhseShptLine.Quantity;

      WhseShptLine.VALIDATE("Qty. to Ship",WhseShptLine."Qty. Picked" - WhseShptLine."Qty. Shipped");
      WhseShptLine."Qty. to Ship (Base)" := WhseShptLine."Qty. Picked (Base)" - WhseShptLine."Qty. Shipped (Base)";
      WhseShptLine.Status := WhseShptLine.CalcStatusShptLine;
      WhseShptLine.MODIFY;
    END;

    LOCAL PROCEDURE UpdatePostedWhseRcptLine@14(WhseDocNo@1004 : Code[20];WhseDocLineNo@1003 : Integer;QtyToHandle@1002 : Decimal;QtyToHandleBase@1001 : Decimal;QtyPerUOM@1000 : Decimal);
    BEGIN
      PostedWhseRcptHeader.LOCKTABLE;
      PostedWhseRcptHeader.GET(WhseDocNo);
      PostedWhseRcptLine.LOCKTABLE;
      PostedWhseRcptLine.GET(WhseDocNo,WhseDocLineNo);
      PostedWhseRcptLine."Qty. Put Away (Base)" :=
        PostedWhseRcptLine."Qty. Put Away (Base)" + QtyToHandleBase;
      IF QtyPerUOM = PostedWhseRcptLine."Qty. per Unit of Measure" THEN
        PostedWhseRcptLine."Qty. Put Away" :=
          PostedWhseRcptLine."Qty. Put Away" + QtyToHandle
      ELSE
        PostedWhseRcptLine."Qty. Put Away" :=
          ROUND(
            PostedWhseRcptLine."Qty. Put Away" +
            QtyToHandleBase / PostedWhseRcptLine."Qty. per Unit of Measure");
      PostedWhseRcptLine.Status := PostedWhseRcptLine.GetLineStatus;
      PostedWhseRcptLine.MODIFY;
    END;

    LOCAL PROCEDURE UpdateWhseIntPickLine@17(WhseDocNo@1004 : Code[20];WhseDocLineNo@1003 : Integer;QtyToHandle@1002 : Decimal;QtyToHandleBase@1001 : Decimal;QtyPerUOM@1000 : Decimal);
    BEGIN
      WhseInternalPickLine.GET(WhseDocNo,WhseDocLineNo);
      IF WhseInternalPickLine."Qty. (Base)" =
         WhseInternalPickLine."Qty. Picked (Base)" + QtyToHandleBase
      THEN
        WhseInternalPickLine.DELETE
      ELSE BEGIN
        WhseInternalPickLine."Qty. Picked (Base)" :=
          WhseInternalPickLine."Qty. Picked (Base)" + QtyToHandleBase;
        IF QtyPerUOM = WhseInternalPickLine."Qty. per Unit of Measure" THEN
          WhseInternalPickLine."Qty. Picked" :=
            WhseInternalPickLine."Qty. Picked" + QtyToHandle
        ELSE
          WhseInternalPickLine."Qty. Picked" :=
            ROUND(
              WhseInternalPickLine."Qty. Picked" + QtyToHandleBase / QtyPerUOM);
        WhseInternalPickLine.VALIDATE(
          "Qty. Outstanding",WhseInternalPickLine."Qty. Outstanding" - QtyToHandle);
        WhseInternalPickLine.Status := WhseInternalPickLine.CalcStatusPickLine;
        WhseInternalPickLine.MODIFY;
      END;
    END;

    LOCAL PROCEDURE UpdateWhseIntPutAwayLine@12(WhseDocNo@1004 : Code[20];WhseDocLineNo@1003 : Integer;QtyToHandle@1002 : Decimal;QtyToHandleBase@1001 : Decimal;QtyPerUOM@1000 : Decimal);
    BEGIN
      WhseInternalPutAwayLine.GET(WhseDocNo,WhseDocLineNo);
      IF WhseInternalPutAwayLine."Qty. (Base)" =
         WhseInternalPutAwayLine."Qty. Put Away (Base)" + QtyToHandleBase
      THEN
        WhseInternalPutAwayLine.DELETE
      ELSE BEGIN
        WhseInternalPutAwayLine."Qty. Put Away (Base)" :=
          WhseInternalPutAwayLine."Qty. Put Away (Base)" + QtyToHandleBase;
        IF QtyPerUOM = WhseInternalPutAwayLine."Qty. per Unit of Measure" THEN
          WhseInternalPutAwayLine."Qty. Put Away" :=
            WhseInternalPutAwayLine."Qty. Put Away" + QtyToHandle
        ELSE
          WhseInternalPutAwayLine."Qty. Put Away" :=
            ROUND(
              WhseInternalPutAwayLine."Qty. Put Away" +
              QtyToHandleBase / WhseInternalPutAwayLine."Qty. per Unit of Measure");
        WhseInternalPutAwayLine.VALIDATE(
          "Qty. Outstanding",WhseInternalPutAwayLine."Qty. Outstanding" - QtyToHandle);
        WhseInternalPutAwayLine.Status := WhseInternalPutAwayLine.CalcStatusPutAwayLine;
        WhseInternalPutAwayLine.MODIFY;
      END;
    END;

    PROCEDURE UpdateProdCompLine@13(SourceSubType@1006 : Option;SourceNo@1004 : Code[20];SourceLineNo@1003 : Integer;SourceSubLineNo@1005 : Integer;QtyToHandle@1002 : Decimal;QtyToHandleBase@1001 : Decimal;QtyPerUOM@1000 : Decimal);
    BEGIN
      ProdCompLine.GET(SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo);
      ProdCompLine."Qty. Picked (Base)" :=
        ProdCompLine."Qty. Picked (Base)" +  QtyToHandleBase;
      IF QtyPerUOM = ProdCompLine."Qty. per Unit of Measure" THEN
        ProdCompLine."Qty. Picked" := ProdCompLine."Qty. Picked" + QtyToHandle
      ELSE
        ProdCompLine."Qty. Picked" :=
          ROUND(ProdCompLine."Qty. Picked" +  QtyToHandleBase / QtyPerUOM);
      ProdCompLine."Completely Picked" :=
        ProdCompLine."Qty. Picked" = ProdCompLine."Expected Quantity";
      ProdCompLine.MODIFY;
    END;

    LOCAL PROCEDURE LocationGet@4(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetItemUnitOfMeasure2@9(ItemNo@1000 : Code[20];UOMCode@1001 : Code[10]);
    BEGIN
      IF (ItemUnitOfMeasure."Item No." <> ItemNo) OR
         (ItemUnitOfMeasure.Code <> UOMCode)
      THEN
        IF NOT ItemUnitOfMeasure.GET(ItemNo,UOMCode) THEN
          ItemUnitOfMeasure.INIT;
    END;

    LOCAL PROCEDURE UpdateTempBinContentBuffer@1(WhseActivLine@1000 : Record 5767);
    VAR
      WMSMgt@1002 : Codeunit 7302;
      UOMCode@1003 : Code[10];
      Sign@1001 : Integer;
    BEGIN
      WITH WhseActivLine DO BEGIN
        IF Location."Directed Put-away and Pick" THEN
          UOMCode := "Unit of Measure Code"
        ELSE
          UOMCode := WMSMgt.GetBaseUOM("Item No.");
        IF NOT TempBinContentBuffer.GET("Location Code","Bin Code","Item No.","Variant Code",UOMCode,"Lot No.","Serial No.")
        THEN BEGIN
          TempBinContentBuffer.INIT;
          TempBinContentBuffer."Location Code" := "Location Code";
          TempBinContentBuffer."Zone Code" := "Zone Code";
          TempBinContentBuffer."Bin Code" := "Bin Code";
          TempBinContentBuffer."Item No." := "Item No.";
          TempBinContentBuffer."Variant Code" := "Variant Code";
          TempBinContentBuffer."Unit of Measure Code" := UOMCode;
          TempBinContentBuffer."Lot No." := "Lot No.";
          TempBinContentBuffer."Serial No." := "Serial No.";
          TempBinContentBuffer.INSERT;
        END;
        Sign := 1;
        IF "Action Type" = "Action Type"::Take THEN
          Sign := -1;

        TempBinContentBuffer."Base Unit of Measure" := WMSMgt.GetBaseUOM("Item No.");
        TempBinContentBuffer."Qty. to Handle (Base)" := TempBinContentBuffer."Qty. to Handle (Base)" + Sign * "Qty. to Handle (Base)";
        TempBinContentBuffer."Qty. Outstanding (Base)" :=
          TempBinContentBuffer."Qty. Outstanding (Base)" + Sign * "Qty. Outstanding (Base)";
        TempBinContentBuffer.Cubage := TempBinContentBuffer.Cubage + Sign * Cubage;
        TempBinContentBuffer.Weight := TempBinContentBuffer.Weight + Sign * Weight;
        TempBinContentBuffer.MODIFY;
      END;
    END;

    LOCAL PROCEDURE CheckBin@18();
    VAR
      Bin@1000 : Record 7354;
    BEGIN
      WITH TempBinContentBuffer DO BEGIN
        SETFILTER("Qty. to Handle (Base)",'>0');
        IF FIND('-') THEN
          REPEAT
            SETRANGE("Qty. to Handle (Base)");
            SETRANGE("Bin Code","Bin Code");
            CALCSUMS(Cubage,Weight);
            Bin.GET("Location Code","Bin Code");
            Bin.CheckIncreaseBin(
              "Bin Code",'',"Qty. to Handle (Base)",Cubage,Weight,Cubage,Weight,TRUE);
            SETFILTER("Qty. to Handle (Base)",'>0');
            FIND('+');
            SETRANGE("Bin Code");
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckBinContent@10();
    VAR
      BinContent@1000 : Record 7302;
      Bin@1001 : Record 7354;
      BreakBulkQtyBaseToPlace@1002 : Decimal;
      WhseSNRequired@1102601001 : Boolean;
      WhseLNRequired@1102601000 : Boolean;
    BEGIN
      WITH TempBinContentBuffer DO BEGIN
        SETFILTER("Qty. to Handle (Base)",'<>0');
        IF FIND('-') THEN
          REPEAT
            IF "Qty. to Handle (Base)" < 0 THEN BEGIN
              BinContent.GET(
                "Location Code","Bin Code",
                "Item No.","Variant Code","Unit of Measure Code");
              ItemTrackingMgt.CheckWhseItemTrkgSetup(BinContent."Item No.",WhseSNRequired,WhseLNRequired,FALSE);
              IF WhseLNRequired THEN
                BinContent.SETRANGE("Lot No. Filter","Lot No.");
              IF WhseSNRequired THEN
                BinContent.SETRANGE("Serial No. Filter","Serial No.");
              BreakBulkQtyBaseToPlace := CalcBreakBulkQtyToPlace(TempBinContentBuffer);
              IF BreakBulkQtyBaseToPlace > 0 THEN
                BinContent.CheckDecreaseBinContent(ABS("Qty. to Handle (Base)"),BreakBulkQtyBaseToPlace - "Qty. to Handle (Base)")
              ELSE
                BinContent.CheckDecreaseBinContent(ABS("Qty. to Handle (Base)"),ABS("Qty. Outstanding (Base)"))
            END ELSE BEGIN
              Bin.GET("Location Code","Bin Code");
              Bin.CheckWhseClass("Item No.");
            END;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CalcBreakBulkQtyToPlace@20(TempBinContentBuffer@1000 : Record 7330) QtyBase : Decimal;
    VAR
      BreakBulkWhseActivLine@1001 : Record 5767;
    BEGIN
      WITH TempBinContentBuffer DO BEGIN
        BreakBulkWhseActivLine.SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Action Type","Variant Code",
          "Unit of Measure Code","Breakbulk No.","Activity Type","Lot No.","Serial No.");
        BreakBulkWhseActivLine.SETRANGE("Item No.","Item No.");
        BreakBulkWhseActivLine.SETRANGE("Bin Code","Bin Code");
        BreakBulkWhseActivLine.SETRANGE("Location Code","Location Code");
        BreakBulkWhseActivLine.SETRANGE("Action Type",BreakBulkWhseActivLine."Action Type"::Place);
        BreakBulkWhseActivLine.SETRANGE("Variant Code","Variant Code");
        BreakBulkWhseActivLine.SETRANGE("Unit of Measure Code","Unit of Measure Code");
        BreakBulkWhseActivLine.SETFILTER("Breakbulk No.",'<>0');
        BreakBulkWhseActivLine.SETRANGE("Activity Type",WhseActivHeader.Type);
        BreakBulkWhseActivLine.SETRANGE("Lot No.","Lot No.");
        BreakBulkWhseActivLine.SETRANGE("Serial No.","Serial No.");
        BreakBulkWhseActivLine.SETRANGE("No.",WhseActivHeader."No.");
        IF BreakBulkWhseActivLine.FIND('-') THEN
          REPEAT
            QtyBase := QtyBase + BreakBulkWhseActivLine."Qty. to Handle (Base)";
          UNTIL BreakBulkWhseActivLine.NEXT = 0;
      END;
      EXIT(QtyBase);
    END;

    LOCAL PROCEDURE DeleteBinContent@15(WhseActivLine@1000 : Record 5767);
    VAR
      FromBinContent@1001 : Record 7302;
    BEGIN
      WITH WhseActivLine DO BEGIN
        IF FromBinContent.GET(
            "Location Code","Bin Code","Item No.","Variant Code","Unit of Measure Code")
        THEN
          IF NOT FromBinContent.Fixed THEN BEGIN
            FromBinContent.CALCFIELDS(
              "Quantity (Base)","Positive Adjmt. Qty. (Base)","Put-away Quantity (Base)");
            IF (FromBinContent."Quantity (Base)" = 0) AND
               (FromBinContent."Positive Adjmt. Qty. (Base)" = 0) AND
               (FromBinContent."Put-away Quantity (Base)" - "Qty. Outstanding (Base)" <= 0)
            THEN
              FromBinContent.DELETE;
          END;
      END;
    END;

    LOCAL PROCEDURE CheckWhseItemTrkgLine@28(VAR WhseActivLine@1000 : Record 5767);
    VAR
      TempWhseActivLine@1003 : TEMPORARY Record 5767;
      QtyAvailToRegisterBase@1001 : Decimal;
      QtyAvailToInsertBase@1002 : Decimal;
      QtyToRegisterBase@1004 : Decimal;
      WhseSNRequired@1005 : Boolean;
      WhseLNRequired@1007 : Boolean;
    BEGIN
      IF WhseActivLine."Activity Type" <> WhseActivLine."Activity Type"::Pick THEN
        EXIT;

      IF WhseActivLine.FIND('-') THEN
        REPEAT
          TempWhseActivLine := WhseActivLine;
          IF NOT (TempWhseActivLine."Action Type" = TempWhseActivLine."Action Type"::Place) THEN
            TempWhseActivLine.INSERT;
        UNTIL WhseActivLine.NEXT = 0;

      TempWhseActivLine.SETCURRENTKEY("Item No.");
      IF TempWhseActivLine.FIND('-') THEN
        REPEAT
          TempWhseActivLine.SETRANGE("Item No.",TempWhseActivLine."Item No.");
          ItemTrackingMgt.CheckWhseItemTrkgSetup(TempWhseActivLine."Item No.",WhseSNRequired,WhseLNRequired,FALSE);
          IF WhseSNRequired OR WhseLNRequired THEN
            REPEAT
              IF WhseSNRequired THEN BEGIN
                TempWhseActivLine.TESTFIELD("Serial No.");
                TempWhseActivLine.TESTFIELD(TempWhseActivLine."Qty. (Base)",1);
              END;
              IF WhseLNRequired THEN
                TempWhseActivLine.TESTFIELD("Lot No.");
            UNTIL TempWhseActivLine.NEXT = 0
          ELSE BEGIN
            TempWhseActivLine.FIND('+');
            TempWhseActivLine.DELETEALL;
          END;
          TempWhseActivLine.SETRANGE("Item No.");
      UNTIL TempWhseActivLine.NEXT = 0;

      TempWhseActivLine.RESET;
      TempWhseActivLine.SETCURRENTKEY(
        "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
      TempWhseActivLine.SETRANGE(TempWhseActivLine."Breakbulk No.",0);
      IF TempWhseActivLine.FIND('-') THEN
        REPEAT  // Per document
          TempWhseActivLine.SETRANGE("Source Type",TempWhseActivLine."Source Type");
          TempWhseActivLine.SETRANGE("Source Subtype",TempWhseActivLine."Source Subtype");
          TempWhseActivLine.SETRANGE("Source No.",TempWhseActivLine."Source No.");
          TempWhseActivLine.SETRANGE("Source Line No.",TempWhseActivLine."Source Line No.");
          TempWhseActivLine.SETRANGE("Source Subline No.",TempWhseActivLine."Source Subline No.");
          QtyAvailToInsertBase := CalcQtyAvailToInsertBase(TempWhseActivLine);
          REPEAT // Per Lot/SN
            TempWhseActivLine.SETRANGE("Serial No.",TempWhseActivLine."Serial No.");
            TempWhseActivLine.SETRANGE("Lot No.",TempWhseActivLine."Lot No.");
            QtyToRegisterBase := 0;
            REPEAT
              QtyToRegisterBase := QtyToRegisterBase + TempWhseActivLine."Qty. to Handle (Base)";
            UNTIL TempWhseActivLine.NEXT = 0;

            QtyAvailToRegisterBase := CalcQtyAvailToRegisterBase(TempWhseActivLine);
            IF QtyToRegisterBase > QtyAvailToRegisterBase THEN
              QtyAvailToInsertBase -= QtyToRegisterBase - QtyAvailToRegisterBase;
            IF QtyAvailToInsertBase < 0 THEN
              ERROR(Text004);

            IF TempWhseActivLine."Serial No." <> '' THEN
              IF CalcTotalAvailQtyToPick(TempWhseActivLine,WhseSNRequired,WhseLNRequired) < QtyToRegisterBase THEN
                ERROR(Text005,TempWhseActivLine.FIELDCAPTION("Serial No."),TempWhseActivLine."Serial No.");
            IF TempWhseActivLine."Lot No." <> '' THEN
              IF CalcTotalAvailQtyToPick(TempWhseActivLine,WhseSNRequired,WhseLNRequired) < QtyToRegisterBase THEN
                ERROR(Text005,TempWhseActivLine.FIELDCAPTION("Lot No."),TempWhseActivLine."Lot No.");

            // Clear filters, Lot/SN
            TempWhseActivLine.SETRANGE("Serial No.");
            TempWhseActivLine.SETRANGE("Lot No.");
          UNTIL TempWhseActivLine.NEXT = 0; // Per Lot/SN
          // Clear filters, document
          TempWhseActivLine.SETRANGE("Source Type");
          TempWhseActivLine.SETRANGE("Source Subtype");
          TempWhseActivLine.SETRANGE("Source No.");
          TempWhseActivLine.SETRANGE("Source Line No.");
          TempWhseActivLine.SETRANGE("Source Subline No.");
        UNTIL TempWhseActivLine.NEXT = 0;   // Per document
    END;

    LOCAL PROCEDURE RegisterWhseItemTrkgLine@16(WhseActivLine2@1000 : Record 5767);
    VAR
      WhseItemTrkgLine@1006 : Record 6550;
      ProdOrderComp@1008 : Record 5407;
      WhseShptLine@1007 : Record 7321;
      QtyToRegisterBase@1003 : Decimal;
      QuantityBase@1005 : Decimal;
      DueDate@1004 : Date;
      NextEntryNo@1009 : Integer;
      WhseSNRequired@1001 : Boolean;
      WhseLNRequired@1002 : Boolean;
    BEGIN
      ItemTrackingMgt.CheckWhseItemTrkgSetup(WhseActivLine2."Item No.",WhseSNRequired,WhseLNRequired,FALSE);
      IF NOT (WhseSNRequired OR WhseLNRequired) THEN
        EXIT;

      QtyToRegisterBase := WhseActivLine2."Qty. to Handle (Base)";
      SetPointerFilter(WhseActivLine2,WhseItemTrkgLine);

      WITH WhseItemTrkgLine DO BEGIN
        SETRANGE("Serial No.",WhseActivLine2."Serial No.");
        SETRANGE("Lot No.",WhseActivLine2."Lot No.");
        IF FIND('-') THEN
          REPEAT
            IF QtyToRegisterBase > ("Quantity (Base)" - "Qty. Registered (Base)") THEN BEGIN
              QtyToRegisterBase := QtyToRegisterBase - ("Quantity (Base)" - "Qty. Registered (Base)");
              "Qty. Registered (Base)" := "Quantity (Base)";
            END ELSE BEGIN
              "Qty. Registered (Base)" += QtyToRegisterBase;
              QtyToRegisterBase := 0;
            END;
            UpdateTempTracking(WhseActivLine2);
            ItemTrackingMgt.SetRegistering(TRUE);
            ItemTrackingMgt.CalcWhseItemTrkgLine(WhseItemTrkgLine);
            MODIFY;
          UNTIL (NEXT = 0) OR (QtyToRegisterBase = 0);
      END;

      IF QtyToRegisterBase > 0 THEN BEGIN
        IF WhseActivLine2."Activity Type" = WhseActivLine2."Activity Type"::Pick THEN
          WhseActivLine2."Qty. (Base)" := QtyToRegisterBase;
        InsertRegWhseItemTrkgLine(WhseActivLine2);

        IF WhseActivLine2."Whse. Document Type" IN
          [WhseActivLine2."Whse. Document Type"::Shipment,
           WhseActivLine2."Whse. Document Type"::Production]
        THEN BEGIN
          CASE WhseActivLine2."Whse. Document Type" OF
            WhseActivLine2."Whse. Document Type"::Shipment:
              BEGIN
                WhseShptLine.GET(WhseActivLine2."Whse. Document No.",WhseActivLine2."Whse. Document Line No.");
                QuantityBase := WhseShptLine."Qty. (Base)";
                DueDate := WhseShptLine."Due Date";
              END;
            WhseActivLine2."Whse. Document Type"::Production:
              BEGIN
                ProdOrderComp.GET(WhseActivLine2."Source Subtype",WhseActivLine2."Source No.",
                  WhseActivLine2."Source Line No.",WhseActivLine2."Source Subline No.");
                QuantityBase := ProdOrderComp."Expected Qty. (Base)";
                DueDate := ProdOrderComp."Due Date";
              END;
          END;

          IF TempTrackingSpecification.FIND('+') THEN
            NextEntryNo := TempTrackingSpecification."Entry No." + 1
          ELSE
            NextEntryNo := 1;

          TempTrackingSpecification.INIT;
          TempTrackingSpecification."Entry No." := NextEntryNo;
          TempTrackingSpecification."Source Type" := WhseActivLine2."Source Type";
          TempTrackingSpecification."Source Subtype" := WhseActivLine2."Source Subtype";
          TempTrackingSpecification."Source ID" := WhseActivLine2."Source No.";
          IF WhseActivLine."Source Type" = DATABASE::"Prod. Order Component" THEN BEGIN
            TempTrackingSpecification."Source Prod. Order Line" := WhseActivLine2."Source Line No.";
            TempTrackingSpecification."Source Ref. No." := WhseActivLine2."Source Subline No.";
          END ELSE BEGIN
            TempTrackingSpecification."Source Prod. Order Line" := 0;
            TempTrackingSpecification."Source Ref. No." := WhseActivLine2."Source Line No.";
          END;
          TempTrackingSpecification."Creation Date" := DueDate;
          TempTrackingSpecification."Qty. to Handle (Base)" := QtyToRegisterBase;
          TempTrackingSpecification."Item No." := WhseActivLine2."Item No.";
          TempTrackingSpecification."Variant Code" := WhseActivLine2."Variant Code";
          TempTrackingSpecification."Location Code" := WhseActivLine2."Location Code";
          TempTrackingSpecification.Description := WhseActivLine2.Description;
          TempTrackingSpecification."Qty. per Unit of Measure" := WhseActivLine2."Qty. per Unit of Measure";
          TempTrackingSpecification."Serial No." := WhseActivLine2."Serial No.";
          TempTrackingSpecification."Lot No." := WhseActivLine2."Lot No.";
          TempTrackingSpecification."Warranty Date" := WhseActivLine2."Warranty Date";
          TempTrackingSpecification."Expiration Date" := WhseActivLine2."Expiration Date";
          TempTrackingSpecification."Quantity (Base)" := QtyToRegisterBase;
          TempTrackingSpecification.INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE CalcQtyAvailToRegisterBase@19(WhseActivLine@1000 : Record 5767) : Decimal;
    VAR
      WhseItemTrkgLine@1001 : Record 6550;
      WhseItemTrkgLine2@1002 : Record 6550;
    BEGIN
      WhseItemTrkgLine2.INIT;
      SetPointerFilter(WhseActivLine,WhseItemTrkgLine);
      WhseItemTrkgLine.SETRANGE("Serial No.",WhseActivLine."Serial No.");
      WhseItemTrkgLine.SETRANGE("Lot No.",WhseActivLine."Lot No.");
      IF WhseItemTrkgLine.FIND('-') THEN
        REPEAT
          WhseItemTrkgLine2."Quantity (Base)" += WhseItemTrkgLine."Quantity (Base)";
          WhseItemTrkgLine2."Qty. Registered (Base)" += WhseItemTrkgLine."Qty. Registered (Base)";
        UNTIL WhseItemTrkgLine.NEXT = 0;
      EXIT(WhseItemTrkgLine2."Quantity (Base)" - WhseItemTrkgLine2."Qty. Registered (Base)");
    END;

    LOCAL PROCEDURE SourceLineQtyBase@27(WhseActivLine@1000 : Record 5767) : Decimal;
    VAR
      WhsePostedRcptLine@1003 : Record 7319;
      WhseShipmentLine@1001 : Record 7321;
      WhseIntPutAwayLine@1004 : Record 7332;
      WhseIntPickLine@1002 : Record 7334;
      ProdOrderComponent@1005 : Record 5407;
      WhseMovementWksh@1006 : Record 7326;
    BEGIN
      CASE WhseActivLine."Whse. Document Type" OF
        WhseActivLine."Whse. Document Type"::Receipt:
          IF WhsePostedRcptLine.GET(
            WhseActivLine."Whse. Document No.",WhseActivLine."Whse. Document Line No.") THEN
              EXIT(WhsePostedRcptLine."Qty. (Base)");
        WhseActivLine."Whse. Document Type"::Shipment:
          IF WhseShipmentLine.GET(
            WhseActivLine."Whse. Document No.",WhseActivLine."Whse. Document Line No.") THEN
              EXIT(WhseShipmentLine."Qty. (Base)");
        WhseActivLine."Whse. Document Type"::"Internal Put-away":
          IF WhseIntPutAwayLine.GET(
            WhseActivLine."Whse. Document No.",WhseActivLine."Whse. Document Line No.") THEN
              EXIT(WhseIntPutAwayLine."Qty. (Base)");
        WhseActivLine."Whse. Document Type"::"Internal Pick":
          IF WhseIntPickLine.GET(
            WhseActivLine."Whse. Document No.",WhseActivLine."Whse. Document Line No.") THEN
              EXIT(WhseIntPickLine."Qty. (Base)");
        WhseActivLine."Whse. Document Type"::Production:
          IF ProdOrderComponent.GET(
            WhseActivLine."Source Subtype",WhseActivLine."Source No.",
            WhseActivLine."Source Line No.",WhseActivLine."Source Subline No.") THEN
              EXIT(ProdOrderComponent."Expected Qty. (Base)");
        WhseActivLine."Whse. Document Type"::"Movement Worksheet":
          IF WhseMovementWksh.GET(
            WhseActivLine."Whse. Document No.",WhseActivLine."Source No.",
            WhseActivLine."Location Code",WhseActivLine."Source Line No.") THEN
              EXIT(WhseMovementWksh."Qty. (Base)");
      END;
    END;

    LOCAL PROCEDURE CalcQtyAvailToInsertBase@22(WhseActivLine@1000 : Record 5767) : Decimal;
    VAR
      WhseItemTrkgLine@1001 : Record 6550;
    BEGIN
      SetPointerFilter(WhseActivLine,WhseItemTrkgLine);
      WhseItemTrkgLine.CALCSUMS(WhseItemTrkgLine."Quantity (Base)");
      EXIT(SourceLineQtyBase(WhseActivLine) - WhseItemTrkgLine."Quantity (Base)");
    END;

    LOCAL PROCEDURE InsertRegWhseItemTrkgLine@21(WhseActivLine@1000 : Record 5767);
    VAR
      WhseItemTrkgLine2@1002 : Record 6550;
      NextEntryNo@1003 : Integer;
    BEGIN
      WhseItemTrkgLine2.RESET;
      IF WhseItemTrkgLine2.FIND('+') THEN
        NextEntryNo := WhseItemTrkgLine2."Entry No." + 1;

      WhseItemTrkgLine2.INIT;
      WhseItemTrkgLine2."Entry No." := NextEntryNo;
      WhseItemTrkgLine2."Item No." := WhseActivLine."Item No.";
      WhseItemTrkgLine2.Description := WhseActivLine.Description;
      WhseItemTrkgLine2."Variant Code" := WhseActivLine."Variant Code";
      WhseItemTrkgLine2."Location Code" := WhseActivLine."Location Code";

      SetPointer(WhseActivLine,WhseItemTrkgLine2);

      WhseItemTrkgLine2."Serial No." := WhseActivLine."Serial No.";
      WhseItemTrkgLine2."Lot No." := WhseActivLine."Lot No.";
      WhseItemTrkgLine2."Warranty Date" := WhseActivLine."Warranty Date";
      WhseItemTrkgLine2."Expiration Date" := WhseActivLine."Expiration Date";
      WhseItemTrkgLine2."Quantity (Base)" := WhseActivLine."Qty. to Handle (Base)";
      WhseItemTrkgLine2."Qty. per Unit of Measure" := WhseActivLine."Qty. per Unit of Measure";
      WhseItemTrkgLine2."Qty. Registered (Base)" := WhseActivLine."Qty. to Handle (Base)";

      ItemTrackingMgt.SetRegistering(TRUE);
      ItemTrackingMgt.CalcWhseItemTrkgLine(WhseItemTrkgLine2);
      WhseItemTrkgLine2.INSERT;
    END;

    PROCEDURE SetPointer@33(WhseActivLine@1000 : Record 5767;VAR WhseItemTrkgLine@1001 : Record 6550);
    BEGIN
      CASE WhseActivLine."Whse. Document Type" OF
        WhseActivLine."Whse. Document Type"::Receipt:
          BEGIN
            WhseItemTrkgLine."Source Type" := DATABASE::"Posted Whse. Receipt Line";
            WhseItemTrkgLine."Source ID" := WhseActivLine."Whse. Document No.";
            WhseItemTrkgLine."Source Ref. No." := WhseActivLine."Whse. Document Line No.";
            WhseItemTrkgLine."Location Code" := WhseActivLine."Location Code";
          END;
        WhseActivLine."Whse. Document Type"::Shipment:
          BEGIN
            WhseItemTrkgLine."Source Type" := DATABASE::"Warehouse Shipment Line";
            WhseItemTrkgLine."Source ID" := WhseActivLine."Whse. Document No.";
            WhseItemTrkgLine."Source Ref. No." := WhseActivLine."Whse. Document Line No.";
            WhseItemTrkgLine."Location Code" := WhseActivLine."Location Code";
          END;
        WhseActivLine."Whse. Document Type"::"Internal Put-away":
          BEGIN
            WhseItemTrkgLine."Source Type" := DATABASE::"Whse. Internal Put-away Line";
            WhseItemTrkgLine."Source ID" := WhseActivLine."Whse. Document No.";
            WhseItemTrkgLine."Source Ref. No." := WhseActivLine."Whse. Document Line No.";
            WhseItemTrkgLine."Location Code" := WhseActivLine."Location Code";
          END;
        WhseActivLine."Whse. Document Type"::"Internal Pick":
          BEGIN
            WhseItemTrkgLine."Source Type" := DATABASE::"Whse. Internal Pick Line";
            WhseItemTrkgLine."Source ID" := WhseActivLine."Whse. Document No.";
            WhseItemTrkgLine."Source Ref. No." := WhseActivLine."Whse. Document Line No.";
            WhseItemTrkgLine."Location Code" := WhseActivLine."Location Code";
          END;
        WhseActivLine."Whse. Document Type"::Production:
          BEGIN
            WhseItemTrkgLine."Source Type" := DATABASE::"Prod. Order Component";
            WhseItemTrkgLine."Source Subtype" := WhseActivLine."Source Subtype";
            WhseItemTrkgLine."Source ID" := WhseActivLine."Source No.";
            WhseItemTrkgLine."Source Prod. Order Line" := WhseActivLine."Source Line No.";
            WhseItemTrkgLine."Source Ref. No." := WhseActivLine."Source Subline No.";
            WhseItemTrkgLine."Location Code" := WhseActivLine."Location Code";
          END;
        WhseActivLine."Whse. Document Type"::"Movement Worksheet":
          BEGIN
            WhseItemTrkgLine."Source Type" := DATABASE::"Whse. Worksheet Line";
            WhseItemTrkgLine."Source ID" := WhseActivLine."Source No.";
            WhseItemTrkgLine."Source Batch Name" := WhseActivLine."Whse. Document No.";
            WhseItemTrkgLine."Source Ref. No." := WhseActivLine."Whse. Document Line No.";
            WhseItemTrkgLine."Location Code" := WhseActivLine."Location Code";
          END;
      END;
    END;

    PROCEDURE SetPointerFilter@35(WhseActivLine@1000 : Record 5767;VAR WhseItemTrkgLine@1001 : Record 6550);
    VAR
      WhseItemTrkgLine2@1002 : Record 6550;
    BEGIN
      WhseItemTrkgLine.SETCURRENTKEY(
        "Source ID","Source Type","Source Subtype","Source Batch Name",
        "Source Prod. Order Line","Source Ref. No.","Location Code");
      SetPointer(WhseActivLine,WhseItemTrkgLine2);
      WhseItemTrkgLine.SETRANGE("Source Type",WhseItemTrkgLine2."Source Type");
      WhseItemTrkgLine.SETRANGE("Source Subtype",WhseItemTrkgLine2."Source Subtype");
      WhseItemTrkgLine.SETRANGE("Source ID",WhseItemTrkgLine2."Source ID");
      WhseItemTrkgLine.SETRANGE("Source Batch Name",WhseItemTrkgLine2."Source Batch Name");
      WhseItemTrkgLine.SETRANGE("Source Prod. Order Line",WhseItemTrkgLine2."Source Prod. Order Line");
      WhseItemTrkgLine.SETRANGE("Source Ref. No.",WhseItemTrkgLine2."Source Ref. No.");
      WhseItemTrkgLine.SETRANGE("Location Code",WhseItemTrkgLine2."Location Code");
    END;

    PROCEDURE ShowHideDialog@36(HideDialog2@1000 : Boolean);
    BEGIN
      HideDialog := HideDialog2;
    END;

    LOCAL PROCEDURE CalcTotalAvailQtyToPick@56(WhseActivLine@1000 : Record 5767;SNRequired@1002 : Boolean;LNRequired@1001 : Boolean) : Decimal;
    VAR
      WhseEntry@1006 : Record 7312;
      ItemLedgEntry@1012 : Record 32;
      CreatePick@1025 : Codeunit 7312;
      TotalAvailQtyBase@1004 : Decimal;
      QtyInWhseBase@1008 : Decimal;
      QtyOnPickBinsBase@1007 : Decimal;
      QtyOnOutboundBinsBase@1009 : Decimal;
      SubTotalBase@1010 : Decimal;
      QtyReservedOnPickShipBase@1011 : Decimal;
      LineReservedQtyBase@1005 : Decimal;
      QtyPickedNotShipped@1003 : Decimal;
    BEGIN
      WITH WhseActivLine DO BEGIN
        GetItem("Item No.");
        LocationGet("Location Code");
        Item.SETRANGE("Location Filter","Location Code");
        Item.SETRANGE("Variant Filter","Variant Code");
        IF "Lot No." <> '' THEN BEGIN
          IF LNRequired THEN
            Item.SETRANGE("Lot No. Filter","Lot No.")
          ELSE
            Item.SETFILTER("Lot No. Filter",'%1|%2',"Lot No.",'')
        END ELSE
          Item.SETRANGE("Lot No. Filter");
        IF "Serial No." <> '' THEN BEGIN
          IF SNRequired THEN
            Item.SETRANGE("Serial No. Filter","Serial No.")
          ELSE
            Item.SETFILTER("Serial No. Filter",'%1|%2',"Serial No.",'');
        END ELSE
          Item.SETRANGE("Serial No. Filter");
        Item.CALCFIELDS("Reserved Qty. on Inventory");

        IF Location."Directed Put-away and Pick" THEN BEGIN
          WhseEntry.SETCURRENTKEY("Item No.","Location Code","Variant Code","Bin Type Code");
          WhseEntry.SETRANGE("Item No.","Item No.");
          WhseEntry.SETRANGE("Location Code","Location Code");
          WhseEntry.SETRANGE("Variant Code","Variant Code");
          IF "Lot No." <> '' THEN
            IF LNRequired THEN
              WhseEntry.SETRANGE("Lot No.","Lot No.")
            ELSE
              WhseEntry.SETFILTER("Lot No.",'%1|%2',"Lot No.",'');
          IF "Serial No." <> '' THEN
            IF SNRequired THEN
              WhseEntry.SETRANGE("Serial No.","Serial No.")
            ELSE
              WhseEntry.SETFILTER("Serial No.",'%1|%2',"Serial No.",'');
          WhseEntry.CALCSUMS("Qty. (Base)");
          QtyInWhseBase := WhseEntry."Qty. (Base)";

          WhseEntry.SETFILTER("Bin Type Code",'<>%1',CreatePick.GetBinTypeFilter(0)); // Pick from all but Receive area
          WhseEntry.CALCSUMS("Qty. (Base)");
          QtyOnPickBinsBase := WhseEntry."Qty. (Base)";

          QtyOnOutboundBinsBase :=
            CreatePick.CalcQtyOnOutboundBins(
              "Location Code","Item No.","Variant Code","Lot No.","Serial No.");

          SubTotalBase :=
            QtyInWhseBase - QtyOnPickBinsBase - QtyOnOutboundBinsBase - ABS(Item."Reserved Qty. on Inventory");
          IF SubTotalBase < 0 THEN BEGIN
            QtyReservedOnPickShipBase :=
              CreatePick.CalcReservQtyOnPicksShips("Location Code","Item No.","Variant Code");

            LineReservedQtyBase :=
              CreatePick.CalcLineReservedQtyonInvt(
                "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.",TRUE);

            IF ABS(SubTotalBase) < QtyReservedOnPickShipBase + LineReservedQtyBase THEN
              QtyReservedOnPickShipBase := ABS(SubTotalBase) - LineReservedQtyBase;

            TotalAvailQtyBase :=
              QtyOnPickBinsBase +
              SubTotalBase +
              QtyReservedOnPickShipBase +
              LineReservedQtyBase;
          END ELSE
            TotalAvailQtyBase := QtyOnPickBinsBase;
        END ELSE BEGIN
          ItemLedgEntry.SETCURRENTKEY(
            "Item No.",Open,"Variant Code",Positive,"Location Code","Posting Date","Expiration Date","Lot No.","Serial No.");
          ItemLedgEntry.SETRANGE("Item No.","Item No.");
          ItemLedgEntry.SETRANGE("Variant Code","Variant Code");
          ItemLedgEntry.SETRANGE(Open,TRUE);
          ItemLedgEntry.SETRANGE("Location Code","Location Code");

          IF SNRequired THEN
            ItemLedgEntry.SETRANGE("Serial No.","Serial No.")
          ELSE
            ItemLedgEntry.SETFILTER("Serial No.",'%1|%2',"Serial No.",'');

          IF LNRequired THEN
            ItemLedgEntry.SETRANGE("Lot No.","Lot No.")
          ELSE
            ItemLedgEntry.SETFILTER("Lot No.",'%1|%2',"Lot No.",'');

          ItemLedgEntry.CALCSUMS("Remaining Quantity");
          QtyInWhseBase := ItemLedgEntry."Remaining Quantity";

          QtyPickedNotShipped := CalcQtyPickedNotShipped(WhseActivLine,SNRequired,LNRequired);

          LineReservedQtyBase :=
            CreatePick.CalcLineReservedQtyonInvt(
              "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.",FALSE);

          TotalAvailQtyBase :=
            QtyInWhseBase -
            QtyPickedNotShipped -
            ABS(Item."Reserved Qty. on Inventory") +
            LineReservedQtyBase;
        END;

        EXIT(TotalAvailQtyBase);
      END;
    END;

    LOCAL PROCEDURE CalcQtyPickedNotShipped@24(WhseActivLine@1001 : Record 5767;SNRequired@1000 : Boolean;LNRequired@1004 : Boolean) QtyBasePicked : Decimal;
    VAR
      ReservEntry@1005 : Record 337;
      RegWhseActivLine@1002 : Record 5773;
      QtyHandled@1003 : Decimal;
    BEGIN
      WITH WhseActivLine DO BEGIN
        ReservEntry.RESET;
        ReservEntry.SETCURRENTKEY("Item No.","Variant Code","Location Code","Reservation Status");
        ReservEntry.SETRANGE("Item No.","Item No.");
        ReservEntry.SETRANGE("Variant Code","Variant Code");
        ReservEntry.SETRANGE("Location Code","Location Code");
        ReservEntry.SETRANGE("Reservation Status", ReservEntry."Reservation Status"::Surplus);

        IF SNRequired THEN
          ReservEntry.SETRANGE("Serial No.","Serial No.")
        ELSE
          ReservEntry.SETFILTER("Serial No.",'%1|%2',"Serial No.",'');

        IF LNRequired THEN
          ReservEntry.SETRANGE("Lot No.","Lot No.")
        ELSE
          ReservEntry.SETFILTER("Lot No.",'%1|%2',"Lot No.",'');

        IF ReservEntry.FIND('-') THEN
          REPEAT
            IF NOT ((ReservEntry."Source Type" = "Source Type") AND
                    (ReservEntry."Source Subtype" = "Source Subtype") AND
                    (ReservEntry."Source ID" = "Source No.") AND
                    (ReservEntry."Source Ref. No." = "Source Line No.")) AND
                    NOT ReservEntry.Positive
            THEN
              QtyBasePicked := QtyBasePicked + ABS(ReservEntry."Quantity (Base)");
          UNTIL ReservEntry.NEXT = 0;

        IF SNRequired OR LNRequired THEN BEGIN
          RegWhseActivLine.SETRANGE("Activity Type","Activity Type");
          RegWhseActivLine.SETRANGE("No.","No.");
          RegWhseActivLine.SETRANGE("Line No.","Line No.");
          RegWhseActivLine.SETRANGE("Lot No.","Lot No.");
          RegWhseActivLine.SETRANGE("Serial No.","Serial No.");
          RegWhseActivLine.SETRANGE("Bin Code","Bin Code");
          IF RegWhseActivLine.FINDSET THEN
            REPEAT
              QtyHandled := QtyHandled + RegWhseActivLine."Qty. (Base)";
            UNTIL RegWhseActivLine.NEXT = 0;
          QtyBasePicked := QtyBasePicked + QtyHandled;
        END ELSE
          QtyBasePicked := QtyBasePicked + "Qty. Handled (Base)";
      END;

      EXIT(QtyBasePicked);
    END;

    LOCAL PROCEDURE GetItem@23(ItemNo@1000 : Code[20]);
    BEGIN
      IF ItemNo <> Item."No." THEN
        Item.GET(ItemNo);
    END;

    LOCAL PROCEDURE EnsureAuthorizationOfSourceDoc@26();
    VAR
      SalesHeader@1001 : Record 36;
      WarehouseActivLine@1003 : Record 5767;
      PaymentMgt@1002 : Codeunit 825;
    BEGIN
      WarehouseActivLine.COPYFILTERS(WhseActivLine);
      WITH WarehouseActivLine DO BEGIN
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source Document","Source Document"::"Sales Order");
        IF FINDSET THEN
          REPEAT
            IF SalesHeader.GET(SalesHeader."Document Type"::Order,"Source No.") THEN
              IF PaymentMgt.IsValidPaymentMethod(SalesHeader."Payment Method Code") AND PaymentMgt.IsAuthorizationRequired THEN
                PaymentMgt.AuthorizeSalesDoc(SalesHeader,0,TRUE);
          UNTIL WhseActivLine.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateTempTracking@1102601000(WhseActivLine2@1102601000 : Record 5767);
    BEGIN
      WITH WhseActivLine2 DO BEGIN
        TempTrackingSpecification.INIT;
        TempTrackingSpecification."Source Type" := "Source Type";
        TempTrackingSpecification."Source Subtype" := "Source Subtype";
        TempTrackingSpecification."Source ID" := "Source No.";
        IF WhseActivLine."Source Type" = DATABASE::"Prod. Order Component" THEN BEGIN
          TempTrackingSpecification."Source Prod. Order Line" := "Source Line No.";
          TempTrackingSpecification."Source Ref. No." := "Source Subline No.";
        END ELSE BEGIN
          TempTrackingSpecification."Source Prod. Order Line" := 0;
          TempTrackingSpecification."Source Ref. No." := "Source Line No.";
        END;

        ItemTrackingMgt.SetPointerFilter(TempTrackingSpecification);
        TempTrackingSpecification.SETRANGE("Serial No.","Serial No.");
        TempTrackingSpecification.SETRANGE("Lot No.","Lot No.");
        IF TempTrackingSpecification.ISEMPTY THEN BEGIN
          TempTrackingSpecification."Entry No." := TempTrackingSpecification."Entry No." + 1;
          TempTrackingSpecification."Creation Date" := TODAY;
          TempTrackingSpecification."Qty. to Handle (Base)" := "Qty. to Handle (Base)";
          TempTrackingSpecification."Item No." := WhseActivLine2."Item No.";
          TempTrackingSpecification."Variant Code" := WhseActivLine2."Variant Code";
          TempTrackingSpecification."Location Code" := WhseActivLine2."Location Code";
          TempTrackingSpecification.Description := WhseActivLine2.Description;
          TempTrackingSpecification."Qty. per Unit of Measure" := WhseActivLine2."Qty. per Unit of Measure";
          TempTrackingSpecification."Serial No." := WhseActivLine2."Serial No.";
          TempTrackingSpecification."Lot No." := WhseActivLine2."Lot No.";
          TempTrackingSpecification."Warranty Date" := WhseActivLine2."Warranty Date";
          TempTrackingSpecification."Expiration Date" := WhseActivLine2."Expiration Date";
          TempTrackingSpecification.Correction := TRUE;
          TempTrackingSpecification.INSERT;
        END;
      END;
      TempTrackingSpecification.RESET;
    END;

    PROCEDURE CheckItemTrackingInfoBlocked@25(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];SerialNo@1002 : Code[20];LotNo@1003 : Code[20]);
    VAR
      SerialNoInfo@1004 : Record 6504;
      LotNoInfo@1005 : Record 6505;
    BEGIN
      IF (SerialNo = '') AND (LotNo = '') THEN
        EXIT;

      IF SerialNo <> '' THEN
        IF SerialNoInfo.GET(ItemNo,VariantCode,SerialNo) THEN
          SerialNoInfo.TESTFIELD(Blocked,FALSE);

      IF LotNo <> '' THEN
        IF LotNoInfo.GET(ItemNo,VariantCode,LotNo) THEN
          LotNoInfo.TESTFIELD(Blocked,FALSE);
    END;

    BEGIN
    END.
  }
}
