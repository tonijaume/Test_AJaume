OBJECT Codeunit 5055267 Export Liquidity Analysis View
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=LIQEM6.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text1140000@1140000 : TextConst 'ENU=General Info._;ESP=Info general._';
      Text1140001@1140001 : TextConst 'ENU=None;ESP=Ninguno';
      Text1140002@1140002 : TextConst 'ENU=Day;ESP=D¡a';
      Text1140003@1140003 : TextConst 'ENU=Week;ESP=Semana';
      Text1140004@1140004 : TextConst 'ENU=Month;ESP=Mes';
      Text1140005@1140005 : TextConst 'ENU=Quarter;ESP=Trimestre';
      Text1140006@1140006 : TextConst 'ENU=Year;ESP=A¤o';
      Text1140007@1140007 : TextConst 'ENU=Accounting Period;ESP=Periodo contable';
      Text1140008@1140008 : TextConst 'ENU=Dimension Filters;ESP=Filtros dimensi¢n';
      Text1140009@1140009 : TextConst 'ENU="Analysis by Dimension ";ESP="An lisis por dimensiones "';
      Text1140010@1140010 : TextConst 'ENU=Amount Type;ESP=Tipo importe';
      Text1140011@1140011 : TextConst 'ENU=Net Change;ESP=Saldo periodo';
      Text1140012@1140012 : TextConst 'ENU=Balance at Date;ESP=Saldo a la fecha';
      Text1140013@1140013 : TextConst 'ENU=Date Filter;ESP=Filtro fecha';
      Text1140014@1140014 : TextConst 'ENU=Liquidity Filter;ESP=Filtro liquidez';
      Text1140015@1140015 : TextConst 'ENU=Pivot Table_;ESP=Tabla din mica_';
      Text1140016@1140016 : TextConst 'ENU=Liquidity Account;ESP=Cta. liquidez';
      Text1140017@1140017 : TextConst 'ENU=Period;ESP=Periodo';
      Text1140018@1140018 : TextConst 'ENU=Level;ESP=Nivel';
      Text1140019@1140019 : TextConst 'ENU=Analysis View Name;ESP=Nombre vista an lisis';
      Text1140020@1140020 : TextConst 'ENU=Show Opposite Sign;ESP=Muestra signo opuesto';
      Text1140021@1140021 : TextConst 'ENU=Yes;ESP=S¡';
      Text1140022@1140022 : TextConst 'ENU=No;ESP=No';
      Text1140023@1140023 : TextConst 'ENU=Data_;ESP=Datos_';
      xlApp@1140024 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      xlWorkBook@1140025 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      xlWorkSheet@1140026 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      xlWorkSheet2@1140027 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      xlPivotTable@1140028 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";
      xlPivotCache@1140029 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{0002441C-0000-0000-C000-000000000046}:Unknown Automation Server.PivotCache";
      xlPivotCaches@1140030 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{0002441D-0000-0000-C000-000000000046}:Unknown Automation Server.PivotCaches";
      xlRange@1140031 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      xlPivotField@1140032 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020874-0000-0000-C000-000000000046}:Unknown Automation Server.PivotField";
      xlWorkSheet3@1140033 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      TempDimValue2@1140034 : TEMPORARY Record 349;
      TempDimValue3@1140035 : TEMPORARY Record 349;
      TempLiqAcc2@1140036 : TEMPORARY Record 5055251;
      TempLiqAcc3@1140037 : TEMPORARY Record 5055251;
      "3TierMngt"@1140051 : Codeunit 419;
      NoOfColumns@1140038 : Integer;
      MaxLevel@1140039 : Integer;
      MaxLevelDim@1140040 : ARRAY [4] OF Integer;
      CharsNavision@1140041 : Text[250];
      CharsWindows@1140042 : Text[250];
      FileName@1140043 : Text[250];
      Account@1140044 : Code[20];
      Text1140024@1140050 : TextConst 'ENU=There are more than %1 rows within the filters. Excel only allows up to %1 rows.\You can either narrow the filters or choose a higher %2 value on the %3.;ESP=En los filtros hay m s de %1 filas. Excel admite %1 filas como m ximo.\Especifique otro filtro o seleccione un valor superior %2 en %3.';
      Text1140025@1140049 : TextConst 'ENU=Download;ESP=Descargar';
      Text1140026@1140048 : TextConst 'ENU=*.*|*.*;ESP=*.*|*.*';
      Text1140027@1140047 : TextConst 'ENU=Default.xls;ESP=Default.xls';
      Text1140028@1140046 : TextConst 'ENU="Import Character Mapping File ";ESP="Importar archivo de asignaci¢n de caracteres "';
      Text1140029@1140045 : TextConst 'ENU=All Files (*.*)|*.*;ESP=Todos los archivos (*.*)|*.*';

    PROCEDURE ExportData@1140000(VAR Rec@1140000 : Record 5055271;Line@1140002 : Text[30];Column@1140003 : Text[30];Sign@1140004 : Boolean;PeriodType@1140005 : Option;ShowName@1140006 : Boolean;DateFilter@1140007 : Code[250];LiqAccFilter@1140008 : Code[250];Dim1Filter@1140009 : Code[250];Dim2Filter@1140010 : Code[250];Dim3Filter@1140011 : Code[250];Dim4Filter@1140012 : Code[250];AmountType@1140013 : Option;Show@1140014 : Option;LiquidityFilter@1140015 : Code[250]);
    VAR
      AnalysisViewFilter@1140016 : Record 5055270;
      Currency@1140017 : Record 4;
      GLSetup@1140018 : Record 98;
      ExcelBuffer@1140019 : TEMPORARY Record 370;
      AnalysisView@1140020 : Record 5055269;
      FormatString@1140021 : Text[30];
      NoOfRows@1140022 : Integer;
      RowNoCount@1140023 : Integer;
      xlSheetName@1140024 : Text[100];
    BEGIN
      CREATE(xlApp,TRUE,TRUE);
      InitCharTables;
      WITH Rec DO BEGIN
        NoOfRows := CreateFile(Rec, Sign, PeriodType-1, ShowName, LiqAccFilter, Dim1Filter, Dim2Filter,
          Dim3Filter, Dim4Filter, DateFilter, LiquidityFilter);
        FileName := "3TierMngt".DownloadTempFile(FileName);
        xlApp.Workbooks.OpenText(FileName);
        xlWorkSheet := xlApp.ActiveSheet;
        xlSheetName := FORMAT(Text1140023) + "Analysis View Code";
        xlSheetName := CONVERTSTR(xlSheetName,' -+','___');
        xlWorkSheet.Name := xlSheetName;
        xlApp.ActiveWorkbook.Sheets.Add();
        xlWorkSheet3 := xlApp.ActiveSheet;
        xlWorkSheet3.Name := FORMAT(Text1140000) + CONVERTSTR("Analysis View Code",' -+','___');
        xlWorkSheet3.Range('A1').Value := AnalysisView.TABLECAPTION;
        xlWorkSheet3.Range('B2').Value := Rec.FIELDCAPTION("Analysis View Code");
        xlWorkSheet3.Range('C2').Value := "Analysis View Code";
        xlWorkSheet3.Range('B3').Value := FORMAT(Text1140019);
        AnalysisView.GET("Analysis View Code");
        xlWorkSheet3.Range('C3').Value := AnalysisView.Name;
        RowNoCount := 3;
        IF AnalysisView."Liquidity Account Filter" <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := AnalysisView.FIELDCAPTION("Liquidity Account Filter");
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := AnalysisView."Liquidity Account Filter";
        END;
        RowNoCount := RowNoCount + 1;
        xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := AnalysisView.FIELDCAPTION("Date Compression");
        CASE AnalysisView."Date Compression" OF
          0:  xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text1140001);
          1:  xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text1140002);
          2:  xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text1140003);
          3:  xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text1140004);
          4:  xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text1140005);
          5:  xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text1140006);
          6:  xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text1140007);
        END;
        IF AnalysisView."Starting Date" <> 0D THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := AnalysisView.FIELDCAPTION("Starting Date");
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(AnalysisView."Starting Date");
        END;
        RowNoCount := RowNoCount + 1;
        xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := AnalysisView.FIELDCAPTION("Last Date Updated");
        xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := AnalysisView."Last Date Updated";
        AnalysisViewFilter.SETFILTER("Analysis View Code","Analysis View Code");
        IF AnalysisViewFilter.FIND('-') THEN
          REPEAT
            RowNoCount := RowNoCount + 1;
            xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := AnalysisViewFilter."Dimension Code";
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := AnalysisViewFilter."Dimension Value Filter";
          UNTIL AnalysisViewFilter.NEXT = 0;
        RowNoCount := RowNoCount + 1;
        xlWorkSheet3.Range('A' + FORMAT(RowNoCount)).Value := FORMAT(Text1140009);
        RowNoCount := RowNoCount + 1;
        xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text1140010);
        CASE AmountType OF
          0: xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text1140011);
          1: xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text1140012);
        END;
        IF DateFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text1140013);
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := DateFilter;
        END;
        IF LiqAccFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := AnalysisView.FIELDCAPTION("Liquidity Account Filter");
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := LiqAccFilter;
        END;
        IF LiquidityFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text1140014);
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := LiquidityFilter;
        END;
        IF Dim1Filter  <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := AnalysisView."Dimension 1 Code";
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := Dim1Filter;
        END;
        IF Dim2Filter  <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := AnalysisView."Dimension 2 Code";
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := Dim2Filter;
        END;
        IF Dim3Filter  <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := AnalysisView."Dimension 3 Code";
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := Dim3Filter;
        END;
        IF Dim4Filter  <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := AnalysisView."Dimension 4 Code";
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := Dim4Filter;
        END;
        RowNoCount := RowNoCount +1;
        xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text1140020);
        IF Sign THEN
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text1140021)
        ELSE
         xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text1140022);

        ExcelBuffer.VALIDATE("Column No.",7 + NoOfColumns);
        xlPivotCache :=
          xlApp.ActiveWorkbook.PivotCaches.Add(1,STRSUBSTNO('%1!A1:%2%3',
          xlSheetName, ExcelBuffer.xlColID, NoOfRows + 1));

        xlPivotCache.CreatePivotTable('','PivotTable1');

        xlWorkSheet2 := xlApp.ActiveSheet();
        xlPivotTable := xlWorkSheet2.PivotTables('PivotTable1');
        xlWorkSheet2.Name := FORMAT(Text1140015) + CONVERTSTR("Analysis View Code",' -+','___');

        IF Line <> '' THEN
          CASE Line OF
            Text1140016:
              xlPivotField := xlPivotTable.PivotFields(FORMAT(Text1140016) + ' ' + FORMAT(Text1140018) + ' ' + FORMAT(MaxLevel));
            Text1140017:
              CASE PeriodType OF
                0:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text1140002));
                1:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text1140003));
                2:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text1140004));
                3:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text1140005));
                4:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text1140006));
                5:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text1140007));
              END;
            AnalysisView."Dimension 1 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 1 Code" + ' ' + FORMAT(Text1140018) + ' ' +
                FORMAT(MaxLevelDim[1]));
            AnalysisView."Dimension 2 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 2 Code" + ' ' + FORMAT(Text1140018) + ' ' +
                FORMAT(MaxLevelDim[2]));
            AnalysisView."Dimension 3 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 3 Code" + ' ' + FORMAT(Text1140018) + ' ' +
                FORMAT(MaxLevelDim[3]));
            AnalysisView."Dimension 4 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 4 Code" + ' ' + FORMAT(Text1140018) + ' ' +
                FORMAT(MaxLevelDim[4]));
          END;

        xlPivotField.Orientation := 1; //xlRowField
        xlPivotField.Position := 1;

        IF Column <> '' THEN
          CASE Column OF
            Text1140016:
              xlPivotField := xlPivotTable.PivotFields(FORMAT(Text1140016)  + ' ' + FORMAT(Text1140018) + ' ' + FORMAT(MaxLevel));
            Text1140017:
              CASE PeriodType OF
                0:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text1140002));
                1:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text1140003));
                2:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text1140004));
                3:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text1140005));
                4:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text1140006));
                5:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text1140007));
              END;
            AnalysisView."Dimension 1 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 1 Code" + ' ' + FORMAT(Text1140018) + ' ' +
                FORMAT(MaxLevelDim[1]));
            AnalysisView."Dimension 2 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 2 Code" + ' ' + FORMAT(Text1140018) + ' ' +
                FORMAT(MaxLevelDim[2]));
            AnalysisView."Dimension 3 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 3 Code" + ' ' + FORMAT(Text1140018) + ' ' +
                FORMAT(MaxLevelDim[3]));
            AnalysisView."Dimension 4 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 4 Code" + ' ' + FORMAT(Text1140018) + ' ' +
                FORMAT(MaxLevelDim[4]));
        END;
        xlPivotField.Orientation := 2; //xlColumnField
        xlPivotField.Position := 1;
        IF Show = 0 THEN
          xlPivotField := xlPivotTable.PivotFields(FIELDCAPTION(Amount));

        xlPivotField.Orientation := 4; //xlDataField
        xlPivotField.Position := 1;
        xlPivotField."Function" := 0;//sum


        IF (AmountType = 1) AND (Column = Text1140017) OR (AmountType = 1) AND (Line = Text1140017) THEN BEGIN
          xlPivotField.Calculation := 5;
          CASE PeriodType OF
            0:
              xlPivotField.BaseField := FORMAT(Text1140002);
            1:
              xlPivotField.BaseField := FORMAT(Text1140003);
            2:
              xlPivotField.BaseField := FORMAT(Text1140004);
            3:
              xlPivotField.BaseField := FORMAT(Text1140005);
            4:
              xlPivotField.BaseField := FORMAT(Text1140006);
            5:
              xlPivotField.BaseField := FORMAT(Text1140007);
          END;
        END;

        GLSetup.GET;
        FormatString := DELCHR(FORMAT(ROUND(1000.01,GLSetup."Amount Rounding Precision"),0),'<',' ');

        FormatString[1] := '#';
        FormatString[3] := '#';
        FormatString[4] := '#';
        IF STRLEN(FormatString) >= 8 THEN
          FormatString[8] := '0';
        xlPivotField.NumberFormat := FormatString; //'#.##0,00';

        xlPivotTable.SmallGrid := FALSE;

      END;
      xlApp.Visible := TRUE;
    END;

    LOCAL PROCEDURE CreateFile@1140001(VAR AnalysisViewEntry@1140000 : Record 5055271;Sign@1140001 : Boolean;PeriodType@1140002 : Option;ShowName@1140003 : Boolean;LiqAccFilter@1140004 : Code[250];Dim1Filter@1140005 : Code[250];Dim2Filter@1140006 : Code[250];Dim3Filter@1140007 : Code[250];Dim4Filter@1140008 : Code[250];DateFilter@1140009 : Code[250];LiquidityFilter@1140010 : Text[250]) : Integer;
    VAR
      AnalysisViewEntry2@1140011 : Record 5055271;
      AnalysisView@1140012 : Record 5055269;
      LiqAcc@1140013 : Record 5055251;
      CurrExchRate@1140014 : Record 330;
      GLSetup@1140015 : Record 98;
      Currency@1140016 : Record 4;
      TextFile@1140017 : File;
      Column@1140018 : Text[100];
      Line@1140019 : ARRAY [5] OF Text[1024];
      Line2@1140020 : Text[1024];
      Tab@1140021 : Text[1];
      c@1140022 : Char;
      StartDate@1140023 : Date;
      EndDate@1140024 : Date;
      MaxDate@1140025 : Date;
      CurrExchDate@1140026 : Date;
      NoOfRows@1140027 : Integer;
      WeekNo@1140028 : Integer;
      Year@1140029 : Integer;
      SignValue@1140030 : Integer;
      i@1140031 : Integer;
      j@1140032 : Integer;
      AddRepCurrAmount@1140033 : Decimal;
    BEGIN
      TextFile.CREATETEMPFILE;
      FileName := TextFile.NAME + '.txt';
      TextFile.CLOSE;

      TextFile.CREATE(FileName);
      TextFile.TEXTMODE(TRUE);
      AnalysisViewEntry2.COPY(AnalysisViewEntry);
      AnalysisView.GET(AnalysisViewEntry2."Analysis View Code");

      IF LiqAcc.FIND('-') THEN
        REPEAT
          TempLiqAcc3.COPY(LiqAcc);
          TempLiqAcc3.INSERT;
        UNTIL LiqAcc.NEXT = 0;

      TempLiqAcc3.SETFILTER("No.",LiqAccFilter);
      IF TempLiqAcc3.FIND('-') THEN
        REPEAT
          TempLiqAcc2.COPY(TempLiqAcc3);
          TempLiqAcc2.INSERT;
          IF MaxLevel < TempLiqAcc2.Indentation THEN
            MaxLevel := TempLiqAcc2.Indentation;
        UNTIL TempLiqAcc3.NEXT = 0;
      TempLiqAcc3.SETRANGE("No.");
      FindDimLevel(AnalysisView."Dimension 1 Code", Dim1Filter,1);
      FindDimLevel(AnalysisView."Dimension 2 Code", Dim2Filter,2);
      FindDimLevel(AnalysisView."Dimension 3 Code", Dim3Filter,3);
      FindDimLevel(AnalysisView."Dimension 4 Code", Dim4Filter,4);

      c := 9;
      Tab[1] := c;
      SignValue := 1;
      IF Sign THEN
        SignValue := -1;

      NoOfRows := 0;

      WITH AnalysisViewEntry2 DO BEGIN
        FOR i := 0 TO MaxLevel DO BEGIN
          Line[1] := Line[1] + FORMAT(Text1140016) + ' ' + FORMAT(Text1140018) + ' ' + FORMAT(i) + Tab;
          NoOfColumns := NoOfColumns + 1;
        END;
        IF AnalysisView."Dimension 1 Code" <> '' THEN
          FOR i := 0 TO MaxLevelDim[1] DO BEGIN
            Line[1] := Line[1] + AnalysisView."Dimension 1 Code" + ' ' + FORMAT(Text1140018) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          END;
        IF AnalysisView."Dimension 2 Code" <> '' THEN
          FOR i := 0 TO MaxLevelDim[2] DO BEGIN
            Line[1] := Line[1] + AnalysisView."Dimension 2 Code" + ' ' + FORMAT(Text1140018) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          END;
        IF AnalysisView."Dimension 3 Code" <> '' THEN
          FOR i := 0 TO MaxLevelDim[3] DO BEGIN
            Line[1] := Line[1] + AnalysisView."Dimension 3 Code" + ' ' + FORMAT(Text1140018) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          END;
        IF AnalysisView."Dimension 4 Code" <> '' THEN
          FOR i := 0 TO MaxLevelDim[4] DO BEGIN
            Line[1] := Line[1] + AnalysisView."Dimension 4 Code" + ' ' + FORMAT(Text1140018) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          END;
        Line[1] := Line[1] + Text1140002 + Tab + Text1140003 + Tab + Text1140004 + Tab + Text1140005 +
          Tab + Text1140006 + Tab + Text1140007 + Tab + FIELDCAPTION(Amount) + Tab;
        Line[1] := CONVERTSTR(Line[1],CharsNavision,CharsWindows);
        TextFile.WRITE(Line[1]);
        StartDate := "Liquidity Date";
        IF (DateFilter <> '') THEN BEGIN
          MaxDate := GETRANGEMAX("Liquidity Date");
          SETFILTER("Liquidity Date",'<=%1',MaxDate);
        END;
        SETFILTER("Liquidity No.",LiquidityFilter);
        IF FIND('-') THEN
           REPEAT
            IF ("Liquidity Date" = NORMALDATE("Liquidity Date")) THEN BEGIN
              IF "Liquidity Date" >= EndDate THEN
                EndDate := "Liquidity Date"
              ELSE IF "Liquidity Date" <= StartDate THEN
                StartDate := "Liquidity Date";
              Line[1] := '';
              Line[2] := '';
              Line[3] := '';
              Line[4] := '';
              Line[5] := '';
              NoOfRows := NoOfRows + 1;
              IF TempLiqAcc2.GET("Liquidity Account No.") THEN
                TempLiqAcc2.MARK(TRUE);
              Line[1] := CONVERTSTR(FillOutLiqAcc("Liquidity Account No.",ShowName,SignValue),CharsNavision,CharsWindows);
              IF AnalysisView."Dimension 1 Code" <> '' THEN
                Line[2] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 1 Value Code",AnalysisView."Dimension 1 Code",1,ShowName,SignValue),
                    CharsNavision,CharsWindows);

              IF AnalysisView."Dimension 2 Code" <> '' THEN
                Line[3] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 2 Value Code",AnalysisView."Dimension 2 Code",2,ShowName,SignValue),
                    CharsNavision,CharsWindows);

              IF AnalysisView."Dimension 3 Code" <> '' THEN
                Line[4] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 3 Value Code",AnalysisView."Dimension 3 Code",3,ShowName,SignValue),
                    CharsNavision,CharsWindows);

              IF AnalysisView."Dimension 4 Code" <> '' THEN
                Line[5] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 4 Value Code",AnalysisView."Dimension 4 Code",4,ShowName,SignValue),
                    CharsNavision,CharsWindows);

              Line2 :=
                FORMAT(CalculatePeriodStart(NORMALDATE("Liquidity Date"),-1)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Liquidity Date"),0)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Liquidity Date"),1)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Liquidity Date"),2)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Liquidity Date"),3)) + Tab +
                FORMAT(CalculatePeriodStart(NORMALDATE("Liquidity Date"),4)) + Tab +
                FORMAT(Amount * SignValue);

              TextFile.WRITE(Line[1] + Line[2] + Line[3] + Line[4] + Line[5] + Line2);
            END;
          UNTIL NEXT = 0;
      END;

      Line2 := '';
      TempLiqAcc2.SETRANGE(TempLiqAcc2."Account Type",TempLiqAcc2."Account Type"::Posting);
      IF TempLiqAcc2.FIND('-') THEN
        REPEAT
          IF (NOT TempLiqAcc2.MARK) THEN BEGIN
            NoOfRows := NoOfRows + 1;
            Line2 :=
              CONVERTSTR(
                FillOutLiqAcc(TempLiqAcc2."No.", ShowName, SignValue),
                CharsNavision,CharsWindows);
            TextFile.WRITE(Line2);
          END;
        UNTIL TempLiqAcc2.NEXT = 0;

      IF AnalysisView."Dimension 1 Code" <> '' THEN BEGIN
        Column := Column + Tab;
        TempDimValue2.SETFILTER(Code,Dim1Filter);
        TempDimValue2.SETFILTER("Dimension Code",AnalysisView."Dimension 1 Code");
        Line[1] := '';
        FOR j := 1 TO (MaxLevel) DO
          Line[1] := Line[1] + Tab;
        Line2 := '';
        TempDimValue2.SETRANGE(TempDimValue2."Dimension Value Type",TempDimValue2."Dimension Value Type"::Standard);
        IF TempDimValue2.FIND('-') THEN
          REPEAT
            IF NOT TempDimValue2.MARK THEN BEGIN
              NoOfRows := NoOfRows + 1;
              Line2 :=
                CONVERTSTR(
                  FillOutDim(TempDimValue2.Code,AnalysisView."Dimension 1 Code",1,ShowName,SignValue),
                  CharsNavision,CharsWindows);
              TextFile.WRITE(Tab + Line[1] + Line2);
            END;
          UNTIL TempDimValue2.NEXT = 0;
      END;

      IF AnalysisView."Dimension 2 Code" <> '' THEN BEGIN
        Column := Column + Tab;
        TempDimValue2.SETFILTER(Code,Dim2Filter);
        TempDimValue2.SETFILTER("Dimension Code",AnalysisView."Dimension 2 Code");
        Line[1] := '';
        FOR j := 1 TO (MaxLevel + MaxLevelDim[1]) DO
          Line[1] := Line[1] + Tab;
        Line2 := '';
        TempDimValue2.SETRANGE(TempDimValue2."Dimension Value Type",TempDimValue2."Dimension Value Type"::Standard);
        IF TempDimValue2.FIND('-') THEN
          REPEAT
            IF (NOT TempDimValue2.MARK) THEN BEGIN
              NoOfRows := NoOfRows + 1;
              Line2 :=
                CONVERTSTR(
                  FillOutDim(TempDimValue2.Code,AnalysisView."Dimension 2 Code",2,ShowName,SignValue),
                  CharsNavision,CharsWindows);
              TextFile.WRITE(Tab + Tab + Line[1] + Line2);
            END;
          UNTIL TempDimValue2.NEXT = 0;
      END;

      IF AnalysisView."Dimension 3 Code" <> '' THEN BEGIN
        Column := Column + Tab;
        TempDimValue2.SETFILTER(Code,Dim3Filter);
        TempDimValue2.SETFILTER("Dimension Code",AnalysisView."Dimension 3 Code");
        Line[1] := '';
        FOR j := 1 TO (MaxLevel + MaxLevelDim[1] + MaxLevelDim[2]) DO
          Line[1] := Line[1] + Tab;
        Line2 := '';
        TempDimValue2.SETRANGE(TempDimValue2."Dimension Value Type",TempDimValue2."Dimension Value Type"::Standard);
        IF TempDimValue2.FIND('-') THEN
          REPEAT
            IF (NOT TempDimValue2.MARK) THEN BEGIN
              NoOfRows := NoOfRows + 1;
              Line2 :=
                CONVERTSTR(
                FillOutDim(TempDimValue2.Code,AnalysisView."Dimension 3 Code",3,ShowName,SignValue),
                CharsNavision,CharsWindows);
              TextFile.WRITE(Tab + Tab + Tab + Line[1] + Line2);
            END;
          UNTIL TempDimValue2.NEXT = 0;
      END;

      IF AnalysisView."Dimension 4 Code" <> '' THEN BEGIN
        Column := Column + Tab;
        TempDimValue2.SETFILTER(Code,Dim4Filter);
        TempDimValue2.SETFILTER("Dimension Code",AnalysisView."Dimension 4 Code");
        Line[1] := '';
        FOR j := 1 TO (MaxLevel + MaxLevelDim[1] + MaxLevelDim[2] + MaxLevelDim[3]) DO
          Line[1] := Line[1] + Tab;
        Line2 := '';
        TempDimValue2.SETRANGE(TempDimValue2."Dimension Value Type",TempDimValue2."Dimension Value Type"::Standard);
        IF TempDimValue2.FIND('-') THEN
          REPEAT
            IF (NOT TempDimValue2.MARK) THEN BEGIN
              NoOfRows := NoOfRows + 1;
              Line2 :=
                CONVERTSTR(
                  FillOutDim(TempDimValue2.Code,AnalysisView."Dimension 4 Code",4,ShowName,SignValue),
                  CharsNavision,CharsWindows);
              TextFile.WRITE(Tab + Tab + Tab + Tab + Line[1] + Line2);
            END;
          UNTIL TempDimValue2.NEXT = 0;
      END;

      WeekNo := DATE2DWY(StartDate,2);
      Year := DATE2DWY(StartDate,3);
      StartDate := DWY2DATE(1,WeekNo,Year);
      Line2 := '';
      FOR i := 1 TO NoOfColumns DO
        Line2 := Line2 + Tab;

      WHILE StartDate <= EndDate DO BEGIN
        NoOfRows := NoOfRows + 1;
        TextFile.WRITE(
          Line2 + Tab + FORMAT(StartDate) + Tab + FORMAT(CalculatePeriodStart(StartDate,1)) + Tab +
          FORMAT(CalculatePeriodStart(StartDate,2)) + Tab + FORMAT(CalculatePeriodStart(StartDate,3)) + Tab +
          FORMAT(CalculatePeriodStart(StartDate,4)));
        StartDate := CALCDATE('<1W>',StartDate);
      END;

      TextFile.CLOSE;
      EXIT(NoOfRows);
    END;

    LOCAL PROCEDURE CalculatePeriodStart@1140002(PostingDate@1140000 : Date;DateCompression@1140001 : Integer) : Date;
    VAR
      AccountingPeriod@1140002 : Record 50;
      PrevPostingDate@1140004 : Date;
      PrevCalculatedPostingDate@1140005 : Date;
    BEGIN
      IF PostingDate = CLOSINGDATE(PostingDate) THEN
        EXIT(PostingDate);
      CASE DateCompression OF
        0://Week :
          PostingDate := CALCDATE('<CW+1D-1W>',PostingDate);
        1://Month :
          PostingDate := CALCDATE('<CM+1D-1M>',PostingDate);
        2://Quarter :
          PostingDate := CALCDATE('<CQ+1D-1Q>',PostingDate);
        3://Year :
          PostingDate := CALCDATE('<CY+1D-1Y>',PostingDate);
        4://Period :
          BEGIN
            IF PostingDate <> PrevPostingDate THEN BEGIN
              PrevPostingDate := PostingDate;
              AccountingPeriod.SETRANGE("Starting Date",0D,PostingDate);
              IF AccountingPeriod.FIND('+') THEN BEGIN
                PrevCalculatedPostingDate := AccountingPeriod."Starting Date"
              END ELSE
                PrevCalculatedPostingDate := PostingDate;
            END;
            PostingDate := PrevCalculatedPostingDate;
          END;
      END;
      EXIT(PostingDate);
    END;

    PROCEDURE InitCharTables@1140003();
    VAR
      i@1140000 : Integer;
      c@1140001 : Char;
      CharFile@1140002 : File;
      TempFileName@1140003 : Text[250];
      CharStream@1140004 : InStream;
      BSTRConverterBody@1140005 : Automation "{A378E78B-5DB6-45E9-B598-9ED74A7CCCE1} 1.0:{30E9A1F9-9B22-4D26-91CF-C6CC2D9BC2D9}:Unknown Automation Server.Unknown Class";
    BEGIN
      FOR i:= 65 TO 255 DO BEGIN
        c := i;
        CharsNavision[i-64] := c;
      END;
      IF ISCLEAR(BSTRConverterBody) THEN
        CREATE(BSTRConverterBody);

      BSTRConverterBody.ResetBSTR;
      BSTRConverterBody.AppendNextStringPortion(CharsNavision);
      CharsWindows := BSTRConverterBody.BSTR();

      IF STRLEN(CharsWindows) <> STRLEN(CharsNavision) THEN BEGIN
        IF (STRLEN(CharsWindows) = STRLEN(CharsNavision) + 2) AND
           (CharsWindows[1] = '"') AND (CharsWindows[STRLEN(CharsWindows)] = '"') THEN
         CharsWindows := COPYSTR(CharsWindows,2,STRLEN(CharsWindows) - 2)
        ELSE
          CharsWindows := CharsNavision; // Not possible to translate.
      END;
    END;

    PROCEDURE FindParent@1140004(VAR Account@1140000 : Code[20]);
    BEGIN
      TempLiqAcc3.GET(Account);
      IF TempLiqAcc3.Indentation <> 0 THEN BEGIN
        TempLiqAcc3.SETRANGE(Indentation, TempLiqAcc3.Indentation - 1);
        TempLiqAcc3.NEXT(-1);
      END;
      Account := TempLiqAcc3."No.";
    END;

    PROCEDURE FindDimLevel@1140005(DimCode@1140000 : Code[20];DimFilter@1140001 : Code[20];ArrayNo@1140002 : Integer);
    VAR
      DimValue@1140003 : Record 349;
    BEGIN
      IF DimCode = '' THEN
        EXIT;
      DimValue.SETRANGE("Dimension Code",DimCode);
      IF DimValue.FIND('-') THEN
        REPEAT
          TempDimValue2.COPY(DimValue);
          TempDimValue2.INSERT;
          TempDimValue3.COPY(DimValue);
          TempDimValue3.INSERT;
        UNTIL DimValue.NEXT = 0;
      TempDimValue2.SETFILTER(Code,DimFilter);
      IF TempDimValue2.FIND('-') THEN
        REPEAT
          IF MaxLevelDim[ArrayNo] < TempDimValue2.Indentation THEN
          MaxLevelDim[ArrayNo] := TempDimValue2.Indentation;
        UNTIL TempDimValue2.NEXT = 0;
    END;

    PROCEDURE FindDimParent@1140006(VAR Account@1140000 : Code[20];DimensionCode@1140001 : Code[20]);
    BEGIN
      TempDimValue3.RESET;
      TempDimValue3.SETRANGE("Dimension Code",DimensionCode);
      TempDimValue3.GET(DimensionCode,Account);
      IF TempDimValue3.Indentation <> 0 THEN BEGIN
        TempDimValue3.SETRANGE(Indentation, TempDimValue3.Indentation - 1);
        TempDimValue3.NEXT(-1);
      END;
      Account := TempDimValue3.Code;
    END;

    PROCEDURE FillOutDim@1140007(DimValueCode@1140000 : Code[20];DimCode@1140001 : Code[20];DimNo@1140002 : Integer;ShowName@1140003 : Boolean;SignValue@1140004 : Integer) Line@1140005 : Text[1024];
    VAR
      Indent@1140006 : Integer;
      i@1140007 : Integer;
      Tab@1140008 : Text[1];
      c@1140009 : Char;
    BEGIN
      c := 9;
      Tab[1] := c;

      IF DimValueCode <> '' THEN BEGIN
        IF TempDimValue2.GET(DimCode,DimValueCode) THEN
          TempDimValue2.MARK(TRUE);
        Account := DimValueCode;
        Indent := TempDimValue2.Indentation;
        IF ShowName AND (Account <> '') THEN
          Line := Account + ' ' +  TempDimValue2.Name + Tab
        ELSE
          Line := Account + Tab;
        IF Indent <> MaxLevelDim[DimNo] THEN
          FOR i := (Indent +1) TO MaxLevelDim[DimNo] DO BEGIN
            IF ShowName THEN
              Line := Line + Account + ' ' + TempDimValue2.Name + Tab
            ELSE
              Line := Line + Account + Tab;
          END;
        IF (Indent <> 0) AND (Account <> '') THEN
          FOR i := Indent DOWNTO 1 DO BEGIN
            FindDimParent(Account, DimCode);
            IF ShowName THEN BEGIN
              Line := Account + ' ' + TempDimValue3.Name + Tab + Line
            END ELSE
              Line := Account + Tab + Line;
          END;
      END ELSE
        FOR i := 0 TO MaxLevelDim[DimNo] DO
          Line := Line + Tab;
      EXIT(Line)
    END;

    PROCEDURE FillOutLiqAcc@1140008(LiqAccNo@1140000 : Code[20];ShowName@1140001 : Boolean;SignValue@1140002 : Integer) Line@1140003 : Text[1024];
    VAR
      Tab@1140004 : Text[1];
      c@1140005 : Char;
      i@1140006 : Integer;
      Indent@1140007 : Integer;
    BEGIN
      c := 9;
      Tab[1] := c;

      Account := LiqAccNo;
      IF ShowName THEN BEGIN
        TempLiqAcc3.GET(Account);
        Line := Account + ' ' + TempLiqAcc3.Name + Tab
      END ELSE
        Line := Account + Tab;
      Indent := TempLiqAcc2.Indentation;
      IF Indent <> MaxLevel THEN
        FOR i := (Indent + 1)  TO MaxLevel DO BEGIN
          IF ShowName THEN BEGIN
            TempLiqAcc3.GET(Account);
            Line := Line + Account + ' ' + TempLiqAcc3.Name + Tab
          END ELSE
            Line := Line + Account + Tab;
        END;
      IF Indent <> 0 THEN
        FOR i := Indent DOWNTO 1 DO BEGIN
          FindParent(Account);
          IF ShowName THEN BEGIN
            TempLiqAcc3.GET(Account);
            Line := Account + ' ' + TempLiqAcc3.Name + Tab + Line
          END ELSE
            Line := Account + Tab + Line;
        END;
      EXIT(Line)
    END;

    EVENT xlWorkSheet2@1140027::SelectionChange@1543(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlWorkSheet2@1140027::BeforeDoubleClick@1537(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkSheet2@1140027::BeforeRightClick@1534(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkSheet2@1140027::Activate@304();
    BEGIN
    END;

    EVENT xlWorkSheet2@1140027::Deactivate@1530();
    BEGIN
    END;

    EVENT xlWorkSheet2@1140027::Calculate@279();
    BEGIN
    END;

    EVENT xlWorkSheet2@1140027::Change@1545(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlWorkSheet2@1140027::FollowHyperlink@1470(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlWorkSheet@1140026::SelectionChange@1543(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlWorkSheet@1140026::BeforeDoubleClick@1537(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkSheet@1140026::BeforeRightClick@1534(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkSheet@1140026::Activate@304();
    BEGIN
    END;

    EVENT xlWorkSheet@1140026::Deactivate@1530();
    BEGIN
    END;

    EVENT xlWorkSheet@1140026::Calculate@279();
    BEGIN
    END;

    EVENT xlWorkSheet@1140026::Change@1545(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlWorkSheet@1140026::FollowHyperlink@1470(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlWorkBook@1140025::Open@682();
    BEGIN
    END;

    EVENT xlWorkBook@1140025::Activate@304();
    BEGIN
    END;

    EVENT xlWorkBook@1140025::Deactivate@1530();
    BEGIN
    END;

    EVENT xlWorkBook@1140025::BeforeClose@1546(VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkBook@1140025::BeforeSave@1547(SaveAsUI@1001 : Boolean;VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkBook@1140025::BeforePrint@1549(VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkBook@1140025::NewSheet@1550(Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlWorkBook@1140025::AddinInstall@1552();
    BEGIN
    END;

    EVENT xlWorkBook@1140025::AddinUninstall@1553();
    BEGIN
    END;

    EVENT xlWorkBook@1140025::WindowResize@1554(Wn@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlWorkBook@1140025::WindowActivate@1556(Wn@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlWorkBook@1140025::WindowDeactivate@1557(Wn@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlWorkBook@1140025::SheetSelectionChange@1558(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlWorkBook@1140025::SheetBeforeDoubleClick@1559(Sh@1002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkBook@1140025::SheetBeforeRightClick@1560(Sh@1002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkBook@1140025::SheetActivate@1561(Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlWorkBook@1140025::SheetDeactivate@1562(Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlWorkBook@1140025::SheetCalculate@1563(Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlWorkBook@1140025::SheetChange@1564(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlWorkBook@1140025::SheetFollowHyperlink@1854(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlApp@1140024::NewWorkbook@1565(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1140024::SheetSelectionChange@1558(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlApp@1140024::SheetBeforeDoubleClick@1559(Sh@1002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1140024::SheetBeforeRightClick@1560(Sh@1002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1140024::SheetActivate@1561(Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1140024::SheetDeactivate@1562(Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1140024::SheetCalculate@1563(Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1140024::SheetChange@1564(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlApp@1140024::WorkbookOpen@1567(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1140024::WorkbookActivate@1568(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1140024::WorkbookDeactivate@1569(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1140024::WorkbookBeforeClose@1570(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1140024::WorkbookBeforeSave@1571(Wb@1002 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SaveAsUI@1001 : Boolean;VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1140024::WorkbookBeforePrint@1572(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1140024::WorkbookNewSheet@1573(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1140024::WorkbookAddinInstall@1574(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1140024::WorkbookAddinUninstall@1575(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1140024::WindowResize@1554(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlApp@1140024::WindowActivate@1556(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlApp@1140024::WindowDeactivate@1557(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlApp@1140024::SheetFollowHyperlink@1854(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlWorkSheet3@1140033::SelectionChange@1543(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlWorkSheet3@1140033::BeforeDoubleClick@1537(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkSheet3@1140033::BeforeRightClick@1534(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkSheet3@1140033::Activate@304();
    BEGIN
    END;

    EVENT xlWorkSheet3@1140033::Deactivate@1530();
    BEGIN
    END;

    EVENT xlWorkSheet3@1140033::Calculate@279();
    BEGIN
    END;

    EVENT xlWorkSheet3@1140033::Change@1545(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlWorkSheet3@1140033::FollowHyperlink@1470(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    BEGIN
    END.
  }
}
