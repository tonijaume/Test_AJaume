OBJECT Codeunit 5900 ServOrderManagement
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00,NAVES4.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot create a %1, because the %2 field is not empty.;ESP=No puede crear un %1, porque el campo %2 est  vac¡o.';
      Text001@1001 : TextConst 'ENU=You must specify %1, %2 and %3 in %4 %5, before you create new %6.;ESP=Debe especificar %1, %2 y %3 en %4 %5, antes de crear un nuevo %6.';
      Text002@1002 : TextConst 'ENU=This customer already exists.\\;ESP=Ya existe este cliente.\\';
      Text003@1003 : TextConst 'ENU=Do you want create a new %1 instead of using the existing one?;ESP=¨Desea crear un nuevo %1 en lugar de utilizar el existente?';
      Text004@1004 : TextConst 'ENU=There are no Customer Templates.;ESP=No existen plantillas clientes.';
      Text005@1005 : TextConst 'ENU=Posting cannot be completed successfully. The %1 field on the service invoice lines should contain 1 because %2 %3 was replaced.;ESP=El registro no se pudo realizar correctamente. El campo %1 de las l¡neas de la factura de servicio no debe contener 1, ya que se sustituy¢ %2 %3.';
      Text006@1006 : TextConst 'ENU=The %1 %2 is already assigned to %3 %4.;ESP=El %1 %2 ya est  asignado a %3 %4.';
      Text007@1007 : TextConst 'ENU=%1 %2 was created.;ESP=Se cre¢ %1 %2.';
      Text008@1008 : TextConst 'ENU=There is not enough space to insert %1.;ESP=No hay suficiente espacio para insertar %1.';
      Text009@1009 : TextConst 'ENU=Travel fee in the %1 table with %2 %3 cannot be found.;ESP=No encuentra el Gasto transporte en la tabla %1 con %2 %3.';
      Text011@1011 : TextConst 'ENU=There is no %1 for %2 %3.;ESP=No hay %1 para %2 %3.';
      Text012@1012 : TextConst 'ENU=You can not post %1 %2.\\%3 %4 in %5 line %6 is preventing it.;ESP=No puede registrar %1 %2.\\%3 %4 en %5 l¡nea %6 lo est  impidiendo.';

    PROCEDURE ServHeaderLookup@5(DocumentType@1003 : Integer;VAR DocumentNo@1000 : Code[20]) : Boolean;
    VAR
      ServHeader@1001 : Record 5900;
    BEGIN
      IF ServHeader.GET(DocumentType,DocumentNo) THEN BEGIN
        ServHeader.SETRANGE("Document Type",DocumentType);
        IF FORM.RUNMODAL(0,ServHeader) = ACTION::LookupOK THEN BEGIN
          DocumentNo := ServHeader."No.";
          EXIT(TRUE);
        END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE UpdateResponseDateTime@7(VAR ServItemLine@1000 : Record 5901;Deleting@1005 : Boolean);
    VAR
      ServItemLine2@1006 : Record 5901;
      ServHeader@1007 : Record 5900;
      NewResponseDate@1001 : Date;
      NewResponseTime@1002 : Time;
    BEGIN
      IF NOT ServHeader.GET(ServItemLine."Document Type",ServItemLine."Document No.") THEN
        EXIT;

      IF NOT Deleting THEN BEGIN
        NewResponseDate := ServItemLine."Response Date";
        NewResponseTime := ServItemLine."Response Time";
      END;

      ServItemLine2.RESET;
      ServItemLine2.SETRANGE("Document Type",ServItemLine."Document Type");
      ServItemLine2.SETRANGE("Document No.",ServItemLine."Document No.");
      ServItemLine2.SETFILTER("Line No.",'<>%1',ServItemLine."Line No.");
      IF ServItemLine2.FIND('-') THEN BEGIN
        IF Deleting THEN BEGIN
          NewResponseDate := ServItemLine2."Response Date";
          NewResponseTime := ServItemLine2."Response Time";
        END;
        REPEAT
          IF ServItemLine2."Response Date" < NewResponseDate THEN BEGIN
            NewResponseDate := ServItemLine2."Response Date";
            NewResponseTime := ServItemLine2."Response Time"
          END ELSE
            IF (ServItemLine2."Response Date" = NewResponseDate) AND
               (ServItemLine2."Response Time" < NewResponseTime)
            THEN
              NewResponseTime := ServItemLine2."Response Time";
        UNTIL ServItemLine2.NEXT = 0;
      END;

      IF (ServHeader."Response Date" <> NewResponseDate) OR
         (ServHeader."Response Time" <> NewResponseTime)
      THEN BEGIN
        ServHeader."Response Date" := NewResponseDate;
        ServHeader."Response Time" := NewResponseTime;
        ServHeader.MODIFY;
      END;
    END;

    PROCEDURE CreateNewCustomer@2(VAR ServHeader@1000 : Record 5900);
    VAR
      Cust@1001 : Record 18;
      DefaultDim@1002 : Record 352;
      DefaultDim2@1003 : Record 352;
      CustTempl@1005 : Record 5105;
      FromCustInvDisc@1004 : Record 19;
      ToCustInvDisc@1006 : Record 19;
      CustContUpdate@1007 : Codeunit 5056;
    BEGIN
      WITH ServHeader DO BEGIN
        IF "Customer No." <> '' THEN
          ERROR(
            Text000,
            Cust.TABLECAPTION,FIELDCAPTION("Customer No."));
        IF (Name = '') OR (Address = '') OR (City = '') THEN
          ERROR(
            Text001,
            FIELDCAPTION(Name),FIELDCAPTION(Address),FIELDCAPTION(City),TABLECAPTION,"No.",Cust.TABLECAPTION);

        Cust.RESET;
        Cust.SETCURRENTKEY(Name,Address,City);
        Cust.SETRANGE(Name,Name);
        Cust.SETRANGE(Address,Address);
        Cust.SETRANGE(City,City);
        IF Cust.FIND('-') THEN
          IF NOT
             CONFIRM(
               Text002 + Text003,
               FALSE,Cust.TABLECAPTION)
          THEN BEGIN
            VALIDATE("Customer No.",Cust."No.");
            EXIT;
          END;
        CustTempl.RESET;
        IF NOT CustTempl.FIND('-') THEN
          ERROR(Text004);
        IF FORM.RUNMODAL(FORM::"Customer Template List",CustTempl) = ACTION::LookupOK THEN BEGIN
          Cust."No." := '';
          Cust.VALIDATE(Name,Name);
          Cust."Name 2" := "Name 2";
          Cust.Address := Address;
          Cust."Address 2" := "Address 2";
          Cust.City := City;
          Cust."Post Code" := "Post Code";
          Cust.Contact := "Contact Name";
          Cust."Phone No." := "Phone No.";
          Cust."E-Mail" := "E-Mail";
          Cust.Blocked := Cust.Blocked::" ";
          Cust."Territory Code" := CustTempl."Territory Code";
          Cust."Global Dimension 1 Code" := CustTempl."Global Dimension 1 Code";
          Cust."Global Dimension 2 Code" := CustTempl."Global Dimension 2 Code";
          Cust."Customer Posting Group" := CustTempl."Customer Posting Group";
          Cust."Currency Code" := CustTempl."Currency Code";
          Cust."Invoice Disc. Code" := CustTempl."Invoice Disc. Code";
          Cust."Customer Price Group" := CustTempl."Customer Price Group";
          Cust."Customer Disc. Group" := CustTempl."Customer Disc. Group";
          Cust."Country/Region Code" := CustTempl."Country/Region Code";
          Cust."Allow Line Disc." := CustTempl."Allow Line Disc.";
          Cust."Gen. Bus. Posting Group" := CustTempl."Gen. Bus. Posting Group";
          Cust."VAT Bus. Posting Group" := CustTempl."VAT Bus. Posting Group";
          Cust.VALIDATE("Payment Terms Code", CustTempl."Payment Terms Code");
          Cust.VALIDATE("Payment Method Code", CustTempl."Payment Method Code");
          Cust."Shipment Method Code" := CustTempl."Shipment Method Code";
          Cust.INSERT(TRUE);

          IF "Contact Name" <> '' THEN BEGIN
            CustContUpdate.InsertNewContactPerson(Cust,FALSE);
            Cust.MODIFY;
          END;

          DefaultDim.RESET;
          DefaultDim.SETRANGE("Table ID",DATABASE::"Customer Template");
          DefaultDim.SETRANGE("No.",CustTempl.Code);
          IF DefaultDim.FIND('-') THEN
            REPEAT
              DefaultDim2 := DefaultDim;
              DefaultDim2."Table ID" := DATABASE::Customer;
              DefaultDim2."No." := Cust."No.";
              DefaultDim2.INSERT(TRUE);
            UNTIL DefaultDim.NEXT = 0;

          IF CustTempl."Invoice Disc. Code" <> '' THEN BEGIN
            FromCustInvDisc.RESET;
            FromCustInvDisc.SETRANGE(Code,CustTempl."Invoice Disc. Code");
            IF FromCustInvDisc.FIND('-') THEN BEGIN
              REPEAT
                ToCustInvDisc.Code := Cust."No.";
                ToCustInvDisc."Currency Code" := FromCustInvDisc."Currency Code";
                ToCustInvDisc."Minimum Amount" := FromCustInvDisc."Minimum Amount";
                ToCustInvDisc."Discount %" := FromCustInvDisc."Discount %";
                ToCustInvDisc."Service Charge" := FromCustInvDisc."Service Charge";
                ToCustInvDisc.INSERT;
              UNTIL FromCustInvDisc.NEXT = 0;
            END;
          END;
          VALIDATE("Customer No.",Cust."No.");
        END;
      END;
    END;

    PROCEDURE "Replacement-CreateServItem"@1(FromServItem@1000 : Record 5940;ServInvLine@1001 : Record 5902;PostingDate@1002 : Date;ServShptDocNo@1011 : Code[20];ServShptLineNo@1012 : Integer;VAR TempTrackingSpecification@1008 : Record 336);
    VAR
      ServMgtSetup@1006 : Record 5911;
      NewServItem@1003 : Record 5940;
      ResSkill@1010 : Record 5956;
      ServLogMgt@1004 : Codeunit 5906;
      NoSeriesMgt@1005 : Codeunit 396;
      ResSkillMgt@1009 : Codeunit 5931;
      SerialNo@1007 : Code[20];
    BEGIN
      IF ServInvLine.Quantity <> 1 THEN
        ERROR(Text005,ServInvLine.FIELDCAPTION(Quantity),FromServItem.TABLECAPTION,FromServItem."No.");

      SerialNo := '';
      TempTrackingSpecification.RESET;
      TempTrackingSpecification.SETCURRENTKEY(
        "Source ID","Source Type","Source Subtype","Source Batch Name",
        "Source Prod. Order Line","Source Ref. No.");
      TempTrackingSpecification.SETRANGE("Source Type",DATABASE::"Service Line");
      TempTrackingSpecification.SETRANGE("Source Subtype",ServInvLine."Document Type");
      TempTrackingSpecification.SETRANGE("Source ID",ServInvLine."Document No.");
      TempTrackingSpecification.SETRANGE("Source Ref. No.",ServInvLine."Line No.");
      IF TempTrackingSpecification.FIND('-') THEN
        SerialNo := TempTrackingSpecification."Serial No.";

      IF SerialNo <> '' THEN BEGIN
        NewServItem.RESET;
        NewServItem.SETCURRENTKEY("Item No.","Serial No.");
        NewServItem.SETRANGE("Item No.",ServInvLine."No.");
        NewServItem.SETRANGE("Variant Code",ServInvLine."Variant Code");
        NewServItem.SETRANGE("Serial No.",SerialNo);
        IF NewServItem.FIND('-') THEN
          ERROR(
            Text006,
            NewServItem.TABLECAPTION,NewServItem."No.",NewServItem.FIELDCAPTION("Serial No."),NewServItem."Serial No.");
      END;

      NewServItem.RESET;
      ServMgtSetup.GET;
      NewServItem := FromServItem;
      NewServItem."No." := '';
      NoSeriesMgt.InitSeries(
        ServMgtSetup."Service Item Nos.", NewServItem."No. Series",0D, NewServItem."No.",NewServItem."No. Series");
      NewServItem."Serial No." := SerialNo;
      NewServItem."Variant Code" := ServInvLine."Variant Code";
      NewServItem."Shipment Type" := NewServItem."Shipment Type"::Service;
      NewServItem."Sales/Serv. Shpt. Document No." := ServShptDocNo;
      NewServItem."Sales/Serv. Shpt. Line No." := ServShptLineNo;
      CASE ServInvLine."Spare Part Action" OF
        ServInvLine."Spare Part Action"::"Temporary":
          NewServItem.Status := NewServItem.Status::"Temporarily Installed";
        ServInvLine."Spare Part Action"::Permanent:
          NewServItem.Status := NewServItem.Status::Installed;
      END;

      NewServItem.INSERT;
      ResSkillMgt.CloneObjectResourceSkills(ResSkill.Type::"Service Item",FromServItem."No.",NewServItem."No.");

      CLEAR(ServLogMgt);
      ServLogMgt.ServItemAutoCreated(NewServItem);

      CLEAR(ServLogMgt);
      ServLogMgt.ServItemReplaced(FromServItem,NewServItem);
      FromServItem.Status := FromServItem.Status::Defective;
      FromServItem.MODIFY;
      CASE ServInvLine."Copy Components From" OF
        ServInvLine."Copy Components From"::"Item BOM":
          CopyComponentsFromBOM(NewServItem);
        ServInvLine."Copy Components From"::"Old Service Item":
          CopyComponentsFromSI(FromServItem,NewServItem,TRUE);
        ServInvLine."Copy Components From"::"Old Serv.Item w/o Serial No.":
          CopyComponentsFromSI(FromServItem,NewServItem,FALSE);
      END;

      MESSAGE(
        Text007,
        NewServItem.TABLECAPTION,NewServItem."No.");
    END;

    PROCEDURE InsertServCost@4(ServInvLine@1000 : Record 5902;CostType@1001 : Integer;LinktoServItemLine@1007 : Boolean) : Boolean;
    VAR
      ServMgtSetup@1002 : Record 5911;
      ServHeader@1003 : Record 5900;
      ServInvLine2@1004 : Record 5902;
      ServCost@1005 : Record 5905;
      NextLine@1006 : Integer;
    BEGIN
      ServHeader.GET(ServInvLine."Document Type",ServInvLine."Document No.");

      ServInvLine2.RESET;
      ServInvLine2.SETRANGE("Document Type",ServInvLine."Document Type");
      ServInvLine2.SETRANGE("Document No.",ServInvLine."Document No.");
      ServInvLine2 := ServInvLine;

      IF ServInvLine."Line No." = 0 THEN
        IF ServInvLine2.FIND('+') THEN
          NextLine := ServInvLine2."Line No." + 10000
        ELSE
          NextLine := 10000
      ELSE BEGIN
        IF ServInvLine2.FIND('<') THEN
          NextLine := ROUND((ServInvLine2."Line No." + ServInvLine."Line No.") / 2,1,'<')
        ELSE
          NextLine := ROUND(ServInvLine2."Line No." / 2,1,'<');
        IF NextLine = 0 THEN
          ERROR(Text008,ServInvLine.TABLECAPTION);
      END;

      CASE CostType OF
        0: // Travel Fee
          BEGIN
            ServHeader.TESTFIELD("Service Zone Code");
            ServCost.RESET;
            ServCost.SETCURRENTKEY("Service Zone Code");
            ServCost.SETRANGE("Service Zone Code",ServHeader."Service Zone Code");
            ServCost.SETRANGE("Cost Type",ServCost."Cost Type"::Travel);
            IF NOT ServCost.FIND('-') THEN
              ERROR(
                Text009,
                ServCost.TABLECAPTION,ServCost.FIELDCAPTION("Service Zone Code"),ServHeader."Service Zone Code");

            ServInvLine2.INIT;
            IF LinktoServItemLine THEN BEGIN
              ServInvLine2."Service Item Line No." := ServInvLine."Service Item Line No.";
              ServInvLine2."Service Item No." := ServInvLine."Service Item No.";
              ServInvLine2."Service Item Serial No." := ServInvLine."Service Item Serial No.";
            END;
            ServInvLine2."Document Type" := ServHeader."Document Type";
            ServInvLine2."Document No." := ServHeader."No.";
            ServInvLine2."Line No." := NextLine;
            ServInvLine2.Type := ServInvLine2.Type::Cost;
            ServInvLine2.VALIDATE("No.",ServCost.Code);
            ServInvLine2.VALIDATE("Unit of Measure Code",ServCost."Unit of Measure Code");
            ServInvLine2.INSERT(TRUE);
            EXIT(TRUE);
          END;
        1: // Starting Fee
          BEGIN
            ServMgtSetup.GET;
            ServMgtSetup.TESTFIELD("Service Order Starting Fee");
            ServCost.GET(ServMgtSetup."Service Order Starting Fee");
            ServInvLine2.INIT;
            IF LinktoServItemLine THEN BEGIN
              ServInvLine2."Service Item Line No." := ServInvLine."Service Item Line No.";
              ServInvLine2."Service Item No." := ServInvLine."Service Item No.";
              ServInvLine2."Service Item Serial No." := ServInvLine."Service Item Serial No.";
            END;
            ServInvLine2."Document Type" := ServHeader."Document Type";
            ServInvLine2."Document No." := ServHeader."No.";
            ServInvLine2."Line No." := NextLine;
            ServInvLine2.Type := ServInvLine2.Type::Cost;
            ServInvLine2.VALIDATE("No.",ServCost.Code);
            ServInvLine2.VALIDATE("Unit of Measure Code",ServCost."Unit of Measure Code");
            ServInvLine2.INSERT(TRUE);
            EXIT(TRUE);
          END;
        ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE FindContactInformation@3(CustNo@1000 : Code[20]) : Code[20];
    VAR
      ServMgtSetup@1006 : Record 5911;
      Cust@1007 : Record 18;
      ContBusRel@1008 : Record 5054;
      ContJobResp@1009 : Record 5067;
      Cont@1010 : Record 5050;
      ContactFound@1012 : Boolean;
    BEGIN
      IF Cust.GET(CustNo) THEN BEGIN
        ServMgtSetup.GET;
        ContactFound := FALSE;
        ContBusRel.RESET;
        ContBusRel.SETCURRENTKEY("Link to Table","No.");
        ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
        ContBusRel.SETRANGE("No.",Cust."No.");
        Cont.RESET;
        Cont.SETCURRENTKEY("Company No.");
        Cont.SETRANGE(Type,Cont.Type::Person);
        IF ContBusRel.FIND('-') THEN BEGIN
          Cont.SETRANGE("Company No.",ContBusRel."Contact No.");
          IF Cont.FIND('-') THEN
            REPEAT
              ContJobResp.RESET;
              ContJobResp.SETRANGE("Contact No.",Cont."No.");
              ContJobResp.SETRANGE("Job Responsibility Code",ServMgtSetup."Serv. Job Responsibility Code");
              ContactFound := ContJobResp.FIND('-');
            UNTIL (Cont.NEXT = 0) OR ContactFound;
        END;
        IF ContactFound THEN BEGIN
          Cont.GET(ContJobResp."Contact No.");
          EXIT(Cont."No.");
        END;
      END;
    END;

    PROCEDURE FindResLocationCode@8(ResourceNo@1000 : Code[20];StartDate@1001 : Date) : Code[10];
    VAR
      ResLocation@1002 : Record 5952;
    BEGIN
      ResLocation.RESET;
      ResLocation.SETCURRENTKEY("Resource No.","Starting Date");
      ResLocation.SETRANGE("Resource No.",ResourceNo);
      ResLocation.SETRANGE("Starting Date",0D,StartDate);
      IF ResLocation.FIND('+') THEN
        EXIT(ResLocation."Location Code");
    END;

    PROCEDURE CalcServTime@6(StartingDate@1000 : Date;StartingTime@1001 : Time;FinishingDate@1002 : Date;FinishingTime@1003 : Time;ContractNo@1004 : Code[20];ContractCalendarExists@1005 : Boolean) : Decimal;
    VAR
      CalChange@1015 : Record 7602;
      ServHour@1006 : Record 5910;
      ServMgtSetup@1013 : Record 5911;
      CalendarMgmt@1012 : Codeunit 7600;
      TotTime@1011 : Decimal;
      TempDay@1010 : Integer;
      TempDate@1009 : Date;
      Holiday@1008 : Boolean;
      CalendarCustomized@1014 : Boolean;
      NewDescription@1007 : Text[50];
      MiliSecPerDay@1016 : Decimal;
    BEGIN
      MiliSecPerDay := 86400000;
      IF (StartingDate = 0D) OR (StartingTime = 0T) OR (FinishingDate = 0D) OR (FinishingTime = 0T) THEN
        EXIT(0);

      ServHour.RESET;
      IF (ContractNo <> '') AND ContractCalendarExists THEN BEGIN
        ServHour.SETRANGE("Service Contract Type",ServHour."Service Contract Type"::Contract);
        ServHour.SETRANGE("Service Contract No.",ContractNo)
      END ELSE BEGIN
        ServHour.SETRANGE("Service Contract Type",ServHour."Service Contract Type"::" ");
        ServHour.SETRANGE("Service Contract No.",'');
      END;

      IF NOT ServHour.FIND('-') THEN
        EXIT(ROUND(((FinishingDate - StartingDate) * MiliSecPerDay + (FinishingTime - StartingTime)) / 3600000,0.01));

      TotTime := 0;
      TempDate := StartingDate;

      ServMgtSetup.GET;
      ServMgtSetup.TESTFIELD("Base Calendar Code");
      CalendarCustomized :=
        CalendarMgmt.CustomizedChangesExist(CalChange."Source Type"::Service,'','',ServMgtSetup."Base Calendar Code");

      REPEAT
        TempDay := DATE2DWY(TempDate,1) - 1;
        ServHour.SETFILTER("Starting Date",'<=%1',TempDate);
        ServHour.SETRANGE(Day,TempDay);
        IF ServHour.FIND('+') THEN BEGIN
          IF CalendarCustomized THEN
            Holiday :=
              CalendarMgmt.CheckCustomizedDateStatus(
                CalChange."Source Type"::Service,'','',ServMgtSetup."Base Calendar Code",TempDate,NewDescription)
          ELSE
            Holiday := CalendarMgmt.CheckDateStatus(ServMgtSetup."Base Calendar Code",TempDate,NewDescription);

          IF NOT Holiday OR ServHour."Valid on Holidays" THEN BEGIN
            IF StartingDate > FinishingDate THEN
              EXIT(0);

            IF StartingDate = FinishingDate THEN
              TotTime := FinishingTime - StartingTime
            ELSE
              CASE TempDate OF
                StartingDate:
                  IF ServHour."Ending Time" > StartingTime THEN
                    TotTime := TotTime + (ServHour."Ending Time" - StartingTime);
                FinishingDate:
                  IF FinishingTime > ServHour."Starting Time" THEN
                    TotTime := TotTime + (FinishingTime - ServHour."Starting Time");
                ELSE
                  TotTime := TotTime + (ServHour."Ending Time" - ServHour."Starting Time");
              END;
          END;
        END;
        TempDate := TempDate + 1;
      UNTIL TempDate > FinishingDate;

      EXIT(ROUND(TotTime / 3600000,0.01));
    END;

    PROCEDURE LookupServItemNo@9(VAR ServItemLine@1005 : Record 5901);
    VAR
      ServHeader@1004 : Record 5900;
      ServItem@1003 : Record 5940;
      ServContractLine@1002 : Record 5964;
      ServItemList@1001 : Form 5981;
      ServContractLineList@1000 : Form 6076;
    BEGIN
      ServHeader.GET(ServItemLine."Document Type",ServItemLine."Document No.");

      IF ServHeader."Contract No." = '' THEN BEGIN
        IF ServItem.GET(ServItemLine."Service Item No.") THEN
          ServItemList.SETRECORD(ServItem);
        ServItem.RESET;
        ServItem.FILTERGROUP(2);
        ServItem.SETCURRENTKEY("Customer No.","Ship-to Code");
        ServItem.SETRANGE("Customer No.",ServHeader."Customer No.");
        ServItem.FILTERGROUP(0);
        ServItem.SETRANGE("Ship-to Code",ServHeader."Ship-to Code");
        ServItemList.SETTABLEVIEW(ServItem);
        ServItemList.LOOKUPMODE(TRUE);
        IF ServItemList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ServItemList.GETRECORD(ServItem);
          ServItemLine.VALIDATE("Service Item No.",ServItem."No.");
        END;
      END ELSE BEGIN
        IF ServItemLine."Service Item No." <> '' THEN
          IF ServContractLine.GET(
            ServContractLine."Contract Type"::Contract,
            ServItemLine."Contract No.",ServItemLine."Contract Line No.")
          THEN
            ServContractLineList.SETRECORD(ServContractLine);
        ServContractLine.RESET;
        ServContractLine.FILTERGROUP(2);
        ServContractLine.SETRANGE("Contract Type",ServContractLine."Contract Type"::Contract);
        ServContractLine.SETRANGE("Contract No.",ServHeader."Contract No.");
        ServContractLine.SETRANGE("Contract Status",ServContractLine."Contract Status"::Signed);
        ServContractLine.SETRANGE("Customer No.",ServHeader."Customer No.");
        ServContractLine.SETFILTER("Starting Date",'<=%1',ServHeader."Order Date");
        ServContractLine.SETFILTER("Contract Expiration Date",'>%1 | =%2',ServHeader."Order Date",0D);
        ServContractLine.FILTERGROUP(0);
        ServContractLine.SETRANGE("Ship-to Code",ServHeader."Ship-to Code");
        ServContractLineList.SETTABLEVIEW(ServContractLine);
        ServContractLineList.LOOKUPMODE(TRUE);
        IF ServContractLineList.RUNMODAL = ACTION::LookupOK THEN BEGIN
          ServContractLineList.GETRECORD(ServContractLine);
          ServItemLine.VALIDATE("Service Item No.",ServContractLine."Service Item No.");
        END;
      END;
    END;

    PROCEDURE UpdatePriority@10(VAR ServItemLine@1000 : Record 5901;Deleting@1001 : Boolean);
    VAR
      ServItemLine2@1006 : Record 5901;
      ServHeader@1007 : Record 5900;
      NewPriority@1002 : Integer;
    BEGIN
      IF NOT ServHeader.GET(ServItemLine."Document Type",ServItemLine."Document No.") THEN
        EXIT;

      IF NOT Deleting THEN
        NewPriority := ServItemLine.Priority;

      ServItemLine2.RESET;
      ServItemLine2.SETRANGE("Document Type",ServItemLine."Document Type");
      ServItemLine2.SETRANGE("Document No.",ServItemLine."Document No.");
      ServItemLine2.SETFILTER("Line No.",'<>%1',ServItemLine."Line No.");
      IF ServItemLine2.FIND('-') THEN
        REPEAT
          IF ServItemLine2.Priority > NewPriority THEN
            NewPriority := ServItemLine2.Priority;
        UNTIL ServItemLine2.NEXT = 0;

      IF ServHeader.Priority <> NewPriority THEN BEGIN
        ServHeader.Priority := NewPriority;
        ServHeader.MODIFY;
      END;
    END;

    PROCEDURE CopyComponentsFromSI@11(OldServItem@1000 : Record 5940;NewServItem@1001 : Record 5940;CopySerialNo@1002 : Boolean) : Boolean;
    VAR
      ServItemComponent@1003 : Record 5941;
      OldSIComponent@1006 : Record 5941;
    BEGIN
      OldSIComponent.RESET;
      OldSIComponent.SETRANGE(Active,TRUE);
      OldSIComponent.SETRANGE("Parent Service Item No.",OldServItem."No.");
      IF OldSIComponent.FIND('-') THEN BEGIN
        REPEAT
          CLEAR(ServItemComponent);
          ServItemComponent.INIT;
          ServItemComponent := OldSIComponent;
          ServItemComponent."Parent Service Item No." := NewServItem."No.";
          IF NOT CopySerialNo THEN
            ServItemComponent."Serial No." := '';
          ServItemComponent.INSERT;
        UNTIL OldSIComponent.NEXT = 0;
      END ELSE
        ERROR(
          Text011,
          ServItemComponent.TABLECAPTION,OldServItem.FIELDCAPTION("No."),OldServItem."No.");
    END;

    PROCEDURE CopyComponentsFromBOM@12(VAR NewServItem@1000 : Record 5940);
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"ServComponent-Copy from BOM",NewServItem);
    END;

    PROCEDURE InServiceContract@13(VAR ServInvLine@1000 : Record 5902;VAR ServHeader@1001 : Record 5900) : Boolean;
    VAR
      ServContractLine@1002 : Record 5964;
    BEGIN
      IF ServInvLine."Contract No." = '' THEN
        EXIT;
      IF ServInvLine."Service Item No." = '' THEN
        EXIT(TRUE);
      ServContractLine.SETRANGE("Contract Type",ServContractLine."Contract Type"::Contract);
      ServContractLine.SETRANGE("Contract No.",ServInvLine."Contract No.");
      ServContractLine.SETRANGE("Service Item No.",ServInvLine."Service Item No.");
      ServContractLine.SETRANGE("Contract Status",ServContractLine."Contract Status"::Signed);
      ServContractLine.SETFILTER("Starting Date",'<=%1',ServHeader."Order Date");
      ServContractLine.SETFILTER("Contract Expiration Date",'>%1 | =%2',ServHeader."Order Date",0D);
      IF ServContractLine.FIND('-') THEN
        EXIT(TRUE);
    END;

    PROCEDURE CheckServItemRepairStatus@59(ServHeader@1000 : Record 5900;VAR ServItemLine@1003 : TEMPORARY Record 5901;VAR ServLine@1002 : Record 5902);
    VAR
      RepairStatus@1001 : Record 5927;
    BEGIN
      IF ServItemLine.GET(ServHeader."Document Type",ServHeader."No.",ServLine."Service Item Line No.") THEN
          IF ServItemLine."Repair Status Code" <> '' THEN BEGIN
            RepairStatus.GET(ServItemLine."Repair Status Code");
            IF NOT RepairStatus."Posting Allowed" THEN
              ERROR(
                Text012,
                ServHeader.TABLECAPTION,ServHeader."No.",ServItemLine.FIELDCAPTION("Repair Status Code"),
                ServItemLine."Repair Status Code",ServItemLine.TABLECAPTION,ServItemLine."Line No.")
          END;
    END;

    PROCEDURE CopyCommentLines@22(FromDocumentType@1000 : Integer;ToDocumentType@1001 : Integer;FromNo@1002 : Code[20];ToNo@1003 : Code[20]);
    VAR
      ServCommentLine@1005 : Record 5906;
      ServCommentLine2@1004 : Record 5906;
    BEGIN
      ServCommentLine.RESET;
      ServCommentLine.SETRANGE("Table Name",FromDocumentType);
      ServCommentLine.SETRANGE("No.",FromNo);
      IF ServCommentLine.FIND('-') THEN
        REPEAT
          ServCommentLine2 := ServCommentLine;
          ServCommentLine2."Table Name" := ToDocumentType;
          ServCommentLine2."Table Subtype" := 0;
          ServCommentLine2."No." := ToNo;
          ServCommentLine2.INSERT;
        UNTIL ServCommentLine.NEXT = 0;
    END;

    PROCEDURE CalcContractDates@56(VAR ServHeader@1000 : Record 5900;VAR ServItemLine@1002 : Record 5901);
    VAR
      ServContractLine@1001 : Record 5964;
    BEGIN
      IF ServContractLine.GET(
        ServContractLine."Contract Type"::Contract,
        ServItemLine."Contract No.",
        ServItemLine."Contract Line No.")
      THEN BEGIN
        ServContractLine.SuspendStatusCheck(TRUE);
        IF ServHeader."Finishing Date" <> 0D THEN
          ServContractLine."Last Service Date" := ServHeader."Finishing Date"
        ELSE
          ServContractLine."Last Service Date" := ServHeader."Posting Date";
        ServContractLine."Last Planned Service Date" :=
          ServContractLine."Next Planned Service Date";
        ServContractLine.CalculateNextServiceVisit;
        ServContractLine."Last Preventive Maint. Date" := ServContractLine."Last Service Date";
      END;
      ServContractLine.MODIFY;
    END;

    PROCEDURE CalcServItemDates@14(VAR ServHeader@1000 : Record 5900;ServItemNo@1002 : Code[20]);
    VAR
      ServItem@1001 : Record 5940;
    BEGIN
      IF ServItem.GET(ServItemNo) THEN BEGIN
        IF ServHeader."Finishing Date" <> 0D THEN
          ServItem."Last Service Date" := ServHeader."Finishing Date"
        ELSE
          ServItem."Last Service Date" := ServHeader."Posting Date";
        ServItem.MODIFY;
      END;
    END;

    PROCEDURE ModifyLastServiceItemNo@20(VAR ServLine@1000 : Record 5902);
    VAR
      LastServiceItemNo@1002 : Code[20];
      LastServiceItemNoOnInvoice@1001 : Code[20];
    BEGIN
      ServLine.SETRANGE(Amount);
      ServLine.FIND('-');
      REPEAT
        IF (ServLine."Appl.-to Service Entry" <> 0) OR
           (ServLine.Type = ServLine.Type::" ")
        THEN BEGIN
          IF (ServLine."Service Item No." <> LastServiceItemNo) AND
             (ServLine.Type <> ServLine.Type::" ")
          THEN BEGIN
            LastServiceItemNo := ServLine."Service Item No.";
            LastServiceItemNoOnInvoice := LastServiceItemNo;
          END ELSE
            LastServiceItemNoOnInvoice := '';
        END;
      UNTIL ServLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
}
