OBJECT Codeunit 5612 Calculate Custom 1 Depr.
{
  OBJECT-PROPERTIES
  {
    Date=14/02/08;
    Time=12:00:00;
    Version List=NAVW15.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 5601=r,
                TableData 5604=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU="A depreciation entry must be posted on %2 = %3 for %1.";ESP="Debe registrarse un mov. de amortizaci¢n en %2 = %3 para %1."';
      Text001@1001 : TextConst 'ENU="%2 is positive on %3 = %4 for %1.";ESP="%2 es positivo en %3 = %4 para %1."';
      Text002@1002 : TextConst 'ENU=%2 must not be 100 for %1.;ESP=%2 no debe ser 100 para %1.';
      Text003@1003 : TextConst 'ENU=%2 is later than %3 for %1.;ESP=%2 es posterior que %3 para %1.';
      Text004@1004 : TextConst 'ENU="You must not specify %2 together with %3 = %4 for %1.";ESP="No debe especificar %2 junto con %3=%4 para %1."';
      FA@1005 : Record 5600;
      FALedgEntry@1006 : Record 5601;
      DeprBook@1007 : Record 5611;
      FADeprBook@1008 : Record 5612;
      FAPostingTypeSetup@1009 : Record 5604;
      DepreciationCalc@1010 : Codeunit 5616;
      DeprBookCode@1011 : Code[10];
      UntilDate@1012 : Date;
      Sign@1013 : Integer;
      FirstDeprDate@1014 : Date;
      DaysInFiscalYear@1015 : Integer;
      NumberOfDays@1016 : Integer;
      NumberOfDays4@1017 : Integer;
      DaysInPeriod@1018 : Integer;
      EntryAmounts@1019 : ARRAY [4] OF Decimal;
      DateFromProjection@1020 : Date;
      UseDeprStartingDate@1021 : Boolean;
      BookValue@1022 : Decimal;
      BookValue2@1023 : Decimal;
      MinusBookValue@1024 : Decimal;
      DeprBasis@1025 : Decimal;
      SalvageValue@1026 : Decimal;
      SalvageValue2@1027 : Decimal;
      AcquisitionDate@1028 : Date;
      DisposalDate@1029 : Date;
      DeprMethod@1030 : 'StraightLine,DB1,DB2,DB1SL,DB2SL,User-Defined,Manual,BelowZero';
      DeprStartingDate@1031 : Date;
      FirstUserDefinedDeprDate@1032 : Date;
      SLPercent@1033 : Decimal;
      DBPercent@1034 : Decimal;
      FixedAmount@1035 : Decimal;
      DeprYears@1036 : Decimal;
      DeprTable@1037 : Code[10];
      FinalRoundingAmount@1038 : Decimal;
      EndingBookValue@1039 : Decimal;
      AmountBelowZero@1040 : Decimal;
      PercentBelowZero@1041 : Decimal;
      Custom1DeprStartingDate@1042 : Date;
      Custom1DeprUntil@1043 : Date;
      Custom1AccumPercent@1044 : Decimal;
      Custom1PercentThisYear@1045 : Decimal;
      Custom1PropertyClass@1046 : ' ,Personal Property,Real Property';
      AcquisitionCost@1047 : Decimal;
      Custom1Depr@1048 : Decimal;
      ExtraDays@1049 : Integer;

    PROCEDURE Calculate@1(VAR DeprAmount@1000 : Decimal;VAR Custom1DeprAmount@1001 : Decimal;VAR NumberOfDays3@1002 : Integer;VAR Custom1NumberOfDays3@1003 : Integer;FANo@1004 : Code[20];DeprBookCode2@1005 : Code[10];UntilDate2@1006 : Date;EntryAmounts2@1007 : ARRAY [4] OF Decimal;DateFromProjection2@1008 : Date;DaysInPeriod2@1009 : Integer);
    VAR
      i@1010 : Integer;
    BEGIN
      CLEARALL;
      DeprAmount := 0;
      Custom1DeprAmount := 0;
      NumberOfDays3 := 0;
      Custom1NumberOfDays3 := 0;
      DeprBookCode := DeprBookCode2;
      FALedgEntry.LOCKTABLE;
      FA.GET(FANo);
      DeprBook.GET(DeprBookCode);
      IF NOT FADeprBook.GET(FANo,DeprBookCode) THEN
        EXIT;
      DeprBook.TESTFIELD("Fiscal Year 365 Days",FALSE);
      FOR i := 1 TO 4 DO
        EntryAmounts[i] := EntryAmounts2[i];
      DateFromProjection := DateFromProjection2;
      DaysInPeriod := DaysInPeriod2;
      UntilDate := UntilDate2;
      DeprBook.TESTFIELD("Allow Depr. below Zero",FALSE);
      FADeprBook.TESTFIELD("Fixed Depr. Amount below Zero",0);
      FADeprBook.TESTFIELD("Depr. below Zero %",0);
      FADeprBook.TESTFIELD("Use Half-Year Convention",FALSE);
      DeprBook.TESTFIELD(
        "Periodic Depr. Date Calc.",DeprBook."Periodic Depr. Date Calc."::"Last Entry");

      FADeprBook.TESTFIELD("Property Class (Custom 1)");
      FAPostingTypeSetup.GET(
        DeprBookCode,FAPostingTypeSetup."FA Posting Type"::"Custom 1");
      FAPostingTypeSetup.TESTFIELD("Part of Book Value",TRUE);
      FAPostingTypeSetup.TESTFIELD("Part of Depreciable Basis",FALSE);
      FAPostingTypeSetup.TESTFIELD("Include in Depr. Calculation",TRUE);
      FAPostingTypeSetup.TESTFIELD(Sign,FAPostingTypeSetup.Sign::Credit);

      TransferValues;
      IF NOT SkipRecord THEN BEGIN
        Sign := 1;
        IF NOT FADeprBook."Use FA Ledger Check" THEN BEGIN
          IF DeprBook."Use FA Ledger Check" THEN
            FADeprBook.TESTFIELD("Use FA Ledger Check",TRUE);
          Sign :=
            DepreciationCalc.GetCustom1Sign(
              BookValue,AcquisitionCost,Custom1Depr,SalvageValue,MinusBookValue);
          IF Sign = 0 THEN
            EXIT;
          IF Sign = -1 THEN
            DepreciationCalc.GetNewCustom1Signs(
              BookValue,AcquisitionCost,Custom1Depr,SalvageValue,MinusBookValue);
        END;
        IF BookValue + SalvageValue <= 0 THEN
          EXIT;
        IF (SalvageValue >= 0) AND (BookValue <= EndingBookValue) THEN
          EXIT;
        IF DateFromProjection > 0D THEN
          FirstDeprDate := DateFromProjection
        ELSE BEGIN
          FirstDeprDate := DepreciationCalc.GetFirstDeprDate(FANo,DeprBookCode,FALSE);
          IF (FirstDeprDate > UntilDate) OR (FirstDeprDate = 0D) THEN
            EXIT;
          IF (Custom1DeprUntil = 0D) OR (FirstDeprDate <= Custom1DeprUntil) THEN BEGIN
            UseDeprStartingDate := DepreciationCalc.UseDeprStartingDate(FANo,DeprBookCode);
            IF UseDeprStartingDate THEN
              FirstDeprDate := DeprStartingDate;
          END;
          IF FirstDeprDate < DeprStartingDate THEN
            FirstDeprDate := DeprStartingDate;
          IF FirstDeprDate > UntilDate THEN
            EXIT;
        END;
        IF UseDeprStartingDate THEN
          ExtraDays :=  DepreciationCalc.DeprDays(
            Custom1DeprStartingDate,DeprStartingDate,FALSE) - 1;
        IF (Custom1DeprUntil > 0D) AND (FirstDeprDate <= Custom1DeprUntil) AND
           (UntilDate > Custom1DeprUntil)
        THEN
          ERROR(
            Text000,
            FAName,FADeprBook.FIELDCAPTION("Depr. Ending Date (Custom 1)"),Custom1DeprUntil);
        NumberOfDays := DepreciationCalc.DeprDays(FirstDeprDate,UntilDate,FALSE);

        IF NumberOfDays <= 0 THEN
          EXIT;

        IF DaysInPeriod > 0 THEN BEGIN
          NumberOfDays4 := NumberOfDays;
          NumberOfDays := DaysInPeriod;
          ExtraDays := 0;
        END;

        DeprBasis := CalcDeprBasis;

        CASE DeprMethod OF
          DeprMethod::StraightLine:
            DeprAmount := CalcSLAmount;
          DeprMethod::DB1:
            DeprAmount := CalcDB1Amount;
          DeprMethod::DB2:
            DeprAmount := CalcDB2Amount;
          DeprMethod::DB1SL:
            DeprAmount := CalcDBSLAmount;
          DeprMethod::DB2SL,
          DeprMethod::Manual:
            DeprAmount := 0;
          DeprMethod::"User-Defined":
            DeprAmount := CalcCustom1Amount;
        END;

        Custom1DeprAmount := CalcCustom1DeprAmount;
        DepreciationCalc.AdjustCustom1(
          DeprBookCode,DeprAmount,Custom1DeprAmount,BookValue,SalvageValue,
          EndingBookValue,FinalRoundingAmount);
        DeprAmount := Sign * DeprAmount;
        Custom1DeprAmount := Sign * Custom1DeprAmount;
        NumberOfDays3 := NumberOfDays;
        Custom1NumberOfDays3 := NumberOfDays + ExtraDays;
      END;
    END;

    LOCAL PROCEDURE SkipRecord@4() : Boolean;
    BEGIN
      EXIT(
        (DisposalDate > 0D) OR
        (AcquisitionDate = 0D) OR
        (DeprMethod = DeprMethod::Manual) OR
        (AcquisitionDate > UntilDate) OR
        FA.Inactive OR
        FA.Blocked);
    END;

    LOCAL PROCEDURE CalcSLAmount@6() : Decimal;
    VAR
      RemainingLife@1000 : Decimal;
    BEGIN
      IF SLPercent > 0 THEN
        EXIT(-CalcDeprBasis * CalcSLPercent / 100);

      IF FixedAmount > 0 THEN
        EXIT(-FixedAmount * NumberOfDays / DaysInFiscalYear);

      IF DeprYears > 0 THEN BEGIN
        IF (Custom1DeprUntil = 0D) OR (UntilDate > Custom1DeprUntil) THEN BEGIN
          RemainingLife :=
            (DeprYears * DaysInFiscalYear) + NumberOfCustom1DeprDays -
            DepreciationCalc.DeprDays(
              DeprStartingDate,DepreciationCalc.Yesterday(FirstDeprDate,FALSE),FALSE);
          IF RemainingLife < 1 THEN
            EXIT(-BookValue)
          ELSE
            EXIT(-(BookValue + SalvageValue - MinusBookValue) * NumberOfDays / RemainingLife);
        END ELSE
          EXIT(-AcquisitionCost * NumberOfDays / DeprYears / DaysInFiscalYear);
      END;
      EXIT(0);
    END;

    PROCEDURE CalcDBSLAmount@2() : Decimal;
    VAR
      SLAmount@1000 : Decimal;
      DBAmount@1001 : Decimal;
    BEGIN
      IF DeprMethod = DeprMethod::DB1SL THEN
        DBAmount := CalcDB1Amount
      ELSE
        DBAmount := CalcDB2Amount;
      IF UntilDate <= Custom1DeprUntil THEN
        EXIT(DBAmount);
      SLAmount := CalcSLAmount;
      IF SLAmount < DBAmount THEN
        EXIT(SLAmount)
      ELSE
        EXIT(DBAmount)
    END;

    LOCAL PROCEDURE CalcDB2Amount@7() : Decimal;
    BEGIN
      EXIT(
        -(1 - POWER(1 - DBPercent / 100,NumberOfDays / DaysInFiscalYear)) *
        (BookValue - MinusBookValue));
    END;

    LOCAL PROCEDURE CalcDB1Amount@11() : Decimal;
    VAR
      DeprInFiscalYear@1000 : Decimal;
    BEGIN
      IF DateFromProjection = 0D THEN
        DeprInFiscalYear := DepreciationCalc.DeprInFiscalYear(FA."No.",DeprBookCode,UntilDate)
      ELSE
        DeprInFiscalYear := EntryAmounts[3];
      EXIT(
        -(DBPercent / 100) * (NumberOfDays / DaysInFiscalYear) *
         (BookValue - MinusBookValue - Sign * DeprInFiscalYear));
    END;

    LOCAL PROCEDURE CalcCustom1Amount@8() : Decimal;
    VAR
      TableDeprCalc@1000 : Codeunit 5618;
      Factor@1001 : Decimal;
    BEGIN
      Factor := 1;
      IF DaysInPeriod > 0 THEN
        Factor := DaysInPeriod / NumberOfDays4;
      EXIT(
        -TableDeprCalc.GetTablePercent(
        DeprBook.Code,DeprTable,FirstUserDefinedDeprDate,FirstDeprDate,UntilDate) *
        AcquisitionCost * Factor);
    END;

    LOCAL PROCEDURE CalcSLPercent@17() : Decimal;
    VAR
      FractionOfFiscalYear@1000 : Decimal;
      CalcDeprYears@1001 : Decimal;
      YearsOfCustom1Depr@1002 : Decimal;
    BEGIN
      FractionOfFiscalYear := NumberOfDays / DaysInFiscalYear;
      IF SLPercent <= 0 THEN
        EXIT(0);
      IF (Custom1PropertyClass = Custom1PropertyClass::"Real Property") OR
         (Custom1DeprUntil = 0D) OR (UntilDate <= Custom1DeprUntil)
      THEN
        EXIT(SLPercent * FractionOfFiscalYear);

      YearsOfCustom1Depr :=
        DepreciationCalc.DeprDays(
        Custom1DeprStartingDate,Custom1DeprUntil,FALSE) / DaysInFiscalYear;
      CalcDeprYears := 100 / SLPercent;
      IF (CalcDeprYears - YearsOfCustom1Depr) <= 0.001 THEN
        EXIT(0);
      EXIT(100 * FractionOfFiscalYear / (CalcDeprYears - YearsOfCustom1Depr));
    END;

    LOCAL PROCEDURE CalcCustom1DeprPercent@12() : Decimal;
    VAR
      MaxPercent@1000 : Decimal;
      CurrentPercent@1001 : Decimal;
    BEGIN
      IF (Custom1DeprUntil = 0D) OR (UntilDate > Custom1DeprUntil) OR (AcquisitionCost < 0.01) THEN
        EXIT(0);

      MaxPercent := Custom1AccumPercent - (-Custom1Depr * 100 / AcquisitionCost);
      IF MaxPercent < 0 THEN
        EXIT(0);
      CurrentPercent := Custom1PercentThisYear * (NumberOfDays + ExtraDays) / DaysInFiscalYear;
      IF CurrentPercent > MaxPercent THEN
        CurrentPercent := MaxPercent;
      EXIT(CurrentPercent);
    END;

    LOCAL PROCEDURE CalcCustom1DeprAmount@18() : Decimal;
    BEGIN
      EXIT(-AcquisitionCost * CalcCustom1DeprPercent / 100);
    END;

    LOCAL PROCEDURE CalcDeprBasis@15() : Decimal;
    VAR
      FALedgEntry@1000 : Record 5601;
    BEGIN
      IF (Custom1DeprUntil = 0D) OR (UntilDate <= Custom1DeprUntil) THEN
        EXIT(AcquisitionCost);
      WITH FALedgEntry DO BEGIN
        SETCURRENTKEY("FA No.","Depreciation Book Code","Part of Book Value","FA Posting Date");
        SETRANGE("FA No.",FA."No.");
        SETRANGE("Depreciation Book Code",DeprBookCode);
        SETRANGE("Part of Book Value",TRUE);
        SETRANGE("FA Posting Date",0D,Custom1DeprUntil);
        CALCSUMS(Amount);
        IF (Sign = -1) AND (Amount > 0) THEN
          ERROR(
            Text001,
            FAName,FADeprBook.FIELDCAPTION("Book Value"),
            FADeprBook.FIELDCAPTION("Depr. Ending Date (Custom 1)"),Custom1DeprUntil);
        IF DateFromProjection = 0D THEN
          EXIT(ABS(Amount))
        ELSE
          EXIT(EntryAmounts[4]);
      END;
    END;

    LOCAL PROCEDURE NumberOfCustom1DeprDays@10() : Integer;
    BEGIN
      IF Custom1PropertyClass = Custom1PropertyClass::"Personal Property" THEN
        EXIT(0)
      ELSE
        EXIT(DepreciationCalc.DeprDays(Custom1DeprStartingDate,Custom1DeprUntil,FALSE));
    END;

    LOCAL PROCEDURE TransferValues@3();
    BEGIN
      WITH FADeprBook DO BEGIN
        TESTFIELD("Depreciation Starting Date");
        IF "Depreciation Method" = "Depreciation Method"::"User-Defined" THEN BEGIN
          TESTFIELD("Depreciation Table Code");
          TESTFIELD("First User-Defined Depr. Date");
        END;
        CASE "Depreciation Method" OF
          "Depreciation Method"::"Declining-Balance 1",
          "Depreciation Method"::"Declining-Balance 2":
            IF "Declining-Balance %" >= 100 THEN
              ERROR(Text002,FAName,FIELDCAPTION("Declining-Balance %"));
        END;
        IF DateFromProjection = 0D THEN BEGIN
          CALCFIELDS("Book Value","Acquisition Cost","Custom 1","Salvage Value");
          BookValue := "Book Value";
          Custom1Depr := "Custom 1";
        END ELSE BEGIN
          CALCFIELDS("Acquisition Cost","Salvage Value");
          BookValue := EntryAmounts[1];
          Custom1Depr := EntryAmounts[2];
        END;
        MinusBookValue := DepreciationCalc.GetMinusBookValue(FA."No.",DeprBookCode,0D,0D);
        AcquisitionCost := "Acquisition Cost";
        SalvageValue := "Salvage Value";
        BookValue2 := "Book Value";
        SalvageValue2 := "Salvage Value";
        DeprMethod := "Depreciation Method";
        DeprStartingDate := "Depreciation Starting Date";
        DeprTable := "Depreciation Table Code";
        FirstUserDefinedDeprDate := "First User-Defined Depr. Date";
        IF ("Depreciation Method" = "Depreciation Method"::"User-Defined") AND
           (FirstUserDefinedDeprDate > DeprStartingDate)
        THEN
          ERROR(
            Text003,
            FAName,FIELDCAPTION("First User-Defined Depr. Date"),FIELDCAPTION("Depreciation Starting Date"));
        SLPercent := "Straight-Line %";
        DeprYears := "No. of Depreciation Years";
        DBPercent := "Declining-Balance %";
        IF "Depreciation Ending Date" > 0D THEN BEGIN
          IF  "Depreciation Starting Date" > "Depreciation Ending Date" THEN
            ERROR(
              Text003,
              FAName,FIELDCAPTION("Depreciation Starting Date"),FIELDCAPTION("Depreciation Ending Date"));
          DeprYears :=
             DepreciationCalc.DeprDays(
             "Depreciation Starting Date","Depreciation Ending Date",FALSE) / 360;
        END;
        FixedAmount := "Fixed Depr. Amount";
        FinalRoundingAmount := "Final Rounding Amount";
        IF FinalRoundingAmount = 0 THEN
          FinalRoundingAmount := DeprBook."Default Final Rounding Amount";
        EndingBookValue := "Ending Book Value";
        IF NOT "Ignore Def. Ending Book Value" AND (EndingBookValue = 0) THEN
          EndingBookValue := DeprBook."Default Ending Book Value";
        AcquisitionDate := "Acquisition Date";
        DisposalDate := "Disposal Date";
        PercentBelowZero := "Depr. below Zero %";
        AmountBelowZero := "Fixed Depr. Amount below Zero";
        DaysInFiscalYear := DeprBook."No. of Days in Fiscal Year";
        IF DaysInFiscalYear = 0 THEN
          DaysInFiscalYear := 360;
        Custom1DeprStartingDate := "Depr. Starting Date (Custom 1)";
        Custom1DeprUntil := "Depr. Ending Date (Custom 1)";
        Custom1AccumPercent := "Accum. Depr. % (Custom 1)";
        Custom1PercentThisYear := "Depr. This Year % (Custom 1)";
        Custom1PropertyClass := "Property Class (Custom 1)";
        IF Custom1DeprStartingDate = 0D THEN
          Custom1DeprStartingDate := DeprStartingDate;
        IF Custom1DeprStartingDate > DeprStartingDate THEN
          ERROR(
            Text003,
            FAName,FIELDCAPTION("Depr. Starting Date (Custom 1)"),FIELDCAPTION("Depreciation Starting Date"));
        IF (Custom1DeprUntil > 0D) AND (Custom1DeprUntil < DeprStartingDate) THEN
          ERROR(
            Text003,
            FAName,FIELDCAPTION("Depreciation Starting Date"),FIELDCAPTION("Depr. Ending Date (Custom 1)"));
        IF (DeprMethod = DeprMethod::DB2SL) AND (Custom1DeprUntil > 0D) THEN
          ERROR(
            Text004,
            FAName,FIELDCAPTION("Depr. Ending Date (Custom 1)"),
            FIELDCAPTION("Depreciation Method"),"Depreciation Method");
      END;
    END;

    LOCAL PROCEDURE FAName@5() : Text[200];
    VAR
      DepreciationCalc@1000 : Codeunit 5616;
    BEGIN
      EXIT(DepreciationCalc.FAName(FA,DeprBookCode));
    END;

    BEGIN
    END.
  }
}
