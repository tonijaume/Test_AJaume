OBJECT Codeunit 7153 Item Analysis Management
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Period;ESP=Periodo';
      Text001@1008 : TextConst 'ENU=<Sign><Integer Thousand><Decimals,2>;ESP=<Sign><Integer Thousand><Decimals,2>';
      Text003@1006 : TextConst 'ENU=%1 is not a valid line definition.;ESP=%1 no es una def. de l¡nea v lida.';
      Text004@1005 : TextConst 'ENU=%1 is not a valid column definition.;ESP=%1 no es una def. de columna v lida.';
      Text005@1004 : TextConst 'ENU=1,6,,Dimension 1 Filter;ESP=1,6,,Filtro dimensi¢n 1';
      Text006@1003 : TextConst 'ENU=1,6,,Dimension 2 Filter;ESP=1,6,,Filtro dimensi¢n 2';
      Text007@1002 : TextConst 'ENU=1,6,,Dimension 3 Filter;ESP=1,6,,Filtro dimensi¢n 3';
      Text008@1009 : TextConst 'ENU=DEFAULT;ESP=GENERICO';
      Text009@1001 : TextConst 'ENU=Default analysis view;ESP=Vista de an lisis predeterminada';
      PrevItemAnalysisView@1010 : Record 7152;

    LOCAL PROCEDURE DimCodeNotAllowed@24(DimCode@1000 : Text[30];ItemAnalysisView@1001 : Record 7152) : Boolean;
    VAR
      Item@1003 : Record 27;
      Location@1006 : Record 14;
    BEGIN
      EXIT(
        NOT (UPPERCASE(DimCode) IN
            [UPPERCASE(Item.TABLECAPTION),
             UPPERCASE(Location.TABLECAPTION),
             UPPERCASE(Text000),
             ItemAnalysisView."Dimension 1 Code",
             ItemAnalysisView."Dimension 2 Code",
             ItemAnalysisView."Dimension 3 Code",
             '']));
    END;

    LOCAL PROCEDURE DimCodeToOption@21(DimCode@1000 : Text[30];ItemAnalysisView@1002 : Record 7152) : Integer;
    VAR
      Location@1001 : Record 14;
      Item@1003 : Record 27;
    BEGIN
      CASE DimCode OF
        Item.TABLECAPTION:
          EXIT(0);
        Text000:
          EXIT(1);
        Location.TABLECAPTION:
          EXIT(2);
        ItemAnalysisView."Dimension 1 Code":
          EXIT(3);
        ItemAnalysisView."Dimension 2 Code":
          EXIT(4);
        ItemAnalysisView."Dimension 3 Code":
          EXIT(5);
        ELSE
          EXIT(-1);
      END;
    END;

    LOCAL PROCEDURE CopyItemToBuf@1(VAR Item@1000 : Record 27;VAR DimCodeBuf@1001 : Record 367);
    BEGIN
      WITH DimCodeBuf DO BEGIN
        INIT;
        Code := Item."No.";
        Name := Item.Description;
      END;
    END;

    LOCAL PROCEDURE CopyPeriodToBuf@8(VAR Period@1000 : Record 2000000007;VAR DimCodeBuf@1001 : Record 367;DateFilter@1003 : Text[30]);
    VAR
      Period2@1002 : Record 2000000007;
    BEGIN
      WITH DimCodeBuf DO BEGIN
        INIT;
        Code := FORMAT(Period."Period Start");
        "Period Start" := Period."Period Start";
        "Period End" := Period."Period End";
        IF DateFilter <> '' THEN BEGIN
          Period2.SETFILTER("Period End",DateFilter);
          IF Period2.GETRANGEMAX("Period End") < "Period End" THEN
            "Period End" := Period2.GETRANGEMAX("Period End");
        END;
        Name := Period."Period Name";
      END;
    END;

    LOCAL PROCEDURE CopyLocationToBuf@5(VAR Location@1000 : Record 14;VAR DimCodeBuf@1001 : Record 367);
    BEGIN
      WITH DimCodeBuf DO BEGIN
        INIT;
        Code := Location.Code;
        Name := Location.Name;
      END;
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@9(VAR DimVal@1000 : Record 349;VAR DimCodeBuf@1001 : Record 367);
    BEGIN
      WITH DimCodeBuf DO BEGIN
        INIT;
        Code := DimVal.Code;
        Name := DimVal.Name;
        Totaling := DimVal.Totaling;
        Indentation := DimVal.Indentation;
        "Show in Bold" :=
          DimVal."Dimension Value Type" <> DimVal."Dimension Value Type"::Standard;
      END;
    END;

    LOCAL PROCEDURE FilterItemAnalyViewEntry@75(VAR ItemStatisticsBuffer@1000 : Record 5821;VAR ItemAnalysisViewEntry@1001 : Record 7154);
    BEGIN
      WITH ItemStatisticsBuffer DO BEGIN
        COPYFILTER("Analysis Area Filter",ItemAnalysisViewEntry."Analysis Area");
        COPYFILTER("Analysis View Filter",ItemAnalysisViewEntry."Analysis View Code");

        IF GETFILTER("Item Filter") <> '' THEN
          COPYFILTER("Item Filter",ItemAnalysisViewEntry."Item No.");

        IF GETFILTER("Date Filter") <> '' THEN
          COPYFILTER("Date Filter",ItemAnalysisViewEntry."Posting Date");

        IF GETFILTER("Location Filter") <> '' THEN
          COPYFILTER("Location Filter",ItemAnalysisViewEntry."Location Code");

        IF GETFILTER("Dimension 1 Filter") <> '' THEN
          COPYFILTER("Dimension 1 Filter",ItemAnalysisViewEntry."Dimension 1 Value Code");

        IF GETFILTER("Dimension 2 Filter") <> '' THEN
          COPYFILTER("Dimension 2 Filter",ItemAnalysisViewEntry."Dimension 2 Value Code");

        IF GETFILTER("Dimension 3 Filter") <> '' THEN
          COPYFILTER("Dimension 3 Filter",ItemAnalysisViewEntry."Dimension 3 Value Code");
      END;
    END;

    LOCAL PROCEDURE FilterItemAnalyViewBudgEntry@73(VAR ItemStatisticsBuf@1000 : Record 5821;VAR ItemAnalysisViewBudgEntry@1001 : Record 7156);
    BEGIN
      WITH ItemStatisticsBuf DO BEGIN
        COPYFILTER("Analysis Area Filter",ItemAnalysisViewBudgEntry."Analysis Area");
        COPYFILTER("Analysis View Filter",ItemAnalysisViewBudgEntry."Analysis View Code");
        COPYFILTER("Budget Filter",ItemAnalysisViewBudgEntry."Budget Name");

        IF GETFILTER("Item Filter") <> '' THEN
          COPYFILTER("Item Filter",ItemAnalysisViewBudgEntry."Item No.");

        IF GETFILTER("Location Filter") <> '' THEN
          COPYFILTER("Location Filter",ItemAnalysisViewBudgEntry."Location Code");

        IF GETFILTER("Date Filter") <> '' THEN
          COPYFILTER("Date Filter",ItemAnalysisViewBudgEntry."Posting Date");

        IF GETFILTER("Dimension 1 Filter") <> '' THEN
          COPYFILTER("Dimension 1 Filter",ItemAnalysisViewBudgEntry."Dimension 1 Value Code");

        IF GETFILTER("Dimension 2 Filter") <> '' THEN
          COPYFILTER("Dimension 2 Filter",ItemAnalysisViewBudgEntry."Dimension 2 Value Code");

        IF GETFILTER("Dimension 3 Filter") <> '' THEN
          COPYFILTER("Dimension 3 Filter",ItemAnalysisViewBudgEntry."Dimension 3 Value Code");
      END;
    END;

    LOCAL PROCEDURE SetDimFilters@17(VAR ItemStatisticsBuffer@1000 : Record 5821;DimOption@1002 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';DimCodeBuf@1001 : Record 367);
    BEGIN
      WITH ItemStatisticsBuffer DO
        CASE DimOption OF
          DimOption::Item:
            SETRANGE("Item Filter",DimCodeBuf.Code);
          DimOption::Period:
            SETRANGE("Date Filter",DimCodeBuf."Period Start",DimCodeBuf."Period End");
          DimOption::Location:
            SETRANGE("Location Filter",DimCodeBuf.Code);
          DimOption::"Dimension 1":
            IF DimCodeBuf.Totaling <> '' THEN
              SETFILTER("Dimension 1 Filter",DimCodeBuf.Totaling)
            ELSE
              SETRANGE("Dimension 1 Filter",DimCodeBuf.Code);
          DimOption::"Dimension 2":
            IF DimCodeBuf.Totaling <> '' THEN
              SETFILTER("Dimension 2 Filter",DimCodeBuf.Totaling)
            ELSE
              SETRANGE("Dimension 2 Filter",DimCodeBuf.Code);
          DimOption::"Dimension 3":
            IF DimCodeBuf.Totaling <> '' THEN
              SETFILTER("Dimension 3 Filter",DimCodeBuf.Totaling)
            ELSE
              SETRANGE("Dimension 3 Filter",DimCodeBuf.Code);
        END;
    END;

    PROCEDURE SetCommonFilters@15(CurrentAnalysisArea@1005 : 'Sales,Purchase,Inventory';VAR ItemStatisticsBuffer@1000 : Record 5821;CurrentAnalysisViewCode@1010 : Code[10];ItemFilter@1009 : Code[250];LocationFilter@1004 : Code[250];DateFilter@1006 : Text[30];Dim1Filter@1003 : Code[250];Dim2Filter@1002 : Code[250];Dim3Filter@1001 : Code[250];BudgetFilter@1007 : Code[250]);
    BEGIN
      WITH ItemStatisticsBuffer DO BEGIN
        RESET;
        SETRANGE("Analysis Area Filter",CurrentAnalysisArea);
        SETRANGE("Analysis View Filter",CurrentAnalysisViewCode);

        IF ItemFilter <> '' THEN
          SETFILTER("Item Filter",ItemFilter);
        IF LocationFilter <> '' THEN
          SETFILTER("Location Filter",LocationFilter);
        IF DateFilter <> '' THEN
          SETFILTER("Date Filter",DateFilter);
        IF Dim1Filter <> '' THEN
          SETFILTER("Dimension 1 Filter",Dim1Filter);
        IF Dim2Filter <> '' THEN
          SETFILTER("Dimension 2 Filter",Dim2Filter);
        IF Dim3Filter <> '' THEN
          SETFILTER("Dimension 3 Filter",Dim3Filter);
        IF BudgetFilter <> '' THEN
          SETFILTER("Budget Filter",BudgetFilter);
      END;
    END;

    PROCEDURE AnalysisViewSelection@22(CurrentAnalysisArea@1001 : 'Sales,Purchase,Inventory';VAR CurrentItemAnalysisViewCode@1000 : Code[10];VAR ItemAnalysisView@1002 : Record 7152;VAR ItemStatisticsBuffer@1003 : Record 5821;VAR Dim1Filter@1006 : Code[250];VAR Dim2Filter@1005 : Code[250];VAR Dim3Filter@1004 : Code[250]);
    BEGIN
      IF NOT ItemAnalysisView.GET(CurrentAnalysisArea,CurrentItemAnalysisViewCode) THEN BEGIN
        ItemAnalysisView.FILTERGROUP := 2;
        ItemAnalysisView.SETRANGE("Analysis Area",CurrentAnalysisArea);
        ItemAnalysisView.FILTERGROUP := 0;
        IF NOT ItemAnalysisView.FIND('-') THEN BEGIN
          ItemAnalysisView.INIT;
          ItemAnalysisView."Analysis Area" := CurrentAnalysisArea;
          ItemAnalysisView.Code := Text008;
          ItemAnalysisView.Name := Text009;
          ItemAnalysisView.INSERT(TRUE);
        END;
        CurrentItemAnalysisViewCode := ItemAnalysisView.Code;
      END;

      SetItemAnalysisView(
        CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
        Dim1Filter,Dim2Filter,Dim3Filter);
    END;

    PROCEDURE CheckAnalysisView@18(CurrentAnalysisArea@1002 : 'Sales,Purchase,Inventory';VAR CurrentItemAnalysisViewCode@1001 : Code[10];VAR ItemAnalysisView@1000 : Record 7152);
    BEGIN
      ItemAnalysisView.GET(CurrentAnalysisArea,CurrentItemAnalysisViewCode);
    END;

    PROCEDURE SetItemAnalysisView@16(CurrentAnalysisArea@1006 : 'Sales,Purchase,Inventory';CurrentItemAnalysisViewCode@1002 : Code[10];VAR ItemAnalysisView@1001 : Record 7152;VAR ItemStatisticsBuffer@1000 : Record 5821;VAR Dim1Filter@1005 : Code[250];VAR Dim2Filter@1004 : Code[250];VAR Dim3Filter@1003 : Code[250]);
    BEGIN
      ItemStatisticsBuffer.SETRANGE("Analysis Area Filter",CurrentAnalysisArea);
      ItemStatisticsBuffer.SETRANGE("Analysis View Filter",CurrentItemAnalysisViewCode);

      IF PrevItemAnalysisView.Code <> '' THEN BEGIN
        IF (ItemAnalysisView."Dimension 1 Code" <> PrevItemAnalysisView."Dimension 1 Code") THEN
          Dim1Filter := '';
        IF (ItemAnalysisView."Dimension 2 Code" <> PrevItemAnalysisView."Dimension 2 Code") THEN
          Dim2Filter := '';
        IF (ItemAnalysisView."Dimension 3 Code" <> PrevItemAnalysisView."Dimension 3 Code") THEN
          Dim3Filter := '';
      END;
      ItemStatisticsBuffer.SETFILTER("Dimension 1 Filter",Dim1Filter);
      ItemStatisticsBuffer.SETFILTER("Dimension 2 Filter",Dim2Filter);
      ItemStatisticsBuffer.SETFILTER("Dimension 3 Filter",Dim3Filter);

      PrevItemAnalysisView := ItemAnalysisView;
    END;

    PROCEDURE LookupItemAnalysisView@14(CurrentAnalysisArea@1007 : 'Sales,Purchase,Inventory';VAR CurrentItemAnalysisViewCode@1005 : Code[10];VAR ItemAnalysisView@1004 : Record 7152;VAR ItemStatisticsBuffer@1003 : Record 5821;VAR Dim1Filter@1002 : Code[250];VAR Dim2Filter@1001 : Code[250];VAR Dim3Filter@1000 : Code[250]);
    VAR
      ItemAnalysisView2@1006 : Record 7152;
    BEGIN
      ItemAnalysisView2.COPY(ItemAnalysisView);
      ItemAnalysisView2.FILTERGROUP := 2;
      ItemAnalysisView2.SETRANGE("Analysis Area",CurrentAnalysisArea);
      ItemAnalysisView2.FILTERGROUP := 0;
      IF FORM.RUNMODAL(0,ItemAnalysisView2) = ACTION::LookupOK THEN BEGIN
        ItemAnalysisView := ItemAnalysisView2;
        CurrentItemAnalysisViewCode := ItemAnalysisView.Code;
        SetItemAnalysisView(
          CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
          Dim1Filter,Dim2Filter,Dim3Filter);
      END ELSE
        AnalysisViewSelection(
          CurrentAnalysisArea,CurrentItemAnalysisViewCode,ItemAnalysisView,ItemStatisticsBuffer,
          Dim1Filter,Dim2Filter,Dim3Filter);
    END;

    PROCEDURE LookUpCode@4(DimOption@1000 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';DimCode@1001 : Text[30];Code@1002 : Text[30]);
    VAR
      Item@1003 : Record 27;
      Location@1004 : Record 14;
      DimVal@1005 : Record 349;
      DimValList@1006 : Form 560;
    BEGIN
      CASE DimOption OF
        DimOption::Item:
          BEGIN
            Item.GET(Code);
            FORM.RUNMODAL(0,Item);
          END;
        DimOption::Period: ;
        DimOption::Location:
          BEGIN
            Location.GET(Code);
            FORM.RUNMODAL(0,Location);
          END;
        DimOption::"Dimension 1",
        DimOption::"Dimension 2",
        DimOption::"Dimension 3":
          BEGIN
            DimVal.SETRANGE("Dimension Code",DimCode);
            DimVal.GET(DimCode,Code);
            DimValList.SETTABLEVIEW(DimVal);
            DimValList.SETRECORD(DimVal);
            DimValList.RUNMODAL;
          END;
      END;
    END;

    PROCEDURE LookUpDimFilter@57(Dim@1000 : Code[20];VAR Text@1001 : Text[250]) : Boolean;
    VAR
      DimVal@1002 : Record 349;
      DimValList@1003 : Form 560;
    BEGIN
      IF Dim = '' THEN
        EXIT(FALSE);
      DimValList.LOOKUPMODE(TRUE);
      DimVal.SETRANGE("Dimension Code",Dim);
      DimValList.SETTABLEVIEW(DimVal);
      IF DimValList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        DimValList.GETRECORD(DimVal);
        Text := DimValList.GetSelectionFilter;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE DrillDown@30(CurrentAnalysisArea@1010 : 'Sales,Purchase,Inventory';ItemStatisticsBuffer@1015 : Record 5821;CurrentItemAnalysisViewCode@1013 : Code[10];ItemFilter@1014 : Code[250];LocationFilter@1009 : Code[250];DateFilter@1011 : Text[30];Dim1Filter@1008 : Code[250];Dim2Filter@1007 : Code[250];Dim3Filter@1006 : Code[250];BudgetFilter@1016 : Code[250];LineDimOption@1005 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';LineDimCodeBuf@1004 : Record 367;ColDimOption@1003 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';ColDimCodeBuf@1000 : Record 367;SetColumnFilter@1012 : Boolean;ValueType@1017 : 'Sales Amount,Cost Amount,Sales Quantity';ShowActualBudget@1018 : 'Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%');
    VAR
      ItemAnalysisViewEntry@1001 : Record 7154;
      ItemAnalysisViewBudgetEntry@1002 : Record 7156;
    BEGIN
      SetCommonFilters(
        CurrentAnalysisArea,
        ItemStatisticsBuffer,
        CurrentItemAnalysisViewCode,
        ItemFilter,
        LocationFilter,
        DateFilter,
        Dim1Filter,
        Dim2Filter,
        Dim3Filter,
        BudgetFilter);
      SetDimFilters(ItemStatisticsBuffer,LineDimOption,LineDimCodeBuf);
      IF SetColumnFilter THEN
        SetDimFilters(ItemStatisticsBuffer,ColDimOption,ColDimCodeBuf);

      CASE ShowActualBudget OF
        ShowActualBudget::"Actual Amounts",
        ShowActualBudget::Variance,
        ShowActualBudget::"Variance%",
        ShowActualBudget::"Index%":
          BEGIN
            FilterItemAnalyViewEntry(ItemStatisticsBuffer,ItemAnalysisViewEntry);
            CASE ValueType OF
              ValueType::"Sales Amount":
                FORM.RUN(0,ItemAnalysisViewEntry,ItemAnalysisViewEntry."Sales Amount (Actual)");
              ValueType::"Cost Amount":
                FORM.RUN(0,ItemAnalysisViewEntry,ItemAnalysisViewEntry."Cost Amount (Actual)");
              ValueType::"Sales Quantity":
                FORM.RUN(0,ItemAnalysisViewEntry,ItemAnalysisViewEntry.Quantity);
            END;
          END;
        ShowActualBudget::"Budgeted Amounts":
          BEGIN
            FilterItemAnalyViewBudgEntry(ItemStatisticsBuffer,ItemAnalysisViewBudgetEntry);
            CASE ValueType OF
              ValueType::"Sales Amount":
                FORM.RUN(0,ItemAnalysisViewBudgetEntry,ItemAnalysisViewBudgetEntry."Sales Amount");
              ValueType::"Cost Amount":
                FORM.RUN(0,ItemAnalysisViewBudgetEntry,ItemAnalysisViewBudgetEntry."Cost Amount");
              ValueType::"Sales Quantity":
                FORM.RUN(0,ItemAnalysisViewBudgetEntry,ItemAnalysisViewBudgetEntry.Quantity);
            END;
          END;
      END;
    END;

    PROCEDURE SetLineAndColDim@2(ItemAnalysisView@1005 : Record 7152;VAR LineDimCode@1000 : Text[30];VAR LineDimOption@1006 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';VAR ColumnDimCode@1003 : Text[30];VAR ColumnDimOption@1001 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3');
    VAR
      Item@1004 : Record 27;
    BEGIN
      IF (LineDimCode = '') AND (ColumnDimCode = '') THEN BEGIN
        LineDimCode := Item.TABLECAPTION;
        ColumnDimCode := Text000;
      END;
      LineDimOption := DimCodeToOption(LineDimCode,ItemAnalysisView);
      ColumnDimOption := DimCodeToOption(ColumnDimCode,ItemAnalysisView);
    END;

    PROCEDURE GetDimSelection@3(OldDimSelCode@1000 : Text[30];VAR ItemAnalysisView@1001 : Record 7152) : Text[30];
    VAR
      Item@1006 : Record 27;
      Location@1003 : Record 14;
      DimSelection@1002 : Form 568;
    BEGIN
      DimSelection.InsertDimSelBuf(FALSE,Item.TABLECAPTION,Item.TABLECAPTION);
      DimSelection.InsertDimSelBuf(FALSE,Location.TABLECAPTION,Location.TABLECAPTION);
      DimSelection.InsertDimSelBuf(FALSE,Text000,Text000);
      IF ItemAnalysisView."Dimension 1 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,ItemAnalysisView."Dimension 1 Code",'');
      IF ItemAnalysisView."Dimension 2 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,ItemAnalysisView."Dimension 2 Code",'');
      IF ItemAnalysisView."Dimension 3 Code" <> '' THEN
        DimSelection.InsertDimSelBuf(FALSE,ItemAnalysisView."Dimension 3 Code",'');

      DimSelection.LOOKUPMODE := TRUE;
      IF DimSelection.RUNMODAL = ACTION::LookupOK THEN
        EXIT(DimSelection.GetDimSelCode);
      EXIT(OldDimSelCode);
    END;

    PROCEDURE ValidateLineDimCode@20(ItemAnalysisView@1006 : Record 7152;VAR LineDimCode@1004 : Text[30];VAR LineDimOption@1007 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';ColumnDimOption@1010 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';VAR InternalDateFilter@1005 : Text[30];VAR DateFilter@1008 : Text[30];VAR ItemStatisticsBuffer@1009 : Record 5821;VAR PeriodInitialized@1011 : Boolean);
    BEGIN
      IF DimCodeNotAllowed(LineDimCode,ItemAnalysisView) THEN BEGIN
        MESSAGE(Text003,LineDimCode);
        LineDimCode := '';
      END;
      LineDimOption := DimCodeToOption(LineDimCode,ItemAnalysisView);
      InternalDateFilter := ItemStatisticsBuffer.GETFILTER("Date Filter");
      IF (LineDimOption <> LineDimOption::Period) AND (ColumnDimOption <> ColumnDimOption::Period) THEN BEGIN
        DateFilter := InternalDateFilter;
        IF STRPOS(DateFilter,'&') > 1 THEN
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      END ELSE
        PeriodInitialized := FALSE;
    END;

    PROCEDURE ValidateColumnDimCode@19(ItemAnalysisView@1006 : Record 7152;VAR ColumnDimCode@1004 : Text[30];VAR ColumnDimOption@1007 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';LineDimOption@1010 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';VAR InternalDateFilter@1005 : Text[30];VAR DateFilter@1008 : Text[30];VAR ItemStatisticsBuffer@1009 : Record 5821;VAR PeriodInitialized@1011 : Boolean);
    BEGIN
      IF DimCodeNotAllowed(ColumnDimCode,ItemAnalysisView) THEN BEGIN
        MESSAGE(Text004,ColumnDimCode);
        ColumnDimCode := '';
      END;
      ColumnDimOption := DimCodeToOption(ColumnDimCode,ItemAnalysisView);
      InternalDateFilter := ItemStatisticsBuffer.GETFILTER("Date Filter");
      IF (ColumnDimOption <> ColumnDimOption::Period) AND (LineDimOption <> LineDimOption::Period) THEN BEGIN
        DateFilter := InternalDateFilter;
        IF STRPOS(DateFilter,'&') > 1 THEN
          DateFilter := COPYSTR(DateFilter,1,STRPOS(DateFilter,'&') - 1);
      END ELSE
        PeriodInitialized := FALSE;
    END;

    PROCEDURE FormatAmount@23(VAR Text@1005 : Text[250];RoundingFactor@1002 : 'None,1,1000,1000000');
    VAR
      Amount@1001 : Decimal;
    BEGIN
      IF (Text = '') OR (RoundingFactor = RoundingFactor::None) THEN
        EXIT;
      EVALUATE(Amount,Text);
      CASE RoundingFactor OF
        RoundingFactor::"1":
          Amount := ROUND(Amount,1);
        RoundingFactor::"1000":
          Amount := ROUND(Amount / 1000,0.1);
        RoundingFactor::"1000000":
          Amount := ROUND(Amount / 1000000,0.1);
      END;
      IF Amount = 0 THEN
        Text := ''
      ELSE
        CASE RoundingFactor OF
          RoundingFactor::"1":
            Text := FORMAT(Amount);
          RoundingFactor::"1000",RoundingFactor::"1000000":
            Text := FORMAT(Amount,0,Text001);
        END;
    END;

    PROCEDURE FindRec@59(ItemAnalysisView@1011 : Record 7152;DimOption@1000 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';VAR DimCodeBuf@1001 : Record 367;Which@1002 : Text[250];ItemFilter@1019 : Code[250];LocationFilter@1009 : Code[250];PeriodType@1017 : 'Day,Week,Month,Quarter,Year,Accounting Period';VAR DateFilter@1016 : Text[30];VAR PeriodInitialized@1015 : Boolean;VAR InternalDateFilter@1014 : Text[30];Dim1Filter@1013 : Code[250];Dim2Filter@1012 : Code[250];Dim3Filter@1010 : Code[250]) : Boolean;
    VAR
      Item@1003 : Record 27;
      Location@1004 : Record 14;
      Period@1005 : Record 2000000007;
      DimVal@1006 : Record 349;
      PeriodFormMgt@1007 : Codeunit 359;
      Found@1008 : Boolean;
    BEGIN
      CASE DimOption OF
        DimOption::Item:
          BEGIN
            Item."No." := DimCodeBuf.Code;
            IF ItemFilter <> '' THEN
              Item.SETFILTER("No.",ItemFilter);
            Found := Item.FIND(Which);
            IF Found THEN
              CopyItemToBuf(Item,DimCodeBuf);
          END;
        DimOption::Period:
          BEGIN
            IF NOT PeriodInitialized THEN
              DateFilter := '';
            PeriodInitialized := TRUE;
            Period."Period Start" := DimCodeBuf."Period Start";
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter)
            ELSE
              IF NOT PeriodInitialized AND (InternalDateFilter <> '') THEN
                Period.SETFILTER("Period Start",InternalDateFilter);
            Found := PeriodFormMgt.FindDate(Which,Period,PeriodType);
            IF Found THEN
              CopyPeriodToBuf(Period,DimCodeBuf,DateFilter);
          END;
        DimOption::Location:
          BEGIN
            Location.Code := COPYSTR(DimCodeBuf.Code,1,MAXSTRLEN(Location.Code));
            IF LocationFilter <> '' THEN
              Location.SETFILTER(Code,LocationFilter);
            Found := Location.FIND(Which);
            IF Found THEN
              CopyLocationToBuf(Location,DimCodeBuf);
          END;
        DimOption::"Dimension 1":
          BEGIN
            IF Dim1Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim1Filter);
            DimVal."Dimension Code" := ItemAnalysisView."Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 2":
          BEGIN
            IF Dim2Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim2Filter);
            DimVal."Dimension Code" := ItemAnalysisView."Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 3":
          BEGIN
            IF Dim3Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim3Filter);
            DimVal."Dimension Code" := ItemAnalysisView."Dimension 3 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            Found := DimVal.FIND(Which);
            IF Found THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
      END;
      EXIT(Found);
    END;

    PROCEDURE NextRec@60(ItemAnalysisView@1009 : Record 7152;DimOption@1000 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';VAR DimCodeBuf@1001 : Record 367;Steps@1002 : Integer;ItemFilter@1018 : Code[250];LocationFilter@1017 : Code[250];PeriodType@1016 : 'Day,Week,Month,Quarter,Year,Accounting Period';VAR DateFilter@1015 : Text[30];Dim1Filter@1012 : Code[250];Dim2Filter@1011 : Code[250];Dim3Filter@1010 : Code[250]) : Integer;
    VAR
      Item@1003 : Record 27;
      Location@1004 : Record 14;
      Period@1005 : Record 2000000007;
      DimVal@1006 : Record 349;
      PeriodFormMgt@1007 : Codeunit 359;
      ResultSteps@1008 : Integer;
    BEGIN
      CASE DimOption OF
        DimOption::Item:
          BEGIN
            Item."No." := DimCodeBuf.Code;
            IF ItemFilter <> '' THEN
              Item.SETFILTER("No.",ItemFilter);
            ResultSteps := Item.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyItemToBuf(Item,DimCodeBuf);
          END;
        DimOption::Period:
          BEGIN
            IF DateFilter <> '' THEN
              Period.SETFILTER("Period Start",DateFilter);
            Period."Period Start" := DimCodeBuf."Period Start";
            ResultSteps := PeriodFormMgt.NextDate(Steps,Period,PeriodType);
            IF ResultSteps <> 0 THEN
              CopyPeriodToBuf(Period,DimCodeBuf,DateFilter);
          END;
        DimOption::Location:
          BEGIN
            Location.Code := DimCodeBuf.Code;
            IF LocationFilter <> '' THEN
              Location.SETFILTER(Code,LocationFilter);
            ResultSteps := Location.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyLocationToBuf(Location,DimCodeBuf);
          END;
        DimOption::"Dimension 1":
          BEGIN
            IF Dim1Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim1Filter);
            DimVal."Dimension Code" := ItemAnalysisView."Dimension 1 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 2":
          BEGIN
            IF Dim2Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim2Filter);
            DimVal."Dimension Code" := ItemAnalysisView."Dimension 2 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
        DimOption::"Dimension 3":
          BEGIN
            IF Dim3Filter <> '' THEN
              DimVal.SETFILTER(Code,Dim3Filter);
            DimVal."Dimension Code" := ItemAnalysisView."Dimension 3 Code";
            DimVal.SETRANGE("Dimension Code",DimVal."Dimension Code");
            DimVal.Code := DimCodeBuf.Code;
            ResultSteps := DimVal.NEXT(Steps);
            IF ResultSteps <> 0 THEN
              CopyDimValueToBuf(DimVal,DimCodeBuf);
          END;
      END;
      EXIT(ResultSteps);
    END;

    PROCEDURE GetCaptionClass@12(AnalysisViewDimType@1000 : Integer;ItemAnalysisView@1001 : Record 7152) : Text[250];
    BEGIN
      CASE AnalysisViewDimType OF
        1:
          BEGIN
            IF ItemAnalysisView."Dimension 1 Code" <> '' THEN
              EXIT('1,6,' + ItemAnalysisView."Dimension 1 Code");
            EXIT(Text005);
          END;
        2:
          BEGIN
            IF ItemAnalysisView."Dimension 2 Code" <> '' THEN
              EXIT('1,6,' + ItemAnalysisView."Dimension 2 Code");
            EXIT(Text006);
          END;
        3:
          BEGIN
            IF ItemAnalysisView."Dimension 3 Code" <> '' THEN
              EXIT('1,6,' + ItemAnalysisView."Dimension 3 Code");
            EXIT(Text007);
          END;
      END;
    END;

    PROCEDURE CalcAmount@7(ValueType@1017 : 'Sales Amount,Cost Amount,Quantity';SetColumnFilter@1016 : Boolean;CurrentAnalysisArea@1008 : 'Sales,Purchases,Inventory';VAR ItemStatisticsBuffer@1015 : Record 5821;CurrentItemAnalysisViewCode@1014 : Code[10];ItemFilter@1013 : Code[250];LocationFilter@1011 : Code[250];DateFilter@1010 : Text[30];BudgetFilter@1009 : Code[250];Dim1Filter@1007 : Code[250];Dim2Filter@1006 : Code[250];Dim3Filter@1005 : Code[250];LineDimOption@1004 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';LineDimCodeBuf@1003 : Record 367;ColDimOption@1002 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';ColDimCodeBuf@1000 : Record 367;ShowActualBudget@1012 : 'Actual Amounts,Budgeted Amounts,Variance,Variance%,Index%') : Decimal;
    VAR
      Amount@1001 : Decimal;
      ActualAmt@1018 : Decimal;
      BudgetAmt@1019 : Decimal;
    BEGIN
      CASE ShowActualBudget OF
        ShowActualBudget::"Actual Amounts":
          Amount :=
            CalcActualAmount(
              ValueType,SetColumnFilter,
              CurrentAnalysisArea,ItemStatisticsBuffer,CurrentItemAnalysisViewCode,
              ItemFilter,LocationFilter,DateFilter,BudgetFilter,
              Dim1Filter,Dim2Filter,Dim3Filter,
              LineDimOption,LineDimCodeBuf,
              ColDimOption,ColDimCodeBuf);
        ShowActualBudget::"Budgeted Amounts":
          Amount :=
            CalcBudgetAmount(
              ValueType,SetColumnFilter,
              CurrentAnalysisArea,ItemStatisticsBuffer,CurrentItemAnalysisViewCode,
              ItemFilter,LocationFilter,DateFilter,BudgetFilter,
              Dim1Filter,Dim2Filter,Dim3Filter,
              LineDimOption,LineDimCodeBuf,
              ColDimOption,ColDimCodeBuf);
        ShowActualBudget::Variance:
          BEGIN
            ActualAmt :=
              CalcActualAmount(
                ValueType,SetColumnFilter,
                CurrentAnalysisArea,ItemStatisticsBuffer,CurrentItemAnalysisViewCode,
                ItemFilter,LocationFilter,DateFilter,BudgetFilter,
                Dim1Filter,Dim2Filter,Dim3Filter,
                LineDimOption,LineDimCodeBuf,
                ColDimOption,ColDimCodeBuf);
            BudgetAmt :=
              CalcBudgetAmount(
                ValueType,SetColumnFilter,
                CurrentAnalysisArea,ItemStatisticsBuffer,CurrentItemAnalysisViewCode,
                ItemFilter,LocationFilter,DateFilter,BudgetFilter,
                Dim1Filter,Dim2Filter,Dim3Filter,
                LineDimOption,LineDimCodeBuf,
                ColDimOption,ColDimCodeBuf);
            Amount := ActualAmt - BudgetAmt;
          END;
        ShowActualBudget::"Variance%":
          BEGIN
            Amount :=
              CalcBudgetAmount(
                ValueType,SetColumnFilter,
                CurrentAnalysisArea,ItemStatisticsBuffer,CurrentItemAnalysisViewCode,
                ItemFilter,LocationFilter,DateFilter,BudgetFilter,
                Dim1Filter,Dim2Filter,Dim3Filter,
                LineDimOption,LineDimCodeBuf,
                ColDimOption,ColDimCodeBuf);
            IF Amount <> 0 THEN BEGIN
              ActualAmt :=
                CalcActualAmount(
                  ValueType,SetColumnFilter,
                  CurrentAnalysisArea,ItemStatisticsBuffer,CurrentItemAnalysisViewCode,
                  ItemFilter,LocationFilter,DateFilter,BudgetFilter,
                  Dim1Filter,Dim2Filter,Dim3Filter,
                  LineDimOption,LineDimCodeBuf,
                  ColDimOption,ColDimCodeBuf);
              Amount := ROUND(100 * (ActualAmt - Amount) / Amount);
            END;
          END;
        ShowActualBudget::"Index%":
          BEGIN
            Amount :=
              CalcBudgetAmount(
                ValueType,SetColumnFilter,
                CurrentAnalysisArea,ItemStatisticsBuffer,CurrentItemAnalysisViewCode,
                ItemFilter,LocationFilter,DateFilter,BudgetFilter,
                Dim1Filter,Dim2Filter,Dim3Filter,
                LineDimOption,LineDimCodeBuf,
                ColDimOption,ColDimCodeBuf);
              ActualAmt :=
                CalcActualAmount(
                  ValueType,SetColumnFilter,
                  CurrentAnalysisArea,ItemStatisticsBuffer,CurrentItemAnalysisViewCode,
                  ItemFilter,LocationFilter,DateFilter,BudgetFilter,
                  Dim1Filter,Dim2Filter,Dim3Filter,
                  LineDimOption,LineDimCodeBuf,
                  ColDimOption,ColDimCodeBuf);
            IF Amount <> 0 THEN
              Amount := ROUND(100 * ActualAmt / Amount);
          END;
      END;

      EXIT(Amount);
    END;

    LOCAL PROCEDURE CalcActualAmount@6(ValueType@1015 : 'Sales Amount,Cost Amount,Quantity';SetColumnFilter@1014 : Boolean;CurrentAnalysisArea@1013 : 'Sales,Purchases,Inventory';VAR ItemStatisticsBuffer@1012 : Record 5821;CurrentItemAnalysisViewCode@1011 : Code[10];ItemFilter@1010 : Code[250];LocationFilter@1009 : Code[250];DateFilter@1008 : Text[30];BudgetFilter@1007 : Code[250];Dim1Filter@1006 : Code[250];Dim2Filter@1005 : Code[250];Dim3Filter@1004 : Code[250];LineDimOption@1003 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';LineDimCodeBuf@1002 : Record 367;ColDimOption@1001 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';ColDimCodeBuf@1000 : Record 367) : Decimal;
    VAR
      Amount@1016 : Decimal;
    BEGIN
      SetCommonFilters(
        CurrentAnalysisArea,
        ItemStatisticsBuffer,
        CurrentItemAnalysisViewCode,
        ItemFilter,
        LocationFilter,
        DateFilter,
        Dim1Filter,
        Dim2Filter,
        Dim3Filter,
        BudgetFilter);

      SetDimFilters(ItemStatisticsBuffer,LineDimOption,LineDimCodeBuf);
      IF SetColumnFilter THEN
        SetDimFilters(ItemStatisticsBuffer,ColDimOption,ColDimCodeBuf);

      CASE ValueType OF
        ValueType::"Sales Amount":
          BEGIN
            ItemStatisticsBuffer.CALCFIELDS("Analysis - Sales Amt. (Actual)","Analysis - Sales Amt. (Exp)");
            Amount :=
              ItemStatisticsBuffer."Analysis - Sales Amt. (Actual)" +
              ItemStatisticsBuffer."Analysis - Sales Amt. (Exp)";
          END;
        ValueType::"Cost Amount":
          BEGIN
            ItemStatisticsBuffer.CALCFIELDS(
              "Analysis - Cost Amt. (Actual)",
              "Analysis - Cost Amt. (Exp)",
              "Analysis CostAmt.(Non-Invtbl.)");
            Amount :=
              ItemStatisticsBuffer."Analysis - Cost Amt. (Actual)" +
              ItemStatisticsBuffer."Analysis - Cost Amt. (Exp)" +
              ItemStatisticsBuffer."Analysis CostAmt.(Non-Invtbl.)";
          END;
        ValueType::Quantity:
          BEGIN
            ItemStatisticsBuffer.CALCFIELDS("Analysis - Quantity");
            Amount := ItemStatisticsBuffer."Analysis - Quantity";
          END;
      END;

      EXIT(Amount);
    END;

    LOCAL PROCEDURE CalcBudgetAmount@10(ValueType@1015 : 'Sales Amount,Cost Amount,Quantity';SetColumnFilter@1014 : Boolean;CurrentAnalysisArea@1013 : 'Sales,Purchases,Inventory';VAR ItemStatisticsBuffer@1012 : Record 5821;CurrentItemAnalysisViewCode@1011 : Code[10];ItemFilter@1010 : Code[250];LocationFilter@1009 : Code[250];DateFilter@1008 : Text[30];BudgetFilter@1007 : Code[250];Dim1Filter@1006 : Code[250];Dim2Filter@1005 : Code[250];Dim3Filter@1004 : Code[250];LineDimOption@1003 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';LineDimCodeBuf@1002 : Record 367;ColDimOption@1001 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';ColDimCodeBuf@1000 : Record 367) : Decimal;
    VAR
      Amount@1016 : Decimal;
    BEGIN
      SetCommonFilters(
        CurrentAnalysisArea,
        ItemStatisticsBuffer,
        CurrentItemAnalysisViewCode,
        ItemFilter,
        LocationFilter,
        DateFilter,
        Dim1Filter,
        Dim2Filter,
        Dim3Filter,
        BudgetFilter);

      SetDimFilters(ItemStatisticsBuffer,LineDimOption,LineDimCodeBuf);
      IF SetColumnFilter THEN
        SetDimFilters(ItemStatisticsBuffer,ColDimOption,ColDimCodeBuf);

      CASE ValueType OF
        ValueType::"Sales Amount":
          BEGIN
            ItemStatisticsBuffer.CALCFIELDS("Analysis - Budgeted Sales Amt.");
            Amount := ItemStatisticsBuffer."Analysis - Budgeted Sales Amt.";
          END;
        ValueType::"Cost Amount":
          BEGIN
            ItemStatisticsBuffer.CALCFIELDS("Analysis - Budgeted Cost Amt.");
            Amount := ItemStatisticsBuffer."Analysis - Budgeted Cost Amt.";
          END;
        ValueType::Quantity:
          BEGIN
            ItemStatisticsBuffer.CALCFIELDS("Analysis - Budgeted Quantity");
            Amount := ItemStatisticsBuffer."Analysis - Budgeted Quantity";
          END;
      END;

      EXIT(Amount);
    END;

    BEGIN
    END.
  }
}
