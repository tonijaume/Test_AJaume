OBJECT Codeunit 7709 Miniform Put Activity List
{
  OBJECT-PROPERTIES
  {
    Date=15/09/04;
    Time=12:00:00;
    Version List=NAVW14.00;
  }
  PROPERTIES
  {
    TableNo=7700;
    OnRun=VAR
            MiniformMgmt@1000 : Codeunit 7702;
          BEGIN
            MiniformMgmt.Initialize(MiniformHeader,Rec,DOMxmlin,ReturnedNode,RootNode,XMLDOMMgmt,ADCSCommunication,LoginID,CurrentCode,
            StackCode,LocationFilter);

            IF Code <> CurrentCode THEN
              PrepareData
            ELSE
              ProcessSelection;

            CLEAR(DOMxmlin);
          END;

  }
  CODE
  {
    VAR
      MiniformHeader@1023 : Record 7700;
      MiniformHeader2@1027 : Record 7700;
      DOMxmlin@1006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";
      RootNode@1007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      Text000@1008 : TextConst 'ENU=Function not Found;ESP=Funci¢n no encontrada';
      Text006@1010 : TextConst 'ENU=No input Node found;ESP=No se ha encontrado el Nodo de entrada';
      ReturnedNode@1002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
      XMLDOMMgmt@1003 : Codeunit 99008516;
      ADCSCommunication@1020 : Codeunit 7701;
      ADCSNASStartup@1026 : Codeunit 7700;
      TextValue@1001 : Text[250];
      LoginID@1000 : Text[250];
      LocationFilter@1019 : Text[250];
      CurrentCode@1004 : Text[250];
      PreviousCode@1005 : Text[250];
      StackCode@1013 : Text[250];
      Remark@1012 : Text[250];
      ActiveInputField@1011 : Integer;
      Text009@1015 : TextConst 'ENU=No Documents found;ESP=No hay documentos';
      RecRef@1014 : RecordRef;

    LOCAL PROCEDURE ProcessSelection@8();
    VAR
      TableNo@1000 : Integer;
      RecordId@1001 : RecordID;
      WhseActivityHeader@1002 : Record 5766;
      FuncGroup@1003 : Record 7702;
    BEGIN
      IF XMLDOMMgmt.FindNode(RootNode,'Header/Input',ReturnedNode) THEN
        TextValue := ReturnedNode.text
      ELSE
        ERROR(Text006);

      EVALUATE(TableNo,ADCSCommunication.GetNodeAttribute(ReturnedNode,'TableNo'));
      RecRef.OPEN(TableNo);
      EVALUATE(RecordId,ADCSCommunication.GetNodeAttribute(ReturnedNode,'RecordID'));
      IF RecRef.GET(RecordId) THEN BEGIN
        RecRef.SETTABLE(WhseActivityHeader);
        WhseActivityHeader.SETCURRENTKEY(Type,"No.");
        WhseActivityHeader.SETRANGE(Type,WhseActivityHeader.Type);
        WhseActivityHeader.SETRANGE("Assigned User ID",LoginID);
        WhseActivityHeader.SETFILTER("Location Code",LocationFilter);
        RecRef.GETTABLE(WhseActivityHeader);
        ADCSCommunication.SetRecRef(RecRef);
      END ELSE BEGIN
        ADCSCommunication.RunPreviousMiniform(DOMxmlin);
        EXIT;
      END;

      FuncGroup.KeyDef := ADCSCommunication.GetFunctionKey(MiniformHeader.Code,TextValue);
      ActiveInputField := 1;

      CASE FuncGroup.KeyDef OF
        FuncGroup.KeyDef::Esc :
          ADCSCommunication.RunPreviousMiniform(DOMxmlin);

        FuncGroup.KeyDef::First :
          ADCSCommunication.FindRecRef(RecRef,0,MiniformHeader."No. of Records in List");

        FuncGroup.KeyDef::LnDn :
          IF NOT ADCSCommunication.FindRecRef(RecRef,1,MiniformHeader."No. of Records in List") THEN
            Remark := Text009;

        FuncGroup.KeyDef::LnUp :
          ADCSCommunication.FindRecRef(RecRef,2,MiniformHeader."No. of Records in List");

        FuncGroup.KeyDef::Last :
          ADCSCommunication.FindRecRef(RecRef,3,MiniformHeader."No. of Records in List");

        FuncGroup.KeyDef::PgDn :
          IF NOT ADCSCommunication.FindRecRef(RecRef,4,MiniformHeader."No. of Records in List") THEN
            Remark := Text009;

        FuncGroup.KeyDef::PgUp :
          ADCSCommunication.FindRecRef(RecRef,5,MiniformHeader."No. of Records in List");

        FuncGroup.KeyDef::Input : BEGIN
          ADCSCommunication.IncreaseStack(DOMxmlin,MiniformHeader.Code);
          ADCSCommunication.GetNextMiniForm(MiniformHeader,MiniformHeader2);
          MiniformHeader2.SaveXMLin(DOMxmlin);
          CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
        END;
      ELSE
        ERROR(Text000);
      END;

      IF NOT (FuncGroup.KeyDef IN [FuncGroup.KeyDef::Esc,FuncGroup.KeyDef::Input]) THEN
        SendForm(ActiveInputField);
    END;

    LOCAL PROCEDURE PrepareData@4();
    VAR
      WhseActivityHeader@1001 : Record 5766;
    BEGIN
      WITH WhseActivityHeader DO BEGIN
        RESET;
        SETRANGE(Type,WhseActivityHeader.Type::"Put-away");
        IF LoginID <> '' THEN BEGIN
          SETRANGE("Assigned User ID",LoginID);
          SETFILTER("Location Code",LocationFilter);
        END;
        IF NOT FIND('-') THEN BEGIN
          IF ADCSCommunication.GetNodeAttribute(ReturnedNode,'RunReturn') = '0' THEN BEGIN
            ADCSNASStartup.SendError(Text009);
            EXIT;
          END;
          ADCSCommunication.DecreaseStack(DOMxmlin,PreviousCode);
          MiniformHeader2.GET(PreviousCode);
          MiniformHeader2.SaveXMLin(DOMxmlin);
          CODEUNIT.RUN(MiniformHeader2."Handling Codeunit",MiniformHeader2);
        END ELSE BEGIN
          RecRef.GETTABLE(WhseActivityHeader);
          ADCSCommunication.SetRecRef(RecRef);
          ActiveInputField := 1;
          SendForm(ActiveInputField);
        END;
      END;
    END;

    LOCAL PROCEDURE SendForm@1(InputField@1000 : Integer);
    BEGIN
      ADCSCommunication.EncodeMiniForm(MiniformHeader,StackCode,DOMxmlin,InputField,Remark,LoginID);
      ADCSCommunication.GetReturnXML(DOMxmlin);
      ADCSNASStartup.SendXMLReply(DOMxmlin);
    END;

    EVENT DOMxmlin@1006::ondataavailable@198();
    BEGIN
    END;

    EVENT DOMxmlin@1006::onreadystatechange@-609();
    BEGIN
    END;

    BEGIN
    END.
  }
}
