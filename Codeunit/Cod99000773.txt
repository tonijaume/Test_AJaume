OBJECT Codeunit 99000773 Calculate Prod. Order
{
  OBJECT-PROPERTIES
  {
    Date=25/05/05;
    Time=12:00:00;
    Version List=NAVW14.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 27=r,
                TableData 5406=rimd,
                TableData 5407=rimd,
                TableData 99000765=r,
                TableData 99000772=rimd,
                TableData 99000776=rimd,
                TableData 5405=rimd,
                TableData 5416=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=BOM phantom structure for %1 is higher than 50 levels.;ESP=Estructura ficticia de L.M. para %1 sobrepasa 50 niveles.';
      Text001@1001 : TextConst 'ENU=%1 %2 %3 can not be calculated, if at least one %4 has been posted.;ESP=%1 %2 %3 no se puede calcular, si al menos uno %4 se ha registrado.';
      Text002@1002 : TextConst 'ENU=Operation No. %1 cannot follow another operation in the routing of this Prod. Order Line;ESP=Operaci¢n n§ %1 no puede seguir otra operaci¢n en la ruta de esta l¡nea de orden de prod.';
      Text003@1003 : TextConst 'ENU=Operation No. %1 cannot precede another operation in the routing of this Prod. Order Line;ESP=N§ operaci¢n %1 no puede preceder otra operaci¢n en la l¡nea de la ruta de esta O.P.';
      Item@1004 : Record 27;
      Location@1006 : Record 14;
      SKU@1005 : Record 5700;
      ProdOrder@1007 : Record 5405;
      ProdOrderLine@1008 : Record 5406;
      ProdOrderComp@1009 : Record 5407;
      ProdOrderRtngLine2@1010 : Record 5409;
      ProdOrderBOMCompComment@1011 : Record 5416;
      BomComponent@1012 : ARRAY [99] OF Record 99000772;
      ProdBOMCompComment@1013 : Record 99000776;
      UOMMgt@1014 : Codeunit 5402;
      CostCalcMgt@1015 : Codeunit 5836;
      VersionMgt@1016 : Codeunit 99000756;
      ProdOrderRouteMgt@1017 : Codeunit 99000772;
      GetPlanningParameters@1018 : Codeunit 99000855;
      LeadTimeMgt@1019 : Codeunit 5404;
      NextProdOrderCompLineNo@1020 : Integer;
      Blocked@1021 : Boolean;
      ProdOrderModify@1022 : Boolean;

    LOCAL PROCEDURE TransferRouting@5();
    VAR
      RtngHeader@1000 : Record 99000763;
      RtngLine@1001 : Record 99000764;
      ProdOrderRtngLine@1002 : Record 5409;
      WorkCenter@1003 : Record 99000754;
      MachineCenter@1004 : Record 99000758;
    BEGIN
      IF ProdOrderLine."Routing No." = '' THEN
        EXIT;

      RtngHeader.GET(ProdOrderLine."Routing No.");

      ProdOrderRtngLine.SETRANGE(Status,ProdOrderLine.Status);
      ProdOrderRtngLine.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
      ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
      ProdOrderRtngLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
      IF ProdOrderRtngLine.FIND('-') THEN
        EXIT;

      RtngLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
      RtngLine.SETRANGE("Version Code",ProdOrderLine."Routing Version Code");
      IF RtngLine.FIND('-') THEN
        REPEAT
          RtngLine.TESTFIELD(Recalculate,FALSE);
          ProdOrderRtngLine.INIT;
          ProdOrderRtngLine.Status := ProdOrderLine.Status;
          ProdOrderRtngLine."Prod. Order No." := ProdOrderLine."Prod. Order No.";
          ProdOrderRtngLine."Routing Reference No." := ProdOrderLine."Routing Reference No.";
          ProdOrderRtngLine."Routing No." := ProdOrderLine."Routing No.";
          ProdOrderRtngLine."Operation No." := RtngLine."Operation No.";
          ProdOrderRtngLine."Next Operation No." := RtngLine."Next Operation No.";
          ProdOrderRtngLine."Previous Operation No." := RtngLine."Previous Operation No.";
          ProdOrderRtngLine.Type := RtngLine.Type;
          ProdOrderRtngLine."No." := RtngLine."No.";
          ProdOrderRtngLine."Work Center No." := RtngLine."Work Center No.";
          ProdOrderRtngLine."Work Center Group Code" := RtngLine."Work Center Group Code";
          ProdOrderRtngLine.Description := RtngLine.Description;
          ProdOrderRtngLine."Setup Time" := RtngLine."Setup Time";
          ProdOrderRtngLine."Run Time" := RtngLine."Run Time";
          ProdOrderRtngLine."Wait Time" := RtngLine."Wait Time";
          ProdOrderRtngLine."Move Time" := RtngLine."Move Time";
          ProdOrderRtngLine."Fixed Scrap Quantity" := RtngLine."Fixed Scrap Quantity";
          ProdOrderRtngLine."Lot Size" :=  RtngLine."Lot Size";
          ProdOrderRtngLine."Scrap Factor %" := RtngLine."Scrap Factor %";
          ProdOrderRtngLine."Minimum Process Time" := RtngLine."Minimum Process Time";
          ProdOrderRtngLine."Maximum Process Time" := RtngLine."Maximum Process Time";
          ProdOrderRtngLine."Concurrent Capacities" := RtngLine."Concurrent Capacities";
          IF ProdOrderRtngLine."Concurrent Capacities" = 0 THEN
            ProdOrderRtngLine."Concurrent Capacities" := 1;
          ProdOrderRtngLine."Send-Ahead Quantity" := RtngLine."Send-Ahead Quantity";
          ProdOrderRtngLine."Setup Time Unit of Meas. Code" := RtngLine."Setup Time Unit of Meas. Code";
          ProdOrderRtngLine."Run Time Unit of Meas. Code" := RtngLine."Run Time Unit of Meas. Code";
          ProdOrderRtngLine."Wait Time Unit of Meas. Code" := RtngLine."Wait Time Unit of Meas. Code";
          ProdOrderRtngLine."Move Time Unit of Meas. Code" := RtngLine."Move Time Unit of Meas. Code";
          ProdOrderRtngLine."Routing Link Code" := RtngLine."Routing Link Code";
          ProdOrderRtngLine."Standard Task Code" := RtngLine."Standard Task Code";
          ProdOrderRtngLine."Sequence No. (Forward)" := RtngLine."Sequence No. (Forward)";
          ProdOrderRtngLine."Sequence No. (Backward)" := RtngLine."Sequence No. (Backward)";
          ProdOrderRtngLine."Fixed Scrap Qty. (Accum.)" := RtngLine."Fixed Scrap Qty. (Accum.)";
          ProdOrderRtngLine."Scrap Factor % (Accumulated)" := RtngLine."Scrap Factor % (Accumulated)";
          ProdOrderRtngLine."Unit Cost per" := RtngLine."Unit Cost per";
          CostCalcMgt.RoutingCostPerUnit(
            ProdOrderRtngLine.Type,
            ProdOrderRtngLine."No.",
            ProdOrderRtngLine."Direct Unit Cost",
            ProdOrderRtngLine."Indirect Cost %",
            ProdOrderRtngLine."Overhead Rate",
            ProdOrderRtngLine."Unit Cost per",
            ProdOrderRtngLine."Unit Cost Calculation");
          CASE ProdOrderRtngLine.Type OF
            ProdOrderRtngLine.Type::"Work Center":
              BEGIN
                WorkCenter.GET(RtngLine."Work Center No.");
                ProdOrderRtngLine."Flushing Method" := WorkCenter."Flushing Method";
              END;
            ProdOrderRtngLine.Type::"Machine Center":
              BEGIN
                MachineCenter.GET(ProdOrderRtngLine."No.");
                ProdOrderRtngLine."Flushing Method" := MachineCenter."Flushing Method";
              END;
          END;
          ProdOrderRtngLine.VALIDATE("Direct Unit Cost");
          ProdOrderRtngLine."Starting Time" := ProdOrderLine."Starting Time";
          ProdOrderRtngLine."Starting Date" := ProdOrderLine."Starting Date";
          ProdOrderRtngLine."Ending Time" := ProdOrderLine."Ending Time";
          ProdOrderRtngLine."Ending Date" := ProdOrderLine."Ending Date";
          ProdOrderRtngLine.UpdateDatetime;
          ProdOrderRtngLine.INSERT;
        UNTIL RtngLine.NEXT = 0;

      TransferTaskInfo(ProdOrderLine);
    END;

    PROCEDURE TransferTaskInfo@3(VAR FromProdOrderLine@1000 : Record 5406);
    VAR
      RtngLineTool@1001 : Record 99000802;
      RtngLinePersonnel@1002 : Record 99000803;
      RtngLineQltyMeas@1003 : Record 99000805;
      RtngComment@1004 : Record 99000775;
      ProdOrderRoutTool@1005 : Record 5411;
      ProdOrderRtngPersonnel@1006 : Record 5412;
      ProdOrderRtngQltyMeas@1007 : Record 5413;
      ProdOrderRtngComment@1008 : Record 5415;
    BEGIN
      RtngLineTool.SETRANGE("Routing No.",FromProdOrderLine."Routing No.");
      RtngLineTool.SETRANGE("Version Code",FromProdOrderLine."Routing Version Code");
      IF RtngLineTool.FIND('-') THEN
        REPEAT
          ProdOrderRoutTool.TRANSFERFIELDS(RtngLineTool);
          ProdOrderRoutTool.Status := FromProdOrderLine.Status;
          ProdOrderRoutTool."Prod. Order No." := FromProdOrderLine."Prod. Order No.";
          ProdOrderRoutTool."Routing Reference No." := FromProdOrderLine."Routing Reference No.";
          ProdOrderRoutTool.INSERT;
        UNTIL RtngLineTool.NEXT = 0;

      RtngLinePersonnel.SETRANGE("Routing No.",FromProdOrderLine."Routing No.");
      RtngLinePersonnel.SETRANGE("Version Code",FromProdOrderLine."Routing Version Code");
      IF RtngLinePersonnel.FIND('-') THEN
        REPEAT
          ProdOrderRtngPersonnel.TRANSFERFIELDS(RtngLinePersonnel);
          ProdOrderRtngPersonnel.Status := FromProdOrderLine.Status;
          ProdOrderRtngPersonnel."Prod. Order No." := FromProdOrderLine."Prod. Order No.";
          ProdOrderRtngPersonnel."Routing Reference No." := FromProdOrderLine."Routing Reference No.";
          ProdOrderRtngPersonnel.INSERT;
        UNTIL RtngLinePersonnel.NEXT = 0;

      RtngLineQltyMeas.SETRANGE("Routing No.",FromProdOrderLine."Routing No.");
      RtngLineQltyMeas.SETRANGE("Version Code",FromProdOrderLine."Routing Version Code");
      IF RtngLineQltyMeas.FIND('-') THEN
        REPEAT
          ProdOrderRtngQltyMeas.TRANSFERFIELDS(RtngLineQltyMeas);
          ProdOrderRtngQltyMeas.Status := FromProdOrderLine.Status;
          ProdOrderRtngQltyMeas."Prod. Order No." := FromProdOrderLine."Prod. Order No.";
          ProdOrderRtngQltyMeas."Routing Reference No." := FromProdOrderLine."Routing Reference No.";
          ProdOrderRtngQltyMeas.INSERT;
        UNTIL RtngLineQltyMeas.NEXT = 0;

      RtngComment.SETRANGE("Routing No.",FromProdOrderLine."Routing No.");
      RtngComment.SETRANGE("Version Code",FromProdOrderLine."Routing Version Code");
      IF RtngComment.FIND('-') THEN
        REPEAT
          ProdOrderRtngComment.TRANSFERFIELDS(RtngComment);
          ProdOrderRtngComment.Status := FromProdOrderLine.Status;
          ProdOrderRtngComment."Prod. Order No." := FromProdOrderLine."Prod. Order No.";
          ProdOrderRtngComment."Routing Reference No." := FromProdOrderLine."Routing Reference No.";
          ProdOrderRtngComment.INSERT;
        UNTIL RtngComment.NEXT = 0;
    END;

    LOCAL PROCEDURE TransferBOM@4(ProdBOMNo@1000 : Code[20];Level@1001 : Integer;Quantity@1002 : Decimal);
    VAR
      BOMHeader@1003 : Record 99000771;
      ComponentSKU@1004 : Record 5700;
      Item2@1007 : Record 27;
      ReqQty@1006 : Decimal;
    BEGIN
      IF ProdBOMNo = '' THEN
        EXIT;

      ProdOrderComp.LOCKTABLE;

      IF Level > 50 THEN
        ERROR(
          Text000,
          ProdBOMNo);

      BOMHeader.GET(ProdBOMNo);

      BomComponent[Level].SETRANGE("Production BOM No.",ProdBOMNo);

      IF Level > 1 THEN
        BomComponent[Level].SETRANGE("Version Code",VersionMgt.GetBOMVersion(ProdBOMNo,ProdOrderLine."Starting Date",TRUE))
      ELSE
        BomComponent[Level].SETRANGE("Version Code",ProdOrderLine."Production BOM Version Code");

      BomComponent[Level].SETFILTER("Starting Date",'%1|..%2',0D,ProdOrderLine."Starting Date");
      BomComponent[Level].SETFILTER("Ending Date", '%1|%2..',0D,ProdOrderLine."Starting Date");
      IF BomComponent[Level].FIND('-') THEN
        REPEAT
          IF (BomComponent[Level]."Routing Link Code" <> '') THEN BEGIN
            ProdOrderRtngLine2.SETRANGE(Status,ProdOrderLine.Status);
            ProdOrderRtngLine2.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
            ProdOrderRtngLine2.SETRANGE("Routing Link Code",BomComponent[Level]."Routing Link Code");
            ProdOrderRtngLine2.FIND('-');
            ReqQty :=
              Quantity *
              BomComponent[Level].Quantity *
              (1 + BomComponent[Level]."Scrap %" / 100) *
              (1 + ProdOrderRtngLine2."Scrap Factor % (Accumulated)") *
              (1 + ProdOrderLine."Scrap %" / 100) +
              ProdOrderRtngLine2."Fixed Scrap Qty. (Accum.)";
          END ELSE
            ReqQty :=
              Quantity * BomComponent[Level].Quantity *
              (1 + BomComponent[Level]."Scrap %" / 100) *
              (1 + ProdOrderLine."Scrap %" / 100);
        CASE BomComponent[Level].Type OF
          BomComponent[Level].Type::Item:
            BEGIN
              IF ReqQty <> 0 THEN BEGIN
                ProdOrderComp.SETCURRENTKEY(Status,"Prod. Order No.","Prod. Order Line No.","Item No.");
                ProdOrderComp.SETRANGE(Status,ProdOrderLine.Status);
                ProdOrderComp.SETRANGE("Prod. Order No.", ProdOrderLine."Prod. Order No.");
                ProdOrderComp.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
                ProdOrderComp.SETRANGE("Item No.",BomComponent[Level]."No.");
                ProdOrderComp.SETRANGE("Variant Code",BomComponent[Level]."Variant Code");
                ProdOrderComp.SETRANGE("Routing Link Code",BomComponent[Level]."Routing Link Code");
                ProdOrderComp.SETRANGE(Position,BomComponent[Level].Position);
                ProdOrderComp.SETRANGE("Position 2",BomComponent[Level]."Position 2");
                ProdOrderComp.SETRANGE("Position 3",BomComponent[Level]."Position 3");
                ProdOrderComp.SETRANGE(Length,BomComponent[Level].Length);
                ProdOrderComp.SETRANGE(Width,BomComponent[Level].Width);
                ProdOrderComp.SETRANGE(Weight,BomComponent[Level].Weight);
                ProdOrderComp.SETRANGE(Depth,BomComponent[Level].Depth);
                ProdOrderComp.SETRANGE("Unit of Measure Code",BomComponent[Level]."Unit of Measure Code");
                IF NOT ProdOrderComp.FIND('-') THEN BEGIN
                  ProdOrderComp.RESET;
                  ProdOrderComp.SETRANGE(Status,ProdOrderLine.Status);
                  ProdOrderComp.SETRANGE("Prod. Order No.", ProdOrderLine."Prod. Order No.");
                  ProdOrderComp.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
                  IF ProdOrderComp.FIND('+') THEN
                    NextProdOrderCompLineNo := ProdOrderComp."Line No." + 10000
                  ELSE
                    NextProdOrderCompLineNo := 10000;
                  ProdOrderComp.INIT;
                  ProdOrderComp.BlockDynamicTracking(Blocked);
                  ProdOrderComp.Status := ProdOrderLine.Status;
                  ProdOrderComp."Prod. Order No." := ProdOrderLine."Prod. Order No.";
                  ProdOrderComp."Prod. Order Line No." := ProdOrderLine."Line No.";
                  ProdOrderComp."Line No." := NextProdOrderCompLineNo;
                  ProdOrderComp.VALIDATE("Item No.",BomComponent[Level]."No.");
                  ProdOrderComp."Variant Code" := BomComponent[Level]."Variant Code";
                  ProdOrderComp."Location Code" := SKU."Components at Location";
                  ProdOrderComp."Bin Code" := GetDefaultBin;
                  ProdOrderComp.Description := BomComponent[Level].Description;
                  ProdOrderComp.VALIDATE("Unit of Measure Code",BomComponent[Level]."Unit of Measure Code");
                  ProdOrderComp."Quantity per" :=
                    Quantity * BomComponent[Level]."Quantity per";
                  ProdOrderComp.Length := BomComponent[Level].Length;
                  ProdOrderComp.Width := BomComponent[Level].Width;
                  ProdOrderComp.Weight := BomComponent[Level].Weight;
                  ProdOrderComp.Depth := BomComponent[Level].Depth;
                  ProdOrderComp.Position := BomComponent[Level].Position;
                  ProdOrderComp."Position 2" := BomComponent[Level]."Position 2";
                  ProdOrderComp."Position 3" := BomComponent[Level]."Position 3";
                  ProdOrderComp."Production Lead Time" := BomComponent[Level]."Production Lead Time";
                  ProdOrderComp.VALIDATE("Routing Link Code",BomComponent[Level]."Routing Link Code");
                  ProdOrderComp.VALIDATE("Scrap %",BomComponent[Level]."Scrap %");
                  ProdOrderComp.VALIDATE("Calculation Formula",BomComponent[Level]."Calculation Formula");

                  GetPlanningParameters.AtSKU(
                    ComponentSKU,ProdOrderComp."Item No.",
                    ProdOrderComp."Variant Code",
                    ProdOrderComp."Location Code");

                  ProdOrderComp."Flushing Method" := ComponentSKU."Flushing Method";
                  IF (SKU."Manufacturing Policy" = SKU."Manufacturing Policy"::"Make-to-Order") AND
                    (ComponentSKU."Manufacturing Policy" = ComponentSKU."Manufacturing Policy"::"Make-to-Order") AND
                    (ComponentSKU."Replenishment System" = ComponentSKU."Replenishment System"::"Prod. Order")
                  THEN BEGIN
                    ProdOrderComp."Planning Level Code" := ProdOrderLine."Planning Level Code" + 1;
                    Item2.GET(ProdOrderComp."Item No.");
                    ProdOrderComp."Item Low-Level Code" := Item2."Low-Level Code";
                  END;
                  ProdOrderComp.GetDefaultBin;
                  ProdOrderComp.INSERT(TRUE);
                END ELSE BEGIN
                  ProdOrderComp.SETCURRENTKEY(Status,"Prod. Order No."); // Reset key
                  ProdOrderComp.BlockDynamicTracking(Blocked);
                  ProdOrderComp.VALIDATE(
                    "Quantity per",
                    ProdOrderComp."Quantity per" +
                    Quantity * BomComponent[Level]."Quantity per");
                  ProdOrderComp.VALIDATE("Routing Link Code",BomComponent[Level]."Routing Link Code");
                  ProdOrderComp.MODIFY;
                END;
                ProdOrderComp.AutoReserve;

                ProdBOMCompComment.SETRANGE("Production BOM No.",BomComponent[Level]."Production BOM No.");
                ProdBOMCompComment.SETRANGE("BOM Line No.",BomComponent[Level]."Line No.");
                ProdBOMCompComment.SETRANGE("Version Code",BomComponent[Level]."Version Code");
                IF ProdBOMCompComment.FIND('-') THEN
                  REPEAT
                    ProdOrderBOMCompComment.TRANSFERFIELDS(ProdBOMCompComment);
                    ProdOrderBOMCompComment.Status := ProdOrderComp.Status;
                    ProdOrderBOMCompComment."Prod. Order No." := ProdOrderComp."Prod. Order No.";
                    ProdOrderBOMCompComment."Prod. Order Line No." := ProdOrderComp."Prod. Order Line No.";
                    ProdOrderBOMCompComment."Prod. Order BOM Line No." := ProdOrderComp."Line No.";
                    IF NOT ProdOrderBOMCompComment.INSERT THEN
                      ProdOrderBOMCompComment.MODIFY;
                  UNTIL ProdBOMCompComment.NEXT = 0;
              END;
            END;
          BomComponent[Level].Type::"Production BOM":
            BEGIN
              TransferBOM(
                BomComponent[Level]."No.",
                Level + 1,
                ReqQty);
              BomComponent[Level].SETRANGE("Production BOM No.",ProdBOMNo);
              IF Level > 1 THEN
                BomComponent[Level].SETRANGE("Version Code",VersionMgt.GetBOMVersion(ProdBOMNo,ProdOrderLine."Starting Date",TRUE))
              ELSE
                BomComponent[Level].SETRANGE("Version Code",ProdOrderLine."Production BOM Version Code");
              BomComponent[Level].SETFILTER("Starting Date",'%1|..%2',0D,ProdOrderLine."Starting Date");
              BomComponent[Level].SETFILTER("Ending Date", '%1|%2..',0D,ProdOrderLine."Starting Date");
            END;
        END;
      UNTIL BomComponent[Level].NEXT = 0;
    END;

    PROCEDURE CalculateComponents@7();
    VAR
      ProdOrderComp@1000 : Record 5407;
    BEGIN
      ProdOrderComp.SETRANGE(Status,ProdOrderLine.Status);
      ProdOrderComp.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
      ProdOrderComp.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
      IF ProdOrderComp.FIND('-') THEN
        REPEAT
          ProdOrderComp.BlockDynamicTracking(Blocked);
          ProdOrderComp.VALIDATE("Routing Link Code");
          ProdOrderComp.MODIFY;
          ProdOrderComp.AutoReserve;
        UNTIL ProdOrderComp.NEXT = 0;
    END;

    PROCEDURE CalculateRoutingFromActual@11(ProdOrderRtngLine@1000 : Record 5409;Direction@1001 : 'Forward,Backward';CalcStartEndDate@1002 : Boolean);
    VAR
      CalcProdOrderRtngLine@1003 : Codeunit 99000774;
    BEGIN
      IF ProdOrderRouteMgt.NeedsCalculation(
        ProdOrderRtngLine.Status,
        ProdOrderRtngLine."Prod. Order No.",
        ProdOrderRtngLine."Routing Reference No.",
        ProdOrderRtngLine."Routing No.")
      THEN BEGIN
        ProdOrderLine.SETRANGE(Status,ProdOrderRtngLine.Status);
        ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderRtngLine."Prod. Order No.");
        ProdOrderLine.SETRANGE("Routing Reference No.",ProdOrderRtngLine."Routing Reference No.");
        ProdOrderLine.SETRANGE("Routing No.",ProdOrderRtngLine."Routing No.");
        ProdOrderLine.FIND('-');
        ProdOrderRouteMgt.Calculate(ProdOrderLine);
        ProdOrderRtngLine.GET(
          ProdOrderRtngLine.Status,
          ProdOrderRtngLine."Prod. Order No.",
          ProdOrderRtngLine."Routing Reference No.",
          ProdOrderRtngLine."Routing No.",
          ProdOrderRtngLine."Operation No.");
      END;
      IF Direction = Direction::Forward THEN
        ProdOrderRtngLine.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.",
          "Routing No.","Sequence No. (Forward)")
      ELSE
        ProdOrderRtngLine.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.",
          "Routing No.","Sequence No. (Backward)");

      ProdOrderRtngLine.SETRANGE(Status,ProdOrderRtngLine.Status);
      ProdOrderRtngLine.SETRANGE("Prod. Order No.",ProdOrderRtngLine."Prod. Order No.");
      ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderRtngLine."Routing Reference No.");
      ProdOrderRtngLine.SETRANGE("Routing No.",ProdOrderRtngLine."Routing No.");
      ProdOrderRtngLine.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine."Routing Status"::Finished);
      REPEAT
        IF CalcStartEndDate AND NOT ProdOrderRtngLine."Schedule Manually" THEN BEGIN
          IF ((Direction = Direction::Forward) AND (ProdOrderRtngLine."Previous Operation No." <> '')) OR
            ((Direction = Direction::Backward) AND (ProdOrderRtngLine."Next Operation No." <> ''))
          THEN BEGIN
            ProdOrderRtngLine."Starting Time" := 0T;
            ProdOrderRtngLine."Starting Date" := 0D;
            ProdOrderRtngLine."Ending Time" := 235959T;
            ProdOrderRtngLine."Ending Date" := 31129999D;
          END;
        END;
        CalcProdOrderRtngLine.CalculateRoutingLine(
          ProdOrderRtngLine,
          Direction,CalcStartEndDate);
        CalcStartEndDate := TRUE;
      UNTIL ProdOrderRtngLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalculateRouting@6(Direction@1000 : 'Forward,Backward');
    VAR
      ProdOrderRtngLine@1001 : Record 5409;
      LeadTime@1002 : Code[20];
    BEGIN
      IF ProdOrderRouteMgt.NeedsCalculation(
        ProdOrderLine.Status,
        ProdOrderLine."Prod. Order No.",
        ProdOrderLine."Routing Reference No.",
        ProdOrderLine."Routing No.")
      THEN
        ProdOrderRouteMgt.Calculate(ProdOrderLine);

      IF Direction = Direction::Forward THEN
        ProdOrderRtngLine.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.","Routing No.",
          "Sequence No. (Forward)")
      ELSE
        ProdOrderRtngLine.SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.","Routing No.",
          "Sequence No. (Backward)");

      ProdOrderRtngLine.SETRANGE(Status,ProdOrderLine.Status);
      ProdOrderRtngLine.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
      ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
      ProdOrderRtngLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
      ProdOrderRtngLine.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine."Routing Status"::Finished);
      IF NOT ProdOrderRtngLine.FIND('-') THEN BEGIN
        LeadTime :=
          LeadTimeMgt.ManufacturingLeadTime(
            ProdOrderLine."Item No.",
            ProdOrderLine."Location Code",
            ProdOrderLine."Variant Code");
        IF Direction = Direction::Forward THEN
          // Ending Date calculated forward from Starting Date
          ProdOrderLine."Ending Date" :=
            LeadTimeMgt.PlannedEndingDate2(
              ProdOrderLine."Item No.",
              ProdOrderLine."Location Code",
              ProdOrderLine."Variant Code",
              '',
              LeadTime,
              2,
              ProdOrderLine."Starting Date")
        ELSE
          // Starting Date calculated backward from Ending Date
          ProdOrderLine."Starting Date" :=
            LeadTimeMgt.PlannedStartingDate(
              ProdOrderLine."Item No.",
              ProdOrderLine."Location Code",
              ProdOrderLine."Variant Code",
              '',
              LeadTime,
              2,
              ProdOrderLine."Ending Date");

        CalculateProdOrderDates(ProdOrderLine);
        EXIT;
      END;

      IF Direction = Direction::Forward THEN BEGIN
        ProdOrderRtngLine."Starting Date" := ProdOrderLine."Starting Date";
        ProdOrderRtngLine."Starting Time" := ProdOrderLine."Starting Time";
      END ELSE BEGIN
        ProdOrderRtngLine."Ending Date" := ProdOrderLine."Ending Date";
        ProdOrderRtngLine."Ending Time" := ProdOrderLine."Ending Time";
      END;
      ProdOrderRtngLine.UpdateDatetime();
      CalculateRoutingFromActual(ProdOrderRtngLine,Direction,FALSE);

      CalculateProdOrderDates(ProdOrderLine);
    END;

    PROCEDURE CalculateProdOrderDates@12(VAR ProdOrderLine@1000 : Record 5406);
    VAR
      ProdOrderLine2@1001 : Record 5406;
      ProdOrderRtngLine@1002 : Record 5409;
    BEGIN
      ProdOrder.GET(ProdOrderLine.Status,ProdOrderLine."Prod. Order No.");

      ProdOrderRtngLine.SETRANGE(Status,ProdOrderLine.Status);
      ProdOrderRtngLine.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
      ProdOrderRtngLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
      IF ProdOrder."Source Type" <> ProdOrder."Source Type"::Family THEN
        ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderLine."Line No.")
      ELSE
        ProdOrderRtngLine.SETRANGE("Routing Reference No.",0);
      ProdOrderRtngLine.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine."Routing Status"::Finished);
      ProdOrderRtngLine.SETFILTER("Next Operation No.",'%1','');

      IF ProdOrderRtngLine.FIND('-') THEN BEGIN
        ProdOrderLine."Ending Date" := ProdOrderRtngLine."Ending Date";
        ProdOrderLine."Ending Time" := ProdOrderRtngLine."Ending Time";
      END;

      ProdOrderRtngLine.SETRANGE("Next Operation No.");
      ProdOrderRtngLine.SETFILTER("Previous Operation No.",'%1','');

      IF ProdOrderRtngLine.FIND('-') THEN BEGIN
        ProdOrderLine."Starting Date" := ProdOrderRtngLine."Starting Date";
        ProdOrderLine."Starting Time" := ProdOrderRtngLine."Starting Time";
      END;

      IF ProdOrderLine."Planning Level Code" = 0 THEN
        ProdOrderLine."Due Date" :=
          LeadTimeMgt.PlannedDueDate(
            ProdOrderLine."Item No.",
            ProdOrderLine."Location Code",
            ProdOrderLine."Variant Code",
            ProdOrderLine."Ending Date",
            '',
            2)
      ELSE
        ProdOrderLine."Due Date" := ProdOrderLine."Ending Date";

      ProdOrderLine.UpdateDatetime;

      ProdOrderLine.MODIFY;

      ProdOrder."Due Date" := 0D;
      ProdOrder."Ending Date" := 0D;
      ProdOrder."Ending Time" := 0T;
      ProdOrder."Starting Date" := 31129999D;
      ProdOrder."Starting Time" := 235959T;

      ProdOrderLine2.SETRANGE(Status,ProdOrderLine.Status);
      ProdOrderLine2.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
      IF ProdOrderLine2.FIND('-') THEN
        REPEAT
          IF (ProdOrderLine2."Ending Date" > ProdOrder."Ending Date") OR
             ((ProdOrderLine2."Ending Date" = ProdOrder."Ending Date") AND
              (ProdOrderLine2."Ending Time" > ProdOrder."Ending Time"))
          THEN BEGIN
            ProdOrder."Ending Date" := ProdOrderLine2."Ending Date";
            ProdOrder."Ending Time" := ProdOrderLine2."Ending Time";
          END;
          IF (ProdOrderLine2."Starting Date" < ProdOrder."Starting Date") OR
             ((ProdOrderLine2."Starting Date" = ProdOrder."Starting Date") AND
              (ProdOrderLine2."Starting Time" > ProdOrder."Starting Time"))
          THEN BEGIN
            ProdOrder."Starting Date" := ProdOrderLine2."Starting Date";
            ProdOrder."Starting Time" := ProdOrderLine2."Starting Time";
          END;

          IF ProdOrderLine2."Due Date" > ProdOrder."Due Date" THEN
            ProdOrder."Due Date" := ProdOrderLine2."Due Date";
         UNTIL ProdOrderLine2.NEXT = 0;

      ProdOrder.UpdateDatetime;

      IF NOT ProdOrderModify THEN
        ProdOrder.MODIFY;
    END;

    PROCEDURE Calculate@1(ProdOrderLine2@1000 : Record 5406;Direction@1001 : 'Forward,Backward';CalcRouting@1002 : Boolean;CalcComponents@1003 : Boolean;DeleteRelations@1004 : Boolean);
    VAR
      CapLedgEntry@1005 : Record 5832;
      ItemLedgEntry@1009 : Record 32;
      ProdOrderRtngLine3@1006 : Record 5409;
      ProdOrderRtngLine4@1007 : Record 5409;
      Routing@1008 : Record 99000763;
    BEGIN
      ProdOrderLine := ProdOrderLine2;

      IF ProdOrderLine.Status = ProdOrderLine.Status::Released THEN BEGIN
        ItemLedgEntry.SETCURRENTKEY("Prod. Order No.");
        ItemLedgEntry.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
        IF ItemLedgEntry.FIND('-') THEN
          ERROR(
            Text001,
            ProdOrderLine.Status,ProdOrderLine.TABLECAPTION,ProdOrderLine."Prod. Order No.",
            ItemLedgEntry.TABLECAPTION);

        CapLedgEntry.SETCURRENTKEY("Prod. Order No.");
        CapLedgEntry.SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
        IF CapLedgEntry.FIND('-') THEN
          ERROR(
            Text001,
            ProdOrderLine.Status,ProdOrderLine.TABLECAPTION,ProdOrderLine."Prod. Order No.",
            CapLedgEntry.TABLECAPTION);
      END;

      ProdOrderLine.TESTFIELD(Quantity);
      IF Direction = Direction::Backward THEN
        ProdOrderLine.TESTFIELD("Ending Date")
      ELSE
        ProdOrderLine.TESTFIELD("Starting Date");

      IF DeleteRelations THEN
        ProdOrderLine.DeleteRelations;

      IF CalcRouting THEN
        TransferRouting
      ELSE BEGIN
        IF Routing.GET(ProdOrderLine2."Routing No.") OR (ProdOrderLine2."Routing No." = '') THEN
          IF Routing.Type <> Routing.Type::Parallel THEN BEGIN
            ProdOrderRtngLine3.SETRANGE(Status,ProdOrderLine2.Status);
            ProdOrderRtngLine3.SETRANGE("Prod. Order No.",ProdOrderLine2."Prod. Order No.");
            ProdOrderRtngLine3.SETRANGE("Routing Reference No.",ProdOrderLine2."Routing Reference No.");
            ProdOrderRtngLine3.SETRANGE("Routing No.",ProdOrderLine2."Routing No.");
            ProdOrderRtngLine3.SETFILTER("Routing Status",'<>%1',ProdOrderRtngLine3."Routing Status"::Finished);
            ProdOrderRtngLine4.COPYFILTERS(ProdOrderRtngLine3);
            IF ProdOrderRtngLine3.FIND('-') THEN
              REPEAT
                ProdOrderRtngLine4.SETRANGE("Operation No.",ProdOrderRtngLine3."Next Operation No.");
                IF NOT ProdOrderRtngLine4.FIND('-') AND (ProdOrderRtngLine3."Next Operation No." <> '') THEN
                  ERROR(
                    Text002,
                    ProdOrderRtngLine3."Next Operation No.");
                ProdOrderRtngLine4.SETRANGE("Operation No.",ProdOrderRtngLine3."Previous Operation No.");
                IF NOT ProdOrderRtngLine4.FIND('-') AND (ProdOrderRtngLine3."Previous Operation No." <> '') THEN
                  ERROR(
                    Text003,
                    ProdOrderRtngLine3."Previous Operation No.");
              UNTIL ProdOrderRtngLine3.NEXT = 0;
          END;
      END;

      IF CalcComponents THEN BEGIN
        IF ProdOrderLine."Production BOM No." <> '' THEN BEGIN
          Item.GET(ProdOrderLine."Item No.");
          GetPlanningParameters.AtSKU(
            SKU,
            ProdOrderLine."Item No.",
            ProdOrderLine."Variant Code",
            ProdOrderLine."Location Code");

          TransferBOM(
            ProdOrderLine."Production BOM No.",
            1,
            ProdOrderLine."Qty. per Unit of Measure" /
            UOMMgt.GetQtyPerUnitOfMeasure(
              Item,
              VersionMgt.GetBOMUnitOfMeasure(
                ProdOrderLine."Production BOM No.",
                ProdOrderLine."Production BOM Version Code")));
        END;
      END;
      Recalculate(ProdOrderLine,Direction);
    END;

    PROCEDURE Recalculate@2(VAR ProdOrderLine2@1000 : Record 5406;Direction@1001 : 'Forward,Backward');
    BEGIN
      ProdOrderLine := ProdOrderLine2;
      ProdOrderLine.BlockDynamicTracking(Blocked);

      CalculateRouting(Direction);
      CalculateComponents;
      ProdOrderLine2 := ProdOrderLine;
    END;

    PROCEDURE BlockDynamicTracking@17(SetBlock@1000 : Boolean);
    BEGIN
      Blocked := SetBlock;
    END;

    PROCEDURE SetParameter@8(NewProdOrderModify@1000 : Boolean);
    BEGIN
      ProdOrderModify := NewProdOrderModify;
    END;

    LOCAL PROCEDURE GetDefaultBin@9() BinCode : Code[20];
    VAR
      WMSMgt@1000 : Codeunit 7302;
    BEGIN
      WITH ProdOrderComp DO
        IF "Location Code" <> '' THEN BEGIN
          IF Location.Code <> "Location Code" THEN
            Location.GET("Location Code");
          IF Location."Bin Mandatory" AND (NOT Location."Directed Put-away and Pick") THEN
            WMSMgt.GetDefaultBin("Item No.","Variant Code","Location Code",BinCode);
        END;
    END;

    BEGIN
    END.
  }
}
