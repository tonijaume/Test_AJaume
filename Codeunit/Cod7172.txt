OBJECT Codeunit 7172 Sales History Copy Line Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1001 : TextConst 'ENU=The document line(s) with a G/L account where direct posting is not allowed have not been copied.;ESP=No se han copiado las l¡neas del documento con cuentas que no admiten el registro directo.';
      LinesNotCopied@1002 : Integer;
      DocNoOccurrence@1000 : Integer;
      DocVersionNo@1003 : Integer;

    LOCAL PROCEDURE CopyLinesToDoc@17(ToSalesHeader@1016 : Record 36;VAR FromSalesLine@1002 : Record 37;FromDocType@1017 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Posted Shipment,Posted Invoice,Posted Return Order,Posted Credit Memo,Archived Order');
    VAR
      ToSalesLine@1005 : Record 37;
      FromSalesHeader@1000 : Record 36;
      FromSalesShptHeader@1003 : Record 110;
      FromSalesInvHeader@1004 : Record 112;
      FromSalesCrMemoHeader@1006 : Record 114;
      FromReturnRcptHeader@1008 : Record 6660;
      FromSalesArchHeader@1010 : Record 5107;
      DocDim@1007 : Record 357;
      NextLineNo@1001 : Integer;
      ItemChargeAssgntNextLineNo@1009 : Integer;
    BEGIN
      WITH ToSalesHeader DO BEGIN
        DocDim.LOCKTABLE;
        ToSalesLine.LOCKTABLE;
        LOCKTABLE;

        FIND;
        TESTFIELD(Status,Status::Open);

        ToSalesLine.SETRANGE("Document Type",ToSalesHeader."Document Type");
        ToSalesLine.SETRANGE("Document No.",ToSalesHeader."No.");
        IF ToSalesLine.FIND('+') THEN
          NextLineNo := ToSalesLine."Line No."
        ELSE
          NextLineNo := 0;

        CASE FromDocType OF
          FromDocType::Quote,
          FromDocType::Order,
          FromDocType::Invoice,
          FromDocType::"Credit Memo",
          FromDocType::"Blanket Order",
          FromDocType::"Return Order":
            BEGIN
              FromSalesHeader.GET(FromSalesLine."Document Type",FromSalesLine."Document No.");
              ItemChargeAssgntNextLineNo := 0;
              CopyLine(ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,NextLineNo);
              IF FromSalesLine.Type = FromSalesLine.Type::"Charge (Item)" THEN
                CopyFromSalesDocAssgntToLine(ToSalesLine,FromSalesLine,ItemChargeAssgntNextLineNo);
            END;
          FromDocType::"Posted Shipment":
            BEGIN
              FromSalesShptHeader.GET(FromSalesLine."Document No.");
              FromSalesHeader.TRANSFERFIELDS(FromSalesShptHeader);
              CopyLine(ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,NextLineNo);
            END;
          FromDocType::"Posted Invoice":
            BEGIN
              FromSalesInvHeader.GET(FromSalesLine."Document No.");
              FromSalesHeader.TRANSFERFIELDS(FromSalesInvHeader);
              CopyLine(ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,NextLineNo);
            END;
          FromDocType::"Posted Return Order":
            BEGIN
              FromReturnRcptHeader.GET(FromSalesLine."Document No.");
              FromSalesHeader.TRANSFERFIELDS(FromReturnRcptHeader);
              CopyLine(ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,NextLineNo);
            END;
          FromDocType::"Posted Credit Memo":
            BEGIN
              FromSalesCrMemoHeader.GET(FromSalesLine."Document No.");
              FromSalesHeader.TRANSFERFIELDS(FromSalesCrMemoHeader);
              CopyLine(ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,NextLineNo);
            END;
          FromDocType::"Archived Order":
            BEGIN
              FromSalesArchHeader.GET(FromSalesLine."Document Type",FromSalesLine."Document No.",
                DocNoOccurrence,DocVersionNo);
              FromSalesHeader.TRANSFERFIELDS(FromSalesArchHeader);
              CopyLine(ToSalesHeader,ToSalesLine,FromSalesHeader,FromSalesLine,NextLineNo);
            END;
        END;
      END;

      IF LinesNotCopied > 0 THEN
        MESSAGE(Text000);
    END;

    LOCAL PROCEDURE CopyLine@14(ToSalesHeader@1004 : Record 36;VAR ToSalesLine@1001 : Record 37;FromSalesHeader@1005 : Record 36;FromSalesLine@1002 : Record 37;VAR NextLineNo@1003 : Integer);
    VAR
      GLAcc@1009 : Record 15;
      ToSalesLine2@1010 : Record 37;
      TransferExtendedText@1008 : Codeunit 378;
      CopyThisLine@1007 : Boolean;
    BEGIN
      CopyThisLine := TRUE;
      IF FromSalesLine."Attached to Line No." <> 0 THEN
        EXIT;
      IF NOT FromSalesLine."System-Created Entry" THEN
        ToSalesLine.INIT
      ELSE
        ToSalesLine := FromSalesLine;

      WITH ToSalesLine DO BEGIN
        NextLineNo := NextLineNo + 10000;
        "Document Type" := ToSalesHeader."Document Type";
        "Document No." := ToSalesHeader."No.";
        "Line No." := NextLineNo;
        VALIDATE("Currency Code",ToSalesHeader."Currency Code");
        IF NOT FromSalesLine."System-Created Entry" THEN BEGIN
          VALIDATE(Type,FromSalesLine.Type);
          VALIDATE(Description,FromSalesLine.Description);
          VALIDATE("Description 2",FromSalesLine."Description 2");
          IF (FromSalesLine.Type <> FromSalesLine.Type::" ") AND (FromSalesLine."No." <> '') THEN BEGIN
            IF Type = Type::"G/L Account" THEN BEGIN
              "No." := FromSalesLine."No.";
              GLAcc.GET(FromSalesLine."No.");
              CopyThisLine := GLAcc."Direct Posting";
              IF CopyThisLine THEN
                VALIDATE("No.",FromSalesLine."No.");
            END ELSE
              VALIDATE("No.",FromSalesLine."No.");
            VALIDATE("Variant Code",FromSalesLine."Variant Code");
            VALIDATE("Location Code",FromSalesLine."Location Code");
            VALIDATE("Unit of Measure",FromSalesLine."Unit of Measure");
            VALIDATE("Unit of Measure Code",FromSalesLine."Unit of Measure Code");
            VALIDATE(Quantity,0);
            IF NOT (FromSalesLine.Type IN [FromSalesLine.Type::Item,FromSalesLine.Type::Resource]) THEN BEGIN
              IF (FromSalesHeader."Currency Code" <> ToSalesHeader."Currency Code") OR
                 (FromSalesHeader."Prices Including VAT" <> ToSalesHeader."Prices Including VAT")
              THEN BEGIN
                "Unit Price" := 0;
                "Line Discount %" := 0;
              END ELSE BEGIN
                VALIDATE("Unit Price",FromSalesLine."Unit Price");
                VALIDATE("Line Discount %",FromSalesLine."Line Discount %");
              END;
            END;
            VALIDATE("Work Type Code",FromSalesLine."Work Type Code");
            IF ("Document Type" = "Document Type"::Order) AND
               (FromSalesLine."Purchasing Code" <> '')
            THEN
              VALIDATE("Purchasing Code",FromSalesLine."Purchasing Code");
          END;
          IF (FromSalesLine.Type = FromSalesLine.Type::" ") AND (FromSalesLine."No." <> '') THEN
            VALIDATE("No.",FromSalesLine."No.");
        END ELSE BEGIN
          Quantity := 0;
          "Quantity (Base)" := 0;
          "Quantity Shipped" := 0;
          "Qty. Shipped (Base)" := 0;
          "Return Qty. Received" := 0;
          "Return Qty. Received (Base)" := 0;
          "Quantity Invoiced" := 0;
          "Qty. Invoiced (Base)" := 0;
          "Reserved Quantity" := 0;
          "Reserved Qty. (Base)" := 0;
          "Qty. to Ship" := 0;
          "Qty. to Ship (Base)" := 0;
          "Return Qty. to Receive" := 0;
          "Return Qty. to Receive (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
          "Qty. Shipped Not Invoiced" := 0;
          "Qty. Shipped Not Invd. (Base)" := 0;
          "Return Qty. Rcd. Not Invd." := 0;
          "Ret. Qty. Rcd. Not Invd.(Base)" := 0;
          "Shipped Not Invoiced" := 0;
          "Shipped Not Invoiced (LCY)" := 0;
          "Return Rcd. Not Invd." := 0;
          "Return Rcd. Not Invd. (LCY)" := 0;

          InitOutstanding;
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
            InitQtyToReceive
          ELSE
            InitQtyToShip;
          "VAT Difference" := FromSalesLine."VAT Difference";
          "Shipment Date" := ToSalesHeader."Shipment Date";
          "Appl.-from Item Entry" := 0;
          "Appl.-to Item Entry" := 0;

          "Purchase Order No." := '';
          "Purch. Order Line No." := 0;
          "Special Order Purchase No." := '';
          "Special Order Purch. Line No." := 0;
          IF "Document Type" <> "Document Type"::Order THEN BEGIN
            "Drop Shipment" := FALSE;
            "Special Order" := FALSE;
          END;

          UpdateWithWarehouseShip;
        END;

        IF TransferExtendedText.SalesCheckIfAnyExtText(ToSalesLine,FALSE) THEN BEGIN
          TransferExtendedText.InsertSalesExtText(ToSalesLine);
          ToSalesLine2.SETRANGE("Document Type",ToSalesLine."Document Type");
          ToSalesLine2.SETRANGE("Document No.",ToSalesLine."Document No.");
          ToSalesLine2.FIND('+');
          NextLineNo := ToSalesLine2."Line No.";
        END;

        IF CopyThisLine THEN
          INSERT
        ELSE
          LinesNotCopied := LinesNotCopied + 1;
      END;
    END;

    LOCAL PROCEDURE CopyFromSalesDocAssgntToLine@5800(VAR ToSalesLine@1005 : Record 37;FromSalesLine@1000 : Record 37;VAR ItemChargeAssgntNextLineNo@1001 : Integer);
    VAR
      FromItemChargeAssgntSales@1002 : Record 5809;
      ToItemChargeAssgntSales@1003 : Record 5809;
      AssignItemChargeSales@1004 : Codeunit 5807;
    BEGIN
      WITH FromSalesLine DO BEGIN
        IF NOT FromItemChargeAssgntSales.RECORDLEVELLOCKING THEN
          FromItemChargeAssgntSales.LOCKTABLE(TRUE,TRUE);
        FromItemChargeAssgntSales.RESET;
        FromItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
        FromItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
        FromItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
        FromItemChargeAssgntSales.SETFILTER(
          "Applies-to Doc. Type",'<>%1',"Document Type");
        IF FromItemChargeAssgntSales.FIND('-') THEN
          REPEAT
            ToItemChargeAssgntSales.COPY(FromItemChargeAssgntSales);
            ToItemChargeAssgntSales."Document Type" := ToSalesLine."Document Type";
            ToItemChargeAssgntSales."Document No." := ToSalesLine."Document No.";
            ToItemChargeAssgntSales."Document Line No." := ToSalesLine."Line No.";
            AssignItemChargeSales.InsertItemChargeAssgnt(
              ToItemChargeAssgntSales,ToItemChargeAssgntSales."Applies-to Doc. Type",
              ToItemChargeAssgntSales."Applies-to Doc. No.",ToItemChargeAssgntSales."Applies-to Doc. Line No.",
              ToItemChargeAssgntSales."Item No.",ToItemChargeAssgntSales.Description,ItemChargeAssgntNextLineNo);
          UNTIL FromItemChargeAssgntSales.NEXT = 0;
      END;
    END;

    PROCEDURE CopySalesLinesToDoc@1(ToSalesHeader@1002 : Record 36;VAR FromSalesLine@1001 : Record 37;FromDocType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Posted Shipment,Posted Invoice,Posted Return Order,Posted Credit Memo');
    BEGIN
      WITH FromSalesLine DO BEGIN
        IF FIND('-') THEN
          REPEAT
            CopyLinesToDoc(ToSalesHeader,FromSalesLine,FromDocType);
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CopySalesShptLineToDoc@2(ToSalesHeader@1002 : Record 36;VAR FromSalesShptLine@1001 : Record 111;FromDocType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Posted Shipment,Posted Invoice,Posted Return Order,Posted Credit Memo');
    VAR
      FromSalesLine@1003 : Record 37;
    BEGIN
      WITH FromSalesShptLine DO BEGIN
        IF FIND('-') THEN
          REPEAT
            FromSalesLine.TRANSFERFIELDS(FromSalesShptLine);
            CopyLinesToDoc(ToSalesHeader,FromSalesLine,FromDocType);
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CopySalesInvLineToDoc@3(ToSalesHeader@1002 : Record 36;VAR FromSalesInvLine@1001 : Record 113;FromDocType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Posted Shipment,Posted Invoice,Posted Return Order,Posted Credit Memo');
    VAR
      FromSalesLine@1003 : Record 37;
    BEGIN
      WITH FromSalesInvLine DO BEGIN
        IF FIND('-') THEN
          REPEAT
            FromSalesLine.TRANSFERFIELDS(FromSalesInvLine);
            CopyLinesToDoc(ToSalesHeader,FromSalesLine,FromDocType);
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CopySalesCrMemoLineToDoc@4(ToSalesHeader@1002 : Record 36;VAR FromSalesCrMemoLine@1001 : Record 115;FromDocType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Posted Shipment,Posted Invoice,Posted Return Order,Posted Credit Memo');
    VAR
      FromSalesLine@1003 : Record 37;
    BEGIN
      WITH FromSalesCrMemoLine DO BEGIN
        IF FIND('-') THEN
          REPEAT
            FromSalesLine.TRANSFERFIELDS(FromSalesCrMemoLine);
            CopyLinesToDoc(ToSalesHeader,FromSalesLine,FromDocType);
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CopyReturnRcptLineToDoc@5(ToSalesHeader@1002 : Record 36;VAR FromReturnRcptLine@1001 : Record 6661;FromDocType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Posted Shipment,Posted Invoice,Posted Return Order,Posted Credit Memo');
    VAR
      FromSalesLine@1003 : Record 37;
    BEGIN
      WITH FromReturnRcptLine DO BEGIN
        IF FIND('-') THEN
          REPEAT
            FromSalesLine.TRANSFERFIELDS(FromReturnRcptLine);
            CopyLinesToDoc(ToSalesHeader,FromSalesLine,FromDocType);
          UNTIL FromReturnRcptLine.NEXT = 0;
      END;
    END;

    PROCEDURE CopySalesArchLineToDoc@6(ToSalesHeader@1002 : Record 36;VAR FromSalesArchLine@1001 : Record 5108;FromDocType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Posted Shipment,Posted Invoice,Posted Return Order,Posted Credit Memo,Archived Order');
    VAR
      FromSalesLine@1004 : Record 37;
    BEGIN
      WITH FromSalesArchLine DO BEGIN
        IF FIND('-') THEN
          REPEAT
            FromSalesLine.TRANSFERFIELDS(FromSalesArchLine);
            DocNoOccurrence := FromSalesArchLine."Doc. No. Occurrence";
            DocVersionNo := FromSalesArchLine."Version No.";
            CopyLinesToDoc(ToSalesHeader,FromSalesLine,FromDocType);
          UNTIL NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}
