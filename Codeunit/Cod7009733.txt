OBJECT Codeunit 7009733 Funciones cuadrante
{
  OBJECT-PROPERTIES
  {
    Date=28/07/15;
    Time=13:26:10;
    Modified=Yes;
    Version List=AIC2009,OC-12003,OC-14042;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1103355034 : TextConst 'ENU=In a service cannot mix reservations with air and land transfer;ESP=En una agrupacion no se pueden mezclar reserva con transfer aereo y terrestre';
      Text001@1103355035 : TextConst 'ENU=Would you like to undo the service;ESP=Desea deshacer la agrupacion';
      Text002@1103355036 : TextConst 'ENU=Quadrant is being generated'' \;ESP=Se esta generando el cuadrante ...\';
      Text003@1103355037 : TextConst 'ENU=Location         #1########\;ESP=Zona         #1########\';
      Text004@1103355038 : TextConst 'ENU=TourOperator #2########;ESP=TourOperador #2########';
      Text005@1103355039 : TextConst 'ENU=Touroperator %1 does not exist;ESP=No existe el Touroperador %1.';
      Text006@1103355040 : TextConst 'ENU=Would you like to undo the quadrant of;ESP=Desea deshacer el cuadrante de';
      Text007@1103355041 : TextConst 'ENU=" day";ESP=" dia"';
      Text008@1103355042 : TextConst 'ENU=" for the location";ESP=" para la zona"';
      Text009@1103355043 : TextConst 'ENU=This quadrant cannot be undone due to generated services.;ESP=Este cuadrante no se puede deshacer porque tiene agrupacion generadas.';
      UltAgr@1103355017 : Integer;
      array_to@1103355026 : ARRAY [50] OF Code[10];
      array_zona@1103355027 : ARRAY [50] OF Code[10];
      ind_to@1103355028 : Integer;
      ind_zona@1103355029 : Integer;
      encontrado@1103355030 : Boolean;
      Text010@1103355044 : TextConst 'ENU="Would you like to generate the services for Private Transfer reservations for\Date=%1\TTOO=%2\Location=%3?";ESP="¨Desea realmente crear las agrupaciones de Transfer Privado paralas reservas \Fecha=%1\TTOO=%2\Zona=%3?"';
      Text011@1103355045 : TextConst 'ENU=%1 service have been created;ESP=Se han creado %1 agrupaciones';
      Text012@1103355046 : TextConst 'ENU=Reservation %1 is marked as Private Transfer;ESP=La reserva %1 est  marcada como Transfer Privado';
      Text013@1103355047 : TextConst 'ENU=You are mixing both private and regular service reservations (%1 %2-%3 %4);ESP=Se est n mezclando reservas distintas de Transfer Privado (%1 %2-%3 %4)';
      Text014@1103355048 : TextConst 'ENU=Would you like to create service for Private Transfer reservations for All the filtered zones?\%1;ESP=¨Desea realmente crear las agrupaciones de Transfer Privado para Todos los acumulados filtrados?\%1';
      Text015@1103355049 : TextConst 'ENU=Creating services for Private Transfer\#1##############\@2@@@@@@@@@;ESP=Agrupando Transfer Privado\#1##############\@2@@@@@@@@@';
      Text016@1000000003 : TextConst 'ENU=You cannot put together bookings with different sale service type.;ESP=No se pueden mezclar reservas con distinto servicio venta.';

    PROCEDURE Agrupar@1(prAcuZon@1103355000 : Record 7009793;FiltZona@1103355001 : Text[109];FiltTO@1103355002 : Text[175]);
    VAR
      lrAgr@1000000002 : Record 7009796;
      lrPlan@1103355003 : Record 7009754;
      lrRsv@1000000001 : Record 7009744;
      lrRsv2@1103355004 : Record 7009744;
      lrRsv3@1000000000 : Record 7009744;
      lw_origen_destino@1000000004 : Code[10];
      lw_zona_agrupacion@1000000003 : Code[10];
      lwGrabados@1000000005 : Integer;
    BEGIN
      // Agrupar

      lw_origen_destino := '';
      lw_zona_agrupacion := '';
      lwGrabados := 0;

      // Graba Agrupaci¢n en reserva

      lrRsv.RESET;
      IF prAcuZon."Tipo Transfer" = prAcuZon."Tipo Transfer"::Entrada THEN BEGIN
        lrRsv.SETCURRENTKEY("Fecha entrada",
                            "Zona servicio entrada",
                            "Hora entrada",
                            "Compa¤ia entrada",
                            "Vuelo entrada",
                            "IATA origen entrada",
                            "Hotel entrada",
                            TourOperador,
                            Entrada);
        lrRsv.SETRANGE ("Fecha entrada"        , prAcuZon.Fecha);
        lrRsv.SETFILTER("Zona servicio entrada", FiltZona);
        lrRsv.SETRANGE ("Agrupacion entrada"   , 0);
        lrRsv.SETRANGE (Entrada                , 1);
      END
      ELSE BEGIN
        lrRsv.SETCURRENTKEY("Fecha salida",
                            "Zona servicio salida",
                            "Hora salida",
                            TourOperador,
                            "Compa¤ia salida",
                            "Vuelo salida",
                            "IATA destino salida",
                            Salida);
        lrRsv.SETRANGE ("Fecha salida"        , prAcuZon.Fecha);
        lrRsv.SETFILTER("Zona servicio salida", FiltZona);
        lrRsv.SETRANGE ("Agrupacion salida"   , 0);
        lrRsv.SETRANGE (Salida                , 1);
      END;
      lrRsv.SETFILTER(TourOperador    , FiltTO);
      lrRsv.SETRANGE("Marca Cuadrante", USERID);
      lrRsv.SETRANGE("No Show"        , FALSE); //+$006
      lrRsv.LOCKTABLE;
      IF lrRsv.FINDSET THEN
      BEGIN
        // Busca N§ Agrupaci¢n
        UltAgr := GetNumAgrupacion;

        lrAgr.INIT;
        lrAgr."N§ Agrupacion"           := UltAgr + 1;
        IF prAcuZon."Tipo Transfer" = prAcuZon."Tipo Transfer"::Entrada THEN
          lrAgr."Medio del transfer" := lrRsv."Tipo transfer entrada"
        ELSE
          lrAgr."Medio del transfer" := lrRsv."Tipo transfer salida";
        lrAgr.Fecha                     := prAcuZon.Fecha;
        lrAgr."Tipo transfer"           := prAcuZon."Tipo Transfer";
        //+$011 <
        IF prAcuZon."Tipo Transfer" = prAcuZon."Tipo Transfer"::Entrada THEN //+$013
        BEGIN
          lrAgr."Transfer Privado"    := lrRsv."Transfer Privado Llegada";
          lrAgr."Tipo Servicio venta" := lrRsv."Servicio transfer entrada";   // +$012
        END ELSE
        BEGIN
          lrAgr."Transfer Privado"    := lrRsv."Transfer Privado Salida";
          lrAgr."Tipo Servicio venta" := lrRsv."Servicio transfer salida";    // +$012
        END;
        //+$011 >
        lrAgr.INSERT(TRUE);

        lrRsv3 := lrRsv;
        REPEAT
          ComparaTransferPrivado(lrRsv3, lrRsv, lrAgr); //+$009

          lrRsv2 := lrRsv;
          IF prAcuZon."Tipo Transfer" = prAcuZon."Tipo Transfer"::Entrada THEN
          BEGIN
            IF lrPlan.GET(lrRsv2."Fecha entrada", lrRsv2."Compa¤ia entrada", lrRsv2."Vuelo entrada",
                          lrRsv2."IATA origen entrada", lrRsv2."IATA destino entrada") THEN
              lrRsv2."Hora entrada" := lrPlan."Hora Entrada";
            lrRsv2.VALIDATE("Agrupacion entrada", lrAgr."N§ Agrupacion");
            lrRsv2."Marca Cuadrante" := '';
            lrRsv2.MODIFY;

            lw_origen_destino  := lrRsv2."IATA destino entrada";
            lw_zona_agrupacion := lrRsv2."Zona servicio entrada";
            lwGrabados := lwGrabados + 1;
          END
          ELSE
          BEGIN
            IF lrPlan.GET(lrRsv2."Fecha salida", lrRsv2."Compa¤ia salida", lrRsv2."Vuelo salida",
                          lrRsv2."IATA origen salida", lrRsv2."IATA destino salida") THEN
              lrRsv2."Hora salida" := lrPlan."Hora Salida";
            lrRsv2.VALIDATE("Agrupacion salida", lrAgr."N§ Agrupacion");
            lrRsv2."Marca Cuadrante" := '';
            lrRsv2.MODIFY;

            lw_origen_destino  := lrRsv2."IATA origen salida";
            lw_zona_agrupacion := lrRsv2."Zona servicio salida";
            lwGrabados := lwGrabados + 1;
          END;
        UNTIL lrRsv.NEXT = 0;
      END;

      // Graba agrupaci¢n

      IF lwGrabados > 0 THEN
      BEGIN
        IF lrAgr.GET(lrAgr."N§ Agrupacion") THEN
        BEGIN
          lrAgr.Zona                      := lw_zona_agrupacion;
          lrAgr."Origen/Destino transfer" := lw_origen_destino;
          lrAgr.Estado                    := lrAgr.Estado::Pendiente;
          lrAgr."Ver cuadrante"           := TRUE;

          _GetDatosVehiculo(lrAgr);

          //+$010 <
          IF lrRsv."Tipo vehiculo solicitado" <> '' THEN
            lrAgr."Tipo vehiculo" := lrRsv."Tipo vehiculo solicitado";
          //+$010 >

          _GetHoraPresentacion(lrAgr);

          lrAgr.MODIFY;

          // Creamos los ficheros asociados de hoteles, vuelos y hoteles x Vuelo.
          //-$004Crea_Ficheros_Agr(rAgr);

          // Campo Vuelos
          //-$004CampoVuelosAgrupacion(rAgr."N§ Agrupacion", rAgr.Vuelos, rAgr."N§ vuelos");

          // Campo Touroperadores
          //-$004CampoTouroperadoresAgr(rAgr."N§ Agrupacion", rAgr.TourOperadores);

          // Campo Zonas
          //-$004CampoZonasAgrupacion(rAgr."N§ Agrupacion", rAgr.Zonas);

          //-$004rAgr.AseguraHorarioSalidas; //$002
          //-$004rAgr.LOCKTABLE;
          //-$004rAgr.MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE _GetDatosVehiculo@1000000004(VAR prAgr@1000000000 : Record 7009796);
    VAR
      lrVeh@1000000001 : Record 7009809;
    BEGIN
      // _DatosVehiculo

      // Pone Transportista y vehiculo seg£n zona y pax
      IF prAgr."Tipo transfer" = prAgr."Tipo transfer"::Entrada THEN
      BEGIN
        prAgr.CALCFIELDS("Personas entrada");

        lrVeh.RESET;
        lrVeh.SETRANGE ("Zona servicio", prAgr.Zona);
        lrVeh.SETFILTER("Pax desde"    , '<=%1', prAgr."Personas entrada");
        lrVeh.SETFILTER("Pax hasta"    , '>=%1', prAgr."Personas entrada");
        IF lrVeh.FINDFIRST THEN
        BEGIN
          prAgr.VALIDATE(Transportista, lrVeh.Transportista);
          prAgr."Tipo vehiculo"      := lrVeh."Tipo veh¡culo";
          prAgr."Capacidad Vehiculo" := lrVeh."Capacidad x defecto"; //+$005
          prAgr."N§ vehiculos"       := 1;
        END;
      END
      ELSE
      BEGIN
        prAgr.CALCFIELDS("Personas salida");

        lrVeh.RESET;
        lrVeh.SETRANGE("Zona servicio", prAgr.Zona);
        lrVeh.SETFILTER("Pax desde"    , '<=%1', prAgr."Personas salida");
        lrVeh.SETFILTER("Pax hasta"    , '>=%1', prAgr."Personas salida");
        IF lrVeh.FINDFIRST THEN
        BEGIN
          prAgr.VALIDATE(Transportista, lrVeh.Transportista);
          prAgr."Tipo vehiculo"      := lrVeh."Tipo veh¡culo";
          prAgr."Capacidad Vehiculo" := lrVeh."Capacidad x defecto"; //+$005
          prAgr."N§ vehiculos"       := 1;
        END;
      END;
    END;

    LOCAL PROCEDURE _GetHoraPresentacion@1000000005(VAR prAgr@1000000000 : Record 7009796);
    VAR
      lrHotAgru@1000000002 : Record 7009798;
      lrVueAgru@1000000001 : Record 7009797;
    BEGIN
      // _GetHoraPresentacion

      // Calculamos la hora de presentaci¢n
      IF prAgr."Tipo transfer" = prAgr."Tipo transfer"::Entrada THEN
      BEGIN
        lrVueAgru.RESET;
        lrVueAgru.SETRANGE("N§ Agrupacion", prAgr."N§ Agrupacion");
        IF lrVueAgru.FINDFIRST THEN
          prAgr."Hora presentacion" := lrVueAgru.Hora;
      END
      ELSE
      BEGIN
        lrHotAgru.RESET;
        lrHotAgru.SETRANGE("N§ Agrupacion", prAgr."N§ Agrupacion");
        IF lrHotAgru.FINDFIRST THEN
          prAgr."Hora presentacion" := lrHotAgru."Hora recogida";
      END;
    END;

    PROCEDURE GetNumAgrupacion@1100217001() : Integer;
    VAR
      lrAgr@1100217000 : Record 7009796;
      lwNum@1100217001 : Integer;
    BEGIN
      // GetNumAgrupacion

      lwNum := 0;

      lrAgr.RESET;
      lrAgr.LOCKTABLE;
      IF lrAgr.FINDLAST THEN
        lwNum := lrAgr."N§ Agrupacion";

      EXIT(lwNum);
    END;

    PROCEDURE Desagrupar@2(prAgr@1103355000 : Record 7009796);
    VAR
      texto_confirma@1103355001 : Text[80];
      lrRsv@1100253000 : Record 7009744;
      lrRsv2@1000000000 : Record 7009744;
    BEGIN
      // Desagrupar

      texto_confirma := Text001 + ' ' + STRSUBSTNO('%1', prAgr."N§ Agrupacion");
      IF NOT CONFIRM(texto_confirma) THEN
        EXIT;

      // Borra marca Agrupaci¢n
      IF prAgr."N§ Agrupacion" <> 0 THEN
      BEGIN
        IF prAgr."Tipo transfer" = prAgr."Tipo transfer"::Entrada THEN
        BEGIN
          lrRsv.RESET;
          lrRsv.SETCURRENTKEY("Agrupacion entrada");
          lrRsv.SETRANGE("Agrupacion entrada", prAgr."N§ Agrupacion");
          IF lrRsv.FINDSET THEN REPEAT
             lrRsv2 := lrRsv;
             lrRsv2.VALIDATE("Agrupacion entrada", 0);
             lrRsv2.MODIFY;
          UNTIL lrRsv.NEXT = 0;
        END
        ELSE BEGIN
          lrRsv.RESET;
          lrRsv.SETCURRENTKEY("Agrupacion salida");
          lrRsv.SETRANGE("Agrupacion salida", prAgr."N§ Agrupacion");
          IF lrRsv.FINDSET THEN REPEAT
            lrRsv2 := lrRsv;
            lrRsv2.VALIDATE("Agrupacion salida", 0);
            lrRsv2.MODIFY;
          UNTIL lrRsv.NEXT = 0;
        END;

        Borra_Ficheros_Agr(prAgr);

        prAgr.GET(prAgr."N§ Agrupacion"); //$001
        prAgr.DELETE(TRUE);
      END;
    END;

    PROCEDURE Crea_Ficheros_Agr@16(prAgr@1103355000 : Record 7009796);
    VAR
      lrRsv@1000000000 : Record 7009744;
    BEGIN
      // Crea_Ficheros_Agr

      lrRsv.RESET;
      IF prAgr."Tipo transfer" = prAgr."Tipo transfer"::Entrada THEN
      BEGIN
        lrRsv.SETCURRENTKEY("Agrupacion entrada");
        lrRsv.SETRANGE("Agrupacion entrada", prAgr."N§ Agrupacion");
        IF lrRsv.FINDSET THEN
        BEGIN
          REPEAT
            Crea_VuelosE_Agr(prAgr, lrRsv);
            Crea_HotelesE_Agr(prAgr, lrRsv);
            Crea_ZonasE_Agr(prAgr, lrRsv);
          UNTIL lrRsv.NEXT = 0;
        END;
      END
      ELSE
      BEGIN
        lrRsv.SETCURRENTKEY("Agrupacion salida");
        lrRsv.SETRANGE("Agrupacion salida", prAgr."N§ Agrupacion");
        IF lrRsv.FINDSET THEN
        BEGIN
          REPEAT
            Crea_VuelosS_Agr(prAgr, lrRsv);
            Crea_HotelesS_Agr(prAgr, lrRsv);
            Crea_ZonasS_Agr(prAgr, lrRsv);
          UNTIL lrRsv.NEXT = 0;
        END;
      END;

      Rellena_Orden_Hoteles(prAgr);
    END;

    PROCEDURE Crea_VuelosE_Agr@20(prAgr@1103355000 : Record 7009796;prRsv@1103355001 : Record 7009744);
    VAR
      lrAgrVue@1100217000 : Record 7009797;
      lrVue@1000000000 : Record 7009754;
    BEGIN
      // Crea_VuelosE_Agr

      lrVue.RESET;
      lrVue.SETRANGE(Fecha   , prRsv."Fecha entrada");
      lrVue.SETRANGE(Compa¤ia, prRsv."Compa¤ia entrada");
      lrVue.SETRANGE(Vuelo   , prRsv."Vuelo entrada");
      lrVue.SETRANGE(Origen  , prRsv."IATA origen entrada");
      IF NOT lrVue.FINDFIRST THEN
        lrVue."Hora Entrada" := 000000T;

      lrAgrVue.INIT;
      lrAgrVue."N§ Agrupacion"       := prAgr."N§ Agrupacion";
      lrAgrVue."Tipo transfer"       := prAgr."Tipo transfer";
      lrAgrVue.TourOperador          := prRsv.TourOperador;
      lrAgrVue.Fecha                 := prRsv."Fecha entrada";
      lrAgrVue.Zona                  := prRsv."Zona servicio entrada";
      lrAgrVue.Compa¤ia              := prRsv."Compa¤ia entrada";
      lrAgrVue.Vuelo                 := prRsv."Vuelo entrada";
      lrAgrVue.Terminal              := lrVue.Terminal;
      lrAgrVue.Hora                  := lrVue."Hora Entrada";
      lrAgrVue.IATA                  := prRsv."IATA origen entrada";
      lrAgrVue."Vuelo dia siguiente" := lrVue."Vuelo dia siguiente";
      IF NOT lrAgrVue.FIND THEN
        lrAgrVue.INSERT;
    END;

    PROCEDURE Crea_HotelesE_Agr@21(prAgr@1103355000 : Record 7009796;prRsv@1103355001 : Record 7009744);
    VAR
      lrAgrHot@1100217000 : Record 7009798;
      lrHot@1000000000 : Record 7009724;
      lrZon@1000000001 : Record 7009791;
      lrVue@1000000002 : Record 7009754;
    BEGIN
      // Crea_HotelesE_Agr

      lrHot.RESET;
      lrHot.SETRANGE(Hotel, prRsv."Hotel entrada");
      IF NOT lrHot.FINDFIRST THEN
        lrHot.Hotel := '';

      lrZon.RESET;
      lrZon.SETRANGE(Zona           , prRsv."Zona servicio entrada");
      lrZon.SETRANGE("Tipo contrato", lrZon."Tipo contrato"::Servicio);
      lrZon.SETRANGE("Zona fisica"  , lrHot."Zona Fisica");
      IF NOT lrZon.FINDFIRST THEN
        lrZon."Orden entrada zona" := 0;

      lrVue.RESET;
      lrVue.SETRANGE(Fecha   , prRsv."Fecha entrada");
      lrVue.SETRANGE(Compa¤ia, prRsv."Compa¤ia entrada");
      lrVue.SETRANGE(Vuelo   , prRsv."Vuelo entrada");
      lrVue.SETRANGE(Origen  , prRsv."IATA origen entrada");
      IF NOT lrVue.FINDFIRST THEN
        lrVue."Hora Entrada" := 000000T;

      lrAgrHot.INIT;
      lrAgrHot."N§ Agrupacion"  := prAgr."N§ Agrupacion";
      lrAgrHot.Fecha            := prRsv."Fecha entrada";
      lrAgrHot."Orden zona"     := lrZon."Orden entrada zona";
      lrAgrHot."Orden recogida" := lrHot."Orden Entrada";
      lrAgrHot.Hotel            := lrHot.Hotel;
      lrAgrHot.Compa¤ia         := prRsv."Compa¤ia entrada";
      lrAgrHot.Vuelo            := prRsv."Vuelo entrada";
      lrAgrHot.IATA             := prRsv."IATA origen entrada";

      lrAgrHot.Zona             := prRsv."Zona servicio entrada";
      lrAgrHot."Horas vuelo"    := lrVue."Hora Entrada";
      lrAgrHot."Tipo transfer"  := prAgr."Tipo transfer";
      lrAgrHot."Hora recogida"  := lrVue."Hora Entrada";
      IF NOT lrAgrHot.FIND THEN
        lrAgrHot.INSERT;
    END;

    PROCEDURE Crea_ZonasE_Agr@22(prAgr@1103355000 : Record 7009796;prRsv@1103355001 : Record 7009744);
    VAR
      lrAgrZona@1100217000 : Record 7009799;
      lrZonaServ@1100217001 : Record 7009791;
    BEGIN
      // Crea_ZonasE_Agr

      lrZonaServ.RESET;
      lrZonaServ.SETRANGE(Zona           , prRsv."Zona servicio entrada");
      lrZonaServ.SETRANGE("Tipo contrato", lrZonaServ."Tipo contrato"::Servicio);
      lrZonaServ.SETRANGE("Zona fisica"  , prRsv."Zona entrada");
      IF NOT lrZonaServ.FINDFIRST THEN
        CLEAR(lrZonaServ);

      lrAgrZona.INIT;
      lrAgrZona."N§ Agrupacion" := prAgr."N§ Agrupacion";
      lrAgrZona.Zona            := prRsv."Zona servicio entrada";
      lrAgrZona."Tipo transfer" := prAgr."Tipo transfer";
      lrAgrZona."Tipo zona"     := lrAgrZona."Tipo zona"::Servicio;
      lrAgrZona."Orden zona"    := lrZonaServ."Orden entrada zona";
      IF NOT lrAgrZona.FIND THEN
        lrAgrZona.INSERT;
    END;

    PROCEDURE Crea_VuelosS_Agr@26(prAgr@1103355000 : Record 7009796;prRsv@1103355001 : Record 7009744);
    VAR
      lrAgrVue@1100217000 : Record 7009797;
      lrVue@1000000000 : Record 7009754;
    BEGIN
      // Crea_VuelosS_Agr

      lrVue.RESET;
      lrVue.SETRANGE(Fecha   , prRsv."Fecha salida");
      lrVue.SETRANGE(Compa¤ia, prRsv."Compa¤ia salida");
      lrVue.SETRANGE(Vuelo   , prRsv."Vuelo salida");
      IF prRsv."IATA origen salida" <> '' THEN
        lrVue.SETRANGE(Origen, prRsv."IATA origen salida");
      lrVue.SETRANGE(Destino, prRsv."IATA destino salida");
      IF NOT lrVue.FINDFIRST THEN
        lrVue."Hora Salida" := 000000T;

      lrAgrVue.INIT;
      lrAgrVue."N§ Agrupacion"       := prAgr."N§ Agrupacion";
      lrAgrVue."Tipo transfer"       := prAgr."Tipo transfer";
      lrAgrVue.TourOperador          := prRsv."TourOperador facturacion";
      lrAgrVue.Fecha                 := prRsv."Fecha salida";
      lrAgrVue.Zona                  := prRsv."Zona servicio salida";
      lrAgrVue.Compa¤ia              := prRsv."Compa¤ia salida";
      lrAgrVue.Vuelo                 := prRsv."Vuelo salida";
      lrAgrVue.Terminal              := lrVue.Terminal;
      lrAgrVue.Hora                  := lrVue."Hora Salida";
      lrAgrVue.IATA                  := prRsv."IATA destino salida";
      lrAgrVue."Vuelo dia siguiente" := lrVue."Vuelo dia siguiente";
      IF NOT lrAgrVue.FIND THEN
        lrAgrVue.INSERT;
    END;

    PROCEDURE Crea_HotelesS_Agr@25(prAgr@1103355000 : Record 7009796;prRsv@1103355001 : Record 7009744);
    VAR
      lrAgrHot@1100217000 : Record 7009798;
      lrHot@1000000000 : Record 7009724;
      lrZon@1000000001 : Record 7009791;
      lrVue@1000000002 : Record 7009754;
    BEGIN
      // Crea_HotelesS_Agr

      lrHot.RESET;
      lrHot.SETRANGE(Hotel, prRsv."Hotel salida");
      IF NOT lrHot.FINDFIRST THEN
        lrHot.Hotel := '';

      lrZon.RESET;
      lrZon.SETRANGE(Zona           , prRsv."Zona servicio salida");
      lrZon.SETRANGE("Tipo contrato", lrZon."Tipo contrato"::Servicio);
      lrZon.SETRANGE("Zona fisica"  , lrHot."Zona Fisica");
      IF NOT lrZon.FINDFIRST THEN
        lrZon."Orden salida zona" := 0;

      lrVue.RESET;
      lrVue.SETRANGE(Fecha   , prRsv."Fecha salida");
      lrVue.SETRANGE(Compa¤ia, prRsv."Compa¤ia salida");
      lrVue.SETRANGE(Vuelo   , prRsv."Vuelo salida");
      IF prRsv."IATA origen salida" <> '' THEN
        lrVue.SETRANGE(Origen, prRsv."IATA origen salida");
      lrVue.SETRANGE(Destino, prRsv."IATA destino salida");
      IF NOT lrVue.FINDFIRST THEN
        lrVue."Hora Salida" := 000000T;

      lrAgrHot.INIT;
      lrAgrHot."N§ Agrupacion"  := prAgr."N§ Agrupacion";
      lrAgrHot.Fecha            := prRsv."Fecha salida";
      lrAgrHot.Zona             := prRsv."Zona servicio salida";
      lrAgrHot.Hotel            := lrHot.Hotel;
      lrAgrHot."Orden recogida" := lrHot."Orden Salida";
      lrAgrHot.Compa¤ia         := prRsv."Compa¤ia salida";
      lrAgrHot.Vuelo            := prRsv."Vuelo salida";
      lrAgrHot."Horas vuelo"    := lrVue."Hora Salida";
      lrAgrHot."Orden zona"     := lrZon."Orden salida zona";
      lrAgrHot.IATA             := prRsv."IATA destino salida";
      lrAgrHot."Tipo transfer"  := prAgr."Tipo transfer";
      lrAgrHot."Hora recogida"  := lrVue."Hora Salida";
      IF NOT lrAgrHot.FIND THEN
        lrAgrHot.INSERT;
    END;

    PROCEDURE Crea_ZonasS_Agr@23(prAgr@1103355000 : Record 7009796;prRsv@1103355001 : Record 7009744);
    VAR
      lrAgrZona@1100217000 : Record 7009799;
      lrZonaServ@1100217001 : Record 7009791;
    BEGIN
      // Crea_ZonasS_Agr

      lrZonaServ.RESET;
      lrZonaServ.SETRANGE(Zona           , prRsv."Zona servicio salida");
      lrZonaServ.SETRANGE("Tipo contrato", lrZonaServ."Tipo contrato"::Servicio);
      lrZonaServ.SETRANGE("Zona fisica"  , prRsv."Zona salida");
      IF NOT lrZonaServ.FINDFIRST THEN
        CLEAR(lrZonaServ);

      lrAgrZona.INIT;
      lrAgrZona."N§ Agrupacion" := prAgr."N§ Agrupacion";
      lrAgrZona.Zona            := prRsv."Zona servicio salida";
      lrAgrZona."Tipo transfer" := prAgr."Tipo transfer";
      lrAgrZona."Tipo zona"     := lrAgrZona."Tipo zona"::Servicio;
      lrAgrZona."Orden zona"    := lrZonaServ."Orden salida zona";
      IF NOT lrAgrZona.FIND THEN
        lrAgrZona.INSERT;
    END;

    PROCEDURE Rellena_Orden_Hoteles@28(prAgr@1103355000 : Record 7009796);
    VAR
      lrAgrHot@1100217000 : Record 7009798;
      lwAntHotel@1000000000 : Code[20];
    BEGIN
      // Rellena_Orden_Hoteles

      lwAntHotel := '';

      lrAgrHot.RESET;
      lrAgrHot.SETCURRENTKEY("N§ Agrupacion",
                             "Orden zona",
                             "Orden recogida");
      lrAgrHot.SETRANGE("N§ Agrupacion", prAgr."N§ Agrupacion");
      IF lrAgrHot.FINDSET THEN
      BEGIN
        REPEAT
          IF lrAgrHot.Hotel <> lwAntHotel THEN
          BEGIN
            lwAntHotel := lrAgrHot.Hotel;
            lrAgrHot."Primer Hotel" := TRUE;
          END
          ELSE
            lrAgrHot."Primer Hotel" := FALSE;
          lrAgrHot.MODIFY;
        UNTIL lrAgrHot.NEXT = 0;
      END;
    END;

    PROCEDURE Borra_Ficheros_Agr@24(prAgr@1103355000 : Record 7009796);
    VAR
      lrMar@1103355001 : Record 7009808;
      lrCI@1103355002 : Record 7009805;
      lrErr@1103355003 : Record 7009807;
      lrAgrHot@1100217000 : Record 7009798;
      lrAgrZona@1100217001 : Record 7009799;
      lrAgrVue@1100217002 : Record 7009797;
      lrAgrHor@1100217003 : Record 7009800;
    BEGIN
      // Borra_Ficheros_Agr

      lrAgrVue.RESET;
      lrAgrVue.SETRANGE("N§ Agrupacion", prAgr."N§ Agrupacion");
      IF lrAgrVue.FINDSET(TRUE) THEN
        lrAgrVue.DELETEALL;

      lrAgrHot.RESET;
      lrAgrHot.SETRANGE("N§ Agrupacion", prAgr."N§ Agrupacion");
      IF lrAgrHot.FINDSET(TRUE) THEN
        lrAgrHot.DELETEALL;

      lrAgrZona.RESET;
      lrAgrZona.SETRANGE("N§ Agrupacion", prAgr."N§ Agrupacion");
      IF lrAgrZona.FINDSET(TRUE) THEN
        lrAgrZona.DELETEALL;

      lrAgrHor.RESET;
      lrAgrHor.SETRANGE("N§ Agrupacion", prAgr."N§ Agrupacion");
      IF lrAgrHor.FINDSET(TRUE) THEN
        lrAgrHor.DELETEALL;

      lrMar.RESET;
      lrMar.SETRANGE(Agrupacion, prAgr."N§ Agrupacion");
      IF lrMar.FINDSET(TRUE) THEN
        lrMar.DELETEALL;

      lrCI.RESET;
      lrCI.SETRANGE(Agrupacion , prAgr."N§ Agrupacion");
      lrCI.SETRANGE("N§ Factura", '');
      IF lrCI.FINDSET(TRUE) THEN
        lrCI.DELETEALL;

      lrErr.RESET;
      lrErr.SETRANGE(Agrupacion, prAgr."N§ Agrupacion");
      IF lrErr.FINDSET(TRUE) THEN
        lrErr.DELETEALL;
    END;

    PROCEDURE crear_cuadrante@3();
    VAR
      rCond@1103355002 : Record 7010085;
      ventana@1103355003 : Dialog;
    BEGIN
      // crear_cuadrante

      IF rCond.GET(USERID()) THEN
        rCond.DELETE;
      rCond.INIT;
      rCond.Usuario := USERID();
      rCond.INSERT;
      COMMIT;
      rCond.FILTERGROUP(2);
      rCond.SETRANGE(Usuario, USERID());
      rCond.FILTERGROUP(0);
      FORM.RUNMODAL(7010112, rCond);
      rCond.FILTERGROUP(2);
      rCond.SETRANGE(Usuario);
      rCond.FILTERGROUP(0);
      IF NOT rCond.GET(USERID()) THEN
        EXIT;
      IF rCond.Fecha = 0D THEN
        EXIT;
      IF NOT rCond.Correcto THEN
        EXIT;
      ventana.OPEN(Text002+
                   '\'+
                   Text003+
                   Text004);
      CLEAR(array_zona);
      IF rCond."Zona Servicio" = '' THEN
        array_zonas(rCond)
      ELSE
        array_zona[1] := rCond."Zona Servicio";
      traducir_zona(rCond);
      ind_zona := 1;
      WHILE array_zona[ind_zona] <> '' DO
      BEGIN
        ventana.UPDATE(1, array_zona[ind_zona]);
        ind_to := 1;
        WHILE array_to[ind_to] <> '' DO
        BEGIN
          ventana.UPDATE(2, array_to[ind_to]);
          rCond."Zona Servicio" := array_zona[ind_zona];
          rCond.TourOperador := array_to[ind_to];
          rCond.MODIFY;
          crear_acumulados(rCond);
          ind_to := ind_to + 1;
        END;
        ind_zona :=  ind_zona + 1;
      END;
    END;

    PROCEDURE traducir_zona@5(rCond@1103355000 : Record 7010085);
    VAR
      lrRsv@1000000000 : Record 7009744;
      lrZonTra@1000000001 : Record 7009791;
    BEGIN
      // traducir_zona

      CLEAR(array_to);
      ind_zona := 1;
      IF rCond."Zona Servicio" <> '' THEN
        array_zona[1] := rCond."Zona Servicio";
      WHILE array_zona[ind_zona] <> '' DO
      BEGIN
        lrZonTra.RESET;
        lrZonTra.SETRANGE(Zona           , array_zona[ind_zona]);
        lrZonTra.SETRANGE("Tipo contrato", lrZonTra."Tipo contrato"::Servicio);
        CASE rCond."Tipo Transfer" OF
          rCond."Tipo Transfer"::Entrada:
            BEGIN
              lrRsv.RESET;
              lrRsv.SETCURRENTKEY("Fecha entrada",
                                  "Zona servicio entrada",
                                  TourOperador,
                                  Entrada);
              lrRsv.SETFILTER("Vuelo entrada", '<>%1','');
              IF lrZonTra.FINDSET THEN
              BEGIN
                REPEAT
                  lrRsv.SETRANGE("Fecha entrada", rCond.Fecha);
                  lrRsv.SETRANGE("Zona entrada" , lrZonTra."Zona fisica");
                  IF rCond.TourOperador <> '' THEN
                    lrRsv.SETRANGE(TourOperador   , rCond.TourOperador);
                  lrRsv.SETRANGE(Entrada        , 1);
                  IF lrRsv.FINDSET(TRUE) THEN
                    lrRsv.MODIFYALL("Zona servicio entrada", lrZonTra.Zona);
                  IF lrRsv.FINDSET THEN
                  BEGIN
                    REPEAT
                      buscar_touroperador(lrRsv.TourOperador);
                    UNTIL lrRsv.NEXT = 0;
                  END;
                UNTIL lrZonTra.NEXT = 0;
              END;
            END;
          rCond."Tipo Transfer"::Salida:
            BEGIN
              lrRsv.RESET;
              lrRsv.SETCURRENTKEY("Fecha salida",
                                  "Zona servicio salida",
                                  TourOperador,
                                  Salida);
              lrRsv.SETFILTER("Vuelo salida", '<>%1','');
              IF lrZonTra.FINDSET THEN BEGIN
                REPEAT
                  lrRsv.SETRANGE("Fecha salida", rCond.Fecha);
                  lrRsv.SETRANGE("Zona salida" , lrZonTra."Zona fisica");
                  IF rCond.TourOperador <> '' THEN
                    lrRsv.SETRANGE(TourOperador  , rCond.TourOperador);
                  lrRsv.SETRANGE(Salida        , 1);
                  IF lrRsv.FINDSET(TRUE) THEN
                    lrRsv.MODIFYALL("Zona servicio salida", lrZonTra.Zona);
                  IF lrRsv.FINDSET THEN BEGIN
                    REPEAT
                      buscar_touroperador(lrRsv.TourOperador);
                    UNTIL lrRsv.NEXT = 0;
                  END;
                UNTIL lrZonTra.NEXT = 0;
              END;
            END;
        END;
        ind_zona := ind_zona + 1;
      END;
    END;

    PROCEDURE crear_acumulados@4(rCond@1103355000 : Record 7010085);
    VAR
      lrTO@1103355001 : Record 7009717;
      lrRsv@1000000000 : Record 7009744;
      lrAcumZona@1000000001 : Record 7009793;
    BEGIN
      // crear_acumulados

      // Acumulados por Vuelo

      IF rCond."Tipo Transfer" = rCond."Tipo Transfer"::Entrada THEN
      BEGIN
        lrRsv.RESET;
        lrRsv.SETCURRENTKEY("Fecha entrada",
                            "Zona servicio entrada",
                            TourOperador,
                            Entrada);
        lrRsv.SETRANGE("Fecha entrada"        , rCond.Fecha);
        lrRsv.SETRANGE("Zona servicio entrada", rCond."Zona Servicio");
        IF rCond.TourOperador <> '' THEN
          lrRsv.SETRANGE(TourOperador, rCond.TourOperador);
        lrRsv.SETRANGE(Entrada, 1);
      END
      ELSE
      BEGIN
        lrRsv.RESET;
        lrRsv.SETCURRENTKEY("Fecha salida",
                            "Zona servicio salida",
                            TourOperador,
                            Salida);
        lrRsv.SETRANGE("Fecha salida"        , rCond.Fecha);
        lrRsv.SETRANGE("Zona servicio salida", rCond."Zona Servicio");
        IF rCond.TourOperador <> '' THEN
          lrRsv.SETRANGE(TourOperador, rCond.TourOperador);
        lrRsv.SETRANGE(Salida, 1);
      END;
      IF lrRsv.FINDFIRST THEN
      BEGIN
        IF NOT lrTO.GET(rCond.TourOperador) THEN
          ERROR(Text005, rCond.TourOperador);

        lrAcumZona.INIT;
        lrAcumZona.Fecha           := rCond.Fecha;
        lrAcumZona.Zona            := rCond."Zona Servicio";
        lrAcumZona.TourOperador    := rCond.TourOperador;
        lrAcumZona."Tipo Transfer" := rCond."Tipo Transfer";
        IF NOT lrAcumZona.FIND THEN
          lrAcumZona.INSERT;
      END;
      acumulados_vuelo(rCond, lrRsv, rCond.TourOperador);
    END;

    PROCEDURE acumulados_vuelo@13(rCond@1103355000 : Record 7010085;VAR prRsv@1000000001 : Record 7009744;par_touroperador@1103355001 : Code[10]);
    VAR
      lrRsv@1000000000 : Record 7009744;
      lrAcumVuelo@1000000002 : Record 7009794;
      lrVue@1000000003 : Record 7009754;
    BEGIN
      // acumulados_vuelo

      lrAcumVuelo.RESET;

      lrRsv.RESET;
      IF rCond."Tipo Transfer" = rCond."Tipo Transfer"::Entrada THEN
      BEGIN
        lrRsv.SETCURRENTKEY("Fecha entrada",
                            "Zona servicio entrada",
                            "Hora entrada",
                            "Compa¤ia entrada",
                            "Vuelo entrada",
                            "IATA origen entrada",
                            "Hotel entrada",
                            TourOperador,
                            Entrada);
      END
      ELSE
      BEGIN
        lrRsv.SETCURRENTKEY("Fecha salida",
                            "Zona servicio salida",
                            "Hora salida",
                            TourOperador,
                            "Compa¤ia salida",
                            "Vuelo salida",
                            "IATA destino salida",
                            Salida);
      END;
      lrRsv.COPYFILTERS(prRsv);
      IF lrRsv.FINDSET THEN BEGIN
        REPEAT
          IF (rCond."Tipo Transfer" = rCond."Tipo Transfer"::Entrada) AND (lrRsv."Vuelo entrada" <> '') THEN BEGIN
            lrAcumVuelo.INIT;
            lrAcumVuelo.Fecha           := rCond.Fecha;
            lrAcumVuelo.Zona            := rCond."Zona Servicio";
            lrAcumVuelo.TourOperador    := par_touroperador;
            lrAcumVuelo."Tipo Transfer" := rCond."Tipo Transfer";
            lrAcumVuelo.Compa¤ia        := lrRsv."Compa¤ia entrada";
            lrAcumVuelo.Vuelo           := lrRsv."Vuelo entrada";
            lrAcumVuelo.IATA            := lrRsv."IATA origen entrada";
            lrAcumVuelo."Mostrar en cuadrante" := TRUE;

            // Comprobamos si se trata de un vuelo con llegada el dia siguiente

            CLEAR(lrVue);
            lrVue.RESET;
            lrVue.SETRANGE(Fecha   , lrAcumVuelo.Fecha);
            lrVue.SETRANGE(Compa¤ia, lrAcumVuelo.Compa¤ia);
            lrVue.SETRANGE(Vuelo   , lrAcumVuelo.Vuelo);
            lrVue.SETRANGE(Origen  , lrAcumVuelo.IATA);
            lrVue.SETRANGE(Destino , lrRsv."IATA destino entrada");
            IF lrVue.FINDFIRST THEN
              lrAcumVuelo."Vuelo dia siguiente" := lrVue."Vuelo dia siguiente";
            lrAcumVuelo.Hora     := lrVue."Hora Entrada";
            lrAcumVuelo.Terminal := lrVue.Terminal;

            IF NOT lrAcumVuelo.FIND THEN
            BEGIN
              lrAcumVuelo.INSERT;
              acumulados_hotel_vuelo(rCond, lrAcumVuelo, lrRsv, par_touroperador);
            END;
          END
          ELSE
          BEGIN
            IF (rCond."Tipo Transfer" = rCond."Tipo Transfer"::Salida) AND (lrRsv."Vuelo salida" <> '') THEN BEGIN
              lrAcumVuelo.INIT;
              lrAcumVuelo.Fecha           := rCond.Fecha;
              lrAcumVuelo.Zona            := rCond."Zona Servicio";
              lrAcumVuelo.TourOperador    := par_touroperador;
              lrAcumVuelo."Tipo Transfer" := rCond."Tipo Transfer";
              lrAcumVuelo.Compa¤ia        := lrRsv."Compa¤ia salida";
              lrAcumVuelo.Vuelo           := lrRsv."Vuelo salida";
              lrAcumVuelo.IATA            := lrRsv."IATA destino salida";
              lrAcumVuelo."Mostrar en cuadrante" := TRUE;
              // Comprobamos si se trata de un vuelo con salida el dia siguiente

              CLEAR(lrVue);
              lrVue.RESET;
              lrVue.SETRANGE(Fecha   , lrAcumVuelo.Fecha);
              lrVue.SETRANGE(Compa¤ia, lrAcumVuelo.Compa¤ia);
              lrVue.SETRANGE(Vuelo   , lrAcumVuelo.Vuelo);
              lrVue.SETRANGE(Origen  , lrRsv."IATA origen salida");
              lrVue.SETRANGE(Destino , lrAcumVuelo.IATA);
              IF lrVue.FINDFIRST THEN
                lrAcumVuelo."Vuelo dia siguiente" := lrVue."Vuelo dia siguiente";
              lrAcumVuelo.Hora := lrVue."Hora Salida";
              lrAcumVuelo.Terminal := lrVue.Terminal;

              IF NOT lrAcumVuelo.FIND THEN
              BEGIN
                lrAcumVuelo.INSERT;
                acumulados_hotel_vuelo(rCond, lrAcumVuelo, lrRsv, par_touroperador);
              END;
            END;
          END;
        UNTIL lrRsv.NEXT = 0;
      END;
    END;

    PROCEDURE acumulados_hotel_vuelo@17(rCond@1103355000 : Record 7010085;prAcumVuelo@1103355001 : Record 7009794;prRsv@1000000000 : Record 7009744;par_touroperador@1103355002 : Code[10]);
    VAR
      rZonSer@1103355003 : Record 7009791;
      lrRecogida@1100217000 : Record 7010246;
      lrRsv@1000000001 : Record 7009744;
      lrAcumHotel@1000000002 : Record 7009795;
    BEGIN
      // acumulados_hotel_vuelo

      lrAcumHotel.RESET;

      lrRsv.RESET;
      lrRsv.COPYFILTERS(prRsv);
      IF rCond."Tipo Transfer" = rCond."Tipo Transfer"::Entrada THEN
      BEGIN
        lrRsv.SETCURRENTKEY("Fecha entrada",
                            "Zona servicio entrada",
                            TourOperador,
                            "Compa¤ia entrada",
                            "Vuelo entrada",
                            "IATA origen entrada",
                            "Orden entrada",
                            "Hotel entrada",
                            Entrada);
        //+$014 <
        lrRsv.SETRANGE("Compa¤ia entrada"   , prAcumVuelo.Compa¤ia);
        lrRsv.SETRANGE("Vuelo entrada"      , prAcumVuelo.Vuelo);
        lrRsv.SETRANGE("IATA origen entrada", prAcumVuelo.IATA);
        //+$014 >
      END
      ELSE
      BEGIN
        lrRsv.SETCURRENTKEY("Fecha salida",
                            "Zona servicio salida",
                            TourOperador,
                            "Compa¤ia salida",
                            "Vuelo salida",
                            "IATA destino salida",
                            "Orden salida",
                            "Hotel salida",
                            Salida);
        //+$014 <
        lrRsv.SETRANGE("Compa¤ia salida"    , prAcumVuelo.Compa¤ia);
        lrRsv.SETRANGE("Vuelo salida"       , prAcumVuelo.Vuelo);
        lrRsv.SETRANGE("IATA destino salida", prAcumVuelo.IATA);
        //+$014 >
      END;
      IF lrRsv.FINDSET THEN
      BEGIN
        REPEAT
          IF (rCond."Tipo Transfer" = rCond."Tipo Transfer"::Entrada) AND (lrRsv."Vuelo entrada" <> '') THEN
          BEGIN
            lrAcumHotel.INIT;
            lrAcumHotel.Fecha           := rCond.Fecha;
            lrAcumHotel.Zona            := rCond."Zona Servicio";
            lrAcumHotel.TourOperador    := par_touroperador;
            lrAcumHotel."Tipo Transfer" := rCond."Tipo Transfer";
            lrAcumHotel.Compa¤ia        := prAcumVuelo.Compa¤ia;
            lrAcumHotel."Num. Vuelo"    := prAcumVuelo.Vuelo;
            lrAcumHotel.Vuelo           := DELCHR(prAcumVuelo.Compa¤ia) + ' ' + DELCHR(prAcumVuelo.Vuelo); //+$017
            lrAcumHotel.IATA            := prAcumVuelo.IATA;
            lrAcumHotel.Hora            := prAcumVuelo.Hora;
            lrAcumHotel.Hotel           := lrRsv."Hotel entrada";
            lrAcumHotel."Orden hotel"   := lrRsv."Orden entrada";

            // Buscamos el orden de la zona fisica en la zona de servicio
            rZonSer.SETRANGE(Zona           , rCond."Zona Servicio");
            rZonSer.SETRANGE("Tipo contrato", rZonSer."Tipo contrato"::Servicio);
            rZonSer.SETRANGE("Zona fisica"  , lrRsv."Zona entrada");
            IF rZonSer.FINDFIRST THEN
              lrAcumHotel."Orden zona" := rZonSer."Orden entrada zona";
            IF NOT lrAcumHotel.FIND THEN
              lrAcumHotel.INSERT(TRUE);
          END
          ELSE
          BEGIN
            IF (rCond."Tipo Transfer" = rCond."Tipo Transfer"::Salida) AND (lrRsv."Vuelo salida" <> '') THEN
            BEGIN
              lrAcumHotel.INIT;
              lrAcumHotel.Fecha           := rCond.Fecha;
              lrAcumHotel.Zona            := rCond."Zona Servicio";
              lrAcumHotel.TourOperador    := par_touroperador;
              lrAcumHotel."Tipo Transfer" := rCond."Tipo Transfer";
              lrAcumHotel.Compa¤ia        := prAcumVuelo.Compa¤ia;
              lrAcumHotel."Num. Vuelo"    := prAcumVuelo.Vuelo;
              lrAcumHotel.Vuelo           := DELCHR(prAcumVuelo.Compa¤ia) + ' ' + DELCHR(prAcumVuelo.Vuelo); //+$017
              lrAcumHotel.IATA            := prAcumVuelo.IATA;
              lrAcumHotel.Hora            := prAcumVuelo.Hora;
              lrAcumHotel.Hotel           := lrRsv."Hotel salida";
              lrAcumHotel."Orden hotel"   := lrRsv."Orden salida";

              //. Buscamos la hora de recogida
              lrRecogida.RESET;
              lrRecogida.SETRANGE(Fecha   , rCond.Fecha);
              lrRecogida.SETRANGE(Compa¤ia, prAcumVuelo.Compa¤ia);
              lrRecogida.SETRANGE(Vuelo   , prAcumVuelo.Vuelo);
              lrRecogida.SETRANGE(Hotel   , lrRsv."Hotel salida");
              lrRecogida.SETRANGE(IATA    , prAcumVuelo.IATA);
              IF lrRecogida.FINDFIRST THEN
                lrAcumHotel."Hora recogida" := lrRecogida."Hora recogida"
              ELSE
              //. Si no encontramos para el dia buscaremos en la prevision de temporada
              BEGIN
                lrRecogida.RESET;
                lrRecogida.SETRANGE(Compa¤ia             , prAcumVuelo.Compa¤ia);
                lrRecogida.SETRANGE(Vuelo                , prAcumVuelo.Vuelo);
                lrRecogida.SETRANGE(Hotel                , lrRsv."Hotel salida");
                lrRecogida.SETRANGE("Prevision temporada", TRUE);
                IF lrRecogida.FINDFIRST THEN
                  lrAcumHotel."Hora recogida" := lrRecogida."Hora recogida"
              END;

              // Buscamos el orden de la zona fisica en la zona de servicio
              rZonSer.SETRANGE(Zona           , rCond."Zona Servicio");
              rZonSer.SETRANGE("Tipo contrato", 2);
              rZonSer.SETRANGE("Zona fisica"  , lrRsv."Zona salida");
              IF rZonSer.FINDFIRST THEN
                lrAcumHotel."Orden zona" := rZonSer."Orden salida zona";
              IF NOT lrAcumHotel.FIND THEN
                lrAcumHotel.INSERT(TRUE);
            END;
          END;
        UNTIL lrRsv.NEXT = 0;
      END;
    END;

    PROCEDURE deshacer_cuadrante@6(VAR prAcumZona@1103355000 : Record 7009793;refrescar@1103355001 : Boolean);
    VAR
      TextoConfirm@1103355002 : Text[90];
      lrRsv@1000000000 : Record 7009744;
      lrAgr@1000000001 : Record 7009796;
    BEGIN
      // Deshacer_cuadrante

      IF NOT refrescar THEN
      BEGIN
        TextoConfirm := Text006 + ' ' + STRSUBSTNO('%1', prAcumZona."Tipo Transfer") + ' ' +
                        Text007 + ' ' + STRSUBSTNO('%1', prAcumZona.Fecha) + ' ' + Text008 + ' '  + prAcumZona.Zona;
        IF NOT CONFIRM(TextoConfirm) THEN
          EXIT;

        CASE prAcumZona."Tipo Transfer" OF
          prAcumZona."Tipo Transfer"::Entrada:
          BEGIN
            lrRsv.RESET;
            lrRsv.SETCURRENTKEY("Fecha entrada",
                                "Zona servicio entrada",
                                TourOperador,
                                "Compa¤ia entrada",
                                "Vuelo entrada",
                                "IATA origen entrada",
                                "Orden entrada",
                                "Hotel entrada",
                                Entrada);
            lrRsv.SETRANGE("Fecha entrada"        , prAcumZona.Fecha);
            lrRsv.SETRANGE("Zona servicio entrada", prAcumZona.Zona);
            lrRsv.SETRANGE(TourOperador           , prAcumZona.TourOperador);
            lrRsv.SETRANGE(Entrada                , 1);
            IF lrRsv.FINDSET THEN
            BEGIN
              REPEAT
                IF lrRsv."Agrupacion entrada" <> 0 THEN
                BEGIN
                  IF lrAgr.GET(lrRsv."Agrupacion entrada") THEN
                    comprueba_agrupacion(lrAgr);
                END;
              UNTIL lrRsv.NEXT = 0;
            END;
            lrRsv.MODIFYALL("Zona servicio entrada", '');
          END;
          prAcumZona."Tipo Transfer"::Salida:
          BEGIN
            lrRsv.RESET;
            lrRsv.SETCURRENTKEY("Fecha salida",
                                "Zona servicio salida",
                                TourOperador,
                                "Compa¤ia salida",
                                "Vuelo salida",
                                "IATA destino salida",
                                "Orden salida",
                                "Hotel salida",
                                Salida);
            lrRsv.SETRANGE("Fecha salida"        , prAcumZona.Fecha);
            lrRsv.SETRANGE("Zona servicio salida", prAcumZona.Zona);
            lrRsv.SETRANGE(TourOperador          , prAcumZona.TourOperador);
            lrRsv.SETRANGE(Salida                , 1);
            IF lrRsv.FINDSET THEN
            BEGIN
              REPEAT
                IF lrRsv."Agrupacion salida" <> 0 THEN
                BEGIN
                  IF lrAgr.GET(lrRsv."Agrupacion salida") THEN
                    comprueba_agrupacion(lrAgr);
                END;
              UNTIL lrRsv.NEXT = 0;
            END;
            lrRsv.MODIFYALL("Zona servicio salida", '');
          END;
        END;
      END;
      borrar_cuadrante(prAcumZona);

      prAcumZona.DELETE;
    END;

    PROCEDURE comprobar_vuelo@12(prAcumZona@1103355000 : Record 7009793);
    VAR
      lrAcumVuelo@1103355001 : Record 7009794;
    BEGIN
      // comprobar_vuelo

      lrAcumVuelo.RESET;
      lrAcumVuelo.SETRANGE(Fecha          , prAcumZona.Fecha);
      lrAcumVuelo.SETRANGE(Zona           , prAcumZona.Zona);
      lrAcumVuelo.SETRANGE(TourOperador   , prAcumZona.TourOperador);
      lrAcumVuelo.SETRANGE("Tipo Transfer", prAcumZona."Tipo Transfer");
      IF lrAcumVuelo.FINDSET THEN
      BEGIN
        REPEAT
          comprobar_hotel(lrAcumVuelo);
        UNTIL lrAcumVuelo.NEXT = 0;
      END;
    END;

    PROCEDURE comprobar_hotel@18(prAcumVuelo@1103355000 : Record 7009794);
    VAR
      lrAcumHotel@1000000000 : Record 7009795;
    BEGIN
      // comprobar_hotel

      lrAcumHotel.RESET;
      lrAcumHotel.SETRANGE(Fecha          , prAcumVuelo.Fecha);
      lrAcumHotel.SETRANGE(Zona           , prAcumVuelo.Zona);
      lrAcumHotel.SETRANGE(TourOperador   , prAcumVuelo.TourOperador);
      lrAcumHotel.SETRANGE("Tipo Transfer", prAcumVuelo."Tipo Transfer");
      lrAcumHotel.SETRANGE(Compa¤ia       , prAcumVuelo.Compa¤ia);
      lrAcumHotel.SETRANGE("Num. Vuelo"   , prAcumVuelo.Vuelo);
      lrAcumHotel.SETRANGE(IATA           , prAcumVuelo.IATA);
      IF lrAcumHotel.FINDSET THEN
      BEGIN
        REPEAT
          comprobar_reserva(lrAcumHotel);
        UNTIL lrAcumHotel.NEXT = 0;
      END;
    END;

    PROCEDURE comprobar_reserva@19(prAcumHotel@1103355000 : Record 7009795);
    VAR
      lrRsv@1103355001 : Record 7009744;
      lrAgr@1000000000 : Record 7009796;
    BEGIN
      // comprobar_reserva

      CASE prAcumHotel."Tipo Transfer" OF
        prAcumHotel."Tipo Transfer"::Entrada:
          BEGIN
            lrRsv.RESET;
            lrRsv.SETCURRENTKEY("Fecha entrada",
                                "Zona servicio entrada",
                                TourOperador,
                                "Compa¤ia entrada",
                                "Vuelo entrada",
                                "IATA origen entrada",
                                "Orden entrada",
                                "Hotel entrada",
                                Entrada);
            lrRsv.SETRANGE("Fecha entrada"        , prAcumHotel.Fecha);
            lrRsv.SETRANGE("Zona servicio entrada", prAcumHotel.Zona);
            lrRsv.SETRANGE(TourOperador           , prAcumHotel.TourOperador);
            lrRsv.SETRANGE("Compa¤ia entrada"     , prAcumHotel.Compa¤ia);
            lrRsv.SETRANGE("Vuelo entrada"        , prAcumHotel."Num. Vuelo");
            lrRsv.SETRANGE("IATA origen entrada"  , prAcumHotel.IATA);
            lrRsv.SETRANGE("Orden entrada"        , prAcumHotel."Orden hotel");
            lrRsv.SETRANGE("Hotel entrada"        , prAcumHotel.Hotel);
            lrRsv.SETRANGE(Entrada                , 1);
            IF lrRsv.FINDSET THEN
            BEGIN
              REPEAT
                IF lrRsv."Agrupacion entrada" <> 0 THEN
                BEGIN
                  IF lrAgr.GET(lrRsv."Agrupacion entrada") THEN
                    comprueba_agrupacion(lrAgr);
                END;
              UNTIL lrRsv.NEXT = 0;
            END;
            lrRsv.MODIFYALL("Zona servicio entrada", '');
          END;
        prAcumHotel."Tipo Transfer"::Salida:
          BEGIN
            lrRsv.RESET;
            lrRsv.SETCURRENTKEY("Fecha salida",
                                "Zona servicio salida",
                                TourOperador,
                                "Compa¤ia salida",
                                "Vuelo salida",
                                "IATA destino salida",
                                "Orden salida",
                                "Hotel salida",
                                Salida);
            lrRsv.SETRANGE("Fecha salida"        , prAcumHotel.Fecha);
            lrRsv.SETRANGE("Zona servicio salida", prAcumHotel.Zona);
            lrRsv.SETRANGE(TourOperador          , prAcumHotel.TourOperador);
            lrRsv.SETRANGE("Compa¤ia salida"     , prAcumHotel.Compa¤ia);
            lrRsv.SETRANGE("Vuelo salida"        , prAcumHotel."Num. Vuelo");
            lrRsv.SETRANGE("IATA destino salida" , prAcumHotel.IATA);
            lrRsv.SETRANGE("Orden salida"        , prAcumHotel."Orden hotel");
            lrRsv.SETRANGE("Hotel salida"        , prAcumHotel.Hotel);
            lrRsv.SETRANGE(Salida                , 1);
            IF lrRsv.FINDSET THEN
            BEGIN
              REPEAT
                IF lrRsv."Agrupacion salida" <> 0 THEN
                BEGIN
                  IF lrAgr.GET(lrRsv."Agrupacion salida") THEN
                    comprueba_agrupacion(lrAgr);
                END;
              UNTIL lrRsv.NEXT = 0;
            END;
            lrRsv.MODIFYALL("Zona servicio salida", '');
          END;
      END;
    END;

    PROCEDURE borrar_cuadrante@9(prAcumZona@1103355000 : Record 7009793);
    VAR
      lrAcumVuelo@1000000000 : Record 7009794;
      lrAcumHotel@1000000001 : Record 7009795;
    BEGIN
      // borrar_cuadrante

      lrAcumVuelo.RESET;
      lrAcumVuelo.SETRANGE(Fecha          , prAcumZona.Fecha);
      lrAcumVuelo.SETRANGE(Zona           , prAcumZona.Zona);
      lrAcumVuelo.SETRANGE(TourOperador   , prAcumZona.TourOperador);
      lrAcumVuelo.SETRANGE("Tipo Transfer", prAcumZona."Tipo Transfer");
      IF lrAcumVuelo.FINDSET(TRUE) THEN
        lrAcumVuelo.DELETEALL;

      lrAcumHotel.RESET;
      lrAcumHotel.SETRANGE(Fecha          , prAcumZona.Fecha);
      lrAcumHotel.SETRANGE(Zona           , prAcumZona.Zona);
      lrAcumHotel.SETRANGE(TourOperador   , prAcumZona.TourOperador);
      lrAcumHotel.SETRANGE("Tipo Transfer", prAcumZona."Tipo Transfer");
      IF lrAcumHotel.FINDSET(TRUE) THEN
        lrAcumHotel.DELETEALL;
    END;

    PROCEDURE comprueba_agrupacion@11(Agrupacion@1103355000 : Record 7009796);
    BEGIN
      // comprueba_agrupacion

      IF Agrupacion.Estado <> Agrupacion.Estado::Pendiente THEN
        ERROR(Text009)
      ELSE
        Desagrupar(Agrupacion);
    END;

    PROCEDURE Marcar_Celda@7(rAcuHot@1103355000 : Record 7009795;rAcuVue@1103355001 : Record 7009794;FiltZona@1103355002 : Text[109];FiltTo@1103355003 : Text[175];pwVista@1100217000 : 'Pendientes,Agrupados');
    VAR
      lrRsv@1000000000 : Record 7009744;
    BEGIN
      // Marcar_Celda

      lrRsv.RESET;

      IF rAcuVue."Tipo Transfer" = rAcuVue."Tipo Transfer"::Entrada THEN
      BEGIN
        lrRsv.SETCURRENTKEY("Fecha entrada",
                            "Zona servicio entrada",
                            TourOperador,
                            "Compa¤ia entrada",
                            "Vuelo entrada",
                            "IATA origen entrada",
                            "Orden entrada",
                            "Hotel entrada");
        lrRsv.SETRANGE("Fecha entrada"         , rAcuVue.Fecha);
        lrRsv.SETFILTER("Zona servicio entrada", rAcuVue.Zona);
        lrRsv.SETFILTER(TourOperador           , rAcuVue.TourOperador);
        lrRsv.SETRANGE("Compa¤ia entrada"      , rAcuVue.Compa¤ia);
        lrRsv.SETRANGE("Vuelo entrada"         , rAcuVue.Vuelo);
        lrRsv.SETRANGE("IATA origen entrada"   , rAcuVue.IATA);
        lrRsv.SETRANGE("Hotel entrada"         , rAcuHot.Hotel);
      END
      ELSE
      BEGIN
        lrRsv.SETCURRENTKEY("Fecha salida",
                            "Zona servicio salida",
                            TourOperador,
                            "Compa¤ia salida",
                            "Vuelo salida",
                            "IATA destino salida",
                            "Orden salida",
                            "Hotel salida");
        lrRsv.SETRANGE("Fecha salida"         , rAcuVue.Fecha);
        lrRsv.SETFILTER("Zona servicio salida", rAcuVue.Zona);
        lrRsv.SETFILTER(TourOperador          , rAcuVue.TourOperador);
        lrRsv.SETRANGE("Compa¤ia salida"      , rAcuVue.Compa¤ia);
        lrRsv.SETRANGE("Vuelo salida"         , rAcuVue.Vuelo);
        lrRsv.SETRANGE("IATA destino salida"  , rAcuVue.IATA);
        lrRsv.SETRANGE("Hotel salida"         , rAcuHot.Hotel);
      END;
      IF lrRsv.FINDSET(TRUE) THEN REPEAT
        IF pwVista = pwVista::Pendientes THEN
        BEGIN
          IF (lrRsv."Agrupacion entrada" = 0) THEN
            IF rAcuVue."Tipo Transfer" = rAcuVue."Tipo Transfer"::Entrada THEN
              IF lrRsv."Marca Cuadrante" = '' THEN
                lrRsv."Marca Cuadrante" := USERID
              ELSE
                lrRsv."Marca Cuadrante" := '';

          IF (lrRsv."Agrupacion salida" = 0) THEN
            IF rAcuVue."Tipo Transfer" = rAcuVue."Tipo Transfer"::Salida THEN
              IF lrRsv."Marca Cuadrante" = '' THEN
                lrRsv."Marca Cuadrante" := USERID
              ELSE
                lrRsv."Marca Cuadrante" := '';
        END
        ELSE
        BEGIN
          IF (lrRsv."Agrupacion entrada" <> 0) THEN
            IF rAcuVue."Tipo Transfer" = rAcuVue."Tipo Transfer"::Entrada THEN
              IF lrRsv."Marca Cuadrante" = '' THEN
                lrRsv."Marca Cuadrante" := USERID
              ELSE
                lrRsv."Marca Cuadrante" := '';

          IF (lrRsv."Agrupacion salida" <> 0) THEN
            IF rAcuVue."Tipo Transfer" = rAcuVue."Tipo Transfer"::Salida THEN
              IF lrRsv."Marca Cuadrante" = '' THEN
                lrRsv."Marca Cuadrante" := USERID
              ELSE
                lrRsv."Marca Cuadrante" := '';
        END;

        lrRsv.MODIFY;
      UNTIL lrRsv.NEXT = 0;
    END;

    PROCEDURE Marcar_Columna@10(rAcuVue@1103355000 : Record 7009794;FiltZona@1103355001 : Text[109];FiltTo@1103355002 : Text[175];pwVista@1100217000 : 'Pendientes,Agrupados');
    VAR
      lrRsv@1000000000 : Record 7009744;
    BEGIN
      // Marcar_Columna

      lrRsv.RESET;
      IF rAcuVue."Tipo Transfer" = rAcuVue."Tipo Transfer"::Entrada THEN
      BEGIN
        lrRsv.SETCURRENTKEY("Fecha entrada",
                            "Zona servicio entrada",
                            TourOperador,
                            "Compa¤ia entrada",
                            "Vuelo entrada",
                            "IATA origen entrada",
                            "Orden entrada",
                            "Hotel entrada");
        lrRsv.SETRANGE("Fecha entrada"         , rAcuVue.Fecha);
        lrRsv.SETFILTER("Zona servicio entrada", rAcuVue.Zona);
        lrRsv.SETFILTER(TourOperador           , rAcuVue.TourOperador);
        lrRsv.SETRANGE("Compa¤ia entrada"      , rAcuVue.Compa¤ia);
        lrRsv.SETRANGE("Vuelo entrada"         , rAcuVue.Vuelo);
        lrRsv.SETRANGE("IATA origen entrada"   , rAcuVue.IATA);
        lrRsv.SETRANGE("Hotel entrada");
      END
      ELSE
      BEGIN
        lrRsv.SETCURRENTKEY("Fecha salida",
                            "Zona servicio salida",
                            TourOperador,
                            "Compa¤ia salida",
                            "Vuelo salida",
                            "IATA destino salida",
                            "Orden salida",
                            "Hotel salida");
        lrRsv.SETRANGE("Fecha salida"         , rAcuVue.Fecha);
        lrRsv.SETFILTER("Zona servicio salida", rAcuVue.Zona);
        lrRsv.SETFILTER(TourOperador          , rAcuVue.TourOperador);
        lrRsv.SETRANGE("Compa¤ia salida"      , rAcuVue.Compa¤ia);
        lrRsv.SETRANGE("Vuelo salida"         , rAcuVue.Vuelo);
        lrRsv.SETRANGE("IATA destino salida"  , rAcuVue.IATA);
        lrRsv.SETRANGE("Hotel salida");
      END;
      IF lrRsv.FINDSET(TRUE) THEN REPEAT
        IF pwVista = pwVista::Pendientes THEN
        BEGIN
          IF (lrRsv."Agrupacion entrada" = 0) THEN
            IF rAcuVue."Tipo Transfer" = rAcuVue."Tipo Transfer"::Entrada THEN
              IF lrRsv."Marca Cuadrante" = '' THEN
                lrRsv."Marca Cuadrante" := USERID
              ELSE
                lrRsv."Marca Cuadrante" := '';

          IF (lrRsv."Agrupacion salida" = 0) THEN
            IF rAcuVue."Tipo Transfer" = rAcuVue."Tipo Transfer"::Salida THEN
              IF lrRsv."Marca Cuadrante" = '' THEN
                lrRsv."Marca Cuadrante" := USERID
              ELSE
                lrRsv."Marca Cuadrante" := '';
        END
        ELSE
        BEGIN
          IF (lrRsv."Agrupacion entrada" <> 0) THEN
            IF rAcuVue."Tipo Transfer" = rAcuVue."Tipo Transfer"::Entrada THEN
              IF lrRsv."Marca Cuadrante" = '' THEN
                lrRsv."Marca Cuadrante" := USERID
              ELSE
                lrRsv."Marca Cuadrante" := '';

          IF (lrRsv."Agrupacion salida" <> 0) THEN
            IF rAcuVue."Tipo Transfer" = rAcuVue."Tipo Transfer"::Salida THEN
              IF lrRsv."Marca Cuadrante" = '' THEN
                lrRsv."Marca Cuadrante" := USERID
              ELSE
                lrRsv."Marca Cuadrante" := '';
        END;
        lrRsv.MODIFY;
      UNTIL lrRsv.NEXT = 0;
    END;

    PROCEDURE Marcar_Fila@14(rAcuHot@1103355000 : Record 7009795;FiltZona@1103355001 : Text[109];FiltTo@1103355002 : Text[175];pwVista@1100217000 : 'Pendientes,Agrupados');
    VAR
      lrRsv@1000000000 : Record 7009744;
    BEGIN
      // Marcar_Fila

      lrRsv.RESET;
      IF rAcuHot."Tipo Transfer" = rAcuHot."Tipo Transfer"::Entrada THEN
      BEGIN
        lrRsv.SETCURRENTKEY("Fecha entrada",
                            "Compa¤ia entrada",
                            "Vuelo entrada",
                            "IATA origen entrada",
                            "Zona servicio entrada",
                            "Hotel entrada");
        lrRsv.SETRANGE ("Fecha entrada"        , rAcuHot.Fecha);
        lrRsv.SETFILTER("Zona servicio entrada", FiltZona);
        lrRsv.SETRANGE ("Hotel entrada"        , rAcuHot.Hotel);
      END
      ELSE
      BEGIN
        lrRsv.SETCURRENTKEY("Fecha salida",
                            "Compa¤ia salida",
                            "Vuelo salida",
                            "IATA destino salida",
                            "Zona servicio salida",
                            "Hotel salida");
        lrRsv.SETRANGE ("Fecha salida"        , rAcuHot.Fecha);
        lrRsv.SETFILTER("Zona servicio salida", FiltZona);
        lrRsv.SETRANGE ("Hotel salida"        , rAcuHot.Hotel);
      END;
      lrRsv.SETFILTER(TourOperador, FiltTo);

      IF lrRsv.FINDSET(TRUE) THEN REPEAT
        IF pwVista = pwVista::Pendientes THEN
        BEGIN
          IF (lrRsv."Agrupacion entrada" = 0) THEN
            IF rAcuHot."Tipo Transfer" = rAcuHot."Tipo Transfer"::Entrada THEN
              IF lrRsv."Marca Cuadrante" = '' THEN
                lrRsv."Marca Cuadrante" := USERID
              ELSE
                lrRsv."Marca Cuadrante" := '';

          IF (lrRsv."Agrupacion salida" = 0) THEN
            IF rAcuHot."Tipo Transfer" = rAcuHot."Tipo Transfer"::Salida THEN
              IF lrRsv."Marca Cuadrante" = '' THEN
                lrRsv."Marca Cuadrante" := USERID
              ELSE
                lrRsv."Marca Cuadrante" := '';
        END
        ELSE
        BEGIN
          IF (lrRsv."Agrupacion entrada" = 0) THEN
            IF rAcuHot."Tipo Transfer" = rAcuHot."Tipo Transfer"::Entrada THEN
              IF lrRsv."Marca Cuadrante" = '' THEN
                lrRsv."Marca Cuadrante" := USERID
              ELSE
                lrRsv."Marca Cuadrante" := '';

          IF (lrRsv."Agrupacion salida" = 0) THEN
            IF rAcuHot."Tipo Transfer" = rAcuHot."Tipo Transfer"::Salida THEN
              IF lrRsv."Marca Cuadrante" = '' THEN
                lrRsv."Marca Cuadrante" := USERID
              ELSE
                lrRsv."Marca Cuadrante" := '';
        END;
        lrRsv.MODIFY;
      UNTIL lrRsv.NEXT = 0;
    END;

    PROCEDURE Marcar_Cuadrante@15(rAcuHot@1103355000 : Record 7009795;FiltZona@1103355001 : Text[109];FiltTo@1103355002 : Text[175]);
    VAR
      lrRsv@1000000000 : Record 7009744;
    BEGIN
      // Marcar_Cuadrante

      lrRsv.RESET;
      IF rAcuHot."Tipo Transfer" = rAcuHot."Tipo Transfer"::Entrada THEN
      BEGIN
        lrRsv.SETCURRENTKEY("Fecha entrada",
                            "Zona servicio entrada",
                            TourOperador,
                            Entrada,
                            "Agrupacion entrada");
        lrRsv.SETRANGE ("Fecha entrada"        , rAcuHot.Fecha);
        lrRsv.SETFILTER("Zona servicio entrada", FiltZona);
      END
      ELSE
      BEGIN
        lrRsv.SETCURRENTKEY("Fecha salida",
                            "Zona servicio salida",
                            TourOperador,
                            Salida,
                            "Agrupacion salida");
        lrRsv.SETRANGE("Fecha salida"         , rAcuHot.Fecha);
        lrRsv.SETFILTER("Zona servicio salida", FiltZona);
      END;
      lrRsv.SETFILTER(TourOperador, FiltTo);

      IF lrRsv.FINDSET(TRUE) THEN REPEAT
        IF (lrRsv."Agrupacion entrada" = 0) THEN
          IF rAcuHot."Tipo Transfer" = rAcuHot."Tipo Transfer"::Entrada THEN
            IF lrRsv."Marca Cuadrante" = '' THEN
              lrRsv."Marca Cuadrante" := USERID
            ELSE
              lrRsv."Marca Cuadrante" := '';
        IF (lrRsv."Agrupacion salida" = 0) THEN
          IF rAcuHot."Tipo Transfer" = rAcuHot."Tipo Transfer"::Salida THEN
            IF lrRsv."Marca Cuadrante" = '' THEN
              lrRsv."Marca Cuadrante" := USERID
            ELSE
              lrRsv."Marca Cuadrante" := '';
        lrRsv.MODIFY;
      UNTIL lrRsv.NEXT = 0;
    END;

    PROCEDURE buscar_touroperador@30(par_touroperador@1103355000 : Code[10]);
    BEGIN
      // buscar_touroperador

      ind_to := 1;
      encontrado := FALSE;
      WHILE NOT encontrado DO BEGIN
        IF array_to[ind_to] = '' THEN BEGIN
          array_to[ind_to] := par_touroperador;
          encontrado := TRUE;
        END
        ELSE BEGIN
          IF array_to[ind_to] = par_touroperador THEN
            encontrado := TRUE
          ELSE
            ind_to := ind_to + 1;
        END;
      END;
    END;

    PROCEDURE array_zonas@29(par_cond@1103355000 : Record 7010085);
    VAR
      act_zona@1103355001 : Code[10];
      lrRsv@1000000000 : Record 7009744;
      lrZonTra@1000000001 : Record 7009791;
    BEGIN
      // array_zonas

      CASE par_cond."Tipo Transfer" OF
        par_cond."Tipo Transfer"::Entrada:
          BEGIN
            lrRsv.RESET;
            lrRsv.SETCURRENTKEY("Fecha entrada",
                                "Zona servicio entrada",
                                TourOperador,
                                Entrada);
            lrRsv.SETRANGE("Fecha entrada", par_cond.Fecha);
          END;
        par_cond."Tipo Transfer"::Salida:
          BEGIN
            lrRsv.RESET;
            lrRsv.SETCURRENTKEY("Fecha salida",
                                "Zona servicio salida",
                                TourOperador,
                                Salida);
            lrRsv.SETRANGE("Fecha salida", par_cond.Fecha);
          END;
      END;

      act_zona := '';

      lrZonTra.RESET;
      lrZonTra.SETRANGE("Tipo contrato", lrZonTra."Tipo contrato"::Servicio);
      IF lrZonTra.FINDSET THEN
      BEGIN
        REPEAT
          IF par_cond."Tipo Transfer" = par_cond."Tipo Transfer"::Entrada THEN
          BEGIN
            lrRsv.SETRANGE("Zona entrada" , lrZonTra."Zona fisica");
            IF lrRsv.FINDSET THEN
            BEGIN
              IF act_zona <> lrZonTra.Zona THEN
              BEGIN
                act_zona := lrZonTra.Zona;
                buscar_zona(lrZonTra.Zona);
              END;
            END;
          END
          ELSE
          BEGIN
            lrRsv.SETRANGE("Zona salida" , lrZonTra."Zona fisica");
            IF lrRsv.FINDSET THEN
            BEGIN
              IF act_zona <> lrZonTra.Zona THEN
              BEGIN
                act_zona := lrZonTra.Zona;
                buscar_zona(lrZonTra.Zona);
              END;
            END;
          END;
        UNTIL lrZonTra.NEXT = 0;
      END;
    END;

    PROCEDURE buscar_zona@38(par_zona@1103355000 : Code[10]);
    BEGIN
      // buscar_zona

      ind_zona := 1;
      encontrado := FALSE;
      WHILE NOT encontrado DO
      BEGIN
        IF array_zona[ind_zona] = '' THEN
        BEGIN
          array_zona[ind_zona] := par_zona;
          encontrado := TRUE;
        END
        ELSE
        BEGIN
          IF array_zona[ind_zona] = par_zona THEN
            encontrado := TRUE
          ELSE
            ind_zona := ind_zona + 1;
        END;
      END;
    END;

    PROCEDURE AgruparTodosTransferPrivado@1103355002(VAR prAcZona@1103355000 : Record 7009793);
    VAR
      lrAcZona2@1103355001 : Record 7009793;
      lwVentana@1103355002 : Dialog;
      lwTotal@1103355003 : Integer;
      lwCont@1103355004 : Integer;
      lwNoAgrp@1103355005 : Integer;
    BEGIN
      // AgruparTodosTransferPrivado

      // Se lanza todas las agrupaciones de Transfer privado para
      // todos los acumulados filtrados
      IF NOT CONFIRM(Text014, FALSE, prAcZona.GETFILTERS) THEN
        EXIT;

      CLEAR(lwNoAgrp);

      lrAcZona2.COPY(prAcZona);
      IF lrAcZona2.FINDSET THEN
      BEGIN
        CLEAR(lwCont);
        lwTotal := lrAcZona2.COUNT;
        lwVentana.OPEN(Text015);
        REPEAT
          lwVentana.UPDATE(1, STRSUBSTNO('%1 %2 %3 %4', lrAcZona2.Fecha, lrAcZona2.Zona,
                                         lrAcZona2.TourOperador, lrAcZona2."Tipo Transfer"));
          lwNoAgrp += AgruparTransferPrivado(lrAcZona2, FALSE);
          lwCont += 1;
          lwVentana.UPDATE(2, ROUND(lwCont / lwTotal * 10000, 1));
        UNTIL lrAcZona2.NEXT = 0;
        lwVentana.CLOSE;
      END;

      MESSAGE(Text011, lwNoAgrp);
    END;

    PROCEDURE AgruparTransferPrivado@1103355000(VAR prAcZona@1103355000 : Record 7009793;pwConfirma@1103355005 : Boolean) : Integer;
    VAR
      lrRsv@1103355001 : Record 7009744;
      lrRsv2@1000000000 : Record 7009744;
      lrTmpRsvOk@1103355003 : TEMPORARY Record 7009744;
      lrServTra@1100217000 : Record 7009916;
      lrServTra2@1100217001 : Record 7009916;
      cGestTra@1100217002 : Codeunit 7009782;
      lwNoAgrp@1103355009 : Integer;
    BEGIN
      // AgruparTransferPrivado
      // pwConfirma -> indica si se quiere que se pida confirmaci¢n
      // Devuelve el numero de agrupaciones realizadas

      IF pwConfirma THEN
        IF NOT CONFIRM(Text010, FALSE, prAcZona.Fecha, prAcZona.TourOperador, prAcZona.Zona) THEN
          EXIT;

      CLEAR(lwNoAgrp);
      CLEAR(lrRsv);
      IF prAcZona."Tipo Transfer" = prAcZona."Tipo Transfer"::Entrada THEN
      BEGIN
        lrRsv.SETCURRENTKEY("Fecha entrada",
                           "Zona servicio entrada",
                           "Hora entrada",
                           "Compa¤ia entrada",
                           "Vuelo entrada",
                           "IATA origen entrada",
                           "Hotel entrada",
                           TourOperador,
                           Entrada);
        lrRsv.SETRANGE ("Fecha entrada"            , prAcZona.Fecha);
        lrRsv.SETFILTER("Zona servicio entrada"    , prAcZona.Zona);
        lrRsv.SETRANGE (Entrada                    , 1);
        lrRsv.SETRANGE ("Agrupacion entrada"       , 0);
        lrRsv.SETFILTER("Servicio transfer entrada", '%1|%2', lrRsv."Servicio transfer entrada"::Privado,
                                                              lrRsv."Servicio transfer entrada"::Deluxe);
      END
      ELSE
      BEGIN
        lrRsv.SETCURRENTKEY("Fecha salida",
                           "Zona servicio salida",
                           "Hora salida",
                           TourOperador,
                           "Compa¤ia salida",
                           "Vuelo salida",
                           "IATA destino salida",
                           Salida);
        lrRsv.SETRANGE ("Fecha salida"            , prAcZona.Fecha);
        lrRsv.SETFILTER("Zona servicio salida"    , prAcZona.Zona);
        lrRsv.SETRANGE (Salida                    , 1);
        lrRsv.SETRANGE ("Agrupacion salida"       , 0);
        lrRsv.SETFILTER("Servicio transfer salida", '%1|%2', lrRsv."Servicio transfer salida"::Privado,
                                                             lrRsv."Servicio transfer salida"::Deluxe);
      END;

      lrRsv.SETFILTER(TourOperador, prAcZona.TourOperador);

      // Desmarcamos todas las reservas del usuario y quitamos el filtro "Marca"
      lrRsv.SETRANGE("Marca Cuadrante"      , USERID);
      lrRsv.MODIFYALL("Marca Cuadrante" , '');
      lrRsv.SETRANGE("Marca Cuadrante");
      //-$009lrRsv.SETRANGE("Transfer Privado Llegada", TRUE);

      // Creamos un temporal para controlar que reservas se han agrupado ya
      CLEAR(lrTmpRsvOk);
      lrTmpRsvOk.DELETEALL;
      lrTmpRsvOk.SETCURRENTKEY(Bono, "Fecha entrada", "Fecha salida");
      lrTmpRsvOk.COPYFILTERS(lrRsv);

      //. Recorrer las reservas para crear los servicios
      IF lrRsv.FINDSET THEN
      BEGIN
        REPEAT
          lrTmpRsvOk.SETRANGE(Bono        , lrRsv.Bono);
          lrTmpRsvOk.SETRANGE(TourOperador, lrRsv.TourOperador);
          //. Hay que crear servicios por cada vuelo
          IF prAcZona."Tipo Transfer" = prAcZona."Tipo Transfer"::Entrada THEN
          BEGIN
            lrTmpRsvOk.SETRANGE("Compa¤ia entrada", lrRsv."Compa¤ia entrada");
            lrTmpRsvOk.SETRANGE("Vuelo entrada"   , lrRsv."Vuelo entrada");
          END
          ELSE
          BEGIN
            lrTmpRsvOk.SETRANGE("Compa¤ia salida" , lrRsv."Compa¤ia salida");
            lrTmpRsvOk.SETRANGE("Vuelo salida"    , lrRsv."Vuelo salida");
          END;

          IF NOT lrTmpRsvOk.FINDFIRST THEN
          BEGIN
            lrTmpRsvOk := lrRsv;
            lrTmpRsvOk.INSERT;

            CLEAR(lrRsv2);
            lrRsv2.COPY(lrTmpRsvOk); // Copiamos filtros y claves. Pero esta es la real
            lrRsv2.MODIFYALL("Marca Cuadrante" , USERID);
            // Se crea agrupaci¢n
            Agrupar(prAcZona, prAcZona.Zona, prAcZona.TourOperador);

            lwNoAgrp += 1;
          END;
        UNTIL lrRsv.NEXT = 0;
      END;

      //+$008 <
      //. Revisamos los servicios de traslado en destino por si tenemos que crear servicios privados
      IF prAcZona."Tipo Transfer" = prAcZona."Tipo Transfer"::Entrada THEN
      BEGIN
        lrServTra.RESET;
        lrServTra.SETCURRENTKEY("Fecha servicio", Touroperador, "Zona servicio destino");
        lrServTra.SETRANGE("Fecha servicio"       , prAcZona.Fecha);
        lrServTra.SETRANGE(Touroperador           , prAcZona.TourOperador);
        lrServTra.SETRANGE("Zona servicio destino", prAcZona.Zona);
        lrServTra.SETRANGE("Servicio privado"     , TRUE);
        lrServTra.SETRANGE(Confirmado             , TRUE);
        IF lrServTra.FINDSET THEN
        BEGIN
          REPEAT
            lrServTra.CALCFIELDS("Personas sin servicio");
            IF lrServTra."Personas sin servicio" <> 0 THEN
            BEGIN
              lrServTra2 := lrServTra;
              lrServTra2.SETRECFILTER;

              cGestTra.CreateService(lrServTra2);

              lwNoAgrp += 1;
            END;
          UNTIL lrServTra.NEXT = 0;
        END;
      END;
      //+$008 >

      IF pwConfirma THEN
        MESSAGE(Text011, lwNoAgrp);

      EXIT(lwNoAgrp);
    END;

    PROCEDURE ComparaTransferPrivado@1103355006(prRsv1@1103355001 : Record 7009744;prRsv2@1103355000 : Record 7009744;prAgr@1100217000 : Record 7009796);
    BEGIN
      // ComparaTransferPrivado

      //. Controlamos que no se puedan mezclar reservas de transfer privado, con reservas de transfer regular
      //. Controlamos que no puedan mezclar gente de dos reservas si es un transfer privado

      //. Comprobar que todas las reservas tienen el mismo servicio venta
      IF prAgr."Tipo transfer" = prAgr."Tipo transfer"::Entrada THEN
      BEGIN
        IF prAgr."Tipo Servicio venta" <> prRsv2."Servicio transfer entrada" THEN
          ERROR(Text016);

        IF prAgr."Medio del transfer" <> prRsv2."Tipo transfer entrada" THEN
          ERROR(Text000);
      END
      ELSE
      BEGIN
        IF prAgr."Tipo Servicio venta" <> prRsv2."Servicio transfer salida" THEN
          ERROR(Text016);

        IF prAgr."Medio del transfer" <> prRsv2."Tipo transfer salida" THEN
          ERROR(Text000);
      END;

      //. Si es un servicio privado, todas las reservas tienen que ser del mismo bono
      IF prAgr."Tipo Servicio venta" IN [prAgr."Tipo Servicio venta"::Privado, prAgr."Tipo Servicio venta"::Deluxe] THEN
      BEGIN
        IF (prRsv1.TourOperador <> prRsv2.TourOperador) OR (prRsv1.Bono <> prRsv2.Bono) THEN
          ERROR(Text013, prRsv1.TourOperador, prRsv1.Bono, prRsv2.TourOperador, prRsv2.Bono);
      END;
    END;

    PROCEDURE CampoVuelosAgrupacion@1100217000(pwAgrupacion@1100217000 : Integer;VAR pwVuelos@1100217006 : Text[250];VAR pwNumVuelos@1100217007 : Integer);
    VAR
      Ant_iata@1100217001 : Code[10];
      Ant_compa¤ia@1100217002 : Code[10];
      Ant_vuelo@1100217003 : Code[10];
      Ant_fecha@1100217004 : Date;
      Ant_hora@1100217005 : Time;
      lrAgrVue@1100217008 : Record 7009797;
      lwVuelo@1100217009 : Code[10];
    BEGIN
      // CampoVuelosAgrupacion

      Ant_iata     := '';
      Ant_compa¤ia := '';
      Ant_vuelo    := '';
      Ant_fecha    := 0D;
      Ant_hora     := 000000T;

      pwVuelos    := '';
      pwNumVuelos := 0;

      lrAgrVue.RESET;
      lrAgrVue.SETRANGE("N§ Agrupacion", pwAgrupacion);
      IF lrAgrVue.FINDSET THEN
        REPEAT
          IF (lrAgrVue.Fecha <> Ant_fecha) OR
             (lrAgrVue.Hora <> Ant_hora) OR
             (lrAgrVue.Compa¤ia <> Ant_compa¤ia) OR
             (lrAgrVue.Vuelo <> Ant_vuelo) THEN
          BEGIN
            IF pwVuelos = '' THEN
            BEGIN
              pwVuelos    := lrAgrVue.Compa¤ia + ' ' + lrAgrVue.Vuelo;
              pwNumVuelos := 1;
            END
            ELSE
            BEGIN
              lwVuelo := lrAgrVue.Compa¤ia + ' ' + lrAgrVue.Vuelo;
              IF (STRLEN(pwVuelos) < 240) AND (STRPOS(pwVuelos, lwVuelo) = 0) THEN
              BEGIN
                pwVuelos    := pwVuelos + '|' + lwVuelo;
                pwNumVuelos += 1;
              END;
            END;

            Ant_fecha    := lrAgrVue.Fecha;
            Ant_hora     := lrAgrVue.Hora;
            Ant_compa¤ia := lrAgrVue.Compa¤ia;
            Ant_vuelo    := lrAgrVue.Vuelo;
            Ant_iata     := lrAgrVue.IATA;
          END;
        UNTIL lrAgrVue.NEXT = 0;
    END;

    PROCEDURE CampoTouroperadoresAgr@1100217003(pwAgrupacion@1100217003 : Integer;VAR pwTouroperadores@1100217002 : Text[250]);
    VAR
      Ant_ttoo@1100217000 : Code[10];
      lrAgrVue@1100217001 : Record 7009797;
    BEGIN
      // CampoTouroperadoresAgr

      Ant_ttoo := '';

      pwTouroperadores := '';

      lrAgrVue.RESET;
      lrAgrVue.SETCURRENTKEY("N§ Agrupacion",
                            TourOperador);
      lrAgrVue.SETRANGE("N§ Agrupacion", pwAgrupacion);
      IF lrAgrVue.FINDSET THEN
        REPEAT
          IF (lrAgrVue.TourOperador <> Ant_ttoo) THEN BEGIN
            IF pwTouroperadores = '' THEN BEGIN
              pwTouroperadores := lrAgrVue.TourOperador;
            END
            ELSE BEGIN
              pwTouroperadores := pwTouroperadores + '|' + lrAgrVue.TourOperador;
            END;
            Ant_ttoo := lrAgrVue.TourOperador;
          END;
        UNTIL lrAgrVue.NEXT = 0;
    END;

    PROCEDURE CampoZonasAgrupacion@1100217007(pwAgrupacion@1100217001 : Integer;VAR pwZonas@1100217000 : Text[250]);
    VAR
      lrAgrZona@1100217002 : Record 7009799;
    BEGIN
      // CampoZonasAgrupacion

      pwZonas := '';

      lrAgrZona.RESET;
      lrAgrZona.SETRANGE("N§ Agrupacion", pwAgrupacion);
      lrAgrZona.SETRANGE("Tipo zona"    , lrAgrZona."Tipo zona"::Servicio);
      IF lrAgrZona.FINDSET THEN
        REPEAT
          IF pwZonas = '' THEN
            pwZonas := lrAgrZona.Zona
          ELSE
            pwZonas := pwZonas + '|' + lrAgrZona.Zona;
        UNTIL lrAgrZona.NEXT = 0;
    END;

    PROCEDURE AgregarTouroperador@1000000000(VAR prAcumHotel@1000000000 : Record 7009795);
    VAR
      lrAcum@1000000001 : Record 7009793;
      lwTexto@1000000002 : Text[1024];
      lwFiltro@1000000003 : Text[1024];
    BEGIN
      // AgregarTouroperador

      lwTexto := prAcumHotel.GETFILTER(TourOperador);

      lwFiltro := _SepararFiltro(lwTexto);

      CLEAR(lrAcum);
      lrAcum.SETRANGE (Fecha          , prAcumHotel.Fecha);
      lrAcum.SETRANGE (Zona           , prAcumHotel.Zona);
      lrAcum.SETFILTER(TourOperador   , lwFiltro);
      lrAcum.SETRANGE ("Tipo Transfer", prAcumHotel."Tipo Transfer");
      IF lrAcum.FINDSET THEN
      BEGIN
        IF FORM.RUNMODAL(0, lrAcum) = ACTION::LookupOK THEN
        BEGIN
          IF lwTexto = '' THEN
            lwTexto := lrAcum.TourOperador
          ELSE
            lwTexto := lwTexto + '|' + lrAcum.TourOperador;
        END;
      END;

      prAcumHotel.SETFILTER(TourOperador, lwTexto);
    END;

    LOCAL PROCEDURE _SepararFiltro@1000000001(pwTexto@1000000000 : Text[1024]) pwFiltro : Text[1024];
    VAR
      lwIndice@1000000001 : Integer;
      lwCodigo@1000000002 : Code[10];
    BEGIN
      // _SepararFiltro

      IF pwTexto = '' THEN
        EXIT;

      pwFiltro := '';

      REPEAT
        lwIndice := STRPOS(pwTexto, '|');

        IF lwIndice = 0 THEN
        BEGIN
          lwCodigo := COPYSTR(pwTexto, 1, STRLEN(pwTexto));
          pwTexto := '';
        END
        ELSE
        BEGIN
          lwCodigo := COPYSTR(pwTexto, 1, lwIndice - 1);
          pwTexto := COPYSTR(pwTexto, lwIndice + 1, STRLEN(pwTexto));
        END;

        IF pwFiltro = '' THEN
          pwFiltro := '<>' + lwCodigo
        ELSE
          pwFiltro := pwFiltro + '&<>' + lwCodigo;

      UNTIL pwTexto = '';

      EXIT(pwFiltro);
    END;

    PROCEDURE AgregarZonas@1000000002(VAR prAcumHotel@1000000000 : Record 7009795);
    VAR
      lrAcum@1000000003 : Record 7009793;
      lwTexto@1000000002 : Text[1024];
      lwFiltro@1000000001 : Text[1024];
    BEGIN
      // AgregarZonas

      lwTexto := prAcumHotel.GETFILTER(Zona);

      lwFiltro := _SepararFiltro(lwTexto);

      CLEAR(lrAcum);
      lrAcum.SETRANGE (Fecha          , prAcumHotel.Fecha);
      lrAcum.SETFILTER(Zona           , lwFiltro);
      lrAcum.SETRANGE ("Tipo Transfer", prAcumHotel."Tipo Transfer");
      IF lrAcum.FINDSET THEN
      BEGIN
        IF FORM.RUNMODAL(0, lrAcum) = ACTION::LookupOK THEN
        BEGIN
          IF lwTexto = '' THEN
            lwTexto := lrAcum.Zona
          ELSE
            lwTexto := lwTexto + '|' + lrAcum.Zona;
        END;
      END;

      prAcumHotel.SETFILTER(Zona, lwTexto);
    END;

    BEGIN
    {
      ## AJF 29/06/09

        .- (09/00319) cambio c¢digos de hotel de code10 a code20.

      $001 AJS 22022012 Modifico la funcion Desagrupar para recuperar el puntero de agrupacion, sino en SQL se genera un error

      $002 JPT 24/05/12 CNT-CAR-12004 / TRA-12 Definition of transfer pick-up schedule

      $003 AJS 17012013 Modificaciones para poner en funciones los campos Vuelos, Touroperadores y Zonas de la agrupacion

      $004 AJS 11042013 Modifico la funcion Agrupar para que no llame a las funciones que crean las tablas auxiliares de
                        la agrupacion, esto ya lo hace el Validate de los campos de reserva transfer

      $005 AJS 10062013 Nuevo campo para indicar la capacidad por defecto de los vehiculos del proveedor

      $006 AJS 13062013 Las reservas no show no se van a agrupar

      $007 AJS 18072013 Impedir que el mismo numero de vuelo aparezca dos veces en el campo Vuelos de la agrupacion

      $008 AJS 09042014 CNT-OC-14042, Modificar la funci¢n AgruparTransferPrivado para trabajar con los servicios privados
                        de traslados en destino

      $009 AJS 29052014 Modifico los controles de transfer privado porque podemos tener la marca distinta en llegada y salida

      $010 AJS 09062014 Si la reserva tiene vehiculo seleccionado, lo asigno por defecto en la agrupacion

      $011 AJS 23092014 Al crear la agrupacion ponemos la marca de tranfer privado para evitar errores

      $012 ARM 30092014 CNT-CAR-14063 Nuevo campos Tipo servicio en agrupaciones para los transfer privado

      $013 AJS 09122014 Corregir error en la funcion Agrupar

      $014 AJS 04032015 Modifico la funcion acumulados_hotel_vuelo para que no se creen registros innecesarios

      $015 ARM 02032015 CNT-OC-14093

      $016 AJS 23032015 CNT-CAR-14096, cambio de clave en la tabla Zonas transfer

      $017 AJS 16052015 Rellenar el campo Vuelo en los acumulados por hotel, concatena Compa¤ia y Numero de vuelo

      $018 AJS 28072015 Revision de instrucciones FINDFIRST, FINDSET y pasar variables globales a locales

      $019 AJS 28072015 Modifico la funcion AgruparTransferPrivado para separar las reservas por vuelo
    }
    END.
  }
}
