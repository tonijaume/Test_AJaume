OBJECT Codeunit 7182 Purch. History Copy Line Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1001 : TextConst 'ENU=The document line(s) with a G/L account where direct posting is not allowed have not been copied.;ESP=No se han copiado las l¡neas del documento con cuentas que no admiten el registro directo.';
      LinesNotCopied@1002 : Integer;
      DocNoOccurrence@1003 : Integer;
      DocVersionNo@1000 : Integer;

    LOCAL PROCEDURE CopyLinesToDoc@17(ToPurchHeader@1016 : Record 38;VAR FromPurchLine@1002 : Record 39;FromDocType@1017 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Posted Shipment,Posted Invoice,Posted Return Order,Posted Credit Memo,Archived Order');
    VAR
      ToPurchLine@1005 : Record 39;
      FromPurchHeader@1000 : Record 38;
      FromPurchRcptHeader@1003 : Record 120;
      FromPurchInvHeader@1004 : Record 122;
      FromPurchCrMemoHeader@1006 : Record 124;
      FromReturnShptHeader@1008 : Record 6650;
      FromPurchArchHeader@1010 : Record 5109;
      DocDim@1007 : Record 357;
      NextLineNo@1001 : Integer;
      ItemChargeAssgntNextLineNo@1009 : Integer;
    BEGIN
      WITH ToPurchHeader DO BEGIN
        DocDim.LOCKTABLE;
        ToPurchLine.LOCKTABLE;
        LOCKTABLE;

        FIND;
        TESTFIELD(Status,Status::Open);

        ToPurchLine.SETRANGE("Document Type",ToPurchHeader."Document Type");
        ToPurchLine.SETRANGE("Document No.",ToPurchHeader."No.");
        IF ToPurchLine.FIND('+') THEN
          NextLineNo := ToPurchLine."Line No."
        ELSE
          NextLineNo := 0;

        CASE FromDocType OF
          FromDocType::Quote,
          FromDocType::Order,
          FromDocType::Invoice,
          FromDocType::"Credit Memo",
          FromDocType::"Blanket Order",
          FromDocType::"Return Order":
            BEGIN
              FromPurchHeader.GET(FromPurchLine."Document Type",FromPurchLine."Document No.");
              ItemChargeAssgntNextLineNo := 0;
              CopyLine(ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,NextLineNo);
              IF FromPurchLine.Type = FromPurchLine.Type::"Charge (Item)" THEN
                CopyFromSalesDocAssgntToLine(ToPurchLine,FromPurchLine,ItemChargeAssgntNextLineNo);
            END;
          FromDocType::"Posted Shipment":
            BEGIN
              FromPurchRcptHeader.GET(FromPurchLine."Document No.");
              FromPurchHeader.TRANSFERFIELDS(FromPurchRcptHeader);
              CopyLine(ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,NextLineNo);
            END;
          FromDocType::"Posted Invoice":
            BEGIN
              FromPurchInvHeader.GET(FromPurchLine."Document No.");
              FromPurchHeader.TRANSFERFIELDS(FromPurchInvHeader);
              CopyLine(ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,NextLineNo);
            END;
          FromDocType::"Posted Return Order":
            BEGIN
              FromReturnShptHeader.GET(FromPurchLine."Document No.");
              FromPurchHeader.TRANSFERFIELDS(FromReturnShptHeader);
              CopyLine(ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,NextLineNo);
            END;
          FromDocType::"Posted Credit Memo":
            BEGIN
              FromPurchCrMemoHeader.GET(FromPurchLine."Document No.");
              FromPurchHeader.TRANSFERFIELDS(FromPurchCrMemoHeader);
              CopyLine(ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,NextLineNo);
            END;
          FromDocType::"Archived Order":
            BEGIN
              FromPurchArchHeader.GET(FromPurchLine."Document Type",FromPurchLine."Document No.",
                DocNoOccurrence,DocVersionNo);
              FromPurchHeader.TRANSFERFIELDS(FromPurchArchHeader);
              CopyLine(ToPurchHeader,ToPurchLine,FromPurchHeader,FromPurchLine,NextLineNo);
            END;
        END;
      END;

      IF LinesNotCopied > 0 THEN
        MESSAGE(Text000);
    END;

    LOCAL PROCEDURE CopyLine@14(ToPurchHeader@1004 : Record 38;VAR ToPurchLine@1001 : Record 39;FromPurchHeader@1005 : Record 38;FromPurchLine@1002 : Record 39;VAR NextLineNo@1003 : Integer);
    VAR
      GLAcc@1009 : Record 15;
      ToPurchLine2@1010 : Record 39;
      TransferExtendedText@1008 : Codeunit 378;
      CopyThisLine@1007 : Boolean;
    BEGIN
      CopyThisLine := TRUE;
      IF FromPurchLine."Attached to Line No." <> 0 THEN
        EXIT;
      IF NOT FromPurchLine."System-Created Entry" THEN
        ToPurchLine.INIT
      ELSE
        ToPurchLine := FromPurchLine;

      WITH ToPurchLine DO BEGIN
        NextLineNo := NextLineNo + 10000;
        "Document Type" := ToPurchHeader."Document Type";
        "Document No." := ToPurchHeader."No.";
        "Line No." := NextLineNo;
        VALIDATE("Currency Code",ToPurchHeader."Currency Code");
        IF NOT FromPurchLine."System-Created Entry" THEN BEGIN
          VALIDATE(Type,FromPurchLine.Type);
          VALIDATE(Description,FromPurchLine.Description);
          VALIDATE("Description 2",FromPurchLine."Description 2");
          IF (FromPurchLine.Type <> FromPurchLine.Type::" ") AND (FromPurchLine."No." <> '') THEN BEGIN
            IF Type = Type::"G/L Account" THEN BEGIN
              "No." := FromPurchLine."No.";
              GLAcc.GET(FromPurchLine."No.");
              CopyThisLine := GLAcc."Direct Posting";
              IF CopyThisLine THEN
                VALIDATE("No.",FromPurchLine."No.");
            END ELSE
              VALIDATE("No.",FromPurchLine."No.");
            VALIDATE("Variant Code",FromPurchLine."Variant Code");
            VALIDATE("Location Code",FromPurchLine."Location Code");
            VALIDATE("Unit of Measure",FromPurchLine."Unit of Measure");
            VALIDATE("Unit of Measure Code",FromPurchLine."Unit of Measure Code");
            VALIDATE(Quantity,0);
            IF FromPurchLine.Type <> FromPurchLine.Type::Item THEN BEGIN
              IF (FromPurchHeader."Currency Code" <> ToPurchHeader."Currency Code") OR
                 (FromPurchHeader."Prices Including VAT" <> ToPurchHeader."Prices Including VAT")
              THEN BEGIN
                "Unit Cost" := 0;
                "Line Discount %" := 0;
              END ELSE BEGIN
                VALIDATE("Unit Cost",FromPurchLine."Unit Cost");
                VALIDATE("Line Discount %",FromPurchLine."Line Discount %");
              END;
            END;
            IF ("Document Type" = "Document Type"::Order) AND
               (FromPurchLine."Purchasing Code" <> '')
            THEN
              VALIDATE("Purchasing Code",FromPurchLine."Purchasing Code");
          END;
          IF (FromPurchLine.Type = FromPurchLine.Type::" ") AND (FromPurchLine."No." <> '') THEN
            VALIDATE("No.",FromPurchLine."No.");
        END ELSE BEGIN
          Quantity := 0;
          "Quantity (Base)" := 0;
          "Quantity Received" := 0;
          "Qty. Received (Base)" := 0;
          "Return Qty. Shipped" := 0;
          "Return Qty. Shipped (Base)" := 0;
          "Quantity Invoiced" := 0;
          "Qty. Invoiced (Base)" := 0;
          "Reserved Quantity" := 0;
          "Reserved Qty. (Base)" := 0;
          "Qty. to Receive" := 0;
          "Qty. to Receive (Base)" := 0;
          "Return Qty. to Ship" := 0;
          "Return Qty. to Ship (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
          "Qty. Rcd. Not Invoiced" := 0;
          "Qty. Rcd. Not Invoiced (Base)" := 0;
          "Return Qty. Shipped Not Invd." := 0;
          "Ret. Qty. Shpd Not Invd.(Base)" := 0;
          "Return Shpd. Not Invd." := 0;
          "Return Shpd. Not Invd. (LCY)" := 0;

          InitOutstanding;
          IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
            InitQtyToReceive
          ELSE
            InitQtyToShip;
          "VAT Difference" := FromPurchLine."VAT Difference";
          "Expected Receipt Date" := ToPurchHeader."Expected Receipt Date";
          "Appl.-to Item Entry" := 0;

          "Sales Order No." := '';
          "Sales Order Line No." := 0;
          "Special Order Sales No." := '';
          "Special Order Sales Line No." := 0;
          IF "Document Type" <> "Document Type"::Order THEN BEGIN
            "Drop Shipment" := FALSE;
            "Special Order" := FALSE;
          END;
        END;

        IF TransferExtendedText.PurchCheckIfAnyExtText(ToPurchLine,FALSE) THEN BEGIN
          TransferExtendedText.InsertPurchExtText(ToPurchLine);
          ToPurchLine2.SETRANGE("Document Type",ToPurchLine."Document Type");
          ToPurchLine2.SETRANGE("Document No.",ToPurchLine."Document No.");
          ToPurchLine2.FIND('+');
          NextLineNo := ToPurchLine2."Line No.";
        END;

        IF CopyThisLine THEN
          INSERT
        ELSE
          LinesNotCopied := LinesNotCopied + 1;
      END;
    END;

    LOCAL PROCEDURE CopyFromSalesDocAssgntToLine@5800(VAR ToPurchLine@1005 : Record 39;FromPurchLine@1000 : Record 39;VAR ItemChargeAssgntNextLineNo@1001 : Integer);
    VAR
      FromItemChargeAssgntSales@1002 : Record 5809;
      ToItemChargeAssgntSales@1003 : Record 5809;
      AssignItemChargeSales@1004 : Codeunit 5807;
    BEGIN
      WITH FromPurchLine DO BEGIN
        IF NOT FromItemChargeAssgntSales.RECORDLEVELLOCKING THEN
          FromItemChargeAssgntSales.LOCKTABLE(TRUE,TRUE);
        FromItemChargeAssgntSales.RESET;
        FromItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
        FromItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
        FromItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
        FromItemChargeAssgntSales.SETFILTER(
          "Applies-to Doc. Type",'<>%1',"Document Type");
        IF FromItemChargeAssgntSales.FIND('-') THEN
          REPEAT
            ToItemChargeAssgntSales.COPY(FromItemChargeAssgntSales);
            ToItemChargeAssgntSales."Document Type" := ToPurchLine."Document Type";
            ToItemChargeAssgntSales."Document No." := ToPurchLine."Document No.";
            ToItemChargeAssgntSales."Document Line No." := ToPurchLine."Line No.";
            AssignItemChargeSales.InsertItemChargeAssgnt(
              ToItemChargeAssgntSales,ToItemChargeAssgntSales."Applies-to Doc. Type",
              ToItemChargeAssgntSales."Applies-to Doc. No.",ToItemChargeAssgntSales."Applies-to Doc. Line No.",
              ToItemChargeAssgntSales."Item No.",ToItemChargeAssgntSales.Description,ItemChargeAssgntNextLineNo);
          UNTIL FromItemChargeAssgntSales.NEXT = 0;
      END;
    END;

    PROCEDURE CopyPurchLinesToDoc@1(ToPurchHeader@1002 : Record 38;VAR FromPurchLine@1001 : Record 39;FromDocType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Posted Shipment,Posted Invoice,Posted Return Order,Posted Credit Memo');
    BEGIN
      WITH FromPurchLine DO BEGIN
        IF FIND('-') THEN
          REPEAT
            CopyLinesToDoc(ToPurchHeader,FromPurchLine,FromDocType);
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CopyPurchRcptLineToDoc@2(ToPurchHeader@1002 : Record 38;VAR FromPurchRcptLine@1001 : Record 121;FromDocType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Posted Shipment,Posted Invoice,Posted Return Order,Posted Credit Memo');
    VAR
      FromPurchLine@1003 : Record 39;
    BEGIN
      WITH FromPurchRcptLine DO BEGIN
        IF FIND('-') THEN
          REPEAT
            FromPurchLine.TRANSFERFIELDS(FromPurchRcptLine);
            CopyLinesToDoc(ToPurchHeader,FromPurchLine,FromDocType);
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CopyPurchInvLineToDoc@3(ToPurchHeader@1002 : Record 38;VAR FromPurchInvLine@1001 : Record 123;FromDocType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Posted Shipment,Posted Invoice,Posted Return Order,Posted Credit Memo');
    VAR
      FromPurchLine@1003 : Record 39;
    BEGIN
      WITH FromPurchInvLine DO BEGIN
        IF FIND('-') THEN
          REPEAT
            FromPurchLine.TRANSFERFIELDS(FromPurchInvLine);
            CopyLinesToDoc(ToPurchHeader,FromPurchLine,FromDocType);
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CopyPurchCrMemoLineToDoc@4(ToPurchHeader@1002 : Record 38;VAR FromPurchCrMemoLine@1001 : Record 125;FromDocType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Posted Shipment,Posted Invoice,Posted Return Order,Posted Credit Memo');
    VAR
      FromPurchLine@1003 : Record 39;
    BEGIN
      WITH FromPurchCrMemoLine DO BEGIN
        IF FIND('-') THEN
          REPEAT
            FromPurchLine.TRANSFERFIELDS(FromPurchCrMemoLine);
            CopyLinesToDoc(ToPurchHeader,FromPurchLine,FromDocType);
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CopyReturnShptLineToDoc@5(ToPurchHeader@1002 : Record 38;VAR FromReturnShptLine@1001 : Record 6651;FromDocType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Posted Shipment,Posted Invoice,Posted Return Order,Posted Credit Memo');
    VAR
      FromPurchLine@1003 : Record 39;
    BEGIN
      WITH FromReturnShptLine DO BEGIN
        IF FIND('-') THEN
          REPEAT
            FromPurchLine.TRANSFERFIELDS(FromReturnShptLine);
            CopyLinesToDoc(ToPurchHeader,FromPurchLine,FromDocType);
          UNTIL FromReturnShptLine.NEXT = 0;
      END;
    END;

    PROCEDURE CopyPurchArchLineToDoc@6(ToPurchHeader@1002 : Record 38;VAR FromPurchArchLine@1001 : Record 5110;FromDocType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Posted Shipment,Posted Invoice,Posted Return Order,Posted Credit Memo');
    VAR
      FromPurchLine@1003 : Record 39;
    BEGIN
      WITH FromPurchArchLine DO BEGIN
        IF FIND('-') THEN
          REPEAT
            FromPurchLine.TRANSFERFIELDS(FromPurchArchLine);
            DocNoOccurrence := FromPurchArchLine."Doc. No. Occurrence";
            DocVersionNo := FromPurchArchLine."Version No.";
            CopyLinesToDoc(ToPurchHeader,FromPurchLine,FromDocType);
          UNTIL NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}
