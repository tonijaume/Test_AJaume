OBJECT Codeunit 13 Gen. Jnl.-Post Batch
{
  OBJECT-PROPERTIES
  {
    Date=02/10/12;
    Time=12:00:00;
    Modified=Yes;
    Version List=AIC2009,NAVW16.00.01,NAVES6.00.01;
  }
  PROPERTIES
  {
    TableNo=81;
    Permissions=TableData 232=imd;
    OnRun=BEGIN
            GenJnlLine.COPY(Rec);
            Code;
            Rec := GenJnlLine;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=cannot exceed %1 characters;ESP=no puede superar %1 caracteres';
      Text001@1001 : TextConst 'ENU=Journal Batch Name    #1##########\\;ESP=Nombre secci¢n diario #1##########\\';
      Text002@1002 : TextConst 'ENU=Checking lines        #2######\;ESP=Comprobando l¡neas    #2######\';
      Text003@1003 : TextConst 'ENU=Checking balance      #3###### @4@@@@@@@@@@@@@\;ESP=Comprobando saldo     #3###### @4@@@@@@@@@@@@@\';
      Text004@1004 : TextConst 'ENU=Posting lines         #5###### @6@@@@@@@@@@@@@\;ESP=Registrando l¡neas    #5###### @6@@@@@@@@@@@@@\';
      Text005@1005 : TextConst 'ENU=Posting revers. lines #7###### @8@@@@@@@@@@@@@\;ESP=Regs. l¡ns. reversi¢n #7###### @8@@@@@@@@@@@@@\';
      Text006@1006 : TextConst 'ENU=Updating lines        #9###### @10@@@@@@@@@@@@;ESP=Actualizando l¡neas   #9###### @10@@@@@@@@@@@@';
      Text007@1007 : TextConst 'ENU=Posting lines         #5###### @6@@@@@@@@@@@@@;ESP=Registrando l¡neas    #5###### @6@@@@@@@@@@@@@';
      Text008@1008 : TextConst 'ENU=must be the same on all lines for the same document.;ESP=debe ser el mismo en todas las l¡n. para el mismo doc.';
      Text009@1009 : TextConst 'ENU="%1 %2 posted on %3 includes more than one customer or vendor. ";ESP="%1 %2 registrado en %3 incluye m s de un cliente o proveedor. "';
      Text010@1010 : TextConst 'ENU=In order for the program to calculate VAT, the entries must be separated by another document number or by an empty line.;ESP=Para el c lculo de IVA, los movs. se deben separar por otro n£mero de documento o por una l¡nea en blanco.';
      Text012@1012 : TextConst 'ENU="%5 %2 is out of balance by %1. ";ESP="%5 %2 tiene un descuadre de %1. "';
      Text013@1013 : TextConst 'ENU=Please check that %3, %4, %5 and %6 are correct for each line.;ESP=Compruebe que son correctos para cada l¡nea %3, %4, %5 y %6.';
      Text014@1014 : TextConst 'ENU="The lines in %1 are out of balance by %2. ";ESP="Hay un descuadre de %2 en las l¡neas de %1. "';
      Text015@1015 : TextConst 'ENU=Check that %3 and %4 are correct for each line.;ESP=Compruebe que %3 y/e %4 son correctos para cada l¡nea.';
      Text016@1016 : TextConst 'ENU="Your reversing entries in %4 %2 are out of balance by %1. ";ESP="Hay un descuadre de %1 en los movs. del contraasiento de %4 %2. "';
      Text017@1017 : TextConst 'ENU=Please check whether %3 is correct for each line for this %4.;ESP=Compruebe que la %3 es correcta para este/a %4.';
      Text018@1018 : TextConst 'ENU="Your reversing entries for %1 are out of balance by %2. ";ESP="Hay un descuadre de %2 en los movs. de contraasiento del %1. "';
      Text019@1019 : TextConst 'ENU="%3 %1 is out of balance due to the additional reporting currency. ";ESP="%3 %1 no cuadra debido a la divisa adicional. "';
      Text020@1020 : TextConst 'ENU=Please check that %2 is correct for each line.;ESP=Compruebe que %2 es correcto para cada l¡nea.';
      Text021@1021 : TextConst 'ENU=cannot be specified when using recurring journals.;ESP=no se puede utilizar en diarios peri¢dicos.';
      Text022@1022 : TextConst 'ENU=The Balance and Reversing Balance recurring methods can be used only for G/L accounts.;ESP=Los m‚todos recurrentes Saldo y Contrasiento saldo s¢lo se pueden com movs. de tipo Cuenta.';
      Text023@1023 : TextConst 'ENU=Allocations can only be used with recurring journals.;ESP=Distribuciones s¢lo se permiten en diarios peri¢dicos.';
      Text024@1024 : TextConst 'ENU=<Month Text>;ESP=<Month Text>';
      Text025@1025 : TextConst 'ENU=A maximum of %1 posting number series can be used in each journal.;ESP=Se puede utilizar un m ximo de %1 n£meros de serie de registro en cada diario.';
      Text026@1026 : TextConst 'ENU="%5 %2 is out of balance by %1 %7. ";ESP="%5 %2 descuadra por %1 %7. "';
      Text027@1027 : TextConst 'ENU="The lines in %1 are out of balance by %2 %5. ";ESP="Las l¡neas en %1 descuadran por %2 %5. "';
      Text028@1028 : TextConst 'ENU=The Balance and Reversing Balance recurring methods can be used only with Allocations.;ESP=Los m‚todos rec. de saldo y saldo rev. pueden usarse s¢lo con cuotas.';
      GenJnlTemplate@1029 : Record 80;
      GenJnlBatch@1030 : Record 232;
      GenJnlLine@1031 : Record 81;
      GenJnlLine2@1032 : Record 81;
      GenJnlLine3@1033 : Record 81;
      TempGenJnlLine4@1034 : TEMPORARY Record 81;
      GenJnlLine5@1035 : Record 81;
      LedgEntryDim@1036 : Record 355;
      GLEntry@1037 : Record 17;
      GLReg@1038 : Record 45;
      GLAcc@1039 : Record 15;
      GenJnlAlloc@1042 : Record 221;
      AccountingPeriod@1043 : Record 50;
      NoSeries@1044 : TEMPORARY Record 308;
      GLSetup@1045 : Record 98;
      FAJnlSetup@1046 : Record 5605;
      GenJnlLineTemp@1102601000 : TEMPORARY Record 81;
      GenJnlCheckLine@1047 : Codeunit 11;
      GenJnlPostLine@1048 : Codeunit 12;
      NoSeriesMgt@1049 : Codeunit 396;
      NoSeriesMgt2@1050 : ARRAY [10] OF Codeunit 396;
      DimMgt@1051 : Codeunit 408;
      ICOutboxMgt@1078 : Codeunit 427;
      Window@1052 : Dialog;
      GLRegNo@1053 : Integer;
      StartLineNo@1054 : Integer;
      StartLineNoReverse@1055 : Integer;
      LastDate@1056 : Date;
      LastDocType@1057 : Integer;
      LastDocNo@1058 : Code[20];
      LastPostedDocNo@1059 : Code[20];
      CurrentBalance@1060 : Decimal;
      CurrentBalanceReverse@1061 : Decimal;
      Day@1062 : Integer;
      Week@1063 : Integer;
      Month@1064 : Integer;
      MonthText@1065 : Text[30];
      NoOfRecords@1066 : Integer;
      NoOfReversingRecords@1067 : Integer;
      LineCount@1068 : Integer;
      NoOfPostingNoSeries@1069 : Integer;
      PostingNoSeriesNo@1070 : Integer;
      DocCorrection@1071 : Boolean;
      VATEntryCreated@1073 : Boolean;
      LastFAAddCurrExchRate@1074 : Decimal;
      LastCurrencyCode@1075 : Code[10];
      CurrencyBalance@1076 : Decimal;
      "0DF"@1077 : DateFormula;
      Text029@1041 : TextConst 'ENU="%1 %2 posted on %3 includes more than one customer, vendor or IC Partner. ";ESP="%1 %2, registrado el %3, incluye m s de un cliente, proveedor o IC asociada. "';
      Text030@1011 : TextConst 'ENU=You cannot enter G/L Account or Bank Account in both %1 and %2.;ESP=No puede introducir una cuenta o una cuenta bancaria en %1 y en %2.';
      Text031@1040 : TextConst 'ENU=Line No. %1 does not contain a G/L Account or Bank Account. When the %2 field contains an account number, either the %3 field or the %4 field must contain a G/L Account or Bank Account.;ESP=La l¡nea n§ %1 no incluye una cuenta o una cuenta bancaria. Si el campo %2 contiene un n£mero de cuenta, el campo %3 o el campo %4 deben contener una cuenta o una cuenta bancaria.';
      GLSetupFound@1079 : Boolean;
      Text1100001@1100001 : TextConst 'ENU=must be the same on all lines for the same transaction.;ESP=debe ser igual para todas las l¡neas de la misma transacci¢n.';
      LastTempTransNo@1100000 : Integer;
      Text1100100@1100002 : TextConst 'ENU=There must be one %1 Invoice, Credit Memo or Finance Charge Memo with the same %2 as journal line %3.;ESP=Debe haber una Factura, Abono o Doc. inter‚s de %1 con el mismo %2 que la l¡nea %3.';
      Text1100101@1100003 : TextConst 'ENU=You can not create a bill from more than one posted invoice when this contains Unrealized VAT.;ESP=No es posible crear un efecto a partir de m s de una factura registrada si contiene IVA no realizado.';

    LOCAL PROCEDURE Code@7();
    VAR
      GenJnlBatch2@1008 : Record 232;
      TempGenJnlLine@1010 : TEMPORARY Record 81;
      JnlLineDim@1000 : Record 356;
      TempJnlLineDim@1001 : TEMPORARY Record 356;
      TempJnlLineDim4@1002 : TEMPORARY Record 356;
      ICOutboxTransaction@1005 : Record 414;
      ICHandledInboxTransaction@1007 : Record 420;
      ICOutboxJnlLine@1006 : Record 415;
      TempGenJnlLine2@1011 : Record 81;
      UpdateAnalysisView@1003 : Codeunit 410;
      ICLastDate@1014 : Date;
      ICTransactionNo@1004 : Integer;
      ICLastDocType@1013 : Integer;
      CurrentICPartner@1009 : Code[20];
      ICLastDocNo@1012 : Code[20];
      VATPostingSetup@1015 : Record 325;
      BalVatPostingSetup@1016 : Record 325;
      CustLedgEntry@1100005 : Record 21;
      CustLedgEntry2@1100006 : Record 21;
      VendLedgEntry@1100007 : Record 25;
      ExistVATNOReal@1100008 : Boolean;
      IsBillFromJournal@1100009 : Boolean;
      i@1100012 : Integer;
    BEGIN
      WITH GenJnlLine DO BEGIN
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        IF RECORDLEVELLOCKING THEN BEGIN
          LOCKTABLE;
          GenJnlAlloc.LOCKTABLE;
        END;

        GenJnlTemplate.GET("Journal Template Name");
        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");

        // AJS 26.07.07
        // $001 Elimino el codigo que renumera las secciones de diario

        //IF STRLEN(INCSTR(GenJnlBatch.Name)) > MAXSTRLEN(GenJnlBatch.Name) THEN
        //  GenJnlBatch.FIELDERROR(
        //    Name,
        //    STRSUBSTNO(
        //       Text000,
        //      MAXSTRLEN(GenJnlBatch.Name)));

        IF GenJnlTemplate.Recurring THEN BEGIN
          SETRANGE("Posting Date",0D,WORKDATE);
          SETFILTER("Expiration Date",'%1 | %2..',0D,WORKDATE);
          GLSetup.GET;
        END;

        IF NOT FIND('=><') THEN BEGIN
          "Line No." := 0;
          COMMIT;
          EXIT;
        END;

        IF GenJnlTemplate.Recurring THEN
          Window.OPEN(
            Text001 +
            Text002 +
            Text003 +
            Text004 +
            Text005 +
            Text006)
        ELSE
          Window.OPEN(
            Text001 +
            Text002 +
            Text003 +
            Text007);
        Window.UPDATE(1,"Journal Batch Name");

        // Check lines
        LineCount := 0;
        StartLineNo := "Line No.";
        REPEAT
          LineCount := LineCount + 1;
          Window.UPDATE(2,LineCount);
          CheckRecurringLine(GenJnlLine);
          UpdateRecurringAmt(GenJnlLine);
          CheckAllocations(GenJnlLine);
          GenJnlLine5.COPY(GenJnlLine);
          PrepareGenJnlLineAddCurr(GenJnlLine5);
          JnlLineDim.SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
          JnlLineDim.SETRANGE("Journal Template Name",GenJnlLine5."Journal Template Name");
          JnlLineDim.SETRANGE("Journal Batch Name",GenJnlLine5."Journal Batch Name");
          JnlLineDim.SETRANGE("Journal Line No.",GenJnlLine5."Line No.");
          JnlLineDim.SETRANGE("Allocation Line No.",0);
          TempJnlLineDim.DELETEALL;
          DimMgt.CopyJnlLineDimToJnlLineDim(JnlLineDim,TempJnlLineDim);
          GenJnlCheckLine.RunCheck(GenJnlLine5,TempJnlLineDim);
          TempGenJnlLine := GenJnlLine5;
          TempGenJnlLine.INSERT;
          IF NEXT = 0 THEN
            FINDFIRST;
        UNTIL "Line No." = StartLineNo;
        IF GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany THEN
          CheckICDocument(TempGenJnlLine);
        NoOfRecords := LineCount;

        // Check balance
        LineCount := 0;
        LastDate := 0D;
        LastDocType := 0;
        LastDocNo := '';
        LastFAAddCurrExchRate := 0;
        GenJnlLineTemp.RESET;
        GenJnlLineTemp.DELETEALL;
        VATEntryCreated := FALSE;
        LastTempTransNo := 0;
        CurrentBalance := 0;
        CurrentBalanceReverse := 0;
        CurrencyBalance := 0;

        IF GenJnlTemplate."Force Doc. Balance" THEN
          GenJnlLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.")
        ELSE
          GenJnlLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Transaction No.");

        IF (GenJnlBatch."No. Series" <> '') AND (NOT RECORDLEVELLOCKING) THEN BEGIN
          GenJnlBatch2.SETRANGE("No. Series",GenJnlBatch."No. Series");
          IF GenJnlBatch2.FINDFIRST THEN BEGIN
            IF (GenJnlBatch2."Journal Template Name" = GenJnlBatch."Journal Template Name") AND (GenJnlBatch2.Name = GenJnlBatch.Name)
            THEN BEGIN
              IF GenJnlBatch2.NEXT <> 0 THEN
                LedgEntryDim.LOCKTABLE;
            END ELSE
              LedgEntryDim.LOCKTABLE;
          END;
        END;
        FINDSET(TRUE,FALSE);
        LastCurrencyCode := "Currency Code";
        REPEAT
          LineCount := LineCount + 1;
          Window.UPDATE(3,LineCount);
          Window.UPDATE(4,ROUND(LineCount / NoOfRecords * 10000,1));

          IF NOT EmptyLine THEN BEGIN
            IF (GenJnlBatch."No. Series" <> '') AND
               ("Document No." <> LastDocNo)
            THEN
              IF NOT GenJnlLine."Elect. Pmts Exported" THEN
                TESTFIELD("Document No.",NoSeriesMgt.GetNextNo(GenJnlBatch."No. Series","Posting Date",FALSE));
            IF ("Posting Date" <> LastDate) OR
               ("Document Type" <> LastDocType) OR ("Document No." <> LastDocNo) OR
               ("Transaction No." <> LastTempTransNo)
            THEN BEGIN
              IF Correction THEN
                GenJnlTemplate.TESTFIELD("Force Doc. Balance",TRUE);
              DocCorrection := Correction;
            END ELSE
              IF Correction <> DocCorrection THEN
                FIELDERROR(Correction,Text1100001);
          END;
          IF ("Posting Date" <> LastDate) OR
             (GenJnlTemplate."Force Doc. Balance" AND
             (("Document Type" <> LastDocType) OR ("Document No." <> LastDocNo))) OR
             (NOT GenJnlTemplate."Force Doc. Balance" AND
             ("Transaction No." <> LastTempTransNo))
          THEN BEGIN
            CheckBalance;
            IF ("Posting Date" <> LastDate) OR
               ("Document Type" <> LastDocType) OR ("Document No." <> LastDocNo)
            THEN BEGIN
            GenJnlLineTemp.RESET;
            GenJnlLineTemp.DELETEALL;
              VATEntryCreated := FALSE;
              CurrencyBalance := 0;
              LastCurrencyCode := "Currency Code";
            END;
          END;

          IF Amount <> 0 THEN BEGIN
            IF LastFAAddCurrExchRate <> "FA Add.-Currency Factor" THEN
              CheckAddExchRateBalance;
            IF (CurrentBalance = 0) AND (CurrentICPartner = '') THEN BEGIN
              StartLineNo := "Line No.";
              GenJnlLineTemp.RESET;
              GenJnlLineTemp.DELETEALL;
              VATEntryCreated := FALSE;
            END;
            IF CurrentBalanceReverse = 0 THEN
              StartLineNoReverse := "Line No.";
            UpdateLineBalance;
            CurrentBalance := CurrentBalance + "Balance (LCY)";
            IF "Recurring Method" >= "Recurring Method"::"RF Reversing Fixed" THEN
              CurrentBalanceReverse := CurrentBalanceReverse + "Balance (LCY)";

            IF ("Recurring Method" <> "Recurring Method"::" ") THEN
              CALCFIELDS("Allocated Amt. (LCY)");
            IF ("Recurring Method" = "Recurring Method"::" ") OR ("Amount (LCY)" <> -"Allocated Amt. (LCY)") THEN
              IF ("Currency Code" <> LastCurrencyCode) THEN
                LastCurrencyCode := ''
              ELSE
                IF ("Currency Code" <> '') AND (("Account No." = '') XOR ("Bal. Account No." = '')) THEN
                  IF ("Account No." <> '') THEN
                    CurrencyBalance := CurrencyBalance + Amount
                  ELSE
                    CurrencyBalance := CurrencyBalance - Amount;
          END;

          LastDate := "Posting Date";
          LastDocType := "Document Type";
          IF NOT EmptyLine THEN
            LastDocNo := "Document No.";
          LastTempTransNo := GenJnlLine."Transaction No.";
          LastFAAddCurrExchRate := "FA Add.-Currency Factor";
          IF GenJnlTemplate."Force Doc. Balance" THEN BEGIN
            IF NOT VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
              CLEAR(VATPostingSetup);
            IF NOT BalVatPostingSetup.GET("Bal. VAT Bus. Posting Group", "Bal. VAT Prod. Posting Group") THEN
              CLEAR(BalVatPostingSetup);
            VATEntryCreated :=
              VATEntryCreated OR
              (("Account Type" = "Account Type"::"G/L Account") AND ("Account No." <> '') AND
               ("Gen. Posting Type" IN ["Gen. Posting Type"::Purchase,"Gen. Posting Type"::Sale]) AND
               (VATPostingSetup."VAT %" <> 0)) OR
              (("Bal. Account Type" = "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '') AND
               ("Bal. Gen. Posting Type" IN ["Bal. Gen. Posting Type"::Purchase,"Bal. Gen. Posting Type"::Sale]) AND
               (BalVatPostingSetup."VAT %" <> 0));
            IF (("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"IC Partner"]) AND
                ("Account No." <> ''))
            THEN
              AddCustVendIC("Account Type", "Account No.");
            IF (("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,
                  "Bal. Account Type"::"IC Partner"]) AND
                ("Bal. Account No." <> ''))
            THEN
              AddCustVendIC("Bal. Account Type", "Bal. Account No.");
            IF (GenJnlLineTemp.COUNT > 1) AND VATEntryCreated THEN
              ERROR(
                Text009 +
                Text010,
                "Document Type","Document No.","Posting Date");
            IF (GenJnlLineTemp.COUNT > 1) AND (CurrentICPartner <> '') AND
               (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany)
            THEN
              ERROR(
                Text029,
                "Document Type","Document No.","Posting Date");
          END;
        UNTIL NEXT = 0;
        CheckBalance;
        CopyFields;
        IF NOT RECORDLEVELLOCKING THEN
          COMMIT;

        // Find next register no.
        LedgEntryDim.LOCKTABLE;
        GLEntry.LOCKTABLE;

        IF RECORDLEVELLOCKING THEN
          IF GLEntry.FINDLAST THEN;
        GLReg.LOCKTABLE;
        IF GLReg.FINDLAST THEN
          GLRegNo := GLReg."No." + 1
        ELSE
          GLRegNo := 1;
        // Post lines
        LineCount := 0;
        LastDocNo := '';
        LastPostedDocNo := '';
        TempGenJnlLine4.DELETEALL;
        TempJnlLineDim4.DELETEALL;
        NoOfReversingRecords := 0;

        IF GenJnlTemplate."Force Doc. Balance" THEN
          GenJnlLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.")
        ELSE
          GenJnlLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Transaction No.");

        FINDSET(TRUE,FALSE);
        REPEAT
          IF (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND NOT EmptyLine AND
             (("Posting Date" <> ICLastDate) OR ("Document Type" <> ICLastDocType) OR ("Document No." <> ICLastDocNo))
          THEN BEGIN
            CurrentICPartner := '';
            ICLastDate := "Posting Date";
            ICLastDocType := "Document Type";
            ICLastDocNo := "Document No.";
            TempGenJnlLine.RESET;
            TempGenJnlLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
            TempGenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
            TempGenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
            TempGenJnlLine.SETRANGE("Posting Date","Posting Date");
            TempGenJnlLine.SETRANGE("Document No.","Document No.");
            TempGenJnlLine.SETFILTER("IC Partner Code",'<>%1','');
            IF (TempGenJnlLine.FINDFIRST) AND (TempGenJnlLine."IC Partner Code" <> '') THEN BEGIN
              CurrentICPartner := TempGenJnlLine."IC Partner Code";
              IF TempGenJnlLine."IC Direction" = TempGenJnlLine."IC Direction"::Outgoing THEN BEGIN
                JnlLineDim.SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
                JnlLineDim.SETRANGE("Journal Template Name",TempGenJnlLine."Journal Template Name");
                JnlLineDim.SETRANGE("Journal Batch Name",TempGenJnlLine."Journal Batch Name");
                JnlLineDim.SETRANGE("Journal Line No.",TempGenJnlLine."Line No.");
                JnlLineDim.SETRANGE("Allocation Line No.",0);
                TempJnlLineDim.DELETEALL;
                DimMgt.CopyJnlLineDimToJnlLineDim(JnlLineDim,TempJnlLineDim);
                ICTransactionNo := ICOutboxMgt.CreateOutboxJnlTransaction(TempGenJnlLine,FALSE);
              END ELSE BEGIN
                IF ICHandledInboxTransaction.GET(
                     TempGenJnlLine."IC Partner Transaction No.",TempGenJnlLine."IC Partner Code",
                     ICHandledInboxTransaction."Transaction Source"::"Created by Partner",TempGenJnlLine."Document Type")
                THEN BEGIN
                  ICHandledInboxTransaction.LOCKTABLE;
                  ICHandledInboxTransaction.Status := ICHandledInboxTransaction.Status::Posted;
                  ICHandledInboxTransaction.MODIFY;
                END
              END;
            END
          END;
          GenJnlLine3 := GenJnlLine;
          IF GenJnlTemplate.Recurring THEN
            GenJnlLine2."Bill-to/Pay-to No." := TestNoCustVend(GenJnlLine2);
          WITH GenJnlLine3 DO BEGIN
            LineCount := LineCount + 1;
            IF CurrentICPartner <> '' THEN
              "IC Partner Code" := CurrentICPartner;
            Window.UPDATE(5,LineCount);
            Window.UPDATE(6,ROUND(LineCount / NoOfRecords * 10000,1));
            MakeRecurringTexts(GenJnlLine3);
            CheckDocumentNo(GenJnlLine3);
            GenJnlLine5.COPY(GenJnlLine3);
            PrepareGenJnlLineAddCurr(GenJnlLine5);

            // Change to avoid the blank GL line
            GenJnlPostLine.SetFromSettlement(FALSE);
            IF (((GenJnlLine5."Document Type" = GenJnlLine5."Document Type"::Payment) OR
                (GenJnlLine5."Document Type" = GenJnlLine5."Document Type"::"Credit Memo")) AND
              (GenJnlLine5."Applies-to Doc. Type" = GenJnlLine5."Applies-to Doc. Type"::Bill)) THEN
              GenJnlPostLine.SetFromSettlement(TRUE);

            // Change to avoid the blank GL line - end

            IF ((GenJnlLine5."Document Type" = GenJnlLine5."Document Type"::Payment) AND
              (GenJnlLine."Account Type" = GenJnlLine."Account Type"::Customer) AND
              (GenJnlLine5."Applies-to Doc. Type" = GenJnlLine5."Applies-to Doc. Type"::Invoice)) THEN BEGIN
                CustLedgEntry2.SETCURRENTKEY("Document No.","Document Type","Customer No.");
                CustLedgEntry2.SETRANGE("Document No.",GenJnlLine5."Applies-to Doc. No.");
                CustLedgEntry2.SETRANGE("Document Type",GenJnlLine5."Applies-to Doc. Type");
                CustLedgEntry2.SETRANGE("Customer No.",GenJnlLine5."Account No.");
                  IF CustLedgEntry2.FIND('-') THEN
                    IF ((CustLedgEntry2."Document Situation" = CustLedgEntry2."Document Situation"::"Closed BG/PO") AND
                      (CustLedgEntry2."Document Status" = CustLedgEntry2."Document Status"::Rejected)) THEN
                      GenJnlPostLine.SetFromSettlement(TRUE);
            END;

            GenJnlPostLine.SetIDBillSettlement(FALSE);
            IF GenJnlLine."Applies-to ID" <> '' THEN
              IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Customer THEN BEGIN
                CustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
                CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Bill);
                IF CustLedgEntry.FIND('-') THEN
                  GenJnlPostLine.SetIDBillSettlement(TRUE);
                CustLedgEntry.RESET;
                CustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
                CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Invoice);
                CustLedgEntry.SETRANGE("Document Situation",CustLedgEntry."Document Situation"::"Closed BG/PO");
                CustLedgEntry.SETRANGE("Document Status",CustLedgEntry."Document Status"::Rejected);
                IF CustLedgEntry.FINDFIRST THEN
                  GenJnlPostLine.SetIDBillSettlement(TRUE);
              END;

              IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Vendor THEN BEGIN
                VendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
                VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Bill);
                IF VendLedgEntry.FIND('-') THEN
                  GenJnlPostLine.SetIDBillSettlement(TRUE);
              END;

            GenJnlPostLine.SetBillFromJournal(FALSE);
            IsBillFromJournal := FALSE;
            IF ((GenJnlLine5."Document Type" = GenJnlLine5."Document Type"::Bill) AND
              (GenJnlLine5."Bill No." <> '')) THEN BEGIN
                GenJnlPostLine.SetBillFromJournal(TRUE);
                IsBillFromJournal := TRUE;
              END;


            JnlLineDim.SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
            JnlLineDim.SETRANGE("Journal Template Name",GenJnlLine5."Journal Template Name");
            JnlLineDim.SETRANGE("Journal Batch Name",GenJnlLine5."Journal Batch Name");
            JnlLineDim.SETRANGE("Journal Line No.",GenJnlLine5."Line No.");
            JnlLineDim.SETRANGE("Allocation Line No.",0);
            TempJnlLineDim.DELETEALL;
            DimMgt.CopyJnlLineDimToJnlLineDim(JnlLineDim,TempJnlLineDim);
            GenJnlPostLine.RunWithoutCheck(GenJnlLine5,TempJnlLineDim);
            IF (GenJnlTemplate.Type = GenJnlTemplate.Type::Intercompany) AND (CurrentICPartner <> '') AND
               ("IC Direction" = "IC Direction"::Outgoing) AND (ICTransactionNo > 0)
            THEN
              ICOutboxMgt.CreateOutboxJnlLine(ICTransactionNo,1,GenJnlLine5,TempJnlLineDim);
            IF ("Recurring Method" >= "Recurring Method"::"RF Reversing Fixed") AND ("Posting Date" <> 0D) THEN BEGIN
              "Posting Date" := "Posting Date" + 1;
              MultiplyAmounts(GenJnlLine3,-1);
              TempGenJnlLine4 := GenJnlLine3;
              TempGenJnlLine4."Reversing Entry" := TRUE;
              TempGenJnlLine4.INSERT;
              DimMgt.CopyJnlLineDimToJnlLineDim(TempJnlLineDim,TempJnlLineDim4);
              NoOfReversingRecords := NoOfReversingRecords + 1;
              "Posting Date" := "Posting Date" - 1;
            END;
            PostAllocations(GenJnlLine3,FALSE);
          END;
        UNTIL NEXT = 0;

        IF IsBillFromJournal THEN BEGIN
        FIND('-');
          i := 0;
          REPEAT
            IF (("Document Type" = "Document Type"::" ") AND
              ("Account Type" = "Account Type"::Customer) AND
              ("Applies-to Doc. Type" = "Applies-to Doc. Type"::Invoice)) THEN BEGIN
                i := i + 1;
                CustLedgEntry2.SETCURRENTKEY("Document No.","Document Type","Customer No.");
                CustLedgEntry2.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                CustLedgEntry2.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
                CustLedgEntry2.SETRANGE("Customer No.",GenJnlLine."Account No.");
                  IF CustLedgEntry2.FIND('-') THEN
                    ExistVATNOReal := GenJnlPostLine.CustFindVATSetup(VATPostingSetup,CustLedgEntry2,IsBillFromJournal);
            END ELSE BEGIN
              IF (("Document Type" = "Document Type"::" ") AND
                (GenJnlLine."Account Type" = "Account Type"::Vendor) AND
                ("Applies-to Doc. Type" = "Applies-to Doc. Type"::Invoice)) THEN BEGIN
                  i := i + 1;
                  VendLedgEntry.SETCURRENTKEY("Document No.","Document Type","Vendor No.");
                  VendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                  VendLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
                  VendLedgEntry.SETRANGE("Vendor No.",GenJnlLine."Account No.");
                    IF VendLedgEntry.FIND('-') THEN
                      ExistVATNOReal := GenJnlPostLine.VendFindVATSetup(VATPostingSetup,VendLedgEntry,IsBillFromJournal);
              END;
            END;
          UNTIL NEXT = 0;
          IF (GLSetup."Unrealized VAT") AND ExistVATNOReal AND (i > 1) THEN
            ERROR(Text1100101);
        END;


        // Post reversing lines
        LineCount := 0;
        LastDocNo := '';
        LastPostedDocNo := '';
        IF TempGenJnlLine4.FINDFIRST THEN
          REPEAT
            GenJnlLine3 := TempGenJnlLine4;
            TempJnlLineDim4.SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
            TempJnlLineDim4.SETRANGE("Journal Template Name",TempGenJnlLine4."Journal Template Name");
            TempJnlLineDim4.SETRANGE("Journal Batch Name",TempGenJnlLine4."Journal Batch Name");
            TempJnlLineDim4.SETRANGE("Journal Line No.",TempGenJnlLine4."Line No.");
            TempJnlLineDim4.SETRANGE("Allocation Line No.",0);
            TempJnlLineDim.DELETEALL;
            DimMgt.CopyJnlLineDimToJnlLineDim(TempJnlLineDim4,TempJnlLineDim);
            WITH GenJnlLine3 DO BEGIN
              LineCount := LineCount + 1;
              Window.UPDATE(7,LineCount);
              Window.UPDATE(8,ROUND(LineCount / NoOfReversingRecords * 10000,1));
              CheckDocumentNo(GenJnlLine3);
              GenJnlLine5.COPY(GenJnlLine3);
              PrepareGenJnlLineAddCurr(GenJnlLine5);
              JnlLineDim.SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
              JnlLineDim.SETRANGE("Journal Template Name",GenJnlLine5."Journal Template Name");
              JnlLineDim.SETRANGE("Journal Batch Name",GenJnlLine5."Journal Batch Name");
              JnlLineDim.SETRANGE("Journal Line No.",GenJnlLine5."Line No.");
              JnlLineDim.SETRANGE("Allocation Line No.",0);
              TempJnlLineDim.DELETEALL;
              DimMgt.CopyJnlLineDimToJnlLineDim(JnlLineDim,TempJnlLineDim);
              GenJnlPostLine.RunWithCheck(GenJnlLine5,TempJnlLineDim);
              PostAllocations(GenJnlLine3,TRUE);
            END;
          UNTIL TempGenJnlLine4.NEXT = 0;

        // Copy register no. and current journal batch name to general journal
        IF GLReg.FINDLAST THEN
          GLRegNo := GLReg."No."
        ELSE
          GLRegNo := 0;

        INIT;
        "Line No." := GLRegNo;

        // Update/delete lines
        IF GLRegNo <> 0 THEN BEGIN
          IF NOT RECORDLEVELLOCKING THEN BEGIN
            JnlLineDim.LOCKTABLE(TRUE,TRUE);
            LOCKTABLE(TRUE,TRUE);
          END;
          IF GenJnlTemplate.Recurring THEN BEGIN
            // Recurring journal
            LineCount := 0;
            GenJnlLine2.COPYFILTERS(GenJnlLine);
            GenJnlLine2.FINDSET(TRUE,FALSE);
            REPEAT
              LineCount := LineCount + 1;
              Window.UPDATE(9,LineCount);
              Window.UPDATE(10,ROUND(LineCount / NoOfRecords * 10000,1));
              IF GenJnlLine2."Posting Date" <> 0D THEN
                GenJnlLine2.VALIDATE(
                  "Posting Date",CALCDATE(GenJnlLine2."Recurring Frequency",GenJnlLine2."Posting Date"));
              IF NOT
                 (GenJnlLine2."Recurring Method" IN
                  [GenJnlLine2."Recurring Method"::"F  Fixed",
                   GenJnlLine2."Recurring Method"::"RF Reversing Fixed"])
              THEN
                MultiplyAmounts(GenJnlLine2,0);
              GenJnlLine2.MODIFY;
            UNTIL GenJnlLine2.NEXT = 0;
          END ELSE BEGIN
            // Not a recurring journal
            GenJnlLine2.COPY(GenJnlLine);
            GenJnlLine2.SETFILTER("Account No.",'<>%1','');
            IF GenJnlLine2.FINDLAST THEN; // Remember the last line
            JnlLineDim.SETRANGE("Table ID",DATABASE::"Gen. Journal Line");
            JnlLineDim.COPYFILTER("Journal Template Name",GenJnlLine."Journal Template Name");
            JnlLineDim.COPYFILTER("Journal Batch Name",GenJnlLine."Journal Batch Name");
            JnlLineDim.SETRANGE("Allocation Line No.",0);
            GenJnlLine3.COPY(GenJnlLine);
            IF GenJnlLine3.FINDSET(TRUE,FALSE) THEN
              REPEAT
                JnlLineDim.SETRANGE("Journal Line No.",GenJnlLine3."Line No.");
                JnlLineDim.DELETEALL;
                GenJnlLine3.DELETE;
              UNTIL GenJnlLine3.NEXT = 0;
            GenJnlLine3.RESET;
            GenJnlLine3.SETRANGE("Journal Template Name","Journal Template Name");
            GenJnlLine3.SETRANGE("Journal Batch Name","Journal Batch Name");

            // AJS 27.08.2007
            // $002 ELiminar el codigo que se encarga de renumerar las secciones de diario

            //IF NOT GenJnlLine3.FINDLAST THEN
            //  IF INCSTR("Journal Batch Name") <> '' THEN BEGIN
            //    GenJnlBatch.DELETE;
            //    IF GenJnlTemplate.Type = GenJnlTemplate.Type::Assets THEN
            //      FAJnlSetup.IncGenJnlBatchName(GenJnlBatch);
            //    GenJnlBatch.Name := INCSTR("Journal Batch Name");
            //    IF GenJnlBatch.INSERT THEN;
            //    "Journal Batch Name" := GenJnlBatch.Name;
            //  END;

            GenJnlLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
            IF (GenJnlBatch."No. Series" = '') AND NOT GenJnlLine3.FINDLAST THEN BEGIN
              GenJnlLine3.INIT;
              GenJnlLine3."Journal Template Name" := "Journal Template Name";
              GenJnlLine3."Journal Batch Name" := "Journal Batch Name";
              GenJnlLine3."Line No." := 10000;
              GenJnlLine3.INSERT;
              TempGenJnlLine2 := GenJnlLine2;
              TempGenJnlLine2."Balance (LCY)" := 0;
              GenJnlLine3.SetUpNewLine(TempGenJnlLine2,0,TRUE);
              GenJnlLine3.MODIFY;
            END;
          END;
        END;
        IF GenJnlBatch."No. Series" <> '' THEN
          NoSeriesMgt.SaveNoSeries;
        IF NoSeries.FINDSET THEN
          REPEAT
            EVALUATE(PostingNoSeriesNo,NoSeries.Description);
            NoSeriesMgt2[PostingNoSeriesNo].SaveNoSeries;
          UNTIL NoSeries.NEXT = 0;
        IF GLSetupFound THEN
          GLSetup.MODIFY;
        COMMIT;
        CLEAR(GenJnlCheckLine);
        CLEAR(GenJnlPostLine);
      END;
      UpdateAnalysisView.UpdateAll(0,TRUE);
      COMMIT;
    END;

    LOCAL PROCEDURE CheckBalance@8();
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF CurrentBalance <> 0 THEN BEGIN
          GET("Journal Template Name","Journal Batch Name",StartLineNo);
          IF GenJnlTemplate."Force Doc. Balance" THEN
            ERROR(
              Text012 +
              Text013,
              CurrentBalance,LastDocNo,FIELDCAPTION("Posting Date"),FIELDCAPTION("Document Type"),
              FIELDCAPTION("Document No."),FIELDCAPTION(Amount));
          ERROR(
            Text014 +
            Text015,
            LastDate,CurrentBalance,FIELDCAPTION("Posting Date"),FIELDCAPTION(Amount));
        END;
        IF CurrentBalanceReverse <> 0 THEN BEGIN
          GET("Journal Template Name","Journal Batch Name",StartLineNoReverse);
          IF GenJnlTemplate."Force Doc. Balance" THEN
            ERROR(
              Text016 +
              Text017,
              CurrentBalanceReverse,LastDocNo,FIELDCAPTION("Recurring Method"),FIELDCAPTION("Document No."));
          ERROR(
            Text018 +
            Text017,
            LastDate,CurrentBalanceReverse,FIELDCAPTION("Recurring Method"),FIELDCAPTION("Posting Date"));
        END;
        IF (LastCurrencyCode <> '') AND (CurrencyBalance <> 0) THEN BEGIN
          GET("Journal Template Name","Journal Batch Name",StartLineNo);
          IF GenJnlTemplate."Force Doc. Balance" THEN
            ERROR(
              Text026 +
              Text013,
              CurrencyBalance,LastDocNo,FIELDCAPTION("Posting Date"),FIELDCAPTION("Document Type"),
              FIELDCAPTION("Document No."),FIELDCAPTION(Amount),
              LastCurrencyCode);
          ERROR(
            Text027 +
            Text015,
            LastDate,CurrencyBalance,FIELDCAPTION("Posting Date"),FIELDCAPTION(Amount),LastCurrencyCode);
        END;
      END;
    END;

    PROCEDURE CheckAddExchRateBalance@9();
    BEGIN
      WITH GenJnlLine DO
        IF CurrentBalance <> 0 THEN
          ERROR(
            Text019 +
            Text020,
            LastDocNo,FIELDCAPTION("FA Add.-Currency Factor"),FIELDCAPTION("Document No."));
    END;

    LOCAL PROCEDURE CheckRecurringLine@1(VAR GenJnlLine2@1000 : Record 81);
    BEGIN
      WITH GenJnlLine2 DO BEGIN
        IF "Account No." <> '' THEN
          IF GenJnlTemplate.Recurring THEN BEGIN
            TESTFIELD("Recurring Method");
            TESTFIELD("Recurring Frequency");
            IF "Bal. Account No." <> '' THEN
              FIELDERROR("Bal. Account No.",Text021);
          END ELSE BEGIN
            TESTFIELD("Recurring Method",0);
            TESTFIELD("Recurring Frequency","0DF");
          END;
      END;
    END;

    LOCAL PROCEDURE UpdateRecurringAmt@2(VAR GenJnlLine2@1000 : Record 81);
    BEGIN
      WITH GenJnlLine2 DO BEGIN
        IF ("Account No." <> '') AND
           ("Recurring Method" IN
             ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"])
        THEN BEGIN
          GLEntry.LOCKTABLE;
          IF NOT RECORDLEVELLOCKING THEN BEGIN
            GenJnlAlloc.LOCKTABLE(TRUE,TRUE);
            LOCKTABLE(TRUE,TRUE);
          END;
          IF "Account Type" = "Account Type"::"G/L Account" THEN BEGIN
            GLAcc."No." := "Account No.";
            GLAcc.SETRANGE("Date Filter",0D,"Posting Date");
            IF GLSetup."Additional Reporting Currency" <> '' THEN BEGIN
              "Source Currency Code" := GLSetup."Additional Reporting Currency";
              GLAcc.CALCFIELDS(GLAcc."Additional-Currency Net Change");
              "Source Currency Amount" := -GLAcc."Additional-Currency Net Change";
              GenJnlAlloc.UpdateAllocationsAddCurr(GenJnlLine2,"Source Currency Amount");
            END;
            GLAcc.CALCFIELDS("Net Change");
            VALIDATE(Amount,-GLAcc."Net Change");
          END ELSE
            ERROR(
              Text022);
        END;
      END;
    END;

    LOCAL PROCEDURE CheckAllocations@3(VAR GenJnlLine2@1000 : Record 81);
    BEGIN
      WITH GenJnlLine2 DO BEGIN
        IF "Account No." <> '' THEN BEGIN
          IF "Recurring Method" IN
             ["Recurring Method"::"B  Balance",
              "Recurring Method"::"RB Reversing Balance"]
          THEN BEGIN
            GenJnlAlloc.RESET;
            GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
            GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
            GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
            IF NOT GenJnlAlloc.FINDFIRST THEN
              ERROR(
                Text028);
          END;

          GenJnlAlloc.RESET;
          GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
          GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
          GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
          GenJnlAlloc.SETFILTER(Amount,'<>0');
          IF GenJnlAlloc.FINDFIRST THEN BEGIN
            IF NOT GenJnlTemplate.Recurring THEN
              ERROR(Text023);
            GenJnlAlloc.SETRANGE("Account No.",'');
            IF GenJnlAlloc.FINDFIRST THEN
              GenJnlAlloc.TESTFIELD("Account No.");
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE MakeRecurringTexts@4(VAR GenJnlLine2@1000 : Record 81);
    BEGIN
      WITH GenJnlLine2 DO BEGIN
        IF ("Account No." <> '') AND ("Recurring Method" <> 0) THEN BEGIN
          Day := DATE2DMY("Posting Date",1);
          Week := DATE2DWY("Posting Date",2);
          Month := DATE2DMY("Posting Date",2);
          MonthText := FORMAT("Posting Date",0,Text024);
          AccountingPeriod.SETRANGE("Starting Date",0D,"Posting Date");
          IF NOT AccountingPeriod.FINDLAST THEN
            AccountingPeriod.Name := '';
          "Document No." :=
            DELCHR(
              PADSTR(
                STRSUBSTNO("Document No.",Day,Week,Month,MonthText,AccountingPeriod.Name),
                MAXSTRLEN("Document No.")),
              '>');
          Description :=
            DELCHR(
              PADSTR(
                STRSUBSTNO(Description,Day,Week,Month,MonthText,AccountingPeriod.Name),
                MAXSTRLEN(Description)),
              '>');
        END;
      END;
    END;

    LOCAL PROCEDURE PostAllocations@5(VAR AllocateGenJnlLine@1000 : Record 81;Reversing@1001 : Boolean);
    VAR
      JnlLineDim@1002 : Record 356;
      TempJnlLineDim@1003 : TEMPORARY Record 356;
    BEGIN
      WITH AllocateGenJnlLine DO BEGIN
        IF "Account No." <> '' THEN BEGIN
          GenJnlAlloc.RESET;
          GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
          GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
          GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
          GenJnlAlloc.SETFILTER("Account No.",'<>%1','');
          IF GenJnlAlloc.FINDSET(TRUE,FALSE) THEN BEGIN
            GenJnlLine2.INIT;
            GenJnlLine2."Account Type" := GenJnlLine2."Account Type"::"G/L Account";
            GenJnlLine2."Posting Date" := "Posting Date";
            GenJnlLine2."Document Type" := "Document Type";
            GenJnlLine2."Document No." := "Document No.";
            GenJnlLine2.Description := Description;
            GenJnlLine2."Source Code" := "Source Code";
            GenJnlLine2."Journal Batch Name" := "Journal Batch Name";
            GenJnlLine2."Line No." := "Line No.";
            GenJnlLine2."Reason Code" := "Reason Code";
            GenJnlLine2.Correction := Correction;
            GenJnlLine2."Transaction No." := "Transaction No.";
            GenJnlLine2."Recurring Method" := AllocateGenJnlLine."Recurring Method";
            IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor] THEN BEGIN
              GenJnlLine2."Bill-to/Pay-to No." := "Bill-to/Pay-to No.";
              GenJnlLine2."Ship-to/Order Address Code" := "Ship-to/Order Address Code";
            END;
            REPEAT
              GenJnlLine2."Account No." := GenJnlAlloc."Account No.";
              GenJnlLine2.Amount := GenJnlAlloc.Amount;
              GenJnlLine2."Amount (LCY)" := GenJnlAlloc.Amount;
              GenJnlLine2."Shortcut Dimension 1 Code" := GenJnlAlloc."Shortcut Dimension 1 Code";
              GenJnlLine2."Shortcut Dimension 2 Code" := GenJnlAlloc."Shortcut Dimension 2 Code";
              GenJnlLine2."Gen. Posting Type" := GenJnlAlloc."Gen. Posting Type";
              GenJnlLine2."Gen. Bus. Posting Group" := GenJnlAlloc."Gen. Bus. Posting Group";
              GenJnlLine2."Gen. Prod. Posting Group" := GenJnlAlloc."Gen. Prod. Posting Group";
              GenJnlLine2."VAT Bus. Posting Group" := GenJnlAlloc."VAT Bus. Posting Group";
              GenJnlLine2."VAT Prod. Posting Group" := GenJnlAlloc."VAT Prod. Posting Group";
              GenJnlLine2."Tax Area Code" := GenJnlAlloc."Tax Area Code";
              GenJnlLine2."Tax Liable" := GenJnlAlloc."Tax Liable";
              GenJnlLine2."Tax Group Code" := GenJnlAlloc."Tax Group Code";
              GenJnlLine2."Use Tax" := GenJnlAlloc."Use Tax";
              GenJnlLine2."VAT Calculation Type" := GenJnlAlloc."VAT Calculation Type";
              GenJnlLine2."VAT Amount" := GenJnlAlloc."VAT Amount";
              GenJnlLine2."VAT Base Amount" := GenJnlAlloc.Amount - GenJnlAlloc."VAT Amount";
              GenJnlLine2."VAT %" := GenJnlAlloc."VAT %";
              GenJnlLine2."Source Currency Amount" := GenJnlAlloc."Additional-Currency Amount";
              GenJnlLine2."Allow Zero-Amount Posting" := TRUE;
              PrepareGenJnlLineAddCurr(GenJnlLine2);
              IF GenJnlTemplate.Recurring THEN
                GenJnlLine2."Bill-to/Pay-to No." := TestNoCustVend(GenJnlLine2);
              JnlLineDim.SETRANGE("Table ID",DATABASE::"Gen. Jnl. Allocation");
              JnlLineDim.SETRANGE("Journal Template Name",GenJnlAlloc."Journal Template Name");
              JnlLineDim.SETRANGE("Journal Batch Name",GenJnlAlloc."Journal Batch Name");
              JnlLineDim.SETRANGE("Journal Line No.",GenJnlAlloc."Journal Line No.");
              JnlLineDim.SETRANGE("Allocation Line No.",GenJnlAlloc."Line No.");
              TempJnlLineDim.DELETEALL;
              DimMgt.CopyJnlLineDimToJnlLineDim(JnlLineDim,TempJnlLineDim);
              IF NOT Reversing THEN BEGIN
                GenJnlPostLine.RunWithCheck(GenJnlLine2,TempJnlLineDim);
                IF "Recurring Method" IN
                   ["Recurring Method"::"V  Variable","Recurring Method"::"B  Balance"]
                THEN BEGIN
                  GenJnlAlloc.Amount := 0;
                  GenJnlAlloc."Additional-Currency Amount" := 0;
                  GenJnlAlloc.MODIFY;
                END;
              END ELSE BEGIN
                MultiplyAmounts(GenJnlLine2,-1);
                GenJnlLine2."Reversing Entry" := TRUE;
                GenJnlPostLine.RunWithCheck(GenJnlLine2,TempJnlLineDim);
                IF "Recurring Method" IN
                   ["Recurring Method"::"RV Reversing Variable",
                    "Recurring Method"::"RB Reversing Balance"]
                THEN BEGIN
                  GenJnlAlloc.Amount := 0;
                  GenJnlAlloc."Additional-Currency Amount" := 0;
                  GenJnlAlloc.MODIFY;
                END;
              END;
            UNTIL GenJnlAlloc.NEXT = 0;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE MultiplyAmounts@6(VAR GenJnlLine2@1000 : Record 81;Factor@1001 : Decimal);
    BEGIN
      WITH GenJnlLine2 DO BEGIN
        IF "Account No." <> '' THEN BEGIN
          Amount := Amount * Factor;
          "Debit Amount" := "Debit Amount" * Factor;
          "Credit Amount" := "Credit Amount" * Factor;
          "Amount (LCY)" := "Amount (LCY)" * Factor;
          "Balance (LCY)" := "Balance (LCY)" * Factor;
          "Sales/Purch. (LCY)" := "Sales/Purch. (LCY)" * Factor;
          "Profit (LCY)" := "Profit (LCY)" * Factor;
          "Inv. Discount (LCY)" := "Inv. Discount (LCY)" * Factor;
          Quantity := Quantity * Factor;
          "VAT Amount" := "VAT Amount" * Factor;
          "VAT Base Amount" := "VAT Base Amount" * Factor;
          "VAT Amount (LCY)" := "VAT Amount (LCY)" * Factor;
          "VAT Base Amount (LCY)" := "VAT Base Amount (LCY)" * Factor;
          "Source Currency Amount" := "Source Currency Amount" * Factor;
          IF "Job No." <> '' THEN BEGIN
            "Job Quantity" := "Job Quantity" * Factor;
            "Job Total Cost (LCY)" := "Job Total Cost (LCY)" * Factor;
            "Job Total Price (LCY)" := "Job Total Price (LCY)" * Factor;
            "Job Line Amount (LCY)" := "Job Line Amount (LCY)" * Factor;
            "Job Total Cost" := "Job Total Cost" * Factor;
            "Job Total Price" := "Job Total Price" * Factor;
            "Job Line Amount" := "Job Line Amount" * Factor;
            "Job Line Discount Amount" := "Job Line Discount Amount" * Factor;
            "Job Line Disc. Amount (LCY)" := "Job Line Disc. Amount (LCY)" * Factor;
          END;
        END;
      END;
    END;

    PROCEDURE CheckDocumentNo@11(VAR GenJnlLine2@1000 : Record 81);
    BEGIN
      WITH GenJnlLine2 DO BEGIN
        IF "Posting No. Series" = '' THEN
          "Posting No. Series" := GenJnlBatch."No. Series"
        ELSE
          IF NOT EmptyLine THEN
            IF "Document No." = LastDocNo THEN
              "Document No." := LastPostedDocNo
            ELSE BEGIN
              IF NOT NoSeries.GET("Posting No. Series") THEN BEGIN
                NoOfPostingNoSeries := NoOfPostingNoSeries + 1;
                IF NoOfPostingNoSeries > ARRAYLEN(NoSeriesMgt2) THEN
                  ERROR(
                    Text025,
                    ARRAYLEN(NoSeriesMgt2));
                NoSeries.Code := "Posting No. Series";
                NoSeries.Description := FORMAT(NoOfPostingNoSeries);
                NoSeries.INSERT;
              END;
              LastDocNo := "Document No.";
              EVALUATE(PostingNoSeriesNo,NoSeries.Description);
              "Document No." :=
                NoSeriesMgt2[PostingNoSeriesNo].GetNextNo("Posting No. Series","Posting Date",TRUE);
              LastPostedDocNo := "Document No.";
            END;
      END;
    END;

    PROCEDURE PrepareGenJnlLineAddCurr@10(VAR GenJnlLine@1000 : Record 81);
    BEGIN
      IF (GLSetup."Additional Reporting Currency" <> '') AND
         (GenJnlLine."Recurring Method" IN
          [GenJnlLine."Recurring Method"::"B  Balance",
           GenJnlLine."Recurring Method"::"RB Reversing Balance"])
      THEN BEGIN
        GenJnlLine."Source Currency Code" := GLSetup."Additional Reporting Currency";
        IF (GenJnlLine.Amount = 0) AND
           (GenJnlLine."Source Currency Amount" <> 0)
        THEN BEGIN
          GenJnlLine."Additional-Currency Posting" :=
            GenJnlLine."Additional-Currency Posting"::"Additional-Currency Amount Only";
          GenJnlLine.Amount := GenJnlLine."Source Currency Amount";
          GenJnlLine."Source Currency Amount" := 0;
        END;
      END;
    END;

    PROCEDURE CopyFields@12();
    VAR
      GenJnlLine4@1000 : Record 81;
      GenJnlLine6@1001 : Record 81;
      CheckAmount@1002 : Decimal;
      GenJnlLine7@1003 : Record 81;
    BEGIN
      GenJnlLine6.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
      GenJnlLine4.FILTERGROUP(2);
      GenJnlLine4.COPY(GenJnlLine);
      GenJnlLine4.FILTERGROUP(0);
      GenJnlLine6.FILTERGROUP(2);
      GenJnlLine6.COPY(GenJnlLine);
      GenJnlLine6.FILTERGROUP(0);
      GenJnlLine4.SETFILTER(
         "Account Type",'%1|%2',GenJnlLine4."Account Type"::Customer,GenJnlLine4."Account Type"::Vendor);
      GenJnlLine4.SETRANGE("Bal. Account No.",'');
      IF GenJnlLine4.FINDSET THEN
        REPEAT
          GenJnlLine6.SETRANGE("Posting Date",GenJnlLine4."Posting Date");
          GenJnlLine6.SETRANGE("Document No.",GenJnlLine4."Document No.");
          GenJnlLine6.SETRANGE("Bill-to/Pay-to No.",'');
          CheckAmount := 0;
          IF GenJnlLine6.FINDSET(TRUE,TRUE) THEN
            REPEAT
              IF (GenJnlLine6."Account No." = '') <> (GenJnlLine6."Bal. Account No." = '') THEN BEGIN
                IF (GenJnlLine4."Account Type" = GenJnlLine4."Account Type"::Customer) AND
                   (GenJnlLine6."Gen. Posting Type" = GenJnlLine6."Gen. Posting Type"::Purchase) OR
                   (GenJnlLine4."Account Type" = GenJnlLine4."Account Type"::Vendor) AND
                   (GenJnlLine6."Gen. Posting Type" = GenJnlLine6."Gen. Posting Type"::Sale)
                THEN
                  GenJnlLine6.FIELDERROR("Gen. Posting Type");
                IF (GenJnlLine4."Account Type" = GenJnlLine4."Account Type"::Customer) AND
                   (GenJnlLine6."Bal. Gen. Posting Type" = GenJnlLine6."Bal. Gen. Posting Type"::Purchase) OR
                   (GenJnlLine4."Account Type" = GenJnlLine4."Account Type"::Vendor) AND
                   (GenJnlLine6."Bal. Gen. Posting Type" = GenJnlLine6."Bal. Gen. Posting Type"::Sale)
                THEN
                  GenJnlLine6.FIELDERROR("Bal. Gen. Posting Type");
                GenJnlLine7 := GenJnlLine6;
                GenJnlLine7."Bill-to/Pay-to No." := GenJnlLine4."Bill-to/Pay-to No.";
                GenJnlLine7."Ship-to/Order Address Code" := GenJnlLine4."Ship-to/Order Address Code";
                GenJnlLine7.MODIFY;
                CheckAmount := CheckAmount + GenJnlLine6.Amount;
              END;
            UNTIL (GenJnlLine6.NEXT = 0) OR (-GenJnlLine4.Amount = CheckAmount);
        UNTIL GenJnlLine4.NEXT = 0;

      GenJnlLine4.SETRANGE("Account Type");
      GenJnlLine4.SETRANGE("Bal. Account No.");
      GenJnlLine4.SETFILTER(
          "Bal. Account Type",'%1|%2',GenJnlLine4."Bal. Account Type"::Customer,GenJnlLine4."Bal. Account Type"::Vendor);
      GenJnlLine4.SETRANGE("Account No.",'');
      IF GenJnlLine4.FINDSET THEN
        REPEAT
          GenJnlLine6.SETRANGE("Posting Date",GenJnlLine4."Posting Date");
          GenJnlLine6.SETRANGE("Document No.",GenJnlLine4."Document No.");
          GenJnlLine6.SETRANGE("Bill-to/Pay-to No.",'');
          CheckAmount := 0;
          IF GenJnlLine6.FINDSET(TRUE,TRUE) THEN
            REPEAT
              IF (GenJnlLine6."Account No." = '') <> (GenJnlLine6."Bal. Account No." = '') THEN BEGIN
                IF (GenJnlLine4."Bal. Account Type" = GenJnlLine4."Bal. Account Type"::Customer) AND
                   (GenJnlLine6."Bal. Gen. Posting Type" = GenJnlLine6."Bal. Gen. Posting Type"::Purchase) OR
                   (GenJnlLine4."Bal. Account Type" = GenJnlLine4."Bal. Account Type"::Vendor) AND
                   (GenJnlLine6."Bal. Gen. Posting Type" = GenJnlLine6."Bal. Gen. Posting Type"::Sale)
                THEN
                  GenJnlLine6.FIELDERROR("Bal. Gen. Posting Type");
                IF (GenJnlLine4."Bal. Account Type" = GenJnlLine4."Bal. Account Type"::Customer) AND
                   (GenJnlLine6."Gen. Posting Type" = GenJnlLine6."Gen. Posting Type"::Purchase) OR
                   (GenJnlLine4."Bal. Account Type" = GenJnlLine4."Bal. Account Type"::Vendor) AND
                   (GenJnlLine6."Gen. Posting Type" = GenJnlLine6."Gen. Posting Type"::Sale)
                THEN
                  GenJnlLine6.FIELDERROR("Gen. Posting Type");
                GenJnlLine7 := GenJnlLine6;
                GenJnlLine7."Bill-to/Pay-to No." := GenJnlLine4."Bill-to/Pay-to No.";
                GenJnlLine7."Ship-to/Order Address Code" := GenJnlLine4."Ship-to/Order Address Code";
                GenJnlLine7.MODIFY;
                CheckAmount := CheckAmount + GenJnlLine6.Amount;
              END;
            UNTIL (GenJnlLine6.NEXT = 0) OR (-GenJnlLine4.Amount = CheckAmount);
        UNTIL GenJnlLine4.NEXT = 0;
    END;

    PROCEDURE CheckICDocument@13(VAR TempGenJnlLine1@1001 : TEMPORARY Record 81);
    VAR
      CurrentICPartner@1000 : Code[20];
      TempGenJnlLine2@1002 : TEMPORARY Record 81;
    BEGIN
      WITH TempGenJnlLine1 DO BEGIN
        SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        FIND('-');
        REPEAT
          IF (("Posting Date" <> LastDate) OR ("Document Type" <> LastDocType) OR ("Document No." <> LastDocNo)) THEN BEGIN
            TempGenJnlLine2 :=TempGenJnlLine1;
            SETRANGE("Posting Date","Posting Date");
            SETRANGE("Document No.","Document No.");
            SETFILTER("IC Partner Code",'<>%1','');
            IF FIND('-') THEN
              CurrentICPartner := "IC Partner Code"
            ELSE
              CurrentICPartner := '';
            SETRANGE("Posting Date");
            SETRANGE("Document No.");
            SETRANGE("IC Partner Code");
            LastDate := "Posting Date";
            LastDocType := "Document Type";
            LastDocNo := "Document No.";
            TempGenJnlLine1 := TempGenJnlLine2;
          END;
          IF (CurrentICPartner <> '') AND ("IC Direction" = "IC Direction"::Outgoing) THEN BEGIN
            IF ("Account Type" IN ["Account Type"::"G/L Account", "Account Type"::"Bank Account"]) AND
               ("Bal. Account Type" IN ["Bal. Account Type"::"G/L Account", "Account Type"::"Bank Account"]) AND
               ("Account No." <> '') AND
               ("Bal. Account No." <> '')
            THEN
              ERROR(Text030,FIELDCAPTION("Account No."),FIELDCAPTION("Bal. Account No."));
            IF (("Account Type" IN ["Account Type"::"G/L Account", "Account Type"::"Bank Account"]) AND ("Account No." <> '')) XOR
               (("Bal. Account Type" IN ["Bal. Account Type"::"G/L Account", "Account Type"::"Bank Account"]) AND
                ("Bal. Account No." <> ''))
            THEN
              TESTFIELD("IC Partner G/L Acc. No.")
            ELSE
              IF "IC Partner G/L Acc. No." <> '' THEN
                ERROR(Text031,
                  "Line No.",FIELDCAPTION("IC Partner G/L Acc. No."),FIELDCAPTION("Account No."),
                   FIELDCAPTION("Bal. Account No."));
          END ELSE
            TESTFIELD("IC Partner G/L Acc. No.",'');
        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE AddCustVendIC@14(AccountType@1000 : 'G/L Account, Customer, Vendor, Bank Account, Fixed Asset, IC Partner';AccountNo@1001 : Code[20]);
    BEGIN
      GenJnlLineTemp.SETRANGE("Account Type",AccountType);
      GenJnlLineTemp.SETRANGE("Account No.",AccountNo);
      IF GenJnlLineTemp.FINDFIRST THEN
        EXIT;

      GenJnlLineTemp.RESET;
      IF GenJnlLineTemp.FINDLAST THEN
        GenJnlLineTemp."Line No." := GenJnlLineTemp."Line No." + 10000
      ELSE
        GenJnlLineTemp."Line No." := 10000;

      GenJnlLineTemp."Account Type" := AccountType;
      GenJnlLineTemp."Account No." := AccountNo;
      GenJnlLineTemp.INSERT;
    END;

    PROCEDURE TestNoCustVend@1100000(GenJnlLine6@1100001 : Record 81) NoCustVend@1100000 : Code[20];
    VAR
      GenJnlLine7@1100002 : Record 81;
    BEGIN
      WITH GenJnlLine6 DO BEGIN
        IF "Bill-to/Pay-to No." <> '' THEN
                EXIT("Bill-to/Pay-to No.");

        GenJnlLine7.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Transaction No.");
        GenJnlLine7.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
        GenJnlLine7.SETRANGE("Journal Batch Name","Journal Batch Name");
        GenJnlLine7.SETRANGE("Posting Date","Posting Date");
        GenJnlLine7.SETRANGE("Transaction No.","Transaction No.");
        GenJnlLine7.SETFILTER(
          "Document Type",
          '%1|%2|%3',
          GenJnlLine7."Document Type"::Invoice,
          GenJnlLine7."Document Type"::"Credit Memo",
          GenJnlLine7."Document Type"::"Finance Charge Memo");
          GenJnlLine7.SETRANGE("Document No.",GenJnlLine."Document No.");
        CASE GenJnlLine6."Gen. Posting Type" OF
          GenJnlLine6."Gen. Posting Type"::Sale:
            GenJnlLine7.SETRANGE("Account Type",GenJnlLine7."Account Type"::Customer);
          GenJnlLine6."Gen. Posting Type"::Purchase:
            GenJnlLine7.SETRANGE("Account Type",GenJnlLine7."Account Type"::Vendor);
        ELSE
          EXIT;
        END;
        IF NOT GenJnlLine7.FIND('-') OR (GenJnlLine7.NEXT <> 0) THEN
          ERROR(
            Text1100100,
            GenJnlLine7."Gen. Posting Type",
            FIELDCAPTION("Document No."),
            "Line No.");
        IF GenJnlLine7."Bill-to/Pay-to No." <> '' THEN
          EXIT(GenJnlLine7."Bill-to/Pay-to No.")
        ELSE
          EXIT(GenJnlLine7."Account No.");
      END;
    END;

    BEGIN
    {
      $001 AJS 26.07.07
      // Elimino el codigo que renumera las secciones de diario

      $002 AJS 27.08.2007
      // Elimino mas codigo que renumeraba las secciones de diario
    }
    END.
  }
}
