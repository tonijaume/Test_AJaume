OBJECT Codeunit 99000889 AvailabilityManagement
{
  OBJECT-PROPERTIES
  {
    Date=13/02/07;
    Time=12:00:00;
    Version List=NAVW15.00;
  }
  PROPERTIES
  {
    Permissions=TableData 37=r,
                TableData 39=r,
                TableData 99000880=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Sales Order;ESP=Pedido venta';
      Text001@1001 : TextConst 'ENU=Check-Avail. Period Calc. cannot be empty in the Company information card;ESP=Verif. period. c cl. disp., no puede estar vac¡o en informaci¢n compa¤¡a.';
      CompanyInfo@1002 : Record 79;
      InvtSetup@1005 : Record 313;
      Item@1003 : Record 27;
      SalesLine@1004 : Record 37;
      AvailToPromise@1006 : Codeunit 5790;
      CaptionText@1007 : Text[80];
      HasGotCompanyInfo@1008 : Boolean;

    PROCEDURE GetCaption@7() : Text[80];
    BEGIN
      EXIT(CaptionText);
    END;

    PROCEDURE SetSalesHeader@24(VAR OrderPromisingLine@1001 : Record 99000880;VAR CrntSalesHeader@1000 : Record 36);
    VAR
      NeededQty@1002 : Decimal;
    BEGIN
      CaptionText := Text000;
      WITH OrderPromisingLine DO BEGIN
        DELETEALL;
        SalesLine.SETRANGE("Document Type",CrntSalesHeader."Document Type");
        SalesLine.SETRANGE("Document No.",CrntSalesHeader."No.");
        SalesLine.SETRANGE(Type,SalesLine.Type::Item);
        SalesLine.SETFILTER("Outstanding Quantity",'>0');
        IF SalesLine.FIND('-') THEN
          REPEAT
            "Entry No." := SalesLine."Line No.";
            TransferFromSalesLine(SalesLine);
            SalesLine.CALCFIELDS("Reserved Qty. (Base)");
            "Unavailable Quantity (Base)" := OrderPromisingLine."Quantity (Base)" - SalesLine."Reserved Qty. (Base)";
            IF "Unavailable Quantity (Base)" > 0 THEN BEGIN
              NeededQty := "Unavailable Quantity (Base)";
              GetCompanyInfo;
              IF FORMAT(CompanyInfo."Check-Avail. Period Calc.") <> '' THEN
                "Unavailable Quantity (Base)" := - CalcAvailableQty(OrderPromisingLine)
              ELSE
                ERROR(Text001);
              IF (InvtSetup."Location Mandatory") THEN
                SalesLine.TESTFIELD("Location Code");
              IF "Unavailable Quantity (Base)" < 0 THEN
                "Unavailable Quantity (Base)" := 0;
              IF "Unavailable Quantity (Base)" > NeededQty THEN
                "Unavailable Quantity (Base)" := NeededQty;
            END ELSE
              "Unavailable Quantity (Base)" := 0;
            IF "Qty. per Unit of Measure" = 0 THEN
              "Qty. per Unit of Measure" := 1;
            "Unavailable Quantity" :=
              ROUND("Unavailable Quantity (Base)" / "Qty. per Unit of Measure",0.00001);
            INSERT;
          UNTIL SalesLine.NEXT = 0;
      END;
    END;

    PROCEDURE CalcAvailableQty@12(VAR OrderPromisingLine@1003 : Record 99000880) : Decimal;
    VAR
      GrossRequirement@1000 : Decimal;
      ScheduledReceipt@1001 : Decimal;
      AvailableQtyBase@1002 : Decimal;
    BEGIN
      Item.GET(OrderPromisingLine."Item No.");
      Item.SETRANGE("Variant Filter",OrderPromisingLine."Variant Code");
      Item.SETRANGE("Location Filter",OrderPromisingLine."Location Code");
      Item.SETRANGE("Date Filter",0D,OrderPromisingLine."Original Shipment Date");

      IF OrderPromisingLine."Original Shipment Date" <> 0D THEN
        AvailableQtyBase := AvailToPromise.QtyAvailabletoPromise(Item,GrossRequirement,ScheduledReceipt,
          OrderPromisingLine."Original Shipment Date",CompanyInfo."Check-Avail. Time Bucket",
          CompanyInfo."Check-Avail. Period Calc.")
      ELSE
        AvailableQtyBase := - OrderPromisingLine."Unavailable Quantity (Base)";
      EXIT(AvailableQtyBase);
    END;

    PROCEDURE CalcCapableToPromise@3(VAR OrderPromisingLine@1003 : Record 99000880;VAR OrderPromisingID@1000 : Code[20]) : Boolean;
    VAR
      SalesLine@1005 : Record 37;
      CapableToPromise@1001 : Codeunit 99000886;
      QtyReservedTotal@1006 : Decimal;
      OldCTPQty@1007 : Decimal;
      FeasibleDate@1002 : Date;
      LastValidLine@1004 : Integer;
    BEGIN
      LastValidLine := 1;
      WITH OrderPromisingLine DO BEGIN
        IF FIND('-') THEN
          REPEAT
            CASE "Source Type" OF
              "Source Type"::Sales:
                BEGIN
                  CLEAR("Earliest Shipment Date");
                  CLEAR("Planned Delivery Date");
                  SalesLine.GET("Source Subtype","Source ID","Source Line No.");
                  SalesLine.CALCFIELDS("Reserved Quantity");
                  QtyReservedTotal := SalesLine."Reserved Quantity";
                  CapableToPromise.RemoveReqLines(SalesLine."Document No.",SalesLine."Line No.",0,FALSE);
                  SalesLine.CALCFIELDS("Reserved Quantity");
                  OldCTPQty := QtyReservedTotal - SalesLine."Reserved Quantity";
                  FeasibleDate :=
                    CapableToPromise.CalcCapableToPromise(
                      "Item No.","Variant Code","Location Code",
                      "Original Shipment Date",
                      "Unavailable Quantity" + OldCTPQty,"Unit of Measure Code",
                      OrderPromisingID,"Source Line No.",
                      LastValidLine,CompanyInfo."Check-Avail. Time Bucket",
                      CompanyInfo."Check-Avail. Period Calc.");
                  IF FeasibleDate <> "Original Shipment Date" THEN
                    VALIDATE("Earliest Shipment Date",FeasibleDate)
                  ELSE
                    VALIDATE("Earliest Shipment Date","Original Shipment Date");
                END;
            END;
            MODIFY;
            CreateReservations(OrderPromisingLine);
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CalcAvailableToPromise@4(VAR OrderPromisingLine@1000 : Record 99000880) : Boolean;
    VAR
      NeededDate@1001 : Date;
      FeasibleDate@1002 : Date;
      AvailQty@1003 : Decimal;
    BEGIN
      GetCompanyInfo;
      WITH OrderPromisingLine DO BEGIN
        SETCURRENTKEY("Requested Shipment Date");
        IF FIND('-') THEN
          REPEAT
            CLEAR("Earliest Shipment Date");
            CLEAR("Planned Delivery Date");
            CalcAvailableToPromiseLine(OrderPromisingLine);
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CalcAvailableToPromiseLine@1(VAR OrderPromisingLine@1000 : Record 99000880);
    VAR
      NeededDate@1001 : Date;
      FeasibleDate@1002 : Date;
      AvailQty@1003 : Decimal;
      RecalcOrder@1004 : Boolean;
    BEGIN
      WITH OrderPromisingLine DO BEGIN
        Item.GET("Item No.");
        Item.SETRANGE("Variant Filter",OrderPromisingLine."Variant Code");
        Item.SETRANGE("Location Filter",OrderPromisingLine."Location Code");
        CASE "Source Type" OF
          "Source Type"::Sales:
            BEGIN
              IF "Requested Shipment Date" <> 0D THEN
                NeededDate := "Requested Shipment Date"
              ELSE
                NeededDate := WORKDATE;
              RecalcOrder := GETFILTER("Source Line No.") = '';
              AvailToPromise.SetSource(OrderPromisingLine,RecalcOrder);
              FeasibleDate :=
                AvailToPromise.EarliestAvailabilityDate(
                  Item,Quantity,NeededDate,Quantity,"Requested Shipment Date",AvailQty,
                  CompanyInfo."Check-Avail. Time Bucket",CompanyInfo."Check-Avail. Period Calc.");
              VALIDATE("Earliest Shipment Date",FeasibleDate);
            END;
        END;
        MODIFY;
      END;
    END;

    PROCEDURE UpdateSource@5(VAR OrderPromisingLine@1000 : Record 99000880) : Boolean;
    BEGIN
      IF OrderPromisingLine.FIND('-') THEN
        REPEAT
          UpdateSourceLine(OrderPromisingLine);
        UNTIL OrderPromisingLine.NEXT = 0;
    END;

    PROCEDURE UpdateSourceLine@10(VAR OrderPromisingLine2@1000 : Record 99000880) : Boolean;
    VAR
      ReqLine@1001 : Record 246;
      ReservEntry@1002 : Record 337;
      ReservMgt@1003 : Codeunit 99000845;
      ReserveSalesLine@1004 : Codeunit 99000832;
      ReservQty@1005 : Decimal;
      FullAutoReservation@1006 : Boolean;
    BEGIN
      CASE OrderPromisingLine2."Source Type" OF
        OrderPromisingLine2."Source Type"::Sales:
          BEGIN
            SalesLine.GET(
              OrderPromisingLine2."Source Subtype",
              OrderPromisingLine2."Source ID",OrderPromisingLine2."Source Line No.");
            SalesLine.VALIDATE("Shipment Date",OrderPromisingLine2."Earliest Shipment Date");

            IF (SalesLine."Shipment Date" <> 0D) AND
               (SalesLine.Reserve = SalesLine.Reserve::Always) AND
               (ReserveSalesLine.ReservQuantity(SalesLine) <> 0)
            THEN BEGIN
              ReservMgt.SetSalesLine(SalesLine);
              ReservMgt.AutoReserve(
                FullAutoReservation,'',SalesLine."Shipment Date",ReserveSalesLine.ReservQuantity(SalesLine));
              SalesLine.CALCFIELDS("Reserved Quantity");
            END;

            IF OrderPromisingLine2."Earliest Shipment Date" = 0D THEN BEGIN
              SalesLine."Planned Delivery Date" := 0D;
              SalesLine."Planned Shipment Date" := 0D;
            END;
            SalesLine.MODIFY;
          END;
      END;
    END;

    PROCEDURE GetCompanyInfo@11();
    BEGIN
      IF HasGotCompanyInfo THEN
        EXIT;
      HasGotCompanyInfo := CompanyInfo.GET AND InvtSetup.GET;
    END;

    PROCEDURE CreateReservations@6(VAR OrderPromisingLine@1006 : Record 99000880);
    VAR
      ReqLine@1004 : Record 246;
      ReservEntry@1003 : Record 337;
      SalesLine2@1005 : Record 37;
      ReservMgt@1002 : Codeunit 99000845;
      ReserveSalesLine@1001 : Codeunit 99000832;
      ReservQty@1000 : Decimal;
    BEGIN
      SalesLine2.GET(OrderPromisingLine."Source Subtype",
        OrderPromisingLine."Source ID",OrderPromisingLine."Source Line No.");
      ReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
      ReqLine.SETRANGE("Order Promising ID",SalesLine2."Document No.");
      ReqLine.SETRANGE("Order Promising Line ID",SalesLine2."Line No.");
      ReqLine.SETRANGE(Type,SalesLine2.Type);
      ReqLine.SETRANGE("No.",SalesLine2."No.");
      IF ReqLine.FIND('-') THEN BEGIN
        SalesLine2.CALCFIELDS("Reserved Qty. (Base)");
        IF ReqLine."Quantity (Base)" > (SalesLine2."Outstanding Qty. (Base)" - SalesLine2."Reserved Qty. (Base)") THEN
          ReservQty := (SalesLine2."Outstanding Qty. (Base)" - SalesLine2."Reserved Qty. (Base)")
        ELSE
          ReservQty := ReqLine."Quantity (Base)";
        ReservMgt.SetReqLine(ReqLine);
        ReservEntry."Source Type" :=  DATABASE::"Sales Line";
        ReserveSalesLine.SetBinding(ReservEntry.Binding::"Order-to-Order");
        ReserveSalesLine.CreateReservationSetFrom(
          DATABASE::"Requisition Line",0,
          ReqLine."Worksheet Template Name",
          ReqLine."Journal Batch Name",0,ReqLine."Line No.",
          ReqLine."Variant Code",
          ReqLine."Location Code",'','',
          ReqLine."Qty. per Unit of Measure");
        ReserveSalesLine.CreateReservation(
          SalesLine2,
          ReqLine.Description,
          ReqLine."Due Date",
          ReservQty,
          '','');
        IF SalesLine2.Reserve = SalesLine.Reserve::Never THEN BEGIN
          SalesLine2.Reserve := SalesLine.Reserve::Optional;
          SalesLine2.MODIFY;
        END;
      END;
    END;

    BEGIN
    END.
  }
}
