OBJECT Codeunit 5805 Item Charge Assgnt. (Purch.)
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 38=r,
                TableData 39=r,
                TableData 121=r,
                TableData 5805=imd,
                TableData 6651=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=&Equally,&Amount;ESP=&Igualmente,I&mporte';

    PROCEDURE InsertItemChargeAssgnt@1(ItemChargeAssgntPurch@1000 : Record 5805;ApplToDocType@1001 : Option;ApplToDocNo2@1002 : Code[20];ApplToDocLineNo2@1003 : Integer;ItemNo2@1004 : Code[20];Description2@1005 : Text[50];VAR NextLineNo@1006 : Integer);
    VAR
      ItemChargeAssgntPurch2@1007 : Record 5805;
    BEGIN
      NextLineNo := NextLineNo + 10000;

      ItemChargeAssgntPurch2.INIT;
      ItemChargeAssgntPurch2."Document Type" := ItemChargeAssgntPurch."Document Type";
      ItemChargeAssgntPurch2."Document No." := ItemChargeAssgntPurch."Document No.";
      ItemChargeAssgntPurch2."Document Line No." := ItemChargeAssgntPurch."Document Line No.";
      ItemChargeAssgntPurch2."Line No." := NextLineNo;
      ItemChargeAssgntPurch2."Item Charge No." := ItemChargeAssgntPurch."Item Charge No.";
      ItemChargeAssgntPurch2."Applies-to Doc. Type" := ApplToDocType;
      ItemChargeAssgntPurch2."Applies-to Doc. No." := ApplToDocNo2;
      ItemChargeAssgntPurch2."Applies-to Doc. Line No." := ApplToDocLineNo2;
      ItemChargeAssgntPurch2."Item No." := ItemNo2;
      ItemChargeAssgntPurch2.Description := Description2;
      ItemChargeAssgntPurch2."Unit Cost" := ItemChargeAssgntPurch."Unit Cost";
      ItemChargeAssgntPurch2."Item Charge No." := ItemChargeAssgntPurch."Item Charge No.";
      ItemChargeAssgntPurch2.INSERT;
    END;

    PROCEDURE CreateDocChargeAssgnt@2(LastItemChargeAssgntPurch@1000 : Record 5805;ReceiptNo@1001 : Code[20]);
    VAR
      FromPurchLine@1002 : Record 39;
      ItemChargeAssgntPurch@1003 : Record 5805;
      NextLineNo@1004 : Integer;
    BEGIN
      WITH LastItemChargeAssgntPurch DO BEGIN
        FromPurchLine.SETRANGE("Document Type","Document Type");
        FromPurchLine.SETRANGE("Document No.","Document No.");
        FromPurchLine.SETRANGE(Type,FromPurchLine.Type::Item);
        IF FromPurchLine.FIND('-') THEN BEGIN
          IF NOT ItemChargeAssgntPurch.RECORDLEVELLOCKING THEN
            ItemChargeAssgntPurch.LOCKTABLE(TRUE,TRUE);
          NextLineNo := "Line No.";
          ItemChargeAssgntPurch.RESET;
          ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
          ItemChargeAssgntPurch.SETRANGE("Document No.","Document No.");
          ItemChargeAssgntPurch.SETRANGE("Document Line No.","Document Line No.");
          ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.","Document No.");
          REPEAT
            IF (FromPurchLine.Quantity <> 0) AND
               (FromPurchLine.Quantity <> FromPurchLine."Quantity Invoiced") AND
               (FromPurchLine."Job No." = '') AND
               (FromPurchLine."Work Center No." = '') AND
               ((ReceiptNo = '') OR (FromPurchLine."Receipt No." = ReceiptNo)) AND
               FromPurchLine."Allow Item Charge Assignment"
            THEN BEGIN
              ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.",FromPurchLine."Line No.");
              IF NOT ItemChargeAssgntPurch.FIND('-') THEN
                InsertItemChargeAssgnt(
                  LastItemChargeAssgntPurch,FromPurchLine."Document Type",
                  FromPurchLine."Document No.",FromPurchLine."Line No.",
                  FromPurchLine."No.",FromPurchLine.Description,NextLineNo);
            END;
          UNTIL FromPurchLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CreateRcptChargeAssgnt@3(VAR FromPurchRcptLine@1000 : Record 121;ItemChargeAssgntPurch@1001 : Record 5805);
    VAR
      ItemChargeAssgntPurch2@1002 : Record 5805;
      NextLine@1003 : Integer;
    BEGIN
      FromPurchRcptLine.TESTFIELD("Job No.",'');
      FromPurchRcptLine.TESTFIELD("Work Center No.",'');
      IF NOT ItemChargeAssgntPurch.RECORDLEVELLOCKING THEN
        ItemChargeAssgntPurch.LOCKTABLE(TRUE,TRUE);
      NextLine := ItemChargeAssgntPurch."Line No.";
      ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
      ItemChargeAssgntPurch2.SETRANGE("Document No.",ItemChargeAssgntPurch."Document No.");
      ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
      ItemChargeAssgntPurch2.SETRANGE(
        "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::Receipt);
      REPEAT
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. No.",FromPurchRcptLine."Document No.");
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. Line No.",FromPurchRcptLine."Line No.");
        IF NOT ItemChargeAssgntPurch2.FIND('-') THEN
          InsertItemChargeAssgnt(ItemChargeAssgntPurch,ItemChargeAssgntPurch2."Applies-to Doc. Type"::Receipt,
            FromPurchRcptLine."Document No.",FromPurchRcptLine."Line No.",
            FromPurchRcptLine."No.",FromPurchRcptLine.Description,NextLine);
      UNTIL FromPurchRcptLine.NEXT = 0;
    END;

    PROCEDURE CreateTransferRcptChargeAssgnt@4(VAR FromTransRcptLine@1000 : Record 5747;ItemChargeAssgntPurch@1001 : Record 5805);
    VAR
      ItemChargeAssgntPurch2@1002 : Record 5805;
      NextLine@1003 : Integer;
    BEGIN
      IF NOT ItemChargeAssgntPurch.RECORDLEVELLOCKING THEN
        ItemChargeAssgntPurch.LOCKTABLE(TRUE,TRUE);
      NextLine := ItemChargeAssgntPurch."Line No.";
      ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
      ItemChargeAssgntPurch2.SETRANGE("Document No.",ItemChargeAssgntPurch."Document No.");
      ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
      ItemChargeAssgntPurch2.SETRANGE(
        "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Transfer Receipt");
      REPEAT
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. No.",FromTransRcptLine."Document No.");
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. Line No.",FromTransRcptLine."Line No.");
        IF NOT ItemChargeAssgntPurch2.FIND('-') THEN
          InsertItemChargeAssgnt(ItemChargeAssgntPurch,ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Transfer Receipt",
            FromTransRcptLine."Document No.",FromTransRcptLine."Line No.",
            FromTransRcptLine."Item No.",FromTransRcptLine.Description,NextLine);
      UNTIL FromTransRcptLine.NEXT = 0;
    END;

    PROCEDURE CreateShptChargeAssgnt@6(VAR FromReturnShptLine@1000 : Record 6651;ItemChargeAssgntPurch@1001 : Record 5805);
    VAR
      ItemChargeAssgntPurch2@1002 : Record 5805;
      NextLine@1003 : Integer;
    BEGIN
      FromReturnShptLine.TESTFIELD("Job No.",'');
      IF NOT ItemChargeAssgntPurch.RECORDLEVELLOCKING THEN
        ItemChargeAssgntPurch.LOCKTABLE(TRUE,TRUE);
      NextLine := ItemChargeAssgntPurch."Line No.";
      ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
      ItemChargeAssgntPurch2.SETRANGE("Document No.",ItemChargeAssgntPurch."Document No.");
      ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
      ItemChargeAssgntPurch2.SETRANGE(
        "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Return Shipment");
      REPEAT
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. No.",FromReturnShptLine."Document No.");
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. Line No.",FromReturnShptLine."Line No.");
        IF NOT ItemChargeAssgntPurch2.FIND('-') THEN
          InsertItemChargeAssgnt(ItemChargeAssgntPurch,ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Return Shipment",
            FromReturnShptLine."Document No.",FromReturnShptLine."Line No.",
            FromReturnShptLine."No.",FromReturnShptLine.Description,NextLine);
      UNTIL FromReturnShptLine.NEXT = 0;
    END;

    PROCEDURE CreateSalesShptChargeAssgnt@8(VAR FromSalesShptLine@1000 : Record 111;ItemChargeAssgntPurch@1001 : Record 5805);
    VAR
      ItemChargeAssgntPurch2@1002 : Record 5805;
      NextLine@1003 : Integer;
    BEGIN
      FromSalesShptLine.TESTFIELD("Job No.",'');
      IF NOT ItemChargeAssgntPurch.RECORDLEVELLOCKING THEN
        ItemChargeAssgntPurch.LOCKTABLE(TRUE,TRUE);
      NextLine := ItemChargeAssgntPurch."Line No.";
      ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
      ItemChargeAssgntPurch2.SETRANGE("Document No.",ItemChargeAssgntPurch."Document No.");
      ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
      ItemChargeAssgntPurch2.SETRANGE(
        "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Sales Shipment");
      REPEAT
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. No.",FromSalesShptLine."Document No.");
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. Line No.",FromSalesShptLine."Line No.");
        IF NOT ItemChargeAssgntPurch2.FIND('-') THEN
          InsertItemChargeAssgnt(ItemChargeAssgntPurch,ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Sales Shipment",
            FromSalesShptLine."Document No.",FromSalesShptLine."Line No.",
            FromSalesShptLine."No.",FromSalesShptLine.Description,NextLine);
      UNTIL FromSalesShptLine.NEXT = 0;
    END;

    PROCEDURE CreateReturnRcptChargeAssgnt@7(VAR FromReturnRcptLine@1000 : Record 6661;ItemChargeAssgntPurch@1001 : Record 5805);
    VAR
      ItemChargeAssgntPurch2@1002 : Record 5805;
      NextLine@1003 : Integer;
    BEGIN
      FromReturnRcptLine.TESTFIELD("Job No.",'');
      IF NOT ItemChargeAssgntPurch.RECORDLEVELLOCKING THEN
        ItemChargeAssgntPurch.LOCKTABLE(TRUE,TRUE);
      NextLine := ItemChargeAssgntPurch."Line No.";
      ItemChargeAssgntPurch2.SETRANGE("Document Type",ItemChargeAssgntPurch."Document Type");
      ItemChargeAssgntPurch2.SETRANGE("Document No.",ItemChargeAssgntPurch."Document No.");
      ItemChargeAssgntPurch2.SETRANGE("Document Line No.",ItemChargeAssgntPurch."Document Line No.");
      ItemChargeAssgntPurch2.SETRANGE(
        "Applies-to Doc. Type",ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Return Receipt");
      REPEAT
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. No.",FromReturnRcptLine."Document No.");
        ItemChargeAssgntPurch2.SETRANGE("Applies-to Doc. Line No.",FromReturnRcptLine."Line No.");
        IF NOT ItemChargeAssgntPurch2.FIND('-') THEN
          InsertItemChargeAssgnt(ItemChargeAssgntPurch,ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Return Receipt",
            FromReturnRcptLine."Document No.",FromReturnRcptLine."Line No.",
            FromReturnRcptLine."No.",FromReturnRcptLine.Description,NextLine);
      UNTIL FromReturnRcptLine.NEXT = 0;
    END;

    PROCEDURE SuggestAssgnt@5(PurchLine2@1000 : Record 39;TotalQtyToAssign@1001 : Decimal);
    VAR
      Selection@1002 : Integer;
    BEGIN
      Selection := STRMENU(Text000,2);
      IF Selection = 0 THEN
        EXIT;
      SuggestAssgnt2(PurchLine2,TotalQtyToAssign,Selection);
    END;

    PROCEDURE SuggestAssgnt2@9(PurchLine2@1000 : Record 39;TotalQtyToAssign@1001 : Decimal;Selection@1018 : Integer);
    VAR
      Currency@1014 : Record 4;
      CurrExchRate@1002 : Record 330;
      GLSetup@1020 : Record 98;
      PurchHeader@1003 : Record 38;
      PurchLine@1004 : Record 39;
      PurchRcptLine@1005 : Record 121;
      ReturnShptLine@1006 : Record 6651;
      SalesShptLine@1016 : Record 111;
      ReturnRcptLine@1017 : Record 6661;
      ItemChargeAssgntPurch2@1007 : Record 5805;
      TempItemChargeAssgntPurch@1008 : TEMPORARY Record 5805;
      CurrencyCode@1009 : Code[10];
      TotalAmount@1010 : Decimal;
      QtyToAssign@1011 : Decimal;
      QtyRemainder@1012 : Decimal;
      AmountRemainder@1013 : Decimal;
      RoundingPrecision@1019 : Decimal;
      TotalLines@1015 : Integer;
    BEGIN
      WITH PurchLine2 DO BEGIN
        PurchHeader.GET("Document Type","Document No.");

        IF (PurchHeader."Currency Code" <> '') THEN BEGIN
          Currency.GET(PurchHeader."Currency Code");
          RoundingPrecision := Currency."Amount Rounding Precision";
        END ELSE BEGIN
          GLSetup.GET;
          RoundingPrecision := GLSetup."Amount Rounding Precision";
        END;

        ItemChargeAssgntPurch2.SETRANGE("Document Type","Document Type");
        ItemChargeAssgntPurch2.SETRANGE("Document No.","Document No.");
        ItemChargeAssgntPurch2.SETRANGE("Document Line No.","Line No.");
        IF ItemChargeAssgntPurch2.FIND('-') THEN BEGIN
          IF Selection = 1 THEN BEGIN
            REPEAT
              IF NOT ItemChargeAssgntPurch2.PurchLineInvoiced THEN BEGIN
                TempItemChargeAssgntPurch.INIT;
                TempItemChargeAssgntPurch := ItemChargeAssgntPurch2;
                TempItemChargeAssgntPurch.INSERT;
              END;
            UNTIL ItemChargeAssgntPurch2.NEXT = 0;

            IF TempItemChargeAssgntPurch.FIND('-') THEN BEGIN
              TotalLines := TempItemChargeAssgntPurch.COUNT;
              REPEAT
                QtyToAssign := TotalQtyToAssign / TotalLines + QtyRemainder;
                QtyRemainder := QtyToAssign - ROUND(QtyToAssign,0.00001);
                ItemChargeAssgntPurch2.GET(
                  TempItemChargeAssgntPurch."Document Type",
                  TempItemChargeAssgntPurch."Document No.",
                  TempItemChargeAssgntPurch."Document Line No.",
                  TempItemChargeAssgntPurch."Line No.");
                ItemChargeAssgntPurch2."Qty. to Assign" := ROUND(QtyToAssign,0.00001);
                ItemChargeAssgntPurch2."Amount to Assign" :=
                  ItemChargeAssgntPurch2."Qty. to Assign" * ItemChargeAssgntPurch2."Unit Cost" + AmountRemainder;
                AmountRemainder :=
                  ItemChargeAssgntPurch2."Amount to Assign" -
                  ROUND(ItemChargeAssgntPurch2."Amount to Assign",RoundingPrecision);
                ItemChargeAssgntPurch2."Amount to Assign" :=
                  ROUND(ItemChargeAssgntPurch2."Amount to Assign",RoundingPrecision);
                ItemChargeAssgntPurch2.MODIFY;
              UNTIL TempItemChargeAssgntPurch.NEXT = 0;
            END;
          END ELSE BEGIN
            REPEAT
              IF NOT ItemChargeAssgntPurch2.PurchLineInvoiced THEN BEGIN
                TempItemChargeAssgntPurch.INIT;
                TempItemChargeAssgntPurch := ItemChargeAssgntPurch2;
                CASE ItemChargeAssgntPurch2."Applies-to Doc. Type" OF
                  ItemChargeAssgntPurch2."Applies-to Doc. Type"::Quote,
                  ItemChargeAssgntPurch2."Applies-to Doc. Type"::Order,
                  ItemChargeAssgntPurch2."Applies-to Doc. Type"::Invoice,
                  ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Return Order",
                  ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Credit Memo":
                    BEGIN
                      PurchLine.GET(
                        ItemChargeAssgntPurch2."Applies-to Doc. Type",
                        ItemChargeAssgntPurch2."Applies-to Doc. No.",
                        ItemChargeAssgntPurch2."Applies-to Doc. Line No.");
                      TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                        ABS(PurchLine."Line Amount");
                    END;
                  ItemChargeAssgntPurch2."Applies-to Doc. Type"::Receipt:
                    BEGIN
                      PurchRcptLine.GET(
                        ItemChargeAssgntPurch2."Applies-to Doc. No.",
                        ItemChargeAssgntPurch2."Applies-to Doc. Line No.");
                      CurrencyCode := PurchRcptLine.GetCurrencyCodeFromHeader;
                      IF CurrencyCode = PurchHeader."Currency Code" THEN
                        TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                          ABS(PurchRcptLine."Item Charge Base Amount")
                      ELSE
                        TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                          CurrExchRate.ExchangeAmtFCYToFCY(
                            PurchHeader."Posting Date",CurrencyCode,PurchHeader."Currency Code",
                            ABS(PurchRcptLine."Item Charge Base Amount"));
                    END;
                  ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Return Shipment":
                    BEGIN
                      ReturnShptLine.GET(
                        ItemChargeAssgntPurch2."Applies-to Doc. No.",
                        ItemChargeAssgntPurch2."Applies-to Doc. Line No.");
                      CurrencyCode := ReturnShptLine.GetCurrencyCode;
                      IF CurrencyCode = PurchHeader."Currency Code" THEN
                        TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                          ABS(ReturnShptLine."Item Charge Base Amount")
                      ELSE
                        TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                          CurrExchRate.ExchangeAmtFCYToFCY(
                            PurchHeader."Posting Date",CurrencyCode,PurchHeader."Currency Code",
                            ABS(ReturnShptLine."Item Charge Base Amount"));
                    END;
                   ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Sales Shipment":
                     BEGIN
                       SalesShptLine.GET(
                         ItemChargeAssgntPurch2."Applies-to Doc. No.",
                         ItemChargeAssgntPurch2."Applies-to Doc. Line No.");
                       CurrencyCode := SalesShptLine.GetCurrencyCode;
                       IF CurrencyCode = PurchHeader."Currency Code" THEN
                         TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                           ABS(SalesShptLine."Item Charge Base Amount")
                       ELSE
                         TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                           CurrExchRate.ExchangeAmtFCYToFCY(
                             PurchHeader."Posting Date",CurrencyCode,PurchHeader."Currency Code",
                             ABS(SalesShptLine."Item Charge Base Amount"));
                     END;
                   ItemChargeAssgntPurch2."Applies-to Doc. Type"::"Return Receipt":
                     BEGIN
                       ReturnRcptLine.GET(
                         ItemChargeAssgntPurch2."Applies-to Doc. No.",
                         ItemChargeAssgntPurch2."Applies-to Doc. Line No.");
                       CurrencyCode := ReturnRcptLine.GetCurrencyCode;
                       IF CurrencyCode = PurchHeader."Currency Code" THEN
                         TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                           ABS(ReturnRcptLine."Item Charge Base Amount")
                       ELSE
                         TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" :=
                           CurrExchRate.ExchangeAmtFCYToFCY(
                             PurchHeader."Posting Date",CurrencyCode,PurchHeader."Currency Code",
                             ABS(ReturnRcptLine."Item Charge Base Amount"));
                     END;
                END;
                IF TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" <> 0 THEN
                  TempItemChargeAssgntPurch.INSERT
                ELSE BEGIN
                  ItemChargeAssgntPurch2."Amount to Assign" := 0;
                  ItemChargeAssgntPurch2."Qty. to Assign" := 0;
                  ItemChargeAssgntPurch2.MODIFY;
                END;
                TotalAmount := TotalAmount + TempItemChargeAssgntPurch."Applies-to Doc. Line Amount";
              END;
            UNTIL ItemChargeAssgntPurch2.NEXT = 0;

            IF TempItemChargeAssgntPurch.FIND('-') THEN
              REPEAT
                TempItemChargeAssgntPurch."Qty. to Assign" :=
                  TempItemChargeAssgntPurch."Applies-to Doc. Line Amount" / TotalAmount * TotalQtyToAssign + QtyRemainder;
                ItemChargeAssgntPurch2.GET(
                  TempItemChargeAssgntPurch."Document Type",
                  TempItemChargeAssgntPurch."Document No.",
                  TempItemChargeAssgntPurch."Document Line No.",
                  TempItemChargeAssgntPurch."Line No.");
                ItemChargeAssgntPurch2."Qty. to Assign" :=
                  ROUND(TempItemChargeAssgntPurch."Qty. to Assign",0.00001);
                ItemChargeAssgntPurch2."Amount to Assign" :=
                  ItemChargeAssgntPurch2."Qty. to Assign" * ItemChargeAssgntPurch2."Unit Cost" + AmountRemainder;
                AmountRemainder :=
                  ItemChargeAssgntPurch2."Amount to Assign" -
                  ROUND(ItemChargeAssgntPurch2."Amount to Assign",RoundingPrecision);
                QtyRemainder :=
                  TempItemChargeAssgntPurch."Qty. to Assign" - ItemChargeAssgntPurch2."Qty. to Assign";
                ItemChargeAssgntPurch2."Amount to Assign" :=
                  ROUND(ItemChargeAssgntPurch2."Amount to Assign",RoundingPrecision);
                ItemChargeAssgntPurch2.MODIFY;
              UNTIL TempItemChargeAssgntPurch.NEXT = 0;
          END;
          TempItemChargeAssgntPurch.DELETEALL;
        END;
      END;
    END;

    BEGIN
    END.
  }
}
