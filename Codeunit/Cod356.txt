OBJECT Codeunit 356 DateComprMgt
{
  OBJECT-PROPERTIES
  {
    Date=15/09/04;
    Time=12:00:00;
    Version List=NAVW14.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AccountingPeriod@1000 : Record 50;
      FiscYearDate@1001 : ARRAY [2] OF Date;
      AccountingPeriodDate@1002 : ARRAY [2] OF Date;
      Date1@1003 : Date;
      Date2@1004 : Date;

    PROCEDURE GetDateFilter@1(Date@1000 : Date;DateComprReg@1001 : Record 87;CheckFiscYearEnd@1002 : Boolean) : Text[250];
    BEGIN
      IF (Date = 0D) OR (Date = CLOSINGDATE(Date)) THEN
        EXIT(FORMAT(Date));

      IF (Date < FiscYearDate[1]) OR (Date > FiscYearDate[2]) THEN BEGIN
        AccountingPeriod.SETRANGE("New Fiscal Year",TRUE);
        AccountingPeriod."Starting Date" := Date;
        AccountingPeriod.FIND('=<');
        FiscYearDate[1] := AccountingPeriod."Starting Date";
        AccountingPeriod."Starting Date" := Date;
        AccountingPeriod.FIND('>');
        FiscYearDate[2] := AccountingPeriod."Starting Date" - 1;
        AccountingPeriod.SETRANGE("New Fiscal Year");
        IF CheckFiscYearEnd THEN
          AccountingPeriod.TESTFIELD("Date Locked",TRUE);
      END;

      IF DateComprReg."Period Length" = DateComprReg."Period Length"::Day THEN
        EXIT(FORMAT(Date));

      Date1 := DateComprReg."Starting Date";
      Date2 := DateComprReg."Ending Date";
      Maximize(Date1,FiscYearDate[1]);
      Minimize(Date2,FiscYearDate[2]);

      Maximize(Date1,CALCDATE('<CY+1D-1Y>',Date));
      Minimize(Date2,CALCDATE('<CY>',Date));
      IF DateComprReg."Period Length" = DateComprReg."Period Length"::Year THEN
        EXIT(STRSUBSTNO('%1..%2',Date1,Date2));

      IF (Date < AccountingPeriodDate[1]) OR (Date > AccountingPeriodDate[2]) THEN BEGIN
        AccountingPeriod."Starting Date" := Date;
        AccountingPeriod.FIND('=<');
        AccountingPeriodDate[1] := AccountingPeriod."Starting Date";
        AccountingPeriod.NEXT;
        AccountingPeriodDate[2] := AccountingPeriod."Starting Date" - 1;
      END;

      IF DateComprReg."Period Length" = DateComprReg."Period Length"::Period THEN BEGIN
        Maximize(Date1,AccountingPeriodDate[1]);
        Minimize(Date2,AccountingPeriodDate[2]);
        EXIT(STRSUBSTNO('%1..%2',Date1,Date2));
      END;

      Maximize(Date1,CALCDATE('<CQ+1D-1Q>',Date));
      Minimize(Date2,CALCDATE('<CQ>',Date));
      IF DateComprReg."Period Length" = DateComprReg."Period Length"::Quarter THEN
        EXIT(STRSUBSTNO('%1..%2',Date1,Date2));

      Maximize(Date1,CALCDATE('<CM+1D-1M>',Date));
      Minimize(Date2,CALCDATE('<CM>',Date));
      IF DateComprReg."Period Length" = DateComprReg."Period Length"::Month THEN
        EXIT(STRSUBSTNO('%1..%2',Date1,Date2));

      Maximize(Date1,CALCDATE('<CW+1D-1W>',Date));
      Minimize(Date2,CALCDATE('<CW>',Date));
      EXIT(STRSUBSTNO('%1..%2',Date1,Date2));
    END;

    LOCAL PROCEDURE Maximize@2(VAR Date@1000 : Date;NewDate@1001 : Date);
    BEGIN
      IF Date < NewDate THEN
        Date := NewDate;
    END;

    LOCAL PROCEDURE Minimize@3(VAR Date@1000 : Date;NewDate@1001 : Date);
    BEGIN
      IF Date > NewDate THEN
        Date := NewDate;
    END;

    BEGIN
    END.
  }
}
