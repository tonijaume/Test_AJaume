OBJECT Codeunit 1000 Job Calculate WIP
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    Permissions=TableData 169=r,
                TableData 1001=rimd,
                TableData 1003=r,
                TableData 1004=rimd,
                TableData 1005=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      WIPBuffer@1002 : ARRAY [2] OF TEMPORARY Record 1018;
      GenJnPostLine@1004 : Codeunit 12;
      DimMgt@1005 : Codeunit 408;
      DimensionBufferManagement@1012 : Codeunit 411;
      WIPPostingDate@1001 : Date;
      DocNo@1006 : Code[20];
      Text000@1000 : TextConst 'ENU=%1,%2 %3,%4;ESP=%1,%2 %3,%4';
      Text001@1007 : TextConst 'ENU=WIP;ESP=WIP';
      Text002@1008 : TextConst 'ENU=Recognition;ESP=Reconocimiento';
      Text003@1009 : TextConst 'ENU=Completion;ESP=Finalizaci¢n';
      JobComplete@1010 : Boolean;
      Text004@1011 : TextConst 'ENU=WIP G/L entries posted for Job %1 cannot be reversed at an earlier date than %2.;ESP=Los movs. contabilidad WIP registrados para el proyecto %1 no se pueden revertir en una fecha anterior al %2.';
      Text005@1003 : TextConst 'ENU=..%1;ESP=..%1';
      GLSetup@1013 : Record 98;
      HasGotGLSetup@1014 : Boolean;

    PROCEDURE JobCalcWIP@8(JobNo@1000 : Code[20];WIPPostingDate2@1007 : Date;DocNo2@1009 : Code[20];VAR Job2@1014 : Record 167);
    VAR
      Job@1001 : Record 167;
      JT@1002 : Record 1001;
      JobLedgEntry@1010 : Record 169;
      JobPlanningLine@1011 : Record 1003;
      JobWIPEntry@1012 : Record 1004;
      JobWIPGLEntry@1003 : Record 1005;
      FromJT@1005 : Code[20];
      First@1006 : Boolean;
    BEGIN
      CLEARALL;
      WIPBuffer[1].DELETEALL;
      WIPPostingDate := WIPPostingDate2;
      DocNo := DocNo2;
      IF WIPPostingDate = 0D THEN
        WIPPostingDate := WORKDATE;
      JobPlanningLine.LOCKTABLE;
      JobLedgEntry.LOCKTABLE;
      JobWIPEntry.LOCKTABLE;
      JT.LOCKTABLE;
      Job.LOCKTABLE;

      JobWIPGLEntry.SETCURRENTKEY("Job No.",Reversed,"Job Complete");
      JobWIPGLEntry.SETRANGE("Job No.",JobNo);
      JobWIPGLEntry.SETRANGE("Job Complete",TRUE);
      IF JobWIPGLEntry.FIND('-') THEN BEGIN
        JobWIPEntry.SETCURRENTKEY("Job No.");
        JobWIPEntry.SETRANGE("Job No.",JobNo);
        JobWIPEntry.DELETEALL(TRUE);
        EXIT;
      END;

      Job.GET(JobNo);
      Job.TestBlocked;
      Job."WIP Posted To G/L" := FALSE;
      Job."WIP Posting Date" := WIPPostingDate;
      Job."Calc. WIP Method Used" := Job."WIP Method" + 1;
      JobComplete := Job.Complete;
      Job.MODIFY;
      JT.SETRANGE("Job No.",JobNo);
      IF JT.FIND('+') THEN
        IF JT."WIP-Total" = JT."WIP-Total"::" " THEN BEGIN
          JT."WIP-Total" := JT."WIP-Total"::Total;
          JT.MODIFY;
        END;
      InitWIP(JobNo);
      First := TRUE;
      IF JT.FIND('-') THEN
        REPEAT
          IF First THEN
            FromJT := JT."Job Task No.";
          First := FALSE;
          IF JT."WIP-Total" <> JT."WIP-Total"::" " THEN BEGIN
            JobTaskCalcWIP(JobNo,FromJT,JT."Job Task No.",Job2);
            First := TRUE;
          END;
        UNTIL JT.NEXT = 0;
      CreateWIPEntries(JobNo);
    END;

    LOCAL PROCEDURE JobTaskCalcWIP@23(JobNo@1000 : Code[20];FromJT@1001 : Code[20];ToJT@1002 : Code[20];VAR Job2@1003 : Record 167);
    VAR
      Job@1004 : Record 167;
      JT@1005 : Record 1001;
      TotalJT@1006 : Record 1001;
      WIPPercent@1008 : Decimal;
      WIPSpecialAmount@1010 : Decimal;
    BEGIN
      Job.GET(JobNo);
      JT.SETRANGE("Job No.",JobNo);
      JT.SETRANGE("Job Task No.",FromJT,ToJT);
      IF Job2.GETFILTER("Posting Date Filter") <> '' THEN
        JT.SETFILTER("Posting Date Filter",Job2.GETFILTER("Posting Date Filter"))
      ELSE
        JT.SETFILTER("Posting Date Filter",STRSUBSTNO(Text005,WIPPostingDate));

      JT.SETFILTER("Planning Date Filter",Job2.GETFILTER("Planning Date Filter"));

      IF JT.FIND('+') THEN
        IF JT."WIP-Total" = JT."WIP-Total"::Closed THEN
          EXIT;
      CLEAR(TotalJT);

      IF JT.FIND('-') THEN
        REPEAT
          IF JT."Job Task Type" = JT."Job Task Type"::Posting THEN BEGIN
            JT.CALCFIELDS(
              "Schedule (Total Cost)",
              "Schedule (Total Price)",
              "Usage (Total Cost)",
              "Usage (Total Price)",
              "Contract (Total Cost)",
              "Contract (Total Price)",
              "Contract (Invoiced Price)",
              "Contract (Invoiced Cost)");
            TotalJT."Schedule (Total Cost)" :=
              TotalJT."Schedule (Total Cost)" + JT."Schedule (Total Cost)";
            TotalJT."Schedule (Total Price)" :=
              TotalJT."Schedule (Total Price)" + JT."Schedule (Total Price)";
            TotalJT."Usage (Total Cost)" :=
              TotalJT."Usage (Total Cost)" + JT."Usage (Total Cost)";
            TotalJT."Usage (Total Price)" :=
              TotalJT."Usage (Total Price)" + JT."Usage (Total Price)";
            TotalJT."Contract (Total Cost)" :=
              TotalJT."Contract (Total Cost)" + JT."Contract (Total Cost)";
            TotalJT."Contract (Total Price)" :=
              TotalJT."Contract (Total Price)" + JT."Contract (Total Price)";
            TotalJT."Contract (Invoiced Price)" :=
              TotalJT."Contract (Invoiced Price)" + JT."Contract (Invoiced Price)";
            TotalJT."Contract (Invoiced Cost)" :=
              TotalJT."Contract (Invoiced Cost)" + JT."Contract (Invoiced Cost)";
          END;
        UNTIL JT.NEXT = 0;

      CalcWIPPercent(Job."WIP Method",WIPPercent,WIPSpecialAmount,TotalJT);

      IF JT.FIND('-') THEN
        REPEAT
          SetWIPAmounts(JT,WIPPercent,JT."Job Posting Group",
            Job."WIP Method",WIPSpecialAmount);
        UNTIL JT.NEXT = 0;
    END;

    LOCAL PROCEDURE SetWIPAmounts@11(VAR JT@1000 : Record 1001;WIPPercent@1001 : Decimal;PostingGr@1002 : Code[10];WIPCalcMethod@1005 : Integer;VAR WIPSpecialAmount@1006 : Decimal);
    VAR
      Job@1004 : Record 167;
      JobPostingGr@1003 : Record 208;
    BEGIN
      IF JT."Job Task Type" <> JT."Job Task Type"::Posting THEN
        EXIT;
      JT.CALCFIELDS(
        "Schedule (Total Cost)",
        "Schedule (Total Price)",
        "Usage (Total Cost)",
        "Usage (Total Price)",
        "Contract (Total Cost)",
        "Contract (Total Price)",
        "Contract (Invoiced Price)",
        "Contract (Invoiced Cost)");

      JT."WIP Schedule (Total Cost)" := JT."Schedule (Total Cost)";
      JT."WIP Schedule (Total Price)" := JT."Schedule (Total Price)";
      JT."WIP Usage (Total Cost)" := JT."Usage (Total Cost)";
      JT."WIP Usage (Total Price)" := JT."Usage (Total Price)";
      JT."WIP Contract (Total Cost)" := JT."Contract (Total Cost)";
      JT."WIP Contract (Total Price)" := JT."Contract (Total Price)";
      JT."WIP (Invoiced Price)" := JT."Contract (Invoiced Price)";
      JT."WIP (Invoiced Cost)" := JT."Contract (Invoiced Cost)";
      JT."WIP Posting Date" := WIPPostingDate;
      JT."WIP Posting Date Filter" := JT.GETFILTER("Posting Date Filter");
      JT."WIP Planning Date Filter" := JT.GETFILTER("Planning Date Filter");

      JT."WIP Method Used" := WIPCalcMethod + 1;

      JT."WIP Amount" := ROUND(WIPSpecialAmount);
      WIPSpecialAmount := 0;

      CalcWIPAmount(WIPCalcMethod,JT,WIPPercent);

      IF PostingGr = '' THEN BEGIN
        Job.GET(JT."Job No.");
        Job.TESTFIELD("Job Posting Group");
        PostingGr := Job."Job Posting Group";
      END;

      JobPostingGr.GET(PostingGr);
      JT."Job Posting Group" := PostingGr;

      IF WIPCalcMethod <= 3 THEN
        IF JT."WIP Amount" <> 0 THEN
          JT."WIP %" := ROUND(WIPPercent * 100,0.00001);

      IF ((WIPCalcMethod = 0) OR (WIPCalcMethod = 2)) AND NOT JobComplete THEN BEGIN
        JobPostingGr.TESTFIELD("WIP Costs Account");
        JobPostingGr.TESTFIELD("Job Costs Applied Account");
        JobPostingGr.TESTFIELD("WIP Invoiced Sales Account");
        JobPostingGr.TESTFIELD("Job Sales Applied Account");
        JobPostingGr.TESTFIELD("Recognized Costs Account");
        JobPostingGr.TESTFIELD("Recognized Sales Account");
        JT."WIP Costs Account" := JobPostingGr."WIP Costs Account";
        JT."WIP Costs Balance Account" := JobPostingGr."Job Costs Applied Account";
        JT."WIP Sales Account" := JobPostingGr."WIP Invoiced Sales Account";
        JT."WIP Sales Balance Account" := JobPostingGr."Job Sales Applied Account";
        JT."Recognized Costs Account" := JobPostingGr."Recognized Costs Account";
        JT."Recognized Costs Bal. Account" := JobPostingGr."WIP Costs Account";
        JT."Recognized Sales Account" := JobPostingGr."Recognized Sales Account";
        JT."Recognized Sales Bal. Account" := JobPostingGr."WIP Invoiced Sales Account";
        IF JT."WIP Amount" >= 0 THEN BEGIN
          JT."WIP Account" := JobPostingGr."WIP Costs Account";
          JT."WIP Balance Account" := JobPostingGr."Job Costs Applied Account";
        END ELSE BEGIN
          JobPostingGr.TESTFIELD("WIP Accrued Costs Account");
          JobPostingGr.TESTFIELD("Job Costs Adjustment Account");
          JT."WIP Account" := JobPostingGr."WIP Accrued Costs Account";
          JT."WIP Balance Account" := JobPostingGr."Job Costs Adjustment Account";
          CreateWIPBuffer(JT,4,WIPCalcMethod);
        END;
        CreateWIPBuffer(JT,0,WIPCalcMethod);
        CreateWIPBuffer(JT,1,WIPCalcMethod);
        CreateWIPBuffer(JT,2,WIPCalcMethod);
        CreateWIPBuffer(JT,3,WIPCalcMethod);
      END;

      IF (WIPCalcMethod = 1) AND NOT JobComplete THEN BEGIN
        JobPostingGr.TESTFIELD("Job Sales Applied Account");
        JobPostingGr.TESTFIELD("Job Costs Applied Account");
        JobPostingGr.TESTFIELD("WIP Costs Account");
        JobPostingGr.TESTFIELD("Recognized Costs Account");
        JobPostingGr.TESTFIELD("Recognized Sales Account");
        JobPostingGr.TESTFIELD("WIP Invoiced Sales Account");
        JT."WIP Sales Account" := JobPostingGr."WIP Invoiced Sales Account";
        JT."WIP Sales Balance Account" := JobPostingGr."Job Sales Applied Account";
        JT."WIP Costs Balance Account" := JobPostingGr."Job Costs Applied Account";
        JT."WIP Costs Account" := JobPostingGr."WIP Costs Account";
        JT."Recognized Costs Account" := JobPostingGr."Recognized Costs Account";
        JT."Recognized Sales Account" := JobPostingGr."Recognized Sales Account";
        JT."Recognized Costs Bal. Account" := JobPostingGr."WIP Costs Account";
        JT."Recognized Sales Bal. Account" := JobPostingGr."WIP Invoiced Sales Account";
        IF JT."WIP Amount" > 0 THEN BEGIN
          JobPostingGr.TESTFIELD("WIP Accrued Sales Account");
          JobPostingGr.TESTFIELD("Job Sales Adjustment Account");
          JT."WIP Account" := JobPostingGr."WIP Accrued Sales Account";
          JT."WIP Balance Account" := JobPostingGr."Job Costs Adjustment Account";
          CreateWIPBuffer(JT,5,WIPCalcMethod);
        END ELSE BEGIN
          JobPostingGr.TESTFIELD("WIP Invoiced Sales Account");
          JT."WIP Account" := JobPostingGr."WIP Invoiced Sales Account";
          JT."WIP Balance Account" := JobPostingGr."Job Sales Applied Account";
        END;
        CreateWIPBuffer(JT,0,WIPCalcMethod);
        CreateWIPBuffer(JT,1,WIPCalcMethod);
        CreateWIPBuffer(JT,2,WIPCalcMethod);
        CreateWIPBuffer(JT,3,WIPCalcMethod);
      END;

      IF (WIPCalcMethod >= 3) AND NOT JobComplete THEN BEGIN
        JobPostingGr.TESTFIELD("WIP Costs Account");
        JobPostingGr.TESTFIELD("Job Costs Applied Account");
        JobPostingGr.TESTFIELD("WIP Invoiced Sales Account");
        JobPostingGr.TESTFIELD("Job Sales Applied Account");
        JobPostingGr.TESTFIELD("Recognized Costs Account");
        JobPostingGr.TESTFIELD("Recognized Sales Account");
        JobPostingGr.TESTFIELD("WIP Accrued Sales Account");
        JT."WIP Costs Account" := JobPostingGr."WIP Costs Account";
        JT."WIP Costs Balance Account" := JobPostingGr."Job Costs Applied Account";
        JT."WIP Sales Account" := JobPostingGr."WIP Invoiced Sales Account";
        JT."WIP Sales Balance Account" := JobPostingGr."Job Sales Applied Account";
        JT."Recognized Costs Account" := JobPostingGr."Recognized Costs Account";
        JT."Recognized Costs Bal. Account" := JobPostingGr."WIP Costs Account";
        JT."Recognized Sales Account" := JobPostingGr."Recognized Sales Account";
        JT."Recognized Sales Bal. Account" := JobPostingGr."WIP Accrued Sales Account";
        CreateWIPBuffer(JT,0,WIPCalcMethod);
        CreateWIPBuffer(JT,1,WIPCalcMethod);
        IF WIPCalcMethod = 3 THEN BEGIN
          CreateWIPBuffer(JT,2,WIPCalcMethod);
          CreateWIPBuffer(JT,3,WIPCalcMethod);
        END;
      END;

      IF JobComplete THEN BEGIN
        JobPostingGr.TESTFIELD("Job Costs Applied Account");
        JobPostingGr.TESTFIELD("Job Sales Applied Account");
        JobPostingGr.TESTFIELD("Recognized Costs Account");
        JobPostingGr.TESTFIELD("Recognized Sales Account");
        JT."Recognized Costs Account" := JobPostingGr."Recognized Costs Account";
        JT."Recognized Costs Bal. Account" := JobPostingGr."Job Costs Applied Account";
        JT."Recognized Sales Account" := JobPostingGr."Recognized Sales Account";
        JT."Recognized Sales Bal. Account" := JobPostingGr."Job Sales Applied Account";
        CreateWIPBuffer(JT,2,WIPCalcMethod);
        CreateWIPBuffer(JT,3,WIPCalcMethod);
      END;

      JT.MODIFY;
    END;

    LOCAL PROCEDURE CreateWIPBuffer@15(JT@1000 : Record 1001;BufferType@1001 : Integer;WIPCalcMethod@1002 : Integer);
    VAR
      JobTaskDimension@1003 : Record 1002;
      DimensionBuffer@1004 : TEMPORARY Record 360;
    BEGIN
      CLEAR(WIPBuffer);

      DimensionBuffer.RESET;
      DimensionBuffer.DELETEALL;
      JobTaskDimension.SETRANGE("Job No.",JT."Job No.");
      JobTaskDimension.SETRANGE("Job Task No.",JT."Job Task No.");
      IF JobTaskDimension.FINDSET THEN
        REPEAT
          DimensionBuffer."Dimension Code" := JobTaskDimension."Dimension Code";
          DimensionBuffer."Dimension Value Code" := JobTaskDimension."Dimension Value Code";
          DimensionBuffer.INSERT;
        UNTIL JobTaskDimension.NEXT = 0;
      IF NOT DimMgt.CheckDimBuffer(DimensionBuffer) THEN
        ERROR(DimMgt.GetDimCombErr);
      WIPBuffer[1]."Dim Combination ID" := DimensionBufferManagement.GetDimensionId(DimensionBuffer);

      IF BufferType = WIPBuffer[1].Type::"WIP Sales" THEN BEGIN
        WIPBuffer[1]."Job No." := JT."Job No.";
        WIPBuffer[1]."Posting Group" := JT."Job Posting Group";
        WIPBuffer[1].Type := WIPBuffer[1].Type::"WIP Sales";
        WIPBuffer[1]."G/L Account No." := JT."WIP Sales Account";
        WIPBuffer[1]."Bal. G/L Account No." := JT."WIP Sales Balance Account";
        WIPBuffer[1]."WIP Method" := JT."WIP Method Used";
        WIPBuffer[1]."WIP Posting Date Filter" := JT."WIP Posting Date Filter";
        WIPBuffer[1]."WIP Planning Date Filter" := JT."WIP Planning Date Filter";
        IF WIPCalcMethod <> 1 THEN
          WIPBuffer[1]."WIP Entry Amount" := -JT."Contract (Invoiced Price)";
        IF WIPCalcMethod = 1 THEN
          IF JT."WIP Amount" < 0 THEN
            WIPBuffer[1]."WIP Entry Amount" := -JT."Contract (Invoiced Price)"
          ELSE
            WIPBuffer[1]."WIP Entry Amount" := -JT."Contract (Invoiced Price)" - JT."WIP Amount";
        WIPBuffer[1]."WIP Schedule (Total Cost)" := JT."WIP Schedule (Total Cost)";
        WIPBuffer[1]."WIP Schedule (Total Price)" := JT."WIP Schedule (Total Price)";
        WIPBuffer[1]."WIP Usage (Total Cost)" := JT."WIP Usage (Total Cost)";
        WIPBuffer[1]."WIP Usage (Total Price)" := JT."WIP Usage (Total Price)";
        WIPBuffer[1]."WIP Contract (Total Cost)" := JT."WIP Contract (Total Cost)";
        WIPBuffer[1]."WIP Contract (Total Price)" := JT."WIP Contract (Total Price)";
        WIPBuffer[1]."WIP (Invoiced Price)" := JT."WIP (Invoiced Price)";
        WIPBuffer[1]."WIP (Invoiced Cost)" := JT."WIP (Invoiced Cost)";

        WIPBuffer[2] := WIPBuffer[1];
        IF WIPBuffer[2].FIND THEN BEGIN
          WIPBuffer[2]."WIP Entry Amount" :=
            WIPBuffer[2]."WIP Entry Amount" + WIPBuffer[1]."WIP Entry Amount";
          WIPBuffer[2]."WIP Schedule (Total Cost)" :=
            WIPBuffer[2]."WIP Schedule (Total Cost)" + WIPBuffer[1]."WIP Schedule (Total Cost)";
          WIPBuffer[2]."WIP Schedule (Total Price)" :=
            WIPBuffer[2]."WIP Schedule (Total Price)" + WIPBuffer[1]."WIP Schedule (Total Price)";
          WIPBuffer[2]."WIP Usage (Total Cost)" :=
            WIPBuffer[2]."WIP Usage (Total Cost)" + WIPBuffer[1]."WIP Usage (Total Cost)";
          WIPBuffer[2]."WIP Usage (Total Price)" :=
            WIPBuffer[2]."WIP Usage (Total Price)" + WIPBuffer[1]."WIP Usage (Total Price)";
          WIPBuffer[2]."WIP Contract (Total Cost)" :=
            WIPBuffer[2]."WIP Contract (Total Cost)" + WIPBuffer[1]."WIP Contract (Total Cost)";
          WIPBuffer[2]."WIP Contract (Total Price)" :=
            WIPBuffer[2]."WIP Contract (Total Price)" + WIPBuffer[1]."WIP Contract (Total Price)";
          WIPBuffer[2]."WIP (Invoiced Price)" :=
            WIPBuffer[2]."WIP (Invoiced Price)" + WIPBuffer[1]."WIP (Invoiced Price)";
          WIPBuffer[2]."WIP (Invoiced Cost)" :=
            WIPBuffer[2]."WIP (Invoiced Cost)" + WIPBuffer[1]."WIP (Invoiced Cost)";
          WIPBuffer[2].MODIFY;
        END ELSE
          WIPBuffer[1].INSERT;
      END;

      IF BufferType = WIPBuffer[1].Type::"WIP Costs" THEN BEGIN
        WIPBuffer[1]."Job No." := JT."Job No.";
        WIPBuffer[1]."Posting Group" := JT."Job Posting Group";
        WIPBuffer[1].Type := WIPBuffer[1].Type::"WIP Costs";
        WIPBuffer[1]."G/L Account No." := JT."WIP Costs Account";
        WIPBuffer[1]."Bal. G/L Account No." := JT."WIP Costs Balance Account";
        WIPBuffer[1]."WIP Method" := JT."WIP Method Used";
        WIPBuffer[1]."WIP Posting Date Filter" := JT."WIP Posting Date Filter";
        WIPBuffer[1]."WIP Planning Date Filter" := JT."WIP Planning Date Filter";
        IF (WIPCalcMethod = 1) OR (WIPCalcMethod >= 3) THEN
          WIPBuffer[1]."WIP Entry Amount" := JT."WIP Usage (Total Cost)";
        IF (WIPCalcMethod = 0) OR (WIPCalcMethod = 2) THEN
          IF JT."WIP Amount" > 0 THEN
            WIPBuffer[1]."WIP Entry Amount" := JT."WIP Usage (Total Cost)"
          ELSE
            WIPBuffer[1]."WIP Entry Amount" := JT."WIP Usage (Total Cost)" - JT."WIP Amount";
        WIPBuffer[1]."WIP Schedule (Total Cost)" := JT."WIP Schedule (Total Cost)";
        WIPBuffer[1]."WIP Schedule (Total Price)" := JT."WIP Schedule (Total Price)";
        WIPBuffer[1]."WIP Usage (Total Cost)" := JT."WIP Usage (Total Cost)";
        WIPBuffer[1]."WIP Usage (Total Price)" := JT."WIP Usage (Total Price)";
        WIPBuffer[1]."WIP Contract (Total Cost)" := JT."WIP Contract (Total Cost)";
        WIPBuffer[1]."WIP Contract (Total Price)" := JT."WIP Contract (Total Price)";
        WIPBuffer[1]."WIP (Invoiced Price)" := JT."WIP (Invoiced Price)";
        WIPBuffer[1]."WIP (Invoiced Cost)" := JT."WIP (Invoiced Cost)";

        WIPBuffer[2] := WIPBuffer[1];
        IF WIPBuffer[2].FIND THEN BEGIN
          WIPBuffer[2]."WIP Entry Amount" :=
            WIPBuffer[2]."WIP Entry Amount" + WIPBuffer[1]."WIP Entry Amount";
          WIPBuffer[2]."WIP Schedule (Total Cost)" :=
            WIPBuffer[2]."WIP Schedule (Total Cost)" + WIPBuffer[1]."WIP Schedule (Total Cost)";
          WIPBuffer[2]."WIP Schedule (Total Price)" :=
            WIPBuffer[2]."WIP Schedule (Total Price)" + WIPBuffer[1]."WIP Schedule (Total Price)";
          WIPBuffer[2]."WIP Usage (Total Cost)" :=
            WIPBuffer[2]."WIP Usage (Total Cost)" + WIPBuffer[1]."WIP Usage (Total Cost)";
          WIPBuffer[2]."WIP Usage (Total Price)" :=
            WIPBuffer[2]."WIP Usage (Total Price)" + WIPBuffer[1]."WIP Usage (Total Price)";
          WIPBuffer[2]."WIP Contract (Total Cost)" :=
            WIPBuffer[2]."WIP Contract (Total Cost)" + WIPBuffer[1]."WIP Contract (Total Cost)";
          WIPBuffer[2]."WIP Contract (Total Price)" :=
            WIPBuffer[2]."WIP Contract (Total Price)" + WIPBuffer[1]."WIP Contract (Total Price)";
          WIPBuffer[2]."WIP (Invoiced Price)" :=
            WIPBuffer[2]."WIP (Invoiced Price)" + WIPBuffer[1]."WIP (Invoiced Price)";
          WIPBuffer[2]."WIP (Invoiced Cost)" :=
            WIPBuffer[2]."WIP (Invoiced Cost)" + WIPBuffer[1]."WIP (Invoiced Cost)";
          WIPBuffer[2].MODIFY;
        END ELSE
          WIPBuffer[1].INSERT;
      END;

      IF BufferType = WIPBuffer[1].Type::"Recognized Costs" THEN BEGIN
        WIPBuffer[1]."Job No." := JT."Job No.";
        WIPBuffer[1]."Posting Group" := JT."Job Posting Group";
        WIPBuffer[1].Type := WIPBuffer[1].Type::"Recognized Costs";
        WIPBuffer[1]."G/L Account No." := JT."Recognized Costs Bal. Account";
        WIPBuffer[1]."Bal. G/L Account No." := JT."Recognized Costs Account";
        WIPBuffer[1]."WIP Method" := JT."WIP Method Used";
        WIPBuffer[1]."Job Complete" := JobComplete;
        WIPBuffer[1]."WIP Posting Date Filter" := JT."WIP Posting Date Filter";
        WIPBuffer[1]."WIP Planning Date Filter" := JT."WIP Planning Date Filter";
        WIPBuffer[1]."WIP Entry Amount" := -JT."Recognized Costs Amount";
        WIPBuffer[1]."WIP Schedule (Total Cost)" := JT."WIP Schedule (Total Cost)";
        WIPBuffer[1]."WIP Schedule (Total Price)" := JT."WIP Schedule (Total Price)";
        WIPBuffer[1]."WIP Usage (Total Cost)" := JT."WIP Usage (Total Cost)";
        WIPBuffer[1]."WIP Usage (Total Price)" := JT."WIP Usage (Total Price)";
        WIPBuffer[1]."WIP Contract (Total Cost)" := JT."WIP Contract (Total Cost)";
        WIPBuffer[1]."WIP Contract (Total Price)" := JT."WIP Contract (Total Price)";
        WIPBuffer[1]."WIP (Invoiced Price)" := JT."WIP (Invoiced Price)";
        WIPBuffer[1]."WIP (Invoiced Cost)" := JT."WIP (Invoiced Cost)";

        WIPBuffer[2] := WIPBuffer[1];
        IF WIPBuffer[2].FIND THEN BEGIN
          WIPBuffer[2]."WIP Entry Amount" :=
            WIPBuffer[2]."WIP Entry Amount" + WIPBuffer[1]."WIP Entry Amount";
          WIPBuffer[2]."WIP Schedule (Total Cost)" :=
            WIPBuffer[2]."WIP Schedule (Total Cost)" + WIPBuffer[1]."WIP Schedule (Total Cost)";
          WIPBuffer[2]."WIP Schedule (Total Price)" :=
            WIPBuffer[2]."WIP Schedule (Total Price)" + WIPBuffer[1]."WIP Schedule (Total Price)";
          WIPBuffer[2]."WIP Usage (Total Cost)" :=
            WIPBuffer[2]."WIP Usage (Total Cost)" + WIPBuffer[1]."WIP Usage (Total Cost)";
          WIPBuffer[2]."WIP Usage (Total Price)" :=
            WIPBuffer[2]."WIP Usage (Total Price)" + WIPBuffer[1]."WIP Usage (Total Price)";
          WIPBuffer[2]."WIP Contract (Total Cost)" :=
            WIPBuffer[2]."WIP Contract (Total Cost)" + WIPBuffer[1]."WIP Contract (Total Cost)";
          WIPBuffer[2]."WIP Contract (Total Price)" :=
            WIPBuffer[2]."WIP Contract (Total Price)" + WIPBuffer[1]."WIP Contract (Total Price)";
          WIPBuffer[2]."WIP (Invoiced Price)" :=
            WIPBuffer[2]."WIP (Invoiced Price)" + WIPBuffer[1]."WIP (Invoiced Price)";
          WIPBuffer[2]."WIP (Invoiced Cost)" :=
            WIPBuffer[2]."WIP (Invoiced Cost)" + WIPBuffer[1]."WIP (Invoiced Cost)";
          WIPBuffer[2].MODIFY;
        END ELSE
          WIPBuffer[1].INSERT;
      END;

      IF BufferType = WIPBuffer[1].Type::"Recognized Sales" THEN BEGIN
        WIPBuffer[1]."Job No." := JT."Job No.";
        WIPBuffer[1]."Posting Group" := JT."Job Posting Group";
        WIPBuffer[1].Type := WIPBuffer[1].Type::"Recognized Sales";
        WIPBuffer[1]."G/L Account No." := JT."Recognized Sales Bal. Account";
        WIPBuffer[1]."Bal. G/L Account No." := JT."Recognized Sales Account";
        WIPBuffer[1]."WIP Method" := JT."WIP Method Used";
        WIPBuffer[1]."Job Complete" := JobComplete;
        WIPBuffer[1]."WIP Posting Date Filter" := JT."WIP Posting Date Filter";
        WIPBuffer[1]."WIP Planning Date Filter" := JT."WIP Planning Date Filter";
        WIPBuffer[1]."WIP Entry Amount" := JT."Recognized Sales Amount";
        WIPBuffer[1]."WIP Schedule (Total Cost)" := JT."WIP Schedule (Total Cost)";
        WIPBuffer[1]."WIP Schedule (Total Price)" := JT."WIP Schedule (Total Price)";
        WIPBuffer[1]."WIP Usage (Total Cost)" := JT."WIP Usage (Total Cost)";
        WIPBuffer[1]."WIP Usage (Total Price)" := JT."WIP Usage (Total Price)";
        WIPBuffer[1]."WIP Contract (Total Cost)" := JT."WIP Contract (Total Cost)";
        WIPBuffer[1]."WIP Contract (Total Price)" := JT."WIP Contract (Total Price)";
        WIPBuffer[1]."WIP (Invoiced Price)" := JT."WIP (Invoiced Price)";
        WIPBuffer[1]."WIP (Invoiced Cost)" := JT."WIP (Invoiced Cost)";

        WIPBuffer[2] := WIPBuffer[1];
        IF WIPBuffer[2].FIND THEN BEGIN
          WIPBuffer[2]."WIP Entry Amount" :=
            WIPBuffer[2]."WIP Entry Amount" + WIPBuffer[1]."WIP Entry Amount";
          WIPBuffer[2]."WIP Schedule (Total Cost)" :=
            WIPBuffer[2]."WIP Schedule (Total Cost)" + WIPBuffer[1]."WIP Schedule (Total Cost)";
          WIPBuffer[2]."WIP Schedule (Total Price)" :=
            WIPBuffer[2]."WIP Schedule (Total Price)" + WIPBuffer[1]."WIP Schedule (Total Price)";
          WIPBuffer[2]."WIP Usage (Total Cost)" :=
            WIPBuffer[2]."WIP Usage (Total Cost)" + WIPBuffer[1]."WIP Usage (Total Cost)";
          WIPBuffer[2]."WIP Usage (Total Price)" :=
            WIPBuffer[2]."WIP Usage (Total Price)" + WIPBuffer[1]."WIP Usage (Total Price)";
          WIPBuffer[2]."WIP Contract (Total Cost)" :=
            WIPBuffer[2]."WIP Contract (Total Cost)" + WIPBuffer[1]."WIP Contract (Total Cost)";
          WIPBuffer[2]."WIP Contract (Total Price)" :=
            WIPBuffer[2]."WIP Contract (Total Price)" + WIPBuffer[1]."WIP Contract (Total Price)";
          WIPBuffer[2]."WIP (Invoiced Price)" :=
            WIPBuffer[2]."WIP (Invoiced Price)" + WIPBuffer[1]."WIP (Invoiced Price)";
          WIPBuffer[2]."WIP (Invoiced Cost)" :=
            WIPBuffer[2]."WIP (Invoiced Cost)" + WIPBuffer[1]."WIP (Invoiced Cost)";
          WIPBuffer[2].MODIFY;
        END ELSE
          WIPBuffer[1].INSERT;
      END;

      IF BufferType = WIPBuffer[1].Type::"Accrued Costs" THEN BEGIN
        WIPBuffer[1]."Job No." := JT."Job No.";
        WIPBuffer[1]."Posting Group" := JT."Job Posting Group";
        WIPBuffer[1].Type := WIPBuffer[1].Type::"Accrued Costs";
        WIPBuffer[1]."G/L Account No." := JT."WIP Account";
        WIPBuffer[1]."Bal. G/L Account No." := JT."WIP Balance Account";
        WIPBuffer[1]."WIP Method" := JT."WIP Method Used";
        WIPBuffer[1]."WIP Posting Date Filter" := JT."WIP Posting Date Filter";
        WIPBuffer[1]."WIP Planning Date Filter" := JT."WIP Planning Date Filter";
        WIPBuffer[1]."WIP Entry Amount" := JT."WIP Amount";
        WIPBuffer[1]."WIP Schedule (Total Cost)" := JT."WIP Schedule (Total Cost)";
        WIPBuffer[1]."WIP Schedule (Total Price)" := JT."WIP Schedule (Total Price)";
        WIPBuffer[1]."WIP Usage (Total Cost)" := JT."WIP Usage (Total Cost)";
        WIPBuffer[1]."WIP Usage (Total Price)" := JT."WIP Usage (Total Price)";
        WIPBuffer[1]."WIP Contract (Total Cost)" := JT."WIP Contract (Total Cost)";
        WIPBuffer[1]."WIP Contract (Total Price)" := JT."WIP Contract (Total Price)";
        WIPBuffer[1]."WIP (Invoiced Price)" := JT."WIP (Invoiced Price)";
        WIPBuffer[1]."WIP (Invoiced Cost)" := JT."WIP (Invoiced Cost)";

        WIPBuffer[2] := WIPBuffer[1];
        IF WIPBuffer[2].FIND THEN BEGIN
          WIPBuffer[2]."WIP Entry Amount" :=
            WIPBuffer[2]."WIP Entry Amount" + WIPBuffer[1]."WIP Entry Amount";
          WIPBuffer[2]."WIP Schedule (Total Cost)" :=
            WIPBuffer[2]."WIP Schedule (Total Cost)" + WIPBuffer[1]."WIP Schedule (Total Cost)";
          WIPBuffer[2]."WIP Schedule (Total Price)" :=
            WIPBuffer[2]."WIP Schedule (Total Price)" + WIPBuffer[1]."WIP Schedule (Total Price)";
          WIPBuffer[2]."WIP Usage (Total Cost)" :=
            WIPBuffer[2]."WIP Usage (Total Cost)" + WIPBuffer[1]."WIP Usage (Total Cost)";
          WIPBuffer[2]."WIP Usage (Total Price)" :=
            WIPBuffer[2]."WIP Usage (Total Price)" + WIPBuffer[1]."WIP Usage (Total Price)";
          WIPBuffer[2]."WIP Contract (Total Cost)" :=
            WIPBuffer[2]."WIP Contract (Total Cost)" + WIPBuffer[1]."WIP Contract (Total Cost)";
          WIPBuffer[2]."WIP Contract (Total Price)" :=
            WIPBuffer[2]."WIP Contract (Total Price)" + WIPBuffer[1]."WIP Contract (Total Price)";
          WIPBuffer[2]."WIP (Invoiced Price)" :=
            WIPBuffer[2]."WIP (Invoiced Price)" + WIPBuffer[1]."WIP (Invoiced Price)";
          WIPBuffer[2]."WIP (Invoiced Cost)" :=
            WIPBuffer[2]."WIP (Invoiced Cost)" + WIPBuffer[1]."WIP (Invoiced Cost)";
          WIPBuffer[2].MODIFY;
        END ELSE
          WIPBuffer[1].INSERT;
      END;

      IF BufferType = WIPBuffer[1].Type::"Accrued Sales" THEN BEGIN
        WIPBuffer[1]."Job No." := JT."Job No.";
        WIPBuffer[1]."Posting Group" := JT."Job Posting Group";
        WIPBuffer[1].Type := WIPBuffer[1].Type::"Accrued Sales";
        WIPBuffer[1]."G/L Account No." := JT."WIP Account";
        WIPBuffer[1]."Bal. G/L Account No." := JT."WIP Balance Account";
        WIPBuffer[1]."WIP Method" := JT."WIP Method Used";
        WIPBuffer[1]."WIP Posting Date Filter" := JT."WIP Posting Date Filter";
        WIPBuffer[1]."WIP Planning Date Filter" := JT."WIP Planning Date Filter";
        WIPBuffer[1]."WIP Entry Amount" := JT."WIP Amount";
        WIPBuffer[1]."WIP Schedule (Total Cost)" := JT."WIP Schedule (Total Cost)";
        WIPBuffer[1]."WIP Schedule (Total Price)" := JT."WIP Schedule (Total Price)";
        WIPBuffer[1]."WIP Usage (Total Cost)" := JT."WIP Usage (Total Cost)";
        WIPBuffer[1]."WIP Usage (Total Price)" := JT."WIP Usage (Total Price)";
        WIPBuffer[1]."WIP Contract (Total Cost)" := JT."WIP Contract (Total Cost)";
        WIPBuffer[1]."WIP Contract (Total Price)" := JT."WIP Contract (Total Price)";
        WIPBuffer[1]."WIP (Invoiced Price)" := JT."WIP (Invoiced Price)";
        WIPBuffer[1]."WIP (Invoiced Cost)" := JT."WIP (Invoiced Cost)";

        WIPBuffer[2] := WIPBuffer[1];
        IF WIPBuffer[2].FIND THEN BEGIN
          WIPBuffer[2]."WIP Entry Amount" :=
            WIPBuffer[2]."WIP Entry Amount" + WIPBuffer[1]."WIP Entry Amount";
          WIPBuffer[2]."WIP Schedule (Total Cost)" :=
            WIPBuffer[2]."WIP Schedule (Total Cost)" + WIPBuffer[1]."WIP Schedule (Total Cost)";
          WIPBuffer[2]."WIP Schedule (Total Price)" :=
            WIPBuffer[2]."WIP Schedule (Total Price)" + WIPBuffer[1]."WIP Schedule (Total Price)";
          WIPBuffer[2]."WIP Usage (Total Cost)" :=
            WIPBuffer[2]."WIP Usage (Total Cost)" + WIPBuffer[1]."WIP Usage (Total Cost)";
          WIPBuffer[2]."WIP Usage (Total Price)" :=
            WIPBuffer[2]."WIP Usage (Total Price)" + WIPBuffer[1]."WIP Usage (Total Price)";
          WIPBuffer[2]."WIP Contract (Total Cost)" :=
            WIPBuffer[2]."WIP Contract (Total Cost)" + WIPBuffer[1]."WIP Contract (Total Cost)";
          WIPBuffer[2]."WIP Contract (Total Price)" :=
            WIPBuffer[2]."WIP Contract (Total Price)" + WIPBuffer[1]."WIP Contract (Total Price)";
          WIPBuffer[2]."WIP (Invoiced Price)" :=
            WIPBuffer[2]."WIP (Invoiced Price)" + WIPBuffer[1]."WIP (Invoiced Price)";
          WIPBuffer[2]."WIP (Invoiced Cost)" :=
            WIPBuffer[2]."WIP (Invoiced Cost)" + WIPBuffer[1]."WIP (Invoiced Cost)";
          WIPBuffer[2].MODIFY;
        END ELSE
          WIPBuffer[1].INSERT;
      END;
    END;

    LOCAL PROCEDURE CalcWIPPercent@4(WIPCalcMethod@1004 : Integer;VAR WIPPercent@1000 : Decimal;VAR WIPSpecialAmount@1001 : Decimal;VAR TotalJT@1002 : Record 1001);
    BEGIN
      IF WIPCalcMethod = 0 THEN
        CalcWIPPercent1(WIPPercent,WIPSpecialAmount,TotalJT);
      IF WIPCalcMethod = 1 THEN
        CalcWIPPercent2(WIPPercent,WIPSpecialAmount,TotalJT);
      IF WIPCalcMethod = 2 THEN
        CalcWIPPercent3(WIPPercent,WIPSpecialAmount,TotalJT);
      IF WIPCalcMethod = 3 THEN
        CalcWIPPercent4(WIPPercent,WIPSpecialAmount,TotalJT);
      IF WIPCalcMethod = 4 THEN
        CalcWIPPercent5(WIPPercent,WIPSpecialAmount,TotalJT);
    END;

    LOCAL PROCEDURE CalcWIPAmount@31(WIPCalcMethod@1000 : Integer;VAR JT@1001 : Record 1001;WIPPercent@1002 : Decimal);
    BEGIN
      IF WIPCalcMethod = 0 THEN
        CalcWIPAmount1(JT,WIPPercent);
      IF WIPCalcMethod = 1 THEN
        CalcWIPAmount2(JT,WIPPercent);
      IF WIPCalcMethod = 2 THEN
        CalcWIPAmount3(JT,WIPPercent);
      IF WIPCalcMethod = 3 THEN
        CalcWIPAmount4(JT,WIPPercent);
      IF WIPCalcMethod = 4 THEN
        CalcWIPAmount5(JT);
    END;

    LOCAL PROCEDURE CalcWIPPercent1@16(VAR WIPPercent@1000 : Decimal;VAR WIPSpecialAmount@1001 : Decimal;TotalJT@1002 : Record 1001);
    VAR
      WIPAmount@1003 : Decimal;
    BEGIN
      WIPPercent := 0;
      WIPSpecialAmount := 0;
      IF JobComplete OR (TotalJT."Schedule (Total Price)" = 0) THEN
        EXIT;
      WIPAmount :=
        (TotalJT."Usage (Total Cost)" *
         TotalJT."Contract (Total Price)" /
         TotalJT."Schedule (Total Price)") -
        TotalJT."Schedule (Total Cost)" *
        TotalJT."Contract (Invoiced Price)" /
        TotalJT."Schedule (Total Price)";
      IF TotalJT."Usage (Total Cost)" <> 0 THEN
        WIPPercent := WIPAmount / TotalJT."Usage (Total Cost)"
      ELSE
        WIPSpecialAmount := WIPAmount;
    END;

    LOCAL PROCEDURE CalcWIPPercent2@17(VAR WIPPercent@1000 : Decimal;VAR WIPSpecialAmount@1001 : Decimal;TotalJT@1002 : Record 1001);
    VAR
      WIPAmount@1003 : Decimal;
    BEGIN
      WIPPercent := 0;
      WIPSpecialAmount := 0;
      IF JobComplete OR (TotalJT."Schedule (Total Price)" = 0) THEN
        EXIT;
      WIPAmount :=
        (TotalJT."Usage (Total Price)" *
         TotalJT."Contract (Total Price)" /
         TotalJT."Schedule (Total Price)") -
        TotalJT."Schedule (Total Price)" *
        TotalJT."Contract (Invoiced Price)" /
        TotalJT."Schedule (Total Price)";
      IF TotalJT."Usage (Total Price)" <> 0 THEN
        WIPPercent := WIPAmount / TotalJT."Usage (Total Price)"
      ELSE
        WIPSpecialAmount := WIPAmount;
    END;

    LOCAL PROCEDURE CalcWIPPercent3@18(VAR WIPPercent@1000 : Decimal;VAR WIPSpecialAmount@1001 : Decimal;TotalJT@1002 : Record 1001);
    VAR
      WIPAmount@1003 : Decimal;
    BEGIN
      WIPPercent := 0;
      WIPSpecialAmount := 0;
      IF JobComplete OR (TotalJT."Contract (Total Price)" = 0) THEN
        EXIT;
      WIPAmount :=
        TotalJT."Usage (Total Cost)" - ((TotalJT."Contract (Invoiced Price)" / TotalJT."Contract (Total Price)") *
                                        TotalJT."Schedule (Total Cost)");
      IF TotalJT."Usage (Total Cost)" <> 0 THEN
        WIPPercent := WIPAmount / TotalJT."Usage (Total Cost)"
      ELSE
        WIPSpecialAmount := WIPAmount;
    END;

    LOCAL PROCEDURE CalcWIPPercent4@21(VAR WIPPercent@1000 : Decimal;VAR WIPSpecialAmount@1001 : Decimal;TotalJT@1002 : Record 1001);
    VAR
      WIPAmount@1003 : Decimal;
    BEGIN
      WIPPercent := 0;
      WIPSpecialAmount := 0;
      IF JobComplete OR (TotalJT."Schedule (Total Cost)" = 0) THEN
        EXIT;
      IF TotalJT."Usage (Total Cost)" <= TotalJT."Schedule (Total Cost)" THEN
        WIPAmount :=
          (TotalJT."Usage (Total Cost)" / TotalJT."Schedule (Total Cost)") *
          TotalJT."Contract (Total Price)"
      ELSE
        WIPAmount := TotalJT."Contract (Total Price)";
      IF TotalJT."Contract (Total Price)" <> 0 THEN
        WIPPercent := WIPAmount / TotalJT."Contract (Total Price)"
      ELSE
        WIPSpecialAmount := WIPAmount;
    END;

    LOCAL PROCEDURE CalcWIPPercent5@5(VAR WIPPercent@1000 : Decimal;VAR WIPSpecialAmount@1001 : Decimal;TotalJT@1002 : Record 1001);
    VAR
      WIPAmount@1003 : Decimal;
    BEGIN
      WIPPercent := 0;
      WIPSpecialAmount := 0;
      IF JobComplete OR (TotalJT."Schedule (Total Cost)" = 0) THEN
        EXIT;
      WIPAmount := TotalJT."Usage (Total Cost)";
      IF TotalJT."Usage (Total Cost)" <> 0 THEN
        WIPPercent := WIPAmount / TotalJT."Usage (Total Cost)"
      ELSE
        WIPSpecialAmount := WIPAmount;
    END;

    LOCAL PROCEDURE CalcWIPAmount1@32(VAR JT@1001 : Record 1001;WIPPercent@1002 : Decimal);
    BEGIN
      IF WIPPercent <> 0 THEN
        JT."WIP Amount" := ROUND(JT."Usage (Total Cost)" * WIPPercent);
      IF JT."Schedule (Total Cost)" <> 0 THEN
        JT."Cost Completion %" := ROUND(100 * JT."Usage (Total Cost)" / JT."Schedule (Total Cost)",0.00001)
      ELSE
        JT."Cost Completion %" := 0;
      IF JT."Contract (Total Price)" <> 0 THEN
        JT."Invoiced %" := ROUND(100 * JT."Contract (Invoiced Price)" / JT."Contract (Total Price)",0.00001)
      ELSE
        JT."Invoiced %" := 0;
      JT."Recognized Sales Amount" := JT."Contract (Invoiced Price)";
      JT."Recognized Costs Amount" := (JT."Usage (Total Cost)" - JT."WIP Amount");
      IF JobComplete THEN BEGIN
        JT."Recognized Sales Amount" := JT."Contract (Invoiced Price)";
        JT."Recognized Costs Amount" := JT."Usage (Total Cost)";
      END;
    END;

    LOCAL PROCEDURE CalcWIPAmount2@33(VAR JT@1001 : Record 1001;WIPPercent@1002 : Decimal);
    BEGIN
      IF WIPPercent <> 0 THEN
        JT."WIP Amount" := ROUND(JT."Usage (Total Price)" * WIPPercent);
      IF JT."Schedule (Total Cost)" <> 0 THEN
        JT."Cost Completion %" := ROUND(100 * JT."Usage (Total Cost)" / JT."Schedule (Total Cost)",0.00001)
      ELSE
        JT."Cost Completion %" := 0;
      IF JT."Contract (Total Price)" <> 0 THEN
        JT."Invoiced %" := ROUND(100 * JT."Contract (Invoiced Price)" / JT."Contract (Total Price)",0.00001)
      ELSE
        JT."Invoiced %" := 0;
      JT."Recognized Sales Amount" := (JT."Contract (Invoiced Price)" + JT."WIP Amount");
      JT."Recognized Costs Amount" := JT."Usage (Total Cost)";
      IF JobComplete THEN BEGIN
        JT."Recognized Sales Amount" := JT."Contract (Invoiced Price)";
        JT."Recognized Costs Amount" := JT."Usage (Total Cost)";
      END;
    END;

    LOCAL PROCEDURE CalcWIPAmount3@34(VAR JT@1001 : Record 1001;WIPPercent@1002 : Decimal);
    BEGIN
      IF WIPPercent <> 0 THEN
        JT."WIP Amount" := ROUND(JT."Usage (Total Cost)" * WIPPercent);
      IF JT."Schedule (Total Cost)" <> 0 THEN
        JT."Cost Completion %" := ROUND(100 * JT."Usage (Total Cost)" / JT."Schedule (Total Cost)",0.00001)
      ELSE
        JT."Cost Completion %" := 0;
      IF JT."Contract (Total Price)" <> 0 THEN
        JT."Invoiced %" := ROUND(100 * JT."Contract (Invoiced Price)" / JT."Contract (Total Price)",0.00001)
      ELSE
        JT."Invoiced %" := 0;
      JT."Recognized Sales Amount" := JT."Contract (Invoiced Price)";
      JT."Recognized Costs Amount" := (JT."Usage (Total Cost)" - JT."WIP Amount");
      IF JobComplete THEN BEGIN
        JT."Recognized Sales Amount" := JT."Contract (Invoiced Price)";
        JT."Recognized Costs Amount" := JT."Usage (Total Cost)";
      END;
    END;

    LOCAL PROCEDURE CalcWIPAmount4@35(VAR JT@1001 : Record 1001;WIPPercent@1000 : Decimal);
    BEGIN
      IF WIPPercent <> 0 THEN
        JT."WIP Amount" := ROUND(JT."Contract (Total Price)" * WIPPercent);
      JT."Invoiced Sales Amount" := -JT."Contract (Invoiced Price)";
      IF JT."Schedule (Total Cost)" <> 0 THEN
        JT."Cost Completion %" := ROUND(100 * JT."Usage (Total Cost)" / JT."Schedule (Total Cost)",0.00001)
      ELSE
        JT."Cost Completion %" := 0;
      IF JT."Contract (Total Price)" <> 0 THEN
        JT."Invoiced %" := ROUND(100 * JT."Contract (Invoiced Price)" / JT."Contract (Total Price)",0.00001)
      ELSE
        JT."Invoiced %" := 0;
      JT."Recognized Sales Amount" := JT."WIP Amount";
      JT."Recognized Costs Amount" := JT."Usage (Total Cost)";
      IF JobComplete THEN BEGIN
        JT."Invoiced Sales Amount" := 0;
        JT."Recognized Sales Amount" := JT."Contract (Invoiced Price)";
        JT."Recognized Costs Amount" := JT."Usage (Total Cost)";
      END;
    END;

    LOCAL PROCEDURE CalcWIPAmount5@6(VAR JT@1001 : Record 1001);
    BEGIN
      JT."WIP Amount" := JT."Usage (Total Cost)";
      JT."Invoiced Sales Amount" := -JT."Contract (Invoiced Price)";
      IF JT."Schedule (Total Cost)" <> 0 THEN
        JT."Cost Completion %" := ROUND(100 * JT."Usage (Total Cost)" / JT."Schedule (Total Cost)",0.00001)
      ELSE
        JT."Cost Completion %" := 0;
      IF JT."Contract (Total Price)" <> 0 THEN
        JT."Invoiced %" := ROUND(100 * JT."Contract (Invoiced Price)" / JT."Contract (Total Price)",0.00001)
      ELSE
        JT."Invoiced %" := 0;
      IF JobComplete THEN BEGIN
        JT."Invoiced Sales Amount" := 0;
        JT."Recognized Sales Amount" := JT."Contract (Invoiced Price)";
        JT."Recognized Costs Amount" := JT."Usage (Total Cost)";
      END;
    END;

    PROCEDURE InitWIP@2(JobNo@1000 : Code[20]);
    VAR
      JT@1001 : Record 1001;
      JobWIPEntry@1002 : Record 1004;
    BEGIN
      JT.SETRANGE("Job No.",JobNo);
      IF JT.FIND('-') THEN
        REPEAT
          JT.InitWIPFields;
          JT.MODIFY;
        UNTIL JT.NEXT = 0;
      JobWIPEntry.SETCURRENTKEY("Job No.");
      JobWIPEntry.SETRANGE("Job No.",JobNo);
      JobWIPEntry.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE CreateWIPEntries@1(JobNo@1000 : Code[20]);
    VAR
      JobWIPEntry@1001 : Record 1004;
      DimensionBuffer@1002 : TEMPORARY Record 360;
      LedgerEntryDimension@1004 : Record 355;
      NextEntryNo@1003 : Integer;
    BEGIN
      IF JobWIPEntry.FIND('+') THEN
        NextEntryNo := JobWIPEntry."Entry No." + 1
      ELSE
        NextEntryNo := 1;
      CLEAR(JobWIPEntry);

      GetGLSetup;
      IF WIPBuffer[1].FIND('-') THEN
        REPEAT
          IF WIPBuffer[1]."WIP Entry Amount" <> 0 THEN BEGIN
            DimensionBuffer.RESET;
            DimensionBuffer.DELETEALL;
            DimensionBufferManagement.RetrieveDimensions(WIPBuffer[1]."Dim Combination ID",DimensionBuffer);
            JobWIPEntry."Job No." := JobNo;
            JobWIPEntry."WIP Posting Date" := WIPPostingDate;
            JobWIPEntry."Document No." := DocNo;
            JobWIPEntry.Type := WIPBuffer[1].Type;
            JobWIPEntry."Job Posting Group" := WIPBuffer[1]."Posting Group";
            JobWIPEntry."G/L Account No." := WIPBuffer[1]."G/L Account No.";
            JobWIPEntry."G/L Bal. Account No." := WIPBuffer[1]."Bal. G/L Account No.";
            JobWIPEntry."WIP Method Used" := WIPBuffer[1]."WIP Method";
            JobWIPEntry."Job Complete" := WIPBuffer[1]."Job Complete";
            JobWIPEntry."WIP Posting Date Filter" := WIPBuffer[1]."WIP Posting Date Filter";
            JobWIPEntry."WIP Planning Date Filter" := WIPBuffer[1]."WIP Planning Date Filter";
            JobWIPEntry."WIP Entry Amount" := WIPBuffer[1]."WIP Entry Amount";
            JobWIPEntry."WIP Schedule (Total Cost)" := WIPBuffer[1]."WIP Schedule (Total Cost)";
            JobWIPEntry."WIP Schedule (Total Price)" := WIPBuffer[1]."WIP Schedule (Total Price)";
            JobWIPEntry."WIP Usage (Total Cost)" := WIPBuffer[1]."WIP Usage (Total Cost)";
            JobWIPEntry."WIP Usage (Total Price)" := WIPBuffer[1]."WIP Usage (Total Price)";
            JobWIPEntry."WIP Contract (Total Cost)" := WIPBuffer[1]."WIP Contract (Total Cost)";
            JobWIPEntry."WIP Contract (Total Price)" := WIPBuffer[1]."WIP Contract (Total Price)";
            JobWIPEntry."WIP (Invoiced Price)" := WIPBuffer[1]."WIP (Invoiced Price)";
            JobWIPEntry."WIP (Invoiced Cost)" := WIPBuffer[1]."WIP (Invoiced Cost)";
            JobWIPEntry."Entry No." := NextEntryNo;
            IF DimensionBuffer.FINDSET THEN
              REPEAT
                LedgerEntryDimension."Table ID" := DATABASE::"Job WIP Entry";
                LedgerEntryDimension."Entry No." := JobWIPEntry."Entry No.";
                LedgerEntryDimension."Dimension Code" := DimensionBuffer."Dimension Code";
                LedgerEntryDimension."Dimension Value Code" := DimensionBuffer."Dimension Value Code";
                IF LedgerEntryDimension."Dimension Code" = GLSetup."Global Dimension 1 Code" THEN
                  JobWIPEntry."Global Dimension 1 Code" := DimensionBuffer."Dimension Value Code";
                IF LedgerEntryDimension."Dimension Code" = GLSetup."Global Dimension 2 Code" THEN
                  JobWIPEntry."Global Dimension 2 Code" := DimensionBuffer."Dimension Value Code";
                LedgerEntryDimension.INSERT;
              UNTIL DimensionBuffer.NEXT = 0;
            JobWIPEntry.INSERT;
            NextEntryNo := NextEntryNo + 1;
          END;
        UNTIL WIPBuffer[1].NEXT = 0;
    END;

    PROCEDURE CalcGLWIP@3(JobNo@1000 : Code[20];JustReverse@1001 : Boolean;DocNo@1007 : Code[20];PostingDate@1008 : Date;NewPostDate@1012 : Boolean);
    VAR
      SourceCodeSetup@1009 : Record 242;
      GLEntry@1004 : Record 17;
      Job@1010 : Record 167;
      JobWIPEntry@1003 : Record 1004;
      JobWIPGLEntry@1002 : Record 1005;
      LedgerEntryDimension@1013 : Record 355;
      NextEntryNo@1005 : Integer;
      NextTransactionNo@1006 : Integer;
      WIPCalcMethodFound@1011 : Boolean;
    BEGIN
      JobWIPGLEntry.LOCKTABLE;
      JobWIPEntry.LOCKTABLE;
      Job.LOCKTABLE;
      Job.GET(JobNo);

      JobWIPGLEntry.SETCURRENTKEY("Job No.",Reversed,"Job Complete");
      JobWIPGLEntry.SETRANGE("Job No.",JobNo);
      JobWIPGLEntry.SETRANGE("Job Complete",TRUE);
      IF JobWIPGLEntry.FIND('-') THEN
        EXIT;
      JobWIPGLEntry.RESET;

      Job.TestBlocked;
      Job."WIP Posted To G/L" := NOT JustReverse;
      IF NewPostDate THEN
        Job."WIP G/L Posting Date" := PostingDate;
      IF JustReverse THEN BEGIN
        Job."WIP G/L Posting Date" := 0D;
        Job."Posted WIP Method Used" := 0;
      END;
      Job.MODIFY;
      IF JobWIPGLEntry.FIND('+') THEN
        NextEntryNo := JobWIPGLEntry."Entry No." + 1
      ELSE
        NextEntryNo := 1;
      SourceCodeSetup.GET;
      JobWIPGLEntry.SETCURRENTKEY("WIP Transaction No.");
      IF JobWIPGLEntry.FIND('+') THEN
        NextTransactionNo := JobWIPGLEntry."WIP Transaction No." + 1
      ELSE
        NextTransactionNo := 1;
      JobWIPGLEntry.SETCURRENTKEY("Job No.",Reversed);
      JobWIPGLEntry.SETRANGE("Job No.",JobNo);
      JobWIPGLEntry.SETRANGE(Reversed,FALSE);
      // reversed
      IF JobWIPGLEntry.FIND('-') THEN
        REPEAT
          IF JobWIPGLEntry."Posting Date" > PostingDate THEN
            ERROR(Text004,JobWIPGLEntry."Job No.",JobWIPGLEntry."Posting Date");
        UNTIL JobWIPGLEntry.NEXT = 0;
      JobWIPGLEntry.SETRANGE("Job No.",JobNo);
      JobWIPGLEntry.SETRANGE(Reversed,FALSE);
      IF JobWIPGLEntry.FIND('-') THEN
        REPEAT
          LedgerEntryDimension.SETRANGE("Table ID",DATABASE::"Job WIP G/L Entry");
          LedgerEntryDimension.SETRANGE("Entry No.",JobWIPGLEntry."Entry No.");
          PostWIPGL(JobWIPGLEntry,TRUE,DocNo,SourceCodeSetup."Job G/L WIP",PostingDate,LedgerEntryDimension);
        UNTIL JobWIPGLEntry.NEXT = 0;
      JobWIPGLEntry.MODIFYALL("Reverse Date",PostingDate);
      JobWIPGLEntry.MODIFYALL(Reversed,TRUE);
      IF JustReverse THEN
        EXIT;
      JobWIPEntry.SETRANGE("Job No.",JobNo);
      IF JobWIPEntry.FIND('-') THEN BEGIN
        WIPCalcMethodFound := FALSE;
        REPEAT
          CLEAR(JobWIPGLEntry);
          JobWIPGLEntry."Job No." := JobWIPEntry."Job No.";
          JobWIPGLEntry."Document No." := JobWIPEntry."Document No.";
          JobWIPGLEntry."G/L Account No." := JobWIPEntry."G/L Account No.";
          JobWIPGLEntry."G/L Bal. Account No." := JobWIPEntry."G/L Bal. Account No.";
          JobWIPGLEntry.Type := JobWIPEntry.Type;
          JobWIPGLEntry."WIP Posting Date" := JobWIPEntry."WIP Posting Date";
          IF NewPostDate THEN
            JobWIPGLEntry."Posting Date" := PostingDate
          ELSE
            JobWIPGLEntry."Posting Date" := JobWIPEntry."WIP Posting Date";
          JobWIPGLEntry."Job Posting Group" := JobWIPEntry."Job Posting Group";
          JobWIPGLEntry."WIP Method Used" := JobWIPEntry."WIP Method Used";
          IF NOT WIPCalcMethodFound THEN BEGIN
            Job."Posted WIP Method Used" := JobWIPEntry."WIP Method Used";
            IF NOT NewPostDate THEN
              Job."WIP G/L Posting Date" := JobWIPEntry."WIP Posting Date";
            Job.MODIFY;
            WIPCalcMethodFound := TRUE;
          END;
          JobWIPGLEntry."WIP Posting Date Filter" := JobWIPEntry."WIP Posting Date Filter";
          JobWIPGLEntry."WIP Planning Date Filter" := JobWIPEntry."WIP Planning Date Filter";
          JobWIPGLEntry.Reversed := FALSE;
          JobWIPGLEntry."Job Complete" := JobWIPEntry."Job Complete";
          JobWIPGLEntry."WIP Transaction No." := NextTransactionNo;
          IF JobWIPGLEntry.Type IN [JobWIPGLEntry.Type::"Recognized Costs",JobWIPGLEntry.Type::"Recognized Sales"] THEN BEGIN
            IF JobWIPGLEntry."Job Complete" THEN
              JobWIPGLEntry.Description := STRSUBSTNO(Text000,Text003,JobWIPGLEntry.FIELDCAPTION("Job No."),JobNo,
                  JobWIPGLEntry."Posting Date")
            ELSE
              JobWIPGLEntry.Description := STRSUBSTNO(Text000,Text002,JobWIPGLEntry.FIELDCAPTION("Job No."),JobNo,
                  JobWIPGLEntry."Posting Date");
          END ELSE
            JobWIPGLEntry.Description := STRSUBSTNO(Text000,Text001,JobWIPGLEntry.FIELDCAPTION("Job No."),JobNo,
                JobWIPGLEntry."Posting Date");
          JobWIPGLEntry."WIP Entry Amount" := JobWIPEntry."WIP Entry Amount";
          JobWIPGLEntry."WIP Schedule (Total Cost)" := JobWIPEntry."WIP Schedule (Total Cost)";
          JobWIPGLEntry."WIP Schedule (Total Price)" := JobWIPEntry."WIP Schedule (Total Price)";
          JobWIPGLEntry."WIP Usage (Total Cost)" := JobWIPEntry."WIP Usage (Total Cost)";
          JobWIPGLEntry."WIP Usage (Total Price)" := JobWIPEntry."WIP Usage (Total Price)";
          JobWIPGLEntry."WIP Contract (Total Cost)" := JobWIPEntry."WIP Contract (Total Cost)";
          JobWIPGLEntry."WIP Contract (Total Price)" := JobWIPEntry."WIP Contract (Total Price)";
          JobWIPGLEntry."WIP (Invoiced Price)" := JobWIPEntry."WIP (Invoiced Price)";
          JobWIPGLEntry."WIP (Invoiced Cost)" := JobWIPEntry."WIP (Invoiced Cost)";
          JobWIPGLEntry."Global Dimension 1 Code" := JobWIPEntry."Global Dimension 1 Code";
          JobWIPGLEntry."Global Dimension 2 Code" := JobWIPEntry."Global Dimension 2 Code";
          JobWIPGLEntry."Entry No." := NextEntryNo;
          NextEntryNo := NextEntryNo + 1;
          LedgerEntryDimension.RESET;
          LedgerEntryDimension.SETRANGE("Table ID",DATABASE::"Job WIP Entry");
          LedgerEntryDimension.SETRANGE("Entry No.",JobWIPEntry."Entry No.");
          PostWIPGL(JobWIPGLEntry,
                    FALSE,
                    JobWIPGLEntry."Document No.",
                    SourceCodeSetup."Job G/L WIP",
                    JobWIPGLEntry."Posting Date",
                    LedgerEntryDimension);
          GLEntry.FIND('+');
          JobWIPGLEntry."G/L Entry No." := GLEntry."Entry No.";
          DimMgt.CopyLedgEntryDimToLedgEntryDim(DATABASE::"Job WIP Entry",
                                                JobWIPEntry."Entry No.",
                                                DATABASE::"Job WIP G/L Entry",
                                                JobWIPGLEntry."Entry No.");
          JobWIPGLEntry.INSERT;
        UNTIL JobWIPEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE PostWIPGL@10(JobWIPGLEntry@1000 : Record 1005;Reversed@1002 : Boolean;JnlDocNo@1005 : Code[20];SourceCode@1006 : Code[10];JnlPostingDate@1004 : Date;VAR LedgerEntryDimension@1001 : Record 355);
    VAR
      GLAmount@1003 : Decimal;
    BEGIN
      CheckJobGLAcc(JobWIPGLEntry."G/L Account No.");
      CheckJobGLAcc(JobWIPGLEntry."G/L Bal. Account No.");
      GLAmount := JobWIPGLEntry."WIP Entry Amount";
      IF Reversed THEN
        GLAmount := -GLAmount;

      InsertWIPGL(JobWIPGLEntry."G/L Bal. Account No.",JnlPostingDate,JnlDocNo,SourceCode,-GLAmount,JobWIPGLEntry.Description,
        JobWIPGLEntry."Job No.",LedgerEntryDimension);
      InsertWIPGL(JobWIPGLEntry."G/L Account No.",JnlPostingDate,JnlDocNo,SourceCode,GLAmount,JobWIPGLEntry.Description,
        JobWIPGLEntry."Job No.",LedgerEntryDimension);
    END;

    LOCAL PROCEDURE InsertWIPGL@7(AccNo@1005 : Code[20];JnlPostingDate@1000 : Date;JnlDocNo@1001 : Code[20];SourceCode@1002 : Code[10];GLAmount@1003 : Decimal;JnlDescription@1010 : Text[50];JobNo@1007 : Code[20];VAR LedgerEntryDimension@1009 : Record 355);
    VAR
      GenJnlLine@1004 : Record 81;
      GLAcc@1006 : Record 15;
      TempJnlLineDim@1008 : TEMPORARY Record 356;
    BEGIN
      GLAcc.GET(AccNo);
      WITH GenJnlLine DO BEGIN
        INIT;
        "Posting Date" := JnlPostingDate;
        "Account No." := AccNo;
        "Tax Area Code" := GLAcc."Tax Area Code";
        "Tax Liable" := GLAcc."Tax Liable";
        "Tax Group Code" := GLAcc."Tax Group Code";
        Amount := GLAmount;
        "Document No." := JnlDocNo;
        "Source Code" := SourceCode;
        Description := JnlDescription;
        "Job No." := JobNo;
        "System-Created Entry" := TRUE;
      END;
      CLEAR(TempJnlLineDim);
      TempJnlLineDim.DELETEALL;
      CLEAR(DimMgt);
      DimMgt.MoveLedgEntryDimToJnlLineDim(LedgerEntryDimension,TempJnlLineDim,DATABASE::"Gen. Journal Line",'','',0,0);
      GetGLSetup;
      TempJnlLineDim.SETRANGE("Dimension Code",GLSetup."Global Dimension 1 Code");
      IF TempJnlLineDim.FINDFIRST THEN
        GenJnlLine."Shortcut Dimension 1 Code" := TempJnlLineDim."Dimension Value Code"
      ELSE
        GenJnlLine."Shortcut Dimension 1 Code" := '';
      TempJnlLineDim.SETRANGE("Dimension Code",GLSetup."Global Dimension 2 Code");
      IF TempJnlLineDim.FINDFIRST THEN
        GenJnlLine."Shortcut Dimension 2 Code" := TempJnlLineDim."Dimension Value Code"
      ELSE
        GenJnlLine."Shortcut Dimension 2 Code" := '';
      TempJnlLineDim.RESET;
      GenJnPostLine.RunWithCheck(GenJnlLine,TempJnlLineDim);
    END;

    LOCAL PROCEDURE CheckJobGLAcc@9(AccNo@1000 : Code[20]);
    VAR
      GLAcc@1001 : Record 15;
    BEGIN
      GLAcc.GET(AccNo);
      GLAcc.CheckGLAcc;
      GLAcc.TESTFIELD("Gen. Posting Type",GLAcc."Gen. Posting Type"::" ");
      GLAcc.TESTFIELD("Gen. Bus. Posting Group",'');
      GLAcc.TESTFIELD("Gen. Prod. Posting Group",'');
      GLAcc.TESTFIELD("VAT Bus. Posting Group",'');
      GLAcc.TESTFIELD("VAT Prod. Posting Group",'');
    END;

    PROCEDURE GetGLSetup@12();
    BEGIN
      IF NOT HasGotGLSetup THEN BEGIN
        GLSetup.GET;
        HasGotGLSetup := TRUE;
      END;
    END;

    PROCEDURE ReOpenJob@13(JobNo@1000 : Code[20]);
    VAR
      JobWIPGLEntry@1001 : Record 1005;
    BEGIN
      InitWIP(JobNo);
      JobWIPGLEntry.SETCURRENTKEY("Job No.",Reversed,"Job Complete");
      JobWIPGLEntry.SETRANGE("Job No.",JobNo);
      JobWIPGLEntry.MODIFYALL("Job Complete",FALSE);
    END;

    BEGIN
    END.
  }
}
