OBJECT Codeunit 99000815 Reservation-Check Date Confl.
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The change leads to a date conflict with existing reservations.\;ESP=El cambio lleva a un conflicto de fechas con las reservas actuales.\';
      Text001@1001 : TextConst 'ENU=Reserved quantity (Base): %1, Date %2\;ESP=Cantidad reservada (base): %1, Fecha %2\';
      Text002@1002 : TextConst 'ENU=Cancel or change reservations and try again.;ESP=Cancele o cambie reservas y pruebe de nuevo.';
      ReservEntry@1003 : Record 337;
      ReservEngineMgt@1004 : Codeunit 99000831;
      ReserveSalesLine@1005 : Codeunit 99000832;
      ReservePurchLine@1006 : Codeunit 99000834;
      ReserveReqLine@1007 : Codeunit 99000833;
      ReserveItemJnlLine@1008 : Codeunit 99000835;
      ReserveProdOrderLine@1009 : Codeunit 99000837;
      ReserveProdOrderComp@1010 : Codeunit 99000838;
      ReservePlanningComponent@1011 : Codeunit 99000840;
      ReserveTransLine@1012 : Codeunit 99000836;
      ReserveServiceInvLine@1013 : Codeunit 99000842;
      ReservMgt@1014 : Codeunit 99000845;

    PROCEDURE SalesLineCheck@2(SalesLine@1000 : Record 37;ForceRequest@1001 : Boolean);
    BEGIN
      IF NOT ReserveSalesLine.FindReservEntry(SalesLine,ReservEntry) THEN
        EXIT;
      IF DateConflict(SalesLine."Shipment Date",ForceRequest) THEN
        IF ForceRequest THEN IssueError(SalesLine."Shipment Date");
      UpdateDate(ReservEntry,SalesLine."Shipment Date");
      ReservMgt.SetSalesLine(SalesLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(SalesLine."Outstanding Qty. (Base)");
    END;

    PROCEDURE PurchLineCheck@7(PurchLine@1000 : Record 39;ForceRequest@1001 : Boolean) : Boolean;
    BEGIN
      IF NOT ReservePurchLine.FindReservEntry(PurchLine,ReservEntry) THEN
        EXIT;
      IF DateConflict(PurchLine."Expected Receipt Date",ForceRequest) THEN
        IF ForceRequest THEN IssueError(PurchLine."Expected Receipt Date");
      UpdateDate(ReservEntry,PurchLine."Expected Receipt Date");
      ReservMgt.SetPurchLine(PurchLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(PurchLine."Outstanding Qty. (Base)");
    END;

    PROCEDURE ItemJnlLineCheck@4(ItemJnlLine@1000 : Record 83;ForceRequest@1001 : Boolean) : Boolean;
    BEGIN
      IF NOT ReserveItemJnlLine.FindReservEntry(ItemJnlLine,ReservEntry) THEN
        EXIT;
      IF DateConflict(ItemJnlLine."Posting Date",ForceRequest) THEN
        IF ForceRequest THEN IssueError(ItemJnlLine."Posting Date");
      UpdateDate(ReservEntry,ItemJnlLine."Posting Date");
      ReservMgt.SetItemJnlLine(ItemJnlLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(ItemJnlLine."Quantity (Base)");
    END;

    PROCEDURE ReqLineCheck@8(ReqLine@1000 : Record 246;ForceRequest@1001 : Boolean) : Boolean;
    BEGIN
      IF NOT ReserveReqLine.FindReservEntry(ReqLine,ReservEntry) THEN
        EXIT;
      IF DateConflict(ReqLine."Due Date",ForceRequest) THEN
        IF ForceRequest THEN IssueError(ReqLine."Due Date");
      UpdateDate(ReservEntry,ReqLine."Due Date");
      ReservMgt.SetReqLine(ReqLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(ReqLine."Quantity (Base)");
    END;

    PROCEDURE ProdOrderLineCheck@9(ProdOrderLine@1000 : Record 5406;ForceRequest@1001 : Boolean) : Boolean;
    BEGIN
      IF NOT ReserveProdOrderLine.FindReservEntry(ProdOrderLine,ReservEntry) THEN
        EXIT;
      IF DateConflict(ProdOrderLine."Due Date",ForceRequest) THEN
        IF ForceRequest THEN IssueError(ProdOrderLine."Due Date");
      UpdateDate(ReservEntry,ProdOrderLine."Due Date");
      ReservMgt.SetProdOrderLine(ProdOrderLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(ProdOrderLine."Remaining Qty. (Base)");
    END;

    PROCEDURE ProdOrderComponentCheck@10(ProdOrderComp@1000 : Record 5407;ForceRequest@1001 : Boolean) : Boolean;
    BEGIN
      IF NOT ReserveProdOrderComp.FindReservEntry(ProdOrderComp,ReservEntry) THEN
        EXIT;
      IF DateConflict(ProdOrderComp."Due Date",ForceRequest) THEN
        IF ForceRequest THEN IssueError(ProdOrderComp."Due Date");
      UpdateDate(ReservEntry,ProdOrderComp."Due Date");
      ReservMgt.SetProdOrderComponent(ProdOrderComp);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(ProdOrderComp."Remaining Qty. (Base)");
    END;

    PROCEDURE PlanningComponentCheck@12(PlanningComponent@1000 : Record 99000829;ForceRequest@1001 : Boolean) : Boolean;
    BEGIN
      IF NOT ReservePlanningComponent.FindReservEntry(PlanningComponent,ReservEntry) THEN
        EXIT;
      IF DateConflict(PlanningComponent."Due Date",ForceRequest) THEN
        IF ForceRequest THEN IssueError(PlanningComponent."Due Date");
      UpdateDate(ReservEntry,PlanningComponent."Due Date");
      ReservMgt.SetPlanningComponent(PlanningComponent);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(PlanningComponent."Net Quantity (Base)");
    END;

    PROCEDURE TransferLineCheck@11(TransLine@1000 : Record 5741;ForceRequest@1001 : Boolean;Direction@1002 : 'Outbound,Inbound') : Boolean;
    BEGIN
      IF NOT ReserveTransLine.FindReservEntry(TransLine,ReservEntry,Direction) THEN
        EXIT;
      CASE Direction OF
        Direction::Outbound:
          BEGIN
            IF DateConflict(TransLine."Shipment Date",ForceRequest) THEN
              IF ForceRequest THEN IssueError(TransLine."Shipment Date");
            UpdateDate(ReservEntry,TransLine."Shipment Date");
          END;
        Direction::Inbound:
          BEGIN
            IF DateConflict(TransLine."Receipt Date",ForceRequest) THEN
              IF ForceRequest THEN IssueError(TransLine."Receipt Date");
            UpdateDate(ReservEntry,TransLine."Receipt Date");
          END;
      END;
      ReservMgt.SetTransferLine(TransLine,Direction);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(TransLine."Outstanding Qty. (Base)");
    END;

    PROCEDURE ServiceInvLineCheck@5(ServiceInvLine@1000 : Record 5902;ForceRequest@1001 : Boolean);
    BEGIN
      IF NOT ReserveServiceInvLine.FindReservEntry(ServiceInvLine,ReservEntry) THEN
        EXIT;
      IF DateConflict(ServiceInvLine."Posting Date",ForceRequest) THEN
        IF ForceRequest THEN IssueError(ServiceInvLine."Posting Date");
      UpdateDate(ReservEntry,ServiceInvLine."Posting Date");
      ReservMgt.SetServLine(ServiceInvLine);
      ReservMgt.ClearSurplus;
      ReservMgt.AutoTrack(ServiceInvLine."Outstanding Qty. (Base)");
    END;

    PROCEDURE UpdateDate@1(VAR FilterReservEntry@1000 : Record 337;Date@1001 : Date);
    BEGIN
      FilterReservEntry.SETRANGE("Reservation Status");
      IF NOT FilterReservEntry.FIND('-') THEN
        EXIT;

      REPEAT
        IF FilterReservEntry."Quantity (Base)" < 0 THEN
          IF ((FilterReservEntry."Expected Receipt Date" <> 0D) AND
              (Date < FilterReservEntry."Expected Receipt Date")) AND
             (FilterReservEntry.Binding <> FilterReservEntry.Binding::"Order-to-Order")
          THEN BEGIN
            IF (FilterReservEntry."Lot No." <> '') OR (FilterReservEntry."Serial No." <> '') THEN
              ReservEngineMgt.SplitTrackingConnection(FilterReservEntry,Date)
            ELSE
              ReservEngineMgt.CloseReservEntry(FilterReservEntry,FALSE,FALSE);
          END ELSE
            ReservEngineMgt.ModifyShipmentDate(FilterReservEntry,Date)
        ELSE
          IF ((FilterReservEntry."Shipment Date" <> 0D) AND
              (FilterReservEntry."Shipment Date" < Date)) AND
             (FilterReservEntry.Binding <> FilterReservEntry.Binding::"Order-to-Order")
          THEN BEGIN
            IF (FilterReservEntry."Lot No." <> '') OR (FilterReservEntry."Serial No." <> '') THEN
              ReservEngineMgt.SplitTrackingConnection(FilterReservEntry,Date)
            ELSE
              ReservEngineMgt.CloseReservEntry(FilterReservEntry,FALSE,FALSE);
          END ELSE
            ReservEngineMgt.ModifyExpectedReceiptDate(FilterReservEntry,Date);
      UNTIL FilterReservEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE DateConflict@3(Date@1001 : Date;VAR ForceRequest@1002 : Boolean) IsConflict@1000 : Boolean;
    VAR
      ReservEntry2@1003 : Record 337;
    BEGIN
      ReservEntry2.COPY(ReservEntry);

      IF NOT ReservEntry2.FIND('-') THEN
        EXIT(FALSE);

      IF ReservEntry2."Quantity (Base)" < 0 THEN
        ReservEntry2.SETFILTER("Expected Receipt Date",'>%1',Date)
      ELSE
        ReservEntry2.SETRANGE("Shipment Date",01010000D,Date - 1);

      IF NOT ReservEntry2.FIND('-') THEN
        EXIT(FALSE);

      ReservEntry2.SETFILTER(Binding,'<>%1',ReservEntry2.Binding::"Order-to-Order");

      IF NOT ReservEntry2.FIND('-') THEN
        EXIT(FALSE);

      IsConflict := TRUE;

      // Don't look at tracking and surplus:
      ReservEntry2.SETRANGE("Reservation Status",ReservEntry2."Reservation Status"::Reservation);

      ForceRequest := ReservEntry2.FIND('-') AND ForceRequest;

      EXIT(IsConflict);
    END;

    LOCAL PROCEDURE IssueError@6(NewDate@1000 : Date);
    VAR
      ReservQty@1001 : Decimal;
    BEGIN
      ReservQty := CalcReservQty(NewDate);
      ERROR(Text000 + Text001 + Text002,ReservQty,NewDate);
    END;

    LOCAL PROCEDURE CalcReservQty@1010(NewDate@1102601000 : Date) : Decimal;
    VAR
      ReservEntry2@1102601002 : Record 337;
      CreateReservEntry@1001 : Codeunit 99000830;
      ReservDueDate@1102601004 : Date;
      ReservExpectDate@1102601005 : Date;
      SumValue@1102601001 : Decimal;
    BEGIN
      ReservEntry2.COPY(ReservEntry);
      ReservDueDate := NewDate;
      ReservExpectDate := NewDate;

      IF NOT ReservEntry2.FIND('-') THEN
        EXIT(0);
      IF ReservEntry2."Quantity (Base)" < 0 THEN
        ReservExpectDate := 0D
      ELSE
        ReservDueDate := 31129999D;

      REPEAT
        SumValue += ReservEntry2."Quantity (Base)";
        IF ReservEntry2."Quantity (Base)" < 0 THEN BEGIN
          IF ReservEntry2."Expected Receipt Date" <> 0D THEN  //Item ledger entries will be 0D.
            IF (ReservEntry2."Expected Receipt Date" > ReservExpectDate) AND (ReservEntry2."Expected Receipt Date" > ReservDueDate) THEN
              ReservExpectDate := ReservEntry2."Expected Receipt Date";
        END ELSE BEGIN
          IF ReservEntry2."Shipment Date" <> 0D THEN          //Item ledger entries will be 0D.
            IF (ReservEntry2."Shipment Date" < ReservDueDate) AND (ReservEntry2."Shipment Date" < ReservExpectDate) THEN
              ReservDueDate := ReservEntry2."Shipment Date";
        END;
      UNTIL ReservEntry2.NEXT = 0;

      EXIT(CreateReservEntry.SignFactor(ReservEntry2) * SumValue);
    END;

    BEGIN
    END.
  }
}
