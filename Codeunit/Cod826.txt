OBJECT Codeunit 826 DO Payment Integration Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=11/12/10;
    Time=12:00:00;
    Version List=NAVW16.00.10;
  }
  PROPERTIES
  {
    Permissions=TableData 824=rimd,
                TableData 828=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU="Error Code = %1; Message = %2.";ESP="C¢digo de error = %1; Mensaje = %2."';
      Text002@1002 : TextConst 'ENU=Failed to read parent transaction id.;ESP=Error al leer Id. de transacci¢n principal.';
      Text003@1003 : TextConst 'ENU=Microsoft Dynamics ERP Payment Services connection setup must be completed before usage.;ESP=Es necesario completar la configuraci¢n de conexi¢n de los servicios de pago de Microsoft Dynamics ERP antes de su uso.';
      Text004@1004 : TextConst 'ENU=Microsoft Dynamics ERP Payment Services has not been enabled.;ESP=Los servicios de pago de Microsoft Dynamics ERP no se han habilitado.';
      Text005@1005 : TextConst 'ENU=Credit card authorization in progress...;ESP=Autorizaci¢n de tarjeta de cr‚dito en curso...';
      Text006@1006 : TextConst 'ENU=Failed to refresh the transaction status.\;ESP=Error al actualizar el estado de la transacci¢n.\';
      Text007@1007 : TextConst 'ENU=Microsoft Dynamics ERP Payment Services Signup was canceled.;ESP=Se cancel¢ el registro de los servicios de pago de Microsoft Dynamics ERP.';
      Text008@1008 : TextConst 'ENU=Sign-up process must be completed before selecting service.;ESP=Es necesario completar el proceso de registro antes de seleccionar el servicio.';
      Text009@1009 : TextConst 'ENU=Sign-up process succeeded, select a valid service id.;ESP=El proceso de registro finaliz¢ correctamente, seleccione un Id. de servicio v lido.';
      Text010@1010 : TextConst 'ENU=Sign-up process must be completed in Microsoft Dynamics NAV Classic.;ESP=Es necesario completar el proceso de registro en Microsoft Dynamics NAV Classic.';
      transactionLogEntryMgt@1101 : Codeunit 829;

    PROCEDURE AuthorizePayment@1(VAR ParentTransactionLogEntry@1001 : Record 829;CreditCardNo@1002 : Code[20];VAR PaymentInfo@1003 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{D3CEEAA0-3496-4C12-AE06-BA2A778987B7}:Unknown Automation Server.Unknown Class";SourceType@1004 : ' ,Order,Invoice,Payment,Refund';SourceNo@1005 : Code[20]) : Integer;
    BEGIN
      EXIT(
        CreatePayment(
          ParentTransactionLogEntry,
          CreditCardNo,
          PaymentInfo,
          SourceType,
          SourceNo,
          ParentTransactionLogEntry."Transaction Type"::Authorization));
    END;

    PROCEDURE VoidPayment@2(VAR TransactionLogEntry@1000 : Record 829;CreditCardNo@1001 : Code[20];VAR PaymentInfo@1002 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{D3CEEAA0-3496-4C12-AE06-BA2A778987B7}:Unknown Automation Server.Unknown Class";SourceType@1003 : ' ,Order,Invoice,Payment,Refund';SourceNo@1004 : Code[20]) : Integer;
    BEGIN
      EXIT(
        CreatePayment(
          TransactionLogEntry,
          CreditCardNo,
          PaymentInfo,
          SourceType,
          SourceNo,
          TransactionLogEntry."Transaction Type"::Void));
    END;

    PROCEDURE CapturePayment@3(VAR TransactionLogEntry@1000 : Record 829;CreditCardNo@1001 : Code[20];VAR PaymentInfo@1002 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{D3CEEAA0-3496-4C12-AE06-BA2A778987B7}:Unknown Automation Server.Unknown Class";SourceType@1003 : ' ,Order,Invoice,Payment,Refund';SourceNo@1004 : Code[20]) : Integer;
    BEGIN
      EXIT(
        CreatePayment(
          TransactionLogEntry,
          CreditCardNo,
          PaymentInfo,
          SourceType,
          SourceNo,
          TransactionLogEntry."Transaction Type"::Capture));
    END;

    PROCEDURE RefundPayment@4(VAR ParentTransactionLogEntry@1000 : Record 829;CreditCardNo@1001 : Code[20];VAR PaymentInfo@1002 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{D3CEEAA0-3496-4C12-AE06-BA2A778987B7}:Unknown Automation Server.Unknown Class";SourceType@1003 : ' ,Order,Invoice,Payment,Refund';SourceNo@1004 : Code[20]) : Integer;
    BEGIN
      EXIT(
        CreatePayment(
          ParentTransactionLogEntry,
          CreditCardNo,
          PaymentInfo,
          SourceType,
          SourceNo,
          ParentTransactionLogEntry."Transaction Type"::Refund));
    END;

    LOCAL PROCEDURE CreateProxyContext@5(VAR ProxyContext@1000 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{305175E9-57E1-4992-B4EE-6A02BDB298B4}:Unknown Automation Server.Unknown Class");
    VAR
      PaymentConnectionSetup@1001 : Record 825;
    BEGIN
      IF NOT PaymentConnectionSetup.GET THEN
        ERROR(Text003);
      IF NOT PaymentConnectionSetup.Active THEN
        ERROR(Text004);
      IF NOT CreateNewProxyContext(PaymentConnectionSetup,ProxyContext) THEN
        ERROR(Text003);
    END;

    PROCEDURE RefreshTransactionStatus@9(VAR TransactionLogEntry@1000 : Record 829);
    VAR
      TransactionResult@1100 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{616391CD-EE5C-4AF9-AD7F-4DE272210B77}:Unknown Automation Server.Unknown Class";
      ProxyContext@1101 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{305175E9-57E1-4992-B4EE-6A02BDB298B4}:Unknown Automation Server.Unknown Class";
      PaymentHandler@1102 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{7CD3A6AE-47AC-4FEC-9A32-128208377F67}:Unknown Automation Server.Unknown Class";
    BEGIN
      CreateProxyContext(ProxyContext);

      CREATE(PaymentHandler,TRUE,FALSE);

      TransactionResult := PaymentHandler.RetrieveTransactionResult(FORMAT(TransactionLogEntry."Transaction GUID"),ProxyContext);

      IF NOT TransactionResult.IsSuccess THEN
        ERROR(Text006 + FORMAT(Text001,TransactionResult.LastErrorCode,COPYSTR(TransactionResult.LastErrorMessage,1,250)));

      IF TransactionResult.IsRefunded THEN
        TransactionLogEntry."Transaction Status" := TransactionLogEntry."Transaction Status"::Refunded;

      IF TransactionResult.IsCaptured THEN
        TransactionLogEntry."Transaction Status" := TransactionLogEntry."Transaction Status"::Captured;

      IF TransactionResult.IsVoided THEN
        TransactionLogEntry."Transaction Status" := TransactionLogEntry."Transaction Status"::Voided;

      TransactionLogEntry.MODIFY;
    END;

    LOCAL PROCEDURE CreateCreditCardObject@10(CreditCardNo@1000 : Code[20];VAR CreditCardInfo@1001 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{61905B1C-DC82-479B-A49B-49278320B078}:Unknown Automation Server.Unknown Class");
    VAR
      CreditCard@1100 : Record 827;
      CreditCardNumber@1101 : Record 828;
      Contact@1102 : Record 5050;
      NewCreditCardInfo@1103 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{91ABB82B-2D75-4F28-901C-667903BE21E1}:Unknown Automation Server.Unknown Class";
      Int@1004 : Integer;
    BEGIN
      CreditCard.GET(CreditCardNo);
      CreditCardNumber.GET(CreditCardNo);
      Contact.GET(CreditCard."Contact No.");

      CREATE(NewCreditCardInfo,TRUE,FALSE);
      CreditCardInfo := NewCreditCardInfo;
      CreditCardInfo.AccountholderName := CreditCard."Card Holder Name";
      CreditCardInfo.AccountNumber := CreditCardNumber.GetData;
      CreditCardInfo.CardVerificationValue := FORMAT(CreditCard."Cvc No.");

      EVALUATE(Int,COPYSTR(CreditCard."Expiry Date",1,2));
      CreditCardInfo.ExpirationMonth := Int;
      EVALUATE(Int,COPYSTR(CreditCard."Expiry Date",3,2));
      CreditCardInfo.ExpirationYear := Int;

      CreditCardInfo.StreetAddress := Contact.Address;
      CreditCardInfo.PostalCode := Contact."Post Code";
      CreditCardInfo.City := Contact.City;
      CreditCardInfo.CountryOrRegion := Contact."Country/Region Code";
    END;

    PROCEDURE CreateBasicPaymentInfo@20(VAR PaymentInfo@1000 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{D3CEEAA0-3496-4C12-AE06-BA2A778987B7}:Unknown Automation Server.Unknown Class";CustomerId@1001 : Code[20];Description@1002 : Text[1024];InvoiceNo@1003 : Code[20];CurrencyCode@1004 : Code[10];Amount@1005 : Decimal);
    VAR
      NewBasicPaymentInfo@1100 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{B34AC075-2450-46FA-87BC-D5F3C9AF4142}:Unknown Automation Server.Unknown Class";
    BEGIN
      CREATE(NewBasicPaymentInfo,TRUE,FALSE);
      NewBasicPaymentInfo.CustomerId := CustomerId;
      NewBasicPaymentInfo.Description := Description;
      NewBasicPaymentInfo.InvoiceNumber := InvoiceNo;
      NewBasicPaymentInfo.CurrencyCode := CurrencyCode;
      NewBasicPaymentInfo.Amount := Amount;
      PaymentInfo := NewBasicPaymentInfo;
    END;

    LOCAL PROCEDURE CreatePayment@11(VAR ParentTransactionLogEntry@1000 : Record 829;CreditCardNo@1001 : Code[20];PaymentInfo@1002 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{D3CEEAA0-3496-4C12-AE06-BA2A778987B7}:Unknown Automation Server.Unknown Class";SourceType@1003 : ' ,Order,Invoice,Payment,Refund';SourceNo@1004 : Code[20];TransactionType@1005 : 'Authorization,Void,Capture,Refund') : Integer;
    VAR
      TransactionLogEntry@1100 : Record 829;
      TransactionResult@1101 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{616391CD-EE5C-4AF9-AD7F-4DE272210B77}:Unknown Automation Server.Unknown Class";
      CreditCardInfo@1102 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{61905B1C-DC82-479B-A49B-49278320B078}:Unknown Automation Server.Unknown Class";
      ProxyContext@1103 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{305175E9-57E1-4992-B4EE-6A02BDB298B4}:Unknown Automation Server.Unknown Class";
      PaymentHandler@1104 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{7CD3A6AE-47AC-4FEC-9A32-128208377F67}:Unknown Automation Server.Unknown Class";
      Window@1105 : Dialog;
      TransactionLogEntryNo@1106 : Integer;
      ParentTransGuid@1107 : GUID;
    BEGIN
      IF NOT ParentTransactionLogEntry.ISEMPTY THEN
        ParentTransGuid := ParentTransactionLogEntry."Transaction GUID";

      TransactionLogEntryNo :=
        transactionLogEntryMgt.InitializeTransactionLogEntry(
          TransactionLogEntry,
          CreditCardNo,
          SourceType,
          SourceNo,
          PaymentInfo.CustomerId,
          TransactionType,
          ParentTransactionLogEntry);

      CreateProxyContext(ProxyContext);

      CreateCreditCardObject(CreditCardNo,CreditCardInfo);
      PaymentInfo.ReferenceId := TransactionLogEntry."Reference GUID";

      CREATE(PaymentHandler,TRUE,FALSE);

      CASE TransactionType OF
        TransactionType::Authorization:
          BEGIN
            Window.OPEN(Text005);
            TransactionResult := PaymentHandler.Authorize(PaymentInfo,CreditCardInfo,ProxyContext);
            Window.CLOSE;
          END;
        TransactionType::Capture:
          BEGIN
            TransactionResult := PaymentHandler.Capture(PaymentInfo,FORMAT(ParentTransGuid),ProxyContext);
          END;
        TransactionType::Void:
          BEGIN
            IF ISNULLGUID(ParentTransGuid) THEN
              ERROR(Text002);
            TransactionResult := PaymentHandler.VoidAuthorization(PaymentInfo,FORMAT(ParentTransGuid),ProxyContext);
          END;
        TransactionType::Refund:
          BEGIN
            TransactionResult := PaymentHandler.Refund(PaymentInfo,ParentTransGuid,CreditCardInfo,ProxyContext);
          END;
      END;

      transactionLogEntryMgt.CompleteTransLogEntry(TransactionLogEntry,TransactionResult);

      // Fix to keep amount when voiding and amount
      IF TransactionLogEntry.Amount = 0 THEN BEGIN
        TransactionLogEntry.Amount := PaymentInfo.Amount;
        TransactionLogEntry.MODIFY;
      END;

      EXIT(TransactionLogEntryNo);
    END;

    PROCEDURE ServiceBoarding@30();
    VAR
      ConnectionSetup@1100 : Record 825;
      ConnectionDetails@1101 : Record 824;
      Language@1102 : Record 2000000045;
      UserManagement@1103 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{A9FE9323-2DE6-4687-BF44-EB805F1A93BD}:Unknown Automation Server.Unknown Class";
      BoardingResult@1104 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{DC3681C1-B90C-42FD-BD9A-D799FC06C5F4}:Unknown Automation Server.Unknown Class";
      ProxyContext@1105 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{305175E9-57E1-4992-B4EE-6A02BDB298B4}:Unknown Automation Server.Unknown Class";
      UserNameInS@1106 : InStream;
      Variant@1107 : Variant;
    BEGIN
      IF ISSERVICETIER OR NOT GUIALLOWED THEN
        ERROR(Text010);

      Language.GET(WINDOWSLANGUAGE);
      ConnectionSetup.GET;
      CreateNewProxyContext(ConnectionSetup,ProxyContext);

      CREATE(UserManagement,TRUE,TRUE); // NOTE: Client Side Creation

      BoardingResult := UserManagement.ServiceOnBoarding(COMPANYNAME,'PaymentService',Language."Abbreviated Name",SERIALNUMBER,
      ProxyContext);

      IF BoardingResult.IsSuccess THEN BEGIN
        IF NOT ConnectionSetup.GET THEN
          ConnectionSetup.CreateDefaultSetup;
        IF NOT ConnectionDetails.GET THEN BEGIN
          ConnectionDetails.INIT;
          ConnectionDetails."Primary Key" := ConnectionSetup."Primary Key";
          ConnectionDetails.INSERT;
        END;


        ConnectionSetup.OrganizationId := BoardingResult.OrganizationId;
        ConnectionSetup.ServiceGroupId := BoardingResult.ServiceGroupId;
        ConnectionSetup.MODIFY;

        ConnectionDetails.UserName.CREATEINSTREAM(UserNameInS);
        Variant := UserNameInS;
        BoardingResult.WriteUserName(Variant);

        ConnectionDetails.SetPasswordData(BoardingResult.Password);

        ConnectionDetails.MODIFY;
      END ELSE BEGIN
        IF BoardingResult.LastErrorCode = 1000000 THEN
          ERROR(Text007);
        ERROR(Text001,BoardingResult.LastErrorCode,COPYSTR(BoardingResult.LastErrorMessage,1,250));
      END;

      CLEAR(BoardingResult);
      CLEAR(UserManagement);

      MESSAGE(Text009);
    END;

    PROCEDURE Unassociate@32();
    VAR
      DOPaymentConnectionSetup@1001 : Record 825;
      UserManagement@1101 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{A9FE9323-2DE6-4687-BF44-EB805F1A93BD}:Unknown Automation Server.Unknown Class";
      ProxyContext@1102 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{305175E9-57E1-4992-B4EE-6A02BDB298B4}:Unknown Automation Server.Unknown Class";
      UnassociateResult@1103 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{F45B7836-3FCD-4B4E-9AC9-0CBAB0B2BCE7}:Unknown Automation Server.Unknown Class";
    BEGIN
      IF NOT DOPaymentConnectionSetup.GET THEN
        ERROR(Text003);
      IF NOT CreateNewProxyContext(DOPaymentConnectionSetup,ProxyContext) THEN
        ERROR(Text003);

      CREATE(UserManagement,TRUE,FALSE);
      UnassociateResult := UserManagement.Unassociate(COMPANYNAME,ProxyContext);
      IF UnassociateResult.IsSuccess THEN BEGIN
        DOPaymentConnectionSetup.DELETEALL(TRUE);
        DOPaymentConnectionSetup.CreateDefaultSetup
      END ELSE
        ERROR(Text001,UnassociateResult.LastErrorCode,UnassociateResult.LastErrorMessage);
    END;

    PROCEDURE SelectServiceId@31(VAR ServiceId@1000 : GUID);
    VAR
      NameValueBuffer@1100 : Record 823;
      ConnectionSetup@1101 : Record 825;
      NameValueForm@1102 : Form 823;
      ProxyContext@1103 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{305175E9-57E1-4992-B4EE-6A02BDB298B4}:Unknown Automation Server.Unknown Class";
      UserManagement@1104 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{A9FE9323-2DE6-4687-BF44-EB805F1A93BD}:Unknown Automation Server.Unknown Class";
      Enumerator@1105 : Automation "{BED7F4EA-1A96-11D2-8F08-00A0C9A6186D} 2.0:{496B0ABF-CDEE-11D3-88E8-00902754C43A}:'mscorlib.dll'.IEnumerator";
      ServiceDetails@1106 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{28E28EFC-6A3B-4D05-84D8-137EBA37BD68}:Unknown Automation Server.Unknown Class";
      SubscriptionDetailsResult@1107 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{4B8726E2-BDD6-4062-8C6D-422911CAE422}:Unknown Automation Server.Unknown Class";
    BEGIN
      IF NOT ConnectionSetup.GET THEN
        ERROR(Text003);
      IF NOT CreateNewProxyContext(ConnectionSetup,ProxyContext) THEN
        ERROR(Text003);
      IF NOT (ProxyContext.Password <> '') THEN
        ERROR(Text008);
      CREATE(UserManagement,TRUE,FALSE);
      SubscriptionDetailsResult := UserManagement.GetServiceIds(ProxyContext,'PaymentService');

      IF NOT SubscriptionDetailsResult.IsSuccess THEN
        ERROR(Text001,SubscriptionDetailsResult.LastErrorCode,SubscriptionDetailsResult.LastErrorMessage);

      Enumerator := SubscriptionDetailsResult.SubscriptionDetails;
      IF NOT ISCLEAR(Enumerator) THEN BEGIN
        Enumerator.Reset;
        WHILE Enumerator.MoveNext() DO BEGIN
          ServiceDetails := Enumerator.Current;
          IF NOT ISCLEAR(ServiceDetails) THEN BEGIN
            IF ServiceDetails.ServiceGroupId = ConnectionSetup.ServiceGroupId THEN BEGIN
              NameValueForm.AddItem(COPYSTR(ServiceDetails.Name,1,MAXSTRLEN(NameValueBuffer.Name)),'{' + COPYSTR(ServiceDetails.
      SubscriptionId,1,MAXSTRLEN(NameValueBuffer.Value) - 2) + '}');
              IF ServiceDetails.SubscriptionId = FORMAT(ServiceId) THEN BEGIN
                NameValueBuffer.Name := COPYSTR(ServiceDetails.Name,1,MAXSTRLEN(NameValueBuffer.Name));
                NameValueBuffer.Value := '{' + COPYSTR(ServiceDetails.SubscriptionId,1,MAXSTRLEN(NameValueBuffer.Value) - 2) + '}';
              END;
            END;
          END;
        END;

        NameValueForm.SETRECORD(NameValueBuffer);
        NameValueForm.LOOKUPMODE := TRUE;
        IF NameValueForm.RUNMODAL = ACTION::LookupOK THEN BEGIN
          NameValueForm.GETRECORD(NameValueBuffer);
          IF NameValueBuffer.Value <> '' THEN BEGIN
            EVALUATE(ServiceId,NameValueBuffer.Value);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CreateNewProxyContext@50(VAR PaymentConnectionSetup@1000 : Record 825;VAR ProxyContext@1001 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{305175E9-57E1-4992-B4EE-6A02BDB298B4}:Unknown Automation Server.Unknown Class") IncludesDetails : Boolean;
    VAR
      PaymentConnectionDetails@1100 : Record 824;
      NewProxyContext@1101 : Automation "{DAB99883-91F5-4CEA-B6A1-58EFE34D77A0} 1.0:{DD0CF37B-196E-4188-94EB-0C1BD93FCDA6}:Unknown Automation Server.Unknown Class";
      UserNameInS@1102 : InStream;
      Variant@1103 : Variant;
    BEGIN
      CREATE(NewProxyContext,TRUE,FALSE);
      NewProxyContext.ApplicationName := 'Microsoft Dynamics NAV';
      NewProxyContext.EnvironmentName := PaymentConnectionSetup.Environment;
      NewProxyContext.RunInTestMode := PaymentConnectionSetup."Run in Test Mode";
      NewProxyContext.ServiceIdentifier := PaymentConnectionSetup."Service ID";
      NewProxyContext.OrganizationId := PaymentConnectionSetup.OrganizationId;
      NewProxyContext.ServiceGroupId := PaymentConnectionSetup.ServiceGroupId;

      IncludesDetails := FALSE;
      IF PaymentConnectionDetails.GET THEN BEGIN
        PaymentConnectionDetails.CALCFIELDS(UserName);
        PaymentConnectionDetails.CALCFIELDS(Password);
        IF PaymentConnectionDetails.UserName.HASVALUE THEN BEGIN
          PaymentConnectionDetails.UserName.CREATEINSTREAM(UserNameInS);
          Variant := UserNameInS;
          NewProxyContext.ReadUserName(Variant);
          IncludesDetails := TRUE;
        END;
        NewProxyContext.Password := PaymentConnectionDetails.GetPasswordData;
      END;

      ProxyContext := NewProxyContext;
    END;

    BEGIN
    END.
  }
}
