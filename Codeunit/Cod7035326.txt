OBJECT Codeunit 7035326 Facturacion Automatica
{
  OBJECT-PROPERTIES
  {
    Date=14/11/14;
    Time=13:24:29;
    Version List=TRANSFER;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            Inicio;
          END;

  }
  CODE
  {
    VAR
      Text50000@1103355003 : TextConst 'ESP=C:\Condiciones Facturacion.txt';
      Text50001@1103355004 : TextConst 'ESP="No de linea       =  "';
      Text50002@1103355005 : TextConst 'ESP="Cliente           =  "';
      Text50003@1103355006 : TextConst 'ESP="Touroperador      =  "';
      Text50004@1103355007 : TextConst 'ESP="Tipo Servicio Fijo=  "';
      Text50005@1103355008 : TextConst 'ESP="Rango Plazas      =  "';
      Text50006@1103355009 : TextConst 'ESP="Zona Facturacion""     =  "';
      Text50007@1103355010 : TextConst 'ESP=NOTEPAD.EXE';
      Text50008@1103355011 : TextConst 'ESP=-1D';
      rSelec@1100244000 : Record 7010324;
      Text0001@1100244001 : TextConst 'ESP=No se ha configurado ningun registro Cliente/Touroperador para facturaci¢n automatica';
      Text0002@1100244002 : TextConst 'ESP=No se ha seleccionado ning£n cliente';
      Text0003@1100244003 : TextConst 'ESP=Se ha restringido el uso de esta acci¢n. Dirijase a su administrador.';
      rPI@1100244004 : Record 7035392;
      rPar@1100244007 : Record 7010311;
      Text0004@1100244006 : TextConst 'ESP=¨Desea realmente iniciar el proceso de \Facturaci¢n Automatica REAL?';
      cFactCli@1100253003 : Codeunit 7010406;
      wFacts@1100244008 : ARRAY [2] OF Code[20];
      Text0005@1100244009 : TextConst 'ESP=Seleccione los cliente a facturar';
      wVentana@1100244010 : Dialog;
      Text0006@1100244011 : TextConst 'ESP=Procesando @1@@@@@@@@@\Cliente    #2########\TTOO       #3########\PERIODO    #4######  #5######\#6###################';
      Text0007@1100244012 : TextConst 'ESP=Preparando';
      Text0008@1100244013 : TextConst 'ESP=Creando Prefactura';
      Text0009@1100244014 : TextConst 'ESP=Facturando Pref %1';
      Text0010@1100244015 : TextConst 'ESP=No se ha encontrado ning£n cliente para facturar';
      Text0011@1100244016 : TextConst 'ESP=La fecha de facturaci¢n no puede dejarse en blanco';
      wUltDiaCerr@1100244017 : Date;
      Text0012@1100244018 : TextConst 'ESP=¨Desea realmente iniciar el proceso de Prefacturacion de PRUEBA Automatica?';
      Text0013@1100244019 : TextConst 'ESP=No puede tener valor nulo';
      Text0014@1103350000 : TextConst 'ESP=#1##############\#2##############\@3@@@@@@@@@@@@@@';
      Text0015@1103350001 : TextConst 'ESP=Creando Temporal';
      Text0016@1103350002 : TextConst 'ESP=Seleccionando';
      Text0017@1103350003 : TextConst 'ESP=Servicios';
      Text0018@1103350004 : TextConst 'ESP=Ha se¤alado la opci¢n de Prefacturar Grabando las prefacturas.\¨Desea Continuar?';
      Text0019@1100253000 : TextConst 'ESP=¨Desea realmente iniciar el proceso de Facturaci¢n Rappel REAL?';
      Text0020@1100253001 : TextConst 'ESP=¨Desea realmente iniciar el proceso de Facturaci¢n Rappel PRUEBA?';
      Text0021@1100253002 : TextConst 'ESP=Procesando @1@@@@@@@@@\Cliente    #2########\TTOO       #3########';
      Err001@1103355000 : TextConst 'ESP=No se han encontrado condiciones de Rappel para el Cliente: %1 y TTOO: %2 en la Temporada %3 - %4.';
      Err002@1103355001 : TextConst 'ESP=No se puede insertar una fecha anterior a la ultimo fecha de facturaci¢n %1';
      Err003@1103355002 : TextConst 'ESP=No se han encontrado Prefacturas pendientes de rappel para el Cliente: %1 y TTOO: %2 en la Temporada %3 - %4.';

    PROCEDURE Inicio@1100244003();
    VAR
      lwTotal@1100244000 : Integer;
      lwCont@1100244001 : Integer;
      lwFechaFact@1100244002 : Date;
      lwPrueba@1100244003 : Boolean;
      lwGrabarPref@1103350000 : Boolean;
      lwText@1100244004 : Text[500];
    BEGIN
      // Inicio
      // Desde aqui empieza todo el proceso de facturacion automatica
      // wFacts es un array de dos dimensiones para almacenar la primera y ultima factura para la posterior impresion.

      rPar.FINDFIRST;

      // AJS 20.04.2007, TNU 07001
      // ya no apunta al ultimo dia cerrado, sino  ala fecha trabajo
      wUltDiaCerr := UltDiaCerrado;

      CLEAR(wFacts);
      IF NOT SeleccionaClientes(lwFechaFact, lwPrueba, lwGrabarPref) THEN
        EXIT;

      IF lwFechaFact=0D THEN
        ERROR(Text0011);

      // Avisamos si se ha marcado la Opci¢n de prefacturar grabando las prefacturas

      IF lwPrueba AND lwGrabarPref THEN
        IF NOT CONFIRM(Text0018) THEN
          EXIT;

      rSelec.SETRANGE(Usuario  , USERID);
      rSelec.SETRANGE(Selecci¢n, TRUE);
      IF rSelec.FINDSET THEN BEGIN
        IF lwPrueba THEN
          lwText:= Text0012
        ELSE
          lwText:= Text0004;
        IF NOT CONFIRM(lwText,FALSE) THEN
          EXIT;
        wVentana.OPEN(Text0006);
        lwTotal := rSelec.COUNT;
        lwCont  :=0;
        REPEAT
          wVentana.UPDATE(2, rSelec.Cliente);
          wVentana.UPDATE(3, rSelec.TTOO);
          FacturaSel(rSelec, lwFechaFact, lwPrueba, lwGrabarPref);
          lwCont += 1;
          IF lwCont MOD 1=0 THEN  // Solo refrescamos la barra de progresos cada 10 registros
            wVentana.UPDATE(1, ROUND(lwCont / lwTotal * 10000, 1));
        UNTIL rSelec.NEXT = 0;
        wVentana.CLOSE;
      END
      ELSE
        ERROR(Text0002);

      // Impresi¢n de facturas

      ImprimeFact(wFacts[1], wFacts[2],lwPrueba);
    END;

    PROCEDURE SeleccionaClientes@1100244005(VAR pwFechaFac@1100244010 : Date;VAR pwPrueba@1100244012 : Boolean;VAR pwGrabarPref@1103350003 : Boolean) : Boolean;
    VAR
      lrCondFct@1100244000 : Record 7010416;
      lrCliente@1100244004 : Record 18;
      lrTTOO@1100244005 : Record 7010312;
      lrClientTTOO@1100244009 : Record 7010313;
      lrPrefac@1100244011 : Record 7010415;
      lfFormSel@1100244007 : Form 7035285;
      lwFecha@1100244001 : Date;
      lwInserta@1100244002 : Boolean;
      lwCont@1100244003 : Integer;
      lwOK@1100244006 : Boolean;
      lwNPer@1100244008 : Integer;
      lwPrimeraFecha@1100244013 : Date;
      lrPITempSel@1103350000 : TEMPORARY Record 7035392;
      lrPI@1103355000 : Record 7035392;
      lwTotal@1103350001 : Integer;
      lwCont2@1103350002 : Integer;
    BEGIN
      // SeleccionaClientes
      // Se establecen los clientes que van a entrar en la facturaci¢n automatica
      // De paso establece la fecha de facturacion
      // pwPrueba Es de retorno indica si se ha marcado esta opci¢n en la ventana
      // pwGrabarPref tambien es de retorno, indica si se desea conservar la prefactura

      // Busca la fecha de facturacion por defecto

      pwFechaFac := BuscaFechaFactura;

      rSelec.RESET;
      rSelec.FILTERGROUP(2);
      rSelec.SETRANGE(Usuario,USERID);
      rSelec.FILTERGROUP(0);
      IF rSelec.FINDSET(TRUE) THEN
        rSelec.DELETEALL;

      wVentana.OPEN(Text0014);
      wVentana.UPDATE(1, Text0015);

      // JPT 19/01/07 Dejamos de utiliza temporal
      // CreaTempSeleccion(lrPITempSel);

      lrCondFct.RESET;
      lrCondFct.SETCURRENTKEY("Facturacion Automatica",
                              Cliente,
                              TTOO,
                              "Tipo Servicio Fijo",
                              "Usuario Responsable");
      lrCondFct.SETRANGE("Facturacion Automatica", TRUE);
      IF lrCondFct.FINDSET(TRUE) THEN BEGIN
        wVentana.UPDATE(1, Text0016);
        lwCont  := 0;
        lwTotal := lrCondFct.COUNT;
        CLEAR(lwCont2);
        REPEAT
          wVentana.UPDATE(2,STRSUBSTNO('%1/%2', lrCondFct.Cliente, lrCondFct.TTOO));
          IF lrCondFct.Periodicidad = 0 THEN
            lrCondFct.FIELDERROR(Periodicidad, Text0013);

          lrClientTTOO.GET(lrCondFct.Cliente, lrCondFct.TTOO);

          lwInserta := lrCondFct.Periodicidad <> 0;

          // JPT 13/10/05 No insertamos Touroperadores deshabilitados

          lwInserta := lwInserta AND (NOT lrClientTTOO."Operativa Deshabilitada");

          // Mira que no este relacionado con un maestro de grupo

          lwInserta := lwInserta AND ((lrClientTTOO."Grupo Facturacion" = '') OR
                                      (lrClientTTOO."Grupo Facturacion" = lrClientTTOO.TTOO));

          IF lwInserta THEN BEGIN
            // De esta manera eliminamos todos los que no tienen nada que facturar y sabemos a partir de cuando facturar

            lwPrimeraFecha :=  BuscaPrimeraFechaFacturacion(lrCondFct, wUltDiaCerr, lrClientTTOO."Fac. por Tipo Servicio Fijo");

            lwInserta := lwPrimeraFecha <> 0D;
          END;

          IF lwInserta THEN BEGIN
            lwInserta := lrCondFct.FechaFinPeriodo(lwPrimeraFecha, TRUE) <= wUltDiaCerr;
          END;

          IF lwInserta THEN BEGIN
            rSelec.SETRANGE(Cliente, lrCondFct.Cliente);
            rSelec.SETRANGE(TTOO   , lrCondFct.TTOO);

            IF lrClientTTOO."Fac. por Tipo Servicio Fijo" THEN
              rSelec.SETRANGE("Tipo Servicio Fijo" , lrCondFct."Tipo Servicio Fijo")
            ELSE

              rSelec.SETRANGE("Tipo Servicio Fijo");
            IF NOT rSelec.FINDSET(TRUE) THEN BEGIN
              rSelec.INIT;
              rSelec.Usuario := USERID;
              rSelec.Cliente := lrCondFct.Cliente;
              IF lrCliente.GET(lrCondFct.Cliente) THEN
                rSelec."Nombre Cliente" := lrCliente.Name;
              rSelec.TTOO    := lrCondFct.TTOO;
              IF lrTTOO.GET(lrCondFct.TTOO) THEN
                rSelec."Nombre TTOO" := lrTTOO.Nombre;
              lwCont += 1;
              rSelec."N§ Desglose":= lwCont;

              rSelec.Periodicidad         := lrCondFct.Periodicidad;
              rSelec."Cod Serie"          := cFactCli.GetNoSerie(rPI,FALSE,FALSE);
              rSelec."Tipo Servicio Fijo" := lrCondFct."Tipo Servicio Fijo";
              rSelec."Fecha Desde"        := lwPrimeraFecha;

              // Buscamos la fecha del ultimo periodo a partir de la fecha desde

              IF NOT lrCondFct.AcumulaAnteriores(lwPrimeraFecha) THEN
                lwFecha := lrCondFct."Ultima Fecha Facturacion" + 1
              ELSE
                lwFecha:= rSelec."Fecha Desde";
              lwNPer:=0;
              REPEAT
                lwFecha := lrCondFct.FechaFinPeriodo(lwFecha, TRUE);
                lwOK:= lwFecha <= wUltDiaCerr;
                IF lwOK THEN BEGIN
                  lwNPer  +=1;
                  rSelec."Fecha Hasta" := lwFecha;
                END;
                lwFecha := lwFecha+1;
              UNTIL NOT lwOK;

              rSelec.Periodos        := lwNPer;
              rSelec.Selecci¢n       := lwNPer <> 0;
              rSelec.Gestor          := lrCondFct."Usuario Responsable";
              IF rSelec."Fecha Hasta" <> 0D THEN
                rSelec.INSERT;
            END;
          END;
          lwCont2 += 1;
          wVentana.UPDATE(3, ROUND(lwCont2 / lwTotal * 10000, 1));
        UNTIL lrCondFct.NEXT = 0;
        wVentana.CLOSE;
      END
      ELSE
        ERROR(Text0001);

      rSelec.RESET;
      rSelec.SETRANGE(Usuario, USERID);
      IF NOT rSelec.FINDFIRST THEN BEGIN
        MESSAGE(Text0010);
        EXIT(FALSE);
      END;

      COMMIT;

      lfFormSel.LOOKUPMODE:= TRUE;
      lfFormSel.CAPTION := Text0005;
      lfFormSel.SETTABLEVIEW(rSelec);
      lfFormSel.SetFechaFac(pwFechaFac);
      lwOK := lfFormSel.RUNMODAL = ACTION::LookupOK;
      IF lwOK THEN
        pwFechaFac := lfFormSel.GetFechaFac;

      pwPrueba     := lfFormSel.GetPrueba;
      pwGrabarPref := lfFormSel.GetGrabarPref;

      EXIT(lwOK);
    END;

    PROCEDURE FacturaSel@1100244002(prSelec@1100244000 : Record 7010324;pwFechaFact@1100244007 : Date;pwPrueba@1100244008 : Boolean;pwGrabarPref@1103350000 : Boolean);
    VAR
      lrCond@1100244001 : Record 7010420;
      lrCond2@1100253000 : Record 7010420;
      lrCondFct@1100244004 : Record 7010416;
      lrTemp@1100244005 : TEMPORARY Record 7035392;
      lrCliTO@1100244009 : Record 7010313;
      lwFechaInicioPer@1100244002 : Date;
      lwFechaFinPer@1100244003 : Date;
      lwFechaMarca@1100244006 : Date;
      lwOk@1103355000 : Boolean;
    BEGIN
      // FacturaSel
      //
      // pwPrueba     - Inidica si debe Prefacturarse unicamente o tambin facturarse
      // pwGrabarPref - Indica (en caso de pwPruba) si debe de conservar o no la prefactura

      // AJF 07/01/09
      // Evito borrar el registro, ya que ahora tiene datos permanentes.
      IF lrCond.GET(USERID) THEN
        lrCond.LimpiaRegistro
      ELSE BEGIN
        lrCond.INIT;
        lrCond.Usuario := USERID;
        lrCond.INSERT;
      END;

      rPI.RESET;

      // El orden debe de ser inverso para que los "Tipos Servicio" en blanco sean los £ltimos, y eso llevar 
      // a facturar el resto.

      lrCondFct.RESET;
      lrCondFct.SETCURRENTKEY(Cliente,TTOO,"Tipo Servicio");
      lrCondFct.ASCENDING(FALSE);
      lrCondFct.SETRANGE(Cliente                  , prSelec.Cliente);
      lrCondFct.SETRANGE(TTOO                     , prSelec.TTOO);
      lrCondFct.SETRANGE("Tipo Servicio Fijo"     , prSelec."Tipo Servicio Fijo");
      lrCondFct.SETRANGE("Facturacion Automatica" , TRUE);
      IF lrCondFct.FINDFIRST THEN BEGIN
        lrCliTO.GET(prSelec.Cliente, prSelec.TTOO);

        REPEAT
          // Establecemos desde la £ltima fecha de facturaci¢n hasta hoy cuantos periodos, y por tanto facturas,
          // deben de considerarse.
          lwFechaInicioPer := prSelec."Fecha Desde";
          // JPT 05/05/04 En periodos= Quincenal y Mensual si existen servicios anteriores a la Ultima Fecha Facturacion
          // dichos servicios se incluiran al primer periodo (lwAcumularAnteriores)

          IF NOT lrCondFct.AcumulaAnteriores(lwFechaInicioPer) THEN
            lwFechaFinPer := lrCondFct.FechaFinPeriodo(lrCondFct."Ultima Fecha Facturacion"+1, TRUE)
          ELSE
            lwFechaFinPer := lrCondFct.FechaFinPeriodo(lwFechaInicioPer, TRUE);
          REPEAT
            wVentana.UPDATE(4,lwFechaInicioPer);
            wVentana.UPDATE(5,lwFechaFinPer);

            lrCond.Imprimir := FALSE;
            // lrCond.Garaje                   := rPar."Todos los garajes";
            lrCond.Cliente                  := prSelec.Cliente;
            lrCond.Touroperador             := prSelec.TTOO;
            lrCond."Fecha desde"            := lwFechaInicioPer;
            lrCond."Fecha hasta"            := lwFechaFinPer;
            lrCond.GetCondiciones(FALSE,FALSE); // Esto determina si ser  serie standard o alternativa
            // lrCond."Tipos servicio"         := lrCondFct."Tipo Servicio";
            lrCond."Texto Registro"         := lrCondFct."Texto Registro";
            lrCond."Tipo prefactura"        := lrCondFct."Tipo prefactura";
            lrCond."Tipo factura"           := lrCondFct."Tipo factura";
            lrCond."Facturacion Automatica" := TRUE;
            lrCond."Fecha Factura"          := pwFechaFact;
            lrCond."Prefactura Prueba"      := pwPrueba AND (NOT pwGrabarPref);
            lrCond."Agrupar lineas x vuelo" := lrCondFct."Agrupar lineas x vuelo";
            IF NOT lrCondFct."Fac. por Rango Plazas" THEN
              lrCond."Modo Desglose Transportados" := lrCondFct."Modo Desglose Transportados";

            lrCond2 := lrCond; // Guardamos aqui lo escrito anteriormente para que no se pierda en el siguiente bucle
            // Hay que crear un temporal de Garajes para pasarle uno por cada garaje posible
            wVentana.UPDATE(6,Text0007);
            CreaTemporal(lrTemp, lrCondFct, lwFechaInicioPer, lwFechaFinPer);
            IF lrTemp.FINDSET(TRUE) THEN BEGIN
              REPEAT
                LOCKTIMEOUT:= FALSE;
                // JPT 20/12/05 Esto es para evitar errores en las condiciones temporales
                lrCond := lrCond2;

                // De esta manera evitamos desbordamientos
                lrCond."Texto Registro"     := COPYSTR(GetTextoRegistro(lrCondFct, lrTemp),
                                                       1, MAXSTRLEN(lrCond."Texto Registro"));
                IF NOT lrCliTO."Fac. por Tipo Servicio Fijo" THEN
                  lrCond."Tipo Servicio Fijo" := lrCond."Tipo Servicio Fijo"::Todos
                ELSE
                  lrCond."Tipo Servicio Fijo" := lrTemp."Tipo Servicio Fijo";
                lrCond."Zona trabajo"         := lrTemp."Zona facturacion";
                lrCond."Rango Plazas Desde"   := lrTemp."Pax Facturados";
                lrCond."Rango Plazas Hasta"   := lrTemp."Pax Transportados";
                IF lrCondFct."Fac. por Rango Plazas" THEN
                  lrCond."Modo Desglose Transportados" := lrTemp."Tipo linea";
                // JPT (28/12/05) En facturaci¢n automatica no es necesario (No se debe) grabar el registro, se pasa el valor
                // lrCond.MODIFY;

                wVentana.UPDATE(6,Text0008);
                IF cFactCli.CrearPrefactura(rPI, lrCond,TRUE) THEN BEGIN
                  IF wFacts[1]='' THEN    // Capturamos el primer y ultimo numero de prefactura
                    wFacts[1]:= lrCond."N§ Prefactura";
                  wVentana.UPDATE(6,STRSUBSTNO(Text0009,lrCond."N§ Prefactura"));
                  IF NOT pwPrueba THEN
                    cFactCli.CrearFactura(rPI, lrCond, TRUE, FALSE);
                  wFacts[2] := lrCond."N§ Prefactura";

                  lrTemp.Facturable:=TRUE;
                  lrTemp.MODIFY;
                  COMMIT;
                END;
              UNTIL lrTemp.NEXT=0;
            END;
            // ImprimeTemporal(lrTemp);  // Solo sirve internamente para debuguear
            lwFechaMarca     := lwFechaFinPer;
            lwFechaInicioPer := lwFechaFinPer +1;
            lwFechaFinPer    := lrCondFct.FechaFinPeriodo(lwFechaInicioPer,TRUE);
          UNTIL lwFechaFinPer > prSelec."Fecha Hasta";
          // Modificamos la £ltima fecha de facturacion
          IF NOT pwPrueba THEN BEGIN
            lrCondFct.LOCKTABLE;
            lrCondFct."Ultima Fecha Facturacion" := lwFechaMarca;
            lrCondFct.MODIFY;
          END;
        UNTIL lrCondFct.NEXT=0;
      END;
    END;

    PROCEDURE CreaTempSeleccion@1103350000(VAR prPITemp@1103350000 : TEMPORARY Record 7035392);
    VAR
      lrPI@1103350001 : Record 7035392;
      lwTotal@1103350002 : Integer;
      lwCont@1103350003 : Integer;
    BEGIN
      // CreaTempSeleccion
      // JPT - 18/08/04 Resulta que cuando el tama¤o de la tabla Coste Ingreso se va haciendo cada vez mayor
      // El proceso de selecci¢n se va haciendo de cada vez m s lento. Es por eso que decido hacer una tabla temporal para
      // realizar dicho proceso

      prPITemp.RESET;
      IF prPITemp.FINDFIRST THEN
        prPITemp.DELETEALL;

      lrPI.RESET;
      lrPI.SETCURRENTKEY("Cliente Operativo",Touroperador,Fecha,Facturable,"N§ Prefactura");
      lrPI.SETRANGE(Facturable  , TRUE);
      lrPI.SETFILTER("N§ Prefactura",'%1','');
      IF lrPI.FINDSET THEN BEGIN
        lwTotal := lrPI.COUNT;
        CLEAR(lwCont);
        REPEAT
          prPITemp := lrPI;
          prPITemp.INSERT;
          lwCont +=1;
          IF lwCont MOD 100 =0 THEN // Para evitar retardos inecesarios solo refrescamos la barra de progreso cada 100 registros
            wVentana.UPDATE(3,ROUND(lwCont/lwTotal*10000,1));
        UNTIL lrPI.NEXT=0;
      END;
    END;

    PROCEDURE BuscaPrimeraFechaFacturacion@1100244000(prCondFct@1100244000 : Record 7010416;pwUltFecha@1100244004 : Date;pwFactxTipoSer@1103350001 : Boolean) : Date;
    VAR
      lrClienteTTOO@1100244005 : Record 7010313;
      lwFecha1@1100244002 : Date;
      lwFecha2@1100244003 : Date;
      lwFechaIni@1103350002 : Date;
    BEGIN
      // BuscaPrimeraFechaFacturacion
      // Seg£n el parametro de Condiciones de Facturacion y las lineas de coste/ingreso del cliente
      // en cuesti¢n buscamos cual es la primera fecha de facturaci¢n, buscada de tal modo que el campo
      // "Ultima Fecha Facturacion" quede rellenado con fecha de hoy.
      // Hay que buscar los periodos "para atras" hasta encontrar el que le corresponda

      lrClienteTTOO.GET(prCondFct.Cliente, prCondFct.TTOO);

      // Buscamos la primera fecha

      CLEAR(rPI);
      rPI.SETCURRENTKEY("Cliente Operativo",
                        Touroperador,
                        Fecha,
                        Facturable,
                        "N§ Prefactura");
      rPI.SETRANGE("Cliente Operativo"         , prCondFct.Cliente);
      rPI.SETFILTER(Touroperador   , cFactCli.FiltroTTOO(lrClienteTTOO));
      rPI.SETRANGE(Facturable      , TRUE);
      rPI.SETFILTER("N§ Prefactura",'%1','');

      // JPT 19/07/05 Miramos que la fecha del servicio no sea superior al ultimo periodo facturable

      lwFechaIni := prCondFct.FechaFinPeriodo(WORKDATE, FALSE);

      rPI.SETFILTER(Fecha, '<%1', lwFechaIni);
      IF pwFactxTipoSer THEN
        rPI.SETRANGE("Tipo Servicio Fijo", prCondFct."Tipo Servicio Fijo");

      IF rPI.FINDFIRST THEN
        lwFecha1 := rPI.Fecha
      ELSE
        EXIT(0D);  // JPT 05/04/05 Si no se encuntra nada que facturar devuelve fecha 0d

      IF prCondFct.Periodicidad <> 0 THEN BEGIN
        lwFecha2 := pwUltFecha + 1;
        REPEAT
          lwFecha2 := lwFecha2 - 1;
          lwFecha2 := prCondFct.FechaFinPeriodo(lwFecha2, FALSE);
        UNTIL lwFecha2 <= lwFecha1;
      END
      ELSE
        lwFecha2 := lwFecha1;

      EXIT(lwFecha2);
    END;

    PROCEDURE CreaTemporal@1100244004(VAR prTemp@1100244003 : TEMPORARY Record 7035392;prCondFct@1100244002 : Record 7010416;pwFechaInicio@1100244001 : Date;pwFechaFin@1100244000 : Date);
    VAR
      lrPI@1100244004 : Record 7035392;
      lrRangos@1100244006 : Record 7010430;
      lrTMPRangos@1100244007 : TEMPORARY Record 7010430;
      lrClienteTTOO@1100244008 : Record 7010313;
      lwCont@1100244005 : Integer;
    BEGIN
      // CreaTemporal
      // Se Crea una tabla temporal para poder hacer una factura por los siguientes puntos distintos
      // ZonaTrabajo, Tipo Servicio Fijo, Rango Plazas
      // Utilizamos como temporal una referencia a Coste-Ingreso
      //

      prTemp.RESET;
      IF prTemp.FINDFIRST THEN
        prTemp.DELETEALL;

      lrClienteTTOO.RESET;
      lrClienteTTOO.GET(prCondFct.Cliente,prCondFct.TTOO);

      IF prCondFct."Fac. por Rango Plazas" THEN BEGIN
        // Nos pasamos a temporal los rangos de paxes ya la busqueda es un proceso que se va a repetir muchas veces
        // y de esta manera se optimiza bastante

        lrTMPRangos.RESET;
        IF lrTMPRangos.FINDFIRST THEN
          lrTMPRangos.DELETEALL;

        lrRangos.SETRANGE(Cliente              , prCondFct.Cliente);
        lrRangos.SETRANGE(TTOO                 , prCondFct.TTOO);

        lrRangos.SETRANGE("Tipo Servicio Fijo" , prCondFct."Tipo Servicio Fijo");
        IF lrRangos.FINDSET THEN BEGIN
          REPEAT
            lrTMPRangos := lrRangos;
            lrTMPRangos.INSERT;
          UNTIL lrRangos.NEXT=0;
        END;
      END;

      CLEAR(lwCont);

      CLEAR(lrPI);
      lrPI.SETCURRENTKEY("Cliente Operativo",Touroperador,Fecha,Facturable,"N§ Prefactura");
      lrPI.SETRANGE ("Cliente Operativo"        , prCondFct.Cliente);
      lrPI.SETFILTER(Touroperador   , cFactCli.FiltroTTOO(lrClienteTTOO));
      lrPI.SETRANGE (Fecha          , pwFechaInicio, pwFechaFin);
      lrPI.SETRANGE (Facturable     , TRUE);
      lrPI.SETFILTER("N§ Prefactura",'%1','');
      IF lrPI.FINDSET THEN BEGIN
        REPEAT
          prTemp.RESET;
          IF lrPI.Importe <> 0 THEN BEGIN
            IF lrClienteTTOO."Fac. por Tipo Servicio Fijo" THEN
              prTemp.SETRANGE("Tipo Servicio Fijo", prCondFct."Tipo Servicio Fijo");

            IF prCondFct."Fac. por Rango Plazas" THEN BEGIN
              CLEAR(lrTMPRangos);
              lrTMPRangos.SETFILTER("Plazas Desde" , '<=%1', lrPI."Paxes Servicio");
              lrTMPRangos.SETFILTER("Plazas Hasta" , '>=%1', lrPI."Paxes Servicio");
              IF lrTMPRangos.FINDFIRST THEN BEGIN
                // Utilizamos los campos pax facturado y transportado para guardar los rangos
                prTemp.SETRANGE("Pax Facturados"   , lrTMPRangos."Plazas Desde");
                prTemp.SETRANGE("Pax Transportados", lrTMPRangos."Plazas Hasta");

                // La indicacion de facturar por cada zona de trabajo puede hacerse por rangos de plazas
                IF lrTMPRangos."Fac por Zona trabajo" THEN
                  prTemp.SETFILTER("Zona facturacion",'=%1', lrPI."Zona facturacion");
              END;
            END
            ELSE BEGIN
              IF prCondFct."Fac. por Zona Trabajo" THEN
                prTemp.SETFILTER("Zona facturacion",'=%1', lrPI."Zona facturacion");
            END;

            IF NOT prTemp.FINDFIRST THEN BEGIN // Si no esta el registro temporal, lo incorpora
              prTemp.INIT;
              lwCont += 1;
              prTemp."Cliente Operativo"   := lrPI."Cliente Operativo";
              prTemp."Cliente estadistico" := lrPI."Cliente estadistico";
              prTemp.Touroperador := lrPI.Touroperador;
              prTemp."N§ Linea"   := lwCont;

              // AJS 02.07.2008
              // Guardamos tambien el contrato para emplearlo en la funcion GetTextoRegistro

              prTemp."N§ Contrato" := lrPI."N§ Contrato";

              IF lrClienteTTOO."Fac. por Tipo Servicio Fijo" THEN
                prTemp."Tipo Servicio Fijo" := prCondFct."Tipo Servicio Fijo";

              IF prCondFct."Fac. por Rango Plazas" THEN BEGIN
                prTemp."Pax Facturados"    := lrTMPRangos."Plazas Desde";
                prTemp."Pax Transportados" := lrTMPRangos."Plazas Hasta";
                // Utilizamos Concepto facturacion para insertar "A¤adir a Texto Registro" de Rangos Plazas
                prTemp."Concepto facturacion" := lrTMPRangos."A¤adir a Texto Registro";
                // Utilizo tipo de linea para almacenar el modo desglose transportados;
                prTemp."Tipo linea" := lrTMPRangos."Modo Desglose Transportados";
                IF lrTMPRangos."Fac por Zona trabajo" THEN
                  prTemp."Zona facturacion" := lrPI."Zona facturacion";
              END
              ELSE BEGIN
                IF prCondFct."Fac. por Zona Trabajo" THEN
                  prTemp."Zona facturacion" := lrPI."Zona facturacion";
              END;

              prTemp.INSERT;
            END;
          END;
        UNTIL lrPI.NEXT=0;
      END;

      prTemp.RESET;
    END;

    PROCEDURE ImprimeFact@1100244006(pwDesde@1100244000 : Code[20];pwHasta@1100244001 : Code[20];pwPrueba@1103350001 : Boolean);
    VAR
      lrPrefac@1100244002 : Record 7010415;
      lwListFact@1100244003 : Report 7010371;
      lwNoFact@1103350000 : ARRAY [2] OF Code[20];
    BEGIN
      // ImprimeFact
      // Se le pasa el primer y ultimo numero de factura a imprimir

      CLEAR(lwNoFact);
      lrPrefac.RESET;
      lrPrefac.SETRANGE("N§ Prefactura", pwDesde,pwHasta);
      lrPrefac.SETRANGE(Usuario        , USERID); // JPT 13/07/05 Con eso evitamos que varios usuario "se pisen las prefacturas"
      IF lrPrefac.FINDSET(TRUE) THEN BEGIN
        lwNoFact[1]:= lrPrefac."N§ Factura";
        REPEAT
          IF lrPrefac."N§ Factura" <>'' THEN
            lrPrefac.Imprimir :=  lrPrefac.Imprimir::Factura
          ELSE
            lrPrefac.Imprimir :=  lrPrefac.Imprimir::Prefactura;
          lrPrefac.MODIFY;
        UNTIL lrPrefac.NEXT=0;
        lwNoFact[2]:= lrPrefac."N§ Factura";
      COMMIT;

      IF (NOT pwPrueba) AND (lwNoFact[1] <> '') AND (lwNoFact[2] <> '') THEN
        lrPrefac.SETRANGE("N§ Factura", lwNoFact[1], lwNoFact[2]);

      { JPT 13/12/05 Redieccionamos a las nuevasfunciones de facturacion
      IF pwPrueba THEN
        cFactIng.ImprimePrefact(lrPrefac)
      ELSE
        cFactIng.ImprimeFact(lrPrefac);
      }

      IF pwPrueba THEN
        cFactCli.ImprimirPrefactura(lrPrefac)
      ELSE
        cFactCli.ImprimirFactura(lrPrefac);


        { JPT 23/02/05 Esto es valido solo para TRN
        // lwListFact.USEREQUESTFORM:=FALSE;
        lwListFact.SETTABLEVIEW(lrPrefac);
        lwListFact.RUNMODAL;
        }
      END;
    END;

    PROCEDURE GetTextoRegistro@1100244015(prCondFct@1100244002 : Record 7010416;prTemp@1100244005 : TEMPORARY Record 7035392) : Text[200];
    VAR
      lrOpc@1100244000 : Record 7010428;
      lrClintTTOO@1103350000 : Record 7010313;
      lrTTOO@1103355001 : Record 7010312;
      lrZonaCon@1103355000 : Record 7010404;
      lrContrato@1103355004 : Record 7010403;
      lcCalculoParte@1103355003 : Codeunit 7010407;
      lwCont@1100244003 : Integer;
      lwText@1100244007 : Text[1024];
      lwOpcion@1103355002 : ARRAY [5] OF Text[150];
    BEGIN
      // GetTextoRegistro
      // Devuelve una cadena de texto
      // lwOpcion es un array de 5 dimensiones (ampliable)
      // Se ha hecho con 5 para posibles ampliaciones futuras

      lrOpc.RESET;
      lrOpc.SETCURRENTKEY(Cliente,TTOO,"Tipo Servicio Fijo",Orden);
      lrOpc.SETRANGE(Cliente             , prCondFct.Cliente);
      lrOpc.SETRANGE(TTOO                , prCondFct.TTOO);
      lrOpc.SETRANGE("Tipo Servicio Fijo", prCondFct."Tipo Servicio Fijo");

      CLEAR(lwOpcion);
      FOR lwCont:=1 TO 5 DO BEGIN
        lrOpc.SETRANGE(Orden , lwCont);
        IF lrOpc.FINDFIRST THEN BEGIN
          CASE lrOpc.Campo OF
            lrOpc.Campo::Touroperador: BEGIN
              IF lrTTOO.GET(prCondFct.TTOO) THEN
                lwOpcion[lwCont]:= lrTTOO.Nombre;
            END;
            lrOpc.Campo::"Zona Trabajo": BEGIN
              // AJS 23.06.2008, TNU08002
              // La descripcion de la zona de facturacion la vamos a buscar en la tabla de zonas contrato
              //IF lrZonaTra.GET(prTemp."Zona facturacion") THEN
              //  lwOpcion[lwCont]:= lrZonaTra.Descripcion;

              // AJS 02.07.2008
              // Buscamos el contrato

              lrContrato.RESET;
              lrContrato.SETRANGE("N§ Contrato", prTemp."N§ Contrato");
              lrContrato.FINDFIRST;

              lrZonaCon.RESET;
              lrZonaCon.SETRANGE("N§ Contrato"     , lcCalculoParte.NumeroContratoVentFacturacion(lrContrato));
              lrZonaCon.SETRANGE("Tipo contrato"   , lrZonaCon."Tipo contrato"::Venta);

              // AJS 30.06.2008, TNU08002
              // Filtramos por el tipo de servicio fijo

              lrZonaCon.SETRANGE("Tipo Servicio fijo", prTemp."Tipo Servicio Fijo");

              lrZonaCon.SETRANGE("Zona facturacion", prTemp."Zona facturacion");
              IF lrZonaCon.FINDFIRST THEN
                lwOpcion[lwCont]:= lrZonaCon."Descripcion Zona facturacion";
            END;
          END;
        END;
      END;

      IF prCondFct."Texto Registro" <> '' THEN
        lwText := STRSUBSTNO(prCondFct."Texto Registro", lwOpcion[1], lwOpcion[2], lwOpcion[3], lwOpcion[4], lwOpcion[5])
      ELSE BEGIN
        lrClintTTOO.GET(prCondFct.Cliente,prCondFct.TTOO);
        IF lrClintTTOO."Fac. por Tipo Servicio Fijo" THEN
          lwText := FORMAT(prCondFct."Tipo Servicio Fijo")
        ELSE
          lwText := Text0017;
        IF lrTTOO.GET(prCondFct.TTOO) THEN
          lwText += ' - ' + lrTTOO.Nombre;
      END;

      IF prTemp."Concepto facturacion" <> '' THEN
        lwText += '-' + prTemp."Concepto facturacion";

      lwText := COPYSTR(lwText,1,200);
      EXIT(lwText);
    END;

    PROCEDURE ImprimeTemporal@1100244001(VAR prTemp@1100244003 : TEMPORARY Record 7035392);
    VAR
      lwArch@1100244000 : File;
      lwNombreArch@1100244001 : Text[200];
      lwText@1100244002 : Text[250];
    BEGIN
      // wImprimeTemporal

      // Es solo para control interno de las condicones de facturacion, para debuguear

      prTemp.SETRANGE(Facturable,TRUE);
      IF prTemp.FINDSET THEN BEGIN
        lwNombreArch := Text50000;
        lwArch.CREATE(lwNombreArch);
        lwArch.TEXTMODE:= TRUE;
        REPEAT
          lwText := Text50001  + FORMAT(prTemp."N§ Linea");
          lwArch.WRITE(lwText);
          lwText := Text50002  + prTemp."Cliente Operativo";
          lwArch.WRITE(lwText);
          lwText := Text50003  + prTemp.Touroperador;
          lwArch.WRITE(lwText);
          lwText := Text50004  + FORMAT(prTemp."Tipo Servicio Fijo");
          lwArch.WRITE(lwText);
          lwText := Text50005  + FORMAT(prTemp."Pax Facturados")  + '+' + FORMAT(prTemp."Pax Transportados");
          lwArch.WRITE(lwText);
          lwText := Text50006  + prTemp."Zona facturacion";
          lwArch.WRITE(lwText);
          lwText :='';
          lwArch.WRITE(lwText);
        UNTIL prTemp.NEXT=0;
        lwArch.CLOSE;
        SHELL(Text50007,lwNombreArch);
      END;
    END;

    PROCEDURE BuscaFechaFactura@1100244008() : Date;
    VAR
      lrPrefac@1100244001 : Record 7010415;
      lwFechaFac@1100244000 : Date;
    BEGIN
      // FechaFact
      // Busca una fecha de facturacion por defecto

      rPar.FINDFIRST;
      lwFechaFac:= WORKDATE;

      // En principio las fechas de facturaci¢n deben de ser o dia 15  o fin de ms
      IF DATE2DMY(lwFechaFac,1) >= 15 THEN
        lwFechaFac := DMY2DATE(15, DATE2DMY(lwFechaFac,2),DATE2DMY(lwFechaFac,3))
      ELSE BEGIN
        lwFechaFac := DMY2DATE(1, DATE2DMY(lwFechaFac,2),DATE2DMY(lwFechaFac,3));
        lwFechaFac := CALCDATE(Text50008, lwFechaFac);
      END;

      // Ahora buscamos si hay alguna Factura con fecha posterior a esta
      lrPrefac.RESET;
      lrPrefac.SETCURRENTKEY(Facturada,"Fecha Registro factura");

      // JPT 14/07/05 IBZ le interesa proponer la fecha de la £ltima prefactura Facturada o no
      IF rPar."Empresa Real" IN [rPar."Empresa Real"::IBZ, rPar."Empresa Real"::SJO] THEN BEGIN
        lrPrefac.SETRANGE(Desactivada, FALSE);
        lrPrefac.SETRANGE(Facturada,FALSE);
        IF lrPrefac.FINDLAST THEN
          IF lwFechaFac < lrPrefac."Fecha Registro factura" THEN
            lwFechaFac := lrPrefac."Fecha Registro factura";
      END;

      lrPrefac.SETRANGE(Facturada,TRUE);
      IF lrPrefac.FINDLAST THEN
        IF lwFechaFac < lrPrefac."Fecha Registro factura" THEN
          lwFechaFac := lrPrefac."Fecha Registro factura";

      EXIT(lwFechaFac);
    END;

    PROCEDURE RappelMes@1100253000();
    VAR
      lfFormSel@1100253000 : Form 7010335;
      lrCond@1100253006 : Record 7010420;
      lrPrefact@1100253009 : Record 7010415;
      lwPrueba@1100253001 : Boolean;
      lwGrabarPref@1100253002 : Boolean;
      lwText@1100253003 : Text[100];
      lwTotal@1100253004 : Integer;
      lwCont@1100253005 : Integer;
      lwFechas@1100253007 : ARRAY [2] OF Date;
      lwFechaFact@1100253008 : Date;
    BEGIN
      // RappelMes
      // Automatismo para generar todos los rappels del ms

      CLEAR(lfFormSel);
      lfFormSel.LOOKUPMODE:= TRUE;
      IF lfFormSel.RUNMODAL <> ACTION::LookupOK THEN
        EXIT;

      // lwPrueba     := lfFormSel.GetPrueba;
      lwPrueba := FALSE; // JPT 10/10/06 En principio generamos siempre factura
      lwGrabarPref := lfFormSel.GetGrabarPref;
      lfFormSel.GetFechas(lwFechas[1],lwFechas[2]); // Fechas que delimitan el ms
      lwFechaFact  := lfFormSel.GetFechaFac;
      IF lwFechaFact = 0D THEN
       ERROR(Text0011);

      CLEAR(wFacts);
      CLEAR(lrCond);
      CLEAR(rSelec);
      rSelec.SETRANGE(Usuario  , USERID);
      rSelec.SETRANGE(Selecci¢n, TRUE);
      IF rSelec.FINDSET THEN BEGIN
        IF lwPrueba THEN
          lwText:= Text0020
        ELSE
          lwText:= Text0019;
        IF NOT CONFIRM(lwText,FALSE) THEN
          EXIT;
        wVentana.OPEN(Text0021);
        lwTotal := rSelec.COUNTAPPROX;
        lwCont  :=0;
        REPEAT
          wVentana.UPDATE(2, rSelec.Cliente);
          wVentana.UPDATE(3, rSelec.TTOO);
          CLEAR(lrPrefact);
          lrPrefact.SETCURRENTKEY(Fecha, Cliente, Touroperador, Facturada);
          lrPrefact.SETRANGE(Cliente             , rSelec.Cliente);
          lrPrefact.SETRANGE(Touroperador        , rSelec.TTOO);

          // AJS 05.04.2006
          // El filtro de fecha debe realizarse sobre el campo "Fecha registro" no sobre el campo Fecha
          //lrPrefact.SETRANGE(Fecha               , lwFechas[1], lwFechas[2]);

          lrPrefact.SETRANGE("Fecha Registro factura"      , lwFechas[1], lwFechas[2]);

          lrPrefact.SETRANGE(Facturada           , TRUE);
          lrPrefact.SETRANGE(Desactivada         , FALSE);
          lrPrefact.SETRANGE("Prefactura Rappel" , ''); // Que no tengan ya una factura rappel
          // AJF 09/09/08
          // filtramos las facturas abonadas.
          lrPrefact.SETRANGE("Factura abonada"       , FALSE);

          IF lrPrefact.FINDFIRST THEN BEGIN
             lrCond.Cliente      := rSelec.Cliente;
             lrCond.Touroperador := rSelec.TTOO;
             lrCond."Fecha desde":= lwFechas[1];
             IF rSelec."Fecha Desde" > lwFechas[1] THEN
               lrCond."Fecha desde":= rSelec."Fecha Desde";
             lrCond."Fecha hasta":= lwFechas[2];
             IF rSelec."Fecha Hasta" < lwFechas[2] THEN
             lrCond."Fecha hasta" := rSelec."Fecha Hasta";
             cFactCli.ProcesarRappelCliente(lrPrefact,lrCond,lwFechaFact,TRUE,rSelec."Tipo Servicio Fijo",1);
          END;
          IF wFacts[1]='' THEN
            wFacts[1]:= lrCond."N§ Prefactura";
          wFacts[2]:= lrCond."N§ Prefactura";
          lwCont += 1;
          wVentana.UPDATE(1,ROUND(lwCont/lwTotal*10000,1));
        UNTIL rSelec.NEXT=0;
        wVentana.CLOSE;
      END
      ELSE
        ERROR(Text0002);

      ImprimeFact(wFacts[1], wFacts[2],lwPrueba);
    END;

    PROCEDURE RappelTemporada@1103355002();
    VAR
      lfConds@1103355000 : Form 7010523;
      lrConds@1103355001 : Record 7010420;
      lrClienteTTOO@1103355011 : Record 7010313;
      lrCondsRappel@1103355002 : Record 7010375;
      lrPrefact@1103355003 : Record 7010415;
      lwFechaIni@1103355004 : Date;
      lwFechaFin@1103355005 : Date;
      lwCont@1103355006 : Integer;
      lwTotal@1103355007 : Integer;
      lwFactIni@1103355008 : Code[20];
      lwFactFin@1103355009 : Code[20];
    BEGIN
      // RappelTemporada
      // Pedimos un Rango de fechas para filtrar las Prefacturas y la fecha de registro de la factura y TTOO/CLiente
      // Se procesan todos los Rappels pendientes dentro de rango de fechas para los servicios que tengan condiciones de rappel.

      // Limpiamos Condiciones Temporales.
      CLEAR(lrConds);

      // AJF 07/01/09
      // Evito borrar el registro, ya que ahora tiene datos permanentes.
      IF lrConds.GET(USERID) THEN
        lrConds.LimpiaRegistro
      ELSE BEGIN
        lrConds.INIT;
        lrConds.Usuario := USERID;
        lrConds.INSERT;
      END;

      lrConds.FILTERGROUP(2);
      lrConds.SETRECFILTER;
      lrConds.FILTERGROUP(0);

      COMMIT;

      lfConds.SETRECORD   (lrConds);
      lfConds.SETTABLEVIEW(lrConds);

      IF (lfConds.RUNMODAL <> ACTION::OK) THEN
        EXIT;

      // Se han de recuperar las condiciones temporales al salir del form.
      lrConds.RESET;
      lrConds.GET(USERID);

      // Guardamos las fechas ya que modificaremos las condiciones temporales para llamar a ProcesarRappelCliente.
      lwFechaIni := lrConds."Fecha desde";
      lwFechaFin := lrConds."Fecha hasta";

      IF FORM.RUNMODAL(0,lrClienteTTOO) <> ACTION::LookupOK THEN
        EXIT;

      lrClienteTTOO.SETRECFILTER;

      lrConds.Cliente      := lrClienteTTOO.Cliente;
      lrConds.Touroperador := lrClienteTTOO.TTOO;
      lrConds.MODIFY;

      COMMIT;


      // Filtramos las condiciones de Rappel.
      lrCondsRappel.SETCURRENTKEY(Cliente,TTOO);

      lrCondsRappel.SETRANGE (Cliente            , lrConds.Cliente);
      lrCondsRappel.SETRANGE (TTOO               , lrConds.Touroperador);
      lrCondsRappel.SETFILTER("Fecha Desde"      , '<=%1', lrConds."Fecha hasta");
      lrCondsRappel.SETFILTER("Fecha Hasta"      , '>=%1', lrConds."Fecha desde");
      lrCondsRappel.SETFILTER(Porcentaje         , '<>%1', 0);
      lrCondsRappel.SETRANGE ("Tipo Aplicacion", lrCondsRappel."Tipo Aplicacion"::Temporada);

      // Si no encontramos Condiciones de rappel devolvemos error.
      IF NOT lrCondsRappel.FINDSET THEN
        ERROR(Err001, lrConds.Cliente, lrConds.Touroperador, lrConds."Fecha desde", lrConds."Fecha hasta");

      // Comprueba que no exista ninguna factura con fecha posterior a la indicada.
      lrPrefact.RESET;
      lrPrefact.SETCURRENTKEY(Facturada,"Fecha Registro factura");
      lrPrefact.SETRANGE(Facturada,TRUE);
      lrPrefact.SETFILTER("Fecha Registro factura",'>%1', lrConds."Fecha Factura");
      IF lrPrefact.FINDLAST THEN
        ERROR(Err002, lrPrefact."Fecha Registro factura");

      wVentana.OPEN(Text0021);
      wVentana.UPDATE(2, lrConds.Cliente);
      wVentana.UPDATE(3, lrConds.Touroperador);

      lwCont := 0;
      lwTotal := lrCondsRappel.COUNTAPPROX;

      REPEAT

        // Filtramos las prefacturas seg£n las condiciones de rappel.
        lrPrefact.RESET;
        lrPrefact.SETCURRENTKEY(Fecha, Cliente, Touroperador, Facturada);
        lrPrefact.SETRANGE(Cliente                 , lrCondsRappel.Cliente);
        lrPrefact.SETRANGE(Touroperador            , lrCondsRappel.TTOO);
        lrPrefact.SETRANGE("Fecha Registro factura", lwFechaIni, lwFechaFin);
        lrPrefact.SETRANGE(Facturada               , TRUE);
        lrPrefact.SETRANGE(Desactivada             , FALSE);
        lrPrefact.SETRANGE("Prefactura Rappel"     , ''); // Que no tengan ya una factura rappel
        // AJF 09/09/08
        // filtramos las facturas abonadas.
        lrPrefact.SETRANGE("Factura abonada"       , FALSE);

        IF lrPrefact.FINDFIRST THEN BEGIN
          cFactCli.ProcesarRappelCliente(lrPrefact,lrConds, lrConds."Fecha Factura", TRUE,
                                         lrCondsRappel."Tipo Servicio Fijo", lrCondsRappel."Tipo Aplicacion");

          // Guardamos el rango de n£meros de factura para imprimir despus.
          IF lwFactIni = '' THEN
            lwFactIni := lrConds."N§ Prefactura";
          lwFactFin := lrConds."N§ Prefactura";

        END;

        lwCont += 1;
        wVentana.UPDATE(1,ROUND(lwCont/lwTotal*10000,1));

      UNTIL lrCondsRappel.NEXT = 0;

      wVentana.CLOSE;

      IF lwFactIni <> '' THEN
        ImprimeFact(lwFactIni, lwFactFin, FALSE)
      ELSE
        ERROR(Err003, lrConds.Cliente, lrConds.Touroperador, lrConds."Fecha desde", lrConds."Fecha hasta");
    END;

    PROCEDURE UltDiaCerrado@1103355000() : Date;
    BEGIN
      // UltDiaCerrado
      // Antes se utilizaba la referencia al ultimo dia cerrado
      // Ahora (DRF 07001 fac003 ) ser  la fecha de trabajo

      EXIT(WORKDATE);
    END;

    BEGIN
    END.
  }
}
