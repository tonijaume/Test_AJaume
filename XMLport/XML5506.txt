OBJECT XMLport 5506 Export Prod. Sched. Conflicts
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Export Prod. Sched. Conflicts;
               ESP=Exportar conflictos de previsi¢n de prod.];
    OnPreXMLport=BEGIN
                   ProdSchedSetup.GET;
                 END;

  }
  ELEMENTS
  {
    { [{6934BC46-783D-45B0-85FF-ECF6F3679E4F}];  ;NavisionGantt       ;Element ;Text     }

    { [{B89CACD6-EFAC-44C2-9639-4EDBC8045555}];1 ;ProductionOrders    ;Element ;Text    ;
                                                  Export::OnBeforePassVariable=VAR
                                                                                 ProdOrder@1000 : Record 5405;
                                                                               BEGIN
                                                                               END;
                                                                                }

    { [{DA559AFA-591E-4FDB-9F36-58CFDF6A8C86}];2 ;ProductionOrder     ;Element ;Table   ;
                                                  SourceTable=Table5406;
                                                  MinOccurs=Zero;
                                                  Export::OnPreXMLItem=BEGIN
                                                                         "Prod. Order Line".MARKEDONLY(TRUE);
                                                                       END;

                                                  Export::OnAfterGetRecord=BEGIN
                                                                             IF (xProdOrderNo = "Prod. Order Line"."Prod. Order No.") AND (xProdOrderStatus = "Prod. Order Line".Status) AND
                                                                                ("Prod. Order Line"."Routing Reference No." = 0) AND (xRoutingNo = "Prod. Order Line"."Routing No.")
                                                                             THEN
                                                                               FamilyOrderFlag := TRUE
                                                                             ELSE
                                                                               FamilyOrderFlag := FALSE;

                                                                             IF FamilyOrderFlag THEN
                                                                               currXMLport.SKIP;

                                                                             xProdOrderNo := "Prod. Order Line"."Prod. Order No.";
                                                                             xProdOrderStatus := "Prod. Order Line".Status;
                                                                             xRoutingNo := "Prod. Order Line"."Routing No.";
                                                                           END;
                                                                            }

    { [{28486AA8-D176-472D-96DD-0DEB88C0EAB7}];3 ;No                  ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Prod. Order Line::Prod. Order No. }

    { [{5B9DAE73-20A5-4AA3-8DEF-FE8CA6BB42AA}];3 ;ItemName            ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=Prod. Order Line::Description;
                                                  Export::OnBeforePassField=BEGIN
                                                                              CorrectText("Prod. Order Line".Description);
                                                                            END;
                                                                             }

    { [{E3DA1BC5-3213-4044-9FF5-A7C163E82771}];3 ;Status              ;Element ;Text    ;
                                                  VariableName=POStatus;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 POStatus := FORMAT("Prod. Order Line".Status,0,'<Standard Format,2>');
                                                                               END;
                                                                                }

    { [{F54CBDE3-6D61-4023-9B49-B5CAE8C0C0D5}];3 ;SalesOrderNo        ;Element ;Text    ;
                                                  Export::OnBeforePassVariable=VAR
                                                                                 ProdOrder@1000 : Record 5405;
                                                                               BEGIN
                                                                                   SalesOrderNo := FindSalesOrders;
                                                                               END;
                                                                                }

    { [{8C7289C6-568B-4698-A198-7E1F8F88114B}];3 ;DueDate             ;Element ;Text    ;
                                                  VariableName=PODueDate;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 PODueDate := ProdSchedMgt.ConvertToDDMMYY("Prod. Order Line"."Due Date");
                                                                               END;
                                                                                }

    { [{49701B14-B737-449C-A563-53C15D686C5D}];3 ;CustomerName        ;Element ;Text    ;
                                                  Export::OnBeforePassVariable=VAR
                                                                                 SalesHeader@1000 : Record 36;
                                                                               BEGIN
                                                                                 CustomerName := CustName;
                                                                                 CorrectText(CustomerName);
                                                                               END;
                                                                                }

    { [{E97D05D1-4B1A-4215-85DC-E6059A115370}];3 ;ItemNo              ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Prod. Order Line::Item No. }

    { [{548BEE3C-97CF-41F4-B14B-E39EDA32BAB2}];3 ;Quantity            ;Element ;Field   ;
                                                  DataType=Decimal;
                                                  SourceField=Prod. Order Line::Quantity;
                                                  Export::OnBeforePassVariable=16 }

    { [{95E7E14B-124E-4AEC-8ADE-C239F1B0F330}];3 ;UnitOfMeasure       ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Prod. Order Line::Unit of Measure Code }

    { [{9D1BB725-A59C-4A06-BAFE-3A752A0A4871}];3 ;ProductionOrderLineNo;Element;Field   ;
                                                  DataType=Integer;
                                                  SourceField=Prod. Order Line::Line No. }

    { [{39299F79-EB6E-49F6-8B17-FE7D6404680B}];3 ;Routing             ;Element ;Text     }

    { [{69817871-E041-488A-9070-B885502AF07B}];4 ;Operation           ;Element ;Table   ;
                                                  SourceTable=Table5409;
                                                  LinkFields=Field1=FIELD(Field61);
                                                  LinkTable=Prod. Order Line;
                                                  MinOccurs=Zero;
                                                  Export::OnPreXMLItem=BEGIN
                                                                         "Prod. Order Routing Line".SETRANGE(Status,"Prod. Order Line".Status);
                                                                         "Prod. Order Routing Line".SETRANGE("Prod. Order No.","Prod. Order Line"."Prod. Order No.");
                                                                         "Prod. Order Routing Line".SETRANGE("Routing Reference No.","Prod. Order Line"."Routing Reference No.");
                                                                         "Prod. Order Routing Line".SETRANGE("Routing No.","Prod. Order Line"."Routing No.");
                                                                       END;
                                                                        }

    { [{42E12411-2B5A-448E-AC24-60E515AF4C87}];5 ;OperationNo         ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Prod. Order Routing Line::Operation No. }

    { [{86CA14B5-EAF7-4A37-ADCC-ED8FB40C86E7}];5 ;PrevOperationNo     ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Prod. Order Routing Line::Previous Operation No. }

    { [{81A88AA3-07E1-43BF-B7A4-6F00E038BD51}];5 ;NextOperationNo     ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Prod. Order Routing Line::Next Operation No. }

    { [{18B3D9D2-AF1A-4FC6-887D-D01C4B34C189}];5 ;Type                ;Element ;Text    ;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                   Type := FORMAT("Prod. Order Routing Line".Type,0,'<Standard Format,2>');
                                                                               END;
                                                                                }

    { [{EB94E9B7-00C3-4ACA-A013-8A046684A77E}];5 ;No                  ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Prod. Order Routing Line::No. }

    { [{F784540D-2987-4607-ABDC-D0A19226E76D}];5 ;Description         ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=Prod. Order Routing Line::Description;
                                                  Export::OnBeforePassField=BEGIN
                                                                              CorrectText("Prod. Order Routing Line".Description);
                                                                            END;
                                                                             }

    { [{6A5760B3-0749-4BE3-919D-C2109F1FA635}];5 ;StartingDateTime    ;Element ;Text    ;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                   StartingDateTime :=
                                                                                     ProdSchedMgt.ConvertToDDMMYY("Prod. Order Routing Line"."Starting Date") + ' ' +
                                                                                     FORMAT("Prod. Order Routing Line"."Starting Time",0,'<Hours24,2>:<Minutes,2>:<Seconds,2>');
                                                                               END;

                                                  Export::OnBeforePassField=13 }

    { [{4DA529C6-89A7-4213-88CA-E126D7DF526D}];5 ;EndingDateTime      ;Element ;Text    ;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                   EndingDateTime :=
                                                                                     ProdSchedMgt.ConvertToDDMMYY("Prod. Order Routing Line"."Ending Date") + ' ' +
                                                                                     FORMAT("Prod. Order Routing Line"."Ending Time",0,'<Hours24,2>:<Minutes,2>:<Seconds,2>');
                                                                               END;
                                                                                }

    { [{B45E744B-449E-4AC7-A1F7-D2A17273EC50}];5 ;SetupTime           ;Element ;Field   ;
                                                  DataType=Decimal;
                                                  SourceField=Prod. Order Routing Line::Setup Time }

    { [{CC1EF84C-9198-47F2-A717-4B09D71F0C1E}];5 ;RunTime             ;Element ;Field   ;
                                                  DataType=Decimal;
                                                  SourceField=Prod. Order Routing Line::Run Time }

    { [{CD7B81DB-DD52-46DE-8BE5-C19964109F01}];5 ;RoutingStatus       ;Element ;Text    ;
                                                  VariableName=OperationStatus;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 OperationStatus := FORMAT("Prod. Order Routing Line"."Routing Status",0,'<Standard Format,2>');
                                                                               END;
                                                                                }

    { [{4D0B7734-D5A3-4FB7-A796-28189E223A79}];5 ;ProgressPercentage  ;Element ;Text    ;
                                                  Export::OnBeforePassVariable=VAR
                                                                                 CostCalcMgt@1000 : Codeunit 5836;
                                                                                 ProdOrderCapNeed@1001 : Record 5410;
                                                                               BEGIN
                                                                                   ProgressPercentage := CalcOperProgress(ProdSchedSetup."Progress Calculation");
                                                                               END;
                                                                                }

    { [{925ED0A6-AF4C-404A-846B-07F1F8F94962}];5 ;CapacityNeed        ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 CapacityNeed := FORMAT(ROUND(CalcStartEndDates.CalcCapacityNeed("Prod. Order Routing Line"),0.001),0,'<Integer><Decimals>');
                                                                                 CapacityNeed := DELCHR(CONVERTSTR(CapacityNeed,',.;:','    '),'=',' ');
                                                                               END;
                                                                                }

    { [{EFA934F1-58FF-4D25-96AB-BD2B6BBCA749}];6 ;DivideFactor        ;Attribute;Text   ;
                                                  VariableName=CapNeedDivideFactor;
                                                  Export::OnBeforePassVariable=VAR
                                                                                 ProdOrderCapNeed@1000 : Record 5410;
                                                                                 TotalAllocated@1001 : Decimal;
                                                                               BEGIN
                                                                                 CapNeedDivideFactor := ProdSchedMgt.DivideFactor(CalcStartEndDates.CalcCapacityNeed("Prod. Order Routing Line"));
                                                                               END;
                                                                                }

    { [{3E8841BB-0B8E-4414-9CD7-895A0724065A}];5 ;SubcontractorPurchaseOrderExist;Element;Text;
                                                  VariableName=SubcontractorPurchOrderExist;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 SubcontractorPurchOrderExist := FORMAT(FALSE,0,'<Number>');

                                                                                 IF "Prod. Order Routing Line".SubcontractPurchOrderExist THEN
                                                                                   SubcontractorPurchOrderExist := FORMAT(TRUE,0,'<Number>')
                                                                                 ELSE
                                                                                   SubcontractorPurchOrderExist := FORMAT(FALSE,0,'<Number>');
                                                                               END;
                                                                                }

    { [{023D5ACA-3385-46C6-8610-370BE6B16DFD}];5 ;Blocked             ;Element ;Text    ;
                                                  Export::OnBeforePassVariable=VAR
                                                                                 WorkCenter@1000 : Record 99000754;
                                                                                 MachineCenter@1001 : Record 99000758;
                                                                               BEGIN
                                                                                   CASE "Prod. Order Routing Line".Type OF
                                                                                     "Prod. Order Routing Line".Type::"Work Center":
                                                                                       BEGIN
                                                                                         WorkCenter.GET("Prod. Order Routing Line"."No.");
                                                                                         Blocked := FORMAT(WorkCenter.Blocked,0,'<Number>');
                                                                                       END;
                                                                                     "Prod. Order Routing Line".Type::"Machine Center":
                                                                                       BEGIN
                                                                                         MachineCenter.GET("Prod. Order Routing Line"."No.");
                                                                                         Blocked := FORMAT(MachineCenter.Blocked,0,'<Number>');
                                                                                       END;
                                                                                   END;
                                                                               END;
                                                                                }

    { [{136EFEC2-9EC0-4C2C-BEAD-D53D2D5ABB9C}];5 ;ProductionOrderDueDate;Element;Text   ;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                   ProductionOrderDueDate := ProdSchedMgt.ConvertToDDMMYY("Prod. Order Line"."Due Date");
                                                                               END;
                                                                                }

    { [{43289CDC-D707-41E3-9446-6749875800F2}];5 ;SendAhead           ;Element ;Text    ;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                   SendAhead := FORMAT(FALSE,0,'<Number>');

                                                                                   IF "Prod. Order Routing Line"."Send-Ahead Quantity" = 0 THEN
                                                                                     SendAhead := FORMAT(FALSE,0,'<Number>')
                                                                                   ELSE
                                                                                     SendAhead := FORMAT(TRUE,0,'<Number>');
                                                                               END;
                                                                                }

    { [{27EA37FB-578B-46E4-9284-C31761A4F50C}];5 ;RoutingReferenceNo  ;Element ;Field   ;
                                                  DataType=Integer;
                                                  SourceField=Prod. Order Routing Line::Routing Reference No. }

    { [{D6E25A5D-3376-4C02-AB81-8B80319143FF}];5 ;RoutingNo           ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Prod. Order Routing Line::Routing No. }

    { [{BA9818C2-E642-4D91-9F95-004E0F524326}];1 ;DeletedProductionOrders;Element;Text  ;
                                                  Export::OnBeforePassVariable=VAR
                                                                                 ProdOrder@1000 : Record 5405;
                                                                               BEGIN
                                                                               END;
                                                                                }

    { [{65D14BC8-7081-4D69-ACA4-79B39909D0C2}];2 ;ProductionOrder     ;Element ;Table   ;
                                                  VariableName=DeletedProdOrder;
                                                  SourceTable=Table5406;
                                                  Temporary=Yes;
                                                  MinOccurs=Zero;
                                                  Export::OnPreXMLItem=BEGIN
                                                                         DeletedProdOrder.MARKEDONLY(TRUE);
                                                                       END;
                                                                        }

    { [{7546BB25-C848-483F-B337-0B339CA787F7}];3 ;No                  ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=DeletedProdOrder::Prod. Order No. }

    { [{BE5F9C9B-2458-46ED-9C98-F7F4C793B338}];3 ;Status              ;Element ;Text    ;
                                                  VariableName=DeletedProdOrderStatus;
                                                  DataType=Option;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 DeletedProdOrderStatus := FORMAT(DeletedProdOrder.Status,0,'<Standard Format,2>');
                                                                               END;
                                                                                }

    { [{5A0465AC-7A58-491F-BB59-6E32D405D73C}];3 ;ProductionOrderLineNo;Element;Field   ;
                                                  DataType=Integer;
                                                  SourceField=DeletedProdOrder::Line No. }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Schedule Order;ESP=Orden de previsi¢n';
      Text001@1001 : TextConst 'ENU=Microsoft Dynamics NAV;ESP=Microsoft Dynamics NAV';
      Text002@1002 : TextConst 'ENU=Gantt;ESP=Gantt';
      ProdSchedSetup@1004 : Record 5500;
      CalcStartEndDates@1010 : Codeunit 5501;
      ProdSchedMgt@1005 : Codeunit 5500;
      CustName@1003 : Text[1024];
      FamilyOrderFlag@1009 : Boolean;
      xProdOrderNo@1008 : Code[20];
      xProdOrderStatus@1007 : 'Simulated,Planned,Firm Planned,Released,Finished';
      xRoutingNo@1006 : Code[20];

    PROCEDURE FindSalesOrders@10() SalesOrder : Text[1024];
    VAR
      OrderTrackingEntry@1003 : Record 99000799;
      SalesHeader@1000 : Record 36;
      TrackingMgt@1002 : Codeunit 99000778;
      Seperator@1001 : Text[30];
    BEGIN
      TrackingMgt.SetProdOrderLine("Prod. Order Line");

      SalesOrder := '';
      CustName := '';
      Seperator := '';
      IF TrackingMgt.FindRecordsWithoutMessage THEN BEGIN
        TrackingMgt.FindRecord('-',OrderTrackingEntry);
        REPEAT
          IF (OrderTrackingEntry."From Type" = 37) AND (OrderTrackingEntry."From Subtype" = 1) THEN BEGIN
            SalesOrder := SalesOrder + Seperator + OrderTrackingEntry."From ID";
            IF SalesHeader.GET(SalesHeader."Document Type"::Order, OrderTrackingEntry."From ID") THEN
              CustName := CustName + Seperator + SalesHeader."Sell-to Customer Name";
          END;
          Seperator := ',';
        UNTIL TrackingMgt.GetNextRecord(0,OrderTrackingEntry) = 0;
      END
    END;

    PROCEDURE CalcOperProgress@6(BasedOn@1000 : 'Output Time,Output Quantity') ProgressPercentage : Text[30];
    VAR
      ExportProdSched@1001 : XMLport 5500;
    BEGIN
      ProgressPercentage := '0';
      CASE BasedOn OF
        BasedOn::"Output Time":
          IF ("Prod. Order Routing Line"."Expected Capacity Need" <> 0) AND
             (ExportProdSched.CalcActOperOutputBase("Prod. Order Line","Prod. Order Routing Line") >= 0) THEN
            ProgressPercentage :=
              FORMAT((ExportProdSched.CalcActOperOutputBase("Prod. Order Line","Prod. Order Routing Line") /
              "Prod. Order Routing Line"."Expected Capacity Need") * 100,0,'<Precision,1:1><Standard Format,0>');
        BasedOn::"Output Quantity":
          IF ("Prod. Order Line".Quantity <> 0) AND
            (ExportProdSched.CalcActOperOutputQty("Prod. Order Line","Prod. Order Routing Line") >= 0) THEN
            ProgressPercentage :=
              FORMAT((ExportProdSched.CalcActOperOutputQty("Prod. Order Line","Prod. Order Routing Line") /
              "Prod. Order Line".Quantity) * 100,0,
              '<Precision,1:1><Standard Format,0>');
      END;
    END;

    PROCEDURE SetDeletedOrders@1(VAR TmpProdOrderLine@1000 : TEMPORARY Record 5406);
    BEGIN
      TmpProdOrderLine.MARKEDONLY(TRUE);

      IF TmpProdOrderLine.FIND('-') THEN
        REPEAT
          DeletedProdOrder := TmpProdOrderLine;
          DeletedProdOrder.MARK(TRUE);
          DeletedProdOrder.INSERT;
        UNTIL TmpProdOrderLine.NEXT = 0;
    END;

    PROCEDURE CorrectText@2(VAR Txt@1000 : Text[100]);
    VAR
      InvalidCharacters@1001 : Text[30];
    BEGIN
      InvalidCharacters := '<>&';
      Txt :=  CONVERTSTR(Txt,InvalidCharacters,PADSTR('',STRLEN(InvalidCharacters),' '));
    END;

    BEGIN
    END.
  }
}
