OBJECT XMLport 5500 Export Production Schedule
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Export Production Schedule;
               ESP=Exportar previsi¢n de producci¢n];
  }
  ELEMENTS
  {
    { [{6934BC46-783D-45B0-85FF-ECF6F3679E4F}];  ;NavisionGantt       ;Element ;Text     }

    { [{62A15455-A2FC-403A-93D2-B860D0D7EB77}];1 ;MessageHeader       ;Element ;Text     }

    { [{FD155C00-D79B-4971-82D2-0D9F6ED31078}];2 ;WorkDate            ;Element ;Text    ;
                                                  VariableName=WorkDate1 }

    { [{4FD1D0CF-E8B7-4776-910C-DFA110B1A347}];2 ;GanttStartingDate   ;Element ;Text    ;
                                                  Export::OnBeforePassField=12 }

    { [{9C9939E5-B7B3-4638-9552-BA565F79E1D0}];2 ;GanttEndingDate     ;Element ;Text     }

    { [{EFF64FBA-DDFC-4635-8469-B18A4671E4B5}];2 ;InitialOrder        ;Element ;Text     }

    { [{60DC0F21-CB7B-442C-9674-1AE1659E5AF3}];2 ;Editable            ;Element ;Text     }

    { [{F8D812E6-B8D4-4DC1-8F02-25A1B40D71E0}];2 ;InitialOrderStatus  ;Element ;Text     }

    { [{24D7FF60-8802-4DFA-AE85-2D154F2AB2D8}];2 ;Language            ;Element ;Text     }

    { [{775A2DCA-A544-4F57-870E-B476B8781DC5}];1 ;MessageBody         ;Element ;Text     }

    { [{6B0EA678-270C-47E8-8B42-8EFA1D259D17}];2 ;WorkCenters         ;Element ;Text     }

    { [{3AC909C5-C40D-4494-AA84-33195C664329}];3 ;WorkCenter          ;Element ;Table   ;
                                                  SourceTable=Table99000754;
                                                  MinOccurs=Zero }

    { [{E87A01A5-08E1-4D8C-A465-E9DAB283569B}];4 ;No                  ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Work Center::No.;
                                                  Export::OnBeforePassVariable=11 }

    { [{D9A4441D-A764-46EB-B9A0-A1BBE42FA0E0}];4 ;Name                ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=Work Center::Name;
                                                  Export::OnBeforePassField=BEGIN
                                                                              CorrectText("Work Center".Name);
                                                                            END;
                                                                             }

    { [{C0B8EFFD-EB7D-4AB2-A545-223616A90AC5}];4 ;UnitOfMeasureCode   ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Work Center::Unit of Measure Code }

    { [{62641731-F353-4988-BEAD-3A442B18F27C}];4 ;Calendar            ;Element ;Text    ;
                                                  VariableName=WorkCenterCalendar;
                                                  MinOccurs=Zero }

    { [{D8E1D592-794A-42E4-BEBA-1C52EAE18A2C}];5 ;CalendarEntry       ;Element ;Table   ;
                                                  SourceTable=Table99000757;
                                                  LinkFields=Field8=FIELD(Field1);
                                                  LinkTable=Work Center;
                                                  MinOccurs=Zero;
                                                  Export::OnPreXMLItem=BEGIN
                                                                         "Calendar Entry".SETRANGE("Capacity Type","Calendar Entry"."Capacity Type"::"Work Center");
                                                                         "Calendar Entry".SETRANGE("No.","Work Center"."No.");
                                                                         "Calendar Entry".SETRANGE(Date,CALCDATE(ProdSchedSetup."Starting Date",WORKDATE),CALCDATE(ProdSchedSetup."Ending Date",WORKDATE));
                                                                       END;

                                                  Export::OnAfterGetRecord=BEGIN
                                                                             IF ROUND(("Calendar Entry".Capacity - "Calendar Entry"."Absence Capacity") * "Calendar Entry".Efficiency / 100,0.001) = 0 THEN
                                                                               currXMLport.SKIP;
                                                                           END;
                                                                            }

    { [{E81A4B75-C04A-4DE7-B9C0-80D4DA9B9369}];6 ;Date                ;Element ;Text    ;
                                                  VariableName=WCDate;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 WCDate := ProdSchedMgt.ConvertToDDMMYY("Calendar Entry".Date);
                                                                               END;
                                                                                }

    { [{C227AFB8-B5A2-4567-A226-17DBABC5DB0B}];6 ;StartingTime        ;Element ;Text    ;
                                                  VariableName=WCStartingTime;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 WCStartingTime := FORMAT("Calendar Entry"."Starting Time",0,'<Hours24,2>:<Minutes,2>:<Seconds,2>');
                                                                               END;
                                                                                }

    { [{2B5833E7-985E-4BF7-BD15-637C2DE45707}];6 ;EndingTime          ;Element ;Text    ;
                                                  VariableName=WCEndingTime;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 WCEndingTime := FORMAT("Calendar Entry"."Ending Time",0,'<Hours24,2>:<Minutes,2>:<Seconds,2>');
                                                                               END;
                                                                                }

    { [{59DC1311-8875-4785-B08C-D488C43854DC}];6 ;EffectiveCapacity   ;Element ;Text    ;
                                                  VariableName=WorkCenterEffectiveCapacity;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 WorkCenterEffectiveCapacity :=
                                                                                   FORMAT(ROUND(("Calendar Entry".Capacity - "Calendar Entry"."Absence Capacity") *
                                                                                   "Calendar Entry".Efficiency / 100,0.001),0,'<Integer><Decimals>');
                                                                                 WorkCenterEffectiveCapacity :=  DELCHR(CONVERTSTR(WorkCenterEffectiveCapacity,',.;:','    '),'=',' ');
                                                                               END;
                                                                                }

    { [{8A797FF3-B619-4DE4-8454-8C65A1668052}];7 ;DivideFactor        ;Attribute;Text   ;
                                                  VariableName=WCDivideFactor;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 WCDivideFactor :=
                                                                                   ProdSchedMgt.DivideFactor(ROUND(("Calendar Entry".Capacity - "Calendar Entry"."Absence Capacity") *
                                                                                   "Calendar Entry".Efficiency / 100,0.001));
                                                                               END;
                                                                                }

    { [{00B79DDF-DF79-413B-8353-62A3427231C8}];4 ;MachineCenters      ;Element ;Text     }

    { [{0AB21B3C-A3FB-42D4-AFAD-9FAF43C5CC8A}];5 ;MachineCenter       ;Element ;Table   ;
                                                  SourceTable=Table99000758;
                                                  LinkFields=Field14=FIELD(Field1);
                                                  LinkTable=Work Center;
                                                  MinOccurs=Zero }

    { [{E1BD49FC-6BB0-4D62-B1F7-4ABE5D558511}];6 ;No                  ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Machine Center::No.;
                                                  Export::OnBeforePassVariable=16 }

    { [{73EE2785-79C7-41CD-8661-0999259932C6}];6 ;Name                ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=Machine Center::Name;
                                                  Export::OnBeforePassField=BEGIN
                                                                              CorrectText("Machine Center".Name);
                                                                            END;
                                                                             }

    { [{3438A5FA-F90C-49B4-BF0E-AD8FD00A018B}];6 ;Calendar            ;Element ;Text    ;
                                                  VariableName=MachineCenterCalendar }

    { [{776BD580-55FA-470B-BB1A-61F4EE818074}];7 ;CalendarEntry       ;Element ;Table   ;
                                                  VariableName=MCE;
                                                  SourceTable=Table99000757;
                                                  LinkFields=Field8=FIELD(Field1);
                                                  LinkTable=Work Center;
                                                  MinOccurs=Zero;
                                                  Export::OnPreXMLItem=BEGIN
                                                                         MCE.SETRANGE("Capacity Type","Calendar Entry"."Capacity Type"::"Machine Center");
                                                                         MCE.SETRANGE("No.","Machine Center"."No.");
                                                                         MCE.SETRANGE(Date,CALCDATE(ProdSchedSetup."Starting Date",WORKDATE),CALCDATE(ProdSchedSetup."Ending Date",WORKDATE));
                                                                       END;

                                                  Export::OnAfterGetRecord=BEGIN
                                                                             IF ROUND((MCE.Capacity - MCE."Absence Capacity") * MCE.Efficiency / 100,0.001) = 0 THEN
                                                                               currXMLport.SKIP;
                                                                           END;
                                                                            }

    { [{D169FDC3-34C7-42CA-B1D2-D11ADA322B3A}];8 ;Date                ;Element ;Text    ;
                                                  VariableName=MCDate;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 MCDate := ProdSchedMgt.ConvertToDDMMYY(MCE.Date);
                                                                               END;
                                                                                }

    { [{7670BFB9-1DE5-4BD3-BC67-D3256F371DAA}];8 ;StartingTime        ;Element ;Text    ;
                                                  VariableName=MCStartingTime;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 MCStartingTime := FORMAT(MCE."Starting Time",0,'<Hours24,2>:<Minutes,2>:<Seconds,2>');
                                                                               END;
                                                                                }

    { [{B20B3C20-D820-4ED3-A7DE-946FE3B9E804}];8 ;EndingTime          ;Element ;Text    ;
                                                  VariableName=MCEndingTime;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 MCEndingTime := FORMAT(MCE."Ending Time",0,'<Hours24,2>:<Minutes,2>:<Seconds,2>');
                                                                               END;
                                                                                }

    { [{C13B21A4-4F85-47E1-B14C-9B3CDAFFA99C}];8 ;EffectiveCapacity   ;Element ;Text    ;
                                                  VariableName=MachineCenterEffectiveCapacity;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 MachineCenterEffectiveCapacity :=
                                                                                   FORMAT(ROUND((MCE.Capacity - MCE."Absence Capacity") * MCE.Efficiency / 100,0.001),0,'<Integer><Decimals>');
                                                                                 MachineCenterEffectiveCapacity :=  DELCHR(CONVERTSTR(MachineCenterEffectiveCapacity,',.;:','    '),'=',' ');
                                                                               END;
                                                                                }

    { [{49797B30-5A6A-4ABE-A265-3FF104006467}];9 ;DivideFactor        ;Attribute;Text   ;
                                                  VariableName=MCDivideFactor;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 MCDivideFactor := ProdSchedMgt.DivideFactor(ROUND((MCE.Capacity - MCE."Absence Capacity") * MCE.Efficiency / 100,0.001));
                                                                               END;
                                                                                }

    { [{B89CACD6-EFAC-44C2-9639-4EDBC8045555}];2 ;ProductionOrders    ;Element ;Text    ;
                                                  Export::OnBeforePassVariable=VAR
                                                                                 ProdOrder@1000 : Record 5405;
                                                                               BEGIN
                                                                               END;
                                                                                }

    { [{DA559AFA-591E-4FDB-9F36-58CFDF6A8C86}];3 ;ProductionOrder     ;Element ;Table   ;
                                                  SourceTable=Table5406;
                                                  MinOccurs=Zero;
                                                  Export::OnPreXMLItem=BEGIN
                                                                         "Prod. Order Line".SETFILTER(
                                                                           Status,'%1|%2|%3',"Prod. Order Line".Status::Planned,"Prod. Order Line".Status::"Firm Planned",
                                                                           "Prod. Order Line".Status::Released);
                                                                         "Prod. Order Line".SETRANGE("Starting Date",0D,CALCDATE(ProdSchedSetup."Ending Date",WORKDATE));
                                                                         "Prod. Order Line".SETRANGE("Ending Date",CALCDATE(ProdSchedSetup."Starting Date",WORKDATE),31129999D);
                                                                       END;

                                                  Export::OnAfterGetRecord=BEGIN
                                                                             IF (xProdOrderNo = "Prod. Order Line"."Prod. Order No.") AND (xProdOrderStatus = "Prod. Order Line".Status) AND
                                                                                ("Prod. Order Line"."Routing Reference No." = 0) AND (xRoutingNo = "Prod. Order Line"."Routing No.")
                                                                             THEN
                                                                               FamilyOrderFlag := TRUE
                                                                             ELSE
                                                                               FamilyOrderFlag := FALSE;

                                                                             IF FamilyOrderFlag THEN
                                                                               currXMLport.SKIP;

                                                                             xProdOrderNo := "Prod. Order Line"."Prod. Order No.";
                                                                             xProdOrderStatus := "Prod. Order Line".Status;
                                                                             xRoutingNo := "Prod. Order Line"."Routing No.";
                                                                           END;
                                                                            }

    { [{28486AA8-D176-472D-96DD-0DEB88C0EAB7}];4 ;No                  ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Prod. Order Line::Prod. Order No. }

    { [{5B9DAE73-20A5-4AA3-8DEF-FE8CA6BB42AA}];4 ;ItemName            ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=Prod. Order Line::Description;
                                                  Export::OnBeforePassField=BEGIN
                                                                              CorrectText("Prod. Order Line".Description);
                                                                            END;
                                                                             }

    { [{E3DA1BC5-3213-4044-9FF5-A7C163E82771}];4 ;Status              ;Element ;Text    ;
                                                  VariableName=ProdOrderLineStatus;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 ProdOrderLineStatus := FORMAT("Prod. Order Line".Status,0,'<Standard Format,2>');
                                                                               END;
                                                                                }

    { [{F54CBDE3-6D61-4023-9B49-B5CAE8C0C0D5}];4 ;SalesOrderNo        ;Element ;Text    ;
                                                  Export::OnBeforePassVariable=VAR
                                                                                 ProdOrder@1000 : Record 5405;
                                                                               BEGIN
                                                                                   SalesOrderNo := FindSalesOrders;
                                                                               END;
                                                                                }

    { [{8C7289C6-568B-4698-A198-7E1F8F88114B}];4 ;DueDate             ;Element ;Text    ;
                                                  VariableName=ProdOrderLineDueDate;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 ProdOrderLineDueDate := ProdSchedMgt.ConvertToDDMMYY("Prod. Order Line"."Due Date");
                                                                               END;
                                                                                }

    { [{49701B14-B737-449C-A563-53C15D686C5D}];4 ;CustomerName        ;Element ;Text    ;
                                                  Export::OnBeforePassVariable=VAR
                                                                                 SalesHeader@1000 : Record 36;
                                                                               BEGIN
                                                                                 CustomerName := CustName;
                                                                                 CorrectText(CustomerName);
                                                                               END;
                                                                                }

    { [{E97D05D1-4B1A-4215-85DC-E6059A115370}];4 ;ItemNo              ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Prod. Order Line::Item No. }

    { [{548BEE3C-97CF-41F4-B14B-E39EDA32BAB2}];4 ;Quantity            ;Element ;Field   ;
                                                  DataType=Decimal;
                                                  SourceField=Prod. Order Line::Quantity;
                                                  Export::OnBeforePassVariable=26 }

    { [{95E7E14B-124E-4AEC-8ADE-C239F1B0F330}];4 ;UnitOfMeasure       ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Prod. Order Line::Unit of Measure Code }

    { [{9D1BB725-A59C-4A06-BAFE-3A752A0A4871}];4 ;ProductionOrderLineNo;Element;Field   ;
                                                  DataType=Integer;
                                                  SourceField=Prod. Order Line::Line No. }

    { [{39299F79-EB6E-49F6-8B17-FE7D6404680B}];4 ;Routing             ;Element ;Text     }

    { [{69817871-E041-488A-9070-B885502AF07B}];5 ;Operation           ;Element ;Table   ;
                                                  SourceTable=Table5409;
                                                  LinkFields=Field1=FIELD(Field61);
                                                  LinkTable=Prod. Order Line;
                                                  MinOccurs=Zero;
                                                  Export::OnPreXMLItem=BEGIN
                                                                         "Prod. Order Routing Line".SETRANGE(Status,"Prod. Order Line".Status);
                                                                         "Prod. Order Routing Line".SETRANGE("Prod. Order No.","Prod. Order Line"."Prod. Order No.");
                                                                         "Prod. Order Routing Line".SETRANGE("Routing Reference No.","Prod. Order Line"."Routing Reference No.");
                                                                         "Prod. Order Routing Line".SETRANGE("Routing No.","Prod. Order Line"."Routing No.");
                                                                       END;
                                                                        }

    { [{42E12411-2B5A-448E-AC24-60E515AF4C87}];6 ;OperationNo         ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Prod. Order Routing Line::Operation No. }

    { [{86CA14B5-EAF7-4A37-ADCC-ED8FB40C86E7}];6 ;PrevOperationNo     ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Prod. Order Routing Line::Previous Operation No. }

    { [{81A88AA3-07E1-43BF-B7A4-6F00E038BD51}];6 ;NextOperationNo     ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Prod. Order Routing Line::Next Operation No. }

    { [{18B3D9D2-AF1A-4FC6-887D-D01C4B34C189}];6 ;Type                ;Element ;Text    ;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                   Type := FORMAT("Prod. Order Routing Line".Type,0,'<Standard Format,2>');
                                                                               END;
                                                                                }

    { [{EB94E9B7-00C3-4ACA-A013-8A046684A77E}];6 ;No                  ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Prod. Order Routing Line::No. }

    { [{F784540D-2987-4607-ABDC-D0A19226E76D}];6 ;Description         ;Element ;Field   ;
                                                  DataType=Text;
                                                  SourceField=Prod. Order Routing Line::Description }

    { [{6A5760B3-0749-4BE3-919D-C2109F1FA635}];6 ;StartingDateTime    ;Element ;Text    ;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                   StartingDateTime :=
                                                                                     ProdSchedMgt.ConvertToDDMMYY("Prod. Order Routing Line"."Starting Date") + ' ' +
                                                                                     FORMAT("Prod. Order Routing Line"."Starting Time",0,'<Hours24,2>:<Minutes,2>:<Seconds,2>');
                                                                               END;

                                                  Export::OnBeforePassField=13 }

    { [{4DA529C6-89A7-4213-88CA-E126D7DF526D}];6 ;EndingDateTime      ;Element ;Text    ;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                   EndingDateTime :=
                                                                                     ProdSchedMgt.ConvertToDDMMYY("Prod. Order Routing Line"."Ending Date") + ' ' +
                                                                                     FORMAT("Prod. Order Routing Line"."Ending Time",0,'<Hours24,2>:<Minutes,2>:<Seconds,2>');
                                                                               END;
                                                                                }

    { [{B45E744B-449E-4AC7-A1F7-D2A17273EC50}];6 ;SetupTime           ;Element ;Field   ;
                                                  DataType=Decimal;
                                                  SourceField=Prod. Order Routing Line::Setup Time }

    { [{CC1EF84C-9198-47F2-A717-4B09D71F0C1E}];6 ;RunTime             ;Element ;Field   ;
                                                  DataType=Decimal;
                                                  SourceField=Prod. Order Routing Line::Run Time }

    { [{CD7B81DB-DD52-46DE-8BE5-C19964109F01}];6 ;RoutingStatus       ;Element ;Text    ;
                                                  VariableName=OPStatus;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 OPStatus := FORMAT("Prod. Order Routing Line"."Routing Status",0,'<Standard Format,2>');
                                                                               END;
                                                                                }

    { [{4D0B7734-D5A3-4FB7-A796-28189E223A79}];6 ;ProgressPercentage  ;Element ;Text    ;
                                                  Export::OnBeforePassVariable=VAR
                                                                                 CostCalcMgt@1000 : Codeunit 5836;
                                                                                 ProdOrderCapNeed@1001 : Record 5410;
                                                                               BEGIN
                                                                                   ProgressPercentage := CalcOperProgress(ProdSchedSetup."Progress Calculation");
                                                                               END;
                                                                                }

    { [{925ED0A6-AF4C-404A-846B-07F1F8F94962}];6 ;CapacityNeed        ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 CapacityNeed := FORMAT(ROUND(ProdSchedCalc.CalcCapacityNeed("Prod. Order Routing Line"),0.001),0,'<Integer><Decimals>');
                                                                                 CapacityNeed := DELCHR(CONVERTSTR(CapacityNeed,',.;:','    '),'=',' ');
                                                                               END;
                                                                                }

    { [{EFA934F1-58FF-4D25-96AB-BD2B6BBCA749}];7 ;DivideFactor        ;Attribute;Text   ;
                                                  VariableName=CapNeedDivideFactor;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 CapNeedDivideFactor := ProdSchedMgt.DivideFactor(ProdSchedCalc.CalcCapacityNeed("Prod. Order Routing Line"));
                                                                               END;
                                                                                }

    { [{3E8841BB-0B8E-4414-9CD7-895A0724065A}];6 ;SubcontractorPurchaseOrderExist;Element;Text;
                                                  VariableName=SubcontractorPurchOrderExist;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 SubcontractorPurchOrderExist := FORMAT(FALSE,0,'<Number>');

                                                                                 IF "Prod. Order Routing Line".SubcontractPurchOrderExist THEN
                                                                                   SubcontractorPurchOrderExist := FORMAT(TRUE,0,'<Number>')
                                                                                 ELSE
                                                                                   SubcontractorPurchOrderExist := FORMAT(FALSE,0,'<Number>');
                                                                               END;
                                                                                }

    { [{023D5ACA-3385-46C6-8610-370BE6B16DFD}];6 ;Blocked             ;Element ;Text    ;
                                                  Export::OnBeforePassVariable=VAR
                                                                                 WorkCenter@1000 : Record 99000754;
                                                                                 MachineCenter@1001 : Record 99000758;
                                                                               BEGIN
                                                                                   CASE "Prod. Order Routing Line".Type OF
                                                                                     "Prod. Order Routing Line".Type::"Work Center":
                                                                                       BEGIN
                                                                                         WorkCenter.GET("Prod. Order Routing Line"."No.");
                                                                                         Blocked := FORMAT(WorkCenter.Blocked,0,'<Number>');
                                                                                       END;
                                                                                     "Prod. Order Routing Line".Type::"Machine Center":
                                                                                       BEGIN
                                                                                         MachineCenter.GET("Prod. Order Routing Line"."No.");
                                                                                         Blocked := FORMAT(MachineCenter.Blocked,0,'<Number>');
                                                                                       END;
                                                                                   END;
                                                                               END;
                                                                                }

    { [{136EFEC2-9EC0-4C2C-BEAD-D53D2D5ABB9C}];6 ;ProductionOrderDueDate;Element;Text   ;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                   ProductionOrderDueDate := ProdSchedMgt.ConvertToDDMMYY("Prod. Order Line"."Due Date");
                                                                               END;
                                                                                }

    { [{43289CDC-D707-41E3-9446-6749875800F2}];6 ;SendAhead           ;Element ;Text    ;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                   SendAhead := FORMAT(FALSE,0,'<Number>');

                                                                                   IF "Prod. Order Routing Line"."Send-Ahead Quantity" = 0 THEN
                                                                                     SendAhead := FORMAT(FALSE,0,'<Number>')
                                                                                   ELSE
                                                                                     SendAhead := FORMAT(TRUE,0,'<Number>');
                                                                               END;
                                                                                }

    { [{27EA37FB-578B-46E4-9284-C31761A4F50C}];6 ;RoutingReferenceNo  ;Element ;Field   ;
                                                  DataType=Integer;
                                                  SourceField=Prod. Order Routing Line::Routing Reference No. }

    { [{D6E25A5D-3376-4C02-AB81-8B80319143FF}];6 ;RoutingNo           ;Element ;Field   ;
                                                  DataType=Code;
                                                  SourceField=Prod. Order Routing Line::Routing No. }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      ProdSchedSetup@1007 : Record 5500;
      ProdSchedCalc@1006 : Codeunit 5501;
      ProdSchedMgt@1004 : Codeunit 5500;
      CustName@1003 : Text[1024];
      FamilyOrderFlag@1000 : Boolean;
      xProdOrderNo@1001 : Code[20];
      xProdOrderStatus@1002 : 'Simulated,Planned,Firm Planned,Released,Finished';
      xRoutingNo@1005 : Code[20];

    PROCEDURE InitializeHeader@1(ProdOrder@1000 : Record 5405;Edit@1001 : Boolean);
    VAR
      Lang@1002 : Record 2000000045;
    BEGIN
      ProdSchedSetup.GET;

      WorkDate1 := ProdSchedMgt.ConvertToDDMMYY(WORKDATE);
      GanttStartingDate := ProdSchedMgt.ConvertToDDMMYY(CALCDATE(ProdSchedSetup."Starting Date",WORKDATE));
      GanttEndingDate := ProdSchedMgt.ConvertToDDMMYY(CALCDATE(ProdSchedSetup."Ending Date",WORKDATE));
      InitialOrder := ProdOrder."No.";
      InitialOrderStatus := FORMAT(ProdOrder.Status,0,'<Standard Format,2>');
      Editable := FORMAT(Edit,0,'<Number>');
      IF Lang.GET(GLOBALLANGUAGE) THEN
        Language := Lang."Abbreviated Name";
    END;

    PROCEDURE FindSalesOrders@10() SalesOrder : Text[1024];
    VAR
      OrderTrackingEntry@1003 : Record 99000799;
      SalesHeader@1000 : Record 36;
      TrackingMgt@1002 : Codeunit 99000778;
      Seperator@1001 : Text[30];
    BEGIN
      TrackingMgt.SetProdOrderLine("Prod. Order Line");

      SalesOrder := '';
      CustName := '';
      Seperator := '';
      IF TrackingMgt.FindRecordsWithoutMessage THEN BEGIN
        TrackingMgt.FindRecord('-',OrderTrackingEntry);
        REPEAT
          IF (OrderTrackingEntry."From Type" = 37) AND (OrderTrackingEntry."From Subtype" = 1) THEN BEGIN
            SalesOrder := SalesOrder + Seperator + OrderTrackingEntry."From ID";
            IF SalesHeader.GET(SalesHeader."Document Type"::Order, OrderTrackingEntry."From ID") THEN
              CustName := CustName + Seperator + SalesHeader."Sell-to Customer Name";
          END;
          Seperator := ',';
        UNTIL TrackingMgt.GetNextRecord(0,OrderTrackingEntry) = 0;
      END
    END;

    PROCEDURE CalcOperProgress@6(BasedOn@1000 : 'Output Time,Output Quantity') ProgressPercentage : Text[30];
    VAR
      CostCalcMgt@1002 : Codeunit 5836;
    BEGIN
      ProgressPercentage := '0';
      CASE BasedOn OF
        BasedOn::"Output Time":
          IF ("Prod. Order Routing Line"."Expected Capacity Need" <> 0) AND
             (CalcActOperOutputBase("Prod. Order Line","Prod. Order Routing Line") >= 0) THEN
            ProgressPercentage :=
              FORMAT((CalcActOperOutputBase("Prod. Order Line","Prod. Order Routing Line") /
              "Prod. Order Routing Line"."Expected Capacity Need") * 100,0,'<Precision,1:1><Standard Format,0>');
        BasedOn::"Output Quantity":
          IF ("Prod. Order Line".Quantity <> 0) AND
             (CalcActOperOutputQty("Prod. Order Line","Prod. Order Routing Line") >= 0) THEN
            ProgressPercentage :=
              FORMAT((CalcActOperOutputQty("Prod. Order Line","Prod. Order Routing Line") /
              "Prod. Order Line".Quantity) * 100,0,'<Precision,1:1><Standard Format,0>');
      END;
    END;

    PROCEDURE CalcActOperOutputBase@5(ProdOrderLine@1002 : Record 5406;ProdOrderRtngLine@1001 : Record 5409) : Decimal;
    VAR
      CapLedgEntry@1000 : Record 5832;
    BEGIN
      WITH CapLedgEntry DO BEGIN
        IF ProdOrderLine.Status < ProdOrderLine.Status::Released THEN
          EXIT(0);

        SETCURRENTKEY("Prod. Order No.","Prod. Order Line No.","Routing No.","Routing Reference No.","Operation No.");
        SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
        SETRANGE("Routing No.",ProdOrderRtngLine."Routing No.");
        SETRANGE("Routing Reference No.",ProdOrderRtngLine."Routing Reference No.");
        SETRANGE("Operation No.",ProdOrderRtngLine."Operation No.");
        CALCSUMS(Quantity);
        EXIT(Quantity);
      END;
    END;

    PROCEDURE CalcActOperOutputQty@3(ProdOrderLine@1002 : Record 5406;ProdOrderRtngLine@1001 : Record 5409) OutputQty : Decimal;
    VAR
      CapLedgEntry@1000 : Record 5832;
    BEGIN
      WITH CapLedgEntry DO BEGIN
        IF ProdOrderLine.Status < ProdOrderLine.Status::Released THEN
          EXIT(0);

        SETCURRENTKEY("Prod. Order No.","Prod. Order Line No.","Routing No.","Routing Reference No.","Operation No.");
        SETRANGE("Prod. Order No.",ProdOrderLine."Prod. Order No.");
        SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
        SETRANGE("Routing No.",ProdOrderRtngLine."Routing No.");
        SETRANGE("Routing Reference No.",ProdOrderRtngLine."Routing Reference No.");
        SETRANGE("Operation No.",ProdOrderRtngLine."Operation No.");
        IF FIND('-') THEN
          REPEAT
            OutputQty := OutputQty + "Output Quantity";
          UNTIL NEXT = 0;

        EXIT(OutputQty);
      END;
    END;

    PROCEDURE CorrectText@2(VAR Txt@1000 : Text[250]);
    VAR
      InvalidCharacters@1001 : Text[30];
    BEGIN
      InvalidCharacters := '<>&';
      Txt :=  CONVERTSTR(Txt,InvalidCharacters,PADSTR('',STRLEN(InvalidCharacters),' '));
    END;

    BEGIN
    END.
  }
}
